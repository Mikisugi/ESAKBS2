
nioseclipse.elf:     file format elf32-littlenios2
nioseclipse.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000f670 memsz 0x0000f670 flags r-x
    LOAD off    0x00010690 vaddr 0x0000f690 paddr 0x00011578 align 2**12
         filesz 0x00001ee8 memsz 0x00001ee8 flags rw-
    LOAD off    0x00013460 vaddr 0x00013460 paddr 0x00013460 align 2**12
         filesz 0x00000000 memsz 0x000073dc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f128  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000320  0000f370  0000f370  00010370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ee8  0000f690  00011578  00010690  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000073dc  00013460  00013460  00013460  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  0001a83c  0001a83c  00012578  2**0
                  CONTENTS
  7 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  00012578  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00012578  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000bf0  00000000  00000000  000125a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00021ca6  00000000  00000000  00013190  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00007f77  00000000  00000000  00034e36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009ae9  00000000  00000000  0003cdad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002d28  00000000  00000000  00046898  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004256  00000000  00000000  000495c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004a4c  00000000  00000000  0004d816  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  00052264  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000680  00000000  00000000  00052288  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  000572a2  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  000572a8  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000572ad  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000572ae  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000572af  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000572b3  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000572b7  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000572bb  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000572c4  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000572cd  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000572d6  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000061  00000000  00000000  000572e1  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abe3  00000000  00000000  00057342  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001ae257  00000000  00000000  00061f25  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
0000f370 l    d  .rodata	00000000 .rodata
0000f690 l    d  .rwdata	00000000 .rwdata
00013460 l    d  .bss	00000000 .bss
0001a83c l    d  .SDRAM	00000000 .SDRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/Artee/Documents/ESAKBS2/nioseclipse_bsp//obj/HAL/src/crt0.o
00000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
0000050c l     F .text	00000008 __fp_unlock
00000520 l     F .text	0000019c __sinit.part.1
000006bc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000f690 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
00003168 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00003274 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000032a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000338c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000346c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00003558 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00003724 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000114ec l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00003970 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
000114f0 l     O .rwdata	00000004 lockid
00013480 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
000114f4 l     O .rwdata	00000004 lockid
00013488 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
000053a0 l     F .text	00000048 OS_InitMisc
000053e8 l     F .text	0000006c OS_InitRdyList
00005554 l     F .text	000000e4 OS_InitTCBList
000052c0 l     F .text	000000e0 OS_InitEventList
00005454 l     F .text	00000080 OS_InitTaskIdle
000054d4 l     F .text	00000080 OS_InitTaskStat
000057c4 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
000074e4 l     F .text	000000f4 OS_FlagTaskRdy
000072a4 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000b594 l     F .text	00000034 alt_dev_reg
00010064 l     O .rwdata	0000106c JTAG_UART
000110d0 l     O .rwdata	00000030 AV_Config
00011100 l     O .rwdata	00000030 Audio_Subsystem_Audio
00011130 l     O .rwdata	0000002c Char_LCD_16x2
0001115c l     O .rwdata	0000002c IrDA
00011188 l     O .rwdata	0000002c Expansion_JP5
000111b4 l     O .rwdata	0000002c Green_LEDs
000111e0 l     O .rwdata	0000002c HEX3_HEX0
0001120c l     O .rwdata	0000002c HEX7_HEX4
00011238 l     O .rwdata	0000002c Pushbuttons
00011264 l     O .rwdata	0000002c Red_LEDs
00011290 l     O .rwdata	0000002c Slider_Switches
000112bc l     O .rwdata	00000038 PS2_Port
000112f4 l     O .rwdata	00000038 PS2_Port_Dual
0001132c l     O .rwdata	0000002c Serial_Port
00011358 l     O .rwdata	00000034 USB
0001138c l     O .rwdata	0000005c VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA
000113e8 l     O .rwdata	0000005c Video_In_Subsystem_Video_In_DMA
00011444 l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
00011498 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000c0b4 l     F .text	000002a8 altera_avalon_jtag_uart_irq
0000c35c l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000cb38 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000e034 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000e298 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000e558 l     F .text	0000003c alt_get_errno
0000e594 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000134ec g     O .bss	00000004 alt_instruction_exception_handler
00011542 g     O .rwdata	00000002 OSTaskNameSize
00002f60 g     F .text	00000054 _isatty_r
00003668 g     F .text	000000bc alt_main
000003a0 g     F .text	000000c0 _puts_r
0001a73c g     O .bss	00000100 alt_irq
0000d6f4 g     F .text	00000060 alt_up_ps2_disable_read_interrupt
00002c88 g     F .text	00000060 _lseek_r
00007d04 g     F .text	000000cc OS_MemInit
00011578 g       *ABS*	00000000 __flash_rwdata_start
0000b534 g     F .text	00000060 OSTimeSet
0000cc9c g     F .text	00000040 alt_up_character_lcd_send_cmd
00004014 g     F .text	00000610 OSEventPendMulti
0001a83c g       *ABS*	00000000 __alt_heap_start
0000eba0 g     F .text	00000024 OSTaskCreateHook
00013518 g     O .bss	00002000 task1_stk
0001151a g     O .rwdata	00000002 OSMboxEn
0000467c g     F .text	0000004c OSIntEnter
0000223c g     F .text	0000005c __sseek
0000085c g     F .text	00000010 __sinit
0000d50c g     F .text	00000034 read_CE_bit
0001152a g     O .rwdata	00000002 OSQEn
000006c4 g     F .text	00000068 __sfmoreglue
00003ce8 g     F .text	000000cc __malloc_unlock
0000ec08 g     F .text	00000020 OSTaskStatHook
0000d894 g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
0000dd88 g     F .text	00000090 alt_up_rs232_read_fd
00013490 g     O .bss	00000001 OSLockNesting
00011568 g     O .rwdata	00000002 OSDataSize
00013491 g     O .bss	00000001 OSRunning
00001928 g     F .text	0000015c memmove
0000ec48 g     F .text	00000020 OSInitHookBegin
00011560 g     O .rwdata	00000002 OSTmrSize
00000844 g     F .text	00000018 _cleanup
00013494 g     O .bss	00000004 OSIdleCtr
0000e950 g     F .text	00000024 altera_nios2_gen2_irq_init
0000ea20 g       .text	00000000 OSStartTsk
0000cc28 g     F .text	00000074 get_DDRAM_addr
00005b04 g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
00011566 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
00011506 g     O .rwdata	00000002 OSEventSize
00013498 g     O .bss	00000001 OSPrioHighRdy
00002f04 g     F .text	0000005c _fstat_r
0000ebc4 g     F .text	00000024 OSTaskDelHook
0001346c g     O .bss	00000004 errno
000021b8 g     F .text	00000008 __seofread
0000ea00 g       .text	00000000 OSStartHighRdy
00009fd0 g     F .text	000001e4 OSTaskCreateExt
00006dec g     F .text	00000060 OSFlagPendGetFlagsRdy
00011546 g     O .rwdata	00000002 OSTaskStatStkSize
00005f68 g     F .text	00000308 OSFlagAccept
0000833c g     F .text	000000b8 OSQFlush
00007dd0 g     F .text	00000140 OSQAccept
00013478 g     O .bss	00000004 alt_argv
000194c4 g       *ABS*	00000000 _gp
00009e24 g     F .text	000001ac OSTaskCreate
00009934 g     F .text	000004f0 OSTaskChangePrio
0001348c g     O .bss	00000004 alt_heapsem
00005dd8 g     F .text	00000190 OSDebugInit
0000a1b4 g     F .text	00000344 OSTaskDel
0000fee4 g     O .rwdata	00000180 alt_fd_list
00017518 g     O .bss	00000370 OSFlagTbl
000050a0 g     F .text	000000b8 OS_EventTaskRemove
0000e1d4 g     F .text	00000090 alt_find_dev
000017e0 g     F .text	00000148 memcpy
00011530 g     O .rwdata	00000002 OSRdyTblSize
0000ce44 g     F .text	00000050 alt_up_character_lcd_write_fd
00000514 g     F .text	0000000c _cleanup_r
0000e35c g     F .text	0000007c alt_io_redirect
0000f370 g       *ABS*	00000000 __DTOR_END__
0000d3dc g     F .text	00000090 alt_up_irda_write_fd
0000dd14 g     F .text	00000074 alt_up_rs232_read_data
00000460 g     F .text	00000014 puts
0000ef40 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00003db4 g     F .text	00000120 OSEventNameGet
00011514 g     O .rwdata	00000002 OSFlagMax
000046c8 g     F .text	000000f8 OSIntExit
0001154e g     O .rwdata	00000002 OSTCBSize
00013499 g     O .bss	00000001 OSPrioCur
0000d1d8 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
0000c5b8 g     F .text	000002bc altera_avalon_jtag_uart_read
000030ac g     F .text	00000064 .hidden __udivsi3
000033c8 g     F .text	000000a4 isatty
00011534 g     O .rwdata	00000002 OSStkWidth
00011528 g     O .rwdata	00000002 OSPtrSize
00011508 g     O .rwdata	00000002 OSEventTblSize
0000d178 g     F .text	00000060 alt_up_irda_disable_read_interrupt
0000e974 g       .text	00000000 OSCtxSw
0000eeb0 g     F .text	00000090 alt_icache_flush
00013468 g     O .bss	00000004 __malloc_top_pad
0001349c g     O .bss	00000004 OSTCBList
00013470 g     O .bss	00000004 alt_fd_list_lock
000008ac g     F .text	000004bc __sfvwrite_r
00017888 g     O .bss	00000c30 OSMemTbl
000134a0 g     O .bss	00000001 OSTickStepState
00002110 g     F .text	00000054 _sbrk_r
0001152c g     O .rwdata	00000002 OSQMax
000184b8 g     O .bss	00000800 OSTaskStatStk
00007940 g     F .text	000000f0 OSMemNameGet
0001150c g     O .rwdata	00000002 OSFlagEn
00002ea4 g     F .text	00000060 _read_r
00011552 g     O .rwdata	00000002 OSTimeTickHookEn
000087ec g     F .text	00000168 OSQPost
000075d8 g     F .text	000000a4 OS_FlagUnlink
000114e4 g     O .rwdata	00000004 alt_max_fd
0000dc90 g     F .text	00000044 alt_up_rs232_check_parity
0000568c g     F .text	00000068 OS_MemCopy
000056f4 g     F .text	000000d0 OS_Sched
000024a8 g     F .text	000000f0 _fclose_r
00007850 g     F .text	000000f0 OSMemGet
0000a7e0 g     F .text	000001b4 OSTaskNameSet
0000d540 g     F .text	00000030 read_num_bytes_available
00002824 g     F .text	00000030 fflush
00013464 g     O .bss	00000004 __malloc_max_sbrked_mem
000134a4 g     O .bss	00000004 OSCtxSwCtr
0000ec28 g     F .text	00000020 OSTimeTickHook
0000e3d8 g     F .text	00000180 alt_irq_register
00011516 g     O .rwdata	00000002 OSFlagNameSize
0000d4a8 g     F .text	00000034 read_RI_bit
00005158 g     F .text	00000100 OS_EventTaskRemoveMulti
00004f50 g     F .text	00000150 OS_EventTaskWaitMulti
0001152e g     O .rwdata	00000002 OSQSize
00003594 g     F .text	000000d4 lseek
0000929c g     F .text	0000020c OSSemPend
000114c4 g     O .rwdata	00000004 _global_impure_ptr
00001bac g     F .text	00000564 _realloc_r
00011518 g     O .rwdata	00000002 OSLowestPrio
0001a83c g       *ABS*	00000000 __bss_end
0000eca8 g     F .text	00000024 OSTCBInitHook
0001155e g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0000e848 g     F .text	00000108 alt_tick
00011500 g     O .rwdata	00000002 OSEventEn
0001155a g     O .rwdata	00000002 OSTmrCfgNameSize
0000d5a4 g     F .text	0000002c read_data_byte
0000087c g     F .text	00000018 __fp_lock_all
00007404 g     F .text	000000e0 OS_FlagInit
0000e7ac g     F .text	0000009c alt_alarm_stop
0000d4dc g     F .text	00000030 read_RE_bit
0001153c g     O .rwdata	00000002 OSTaskIdleStkSize
000134e0 g     O .bss	00000004 alt_irq_active
00008ed4 g     F .text	000000b0 OSSemAccept
00007b44 g     F .text	000000d8 OSMemPut
0000767c g     F .text	000001d4 OSMemCreate
000134a8 g     O .bss	00000004 OSIdleCtrMax
0000d218 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d8 alt_irq_handler
0000febc g     O .rwdata	00000028 alt_dev_null
00011550 g     O .rwdata	00000002 OSTicksPerSec
0000d0e4 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
0000e974 g       .text	00000000 OSIntCtxSw
0000d754 g     F .text	00000074 alt_up_ps2_write_data_byte
0000e014 g     F .text	00000020 alt_dcache_flush_all
000134ac g     O .bss	00000004 OSTCBFreeList
00011578 g       *ABS*	00000000 __ram_rwdata_end
000094a8 g     F .text	0000016c OSSemPendAbort
000114dc g     O .rwdata	00000008 alt_dev_list
000039ac g     F .text	000000f8 write
00011554 g     O .rwdata	00000002 OSVersionNbr
0000f690 g       *ABS*	00000000 __ram_rodata_end
000032dc g     F .text	000000b0 fstat
0000de18 g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
000114fc g     O .rwdata	00000004 OSEndiannessTest
00003110 g     F .text	00000058 .hidden __umodsi3
0001150e g     O .rwdata	00000002 OSFlagGrpSize
0001a83c g       *ABS*	00000000 end
0000da84 g     F .text	00000098 alt_up_ps2_write_fd
0000d254 g     F .text	00000044 alt_up_irda_check_parity
0000bf78 g     F .text	0000013c altera_avalon_jtag_uart_init
0000595c g     F .text	000000dc OS_TaskStat
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
0000f370 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0000cbb4 g     F .text	00000074 alt_avalon_timer_sc_init
0000c874 g     F .text	000002c4 altera_avalon_jtag_uart_write
0000086c g     F .text	00000004 __sfp_lock_acquire
000016fc g     F .text	000000e4 memchr
00005638 g     F .text	00000054 OS_MemClr
0000cd50 g     F .text	0000007c alt_up_character_lcd_write
0000ea44 g     F .text	0000015c OSTaskStkInit
00000284 g     F .text	00000038 task1
00002978 g     F .text	00000310 _free_r
00004ca8 g     F .text	00000198 OS_EventTaskRdy
0000f1bc g     F .text	00000180 __call_exitprocs
000134b0 g     O .bss	00000001 OSCPUUsage
000114cc g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000003c _start
000002bc g     F .text	00000038 task2
000134e4 g     O .bss	00000004 _alt_tick_rate
000083f4 g     F .text	0000028c OSQPend
0000b0a0 g     F .text	00000104 OSTimeDly
000134e8 g     O .bss	00000004 _alt_nticks
00003760 g     F .text	000000fc read
0000b600 g     F .text	00000814 alt_sys_init
0000cf94 g     F .text	0000008c alt_up_character_lcd_shift_display
0000f0a4 g     F .text	00000118 __register_exitproc
000134b1 g     O .bss	00000001 OSTaskCtr
0000d9a0 g     F .text	00000058 alt_up_ps2_clear_fifo
0000dc54 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
0000b1a4 g     F .text	00000160 OSTimeDlyHMSM
0000d020 g     F .text	0000008c alt_up_character_lcd_erase_pos
0000c460 g     F .text	00000068 altera_avalon_jtag_uart_close
0000f690 g       *ABS*	00000000 __ram_rwdata_start
0000f370 g       *ABS*	00000000 __ram_rodata_start
000134f0 g     O .bss	00000028 __malloc_current_mallinfo
00011502 g     O .rwdata	00000002 OSEventMax
00009614 g     F .text	00000110 OSSemPost
0000484c g     F .text	000000dc OSSchedUnlock
0000be14 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000edd4 g     F .text	000000dc alt_get_fd
000134b4 g     O .bss	00000004 OSMemFreeList
00004998 g     F .text	000000b0 OSStatInit
000071e0 g     F .text	000000c4 OSFlagQuery
00011538 g     O .rwdata	00000002 OSTaskCreateExtEn
00002454 g     F .text	00000054 _close_r
0000f028 g     F .text	0000007c memcmp
00004c88 g     F .text	00000020 OS_Dummy
0000bed4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001a83c g       *ABS*	00000000 __alt_stack_base
0000bf24 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000d11c g     F .text	0000005c alt_up_irda_enable_read_interrupt
00002300 g     F .text	00000154 __swsetup_r
00018cb8 g     O .bss	000001e0 OSQTbl
0000072c g     F .text	00000118 __sfp
0000fab4 g     O .rwdata	00000408 __malloc_av_
00000878 g     F .text	00000004 __sinit_lock_release
000134b8 g     O .bss	00000004 OSTCBHighRdy
00002164 g     F .text	00000054 __sread
000134bc g     O .bss	00000004 OSQFreeList
0000dbb4 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
0000eccc g     F .text	00000108 alt_find_file
0000e070 g     F .text	000000a4 alt_dev_llist_insert
00003bc8 g     F .text	00000120 __malloc_lock
000038c0 g     F .text	000000b0 sbrk
00003ed4 g     F .text	00000140 OSEventNameSet
000027c8 g     F .text	0000005c _fflush_r
000134c0 g     O .bss	00000001 OSRdyGrp
00013460 g       *ABS*	00000000 __bss_start
00001a84 g     F .text	00000128 memset
000002f4 g     F .text	000000ac main
0001347c g     O .bss	00000004 alt_envp
00013460 g     O .bss	00000004 __malloc_max_total_mem
0000be74 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000f3bc g     O .rodata	00000100 OSUnMapTbl
00011532 g     O .rwdata	00000002 OSSemEn
0000cf08 g     F .text	0000008c alt_up_character_lcd_shift_cursor
00006e4c g     F .text	00000394 OSFlagPost
00002298 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
00002598 g     F .text	00000014 fclose
00004e40 g     F .text	00000110 OS_EventTaskWait
00015518 g     O .bss	00002000 task2_stk
0000d930 g     F .text	00000070 alt_up_ps2_read_data_byte
00005a38 g     F .text	000000cc OS_TaskStatStkChk
0000a4f8 g     F .text	00000150 OSTaskDelReq
00000ef0 g     F .text	0000080c _malloc_r
000114e8 g     O .rwdata	00000004 alt_errno
00004928 g     F .text	00000070 OSStart
00003b68 g     F .text	00000060 __env_unlock
00000d68 g     F .text	000000c4 _fwalk
0000a994 g     F .text	000001d4 OSTaskResume
00007c1c g     F .text	000000e8 OSMemQuery
00011544 g     O .rwdata	00000002 OSTaskStatEn
0000d298 g     F .text	00000040 alt_up_irda_write_data
0001151e g     O .rwdata	00000002 OSMemMax
00008954 g     F .text	00000170 OSQPostFront
0000db1c g     F .text	0000003c alt_up_ps2_open_dev
00002fb4 g     F .text	00000084 .hidden __divsi3
000134c1 g     O .bss	00000003 OSRdyTbl
000114f8 g     O .rwdata	00000002 OSDebugEn
0000cd14 g     F .text	0000003c alt_up_character_lcd_open_dev
00002854 g     F .text	00000124 _malloc_trim_r
0000d698 g     F .text	0000005c alt_up_ps2_enable_read_interrupt
0000f370 g       *ABS*	00000000 __CTOR_END__
00011510 g     O .rwdata	00000002 OSFlagNodeSize
00011558 g     O .rwdata	00000002 OSTmrCfgMax
0000ccdc g     F .text	00000038 alt_up_character_lcd_init
00007f10 g     F .text	000001ac OSQCreate
0000a648 g     F .text	00000198 OSTaskNameGet
0000f370 g       *ABS*	00000000 __flash_rodata_start
00008ac4 g     F .text	0000020c OSQPostOpt
00004a48 g     F .text	00000220 OSTimeTick
00011540 g     O .rwdata	00000002 OSTaskMax
0000f370 g       *ABS*	00000000 __DTOR_LIST__
00008f84 g     F .text	000000d8 OSSemCreate
00011564 g     O .rwdata	00000002 OSTmrWheelSize
0000deac g     F .text	0000003c alt_up_rs232_open_dev
0001153a g     O .rwdata	00000002 OSTaskDelEn
00009724 g     F .text	00000110 OSSemQuery
000080bc g     F .text	00000280 OSQDel
00008680 g     F .text	0000016c OSQPendAbort
0000b5c8 g     F .text	00000038 alt_irq_init
0000385c g     F .text	00000064 alt_release_fd
0000d570 g     F .text	00000034 read_data_valid
0000d0ac g     F .text	00000038 alt_up_character_lcd_cursor_off
0000d830 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0000efdc g     F .text	00000014 atexit
000022a0 g     F .text	00000060 _write_r
000047c0 g     F .text	0000008c OSSchedLock
00006270 g     F .text	00000108 OSFlagCreate
000114c8 g     O .rwdata	00000004 _impure_ptr
00013474 g     O .bss	00000004 alt_argc
000025ac g     F .text	0000021c __sflush_r
0000e174 g     F .text	00000060 _do_dtors
0001150a g     O .rwdata	00000002 OSEventMultiEn
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00006378 g     F .text	00000248 OSFlagDel
000134c4 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00006834 g     F .text	000005b8 OSFlagPend
00011556 g     O .rwdata	00000002 OSTmrEn
00000894 g     F .text	00000018 __fp_unlock_all
000114d4 g     O .rwdata	00000008 alt_fs_list
00005838 g     F .text	00000074 OS_StrCopy
0000db58 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
0000dcd4 g     F .text	00000040 alt_up_rs232_write_data
00011520 g     O .rwdata	00000002 OSMemNameSize
0000ec68 g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001154c g     O .rwdata	00000002 OSTCBPrioTblMax
00011548 g     O .rwdata	00000002 OSTaskStatStkChkEn
0001151c g     O .rwdata	00000002 OSMemEn
00011526 g     O .rwdata	00000002 OSMutexEn
00011578 g       *ABS*	00000000 _edata
0001a83c g       *ABS*	00000000 _end
000134c8 g     O .bss	00000001 OSIntNesting
00000248 g       *ABS*	00000000 __ram_exceptions_end
0000c4c8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000b304 g     F .text	000001d4 OSTimeDlyResume
000066e8 g     F .text	0000014c OSFlagNameSet
0000ab68 g     F .text	000001c0 OSTaskStkChk
00011522 g     O .rwdata	00000002 OSMemSize
000021c0 g     F .text	0000007c __swrite
000114d0 g     O .rwdata	00000004 __malloc_trim_threshold
000134cc g     O .bss	00000004 OSTCBCur
0000eff0 g     F .text	00000038 exit
0000d2d8 g     F .text	00000074 alt_up_irda_read_data
00011524 g     O .rwdata	00000002 OSMemTblSize
00000e2c g     F .text	000000c4 _fwalk_reent
0000d5d0 g     F .text	000000c8 alt_up_ps2_init
00003038 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000870 g     F .text	00000004 __sfp_lock_release
00004624 g     F .text	00000058 OSInit
0000af0c g     F .text	00000124 OSTaskQuery
0000cdcc g     F .text	00000078 alt_up_character_lcd_string
00008e2c g     F .text	000000a8 OS_QInit
000058ac g     F .text	00000054 OS_StrLen
0000d46c g     F .text	0000003c alt_up_irda_open_dev
00007a30 g     F .text	00000114 OSMemNameSet
0001153e g     O .rwdata	00000002 OSTaskProfileEn
000134d0 g     O .bss	00000004 OSTime
00018e98 g     O .bss	00000800 OSTaskIdleStk
0000f33c g     F .text	00000034 _exit
0000dee8 g     F .text	0000012c alt_alarm_start
000065c0 g     F .text	00000128 OSFlagNameGet
0000b4d8 g     F .text	0000005c OSTimeGet
00002ce8 g     F .text	000001bc __smakebuf_r
0000d7c8 g     F .text	00000068 alt_up_ps2_wait_for_ack
00000474 g     F .text	00000098 strlen
0000ebe8 g     F .text	00000020 OSTaskSwHook
0000e658 g     F .text	00000154 open
00019698 g     O .bss	00000b40 OSEventTbl
0001a1d8 g     O .bss	00000510 OSTCBTbl
00009834 g     F .text	00000100 OSSemSet
0000e264 g     F .text	00000034 alt_icache_flush_all
0000ce94 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0001156c g     O .rwdata	00000004 alt_priority_mask
0000905c g     F .text	00000240 OSSemDel
000134d4 g     O .bss	00000004 OSFlagFreeList
00011504 g     O .rwdata	00000002 OSEventNameSize
000134d8 g     O .bss	00000001 OSStatRdy
0001a6e8 g     O .bss	00000054 OSTCBPrioTbl
00003aa4 g     F .text	000000c4 __env_lock
0000d9f8 g     F .text	0000008c alt_up_ps2_read_fd
0001154a g     O .rwdata	00000002 OSTaskSwHookEn
0000d34c g     F .text	00000090 alt_up_irda_read_fd
00011570 g     O .rwdata	00000008 alt_alarm_list
00011512 g     O .rwdata	00000002 OSFlagWidth
0000e114 g     F .text	00000060 _do_ctors
0000dc14 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
000031a4 g     F .text	000000d0 close
00013484 g     O .bss	00000004 alt_envsem
000134dc g     O .bss	00000004 OSIdleCtrRun
00004c68 g     F .text	00000020 OSVersion
0001155c g     O .rwdata	00000002 OSTmrCfgWheelSize
000034d4 g     F .text	00000084 alt_load
0000b030 g     F .text	00000070 OS_TaskStkClr
00011536 g     O .rwdata	00000002 OSTaskCreateEn
00005258 g     F .text	00000068 OS_EventWaitListInit
0000ec88 g     F .text	00000020 OSTaskIdleHook
00000874 g     F .text	00000004 __sinit_lock_acquire
0000ad28 g     F .text	000001e4 OSTaskSuspend
00005900 g     F .text	0000005c OS_TaskIdle
00011562 g     O .rwdata	00000002 OSTmrTblSize
00008cd0 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	000467c0 	call	467c <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000b4 	movhi	r2,2
 140:	10a9cf04 	addi	r2,r2,-22724
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	10a9cf04 	addi	r2,r2,-22724
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	00046c80 	call	46c8 <OSIntExit>
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a80a17 	ldw	r2,-24536(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a80a17 	ldw	r2,-24536(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     254:	d6a53114 	ori	gp,gp,38084
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     25c:	108d1814 	ori	r2,r2,13408

    movhi r3, %hi(__bss_end)
     260:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     264:	18ea0f14 	ori	r3,r3,43068

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x30>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700026c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     278:	00034d40 	call	34d4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     27c:	00036680 	call	3668 <alt_main>

00000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     280:	003fff06 	br	280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000280>

00000284 <task1>:

#define TASK1_PRIORITY      1
#define TASK2_PRIORITY      2

void task1(void* pdata)
{
     284:	defffd04 	addi	sp,sp,-12
     288:	dfc00215 	stw	ra,8(sp)
     28c:	df000115 	stw	fp,4(sp)
     290:	df000104 	addi	fp,sp,4
     294:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    printf("Hello from task1\n");
     298:	01000074 	movhi	r4,1
     29c:	213cdc04 	addi	r4,r4,-3216
     2a0:	00004600 	call	460 <puts>
    OSTimeDlyHMSM(0, 0, 3, 0);
     2a4:	000f883a 	mov	r7,zero
     2a8:	018000c4 	movi	r6,3
     2ac:	000b883a 	mov	r5,zero
     2b0:	0009883a 	mov	r4,zero
     2b4:	000b1a40 	call	b1a4 <OSTimeDlyHMSM>
  }
     2b8:	003ff706 	br	298 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000298>

000002bc <task2>:
}

void task2(void* pdata)
{
     2bc:	defffd04 	addi	sp,sp,-12
     2c0:	dfc00215 	stw	ra,8(sp)
     2c4:	df000115 	stw	fp,4(sp)
     2c8:	df000104 	addi	fp,sp,4
     2cc:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    printf("Hello from task2\n");
     2d0:	01000074 	movhi	r4,1
     2d4:	213ce104 	addi	r4,r4,-3196
     2d8:	00004600 	call	460 <puts>
    OSTimeDlyHMSM(0, 0, 3, 0);
     2dc:	000f883a 	mov	r7,zero
     2e0:	018000c4 	movi	r6,3
     2e4:	000b883a 	mov	r5,zero
     2e8:	0009883a 	mov	r4,zero
     2ec:	000b1a40 	call	b1a4 <OSTimeDlyHMSM>
  }
     2f0:	003ff706 	br	2d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70002d0>

000002f4 <main>:
}

int main(void)
{
     2f4:	defff904 	addi	sp,sp,-28
     2f8:	dfc00615 	stw	ra,24(sp)
     2fc:	df000515 	stw	fp,20(sp)
     300:	df000504 	addi	fp,sp,20
  
  OSTaskCreateExt(task1,
     304:	d8000415 	stw	zero,16(sp)
     308:	d8000315 	stw	zero,12(sp)
     30c:	00820004 	movi	r2,2048
     310:	d8800215 	stw	r2,8(sp)
     314:	00800074 	movhi	r2,1
     318:	108d4604 	addi	r2,r2,13592
     31c:	d8800115 	stw	r2,4(sp)
     320:	00800044 	movi	r2,1
     324:	d8800015 	stw	r2,0(sp)
     328:	01c00044 	movi	r7,1
     32c:	01800074 	movhi	r6,1
     330:	31954504 	addi	r6,r6,21780
     334:	000b883a 	mov	r5,zero
     338:	01000034 	movhi	r4,0
     33c:	2100a104 	addi	r4,r4,644
     340:	0009fd00 	call	9fd0 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              
               
  OSTaskCreateExt(task2,
     344:	d8000415 	stw	zero,16(sp)
     348:	d8000315 	stw	zero,12(sp)
     34c:	00820004 	movi	r2,2048
     350:	d8800215 	stw	r2,8(sp)
     354:	00800074 	movhi	r2,1
     358:	10954604 	addi	r2,r2,21784
     35c:	d8800115 	stw	r2,4(sp)
     360:	00800084 	movi	r2,2
     364:	d8800015 	stw	r2,0(sp)
     368:	01c00084 	movi	r7,2
     36c:	01800074 	movhi	r6,1
     370:	319d4504 	addi	r6,r6,29972
     374:	000b883a 	mov	r5,zero
     378:	01000034 	movhi	r4,0
     37c:	2100af04 	addi	r4,r4,700
     380:	0009fd00 	call	9fd0 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSStart();
     384:	00049280 	call	4928 <OSStart>
  return 0;
     388:	0005883a 	mov	r2,zero
}
     38c:	e037883a 	mov	sp,fp
     390:	dfc00117 	ldw	ra,4(sp)
     394:	df000017 	ldw	fp,0(sp)
     398:	dec00204 	addi	sp,sp,8
     39c:	f800283a 	ret

000003a0 <_puts_r>:
     3a0:	defff604 	addi	sp,sp,-40
     3a4:	dc000715 	stw	r16,28(sp)
     3a8:	2021883a 	mov	r16,r4
     3ac:	2809883a 	mov	r4,r5
     3b0:	dc400815 	stw	r17,32(sp)
     3b4:	dfc00915 	stw	ra,36(sp)
     3b8:	2823883a 	mov	r17,r5
     3bc:	00004740 	call	474 <strlen>
     3c0:	10c00044 	addi	r3,r2,1
     3c4:	d8800115 	stw	r2,4(sp)
     3c8:	00800074 	movhi	r2,1
     3cc:	10bce604 	addi	r2,r2,-3176
     3d0:	d8800215 	stw	r2,8(sp)
     3d4:	00800044 	movi	r2,1
     3d8:	d8800315 	stw	r2,12(sp)
     3dc:	00800084 	movi	r2,2
     3e0:	dc400015 	stw	r17,0(sp)
     3e4:	d8c00615 	stw	r3,24(sp)
     3e8:	dec00415 	stw	sp,16(sp)
     3ec:	d8800515 	stw	r2,20(sp)
     3f0:	80000226 	beq	r16,zero,3fc <_puts_r+0x5c>
     3f4:	80800e17 	ldw	r2,56(r16)
     3f8:	10001426 	beq	r2,zero,44c <_puts_r+0xac>
     3fc:	81400217 	ldw	r5,8(r16)
     400:	2880030b 	ldhu	r2,12(r5)
     404:	10c8000c 	andi	r3,r2,8192
     408:	1800061e 	bne	r3,zero,424 <_puts_r+0x84>
     40c:	29001917 	ldw	r4,100(r5)
     410:	00f7ffc4 	movi	r3,-8193
     414:	10880014 	ori	r2,r2,8192
     418:	20c6703a 	and	r3,r4,r3
     41c:	2880030d 	sth	r2,12(r5)
     420:	28c01915 	stw	r3,100(r5)
     424:	d9800404 	addi	r6,sp,16
     428:	8009883a 	mov	r4,r16
     42c:	00008ac0 	call	8ac <__sfvwrite_r>
     430:	1000091e 	bne	r2,zero,458 <_puts_r+0xb8>
     434:	00800284 	movi	r2,10
     438:	dfc00917 	ldw	ra,36(sp)
     43c:	dc400817 	ldw	r17,32(sp)
     440:	dc000717 	ldw	r16,28(sp)
     444:	dec00a04 	addi	sp,sp,40
     448:	f800283a 	ret
     44c:	8009883a 	mov	r4,r16
     450:	000085c0 	call	85c <__sinit>
     454:	003fe906 	br	3fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70003fc>
     458:	00bfffc4 	movi	r2,-1
     45c:	003ff606 	br	438 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000438>

00000460 <puts>:
     460:	00800074 	movhi	r2,1
     464:	10853204 	addi	r2,r2,5320
     468:	200b883a 	mov	r5,r4
     46c:	11000017 	ldw	r4,0(r2)
     470:	00003a01 	jmpi	3a0 <_puts_r>

00000474 <strlen>:
     474:	208000cc 	andi	r2,r4,3
     478:	10002026 	beq	r2,zero,4fc <strlen+0x88>
     47c:	20800007 	ldb	r2,0(r4)
     480:	10002026 	beq	r2,zero,504 <strlen+0x90>
     484:	2005883a 	mov	r2,r4
     488:	00000206 	br	494 <strlen+0x20>
     48c:	10c00007 	ldb	r3,0(r2)
     490:	18001826 	beq	r3,zero,4f4 <strlen+0x80>
     494:	10800044 	addi	r2,r2,1
     498:	10c000cc 	andi	r3,r2,3
     49c:	183ffb1e 	bne	r3,zero,48c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700048c>
     4a0:	10c00017 	ldw	r3,0(r2)
     4a4:	01ffbff4 	movhi	r7,65279
     4a8:	39ffbfc4 	addi	r7,r7,-257
     4ac:	00ca303a 	nor	r5,zero,r3
     4b0:	01a02074 	movhi	r6,32897
     4b4:	19c7883a 	add	r3,r3,r7
     4b8:	31a02004 	addi	r6,r6,-32640
     4bc:	1946703a 	and	r3,r3,r5
     4c0:	1986703a 	and	r3,r3,r6
     4c4:	1800091e 	bne	r3,zero,4ec <strlen+0x78>
     4c8:	10800104 	addi	r2,r2,4
     4cc:	10c00017 	ldw	r3,0(r2)
     4d0:	19cb883a 	add	r5,r3,r7
     4d4:	00c6303a 	nor	r3,zero,r3
     4d8:	28c6703a 	and	r3,r5,r3
     4dc:	1986703a 	and	r3,r3,r6
     4e0:	183ff926 	beq	r3,zero,4c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70004c8>
     4e4:	00000106 	br	4ec <strlen+0x78>
     4e8:	10800044 	addi	r2,r2,1
     4ec:	10c00007 	ldb	r3,0(r2)
     4f0:	183ffd1e 	bne	r3,zero,4e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70004e8>
     4f4:	1105c83a 	sub	r2,r2,r4
     4f8:	f800283a 	ret
     4fc:	2005883a 	mov	r2,r4
     500:	003fe706 	br	4a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70004a0>
     504:	0005883a 	mov	r2,zero
     508:	f800283a 	ret

0000050c <__fp_unlock>:
     50c:	0005883a 	mov	r2,zero
     510:	f800283a 	ret

00000514 <_cleanup_r>:
     514:	01400034 	movhi	r5,0
     518:	29492a04 	addi	r5,r5,9384
     51c:	0000e2c1 	jmpi	e2c <_fwalk_reent>

00000520 <__sinit.part.1>:
     520:	defff704 	addi	sp,sp,-36
     524:	00c00034 	movhi	r3,0
     528:	dfc00815 	stw	ra,32(sp)
     52c:	ddc00715 	stw	r23,28(sp)
     530:	dd800615 	stw	r22,24(sp)
     534:	dd400515 	stw	r21,20(sp)
     538:	dd000415 	stw	r20,16(sp)
     53c:	dcc00315 	stw	r19,12(sp)
     540:	dc800215 	stw	r18,8(sp)
     544:	dc400115 	stw	r17,4(sp)
     548:	dc000015 	stw	r16,0(sp)
     54c:	18c14504 	addi	r3,r3,1300
     550:	24000117 	ldw	r16,4(r4)
     554:	20c00f15 	stw	r3,60(r4)
     558:	2080bb04 	addi	r2,r4,748
     55c:	00c000c4 	movi	r3,3
     560:	20c0b915 	stw	r3,740(r4)
     564:	2080ba15 	stw	r2,744(r4)
     568:	2000b815 	stw	zero,736(r4)
     56c:	05c00204 	movi	r23,8
     570:	00800104 	movi	r2,4
     574:	2025883a 	mov	r18,r4
     578:	b80d883a 	mov	r6,r23
     57c:	81001704 	addi	r4,r16,92
     580:	000b883a 	mov	r5,zero
     584:	80000015 	stw	zero,0(r16)
     588:	80000115 	stw	zero,4(r16)
     58c:	80000215 	stw	zero,8(r16)
     590:	8080030d 	sth	r2,12(r16)
     594:	80001915 	stw	zero,100(r16)
     598:	8000038d 	sth	zero,14(r16)
     59c:	80000415 	stw	zero,16(r16)
     5a0:	80000515 	stw	zero,20(r16)
     5a4:	80000615 	stw	zero,24(r16)
     5a8:	0001a840 	call	1a84 <memset>
     5ac:	05800034 	movhi	r22,0
     5b0:	94400217 	ldw	r17,8(r18)
     5b4:	05400034 	movhi	r21,0
     5b8:	05000034 	movhi	r20,0
     5bc:	04c00034 	movhi	r19,0
     5c0:	b5885904 	addi	r22,r22,8548
     5c4:	ad487004 	addi	r21,r21,8640
     5c8:	a5088f04 	addi	r20,r20,8764
     5cc:	9cc8a604 	addi	r19,r19,8856
     5d0:	85800815 	stw	r22,32(r16)
     5d4:	85400915 	stw	r21,36(r16)
     5d8:	85000a15 	stw	r20,40(r16)
     5dc:	84c00b15 	stw	r19,44(r16)
     5e0:	84000715 	stw	r16,28(r16)
     5e4:	00800284 	movi	r2,10
     5e8:	8880030d 	sth	r2,12(r17)
     5ec:	00800044 	movi	r2,1
     5f0:	b80d883a 	mov	r6,r23
     5f4:	89001704 	addi	r4,r17,92
     5f8:	000b883a 	mov	r5,zero
     5fc:	88000015 	stw	zero,0(r17)
     600:	88000115 	stw	zero,4(r17)
     604:	88000215 	stw	zero,8(r17)
     608:	88001915 	stw	zero,100(r17)
     60c:	8880038d 	sth	r2,14(r17)
     610:	88000415 	stw	zero,16(r17)
     614:	88000515 	stw	zero,20(r17)
     618:	88000615 	stw	zero,24(r17)
     61c:	0001a840 	call	1a84 <memset>
     620:	94000317 	ldw	r16,12(r18)
     624:	00800484 	movi	r2,18
     628:	8c400715 	stw	r17,28(r17)
     62c:	8d800815 	stw	r22,32(r17)
     630:	8d400915 	stw	r21,36(r17)
     634:	8d000a15 	stw	r20,40(r17)
     638:	8cc00b15 	stw	r19,44(r17)
     63c:	8080030d 	sth	r2,12(r16)
     640:	00800084 	movi	r2,2
     644:	80000015 	stw	zero,0(r16)
     648:	80000115 	stw	zero,4(r16)
     64c:	80000215 	stw	zero,8(r16)
     650:	80001915 	stw	zero,100(r16)
     654:	8080038d 	sth	r2,14(r16)
     658:	80000415 	stw	zero,16(r16)
     65c:	80000515 	stw	zero,20(r16)
     660:	80000615 	stw	zero,24(r16)
     664:	b80d883a 	mov	r6,r23
     668:	000b883a 	mov	r5,zero
     66c:	81001704 	addi	r4,r16,92
     670:	0001a840 	call	1a84 <memset>
     674:	00800044 	movi	r2,1
     678:	84000715 	stw	r16,28(r16)
     67c:	85800815 	stw	r22,32(r16)
     680:	85400915 	stw	r21,36(r16)
     684:	85000a15 	stw	r20,40(r16)
     688:	84c00b15 	stw	r19,44(r16)
     68c:	90800e15 	stw	r2,56(r18)
     690:	dfc00817 	ldw	ra,32(sp)
     694:	ddc00717 	ldw	r23,28(sp)
     698:	dd800617 	ldw	r22,24(sp)
     69c:	dd400517 	ldw	r21,20(sp)
     6a0:	dd000417 	ldw	r20,16(sp)
     6a4:	dcc00317 	ldw	r19,12(sp)
     6a8:	dc800217 	ldw	r18,8(sp)
     6ac:	dc400117 	ldw	r17,4(sp)
     6b0:	dc000017 	ldw	r16,0(sp)
     6b4:	dec00904 	addi	sp,sp,36
     6b8:	f800283a 	ret

000006bc <__fp_lock>:
     6bc:	0005883a 	mov	r2,zero
     6c0:	f800283a 	ret

000006c4 <__sfmoreglue>:
     6c4:	defffc04 	addi	sp,sp,-16
     6c8:	dc400115 	stw	r17,4(sp)
     6cc:	2c7fffc4 	addi	r17,r5,-1
     6d0:	8c401a24 	muli	r17,r17,104
     6d4:	dc800215 	stw	r18,8(sp)
     6d8:	2825883a 	mov	r18,r5
     6dc:	89401d04 	addi	r5,r17,116
     6e0:	dc000015 	stw	r16,0(sp)
     6e4:	dfc00315 	stw	ra,12(sp)
     6e8:	0000ef00 	call	ef0 <_malloc_r>
     6ec:	1021883a 	mov	r16,r2
     6f0:	10000726 	beq	r2,zero,710 <__sfmoreglue+0x4c>
     6f4:	11000304 	addi	r4,r2,12
     6f8:	10000015 	stw	zero,0(r2)
     6fc:	14800115 	stw	r18,4(r2)
     700:	11000215 	stw	r4,8(r2)
     704:	89801a04 	addi	r6,r17,104
     708:	000b883a 	mov	r5,zero
     70c:	0001a840 	call	1a84 <memset>
     710:	8005883a 	mov	r2,r16
     714:	dfc00317 	ldw	ra,12(sp)
     718:	dc800217 	ldw	r18,8(sp)
     71c:	dc400117 	ldw	r17,4(sp)
     720:	dc000017 	ldw	r16,0(sp)
     724:	dec00404 	addi	sp,sp,16
     728:	f800283a 	ret

0000072c <__sfp>:
     72c:	defffb04 	addi	sp,sp,-20
     730:	dc000015 	stw	r16,0(sp)
     734:	04000074 	movhi	r16,1
     738:	84053104 	addi	r16,r16,5316
     73c:	dcc00315 	stw	r19,12(sp)
     740:	2027883a 	mov	r19,r4
     744:	81000017 	ldw	r4,0(r16)
     748:	dfc00415 	stw	ra,16(sp)
     74c:	dc800215 	stw	r18,8(sp)
     750:	20800e17 	ldw	r2,56(r4)
     754:	dc400115 	stw	r17,4(sp)
     758:	1000021e 	bne	r2,zero,764 <__sfp+0x38>
     75c:	00005200 	call	520 <__sinit.part.1>
     760:	81000017 	ldw	r4,0(r16)
     764:	2480b804 	addi	r18,r4,736
     768:	047fffc4 	movi	r17,-1
     76c:	91000117 	ldw	r4,4(r18)
     770:	94000217 	ldw	r16,8(r18)
     774:	213fffc4 	addi	r4,r4,-1
     778:	20000a16 	blt	r4,zero,7a4 <__sfp+0x78>
     77c:	8080030f 	ldh	r2,12(r16)
     780:	10000c26 	beq	r2,zero,7b4 <__sfp+0x88>
     784:	80c01d04 	addi	r3,r16,116
     788:	00000206 	br	794 <__sfp+0x68>
     78c:	18bfe60f 	ldh	r2,-104(r3)
     790:	10000826 	beq	r2,zero,7b4 <__sfp+0x88>
     794:	213fffc4 	addi	r4,r4,-1
     798:	1c3ffd04 	addi	r16,r3,-12
     79c:	18c01a04 	addi	r3,r3,104
     7a0:	247ffa1e 	bne	r4,r17,78c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700078c>
     7a4:	90800017 	ldw	r2,0(r18)
     7a8:	10001d26 	beq	r2,zero,820 <__sfp+0xf4>
     7ac:	1025883a 	mov	r18,r2
     7b0:	003fee06 	br	76c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700076c>
     7b4:	00bfffc4 	movi	r2,-1
     7b8:	8080038d 	sth	r2,14(r16)
     7bc:	00800044 	movi	r2,1
     7c0:	8080030d 	sth	r2,12(r16)
     7c4:	80001915 	stw	zero,100(r16)
     7c8:	80000015 	stw	zero,0(r16)
     7cc:	80000215 	stw	zero,8(r16)
     7d0:	80000115 	stw	zero,4(r16)
     7d4:	80000415 	stw	zero,16(r16)
     7d8:	80000515 	stw	zero,20(r16)
     7dc:	80000615 	stw	zero,24(r16)
     7e0:	01800204 	movi	r6,8
     7e4:	000b883a 	mov	r5,zero
     7e8:	81001704 	addi	r4,r16,92
     7ec:	0001a840 	call	1a84 <memset>
     7f0:	8005883a 	mov	r2,r16
     7f4:	80000c15 	stw	zero,48(r16)
     7f8:	80000d15 	stw	zero,52(r16)
     7fc:	80001115 	stw	zero,68(r16)
     800:	80001215 	stw	zero,72(r16)
     804:	dfc00417 	ldw	ra,16(sp)
     808:	dcc00317 	ldw	r19,12(sp)
     80c:	dc800217 	ldw	r18,8(sp)
     810:	dc400117 	ldw	r17,4(sp)
     814:	dc000017 	ldw	r16,0(sp)
     818:	dec00504 	addi	sp,sp,20
     81c:	f800283a 	ret
     820:	01400104 	movi	r5,4
     824:	9809883a 	mov	r4,r19
     828:	00006c40 	call	6c4 <__sfmoreglue>
     82c:	90800015 	stw	r2,0(r18)
     830:	103fde1e 	bne	r2,zero,7ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70007ac>
     834:	00800304 	movi	r2,12
     838:	98800015 	stw	r2,0(r19)
     83c:	0005883a 	mov	r2,zero
     840:	003ff006 	br	804 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000804>

00000844 <_cleanup>:
     844:	00800074 	movhi	r2,1
     848:	10853104 	addi	r2,r2,5316
     84c:	11000017 	ldw	r4,0(r2)
     850:	01400034 	movhi	r5,0
     854:	29492a04 	addi	r5,r5,9384
     858:	0000e2c1 	jmpi	e2c <_fwalk_reent>

0000085c <__sinit>:
     85c:	20800e17 	ldw	r2,56(r4)
     860:	10000126 	beq	r2,zero,868 <__sinit+0xc>
     864:	f800283a 	ret
     868:	00005201 	jmpi	520 <__sinit.part.1>

0000086c <__sfp_lock_acquire>:
     86c:	f800283a 	ret

00000870 <__sfp_lock_release>:
     870:	f800283a 	ret

00000874 <__sinit_lock_acquire>:
     874:	f800283a 	ret

00000878 <__sinit_lock_release>:
     878:	f800283a 	ret

0000087c <__fp_lock_all>:
     87c:	00800074 	movhi	r2,1
     880:	10853204 	addi	r2,r2,5320
     884:	11000017 	ldw	r4,0(r2)
     888:	01400034 	movhi	r5,0
     88c:	2941af04 	addi	r5,r5,1724
     890:	0000d681 	jmpi	d68 <_fwalk>

00000894 <__fp_unlock_all>:
     894:	00800074 	movhi	r2,1
     898:	10853204 	addi	r2,r2,5320
     89c:	11000017 	ldw	r4,0(r2)
     8a0:	01400034 	movhi	r5,0
     8a4:	29414304 	addi	r5,r5,1292
     8a8:	0000d681 	jmpi	d68 <_fwalk>

000008ac <__sfvwrite_r>:
     8ac:	30800217 	ldw	r2,8(r6)
     8b0:	10006726 	beq	r2,zero,a50 <__sfvwrite_r+0x1a4>
     8b4:	28c0030b 	ldhu	r3,12(r5)
     8b8:	defff404 	addi	sp,sp,-48
     8bc:	dd400715 	stw	r21,28(sp)
     8c0:	dd000615 	stw	r20,24(sp)
     8c4:	dc000215 	stw	r16,8(sp)
     8c8:	dfc00b15 	stw	ra,44(sp)
     8cc:	df000a15 	stw	fp,40(sp)
     8d0:	ddc00915 	stw	r23,36(sp)
     8d4:	dd800815 	stw	r22,32(sp)
     8d8:	dcc00515 	stw	r19,20(sp)
     8dc:	dc800415 	stw	r18,16(sp)
     8e0:	dc400315 	stw	r17,12(sp)
     8e4:	1880020c 	andi	r2,r3,8
     8e8:	2821883a 	mov	r16,r5
     8ec:	202b883a 	mov	r21,r4
     8f0:	3029883a 	mov	r20,r6
     8f4:	10002726 	beq	r2,zero,994 <__sfvwrite_r+0xe8>
     8f8:	28800417 	ldw	r2,16(r5)
     8fc:	10002526 	beq	r2,zero,994 <__sfvwrite_r+0xe8>
     900:	1880008c 	andi	r2,r3,2
     904:	a4400017 	ldw	r17,0(r20)
     908:	10002a26 	beq	r2,zero,9b4 <__sfvwrite_r+0x108>
     90c:	05a00034 	movhi	r22,32768
     910:	0027883a 	mov	r19,zero
     914:	0025883a 	mov	r18,zero
     918:	b5bf0004 	addi	r22,r22,-1024
     91c:	980d883a 	mov	r6,r19
     920:	a809883a 	mov	r4,r21
     924:	90004626 	beq	r18,zero,a40 <__sfvwrite_r+0x194>
     928:	900f883a 	mov	r7,r18
     92c:	b480022e 	bgeu	r22,r18,938 <__sfvwrite_r+0x8c>
     930:	01e00034 	movhi	r7,32768
     934:	39ff0004 	addi	r7,r7,-1024
     938:	80800917 	ldw	r2,36(r16)
     93c:	81400717 	ldw	r5,28(r16)
     940:	103ee83a 	callr	r2
     944:	0080570e 	bge	zero,r2,aa4 <__sfvwrite_r+0x1f8>
     948:	a0c00217 	ldw	r3,8(r20)
     94c:	98a7883a 	add	r19,r19,r2
     950:	90a5c83a 	sub	r18,r18,r2
     954:	1885c83a 	sub	r2,r3,r2
     958:	a0800215 	stw	r2,8(r20)
     95c:	103fef1e 	bne	r2,zero,91c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700091c>
     960:	0005883a 	mov	r2,zero
     964:	dfc00b17 	ldw	ra,44(sp)
     968:	df000a17 	ldw	fp,40(sp)
     96c:	ddc00917 	ldw	r23,36(sp)
     970:	dd800817 	ldw	r22,32(sp)
     974:	dd400717 	ldw	r21,28(sp)
     978:	dd000617 	ldw	r20,24(sp)
     97c:	dcc00517 	ldw	r19,20(sp)
     980:	dc800417 	ldw	r18,16(sp)
     984:	dc400317 	ldw	r17,12(sp)
     988:	dc000217 	ldw	r16,8(sp)
     98c:	dec00c04 	addi	sp,sp,48
     990:	f800283a 	ret
     994:	800b883a 	mov	r5,r16
     998:	a809883a 	mov	r4,r21
     99c:	00023000 	call	2300 <__swsetup_r>
     9a0:	1000eb1e 	bne	r2,zero,d50 <__sfvwrite_r+0x4a4>
     9a4:	80c0030b 	ldhu	r3,12(r16)
     9a8:	a4400017 	ldw	r17,0(r20)
     9ac:	1880008c 	andi	r2,r3,2
     9b0:	103fd61e 	bne	r2,zero,90c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700090c>
     9b4:	1880004c 	andi	r2,r3,1
     9b8:	10003f1e 	bne	r2,zero,ab8 <__sfvwrite_r+0x20c>
     9bc:	0039883a 	mov	fp,zero
     9c0:	0025883a 	mov	r18,zero
     9c4:	90001a26 	beq	r18,zero,a30 <__sfvwrite_r+0x184>
     9c8:	1880800c 	andi	r2,r3,512
     9cc:	84c00217 	ldw	r19,8(r16)
     9d0:	10002126 	beq	r2,zero,a58 <__sfvwrite_r+0x1ac>
     9d4:	982f883a 	mov	r23,r19
     9d8:	94c09336 	bltu	r18,r19,c28 <__sfvwrite_r+0x37c>
     9dc:	1881200c 	andi	r2,r3,1152
     9e0:	10009e1e 	bne	r2,zero,c5c <__sfvwrite_r+0x3b0>
     9e4:	81000017 	ldw	r4,0(r16)
     9e8:	b80d883a 	mov	r6,r23
     9ec:	e00b883a 	mov	r5,fp
     9f0:	00019280 	call	1928 <memmove>
     9f4:	80c00217 	ldw	r3,8(r16)
     9f8:	81000017 	ldw	r4,0(r16)
     9fc:	9005883a 	mov	r2,r18
     a00:	1ce7c83a 	sub	r19,r3,r19
     a04:	25cf883a 	add	r7,r4,r23
     a08:	84c00215 	stw	r19,8(r16)
     a0c:	81c00015 	stw	r7,0(r16)
     a10:	a0c00217 	ldw	r3,8(r20)
     a14:	e0b9883a 	add	fp,fp,r2
     a18:	90a5c83a 	sub	r18,r18,r2
     a1c:	18a7c83a 	sub	r19,r3,r2
     a20:	a4c00215 	stw	r19,8(r20)
     a24:	983fce26 	beq	r19,zero,960 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000960>
     a28:	80c0030b 	ldhu	r3,12(r16)
     a2c:	903fe61e 	bne	r18,zero,9c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70009c8>
     a30:	8f000017 	ldw	fp,0(r17)
     a34:	8c800117 	ldw	r18,4(r17)
     a38:	8c400204 	addi	r17,r17,8
     a3c:	003fe106 	br	9c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70009c4>
     a40:	8cc00017 	ldw	r19,0(r17)
     a44:	8c800117 	ldw	r18,4(r17)
     a48:	8c400204 	addi	r17,r17,8
     a4c:	003fb306 	br	91c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700091c>
     a50:	0005883a 	mov	r2,zero
     a54:	f800283a 	ret
     a58:	81000017 	ldw	r4,0(r16)
     a5c:	80800417 	ldw	r2,16(r16)
     a60:	11005736 	bltu	r2,r4,bc0 <__sfvwrite_r+0x314>
     a64:	85c00517 	ldw	r23,20(r16)
     a68:	95c05536 	bltu	r18,r23,bc0 <__sfvwrite_r+0x314>
     a6c:	00a00034 	movhi	r2,32768
     a70:	10bfffc4 	addi	r2,r2,-1
     a74:	9009883a 	mov	r4,r18
     a78:	1480012e 	bgeu	r2,r18,a80 <__sfvwrite_r+0x1d4>
     a7c:	1009883a 	mov	r4,r2
     a80:	b80b883a 	mov	r5,r23
     a84:	0002fb40 	call	2fb4 <__divsi3>
     a88:	15cf383a 	mul	r7,r2,r23
     a8c:	81400717 	ldw	r5,28(r16)
     a90:	80800917 	ldw	r2,36(r16)
     a94:	e00d883a 	mov	r6,fp
     a98:	a809883a 	mov	r4,r21
     a9c:	103ee83a 	callr	r2
     aa0:	00bfdb16 	blt	zero,r2,a10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000a10>
     aa4:	8080030b 	ldhu	r2,12(r16)
     aa8:	10801014 	ori	r2,r2,64
     aac:	8080030d 	sth	r2,12(r16)
     ab0:	00bfffc4 	movi	r2,-1
     ab4:	003fab06 	br	964 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000964>
     ab8:	0027883a 	mov	r19,zero
     abc:	0011883a 	mov	r8,zero
     ac0:	0039883a 	mov	fp,zero
     ac4:	0025883a 	mov	r18,zero
     ac8:	90001f26 	beq	r18,zero,b48 <__sfvwrite_r+0x29c>
     acc:	40005a26 	beq	r8,zero,c38 <__sfvwrite_r+0x38c>
     ad0:	982d883a 	mov	r22,r19
     ad4:	94c0012e 	bgeu	r18,r19,adc <__sfvwrite_r+0x230>
     ad8:	902d883a 	mov	r22,r18
     adc:	81000017 	ldw	r4,0(r16)
     ae0:	80800417 	ldw	r2,16(r16)
     ae4:	b02f883a 	mov	r23,r22
     ae8:	81c00517 	ldw	r7,20(r16)
     aec:	1100032e 	bgeu	r2,r4,afc <__sfvwrite_r+0x250>
     af0:	80c00217 	ldw	r3,8(r16)
     af4:	38c7883a 	add	r3,r7,r3
     af8:	1d801816 	blt	r3,r22,b5c <__sfvwrite_r+0x2b0>
     afc:	b1c03e16 	blt	r22,r7,bf8 <__sfvwrite_r+0x34c>
     b00:	80800917 	ldw	r2,36(r16)
     b04:	81400717 	ldw	r5,28(r16)
     b08:	e00d883a 	mov	r6,fp
     b0c:	da000115 	stw	r8,4(sp)
     b10:	a809883a 	mov	r4,r21
     b14:	103ee83a 	callr	r2
     b18:	102f883a 	mov	r23,r2
     b1c:	da000117 	ldw	r8,4(sp)
     b20:	00bfe00e 	bge	zero,r2,aa4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000aa4>
     b24:	9de7c83a 	sub	r19,r19,r23
     b28:	98001f26 	beq	r19,zero,ba8 <__sfvwrite_r+0x2fc>
     b2c:	a0800217 	ldw	r2,8(r20)
     b30:	e5f9883a 	add	fp,fp,r23
     b34:	95e5c83a 	sub	r18,r18,r23
     b38:	15efc83a 	sub	r23,r2,r23
     b3c:	a5c00215 	stw	r23,8(r20)
     b40:	b83f8726 	beq	r23,zero,960 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000960>
     b44:	903fe11e 	bne	r18,zero,acc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000acc>
     b48:	8f000017 	ldw	fp,0(r17)
     b4c:	8c800117 	ldw	r18,4(r17)
     b50:	0011883a 	mov	r8,zero
     b54:	8c400204 	addi	r17,r17,8
     b58:	003fdb06 	br	ac8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000ac8>
     b5c:	180d883a 	mov	r6,r3
     b60:	e00b883a 	mov	r5,fp
     b64:	da000115 	stw	r8,4(sp)
     b68:	d8c00015 	stw	r3,0(sp)
     b6c:	00019280 	call	1928 <memmove>
     b70:	d8c00017 	ldw	r3,0(sp)
     b74:	80800017 	ldw	r2,0(r16)
     b78:	800b883a 	mov	r5,r16
     b7c:	a809883a 	mov	r4,r21
     b80:	10c5883a 	add	r2,r2,r3
     b84:	80800015 	stw	r2,0(r16)
     b88:	d8c00015 	stw	r3,0(sp)
     b8c:	00027c80 	call	27c8 <_fflush_r>
     b90:	d8c00017 	ldw	r3,0(sp)
     b94:	da000117 	ldw	r8,4(sp)
     b98:	103fc21e 	bne	r2,zero,aa4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000aa4>
     b9c:	182f883a 	mov	r23,r3
     ba0:	9de7c83a 	sub	r19,r19,r23
     ba4:	983fe11e 	bne	r19,zero,b2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000b2c>
     ba8:	800b883a 	mov	r5,r16
     bac:	a809883a 	mov	r4,r21
     bb0:	00027c80 	call	27c8 <_fflush_r>
     bb4:	103fbb1e 	bne	r2,zero,aa4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000aa4>
     bb8:	0011883a 	mov	r8,zero
     bbc:	003fdb06 	br	b2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000b2c>
     bc0:	94c0012e 	bgeu	r18,r19,bc8 <__sfvwrite_r+0x31c>
     bc4:	9027883a 	mov	r19,r18
     bc8:	980d883a 	mov	r6,r19
     bcc:	e00b883a 	mov	r5,fp
     bd0:	00019280 	call	1928 <memmove>
     bd4:	80800217 	ldw	r2,8(r16)
     bd8:	80c00017 	ldw	r3,0(r16)
     bdc:	14c5c83a 	sub	r2,r2,r19
     be0:	1cc7883a 	add	r3,r3,r19
     be4:	80800215 	stw	r2,8(r16)
     be8:	80c00015 	stw	r3,0(r16)
     bec:	10004326 	beq	r2,zero,cfc <__sfvwrite_r+0x450>
     bf0:	9805883a 	mov	r2,r19
     bf4:	003f8606 	br	a10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000a10>
     bf8:	b00d883a 	mov	r6,r22
     bfc:	e00b883a 	mov	r5,fp
     c00:	da000115 	stw	r8,4(sp)
     c04:	00019280 	call	1928 <memmove>
     c08:	80800217 	ldw	r2,8(r16)
     c0c:	80c00017 	ldw	r3,0(r16)
     c10:	da000117 	ldw	r8,4(sp)
     c14:	1585c83a 	sub	r2,r2,r22
     c18:	1dad883a 	add	r22,r3,r22
     c1c:	80800215 	stw	r2,8(r16)
     c20:	85800015 	stw	r22,0(r16)
     c24:	003fbf06 	br	b24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000b24>
     c28:	81000017 	ldw	r4,0(r16)
     c2c:	9027883a 	mov	r19,r18
     c30:	902f883a 	mov	r23,r18
     c34:	003f6c06 	br	9e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70009e8>
     c38:	900d883a 	mov	r6,r18
     c3c:	01400284 	movi	r5,10
     c40:	e009883a 	mov	r4,fp
     c44:	00016fc0 	call	16fc <memchr>
     c48:	10003e26 	beq	r2,zero,d44 <__sfvwrite_r+0x498>
     c4c:	10800044 	addi	r2,r2,1
     c50:	1727c83a 	sub	r19,r2,fp
     c54:	02000044 	movi	r8,1
     c58:	003f9d06 	br	ad0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000ad0>
     c5c:	80800517 	ldw	r2,20(r16)
     c60:	81400417 	ldw	r5,16(r16)
     c64:	81c00017 	ldw	r7,0(r16)
     c68:	10a7883a 	add	r19,r2,r2
     c6c:	9885883a 	add	r2,r19,r2
     c70:	1026d7fa 	srli	r19,r2,31
     c74:	396dc83a 	sub	r22,r7,r5
     c78:	b1000044 	addi	r4,r22,1
     c7c:	9885883a 	add	r2,r19,r2
     c80:	1027d07a 	srai	r19,r2,1
     c84:	2485883a 	add	r2,r4,r18
     c88:	980d883a 	mov	r6,r19
     c8c:	9880022e 	bgeu	r19,r2,c98 <__sfvwrite_r+0x3ec>
     c90:	1027883a 	mov	r19,r2
     c94:	100d883a 	mov	r6,r2
     c98:	18c1000c 	andi	r3,r3,1024
     c9c:	18001c26 	beq	r3,zero,d10 <__sfvwrite_r+0x464>
     ca0:	300b883a 	mov	r5,r6
     ca4:	a809883a 	mov	r4,r21
     ca8:	0000ef00 	call	ef0 <_malloc_r>
     cac:	102f883a 	mov	r23,r2
     cb0:	10002926 	beq	r2,zero,d58 <__sfvwrite_r+0x4ac>
     cb4:	81400417 	ldw	r5,16(r16)
     cb8:	b00d883a 	mov	r6,r22
     cbc:	1009883a 	mov	r4,r2
     cc0:	00017e00 	call	17e0 <memcpy>
     cc4:	8080030b 	ldhu	r2,12(r16)
     cc8:	00fedfc4 	movi	r3,-1153
     ccc:	10c4703a 	and	r2,r2,r3
     cd0:	10802014 	ori	r2,r2,128
     cd4:	8080030d 	sth	r2,12(r16)
     cd8:	bd89883a 	add	r4,r23,r22
     cdc:	9d8fc83a 	sub	r7,r19,r22
     ce0:	85c00415 	stw	r23,16(r16)
     ce4:	84c00515 	stw	r19,20(r16)
     ce8:	81000015 	stw	r4,0(r16)
     cec:	9027883a 	mov	r19,r18
     cf0:	81c00215 	stw	r7,8(r16)
     cf4:	902f883a 	mov	r23,r18
     cf8:	003f3b06 	br	9e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70009e8>
     cfc:	800b883a 	mov	r5,r16
     d00:	a809883a 	mov	r4,r21
     d04:	00027c80 	call	27c8 <_fflush_r>
     d08:	103fb926 	beq	r2,zero,bf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000bf0>
     d0c:	003f6506 	br	aa4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000aa4>
     d10:	a809883a 	mov	r4,r21
     d14:	0001bac0 	call	1bac <_realloc_r>
     d18:	102f883a 	mov	r23,r2
     d1c:	103fee1e 	bne	r2,zero,cd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000cd8>
     d20:	81400417 	ldw	r5,16(r16)
     d24:	a809883a 	mov	r4,r21
     d28:	00029780 	call	2978 <_free_r>
     d2c:	8080030b 	ldhu	r2,12(r16)
     d30:	00ffdfc4 	movi	r3,-129
     d34:	1884703a 	and	r2,r3,r2
     d38:	00c00304 	movi	r3,12
     d3c:	a8c00015 	stw	r3,0(r21)
     d40:	003f5906 	br	aa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000aa8>
     d44:	94c00044 	addi	r19,r18,1
     d48:	02000044 	movi	r8,1
     d4c:	003f6006 	br	ad0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000ad0>
     d50:	00bfffc4 	movi	r2,-1
     d54:	003f0306 	br	964 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000964>
     d58:	00800304 	movi	r2,12
     d5c:	a8800015 	stw	r2,0(r21)
     d60:	8080030b 	ldhu	r2,12(r16)
     d64:	003f5006 	br	aa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000aa8>

00000d68 <_fwalk>:
     d68:	defff704 	addi	sp,sp,-36
     d6c:	dd000415 	stw	r20,16(sp)
     d70:	dfc00815 	stw	ra,32(sp)
     d74:	ddc00715 	stw	r23,28(sp)
     d78:	dd800615 	stw	r22,24(sp)
     d7c:	dd400515 	stw	r21,20(sp)
     d80:	dcc00315 	stw	r19,12(sp)
     d84:	dc800215 	stw	r18,8(sp)
     d88:	dc400115 	stw	r17,4(sp)
     d8c:	dc000015 	stw	r16,0(sp)
     d90:	2500b804 	addi	r20,r4,736
     d94:	a0002326 	beq	r20,zero,e24 <_fwalk+0xbc>
     d98:	282b883a 	mov	r21,r5
     d9c:	002f883a 	mov	r23,zero
     da0:	05800044 	movi	r22,1
     da4:	04ffffc4 	movi	r19,-1
     da8:	a4400117 	ldw	r17,4(r20)
     dac:	a4800217 	ldw	r18,8(r20)
     db0:	8c7fffc4 	addi	r17,r17,-1
     db4:	88000d16 	blt	r17,zero,dec <_fwalk+0x84>
     db8:	94000304 	addi	r16,r18,12
     dbc:	94800384 	addi	r18,r18,14
     dc0:	8080000b 	ldhu	r2,0(r16)
     dc4:	8c7fffc4 	addi	r17,r17,-1
     dc8:	813ffd04 	addi	r4,r16,-12
     dcc:	b080042e 	bgeu	r22,r2,de0 <_fwalk+0x78>
     dd0:	9080000f 	ldh	r2,0(r18)
     dd4:	14c00226 	beq	r2,r19,de0 <_fwalk+0x78>
     dd8:	a83ee83a 	callr	r21
     ddc:	b8aeb03a 	or	r23,r23,r2
     de0:	84001a04 	addi	r16,r16,104
     de4:	94801a04 	addi	r18,r18,104
     de8:	8cfff51e 	bne	r17,r19,dc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000dc0>
     dec:	a5000017 	ldw	r20,0(r20)
     df0:	a03fed1e 	bne	r20,zero,da8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000da8>
     df4:	b805883a 	mov	r2,r23
     df8:	dfc00817 	ldw	ra,32(sp)
     dfc:	ddc00717 	ldw	r23,28(sp)
     e00:	dd800617 	ldw	r22,24(sp)
     e04:	dd400517 	ldw	r21,20(sp)
     e08:	dd000417 	ldw	r20,16(sp)
     e0c:	dcc00317 	ldw	r19,12(sp)
     e10:	dc800217 	ldw	r18,8(sp)
     e14:	dc400117 	ldw	r17,4(sp)
     e18:	dc000017 	ldw	r16,0(sp)
     e1c:	dec00904 	addi	sp,sp,36
     e20:	f800283a 	ret
     e24:	002f883a 	mov	r23,zero
     e28:	003ff206 	br	df4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000df4>

00000e2c <_fwalk_reent>:
     e2c:	defff704 	addi	sp,sp,-36
     e30:	dd000415 	stw	r20,16(sp)
     e34:	dfc00815 	stw	ra,32(sp)
     e38:	ddc00715 	stw	r23,28(sp)
     e3c:	dd800615 	stw	r22,24(sp)
     e40:	dd400515 	stw	r21,20(sp)
     e44:	dcc00315 	stw	r19,12(sp)
     e48:	dc800215 	stw	r18,8(sp)
     e4c:	dc400115 	stw	r17,4(sp)
     e50:	dc000015 	stw	r16,0(sp)
     e54:	2500b804 	addi	r20,r4,736
     e58:	a0002326 	beq	r20,zero,ee8 <_fwalk_reent+0xbc>
     e5c:	282b883a 	mov	r21,r5
     e60:	2027883a 	mov	r19,r4
     e64:	002f883a 	mov	r23,zero
     e68:	05800044 	movi	r22,1
     e6c:	04bfffc4 	movi	r18,-1
     e70:	a4400117 	ldw	r17,4(r20)
     e74:	a4000217 	ldw	r16,8(r20)
     e78:	8c7fffc4 	addi	r17,r17,-1
     e7c:	88000c16 	blt	r17,zero,eb0 <_fwalk_reent+0x84>
     e80:	84000304 	addi	r16,r16,12
     e84:	8080000b 	ldhu	r2,0(r16)
     e88:	8c7fffc4 	addi	r17,r17,-1
     e8c:	817ffd04 	addi	r5,r16,-12
     e90:	b080052e 	bgeu	r22,r2,ea8 <_fwalk_reent+0x7c>
     e94:	8080008f 	ldh	r2,2(r16)
     e98:	9809883a 	mov	r4,r19
     e9c:	14800226 	beq	r2,r18,ea8 <_fwalk_reent+0x7c>
     ea0:	a83ee83a 	callr	r21
     ea4:	b8aeb03a 	or	r23,r23,r2
     ea8:	84001a04 	addi	r16,r16,104
     eac:	8cbff51e 	bne	r17,r18,e84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000e84>
     eb0:	a5000017 	ldw	r20,0(r20)
     eb4:	a03fee1e 	bne	r20,zero,e70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000e70>
     eb8:	b805883a 	mov	r2,r23
     ebc:	dfc00817 	ldw	ra,32(sp)
     ec0:	ddc00717 	ldw	r23,28(sp)
     ec4:	dd800617 	ldw	r22,24(sp)
     ec8:	dd400517 	ldw	r21,20(sp)
     ecc:	dd000417 	ldw	r20,16(sp)
     ed0:	dcc00317 	ldw	r19,12(sp)
     ed4:	dc800217 	ldw	r18,8(sp)
     ed8:	dc400117 	ldw	r17,4(sp)
     edc:	dc000017 	ldw	r16,0(sp)
     ee0:	dec00904 	addi	sp,sp,36
     ee4:	f800283a 	ret
     ee8:	002f883a 	mov	r23,zero
     eec:	003ff206 	br	eb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000eb8>

00000ef0 <_malloc_r>:
     ef0:	defff504 	addi	sp,sp,-44
     ef4:	dc800315 	stw	r18,12(sp)
     ef8:	dfc00a15 	stw	ra,40(sp)
     efc:	df000915 	stw	fp,36(sp)
     f00:	ddc00815 	stw	r23,32(sp)
     f04:	dd800715 	stw	r22,28(sp)
     f08:	dd400615 	stw	r21,24(sp)
     f0c:	dd000515 	stw	r20,20(sp)
     f10:	dcc00415 	stw	r19,16(sp)
     f14:	dc400215 	stw	r17,8(sp)
     f18:	dc000115 	stw	r16,4(sp)
     f1c:	288002c4 	addi	r2,r5,11
     f20:	00c00584 	movi	r3,22
     f24:	2025883a 	mov	r18,r4
     f28:	18807f2e 	bgeu	r3,r2,1128 <_malloc_r+0x238>
     f2c:	047ffe04 	movi	r17,-8
     f30:	1462703a 	and	r17,r2,r17
     f34:	8800a316 	blt	r17,zero,11c4 <_malloc_r+0x2d4>
     f38:	8940a236 	bltu	r17,r5,11c4 <_malloc_r+0x2d4>
     f3c:	0003bc80 	call	3bc8 <__malloc_lock>
     f40:	00807dc4 	movi	r2,503
     f44:	1441e92e 	bgeu	r2,r17,16ec <_malloc_r+0x7fc>
     f48:	8804d27a 	srli	r2,r17,9
     f4c:	1000a126 	beq	r2,zero,11d4 <_malloc_r+0x2e4>
     f50:	00c00104 	movi	r3,4
     f54:	18811e36 	bltu	r3,r2,13d0 <_malloc_r+0x4e0>
     f58:	8804d1ba 	srli	r2,r17,6
     f5c:	12000e44 	addi	r8,r2,57
     f60:	11c00e04 	addi	r7,r2,56
     f64:	4209883a 	add	r4,r8,r8
     f68:	04c00074 	movhi	r19,1
     f6c:	2109883a 	add	r4,r4,r4
     f70:	9cfead04 	addi	r19,r19,-1356
     f74:	2109883a 	add	r4,r4,r4
     f78:	9909883a 	add	r4,r19,r4
     f7c:	24000117 	ldw	r16,4(r4)
     f80:	213ffe04 	addi	r4,r4,-8
     f84:	24009726 	beq	r4,r16,11e4 <_malloc_r+0x2f4>
     f88:	80800117 	ldw	r2,4(r16)
     f8c:	01bfff04 	movi	r6,-4
     f90:	014003c4 	movi	r5,15
     f94:	1184703a 	and	r2,r2,r6
     f98:	1447c83a 	sub	r3,r2,r17
     f9c:	28c00716 	blt	r5,r3,fbc <_malloc_r+0xcc>
     fa0:	1800920e 	bge	r3,zero,11ec <_malloc_r+0x2fc>
     fa4:	84000317 	ldw	r16,12(r16)
     fa8:	24008e26 	beq	r4,r16,11e4 <_malloc_r+0x2f4>
     fac:	80800117 	ldw	r2,4(r16)
     fb0:	1184703a 	and	r2,r2,r6
     fb4:	1447c83a 	sub	r3,r2,r17
     fb8:	28fff90e 	bge	r5,r3,fa0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000fa0>
     fbc:	3809883a 	mov	r4,r7
     fc0:	01800074 	movhi	r6,1
     fc4:	9c000417 	ldw	r16,16(r19)
     fc8:	31bead04 	addi	r6,r6,-1356
     fcc:	32000204 	addi	r8,r6,8
     fd0:	82013426 	beq	r16,r8,14a4 <_malloc_r+0x5b4>
     fd4:	80c00117 	ldw	r3,4(r16)
     fd8:	00bfff04 	movi	r2,-4
     fdc:	188e703a 	and	r7,r3,r2
     fe0:	3c45c83a 	sub	r2,r7,r17
     fe4:	00c003c4 	movi	r3,15
     fe8:	18811f16 	blt	r3,r2,1468 <_malloc_r+0x578>
     fec:	32000515 	stw	r8,20(r6)
     ff0:	32000415 	stw	r8,16(r6)
     ff4:	10007f0e 	bge	r2,zero,11f4 <_malloc_r+0x304>
     ff8:	00807fc4 	movi	r2,511
     ffc:	11c0fd36 	bltu	r2,r7,13f4 <_malloc_r+0x504>
    1000:	3806d0fa 	srli	r3,r7,3
    1004:	01c00044 	movi	r7,1
    1008:	30800117 	ldw	r2,4(r6)
    100c:	19400044 	addi	r5,r3,1
    1010:	294b883a 	add	r5,r5,r5
    1014:	1807d0ba 	srai	r3,r3,2
    1018:	294b883a 	add	r5,r5,r5
    101c:	294b883a 	add	r5,r5,r5
    1020:	298b883a 	add	r5,r5,r6
    1024:	38c6983a 	sll	r3,r7,r3
    1028:	29c00017 	ldw	r7,0(r5)
    102c:	2a7ffe04 	addi	r9,r5,-8
    1030:	1886b03a 	or	r3,r3,r2
    1034:	82400315 	stw	r9,12(r16)
    1038:	81c00215 	stw	r7,8(r16)
    103c:	30c00115 	stw	r3,4(r6)
    1040:	2c000015 	stw	r16,0(r5)
    1044:	3c000315 	stw	r16,12(r7)
    1048:	2005d0ba 	srai	r2,r4,2
    104c:	01400044 	movi	r5,1
    1050:	288a983a 	sll	r5,r5,r2
    1054:	19406f36 	bltu	r3,r5,1214 <_malloc_r+0x324>
    1058:	28c4703a 	and	r2,r5,r3
    105c:	10000a1e 	bne	r2,zero,1088 <_malloc_r+0x198>
    1060:	00bfff04 	movi	r2,-4
    1064:	294b883a 	add	r5,r5,r5
    1068:	2088703a 	and	r4,r4,r2
    106c:	28c4703a 	and	r2,r5,r3
    1070:	21000104 	addi	r4,r4,4
    1074:	1000041e 	bne	r2,zero,1088 <_malloc_r+0x198>
    1078:	294b883a 	add	r5,r5,r5
    107c:	28c4703a 	and	r2,r5,r3
    1080:	21000104 	addi	r4,r4,4
    1084:	103ffc26 	beq	r2,zero,1078 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001078>
    1088:	02bfff04 	movi	r10,-4
    108c:	024003c4 	movi	r9,15
    1090:	21800044 	addi	r6,r4,1
    1094:	318d883a 	add	r6,r6,r6
    1098:	318d883a 	add	r6,r6,r6
    109c:	318d883a 	add	r6,r6,r6
    10a0:	998d883a 	add	r6,r19,r6
    10a4:	333ffe04 	addi	r12,r6,-8
    10a8:	2017883a 	mov	r11,r4
    10ac:	31800104 	addi	r6,r6,4
    10b0:	34000017 	ldw	r16,0(r6)
    10b4:	31fffd04 	addi	r7,r6,-12
    10b8:	81c0041e 	bne	r16,r7,10cc <_malloc_r+0x1dc>
    10bc:	0000fb06 	br	14ac <_malloc_r+0x5bc>
    10c0:	1801030e 	bge	r3,zero,14d0 <_malloc_r+0x5e0>
    10c4:	84000317 	ldw	r16,12(r16)
    10c8:	81c0f826 	beq	r16,r7,14ac <_malloc_r+0x5bc>
    10cc:	80800117 	ldw	r2,4(r16)
    10d0:	1284703a 	and	r2,r2,r10
    10d4:	1447c83a 	sub	r3,r2,r17
    10d8:	48fff90e 	bge	r9,r3,10c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70010c0>
    10dc:	80800317 	ldw	r2,12(r16)
    10e0:	81000217 	ldw	r4,8(r16)
    10e4:	89400054 	ori	r5,r17,1
    10e8:	81400115 	stw	r5,4(r16)
    10ec:	20800315 	stw	r2,12(r4)
    10f0:	11000215 	stw	r4,8(r2)
    10f4:	8463883a 	add	r17,r16,r17
    10f8:	9c400515 	stw	r17,20(r19)
    10fc:	9c400415 	stw	r17,16(r19)
    1100:	18800054 	ori	r2,r3,1
    1104:	88800115 	stw	r2,4(r17)
    1108:	8a000315 	stw	r8,12(r17)
    110c:	8a000215 	stw	r8,8(r17)
    1110:	88e3883a 	add	r17,r17,r3
    1114:	88c00015 	stw	r3,0(r17)
    1118:	9009883a 	mov	r4,r18
    111c:	0003ce80 	call	3ce8 <__malloc_unlock>
    1120:	80800204 	addi	r2,r16,8
    1124:	00001b06 	br	1194 <_malloc_r+0x2a4>
    1128:	04400404 	movi	r17,16
    112c:	89402536 	bltu	r17,r5,11c4 <_malloc_r+0x2d4>
    1130:	0003bc80 	call	3bc8 <__malloc_lock>
    1134:	00800184 	movi	r2,6
    1138:	01000084 	movi	r4,2
    113c:	04c00074 	movhi	r19,1
    1140:	1085883a 	add	r2,r2,r2
    1144:	9cfead04 	addi	r19,r19,-1356
    1148:	1085883a 	add	r2,r2,r2
    114c:	9885883a 	add	r2,r19,r2
    1150:	14000117 	ldw	r16,4(r2)
    1154:	10fffe04 	addi	r3,r2,-8
    1158:	80c0d926 	beq	r16,r3,14c0 <_malloc_r+0x5d0>
    115c:	80c00117 	ldw	r3,4(r16)
    1160:	81000317 	ldw	r4,12(r16)
    1164:	00bfff04 	movi	r2,-4
    1168:	1884703a 	and	r2,r3,r2
    116c:	81400217 	ldw	r5,8(r16)
    1170:	8085883a 	add	r2,r16,r2
    1174:	10c00117 	ldw	r3,4(r2)
    1178:	29000315 	stw	r4,12(r5)
    117c:	21400215 	stw	r5,8(r4)
    1180:	18c00054 	ori	r3,r3,1
    1184:	10c00115 	stw	r3,4(r2)
    1188:	9009883a 	mov	r4,r18
    118c:	0003ce80 	call	3ce8 <__malloc_unlock>
    1190:	80800204 	addi	r2,r16,8
    1194:	dfc00a17 	ldw	ra,40(sp)
    1198:	df000917 	ldw	fp,36(sp)
    119c:	ddc00817 	ldw	r23,32(sp)
    11a0:	dd800717 	ldw	r22,28(sp)
    11a4:	dd400617 	ldw	r21,24(sp)
    11a8:	dd000517 	ldw	r20,20(sp)
    11ac:	dcc00417 	ldw	r19,16(sp)
    11b0:	dc800317 	ldw	r18,12(sp)
    11b4:	dc400217 	ldw	r17,8(sp)
    11b8:	dc000117 	ldw	r16,4(sp)
    11bc:	dec00b04 	addi	sp,sp,44
    11c0:	f800283a 	ret
    11c4:	00800304 	movi	r2,12
    11c8:	90800015 	stw	r2,0(r18)
    11cc:	0005883a 	mov	r2,zero
    11d0:	003ff006 	br	1194 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001194>
    11d4:	01002004 	movi	r4,128
    11d8:	02001004 	movi	r8,64
    11dc:	01c00fc4 	movi	r7,63
    11e0:	003f6106 	br	f68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f68>
    11e4:	4009883a 	mov	r4,r8
    11e8:	003f7506 	br	fc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000fc0>
    11ec:	81000317 	ldw	r4,12(r16)
    11f0:	003fde06 	br	116c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700116c>
    11f4:	81c5883a 	add	r2,r16,r7
    11f8:	11400117 	ldw	r5,4(r2)
    11fc:	9009883a 	mov	r4,r18
    1200:	29400054 	ori	r5,r5,1
    1204:	11400115 	stw	r5,4(r2)
    1208:	0003ce80 	call	3ce8 <__malloc_unlock>
    120c:	80800204 	addi	r2,r16,8
    1210:	003fe006 	br	1194 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001194>
    1214:	9c000217 	ldw	r16,8(r19)
    1218:	00bfff04 	movi	r2,-4
    121c:	85800117 	ldw	r22,4(r16)
    1220:	b0ac703a 	and	r22,r22,r2
    1224:	b4400336 	bltu	r22,r17,1234 <_malloc_r+0x344>
    1228:	b445c83a 	sub	r2,r22,r17
    122c:	00c003c4 	movi	r3,15
    1230:	18805d16 	blt	r3,r2,13a8 <_malloc_r+0x4b8>
    1234:	05c00074 	movhi	r23,1
    1238:	00800074 	movhi	r2,1
    123c:	108d1a04 	addi	r2,r2,13416
    1240:	bdc53304 	addi	r23,r23,5324
    1244:	15400017 	ldw	r21,0(r2)
    1248:	b8c00017 	ldw	r3,0(r23)
    124c:	00bfffc4 	movi	r2,-1
    1250:	858d883a 	add	r6,r16,r22
    1254:	8d6b883a 	add	r21,r17,r21
    1258:	1880ea26 	beq	r3,r2,1604 <_malloc_r+0x714>
    125c:	ad4403c4 	addi	r21,r21,4111
    1260:	00bc0004 	movi	r2,-4096
    1264:	a8aa703a 	and	r21,r21,r2
    1268:	a80b883a 	mov	r5,r21
    126c:	9009883a 	mov	r4,r18
    1270:	d9800015 	stw	r6,0(sp)
    1274:	00021100 	call	2110 <_sbrk_r>
    1278:	1029883a 	mov	r20,r2
    127c:	00bfffc4 	movi	r2,-1
    1280:	d9800017 	ldw	r6,0(sp)
    1284:	a080e826 	beq	r20,r2,1628 <_malloc_r+0x738>
    1288:	a180a636 	bltu	r20,r6,1524 <_malloc_r+0x634>
    128c:	07000074 	movhi	fp,1
    1290:	e70d3c04 	addi	fp,fp,13552
    1294:	e0800017 	ldw	r2,0(fp)
    1298:	a887883a 	add	r3,r21,r2
    129c:	e0c00015 	stw	r3,0(fp)
    12a0:	3500e626 	beq	r6,r20,163c <_malloc_r+0x74c>
    12a4:	b9000017 	ldw	r4,0(r23)
    12a8:	00bfffc4 	movi	r2,-1
    12ac:	2080ee26 	beq	r4,r2,1668 <_malloc_r+0x778>
    12b0:	a185c83a 	sub	r2,r20,r6
    12b4:	10c5883a 	add	r2,r2,r3
    12b8:	e0800015 	stw	r2,0(fp)
    12bc:	a0c001cc 	andi	r3,r20,7
    12c0:	1800bc26 	beq	r3,zero,15b4 <_malloc_r+0x6c4>
    12c4:	a0e9c83a 	sub	r20,r20,r3
    12c8:	00840204 	movi	r2,4104
    12cc:	a5000204 	addi	r20,r20,8
    12d0:	10c7c83a 	sub	r3,r2,r3
    12d4:	a545883a 	add	r2,r20,r21
    12d8:	1083ffcc 	andi	r2,r2,4095
    12dc:	18abc83a 	sub	r21,r3,r2
    12e0:	a80b883a 	mov	r5,r21
    12e4:	9009883a 	mov	r4,r18
    12e8:	00021100 	call	2110 <_sbrk_r>
    12ec:	00ffffc4 	movi	r3,-1
    12f0:	10c0e126 	beq	r2,r3,1678 <_malloc_r+0x788>
    12f4:	1505c83a 	sub	r2,r2,r20
    12f8:	1545883a 	add	r2,r2,r21
    12fc:	10800054 	ori	r2,r2,1
    1300:	e0c00017 	ldw	r3,0(fp)
    1304:	9d000215 	stw	r20,8(r19)
    1308:	a0800115 	stw	r2,4(r20)
    130c:	a8c7883a 	add	r3,r21,r3
    1310:	e0c00015 	stw	r3,0(fp)
    1314:	84c00e26 	beq	r16,r19,1350 <_malloc_r+0x460>
    1318:	018003c4 	movi	r6,15
    131c:	3580a72e 	bgeu	r6,r22,15bc <_malloc_r+0x6cc>
    1320:	81400117 	ldw	r5,4(r16)
    1324:	013ffe04 	movi	r4,-8
    1328:	b0bffd04 	addi	r2,r22,-12
    132c:	1104703a 	and	r2,r2,r4
    1330:	2900004c 	andi	r4,r5,1
    1334:	2088b03a 	or	r4,r4,r2
    1338:	81000115 	stw	r4,4(r16)
    133c:	01400144 	movi	r5,5
    1340:	8089883a 	add	r4,r16,r2
    1344:	21400115 	stw	r5,4(r4)
    1348:	21400215 	stw	r5,8(r4)
    134c:	3080cd36 	bltu	r6,r2,1684 <_malloc_r+0x794>
    1350:	00800074 	movhi	r2,1
    1354:	108d1904 	addi	r2,r2,13412
    1358:	11000017 	ldw	r4,0(r2)
    135c:	20c0012e 	bgeu	r4,r3,1364 <_malloc_r+0x474>
    1360:	10c00015 	stw	r3,0(r2)
    1364:	00800074 	movhi	r2,1
    1368:	108d1804 	addi	r2,r2,13408
    136c:	11000017 	ldw	r4,0(r2)
    1370:	9c000217 	ldw	r16,8(r19)
    1374:	20c0012e 	bgeu	r4,r3,137c <_malloc_r+0x48c>
    1378:	10c00015 	stw	r3,0(r2)
    137c:	80c00117 	ldw	r3,4(r16)
    1380:	00bfff04 	movi	r2,-4
    1384:	1886703a 	and	r3,r3,r2
    1388:	1c45c83a 	sub	r2,r3,r17
    138c:	1c400236 	bltu	r3,r17,1398 <_malloc_r+0x4a8>
    1390:	00c003c4 	movi	r3,15
    1394:	18800416 	blt	r3,r2,13a8 <_malloc_r+0x4b8>
    1398:	9009883a 	mov	r4,r18
    139c:	0003ce80 	call	3ce8 <__malloc_unlock>
    13a0:	0005883a 	mov	r2,zero
    13a4:	003f7b06 	br	1194 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001194>
    13a8:	88c00054 	ori	r3,r17,1
    13ac:	80c00115 	stw	r3,4(r16)
    13b0:	8463883a 	add	r17,r16,r17
    13b4:	10800054 	ori	r2,r2,1
    13b8:	9c400215 	stw	r17,8(r19)
    13bc:	88800115 	stw	r2,4(r17)
    13c0:	9009883a 	mov	r4,r18
    13c4:	0003ce80 	call	3ce8 <__malloc_unlock>
    13c8:	80800204 	addi	r2,r16,8
    13cc:	003f7106 	br	1194 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001194>
    13d0:	00c00504 	movi	r3,20
    13d4:	18804a2e 	bgeu	r3,r2,1500 <_malloc_r+0x610>
    13d8:	00c01504 	movi	r3,84
    13dc:	18806e36 	bltu	r3,r2,1598 <_malloc_r+0x6a8>
    13e0:	8804d33a 	srli	r2,r17,12
    13e4:	12001bc4 	addi	r8,r2,111
    13e8:	11c01b84 	addi	r7,r2,110
    13ec:	4209883a 	add	r4,r8,r8
    13f0:	003edd06 	br	f68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f68>
    13f4:	3804d27a 	srli	r2,r7,9
    13f8:	00c00104 	movi	r3,4
    13fc:	1880442e 	bgeu	r3,r2,1510 <_malloc_r+0x620>
    1400:	00c00504 	movi	r3,20
    1404:	18808136 	bltu	r3,r2,160c <_malloc_r+0x71c>
    1408:	11401704 	addi	r5,r2,92
    140c:	10c016c4 	addi	r3,r2,91
    1410:	294b883a 	add	r5,r5,r5
    1414:	294b883a 	add	r5,r5,r5
    1418:	294b883a 	add	r5,r5,r5
    141c:	994b883a 	add	r5,r19,r5
    1420:	28800017 	ldw	r2,0(r5)
    1424:	01800074 	movhi	r6,1
    1428:	297ffe04 	addi	r5,r5,-8
    142c:	31bead04 	addi	r6,r6,-1356
    1430:	28806526 	beq	r5,r2,15c8 <_malloc_r+0x6d8>
    1434:	01bfff04 	movi	r6,-4
    1438:	10c00117 	ldw	r3,4(r2)
    143c:	1986703a 	and	r3,r3,r6
    1440:	38c0022e 	bgeu	r7,r3,144c <_malloc_r+0x55c>
    1444:	10800217 	ldw	r2,8(r2)
    1448:	28bffb1e 	bne	r5,r2,1438 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001438>
    144c:	11400317 	ldw	r5,12(r2)
    1450:	98c00117 	ldw	r3,4(r19)
    1454:	81400315 	stw	r5,12(r16)
    1458:	80800215 	stw	r2,8(r16)
    145c:	2c000215 	stw	r16,8(r5)
    1460:	14000315 	stw	r16,12(r2)
    1464:	003ef806 	br	1048 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001048>
    1468:	88c00054 	ori	r3,r17,1
    146c:	80c00115 	stw	r3,4(r16)
    1470:	8463883a 	add	r17,r16,r17
    1474:	34400515 	stw	r17,20(r6)
    1478:	34400415 	stw	r17,16(r6)
    147c:	10c00054 	ori	r3,r2,1
    1480:	8a000315 	stw	r8,12(r17)
    1484:	8a000215 	stw	r8,8(r17)
    1488:	88c00115 	stw	r3,4(r17)
    148c:	88a3883a 	add	r17,r17,r2
    1490:	88800015 	stw	r2,0(r17)
    1494:	9009883a 	mov	r4,r18
    1498:	0003ce80 	call	3ce8 <__malloc_unlock>
    149c:	80800204 	addi	r2,r16,8
    14a0:	003f3c06 	br	1194 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001194>
    14a4:	30c00117 	ldw	r3,4(r6)
    14a8:	003ee706 	br	1048 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001048>
    14ac:	5ac00044 	addi	r11,r11,1
    14b0:	588000cc 	andi	r2,r11,3
    14b4:	31800204 	addi	r6,r6,8
    14b8:	103efd1e 	bne	r2,zero,10b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70010b0>
    14bc:	00002406 	br	1550 <_malloc_r+0x660>
    14c0:	14000317 	ldw	r16,12(r2)
    14c4:	143f251e 	bne	r2,r16,115c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700115c>
    14c8:	21000084 	addi	r4,r4,2
    14cc:	003ebc06 	br	fc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000fc0>
    14d0:	8085883a 	add	r2,r16,r2
    14d4:	10c00117 	ldw	r3,4(r2)
    14d8:	81000317 	ldw	r4,12(r16)
    14dc:	81400217 	ldw	r5,8(r16)
    14e0:	18c00054 	ori	r3,r3,1
    14e4:	10c00115 	stw	r3,4(r2)
    14e8:	29000315 	stw	r4,12(r5)
    14ec:	21400215 	stw	r5,8(r4)
    14f0:	9009883a 	mov	r4,r18
    14f4:	0003ce80 	call	3ce8 <__malloc_unlock>
    14f8:	80800204 	addi	r2,r16,8
    14fc:	003f2506 	br	1194 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001194>
    1500:	12001704 	addi	r8,r2,92
    1504:	11c016c4 	addi	r7,r2,91
    1508:	4209883a 	add	r4,r8,r8
    150c:	003e9606 	br	f68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f68>
    1510:	3804d1ba 	srli	r2,r7,6
    1514:	11400e44 	addi	r5,r2,57
    1518:	10c00e04 	addi	r3,r2,56
    151c:	294b883a 	add	r5,r5,r5
    1520:	003fbc06 	br	1414 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001414>
    1524:	84ff5926 	beq	r16,r19,128c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700128c>
    1528:	00800074 	movhi	r2,1
    152c:	10bead04 	addi	r2,r2,-1356
    1530:	14000217 	ldw	r16,8(r2)
    1534:	00bfff04 	movi	r2,-4
    1538:	80c00117 	ldw	r3,4(r16)
    153c:	1886703a 	and	r3,r3,r2
    1540:	003f9106 	br	1388 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001388>
    1544:	60800217 	ldw	r2,8(r12)
    1548:	213fffc4 	addi	r4,r4,-1
    154c:	1300651e 	bne	r2,r12,16e4 <_malloc_r+0x7f4>
    1550:	208000cc 	andi	r2,r4,3
    1554:	633ffe04 	addi	r12,r12,-8
    1558:	103ffa1e 	bne	r2,zero,1544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001544>
    155c:	98800117 	ldw	r2,4(r19)
    1560:	0146303a 	nor	r3,zero,r5
    1564:	1884703a 	and	r2,r3,r2
    1568:	98800115 	stw	r2,4(r19)
    156c:	294b883a 	add	r5,r5,r5
    1570:	117f2836 	bltu	r2,r5,1214 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001214>
    1574:	283f2726 	beq	r5,zero,1214 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001214>
    1578:	2886703a 	and	r3,r5,r2
    157c:	5809883a 	mov	r4,r11
    1580:	183ec31e 	bne	r3,zero,1090 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001090>
    1584:	294b883a 	add	r5,r5,r5
    1588:	2886703a 	and	r3,r5,r2
    158c:	21000104 	addi	r4,r4,4
    1590:	183ffc26 	beq	r3,zero,1584 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001584>
    1594:	003ebe06 	br	1090 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001090>
    1598:	00c05504 	movi	r3,340
    159c:	18801236 	bltu	r3,r2,15e8 <_malloc_r+0x6f8>
    15a0:	8804d3fa 	srli	r2,r17,15
    15a4:	12001e04 	addi	r8,r2,120
    15a8:	11c01dc4 	addi	r7,r2,119
    15ac:	4209883a 	add	r4,r8,r8
    15b0:	003e6d06 	br	f68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f68>
    15b4:	00c40004 	movi	r3,4096
    15b8:	003f4606 	br	12d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70012d4>
    15bc:	00800044 	movi	r2,1
    15c0:	a0800115 	stw	r2,4(r20)
    15c4:	003f7406 	br	1398 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001398>
    15c8:	1805d0ba 	srai	r2,r3,2
    15cc:	01c00044 	movi	r7,1
    15d0:	30c00117 	ldw	r3,4(r6)
    15d4:	388e983a 	sll	r7,r7,r2
    15d8:	2805883a 	mov	r2,r5
    15dc:	38c6b03a 	or	r3,r7,r3
    15e0:	30c00115 	stw	r3,4(r6)
    15e4:	003f9b06 	br	1454 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001454>
    15e8:	00c15504 	movi	r3,1364
    15ec:	18801a36 	bltu	r3,r2,1658 <_malloc_r+0x768>
    15f0:	8804d4ba 	srli	r2,r17,18
    15f4:	12001f44 	addi	r8,r2,125
    15f8:	11c01f04 	addi	r7,r2,124
    15fc:	4209883a 	add	r4,r8,r8
    1600:	003e5906 	br	f68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f68>
    1604:	ad400404 	addi	r21,r21,16
    1608:	003f1706 	br	1268 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001268>
    160c:	00c01504 	movi	r3,84
    1610:	18802336 	bltu	r3,r2,16a0 <_malloc_r+0x7b0>
    1614:	3804d33a 	srli	r2,r7,12
    1618:	11401bc4 	addi	r5,r2,111
    161c:	10c01b84 	addi	r3,r2,110
    1620:	294b883a 	add	r5,r5,r5
    1624:	003f7b06 	br	1414 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001414>
    1628:	9c000217 	ldw	r16,8(r19)
    162c:	00bfff04 	movi	r2,-4
    1630:	80c00117 	ldw	r3,4(r16)
    1634:	1886703a 	and	r3,r3,r2
    1638:	003f5306 	br	1388 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001388>
    163c:	3083ffcc 	andi	r2,r6,4095
    1640:	103f181e 	bne	r2,zero,12a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70012a4>
    1644:	99000217 	ldw	r4,8(r19)
    1648:	b545883a 	add	r2,r22,r21
    164c:	10800054 	ori	r2,r2,1
    1650:	20800115 	stw	r2,4(r4)
    1654:	003f3e06 	br	1350 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001350>
    1658:	01003f84 	movi	r4,254
    165c:	02001fc4 	movi	r8,127
    1660:	01c01f84 	movi	r7,126
    1664:	003e4006 	br	f68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f68>
    1668:	00800074 	movhi	r2,1
    166c:	10853304 	addi	r2,r2,5324
    1670:	15000015 	stw	r20,0(r2)
    1674:	003f1106 	br	12bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70012bc>
    1678:	00800044 	movi	r2,1
    167c:	002b883a 	mov	r21,zero
    1680:	003f1f06 	br	1300 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001300>
    1684:	81400204 	addi	r5,r16,8
    1688:	9009883a 	mov	r4,r18
    168c:	00029780 	call	2978 <_free_r>
    1690:	00800074 	movhi	r2,1
    1694:	108d3c04 	addi	r2,r2,13552
    1698:	10c00017 	ldw	r3,0(r2)
    169c:	003f2c06 	br	1350 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001350>
    16a0:	00c05504 	movi	r3,340
    16a4:	18800536 	bltu	r3,r2,16bc <_malloc_r+0x7cc>
    16a8:	3804d3fa 	srli	r2,r7,15
    16ac:	11401e04 	addi	r5,r2,120
    16b0:	10c01dc4 	addi	r3,r2,119
    16b4:	294b883a 	add	r5,r5,r5
    16b8:	003f5606 	br	1414 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001414>
    16bc:	00c15504 	movi	r3,1364
    16c0:	18800536 	bltu	r3,r2,16d8 <_malloc_r+0x7e8>
    16c4:	3804d4ba 	srli	r2,r7,18
    16c8:	11401f44 	addi	r5,r2,125
    16cc:	10c01f04 	addi	r3,r2,124
    16d0:	294b883a 	add	r5,r5,r5
    16d4:	003f4f06 	br	1414 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001414>
    16d8:	01403f84 	movi	r5,254
    16dc:	00c01f84 	movi	r3,126
    16e0:	003f4c06 	br	1414 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001414>
    16e4:	98800117 	ldw	r2,4(r19)
    16e8:	003fa006 	br	156c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700156c>
    16ec:	8808d0fa 	srli	r4,r17,3
    16f0:	20800044 	addi	r2,r4,1
    16f4:	1085883a 	add	r2,r2,r2
    16f8:	003e9006 	br	113c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700113c>

000016fc <memchr>:
    16fc:	208000cc 	andi	r2,r4,3
    1700:	280f883a 	mov	r7,r5
    1704:	10003426 	beq	r2,zero,17d8 <memchr+0xdc>
    1708:	30bfffc4 	addi	r2,r6,-1
    170c:	30001a26 	beq	r6,zero,1778 <memchr+0x7c>
    1710:	20c00003 	ldbu	r3,0(r4)
    1714:	29803fcc 	andi	r6,r5,255
    1718:	30c0051e 	bne	r6,r3,1730 <memchr+0x34>
    171c:	00001806 	br	1780 <memchr+0x84>
    1720:	10001526 	beq	r2,zero,1778 <memchr+0x7c>
    1724:	20c00003 	ldbu	r3,0(r4)
    1728:	10bfffc4 	addi	r2,r2,-1
    172c:	30c01426 	beq	r6,r3,1780 <memchr+0x84>
    1730:	21000044 	addi	r4,r4,1
    1734:	20c000cc 	andi	r3,r4,3
    1738:	183ff91e 	bne	r3,zero,1720 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001720>
    173c:	020000c4 	movi	r8,3
    1740:	40801136 	bltu	r8,r2,1788 <memchr+0x8c>
    1744:	10000c26 	beq	r2,zero,1778 <memchr+0x7c>
    1748:	20c00003 	ldbu	r3,0(r4)
    174c:	29403fcc 	andi	r5,r5,255
    1750:	28c00b26 	beq	r5,r3,1780 <memchr+0x84>
    1754:	20c00044 	addi	r3,r4,1
    1758:	39803fcc 	andi	r6,r7,255
    175c:	2089883a 	add	r4,r4,r2
    1760:	00000306 	br	1770 <memchr+0x74>
    1764:	18c00044 	addi	r3,r3,1
    1768:	197fffc3 	ldbu	r5,-1(r3)
    176c:	31400526 	beq	r6,r5,1784 <memchr+0x88>
    1770:	1805883a 	mov	r2,r3
    1774:	20fffb1e 	bne	r4,r3,1764 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001764>
    1778:	0005883a 	mov	r2,zero
    177c:	f800283a 	ret
    1780:	2005883a 	mov	r2,r4
    1784:	f800283a 	ret
    1788:	28c03fcc 	andi	r3,r5,255
    178c:	1812923a 	slli	r9,r3,8
    1790:	02ffbff4 	movhi	r11,65279
    1794:	02a02074 	movhi	r10,32897
    1798:	48d2b03a 	or	r9,r9,r3
    179c:	4806943a 	slli	r3,r9,16
    17a0:	5affbfc4 	addi	r11,r11,-257
    17a4:	52a02004 	addi	r10,r10,-32640
    17a8:	48d2b03a 	or	r9,r9,r3
    17ac:	20c00017 	ldw	r3,0(r4)
    17b0:	48c6f03a 	xor	r3,r9,r3
    17b4:	1acd883a 	add	r6,r3,r11
    17b8:	00c6303a 	nor	r3,zero,r3
    17bc:	30c6703a 	and	r3,r6,r3
    17c0:	1a86703a 	and	r3,r3,r10
    17c4:	183fe01e 	bne	r3,zero,1748 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001748>
    17c8:	10bfff04 	addi	r2,r2,-4
    17cc:	21000104 	addi	r4,r4,4
    17d0:	40bff636 	bltu	r8,r2,17ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70017ac>
    17d4:	003fdb06 	br	1744 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001744>
    17d8:	3005883a 	mov	r2,r6
    17dc:	003fd706 	br	173c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700173c>

000017e0 <memcpy>:
    17e0:	defffd04 	addi	sp,sp,-12
    17e4:	dfc00215 	stw	ra,8(sp)
    17e8:	dc400115 	stw	r17,4(sp)
    17ec:	dc000015 	stw	r16,0(sp)
    17f0:	00c003c4 	movi	r3,15
    17f4:	2005883a 	mov	r2,r4
    17f8:	1980452e 	bgeu	r3,r6,1910 <memcpy+0x130>
    17fc:	2906b03a 	or	r3,r5,r4
    1800:	18c000cc 	andi	r3,r3,3
    1804:	1800441e 	bne	r3,zero,1918 <memcpy+0x138>
    1808:	347ffc04 	addi	r17,r6,-16
    180c:	8822d13a 	srli	r17,r17,4
    1810:	28c00104 	addi	r3,r5,4
    1814:	23400104 	addi	r13,r4,4
    1818:	8820913a 	slli	r16,r17,4
    181c:	2b000204 	addi	r12,r5,8
    1820:	22c00204 	addi	r11,r4,8
    1824:	84000504 	addi	r16,r16,20
    1828:	2a800304 	addi	r10,r5,12
    182c:	22400304 	addi	r9,r4,12
    1830:	2c21883a 	add	r16,r5,r16
    1834:	2811883a 	mov	r8,r5
    1838:	200f883a 	mov	r7,r4
    183c:	41000017 	ldw	r4,0(r8)
    1840:	1fc00017 	ldw	ra,0(r3)
    1844:	63c00017 	ldw	r15,0(r12)
    1848:	39000015 	stw	r4,0(r7)
    184c:	53800017 	ldw	r14,0(r10)
    1850:	6fc00015 	stw	ra,0(r13)
    1854:	5bc00015 	stw	r15,0(r11)
    1858:	4b800015 	stw	r14,0(r9)
    185c:	18c00404 	addi	r3,r3,16
    1860:	39c00404 	addi	r7,r7,16
    1864:	42000404 	addi	r8,r8,16
    1868:	6b400404 	addi	r13,r13,16
    186c:	63000404 	addi	r12,r12,16
    1870:	5ac00404 	addi	r11,r11,16
    1874:	52800404 	addi	r10,r10,16
    1878:	4a400404 	addi	r9,r9,16
    187c:	1c3fef1e 	bne	r3,r16,183c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700183c>
    1880:	89c00044 	addi	r7,r17,1
    1884:	380e913a 	slli	r7,r7,4
    1888:	310003cc 	andi	r4,r6,15
    188c:	02c000c4 	movi	r11,3
    1890:	11c7883a 	add	r3,r2,r7
    1894:	29cb883a 	add	r5,r5,r7
    1898:	5900212e 	bgeu	r11,r4,1920 <memcpy+0x140>
    189c:	1813883a 	mov	r9,r3
    18a0:	2811883a 	mov	r8,r5
    18a4:	200f883a 	mov	r7,r4
    18a8:	42800017 	ldw	r10,0(r8)
    18ac:	4a400104 	addi	r9,r9,4
    18b0:	39ffff04 	addi	r7,r7,-4
    18b4:	4abfff15 	stw	r10,-4(r9)
    18b8:	42000104 	addi	r8,r8,4
    18bc:	59fffa36 	bltu	r11,r7,18a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70018a8>
    18c0:	213fff04 	addi	r4,r4,-4
    18c4:	2008d0ba 	srli	r4,r4,2
    18c8:	318000cc 	andi	r6,r6,3
    18cc:	21000044 	addi	r4,r4,1
    18d0:	2109883a 	add	r4,r4,r4
    18d4:	2109883a 	add	r4,r4,r4
    18d8:	1907883a 	add	r3,r3,r4
    18dc:	290b883a 	add	r5,r5,r4
    18e0:	30000626 	beq	r6,zero,18fc <memcpy+0x11c>
    18e4:	198d883a 	add	r6,r3,r6
    18e8:	29c00003 	ldbu	r7,0(r5)
    18ec:	18c00044 	addi	r3,r3,1
    18f0:	29400044 	addi	r5,r5,1
    18f4:	19ffffc5 	stb	r7,-1(r3)
    18f8:	19bffb1e 	bne	r3,r6,18e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70018e8>
    18fc:	dfc00217 	ldw	ra,8(sp)
    1900:	dc400117 	ldw	r17,4(sp)
    1904:	dc000017 	ldw	r16,0(sp)
    1908:	dec00304 	addi	sp,sp,12
    190c:	f800283a 	ret
    1910:	2007883a 	mov	r3,r4
    1914:	003ff206 	br	18e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70018e0>
    1918:	2007883a 	mov	r3,r4
    191c:	003ff106 	br	18e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70018e4>
    1920:	200d883a 	mov	r6,r4
    1924:	003fee06 	br	18e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70018e0>

00001928 <memmove>:
    1928:	2005883a 	mov	r2,r4
    192c:	29000b2e 	bgeu	r5,r4,195c <memmove+0x34>
    1930:	298f883a 	add	r7,r5,r6
    1934:	21c0092e 	bgeu	r4,r7,195c <memmove+0x34>
    1938:	2187883a 	add	r3,r4,r6
    193c:	198bc83a 	sub	r5,r3,r6
    1940:	30004826 	beq	r6,zero,1a64 <memmove+0x13c>
    1944:	39ffffc4 	addi	r7,r7,-1
    1948:	39000003 	ldbu	r4,0(r7)
    194c:	18ffffc4 	addi	r3,r3,-1
    1950:	19000005 	stb	r4,0(r3)
    1954:	28fffb1e 	bne	r5,r3,1944 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001944>
    1958:	f800283a 	ret
    195c:	00c003c4 	movi	r3,15
    1960:	1980412e 	bgeu	r3,r6,1a68 <memmove+0x140>
    1964:	2886b03a 	or	r3,r5,r2
    1968:	18c000cc 	andi	r3,r3,3
    196c:	1800401e 	bne	r3,zero,1a70 <memmove+0x148>
    1970:	33fffc04 	addi	r15,r6,-16
    1974:	781ed13a 	srli	r15,r15,4
    1978:	28c00104 	addi	r3,r5,4
    197c:	13400104 	addi	r13,r2,4
    1980:	781c913a 	slli	r14,r15,4
    1984:	2b000204 	addi	r12,r5,8
    1988:	12c00204 	addi	r11,r2,8
    198c:	73800504 	addi	r14,r14,20
    1990:	2a800304 	addi	r10,r5,12
    1994:	12400304 	addi	r9,r2,12
    1998:	2b9d883a 	add	r14,r5,r14
    199c:	2811883a 	mov	r8,r5
    19a0:	100f883a 	mov	r7,r2
    19a4:	41000017 	ldw	r4,0(r8)
    19a8:	39c00404 	addi	r7,r7,16
    19ac:	18c00404 	addi	r3,r3,16
    19b0:	393ffc15 	stw	r4,-16(r7)
    19b4:	193ffc17 	ldw	r4,-16(r3)
    19b8:	6b400404 	addi	r13,r13,16
    19bc:	5ac00404 	addi	r11,r11,16
    19c0:	693ffc15 	stw	r4,-16(r13)
    19c4:	61000017 	ldw	r4,0(r12)
    19c8:	4a400404 	addi	r9,r9,16
    19cc:	42000404 	addi	r8,r8,16
    19d0:	593ffc15 	stw	r4,-16(r11)
    19d4:	51000017 	ldw	r4,0(r10)
    19d8:	63000404 	addi	r12,r12,16
    19dc:	52800404 	addi	r10,r10,16
    19e0:	493ffc15 	stw	r4,-16(r9)
    19e4:	1bbfef1e 	bne	r3,r14,19a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70019a4>
    19e8:	79000044 	addi	r4,r15,1
    19ec:	2008913a 	slli	r4,r4,4
    19f0:	328003cc 	andi	r10,r6,15
    19f4:	02c000c4 	movi	r11,3
    19f8:	1107883a 	add	r3,r2,r4
    19fc:	290b883a 	add	r5,r5,r4
    1a00:	5a801e2e 	bgeu	r11,r10,1a7c <memmove+0x154>
    1a04:	1813883a 	mov	r9,r3
    1a08:	2811883a 	mov	r8,r5
    1a0c:	500f883a 	mov	r7,r10
    1a10:	41000017 	ldw	r4,0(r8)
    1a14:	4a400104 	addi	r9,r9,4
    1a18:	39ffff04 	addi	r7,r7,-4
    1a1c:	493fff15 	stw	r4,-4(r9)
    1a20:	42000104 	addi	r8,r8,4
    1a24:	59fffa36 	bltu	r11,r7,1a10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a10>
    1a28:	513fff04 	addi	r4,r10,-4
    1a2c:	2008d0ba 	srli	r4,r4,2
    1a30:	318000cc 	andi	r6,r6,3
    1a34:	21000044 	addi	r4,r4,1
    1a38:	2109883a 	add	r4,r4,r4
    1a3c:	2109883a 	add	r4,r4,r4
    1a40:	1907883a 	add	r3,r3,r4
    1a44:	290b883a 	add	r5,r5,r4
    1a48:	30000b26 	beq	r6,zero,1a78 <memmove+0x150>
    1a4c:	198d883a 	add	r6,r3,r6
    1a50:	29c00003 	ldbu	r7,0(r5)
    1a54:	18c00044 	addi	r3,r3,1
    1a58:	29400044 	addi	r5,r5,1
    1a5c:	19ffffc5 	stb	r7,-1(r3)
    1a60:	19bffb1e 	bne	r3,r6,1a50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a50>
    1a64:	f800283a 	ret
    1a68:	1007883a 	mov	r3,r2
    1a6c:	003ff606 	br	1a48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a48>
    1a70:	1007883a 	mov	r3,r2
    1a74:	003ff506 	br	1a4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a4c>
    1a78:	f800283a 	ret
    1a7c:	500d883a 	mov	r6,r10
    1a80:	003ff106 	br	1a48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a48>

00001a84 <memset>:
    1a84:	20c000cc 	andi	r3,r4,3
    1a88:	2005883a 	mov	r2,r4
    1a8c:	18004426 	beq	r3,zero,1ba0 <memset+0x11c>
    1a90:	31ffffc4 	addi	r7,r6,-1
    1a94:	30004026 	beq	r6,zero,1b98 <memset+0x114>
    1a98:	2813883a 	mov	r9,r5
    1a9c:	200d883a 	mov	r6,r4
    1aa0:	2007883a 	mov	r3,r4
    1aa4:	00000406 	br	1ab8 <memset+0x34>
    1aa8:	3a3fffc4 	addi	r8,r7,-1
    1aac:	31800044 	addi	r6,r6,1
    1ab0:	38003926 	beq	r7,zero,1b98 <memset+0x114>
    1ab4:	400f883a 	mov	r7,r8
    1ab8:	18c00044 	addi	r3,r3,1
    1abc:	32400005 	stb	r9,0(r6)
    1ac0:	1a0000cc 	andi	r8,r3,3
    1ac4:	403ff81e 	bne	r8,zero,1aa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001aa8>
    1ac8:	010000c4 	movi	r4,3
    1acc:	21c02d2e 	bgeu	r4,r7,1b84 <memset+0x100>
    1ad0:	29003fcc 	andi	r4,r5,255
    1ad4:	200c923a 	slli	r6,r4,8
    1ad8:	3108b03a 	or	r4,r6,r4
    1adc:	200c943a 	slli	r6,r4,16
    1ae0:	218cb03a 	or	r6,r4,r6
    1ae4:	010003c4 	movi	r4,15
    1ae8:	21c0182e 	bgeu	r4,r7,1b4c <memset+0xc8>
    1aec:	3b3ffc04 	addi	r12,r7,-16
    1af0:	6018d13a 	srli	r12,r12,4
    1af4:	1a000104 	addi	r8,r3,4
    1af8:	1ac00204 	addi	r11,r3,8
    1afc:	6008913a 	slli	r4,r12,4
    1b00:	1a800304 	addi	r10,r3,12
    1b04:	1813883a 	mov	r9,r3
    1b08:	21000504 	addi	r4,r4,20
    1b0c:	1909883a 	add	r4,r3,r4
    1b10:	49800015 	stw	r6,0(r9)
    1b14:	41800015 	stw	r6,0(r8)
    1b18:	59800015 	stw	r6,0(r11)
    1b1c:	51800015 	stw	r6,0(r10)
    1b20:	42000404 	addi	r8,r8,16
    1b24:	4a400404 	addi	r9,r9,16
    1b28:	5ac00404 	addi	r11,r11,16
    1b2c:	52800404 	addi	r10,r10,16
    1b30:	413ff71e 	bne	r8,r4,1b10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b10>
    1b34:	63000044 	addi	r12,r12,1
    1b38:	6018913a 	slli	r12,r12,4
    1b3c:	39c003cc 	andi	r7,r7,15
    1b40:	010000c4 	movi	r4,3
    1b44:	1b07883a 	add	r3,r3,r12
    1b48:	21c00e2e 	bgeu	r4,r7,1b84 <memset+0x100>
    1b4c:	1813883a 	mov	r9,r3
    1b50:	3811883a 	mov	r8,r7
    1b54:	010000c4 	movi	r4,3
    1b58:	49800015 	stw	r6,0(r9)
    1b5c:	423fff04 	addi	r8,r8,-4
    1b60:	4a400104 	addi	r9,r9,4
    1b64:	223ffc36 	bltu	r4,r8,1b58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b58>
    1b68:	393fff04 	addi	r4,r7,-4
    1b6c:	2008d0ba 	srli	r4,r4,2
    1b70:	39c000cc 	andi	r7,r7,3
    1b74:	21000044 	addi	r4,r4,1
    1b78:	2109883a 	add	r4,r4,r4
    1b7c:	2109883a 	add	r4,r4,r4
    1b80:	1907883a 	add	r3,r3,r4
    1b84:	38000526 	beq	r7,zero,1b9c <memset+0x118>
    1b88:	19cf883a 	add	r7,r3,r7
    1b8c:	19400005 	stb	r5,0(r3)
    1b90:	18c00044 	addi	r3,r3,1
    1b94:	38fffd1e 	bne	r7,r3,1b8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b8c>
    1b98:	f800283a 	ret
    1b9c:	f800283a 	ret
    1ba0:	2007883a 	mov	r3,r4
    1ba4:	300f883a 	mov	r7,r6
    1ba8:	003fc706 	br	1ac8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ac8>

00001bac <_realloc_r>:
    1bac:	defff604 	addi	sp,sp,-40
    1bb0:	dc800215 	stw	r18,8(sp)
    1bb4:	dfc00915 	stw	ra,36(sp)
    1bb8:	df000815 	stw	fp,32(sp)
    1bbc:	ddc00715 	stw	r23,28(sp)
    1bc0:	dd800615 	stw	r22,24(sp)
    1bc4:	dd400515 	stw	r21,20(sp)
    1bc8:	dd000415 	stw	r20,16(sp)
    1bcc:	dcc00315 	stw	r19,12(sp)
    1bd0:	dc400115 	stw	r17,4(sp)
    1bd4:	dc000015 	stw	r16,0(sp)
    1bd8:	3025883a 	mov	r18,r6
    1bdc:	2800b726 	beq	r5,zero,1ebc <_realloc_r+0x310>
    1be0:	282b883a 	mov	r21,r5
    1be4:	2029883a 	mov	r20,r4
    1be8:	0003bc80 	call	3bc8 <__malloc_lock>
    1bec:	a8bfff17 	ldw	r2,-4(r21)
    1bf0:	043fff04 	movi	r16,-4
    1bf4:	90c002c4 	addi	r3,r18,11
    1bf8:	01000584 	movi	r4,22
    1bfc:	acfffe04 	addi	r19,r21,-8
    1c00:	1420703a 	and	r16,r2,r16
    1c04:	20c0332e 	bgeu	r4,r3,1cd4 <_realloc_r+0x128>
    1c08:	047ffe04 	movi	r17,-8
    1c0c:	1c62703a 	and	r17,r3,r17
    1c10:	8807883a 	mov	r3,r17
    1c14:	88005816 	blt	r17,zero,1d78 <_realloc_r+0x1cc>
    1c18:	8c805736 	bltu	r17,r18,1d78 <_realloc_r+0x1cc>
    1c1c:	80c0300e 	bge	r16,r3,1ce0 <_realloc_r+0x134>
    1c20:	07000074 	movhi	fp,1
    1c24:	e73ead04 	addi	fp,fp,-1356
    1c28:	e1c00217 	ldw	r7,8(fp)
    1c2c:	9c09883a 	add	r4,r19,r16
    1c30:	22000117 	ldw	r8,4(r4)
    1c34:	21c06326 	beq	r4,r7,1dc4 <_realloc_r+0x218>
    1c38:	017fff84 	movi	r5,-2
    1c3c:	414a703a 	and	r5,r8,r5
    1c40:	214b883a 	add	r5,r4,r5
    1c44:	29800117 	ldw	r6,4(r5)
    1c48:	3180004c 	andi	r6,r6,1
    1c4c:	30003f26 	beq	r6,zero,1d4c <_realloc_r+0x1a0>
    1c50:	1080004c 	andi	r2,r2,1
    1c54:	10008326 	beq	r2,zero,1e64 <_realloc_r+0x2b8>
    1c58:	900b883a 	mov	r5,r18
    1c5c:	a009883a 	mov	r4,r20
    1c60:	0000ef00 	call	ef0 <_malloc_r>
    1c64:	1025883a 	mov	r18,r2
    1c68:	10011e26 	beq	r2,zero,20e4 <_realloc_r+0x538>
    1c6c:	a93fff17 	ldw	r4,-4(r21)
    1c70:	10fffe04 	addi	r3,r2,-8
    1c74:	00bfff84 	movi	r2,-2
    1c78:	2084703a 	and	r2,r4,r2
    1c7c:	9885883a 	add	r2,r19,r2
    1c80:	1880ee26 	beq	r3,r2,203c <_realloc_r+0x490>
    1c84:	81bfff04 	addi	r6,r16,-4
    1c88:	00800904 	movi	r2,36
    1c8c:	1180b836 	bltu	r2,r6,1f70 <_realloc_r+0x3c4>
    1c90:	00c004c4 	movi	r3,19
    1c94:	19809636 	bltu	r3,r6,1ef0 <_realloc_r+0x344>
    1c98:	9005883a 	mov	r2,r18
    1c9c:	a807883a 	mov	r3,r21
    1ca0:	19000017 	ldw	r4,0(r3)
    1ca4:	11000015 	stw	r4,0(r2)
    1ca8:	19000117 	ldw	r4,4(r3)
    1cac:	11000115 	stw	r4,4(r2)
    1cb0:	18c00217 	ldw	r3,8(r3)
    1cb4:	10c00215 	stw	r3,8(r2)
    1cb8:	a80b883a 	mov	r5,r21
    1cbc:	a009883a 	mov	r4,r20
    1cc0:	00029780 	call	2978 <_free_r>
    1cc4:	a009883a 	mov	r4,r20
    1cc8:	0003ce80 	call	3ce8 <__malloc_unlock>
    1ccc:	9005883a 	mov	r2,r18
    1cd0:	00001206 	br	1d1c <_realloc_r+0x170>
    1cd4:	00c00404 	movi	r3,16
    1cd8:	1823883a 	mov	r17,r3
    1cdc:	003fce06 	br	1c18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c18>
    1ce0:	a825883a 	mov	r18,r21
    1ce4:	8445c83a 	sub	r2,r16,r17
    1ce8:	00c003c4 	movi	r3,15
    1cec:	18802636 	bltu	r3,r2,1d88 <_realloc_r+0x1dc>
    1cf0:	99800117 	ldw	r6,4(r19)
    1cf4:	9c07883a 	add	r3,r19,r16
    1cf8:	3180004c 	andi	r6,r6,1
    1cfc:	3420b03a 	or	r16,r6,r16
    1d00:	9c000115 	stw	r16,4(r19)
    1d04:	18800117 	ldw	r2,4(r3)
    1d08:	10800054 	ori	r2,r2,1
    1d0c:	18800115 	stw	r2,4(r3)
    1d10:	a009883a 	mov	r4,r20
    1d14:	0003ce80 	call	3ce8 <__malloc_unlock>
    1d18:	9005883a 	mov	r2,r18
    1d1c:	dfc00917 	ldw	ra,36(sp)
    1d20:	df000817 	ldw	fp,32(sp)
    1d24:	ddc00717 	ldw	r23,28(sp)
    1d28:	dd800617 	ldw	r22,24(sp)
    1d2c:	dd400517 	ldw	r21,20(sp)
    1d30:	dd000417 	ldw	r20,16(sp)
    1d34:	dcc00317 	ldw	r19,12(sp)
    1d38:	dc800217 	ldw	r18,8(sp)
    1d3c:	dc400117 	ldw	r17,4(sp)
    1d40:	dc000017 	ldw	r16,0(sp)
    1d44:	dec00a04 	addi	sp,sp,40
    1d48:	f800283a 	ret
    1d4c:	017fff04 	movi	r5,-4
    1d50:	414a703a 	and	r5,r8,r5
    1d54:	814d883a 	add	r6,r16,r5
    1d58:	30c01f16 	blt	r6,r3,1dd8 <_realloc_r+0x22c>
    1d5c:	20800317 	ldw	r2,12(r4)
    1d60:	20c00217 	ldw	r3,8(r4)
    1d64:	a825883a 	mov	r18,r21
    1d68:	3021883a 	mov	r16,r6
    1d6c:	18800315 	stw	r2,12(r3)
    1d70:	10c00215 	stw	r3,8(r2)
    1d74:	003fdb06 	br	1ce4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ce4>
    1d78:	00800304 	movi	r2,12
    1d7c:	a0800015 	stw	r2,0(r20)
    1d80:	0005883a 	mov	r2,zero
    1d84:	003fe506 	br	1d1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d1c>
    1d88:	98c00117 	ldw	r3,4(r19)
    1d8c:	9c4b883a 	add	r5,r19,r17
    1d90:	11000054 	ori	r4,r2,1
    1d94:	18c0004c 	andi	r3,r3,1
    1d98:	1c62b03a 	or	r17,r3,r17
    1d9c:	9c400115 	stw	r17,4(r19)
    1da0:	29000115 	stw	r4,4(r5)
    1da4:	2885883a 	add	r2,r5,r2
    1da8:	10c00117 	ldw	r3,4(r2)
    1dac:	29400204 	addi	r5,r5,8
    1db0:	a009883a 	mov	r4,r20
    1db4:	18c00054 	ori	r3,r3,1
    1db8:	10c00115 	stw	r3,4(r2)
    1dbc:	00029780 	call	2978 <_free_r>
    1dc0:	003fd306 	br	1d10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d10>
    1dc4:	017fff04 	movi	r5,-4
    1dc8:	414a703a 	and	r5,r8,r5
    1dcc:	89800404 	addi	r6,r17,16
    1dd0:	8151883a 	add	r8,r16,r5
    1dd4:	4180590e 	bge	r8,r6,1f3c <_realloc_r+0x390>
    1dd8:	1080004c 	andi	r2,r2,1
    1ddc:	103f9e1e 	bne	r2,zero,1c58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c58>
    1de0:	adbffe17 	ldw	r22,-8(r21)
    1de4:	00bfff04 	movi	r2,-4
    1de8:	9dadc83a 	sub	r22,r19,r22
    1dec:	b1800117 	ldw	r6,4(r22)
    1df0:	3084703a 	and	r2,r6,r2
    1df4:	20002026 	beq	r4,zero,1e78 <_realloc_r+0x2cc>
    1df8:	80af883a 	add	r23,r16,r2
    1dfc:	b96f883a 	add	r23,r23,r5
    1e00:	21c05f26 	beq	r4,r7,1f80 <_realloc_r+0x3d4>
    1e04:	b8c01c16 	blt	r23,r3,1e78 <_realloc_r+0x2cc>
    1e08:	20800317 	ldw	r2,12(r4)
    1e0c:	20c00217 	ldw	r3,8(r4)
    1e10:	81bfff04 	addi	r6,r16,-4
    1e14:	01000904 	movi	r4,36
    1e18:	18800315 	stw	r2,12(r3)
    1e1c:	10c00215 	stw	r3,8(r2)
    1e20:	b0c00217 	ldw	r3,8(r22)
    1e24:	b0800317 	ldw	r2,12(r22)
    1e28:	b4800204 	addi	r18,r22,8
    1e2c:	18800315 	stw	r2,12(r3)
    1e30:	10c00215 	stw	r3,8(r2)
    1e34:	21801b36 	bltu	r4,r6,1ea4 <_realloc_r+0x2f8>
    1e38:	008004c4 	movi	r2,19
    1e3c:	1180352e 	bgeu	r2,r6,1f14 <_realloc_r+0x368>
    1e40:	a8800017 	ldw	r2,0(r21)
    1e44:	b0800215 	stw	r2,8(r22)
    1e48:	a8800117 	ldw	r2,4(r21)
    1e4c:	b0800315 	stw	r2,12(r22)
    1e50:	008006c4 	movi	r2,27
    1e54:	11807f36 	bltu	r2,r6,2054 <_realloc_r+0x4a8>
    1e58:	b0800404 	addi	r2,r22,16
    1e5c:	ad400204 	addi	r21,r21,8
    1e60:	00002d06 	br	1f18 <_realloc_r+0x36c>
    1e64:	adbffe17 	ldw	r22,-8(r21)
    1e68:	00bfff04 	movi	r2,-4
    1e6c:	9dadc83a 	sub	r22,r19,r22
    1e70:	b1000117 	ldw	r4,4(r22)
    1e74:	2084703a 	and	r2,r4,r2
    1e78:	b03f7726 	beq	r22,zero,1c58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c58>
    1e7c:	80af883a 	add	r23,r16,r2
    1e80:	b8ff7516 	blt	r23,r3,1c58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c58>
    1e84:	b0800317 	ldw	r2,12(r22)
    1e88:	b0c00217 	ldw	r3,8(r22)
    1e8c:	81bfff04 	addi	r6,r16,-4
    1e90:	01000904 	movi	r4,36
    1e94:	18800315 	stw	r2,12(r3)
    1e98:	10c00215 	stw	r3,8(r2)
    1e9c:	b4800204 	addi	r18,r22,8
    1ea0:	21bfe52e 	bgeu	r4,r6,1e38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001e38>
    1ea4:	a80b883a 	mov	r5,r21
    1ea8:	9009883a 	mov	r4,r18
    1eac:	00019280 	call	1928 <memmove>
    1eb0:	b821883a 	mov	r16,r23
    1eb4:	b027883a 	mov	r19,r22
    1eb8:	003f8a06 	br	1ce4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ce4>
    1ebc:	300b883a 	mov	r5,r6
    1ec0:	dfc00917 	ldw	ra,36(sp)
    1ec4:	df000817 	ldw	fp,32(sp)
    1ec8:	ddc00717 	ldw	r23,28(sp)
    1ecc:	dd800617 	ldw	r22,24(sp)
    1ed0:	dd400517 	ldw	r21,20(sp)
    1ed4:	dd000417 	ldw	r20,16(sp)
    1ed8:	dcc00317 	ldw	r19,12(sp)
    1edc:	dc800217 	ldw	r18,8(sp)
    1ee0:	dc400117 	ldw	r17,4(sp)
    1ee4:	dc000017 	ldw	r16,0(sp)
    1ee8:	dec00a04 	addi	sp,sp,40
    1eec:	0000ef01 	jmpi	ef0 <_malloc_r>
    1ef0:	a8c00017 	ldw	r3,0(r21)
    1ef4:	90c00015 	stw	r3,0(r18)
    1ef8:	a8c00117 	ldw	r3,4(r21)
    1efc:	90c00115 	stw	r3,4(r18)
    1f00:	00c006c4 	movi	r3,27
    1f04:	19804536 	bltu	r3,r6,201c <_realloc_r+0x470>
    1f08:	90800204 	addi	r2,r18,8
    1f0c:	a8c00204 	addi	r3,r21,8
    1f10:	003f6306 	br	1ca0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ca0>
    1f14:	9005883a 	mov	r2,r18
    1f18:	a8c00017 	ldw	r3,0(r21)
    1f1c:	b821883a 	mov	r16,r23
    1f20:	b027883a 	mov	r19,r22
    1f24:	10c00015 	stw	r3,0(r2)
    1f28:	a8c00117 	ldw	r3,4(r21)
    1f2c:	10c00115 	stw	r3,4(r2)
    1f30:	a8c00217 	ldw	r3,8(r21)
    1f34:	10c00215 	stw	r3,8(r2)
    1f38:	003f6a06 	br	1ce4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ce4>
    1f3c:	9c67883a 	add	r19,r19,r17
    1f40:	4445c83a 	sub	r2,r8,r17
    1f44:	e4c00215 	stw	r19,8(fp)
    1f48:	10800054 	ori	r2,r2,1
    1f4c:	98800115 	stw	r2,4(r19)
    1f50:	a8bfff17 	ldw	r2,-4(r21)
    1f54:	a009883a 	mov	r4,r20
    1f58:	1080004c 	andi	r2,r2,1
    1f5c:	1462b03a 	or	r17,r2,r17
    1f60:	ac7fff15 	stw	r17,-4(r21)
    1f64:	0003ce80 	call	3ce8 <__malloc_unlock>
    1f68:	a805883a 	mov	r2,r21
    1f6c:	003f6b06 	br	1d1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d1c>
    1f70:	a80b883a 	mov	r5,r21
    1f74:	9009883a 	mov	r4,r18
    1f78:	00019280 	call	1928 <memmove>
    1f7c:	003f4e06 	br	1cb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001cb8>
    1f80:	89000404 	addi	r4,r17,16
    1f84:	b93fbc16 	blt	r23,r4,1e78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001e78>
    1f88:	b0800317 	ldw	r2,12(r22)
    1f8c:	b0c00217 	ldw	r3,8(r22)
    1f90:	81bfff04 	addi	r6,r16,-4
    1f94:	01000904 	movi	r4,36
    1f98:	18800315 	stw	r2,12(r3)
    1f9c:	10c00215 	stw	r3,8(r2)
    1fa0:	b4800204 	addi	r18,r22,8
    1fa4:	21804336 	bltu	r4,r6,20b4 <_realloc_r+0x508>
    1fa8:	008004c4 	movi	r2,19
    1fac:	11803f2e 	bgeu	r2,r6,20ac <_realloc_r+0x500>
    1fb0:	a8800017 	ldw	r2,0(r21)
    1fb4:	b0800215 	stw	r2,8(r22)
    1fb8:	a8800117 	ldw	r2,4(r21)
    1fbc:	b0800315 	stw	r2,12(r22)
    1fc0:	008006c4 	movi	r2,27
    1fc4:	11803f36 	bltu	r2,r6,20c4 <_realloc_r+0x518>
    1fc8:	b0800404 	addi	r2,r22,16
    1fcc:	ad400204 	addi	r21,r21,8
    1fd0:	a8c00017 	ldw	r3,0(r21)
    1fd4:	10c00015 	stw	r3,0(r2)
    1fd8:	a8c00117 	ldw	r3,4(r21)
    1fdc:	10c00115 	stw	r3,4(r2)
    1fe0:	a8c00217 	ldw	r3,8(r21)
    1fe4:	10c00215 	stw	r3,8(r2)
    1fe8:	b447883a 	add	r3,r22,r17
    1fec:	bc45c83a 	sub	r2,r23,r17
    1ff0:	e0c00215 	stw	r3,8(fp)
    1ff4:	10800054 	ori	r2,r2,1
    1ff8:	18800115 	stw	r2,4(r3)
    1ffc:	b0800117 	ldw	r2,4(r22)
    2000:	a009883a 	mov	r4,r20
    2004:	1080004c 	andi	r2,r2,1
    2008:	1462b03a 	or	r17,r2,r17
    200c:	b4400115 	stw	r17,4(r22)
    2010:	0003ce80 	call	3ce8 <__malloc_unlock>
    2014:	9005883a 	mov	r2,r18
    2018:	003f4006 	br	1d1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d1c>
    201c:	a8c00217 	ldw	r3,8(r21)
    2020:	90c00215 	stw	r3,8(r18)
    2024:	a8c00317 	ldw	r3,12(r21)
    2028:	90c00315 	stw	r3,12(r18)
    202c:	30801126 	beq	r6,r2,2074 <_realloc_r+0x4c8>
    2030:	90800404 	addi	r2,r18,16
    2034:	a8c00404 	addi	r3,r21,16
    2038:	003f1906 	br	1ca0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ca0>
    203c:	90ffff17 	ldw	r3,-4(r18)
    2040:	00bfff04 	movi	r2,-4
    2044:	a825883a 	mov	r18,r21
    2048:	1884703a 	and	r2,r3,r2
    204c:	80a1883a 	add	r16,r16,r2
    2050:	003f2406 	br	1ce4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ce4>
    2054:	a8800217 	ldw	r2,8(r21)
    2058:	b0800415 	stw	r2,16(r22)
    205c:	a8800317 	ldw	r2,12(r21)
    2060:	b0800515 	stw	r2,20(r22)
    2064:	31000a26 	beq	r6,r4,2090 <_realloc_r+0x4e4>
    2068:	b0800604 	addi	r2,r22,24
    206c:	ad400404 	addi	r21,r21,16
    2070:	003fa906 	br	1f18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001f18>
    2074:	a9000417 	ldw	r4,16(r21)
    2078:	90800604 	addi	r2,r18,24
    207c:	a8c00604 	addi	r3,r21,24
    2080:	91000415 	stw	r4,16(r18)
    2084:	a9000517 	ldw	r4,20(r21)
    2088:	91000515 	stw	r4,20(r18)
    208c:	003f0406 	br	1ca0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ca0>
    2090:	a8c00417 	ldw	r3,16(r21)
    2094:	ad400604 	addi	r21,r21,24
    2098:	b0800804 	addi	r2,r22,32
    209c:	b0c00615 	stw	r3,24(r22)
    20a0:	a8ffff17 	ldw	r3,-4(r21)
    20a4:	b0c00715 	stw	r3,28(r22)
    20a8:	003f9b06 	br	1f18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001f18>
    20ac:	9005883a 	mov	r2,r18
    20b0:	003fc706 	br	1fd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001fd0>
    20b4:	a80b883a 	mov	r5,r21
    20b8:	9009883a 	mov	r4,r18
    20bc:	00019280 	call	1928 <memmove>
    20c0:	003fc906 	br	1fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001fe8>
    20c4:	a8800217 	ldw	r2,8(r21)
    20c8:	b0800415 	stw	r2,16(r22)
    20cc:	a8800317 	ldw	r2,12(r21)
    20d0:	b0800515 	stw	r2,20(r22)
    20d4:	31000726 	beq	r6,r4,20f4 <_realloc_r+0x548>
    20d8:	b0800604 	addi	r2,r22,24
    20dc:	ad400404 	addi	r21,r21,16
    20e0:	003fbb06 	br	1fd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001fd0>
    20e4:	a009883a 	mov	r4,r20
    20e8:	0003ce80 	call	3ce8 <__malloc_unlock>
    20ec:	0005883a 	mov	r2,zero
    20f0:	003f0a06 	br	1d1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d1c>
    20f4:	a8c00417 	ldw	r3,16(r21)
    20f8:	ad400604 	addi	r21,r21,24
    20fc:	b0800804 	addi	r2,r22,32
    2100:	b0c00615 	stw	r3,24(r22)
    2104:	a8ffff17 	ldw	r3,-4(r21)
    2108:	b0c00715 	stw	r3,28(r22)
    210c:	003fb006 	br	1fd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001fd0>

00002110 <_sbrk_r>:
    2110:	defffd04 	addi	sp,sp,-12
    2114:	dc000015 	stw	r16,0(sp)
    2118:	04000074 	movhi	r16,1
    211c:	dc400115 	stw	r17,4(sp)
    2120:	840d1b04 	addi	r16,r16,13420
    2124:	2023883a 	mov	r17,r4
    2128:	2809883a 	mov	r4,r5
    212c:	dfc00215 	stw	ra,8(sp)
    2130:	80000015 	stw	zero,0(r16)
    2134:	00038c00 	call	38c0 <sbrk>
    2138:	00ffffc4 	movi	r3,-1
    213c:	10c00526 	beq	r2,r3,2154 <_sbrk_r+0x44>
    2140:	dfc00217 	ldw	ra,8(sp)
    2144:	dc400117 	ldw	r17,4(sp)
    2148:	dc000017 	ldw	r16,0(sp)
    214c:	dec00304 	addi	sp,sp,12
    2150:	f800283a 	ret
    2154:	80c00017 	ldw	r3,0(r16)
    2158:	183ff926 	beq	r3,zero,2140 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002140>
    215c:	88c00015 	stw	r3,0(r17)
    2160:	003ff706 	br	2140 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002140>

00002164 <__sread>:
    2164:	defffe04 	addi	sp,sp,-8
    2168:	dc000015 	stw	r16,0(sp)
    216c:	2821883a 	mov	r16,r5
    2170:	2940038f 	ldh	r5,14(r5)
    2174:	dfc00115 	stw	ra,4(sp)
    2178:	0002ea40 	call	2ea4 <_read_r>
    217c:	10000716 	blt	r2,zero,219c <__sread+0x38>
    2180:	80c01417 	ldw	r3,80(r16)
    2184:	1887883a 	add	r3,r3,r2
    2188:	80c01415 	stw	r3,80(r16)
    218c:	dfc00117 	ldw	ra,4(sp)
    2190:	dc000017 	ldw	r16,0(sp)
    2194:	dec00204 	addi	sp,sp,8
    2198:	f800283a 	ret
    219c:	80c0030b 	ldhu	r3,12(r16)
    21a0:	18fbffcc 	andi	r3,r3,61439
    21a4:	80c0030d 	sth	r3,12(r16)
    21a8:	dfc00117 	ldw	ra,4(sp)
    21ac:	dc000017 	ldw	r16,0(sp)
    21b0:	dec00204 	addi	sp,sp,8
    21b4:	f800283a 	ret

000021b8 <__seofread>:
    21b8:	0005883a 	mov	r2,zero
    21bc:	f800283a 	ret

000021c0 <__swrite>:
    21c0:	2880030b 	ldhu	r2,12(r5)
    21c4:	defffb04 	addi	sp,sp,-20
    21c8:	dcc00315 	stw	r19,12(sp)
    21cc:	dc800215 	stw	r18,8(sp)
    21d0:	dc400115 	stw	r17,4(sp)
    21d4:	dc000015 	stw	r16,0(sp)
    21d8:	dfc00415 	stw	ra,16(sp)
    21dc:	10c0400c 	andi	r3,r2,256
    21e0:	2821883a 	mov	r16,r5
    21e4:	2023883a 	mov	r17,r4
    21e8:	3025883a 	mov	r18,r6
    21ec:	3827883a 	mov	r19,r7
    21f0:	18000526 	beq	r3,zero,2208 <__swrite+0x48>
    21f4:	2940038f 	ldh	r5,14(r5)
    21f8:	01c00084 	movi	r7,2
    21fc:	000d883a 	mov	r6,zero
    2200:	0002c880 	call	2c88 <_lseek_r>
    2204:	8080030b 	ldhu	r2,12(r16)
    2208:	8140038f 	ldh	r5,14(r16)
    220c:	10bbffcc 	andi	r2,r2,61439
    2210:	980f883a 	mov	r7,r19
    2214:	900d883a 	mov	r6,r18
    2218:	8809883a 	mov	r4,r17
    221c:	8080030d 	sth	r2,12(r16)
    2220:	dfc00417 	ldw	ra,16(sp)
    2224:	dcc00317 	ldw	r19,12(sp)
    2228:	dc800217 	ldw	r18,8(sp)
    222c:	dc400117 	ldw	r17,4(sp)
    2230:	dc000017 	ldw	r16,0(sp)
    2234:	dec00504 	addi	sp,sp,20
    2238:	00022a01 	jmpi	22a0 <_write_r>

0000223c <__sseek>:
    223c:	defffe04 	addi	sp,sp,-8
    2240:	dc000015 	stw	r16,0(sp)
    2244:	2821883a 	mov	r16,r5
    2248:	2940038f 	ldh	r5,14(r5)
    224c:	dfc00115 	stw	ra,4(sp)
    2250:	0002c880 	call	2c88 <_lseek_r>
    2254:	00ffffc4 	movi	r3,-1
    2258:	10c00826 	beq	r2,r3,227c <__sseek+0x40>
    225c:	80c0030b 	ldhu	r3,12(r16)
    2260:	80801415 	stw	r2,80(r16)
    2264:	18c40014 	ori	r3,r3,4096
    2268:	80c0030d 	sth	r3,12(r16)
    226c:	dfc00117 	ldw	ra,4(sp)
    2270:	dc000017 	ldw	r16,0(sp)
    2274:	dec00204 	addi	sp,sp,8
    2278:	f800283a 	ret
    227c:	80c0030b 	ldhu	r3,12(r16)
    2280:	18fbffcc 	andi	r3,r3,61439
    2284:	80c0030d 	sth	r3,12(r16)
    2288:	dfc00117 	ldw	ra,4(sp)
    228c:	dc000017 	ldw	r16,0(sp)
    2290:	dec00204 	addi	sp,sp,8
    2294:	f800283a 	ret

00002298 <__sclose>:
    2298:	2940038f 	ldh	r5,14(r5)
    229c:	00024541 	jmpi	2454 <_close_r>

000022a0 <_write_r>:
    22a0:	defffd04 	addi	sp,sp,-12
    22a4:	2805883a 	mov	r2,r5
    22a8:	dc000015 	stw	r16,0(sp)
    22ac:	04000074 	movhi	r16,1
    22b0:	dc400115 	stw	r17,4(sp)
    22b4:	300b883a 	mov	r5,r6
    22b8:	840d1b04 	addi	r16,r16,13420
    22bc:	2023883a 	mov	r17,r4
    22c0:	380d883a 	mov	r6,r7
    22c4:	1009883a 	mov	r4,r2
    22c8:	dfc00215 	stw	ra,8(sp)
    22cc:	80000015 	stw	zero,0(r16)
    22d0:	00039ac0 	call	39ac <write>
    22d4:	00ffffc4 	movi	r3,-1
    22d8:	10c00526 	beq	r2,r3,22f0 <_write_r+0x50>
    22dc:	dfc00217 	ldw	ra,8(sp)
    22e0:	dc400117 	ldw	r17,4(sp)
    22e4:	dc000017 	ldw	r16,0(sp)
    22e8:	dec00304 	addi	sp,sp,12
    22ec:	f800283a 	ret
    22f0:	80c00017 	ldw	r3,0(r16)
    22f4:	183ff926 	beq	r3,zero,22dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70022dc>
    22f8:	88c00015 	stw	r3,0(r17)
    22fc:	003ff706 	br	22dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70022dc>

00002300 <__swsetup_r>:
    2300:	00800074 	movhi	r2,1
    2304:	defffd04 	addi	sp,sp,-12
    2308:	10853204 	addi	r2,r2,5320
    230c:	dc400115 	stw	r17,4(sp)
    2310:	2023883a 	mov	r17,r4
    2314:	11000017 	ldw	r4,0(r2)
    2318:	dc000015 	stw	r16,0(sp)
    231c:	dfc00215 	stw	ra,8(sp)
    2320:	2821883a 	mov	r16,r5
    2324:	20000226 	beq	r4,zero,2330 <__swsetup_r+0x30>
    2328:	20800e17 	ldw	r2,56(r4)
    232c:	10003126 	beq	r2,zero,23f4 <__swsetup_r+0xf4>
    2330:	8080030b 	ldhu	r2,12(r16)
    2334:	10c0020c 	andi	r3,r2,8
    2338:	1009883a 	mov	r4,r2
    233c:	18000f26 	beq	r3,zero,237c <__swsetup_r+0x7c>
    2340:	80c00417 	ldw	r3,16(r16)
    2344:	18001526 	beq	r3,zero,239c <__swsetup_r+0x9c>
    2348:	1100004c 	andi	r4,r2,1
    234c:	20001c1e 	bne	r4,zero,23c0 <__swsetup_r+0xc0>
    2350:	1080008c 	andi	r2,r2,2
    2354:	1000291e 	bne	r2,zero,23fc <__swsetup_r+0xfc>
    2358:	80800517 	ldw	r2,20(r16)
    235c:	80800215 	stw	r2,8(r16)
    2360:	18001c26 	beq	r3,zero,23d4 <__swsetup_r+0xd4>
    2364:	0005883a 	mov	r2,zero
    2368:	dfc00217 	ldw	ra,8(sp)
    236c:	dc400117 	ldw	r17,4(sp)
    2370:	dc000017 	ldw	r16,0(sp)
    2374:	dec00304 	addi	sp,sp,12
    2378:	f800283a 	ret
    237c:	2080040c 	andi	r2,r4,16
    2380:	10002e26 	beq	r2,zero,243c <__swsetup_r+0x13c>
    2384:	2080010c 	andi	r2,r4,4
    2388:	10001e1e 	bne	r2,zero,2404 <__swsetup_r+0x104>
    238c:	80c00417 	ldw	r3,16(r16)
    2390:	20800214 	ori	r2,r4,8
    2394:	8080030d 	sth	r2,12(r16)
    2398:	183feb1e 	bne	r3,zero,2348 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002348>
    239c:	1100a00c 	andi	r4,r2,640
    23a0:	01408004 	movi	r5,512
    23a4:	217fe826 	beq	r4,r5,2348 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002348>
    23a8:	800b883a 	mov	r5,r16
    23ac:	8809883a 	mov	r4,r17
    23b0:	0002ce80 	call	2ce8 <__smakebuf_r>
    23b4:	8080030b 	ldhu	r2,12(r16)
    23b8:	80c00417 	ldw	r3,16(r16)
    23bc:	003fe206 	br	2348 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002348>
    23c0:	80800517 	ldw	r2,20(r16)
    23c4:	80000215 	stw	zero,8(r16)
    23c8:	0085c83a 	sub	r2,zero,r2
    23cc:	80800615 	stw	r2,24(r16)
    23d0:	183fe41e 	bne	r3,zero,2364 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002364>
    23d4:	80c0030b 	ldhu	r3,12(r16)
    23d8:	0005883a 	mov	r2,zero
    23dc:	1900200c 	andi	r4,r3,128
    23e0:	203fe126 	beq	r4,zero,2368 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002368>
    23e4:	18c01014 	ori	r3,r3,64
    23e8:	80c0030d 	sth	r3,12(r16)
    23ec:	00bfffc4 	movi	r2,-1
    23f0:	003fdd06 	br	2368 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002368>
    23f4:	000085c0 	call	85c <__sinit>
    23f8:	003fcd06 	br	2330 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002330>
    23fc:	0005883a 	mov	r2,zero
    2400:	003fd606 	br	235c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700235c>
    2404:	81400c17 	ldw	r5,48(r16)
    2408:	28000626 	beq	r5,zero,2424 <__swsetup_r+0x124>
    240c:	80801004 	addi	r2,r16,64
    2410:	28800326 	beq	r5,r2,2420 <__swsetup_r+0x120>
    2414:	8809883a 	mov	r4,r17
    2418:	00029780 	call	2978 <_free_r>
    241c:	8100030b 	ldhu	r4,12(r16)
    2420:	80000c15 	stw	zero,48(r16)
    2424:	80c00417 	ldw	r3,16(r16)
    2428:	00bff6c4 	movi	r2,-37
    242c:	1108703a 	and	r4,r2,r4
    2430:	80000115 	stw	zero,4(r16)
    2434:	80c00015 	stw	r3,0(r16)
    2438:	003fd506 	br	2390 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002390>
    243c:	00800244 	movi	r2,9
    2440:	88800015 	stw	r2,0(r17)
    2444:	20801014 	ori	r2,r4,64
    2448:	8080030d 	sth	r2,12(r16)
    244c:	00bfffc4 	movi	r2,-1
    2450:	003fc506 	br	2368 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002368>

00002454 <_close_r>:
    2454:	defffd04 	addi	sp,sp,-12
    2458:	dc000015 	stw	r16,0(sp)
    245c:	04000074 	movhi	r16,1
    2460:	dc400115 	stw	r17,4(sp)
    2464:	840d1b04 	addi	r16,r16,13420
    2468:	2023883a 	mov	r17,r4
    246c:	2809883a 	mov	r4,r5
    2470:	dfc00215 	stw	ra,8(sp)
    2474:	80000015 	stw	zero,0(r16)
    2478:	00031a40 	call	31a4 <close>
    247c:	00ffffc4 	movi	r3,-1
    2480:	10c00526 	beq	r2,r3,2498 <_close_r+0x44>
    2484:	dfc00217 	ldw	ra,8(sp)
    2488:	dc400117 	ldw	r17,4(sp)
    248c:	dc000017 	ldw	r16,0(sp)
    2490:	dec00304 	addi	sp,sp,12
    2494:	f800283a 	ret
    2498:	80c00017 	ldw	r3,0(r16)
    249c:	183ff926 	beq	r3,zero,2484 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002484>
    24a0:	88c00015 	stw	r3,0(r17)
    24a4:	003ff706 	br	2484 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002484>

000024a8 <_fclose_r>:
    24a8:	28003926 	beq	r5,zero,2590 <_fclose_r+0xe8>
    24ac:	defffc04 	addi	sp,sp,-16
    24b0:	dc400115 	stw	r17,4(sp)
    24b4:	dc000015 	stw	r16,0(sp)
    24b8:	dfc00315 	stw	ra,12(sp)
    24bc:	dc800215 	stw	r18,8(sp)
    24c0:	2023883a 	mov	r17,r4
    24c4:	2821883a 	mov	r16,r5
    24c8:	20000226 	beq	r4,zero,24d4 <_fclose_r+0x2c>
    24cc:	20800e17 	ldw	r2,56(r4)
    24d0:	10002726 	beq	r2,zero,2570 <_fclose_r+0xc8>
    24d4:	8080030f 	ldh	r2,12(r16)
    24d8:	1000071e 	bne	r2,zero,24f8 <_fclose_r+0x50>
    24dc:	0005883a 	mov	r2,zero
    24e0:	dfc00317 	ldw	ra,12(sp)
    24e4:	dc800217 	ldw	r18,8(sp)
    24e8:	dc400117 	ldw	r17,4(sp)
    24ec:	dc000017 	ldw	r16,0(sp)
    24f0:	dec00404 	addi	sp,sp,16
    24f4:	f800283a 	ret
    24f8:	800b883a 	mov	r5,r16
    24fc:	8809883a 	mov	r4,r17
    2500:	00025ac0 	call	25ac <__sflush_r>
    2504:	1025883a 	mov	r18,r2
    2508:	80800b17 	ldw	r2,44(r16)
    250c:	10000426 	beq	r2,zero,2520 <_fclose_r+0x78>
    2510:	81400717 	ldw	r5,28(r16)
    2514:	8809883a 	mov	r4,r17
    2518:	103ee83a 	callr	r2
    251c:	10001616 	blt	r2,zero,2578 <_fclose_r+0xd0>
    2520:	8080030b 	ldhu	r2,12(r16)
    2524:	1080200c 	andi	r2,r2,128
    2528:	1000151e 	bne	r2,zero,2580 <_fclose_r+0xd8>
    252c:	81400c17 	ldw	r5,48(r16)
    2530:	28000526 	beq	r5,zero,2548 <_fclose_r+0xa0>
    2534:	80801004 	addi	r2,r16,64
    2538:	28800226 	beq	r5,r2,2544 <_fclose_r+0x9c>
    253c:	8809883a 	mov	r4,r17
    2540:	00029780 	call	2978 <_free_r>
    2544:	80000c15 	stw	zero,48(r16)
    2548:	81401117 	ldw	r5,68(r16)
    254c:	28000326 	beq	r5,zero,255c <_fclose_r+0xb4>
    2550:	8809883a 	mov	r4,r17
    2554:	00029780 	call	2978 <_free_r>
    2558:	80001115 	stw	zero,68(r16)
    255c:	000086c0 	call	86c <__sfp_lock_acquire>
    2560:	8000030d 	sth	zero,12(r16)
    2564:	00008700 	call	870 <__sfp_lock_release>
    2568:	9005883a 	mov	r2,r18
    256c:	003fdc06 	br	24e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70024e0>
    2570:	000085c0 	call	85c <__sinit>
    2574:	003fd706 	br	24d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70024d4>
    2578:	04bfffc4 	movi	r18,-1
    257c:	003fe806 	br	2520 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002520>
    2580:	81400417 	ldw	r5,16(r16)
    2584:	8809883a 	mov	r4,r17
    2588:	00029780 	call	2978 <_free_r>
    258c:	003fe706 	br	252c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700252c>
    2590:	0005883a 	mov	r2,zero
    2594:	f800283a 	ret

00002598 <fclose>:
    2598:	00800074 	movhi	r2,1
    259c:	10853204 	addi	r2,r2,5320
    25a0:	200b883a 	mov	r5,r4
    25a4:	11000017 	ldw	r4,0(r2)
    25a8:	00024a81 	jmpi	24a8 <_fclose_r>

000025ac <__sflush_r>:
    25ac:	2880030b 	ldhu	r2,12(r5)
    25b0:	defffb04 	addi	sp,sp,-20
    25b4:	dcc00315 	stw	r19,12(sp)
    25b8:	dc400115 	stw	r17,4(sp)
    25bc:	dfc00415 	stw	ra,16(sp)
    25c0:	dc800215 	stw	r18,8(sp)
    25c4:	dc000015 	stw	r16,0(sp)
    25c8:	10c0020c 	andi	r3,r2,8
    25cc:	2823883a 	mov	r17,r5
    25d0:	2027883a 	mov	r19,r4
    25d4:	1800311e 	bne	r3,zero,269c <__sflush_r+0xf0>
    25d8:	28c00117 	ldw	r3,4(r5)
    25dc:	10820014 	ori	r2,r2,2048
    25e0:	2880030d 	sth	r2,12(r5)
    25e4:	00c04b0e 	bge	zero,r3,2714 <__sflush_r+0x168>
    25e8:	8a000a17 	ldw	r8,40(r17)
    25ec:	40002326 	beq	r8,zero,267c <__sflush_r+0xd0>
    25f0:	9c000017 	ldw	r16,0(r19)
    25f4:	10c4000c 	andi	r3,r2,4096
    25f8:	98000015 	stw	zero,0(r19)
    25fc:	18004826 	beq	r3,zero,2720 <__sflush_r+0x174>
    2600:	89801417 	ldw	r6,80(r17)
    2604:	10c0010c 	andi	r3,r2,4
    2608:	18000626 	beq	r3,zero,2624 <__sflush_r+0x78>
    260c:	88c00117 	ldw	r3,4(r17)
    2610:	88800c17 	ldw	r2,48(r17)
    2614:	30cdc83a 	sub	r6,r6,r3
    2618:	10000226 	beq	r2,zero,2624 <__sflush_r+0x78>
    261c:	88800f17 	ldw	r2,60(r17)
    2620:	308dc83a 	sub	r6,r6,r2
    2624:	89400717 	ldw	r5,28(r17)
    2628:	000f883a 	mov	r7,zero
    262c:	9809883a 	mov	r4,r19
    2630:	403ee83a 	callr	r8
    2634:	00ffffc4 	movi	r3,-1
    2638:	10c04426 	beq	r2,r3,274c <__sflush_r+0x1a0>
    263c:	88c0030b 	ldhu	r3,12(r17)
    2640:	89000417 	ldw	r4,16(r17)
    2644:	88000115 	stw	zero,4(r17)
    2648:	197dffcc 	andi	r5,r3,63487
    264c:	8940030d 	sth	r5,12(r17)
    2650:	89000015 	stw	r4,0(r17)
    2654:	18c4000c 	andi	r3,r3,4096
    2658:	18002c1e 	bne	r3,zero,270c <__sflush_r+0x160>
    265c:	89400c17 	ldw	r5,48(r17)
    2660:	9c000015 	stw	r16,0(r19)
    2664:	28000526 	beq	r5,zero,267c <__sflush_r+0xd0>
    2668:	88801004 	addi	r2,r17,64
    266c:	28800226 	beq	r5,r2,2678 <__sflush_r+0xcc>
    2670:	9809883a 	mov	r4,r19
    2674:	00029780 	call	2978 <_free_r>
    2678:	88000c15 	stw	zero,48(r17)
    267c:	0005883a 	mov	r2,zero
    2680:	dfc00417 	ldw	ra,16(sp)
    2684:	dcc00317 	ldw	r19,12(sp)
    2688:	dc800217 	ldw	r18,8(sp)
    268c:	dc400117 	ldw	r17,4(sp)
    2690:	dc000017 	ldw	r16,0(sp)
    2694:	dec00504 	addi	sp,sp,20
    2698:	f800283a 	ret
    269c:	2c800417 	ldw	r18,16(r5)
    26a0:	903ff626 	beq	r18,zero,267c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700267c>
    26a4:	2c000017 	ldw	r16,0(r5)
    26a8:	108000cc 	andi	r2,r2,3
    26ac:	2c800015 	stw	r18,0(r5)
    26b0:	84a1c83a 	sub	r16,r16,r18
    26b4:	1000131e 	bne	r2,zero,2704 <__sflush_r+0x158>
    26b8:	28800517 	ldw	r2,20(r5)
    26bc:	88800215 	stw	r2,8(r17)
    26c0:	04000316 	blt	zero,r16,26d0 <__sflush_r+0x124>
    26c4:	003fed06 	br	267c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700267c>
    26c8:	90a5883a 	add	r18,r18,r2
    26cc:	043feb0e 	bge	zero,r16,267c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700267c>
    26d0:	88800917 	ldw	r2,36(r17)
    26d4:	89400717 	ldw	r5,28(r17)
    26d8:	800f883a 	mov	r7,r16
    26dc:	900d883a 	mov	r6,r18
    26e0:	9809883a 	mov	r4,r19
    26e4:	103ee83a 	callr	r2
    26e8:	80a1c83a 	sub	r16,r16,r2
    26ec:	00bff616 	blt	zero,r2,26c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70026c8>
    26f0:	88c0030b 	ldhu	r3,12(r17)
    26f4:	00bfffc4 	movi	r2,-1
    26f8:	18c01014 	ori	r3,r3,64
    26fc:	88c0030d 	sth	r3,12(r17)
    2700:	003fdf06 	br	2680 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002680>
    2704:	0005883a 	mov	r2,zero
    2708:	003fec06 	br	26bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70026bc>
    270c:	88801415 	stw	r2,80(r17)
    2710:	003fd206 	br	265c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700265c>
    2714:	28c00f17 	ldw	r3,60(r5)
    2718:	00ffb316 	blt	zero,r3,25e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70025e8>
    271c:	003fd706 	br	267c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700267c>
    2720:	89400717 	ldw	r5,28(r17)
    2724:	000d883a 	mov	r6,zero
    2728:	01c00044 	movi	r7,1
    272c:	9809883a 	mov	r4,r19
    2730:	403ee83a 	callr	r8
    2734:	100d883a 	mov	r6,r2
    2738:	00bfffc4 	movi	r2,-1
    273c:	30801426 	beq	r6,r2,2790 <__sflush_r+0x1e4>
    2740:	8880030b 	ldhu	r2,12(r17)
    2744:	8a000a17 	ldw	r8,40(r17)
    2748:	003fae06 	br	2604 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002604>
    274c:	98c00017 	ldw	r3,0(r19)
    2750:	183fba26 	beq	r3,zero,263c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700263c>
    2754:	01000744 	movi	r4,29
    2758:	19000626 	beq	r3,r4,2774 <__sflush_r+0x1c8>
    275c:	01000584 	movi	r4,22
    2760:	19000426 	beq	r3,r4,2774 <__sflush_r+0x1c8>
    2764:	88c0030b 	ldhu	r3,12(r17)
    2768:	18c01014 	ori	r3,r3,64
    276c:	88c0030d 	sth	r3,12(r17)
    2770:	003fc306 	br	2680 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002680>
    2774:	8880030b 	ldhu	r2,12(r17)
    2778:	88c00417 	ldw	r3,16(r17)
    277c:	88000115 	stw	zero,4(r17)
    2780:	10bdffcc 	andi	r2,r2,63487
    2784:	8880030d 	sth	r2,12(r17)
    2788:	88c00015 	stw	r3,0(r17)
    278c:	003fb306 	br	265c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700265c>
    2790:	98800017 	ldw	r2,0(r19)
    2794:	103fea26 	beq	r2,zero,2740 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002740>
    2798:	00c00744 	movi	r3,29
    279c:	10c00226 	beq	r2,r3,27a8 <__sflush_r+0x1fc>
    27a0:	00c00584 	movi	r3,22
    27a4:	10c0031e 	bne	r2,r3,27b4 <__sflush_r+0x208>
    27a8:	9c000015 	stw	r16,0(r19)
    27ac:	0005883a 	mov	r2,zero
    27b0:	003fb306 	br	2680 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002680>
    27b4:	88c0030b 	ldhu	r3,12(r17)
    27b8:	3005883a 	mov	r2,r6
    27bc:	18c01014 	ori	r3,r3,64
    27c0:	88c0030d 	sth	r3,12(r17)
    27c4:	003fae06 	br	2680 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002680>

000027c8 <_fflush_r>:
    27c8:	defffd04 	addi	sp,sp,-12
    27cc:	dc000115 	stw	r16,4(sp)
    27d0:	dfc00215 	stw	ra,8(sp)
    27d4:	2021883a 	mov	r16,r4
    27d8:	20000226 	beq	r4,zero,27e4 <_fflush_r+0x1c>
    27dc:	20800e17 	ldw	r2,56(r4)
    27e0:	10000c26 	beq	r2,zero,2814 <_fflush_r+0x4c>
    27e4:	2880030f 	ldh	r2,12(r5)
    27e8:	1000051e 	bne	r2,zero,2800 <_fflush_r+0x38>
    27ec:	0005883a 	mov	r2,zero
    27f0:	dfc00217 	ldw	ra,8(sp)
    27f4:	dc000117 	ldw	r16,4(sp)
    27f8:	dec00304 	addi	sp,sp,12
    27fc:	f800283a 	ret
    2800:	8009883a 	mov	r4,r16
    2804:	dfc00217 	ldw	ra,8(sp)
    2808:	dc000117 	ldw	r16,4(sp)
    280c:	dec00304 	addi	sp,sp,12
    2810:	00025ac1 	jmpi	25ac <__sflush_r>
    2814:	d9400015 	stw	r5,0(sp)
    2818:	000085c0 	call	85c <__sinit>
    281c:	d9400017 	ldw	r5,0(sp)
    2820:	003ff006 	br	27e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70027e4>

00002824 <fflush>:
    2824:	20000526 	beq	r4,zero,283c <fflush+0x18>
    2828:	00800074 	movhi	r2,1
    282c:	10853204 	addi	r2,r2,5320
    2830:	200b883a 	mov	r5,r4
    2834:	11000017 	ldw	r4,0(r2)
    2838:	00027c81 	jmpi	27c8 <_fflush_r>
    283c:	00800074 	movhi	r2,1
    2840:	10853104 	addi	r2,r2,5316
    2844:	11000017 	ldw	r4,0(r2)
    2848:	01400034 	movhi	r5,0
    284c:	2949f204 	addi	r5,r5,10184
    2850:	0000e2c1 	jmpi	e2c <_fwalk_reent>

00002854 <_malloc_trim_r>:
    2854:	defffb04 	addi	sp,sp,-20
    2858:	dcc00315 	stw	r19,12(sp)
    285c:	04c00074 	movhi	r19,1
    2860:	dc800215 	stw	r18,8(sp)
    2864:	dc400115 	stw	r17,4(sp)
    2868:	dc000015 	stw	r16,0(sp)
    286c:	dfc00415 	stw	ra,16(sp)
    2870:	2821883a 	mov	r16,r5
    2874:	9cfead04 	addi	r19,r19,-1356
    2878:	2025883a 	mov	r18,r4
    287c:	0003bc80 	call	3bc8 <__malloc_lock>
    2880:	98800217 	ldw	r2,8(r19)
    2884:	14400117 	ldw	r17,4(r2)
    2888:	00bfff04 	movi	r2,-4
    288c:	88a2703a 	and	r17,r17,r2
    2890:	8c21c83a 	sub	r16,r17,r16
    2894:	8403fbc4 	addi	r16,r16,4079
    2898:	8020d33a 	srli	r16,r16,12
    289c:	0083ffc4 	movi	r2,4095
    28a0:	843fffc4 	addi	r16,r16,-1
    28a4:	8020933a 	slli	r16,r16,12
    28a8:	1400060e 	bge	r2,r16,28c4 <_malloc_trim_r+0x70>
    28ac:	000b883a 	mov	r5,zero
    28b0:	9009883a 	mov	r4,r18
    28b4:	00021100 	call	2110 <_sbrk_r>
    28b8:	98c00217 	ldw	r3,8(r19)
    28bc:	1c47883a 	add	r3,r3,r17
    28c0:	10c00a26 	beq	r2,r3,28ec <_malloc_trim_r+0x98>
    28c4:	9009883a 	mov	r4,r18
    28c8:	0003ce80 	call	3ce8 <__malloc_unlock>
    28cc:	0005883a 	mov	r2,zero
    28d0:	dfc00417 	ldw	ra,16(sp)
    28d4:	dcc00317 	ldw	r19,12(sp)
    28d8:	dc800217 	ldw	r18,8(sp)
    28dc:	dc400117 	ldw	r17,4(sp)
    28e0:	dc000017 	ldw	r16,0(sp)
    28e4:	dec00504 	addi	sp,sp,20
    28e8:	f800283a 	ret
    28ec:	040bc83a 	sub	r5,zero,r16
    28f0:	9009883a 	mov	r4,r18
    28f4:	00021100 	call	2110 <_sbrk_r>
    28f8:	00ffffc4 	movi	r3,-1
    28fc:	10c00d26 	beq	r2,r3,2934 <_malloc_trim_r+0xe0>
    2900:	00c00074 	movhi	r3,1
    2904:	18cd3c04 	addi	r3,r3,13552
    2908:	18800017 	ldw	r2,0(r3)
    290c:	99000217 	ldw	r4,8(r19)
    2910:	8c23c83a 	sub	r17,r17,r16
    2914:	8c400054 	ori	r17,r17,1
    2918:	1421c83a 	sub	r16,r2,r16
    291c:	24400115 	stw	r17,4(r4)
    2920:	9009883a 	mov	r4,r18
    2924:	1c000015 	stw	r16,0(r3)
    2928:	0003ce80 	call	3ce8 <__malloc_unlock>
    292c:	00800044 	movi	r2,1
    2930:	003fe706 	br	28d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70028d0>
    2934:	000b883a 	mov	r5,zero
    2938:	9009883a 	mov	r4,r18
    293c:	00021100 	call	2110 <_sbrk_r>
    2940:	99000217 	ldw	r4,8(r19)
    2944:	014003c4 	movi	r5,15
    2948:	1107c83a 	sub	r3,r2,r4
    294c:	28ffdd0e 	bge	r5,r3,28c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70028c4>
    2950:	01400074 	movhi	r5,1
    2954:	29453304 	addi	r5,r5,5324
    2958:	29400017 	ldw	r5,0(r5)
    295c:	18c00054 	ori	r3,r3,1
    2960:	20c00115 	stw	r3,4(r4)
    2964:	00c00074 	movhi	r3,1
    2968:	1145c83a 	sub	r2,r2,r5
    296c:	18cd3c04 	addi	r3,r3,13552
    2970:	18800015 	stw	r2,0(r3)
    2974:	003fd306 	br	28c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70028c4>

00002978 <_free_r>:
    2978:	28004126 	beq	r5,zero,2a80 <_free_r+0x108>
    297c:	defffd04 	addi	sp,sp,-12
    2980:	dc400115 	stw	r17,4(sp)
    2984:	dc000015 	stw	r16,0(sp)
    2988:	2023883a 	mov	r17,r4
    298c:	2821883a 	mov	r16,r5
    2990:	dfc00215 	stw	ra,8(sp)
    2994:	0003bc80 	call	3bc8 <__malloc_lock>
    2998:	81ffff17 	ldw	r7,-4(r16)
    299c:	00bfff84 	movi	r2,-2
    29a0:	01000074 	movhi	r4,1
    29a4:	81bffe04 	addi	r6,r16,-8
    29a8:	3884703a 	and	r2,r7,r2
    29ac:	213ead04 	addi	r4,r4,-1356
    29b0:	308b883a 	add	r5,r6,r2
    29b4:	2a400117 	ldw	r9,4(r5)
    29b8:	22000217 	ldw	r8,8(r4)
    29bc:	00ffff04 	movi	r3,-4
    29c0:	48c6703a 	and	r3,r9,r3
    29c4:	2a005726 	beq	r5,r8,2b24 <_free_r+0x1ac>
    29c8:	28c00115 	stw	r3,4(r5)
    29cc:	39c0004c 	andi	r7,r7,1
    29d0:	3800091e 	bne	r7,zero,29f8 <_free_r+0x80>
    29d4:	823ffe17 	ldw	r8,-8(r16)
    29d8:	22400204 	addi	r9,r4,8
    29dc:	320dc83a 	sub	r6,r6,r8
    29e0:	31c00217 	ldw	r7,8(r6)
    29e4:	1205883a 	add	r2,r2,r8
    29e8:	3a406526 	beq	r7,r9,2b80 <_free_r+0x208>
    29ec:	32000317 	ldw	r8,12(r6)
    29f0:	3a000315 	stw	r8,12(r7)
    29f4:	41c00215 	stw	r7,8(r8)
    29f8:	28cf883a 	add	r7,r5,r3
    29fc:	39c00117 	ldw	r7,4(r7)
    2a00:	39c0004c 	andi	r7,r7,1
    2a04:	38003a26 	beq	r7,zero,2af0 <_free_r+0x178>
    2a08:	10c00054 	ori	r3,r2,1
    2a0c:	30c00115 	stw	r3,4(r6)
    2a10:	3087883a 	add	r3,r6,r2
    2a14:	18800015 	stw	r2,0(r3)
    2a18:	00c07fc4 	movi	r3,511
    2a1c:	18801936 	bltu	r3,r2,2a84 <_free_r+0x10c>
    2a20:	1004d0fa 	srli	r2,r2,3
    2a24:	01c00044 	movi	r7,1
    2a28:	21400117 	ldw	r5,4(r4)
    2a2c:	10c00044 	addi	r3,r2,1
    2a30:	18c7883a 	add	r3,r3,r3
    2a34:	1005d0ba 	srai	r2,r2,2
    2a38:	18c7883a 	add	r3,r3,r3
    2a3c:	18c7883a 	add	r3,r3,r3
    2a40:	1907883a 	add	r3,r3,r4
    2a44:	3884983a 	sll	r2,r7,r2
    2a48:	19c00017 	ldw	r7,0(r3)
    2a4c:	1a3ffe04 	addi	r8,r3,-8
    2a50:	1144b03a 	or	r2,r2,r5
    2a54:	32000315 	stw	r8,12(r6)
    2a58:	31c00215 	stw	r7,8(r6)
    2a5c:	20800115 	stw	r2,4(r4)
    2a60:	19800015 	stw	r6,0(r3)
    2a64:	39800315 	stw	r6,12(r7)
    2a68:	8809883a 	mov	r4,r17
    2a6c:	dfc00217 	ldw	ra,8(sp)
    2a70:	dc400117 	ldw	r17,4(sp)
    2a74:	dc000017 	ldw	r16,0(sp)
    2a78:	dec00304 	addi	sp,sp,12
    2a7c:	0003ce81 	jmpi	3ce8 <__malloc_unlock>
    2a80:	f800283a 	ret
    2a84:	100ad27a 	srli	r5,r2,9
    2a88:	00c00104 	movi	r3,4
    2a8c:	19404a36 	bltu	r3,r5,2bb8 <_free_r+0x240>
    2a90:	100ad1ba 	srli	r5,r2,6
    2a94:	28c00e44 	addi	r3,r5,57
    2a98:	18c7883a 	add	r3,r3,r3
    2a9c:	29400e04 	addi	r5,r5,56
    2aa0:	18c7883a 	add	r3,r3,r3
    2aa4:	18c7883a 	add	r3,r3,r3
    2aa8:	1909883a 	add	r4,r3,r4
    2aac:	20c00017 	ldw	r3,0(r4)
    2ab0:	01c00074 	movhi	r7,1
    2ab4:	213ffe04 	addi	r4,r4,-8
    2ab8:	39fead04 	addi	r7,r7,-1356
    2abc:	20c04426 	beq	r4,r3,2bd0 <_free_r+0x258>
    2ac0:	01ffff04 	movi	r7,-4
    2ac4:	19400117 	ldw	r5,4(r3)
    2ac8:	29ca703a 	and	r5,r5,r7
    2acc:	1140022e 	bgeu	r2,r5,2ad8 <_free_r+0x160>
    2ad0:	18c00217 	ldw	r3,8(r3)
    2ad4:	20fffb1e 	bne	r4,r3,2ac4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ac4>
    2ad8:	19000317 	ldw	r4,12(r3)
    2adc:	31000315 	stw	r4,12(r6)
    2ae0:	30c00215 	stw	r3,8(r6)
    2ae4:	21800215 	stw	r6,8(r4)
    2ae8:	19800315 	stw	r6,12(r3)
    2aec:	003fde06 	br	2a68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002a68>
    2af0:	29c00217 	ldw	r7,8(r5)
    2af4:	10c5883a 	add	r2,r2,r3
    2af8:	00c00074 	movhi	r3,1
    2afc:	18feaf04 	addi	r3,r3,-1348
    2b00:	38c03b26 	beq	r7,r3,2bf0 <_free_r+0x278>
    2b04:	2a000317 	ldw	r8,12(r5)
    2b08:	11400054 	ori	r5,r2,1
    2b0c:	3087883a 	add	r3,r6,r2
    2b10:	3a000315 	stw	r8,12(r7)
    2b14:	41c00215 	stw	r7,8(r8)
    2b18:	31400115 	stw	r5,4(r6)
    2b1c:	18800015 	stw	r2,0(r3)
    2b20:	003fbd06 	br	2a18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002a18>
    2b24:	39c0004c 	andi	r7,r7,1
    2b28:	10c5883a 	add	r2,r2,r3
    2b2c:	3800071e 	bne	r7,zero,2b4c <_free_r+0x1d4>
    2b30:	81fffe17 	ldw	r7,-8(r16)
    2b34:	31cdc83a 	sub	r6,r6,r7
    2b38:	30c00317 	ldw	r3,12(r6)
    2b3c:	31400217 	ldw	r5,8(r6)
    2b40:	11c5883a 	add	r2,r2,r7
    2b44:	28c00315 	stw	r3,12(r5)
    2b48:	19400215 	stw	r5,8(r3)
    2b4c:	10c00054 	ori	r3,r2,1
    2b50:	30c00115 	stw	r3,4(r6)
    2b54:	00c00074 	movhi	r3,1
    2b58:	18c53404 	addi	r3,r3,5328
    2b5c:	18c00017 	ldw	r3,0(r3)
    2b60:	21800215 	stw	r6,8(r4)
    2b64:	10ffc036 	bltu	r2,r3,2a68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002a68>
    2b68:	00800074 	movhi	r2,1
    2b6c:	108d1a04 	addi	r2,r2,13416
    2b70:	11400017 	ldw	r5,0(r2)
    2b74:	8809883a 	mov	r4,r17
    2b78:	00028540 	call	2854 <_malloc_trim_r>
    2b7c:	003fba06 	br	2a68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002a68>
    2b80:	28c9883a 	add	r4,r5,r3
    2b84:	21000117 	ldw	r4,4(r4)
    2b88:	2100004c 	andi	r4,r4,1
    2b8c:	2000391e 	bne	r4,zero,2c74 <_free_r+0x2fc>
    2b90:	29c00217 	ldw	r7,8(r5)
    2b94:	29000317 	ldw	r4,12(r5)
    2b98:	1885883a 	add	r2,r3,r2
    2b9c:	10c00054 	ori	r3,r2,1
    2ba0:	39000315 	stw	r4,12(r7)
    2ba4:	21c00215 	stw	r7,8(r4)
    2ba8:	30c00115 	stw	r3,4(r6)
    2bac:	308d883a 	add	r6,r6,r2
    2bb0:	30800015 	stw	r2,0(r6)
    2bb4:	003fac06 	br	2a68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002a68>
    2bb8:	00c00504 	movi	r3,20
    2bbc:	19401536 	bltu	r3,r5,2c14 <_free_r+0x29c>
    2bc0:	28c01704 	addi	r3,r5,92
    2bc4:	18c7883a 	add	r3,r3,r3
    2bc8:	294016c4 	addi	r5,r5,91
    2bcc:	003fb406 	br	2aa0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002aa0>
    2bd0:	280bd0ba 	srai	r5,r5,2
    2bd4:	00c00044 	movi	r3,1
    2bd8:	38800117 	ldw	r2,4(r7)
    2bdc:	194a983a 	sll	r5,r3,r5
    2be0:	2007883a 	mov	r3,r4
    2be4:	2884b03a 	or	r2,r5,r2
    2be8:	38800115 	stw	r2,4(r7)
    2bec:	003fbb06 	br	2adc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002adc>
    2bf0:	21800515 	stw	r6,20(r4)
    2bf4:	21800415 	stw	r6,16(r4)
    2bf8:	10c00054 	ori	r3,r2,1
    2bfc:	31c00315 	stw	r7,12(r6)
    2c00:	31c00215 	stw	r7,8(r6)
    2c04:	30c00115 	stw	r3,4(r6)
    2c08:	308d883a 	add	r6,r6,r2
    2c0c:	30800015 	stw	r2,0(r6)
    2c10:	003f9506 	br	2a68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002a68>
    2c14:	00c01504 	movi	r3,84
    2c18:	19400536 	bltu	r3,r5,2c30 <_free_r+0x2b8>
    2c1c:	100ad33a 	srli	r5,r2,12
    2c20:	28c01bc4 	addi	r3,r5,111
    2c24:	18c7883a 	add	r3,r3,r3
    2c28:	29401b84 	addi	r5,r5,110
    2c2c:	003f9c06 	br	2aa0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002aa0>
    2c30:	00c05504 	movi	r3,340
    2c34:	19400536 	bltu	r3,r5,2c4c <_free_r+0x2d4>
    2c38:	100ad3fa 	srli	r5,r2,15
    2c3c:	28c01e04 	addi	r3,r5,120
    2c40:	18c7883a 	add	r3,r3,r3
    2c44:	29401dc4 	addi	r5,r5,119
    2c48:	003f9506 	br	2aa0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002aa0>
    2c4c:	00c15504 	movi	r3,1364
    2c50:	19400536 	bltu	r3,r5,2c68 <_free_r+0x2f0>
    2c54:	100ad4ba 	srli	r5,r2,18
    2c58:	28c01f44 	addi	r3,r5,125
    2c5c:	18c7883a 	add	r3,r3,r3
    2c60:	29401f04 	addi	r5,r5,124
    2c64:	003f8e06 	br	2aa0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002aa0>
    2c68:	00c03f84 	movi	r3,254
    2c6c:	01401f84 	movi	r5,126
    2c70:	003f8b06 	br	2aa0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002aa0>
    2c74:	10c00054 	ori	r3,r2,1
    2c78:	30c00115 	stw	r3,4(r6)
    2c7c:	308d883a 	add	r6,r6,r2
    2c80:	30800015 	stw	r2,0(r6)
    2c84:	003f7806 	br	2a68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002a68>

00002c88 <_lseek_r>:
    2c88:	defffd04 	addi	sp,sp,-12
    2c8c:	2805883a 	mov	r2,r5
    2c90:	dc000015 	stw	r16,0(sp)
    2c94:	04000074 	movhi	r16,1
    2c98:	dc400115 	stw	r17,4(sp)
    2c9c:	300b883a 	mov	r5,r6
    2ca0:	840d1b04 	addi	r16,r16,13420
    2ca4:	2023883a 	mov	r17,r4
    2ca8:	380d883a 	mov	r6,r7
    2cac:	1009883a 	mov	r4,r2
    2cb0:	dfc00215 	stw	ra,8(sp)
    2cb4:	80000015 	stw	zero,0(r16)
    2cb8:	00035940 	call	3594 <lseek>
    2cbc:	00ffffc4 	movi	r3,-1
    2cc0:	10c00526 	beq	r2,r3,2cd8 <_lseek_r+0x50>
    2cc4:	dfc00217 	ldw	ra,8(sp)
    2cc8:	dc400117 	ldw	r17,4(sp)
    2ccc:	dc000017 	ldw	r16,0(sp)
    2cd0:	dec00304 	addi	sp,sp,12
    2cd4:	f800283a 	ret
    2cd8:	80c00017 	ldw	r3,0(r16)
    2cdc:	183ff926 	beq	r3,zero,2cc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cc4>
    2ce0:	88c00015 	stw	r3,0(r17)
    2ce4:	003ff706 	br	2cc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cc4>

00002ce8 <__smakebuf_r>:
    2ce8:	2880030b 	ldhu	r2,12(r5)
    2cec:	10c0008c 	andi	r3,r2,2
    2cf0:	1800411e 	bne	r3,zero,2df8 <__smakebuf_r+0x110>
    2cf4:	deffec04 	addi	sp,sp,-80
    2cf8:	dc000f15 	stw	r16,60(sp)
    2cfc:	2821883a 	mov	r16,r5
    2d00:	2940038f 	ldh	r5,14(r5)
    2d04:	dc401015 	stw	r17,64(sp)
    2d08:	dfc01315 	stw	ra,76(sp)
    2d0c:	dcc01215 	stw	r19,72(sp)
    2d10:	dc801115 	stw	r18,68(sp)
    2d14:	2023883a 	mov	r17,r4
    2d18:	28001c16 	blt	r5,zero,2d8c <__smakebuf_r+0xa4>
    2d1c:	d80d883a 	mov	r6,sp
    2d20:	0002f040 	call	2f04 <_fstat_r>
    2d24:	10001816 	blt	r2,zero,2d88 <__smakebuf_r+0xa0>
    2d28:	d8800117 	ldw	r2,4(sp)
    2d2c:	00e00014 	movui	r3,32768
    2d30:	10bc000c 	andi	r2,r2,61440
    2d34:	14c80020 	cmpeqi	r19,r2,8192
    2d38:	10c03726 	beq	r2,r3,2e18 <__smakebuf_r+0x130>
    2d3c:	80c0030b 	ldhu	r3,12(r16)
    2d40:	18c20014 	ori	r3,r3,2048
    2d44:	80c0030d 	sth	r3,12(r16)
    2d48:	00c80004 	movi	r3,8192
    2d4c:	10c0521e 	bne	r2,r3,2e98 <__smakebuf_r+0x1b0>
    2d50:	8140038f 	ldh	r5,14(r16)
    2d54:	8809883a 	mov	r4,r17
    2d58:	0002f600 	call	2f60 <_isatty_r>
    2d5c:	10004c26 	beq	r2,zero,2e90 <__smakebuf_r+0x1a8>
    2d60:	8080030b 	ldhu	r2,12(r16)
    2d64:	80c010c4 	addi	r3,r16,67
    2d68:	80c00015 	stw	r3,0(r16)
    2d6c:	10800054 	ori	r2,r2,1
    2d70:	8080030d 	sth	r2,12(r16)
    2d74:	00800044 	movi	r2,1
    2d78:	80c00415 	stw	r3,16(r16)
    2d7c:	80800515 	stw	r2,20(r16)
    2d80:	04810004 	movi	r18,1024
    2d84:	00000706 	br	2da4 <__smakebuf_r+0xbc>
    2d88:	8080030b 	ldhu	r2,12(r16)
    2d8c:	10c0200c 	andi	r3,r2,128
    2d90:	18001f1e 	bne	r3,zero,2e10 <__smakebuf_r+0x128>
    2d94:	04810004 	movi	r18,1024
    2d98:	10820014 	ori	r2,r2,2048
    2d9c:	8080030d 	sth	r2,12(r16)
    2da0:	0027883a 	mov	r19,zero
    2da4:	900b883a 	mov	r5,r18
    2da8:	8809883a 	mov	r4,r17
    2dac:	0000ef00 	call	ef0 <_malloc_r>
    2db0:	10002c26 	beq	r2,zero,2e64 <__smakebuf_r+0x17c>
    2db4:	80c0030b 	ldhu	r3,12(r16)
    2db8:	01000034 	movhi	r4,0
    2dbc:	21014504 	addi	r4,r4,1300
    2dc0:	89000f15 	stw	r4,60(r17)
    2dc4:	18c02014 	ori	r3,r3,128
    2dc8:	80c0030d 	sth	r3,12(r16)
    2dcc:	80800015 	stw	r2,0(r16)
    2dd0:	80800415 	stw	r2,16(r16)
    2dd4:	84800515 	stw	r18,20(r16)
    2dd8:	98001a1e 	bne	r19,zero,2e44 <__smakebuf_r+0x15c>
    2ddc:	dfc01317 	ldw	ra,76(sp)
    2de0:	dcc01217 	ldw	r19,72(sp)
    2de4:	dc801117 	ldw	r18,68(sp)
    2de8:	dc401017 	ldw	r17,64(sp)
    2dec:	dc000f17 	ldw	r16,60(sp)
    2df0:	dec01404 	addi	sp,sp,80
    2df4:	f800283a 	ret
    2df8:	288010c4 	addi	r2,r5,67
    2dfc:	28800015 	stw	r2,0(r5)
    2e00:	28800415 	stw	r2,16(r5)
    2e04:	00800044 	movi	r2,1
    2e08:	28800515 	stw	r2,20(r5)
    2e0c:	f800283a 	ret
    2e10:	04801004 	movi	r18,64
    2e14:	003fe006 	br	2d98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002d98>
    2e18:	81000a17 	ldw	r4,40(r16)
    2e1c:	00c00034 	movhi	r3,0
    2e20:	18c88f04 	addi	r3,r3,8764
    2e24:	20ffc51e 	bne	r4,r3,2d3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002d3c>
    2e28:	8080030b 	ldhu	r2,12(r16)
    2e2c:	04810004 	movi	r18,1024
    2e30:	84801315 	stw	r18,76(r16)
    2e34:	1484b03a 	or	r2,r2,r18
    2e38:	8080030d 	sth	r2,12(r16)
    2e3c:	0027883a 	mov	r19,zero
    2e40:	003fd806 	br	2da4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002da4>
    2e44:	8140038f 	ldh	r5,14(r16)
    2e48:	8809883a 	mov	r4,r17
    2e4c:	0002f600 	call	2f60 <_isatty_r>
    2e50:	103fe226 	beq	r2,zero,2ddc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ddc>
    2e54:	8080030b 	ldhu	r2,12(r16)
    2e58:	10800054 	ori	r2,r2,1
    2e5c:	8080030d 	sth	r2,12(r16)
    2e60:	003fde06 	br	2ddc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ddc>
    2e64:	8080030b 	ldhu	r2,12(r16)
    2e68:	10c0800c 	andi	r3,r2,512
    2e6c:	183fdb1e 	bne	r3,zero,2ddc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ddc>
    2e70:	10800094 	ori	r2,r2,2
    2e74:	80c010c4 	addi	r3,r16,67
    2e78:	8080030d 	sth	r2,12(r16)
    2e7c:	00800044 	movi	r2,1
    2e80:	80c00015 	stw	r3,0(r16)
    2e84:	80c00415 	stw	r3,16(r16)
    2e88:	80800515 	stw	r2,20(r16)
    2e8c:	003fd306 	br	2ddc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ddc>
    2e90:	04810004 	movi	r18,1024
    2e94:	003fc306 	br	2da4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002da4>
    2e98:	0027883a 	mov	r19,zero
    2e9c:	04810004 	movi	r18,1024
    2ea0:	003fc006 	br	2da4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002da4>

00002ea4 <_read_r>:
    2ea4:	defffd04 	addi	sp,sp,-12
    2ea8:	2805883a 	mov	r2,r5
    2eac:	dc000015 	stw	r16,0(sp)
    2eb0:	04000074 	movhi	r16,1
    2eb4:	dc400115 	stw	r17,4(sp)
    2eb8:	300b883a 	mov	r5,r6
    2ebc:	840d1b04 	addi	r16,r16,13420
    2ec0:	2023883a 	mov	r17,r4
    2ec4:	380d883a 	mov	r6,r7
    2ec8:	1009883a 	mov	r4,r2
    2ecc:	dfc00215 	stw	ra,8(sp)
    2ed0:	80000015 	stw	zero,0(r16)
    2ed4:	00037600 	call	3760 <read>
    2ed8:	00ffffc4 	movi	r3,-1
    2edc:	10c00526 	beq	r2,r3,2ef4 <_read_r+0x50>
    2ee0:	dfc00217 	ldw	ra,8(sp)
    2ee4:	dc400117 	ldw	r17,4(sp)
    2ee8:	dc000017 	ldw	r16,0(sp)
    2eec:	dec00304 	addi	sp,sp,12
    2ef0:	f800283a 	ret
    2ef4:	80c00017 	ldw	r3,0(r16)
    2ef8:	183ff926 	beq	r3,zero,2ee0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ee0>
    2efc:	88c00015 	stw	r3,0(r17)
    2f00:	003ff706 	br	2ee0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ee0>

00002f04 <_fstat_r>:
    2f04:	defffd04 	addi	sp,sp,-12
    2f08:	2805883a 	mov	r2,r5
    2f0c:	dc000015 	stw	r16,0(sp)
    2f10:	04000074 	movhi	r16,1
    2f14:	dc400115 	stw	r17,4(sp)
    2f18:	840d1b04 	addi	r16,r16,13420
    2f1c:	2023883a 	mov	r17,r4
    2f20:	300b883a 	mov	r5,r6
    2f24:	1009883a 	mov	r4,r2
    2f28:	dfc00215 	stw	ra,8(sp)
    2f2c:	80000015 	stw	zero,0(r16)
    2f30:	00032dc0 	call	32dc <fstat>
    2f34:	00ffffc4 	movi	r3,-1
    2f38:	10c00526 	beq	r2,r3,2f50 <_fstat_r+0x4c>
    2f3c:	dfc00217 	ldw	ra,8(sp)
    2f40:	dc400117 	ldw	r17,4(sp)
    2f44:	dc000017 	ldw	r16,0(sp)
    2f48:	dec00304 	addi	sp,sp,12
    2f4c:	f800283a 	ret
    2f50:	80c00017 	ldw	r3,0(r16)
    2f54:	183ff926 	beq	r3,zero,2f3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002f3c>
    2f58:	88c00015 	stw	r3,0(r17)
    2f5c:	003ff706 	br	2f3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002f3c>

00002f60 <_isatty_r>:
    2f60:	defffd04 	addi	sp,sp,-12
    2f64:	dc000015 	stw	r16,0(sp)
    2f68:	04000074 	movhi	r16,1
    2f6c:	dc400115 	stw	r17,4(sp)
    2f70:	840d1b04 	addi	r16,r16,13420
    2f74:	2023883a 	mov	r17,r4
    2f78:	2809883a 	mov	r4,r5
    2f7c:	dfc00215 	stw	ra,8(sp)
    2f80:	80000015 	stw	zero,0(r16)
    2f84:	00033c80 	call	33c8 <isatty>
    2f88:	00ffffc4 	movi	r3,-1
    2f8c:	10c00526 	beq	r2,r3,2fa4 <_isatty_r+0x44>
    2f90:	dfc00217 	ldw	ra,8(sp)
    2f94:	dc400117 	ldw	r17,4(sp)
    2f98:	dc000017 	ldw	r16,0(sp)
    2f9c:	dec00304 	addi	sp,sp,12
    2fa0:	f800283a 	ret
    2fa4:	80c00017 	ldw	r3,0(r16)
    2fa8:	183ff926 	beq	r3,zero,2f90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002f90>
    2fac:	88c00015 	stw	r3,0(r17)
    2fb0:	003ff706 	br	2f90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002f90>

00002fb4 <__divsi3>:
    2fb4:	20001b16 	blt	r4,zero,3024 <__divsi3+0x70>
    2fb8:	000f883a 	mov	r7,zero
    2fbc:	28001616 	blt	r5,zero,3018 <__divsi3+0x64>
    2fc0:	200d883a 	mov	r6,r4
    2fc4:	29001a2e 	bgeu	r5,r4,3030 <__divsi3+0x7c>
    2fc8:	00800804 	movi	r2,32
    2fcc:	00c00044 	movi	r3,1
    2fd0:	00000106 	br	2fd8 <__divsi3+0x24>
    2fd4:	10000d26 	beq	r2,zero,300c <__divsi3+0x58>
    2fd8:	294b883a 	add	r5,r5,r5
    2fdc:	10bfffc4 	addi	r2,r2,-1
    2fe0:	18c7883a 	add	r3,r3,r3
    2fe4:	293ffb36 	bltu	r5,r4,2fd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002fd4>
    2fe8:	0005883a 	mov	r2,zero
    2fec:	18000726 	beq	r3,zero,300c <__divsi3+0x58>
    2ff0:	0005883a 	mov	r2,zero
    2ff4:	31400236 	bltu	r6,r5,3000 <__divsi3+0x4c>
    2ff8:	314dc83a 	sub	r6,r6,r5
    2ffc:	10c4b03a 	or	r2,r2,r3
    3000:	1806d07a 	srli	r3,r3,1
    3004:	280ad07a 	srli	r5,r5,1
    3008:	183ffa1e 	bne	r3,zero,2ff4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ff4>
    300c:	38000126 	beq	r7,zero,3014 <__divsi3+0x60>
    3010:	0085c83a 	sub	r2,zero,r2
    3014:	f800283a 	ret
    3018:	014bc83a 	sub	r5,zero,r5
    301c:	39c0005c 	xori	r7,r7,1
    3020:	003fe706 	br	2fc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002fc0>
    3024:	0109c83a 	sub	r4,zero,r4
    3028:	01c00044 	movi	r7,1
    302c:	003fe306 	br	2fbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002fbc>
    3030:	00c00044 	movi	r3,1
    3034:	003fee06 	br	2ff0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ff0>

00003038 <__modsi3>:
    3038:	20001716 	blt	r4,zero,3098 <__modsi3+0x60>
    303c:	000f883a 	mov	r7,zero
    3040:	2005883a 	mov	r2,r4
    3044:	28001216 	blt	r5,zero,3090 <__modsi3+0x58>
    3048:	2900162e 	bgeu	r5,r4,30a4 <__modsi3+0x6c>
    304c:	01800804 	movi	r6,32
    3050:	00c00044 	movi	r3,1
    3054:	00000106 	br	305c <__modsi3+0x24>
    3058:	30000a26 	beq	r6,zero,3084 <__modsi3+0x4c>
    305c:	294b883a 	add	r5,r5,r5
    3060:	31bfffc4 	addi	r6,r6,-1
    3064:	18c7883a 	add	r3,r3,r3
    3068:	293ffb36 	bltu	r5,r4,3058 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003058>
    306c:	18000526 	beq	r3,zero,3084 <__modsi3+0x4c>
    3070:	1806d07a 	srli	r3,r3,1
    3074:	11400136 	bltu	r2,r5,307c <__modsi3+0x44>
    3078:	1145c83a 	sub	r2,r2,r5
    307c:	280ad07a 	srli	r5,r5,1
    3080:	183ffb1e 	bne	r3,zero,3070 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003070>
    3084:	38000126 	beq	r7,zero,308c <__modsi3+0x54>
    3088:	0085c83a 	sub	r2,zero,r2
    308c:	f800283a 	ret
    3090:	014bc83a 	sub	r5,zero,r5
    3094:	003fec06 	br	3048 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003048>
    3098:	0109c83a 	sub	r4,zero,r4
    309c:	01c00044 	movi	r7,1
    30a0:	003fe706 	br	3040 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003040>
    30a4:	00c00044 	movi	r3,1
    30a8:	003ff106 	br	3070 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003070>

000030ac <__udivsi3>:
    30ac:	200d883a 	mov	r6,r4
    30b0:	2900152e 	bgeu	r5,r4,3108 <__udivsi3+0x5c>
    30b4:	28001416 	blt	r5,zero,3108 <__udivsi3+0x5c>
    30b8:	00800804 	movi	r2,32
    30bc:	00c00044 	movi	r3,1
    30c0:	00000206 	br	30cc <__udivsi3+0x20>
    30c4:	10000e26 	beq	r2,zero,3100 <__udivsi3+0x54>
    30c8:	28000516 	blt	r5,zero,30e0 <__udivsi3+0x34>
    30cc:	294b883a 	add	r5,r5,r5
    30d0:	10bfffc4 	addi	r2,r2,-1
    30d4:	18c7883a 	add	r3,r3,r3
    30d8:	293ffa36 	bltu	r5,r4,30c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70030c4>
    30dc:	18000826 	beq	r3,zero,3100 <__udivsi3+0x54>
    30e0:	0005883a 	mov	r2,zero
    30e4:	31400236 	bltu	r6,r5,30f0 <__udivsi3+0x44>
    30e8:	314dc83a 	sub	r6,r6,r5
    30ec:	10c4b03a 	or	r2,r2,r3
    30f0:	1806d07a 	srli	r3,r3,1
    30f4:	280ad07a 	srli	r5,r5,1
    30f8:	183ffa1e 	bne	r3,zero,30e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70030e4>
    30fc:	f800283a 	ret
    3100:	0005883a 	mov	r2,zero
    3104:	f800283a 	ret
    3108:	00c00044 	movi	r3,1
    310c:	003ff406 	br	30e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70030e0>

00003110 <__umodsi3>:
    3110:	2005883a 	mov	r2,r4
    3114:	2900122e 	bgeu	r5,r4,3160 <__umodsi3+0x50>
    3118:	28001116 	blt	r5,zero,3160 <__umodsi3+0x50>
    311c:	01800804 	movi	r6,32
    3120:	00c00044 	movi	r3,1
    3124:	00000206 	br	3130 <__umodsi3+0x20>
    3128:	30000c26 	beq	r6,zero,315c <__umodsi3+0x4c>
    312c:	28000516 	blt	r5,zero,3144 <__umodsi3+0x34>
    3130:	294b883a 	add	r5,r5,r5
    3134:	31bfffc4 	addi	r6,r6,-1
    3138:	18c7883a 	add	r3,r3,r3
    313c:	293ffa36 	bltu	r5,r4,3128 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003128>
    3140:	18000626 	beq	r3,zero,315c <__umodsi3+0x4c>
    3144:	1806d07a 	srli	r3,r3,1
    3148:	11400136 	bltu	r2,r5,3150 <__umodsi3+0x40>
    314c:	1145c83a 	sub	r2,r2,r5
    3150:	280ad07a 	srli	r5,r5,1
    3154:	183ffb1e 	bne	r3,zero,3144 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003144>
    3158:	f800283a 	ret
    315c:	f800283a 	ret
    3160:	00c00044 	movi	r3,1
    3164:	003ff706 	br	3144 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003144>

00003168 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3168:	defffe04 	addi	sp,sp,-8
    316c:	dfc00115 	stw	ra,4(sp)
    3170:	df000015 	stw	fp,0(sp)
    3174:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3178:	d0a00917 	ldw	r2,-32732(gp)
    317c:	10000326 	beq	r2,zero,318c <alt_get_errno+0x24>
    3180:	d0a00917 	ldw	r2,-32732(gp)
    3184:	103ee83a 	callr	r2
    3188:	00000106 	br	3190 <alt_get_errno+0x28>
    318c:	d0a7ea04 	addi	r2,gp,-24664
}
    3190:	e037883a 	mov	sp,fp
    3194:	dfc00117 	ldw	ra,4(sp)
    3198:	df000017 	ldw	fp,0(sp)
    319c:	dec00204 	addi	sp,sp,8
    31a0:	f800283a 	ret

000031a4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    31a4:	defffb04 	addi	sp,sp,-20
    31a8:	dfc00415 	stw	ra,16(sp)
    31ac:	df000315 	stw	fp,12(sp)
    31b0:	df000304 	addi	fp,sp,12
    31b4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    31b8:	e0bfff17 	ldw	r2,-4(fp)
    31bc:	10000616 	blt	r2,zero,31d8 <close+0x34>
    31c0:	e0bfff17 	ldw	r2,-4(fp)
    31c4:	10c00324 	muli	r3,r2,12
    31c8:	00800074 	movhi	r2,1
    31cc:	10bfb904 	addi	r2,r2,-284
    31d0:	1885883a 	add	r2,r3,r2
    31d4:	00000106 	br	31dc <close+0x38>
    31d8:	0005883a 	mov	r2,zero
    31dc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    31e0:	e0bffd17 	ldw	r2,-12(fp)
    31e4:	10001926 	beq	r2,zero,324c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    31e8:	e0bffd17 	ldw	r2,-12(fp)
    31ec:	10800017 	ldw	r2,0(r2)
    31f0:	10800417 	ldw	r2,16(r2)
    31f4:	10000626 	beq	r2,zero,3210 <close+0x6c>
    31f8:	e0bffd17 	ldw	r2,-12(fp)
    31fc:	10800017 	ldw	r2,0(r2)
    3200:	10800417 	ldw	r2,16(r2)
    3204:	e13ffd17 	ldw	r4,-12(fp)
    3208:	103ee83a 	callr	r2
    320c:	00000106 	br	3214 <close+0x70>
    3210:	0005883a 	mov	r2,zero
    3214:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    3218:	e13fff17 	ldw	r4,-4(fp)
    321c:	000385c0 	call	385c <alt_release_fd>
    if (rval < 0)
    3220:	e0bffe17 	ldw	r2,-8(fp)
    3224:	1000070e 	bge	r2,zero,3244 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    3228:	00031680 	call	3168 <alt_get_errno>
    322c:	1007883a 	mov	r3,r2
    3230:	e0bffe17 	ldw	r2,-8(fp)
    3234:	0085c83a 	sub	r2,zero,r2
    3238:	18800015 	stw	r2,0(r3)
      return -1;
    323c:	00bfffc4 	movi	r2,-1
    3240:	00000706 	br	3260 <close+0xbc>
    }
    return 0;
    3244:	0005883a 	mov	r2,zero
    3248:	00000506 	br	3260 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    324c:	00031680 	call	3168 <alt_get_errno>
    3250:	1007883a 	mov	r3,r2
    3254:	00801444 	movi	r2,81
    3258:	18800015 	stw	r2,0(r3)
    return -1;
    325c:	00bfffc4 	movi	r2,-1
  }
}
    3260:	e037883a 	mov	sp,fp
    3264:	dfc00117 	ldw	ra,4(sp)
    3268:	df000017 	ldw	fp,0(sp)
    326c:	dec00204 	addi	sp,sp,8
    3270:	f800283a 	ret

00003274 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    3274:	defffc04 	addi	sp,sp,-16
    3278:	df000315 	stw	fp,12(sp)
    327c:	df000304 	addi	fp,sp,12
    3280:	e13ffd15 	stw	r4,-12(fp)
    3284:	e17ffe15 	stw	r5,-8(fp)
    3288:	e1bfff15 	stw	r6,-4(fp)
  return len;
    328c:	e0bfff17 	ldw	r2,-4(fp)
}
    3290:	e037883a 	mov	sp,fp
    3294:	df000017 	ldw	fp,0(sp)
    3298:	dec00104 	addi	sp,sp,4
    329c:	f800283a 	ret

000032a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    32a0:	defffe04 	addi	sp,sp,-8
    32a4:	dfc00115 	stw	ra,4(sp)
    32a8:	df000015 	stw	fp,0(sp)
    32ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    32b0:	d0a00917 	ldw	r2,-32732(gp)
    32b4:	10000326 	beq	r2,zero,32c4 <alt_get_errno+0x24>
    32b8:	d0a00917 	ldw	r2,-32732(gp)
    32bc:	103ee83a 	callr	r2
    32c0:	00000106 	br	32c8 <alt_get_errno+0x28>
    32c4:	d0a7ea04 	addi	r2,gp,-24664
}
    32c8:	e037883a 	mov	sp,fp
    32cc:	dfc00117 	ldw	ra,4(sp)
    32d0:	df000017 	ldw	fp,0(sp)
    32d4:	dec00204 	addi	sp,sp,8
    32d8:	f800283a 	ret

000032dc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    32dc:	defffb04 	addi	sp,sp,-20
    32e0:	dfc00415 	stw	ra,16(sp)
    32e4:	df000315 	stw	fp,12(sp)
    32e8:	df000304 	addi	fp,sp,12
    32ec:	e13ffe15 	stw	r4,-8(fp)
    32f0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    32f4:	e0bffe17 	ldw	r2,-8(fp)
    32f8:	10000616 	blt	r2,zero,3314 <fstat+0x38>
    32fc:	e0bffe17 	ldw	r2,-8(fp)
    3300:	10c00324 	muli	r3,r2,12
    3304:	00800074 	movhi	r2,1
    3308:	10bfb904 	addi	r2,r2,-284
    330c:	1885883a 	add	r2,r3,r2
    3310:	00000106 	br	3318 <fstat+0x3c>
    3314:	0005883a 	mov	r2,zero
    3318:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    331c:	e0bffd17 	ldw	r2,-12(fp)
    3320:	10001026 	beq	r2,zero,3364 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    3324:	e0bffd17 	ldw	r2,-12(fp)
    3328:	10800017 	ldw	r2,0(r2)
    332c:	10800817 	ldw	r2,32(r2)
    3330:	10000726 	beq	r2,zero,3350 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    3334:	e0bffd17 	ldw	r2,-12(fp)
    3338:	10800017 	ldw	r2,0(r2)
    333c:	10800817 	ldw	r2,32(r2)
    3340:	e17fff17 	ldw	r5,-4(fp)
    3344:	e13ffd17 	ldw	r4,-12(fp)
    3348:	103ee83a 	callr	r2
    334c:	00000a06 	br	3378 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    3350:	e0bfff17 	ldw	r2,-4(fp)
    3354:	00c80004 	movi	r3,8192
    3358:	10c00115 	stw	r3,4(r2)
      return 0;
    335c:	0005883a 	mov	r2,zero
    3360:	00000506 	br	3378 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3364:	00032a00 	call	32a0 <alt_get_errno>
    3368:	1007883a 	mov	r3,r2
    336c:	00801444 	movi	r2,81
    3370:	18800015 	stw	r2,0(r3)
    return -1;
    3374:	00bfffc4 	movi	r2,-1
  }
}
    3378:	e037883a 	mov	sp,fp
    337c:	dfc00117 	ldw	ra,4(sp)
    3380:	df000017 	ldw	fp,0(sp)
    3384:	dec00204 	addi	sp,sp,8
    3388:	f800283a 	ret

0000338c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    338c:	defffe04 	addi	sp,sp,-8
    3390:	dfc00115 	stw	ra,4(sp)
    3394:	df000015 	stw	fp,0(sp)
    3398:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    339c:	d0a00917 	ldw	r2,-32732(gp)
    33a0:	10000326 	beq	r2,zero,33b0 <alt_get_errno+0x24>
    33a4:	d0a00917 	ldw	r2,-32732(gp)
    33a8:	103ee83a 	callr	r2
    33ac:	00000106 	br	33b4 <alt_get_errno+0x28>
    33b0:	d0a7ea04 	addi	r2,gp,-24664
}
    33b4:	e037883a 	mov	sp,fp
    33b8:	dfc00117 	ldw	ra,4(sp)
    33bc:	df000017 	ldw	fp,0(sp)
    33c0:	dec00204 	addi	sp,sp,8
    33c4:	f800283a 	ret

000033c8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    33c8:	deffed04 	addi	sp,sp,-76
    33cc:	dfc01215 	stw	ra,72(sp)
    33d0:	df001115 	stw	fp,68(sp)
    33d4:	df001104 	addi	fp,sp,68
    33d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    33dc:	e0bfff17 	ldw	r2,-4(fp)
    33e0:	10000616 	blt	r2,zero,33fc <isatty+0x34>
    33e4:	e0bfff17 	ldw	r2,-4(fp)
    33e8:	10c00324 	muli	r3,r2,12
    33ec:	00800074 	movhi	r2,1
    33f0:	10bfb904 	addi	r2,r2,-284
    33f4:	1885883a 	add	r2,r3,r2
    33f8:	00000106 	br	3400 <isatty+0x38>
    33fc:	0005883a 	mov	r2,zero
    3400:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    3404:	e0bfef17 	ldw	r2,-68(fp)
    3408:	10000e26 	beq	r2,zero,3444 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    340c:	e0bfef17 	ldw	r2,-68(fp)
    3410:	10800017 	ldw	r2,0(r2)
    3414:	10800817 	ldw	r2,32(r2)
    3418:	1000021e 	bne	r2,zero,3424 <isatty+0x5c>
    {
      return 1;
    341c:	00800044 	movi	r2,1
    3420:	00000d06 	br	3458 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    3424:	e0bff004 	addi	r2,fp,-64
    3428:	100b883a 	mov	r5,r2
    342c:	e13fff17 	ldw	r4,-4(fp)
    3430:	00032dc0 	call	32dc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    3434:	e0bff117 	ldw	r2,-60(fp)
    3438:	10880020 	cmpeqi	r2,r2,8192
    343c:	10803fcc 	andi	r2,r2,255
    3440:	00000506 	br	3458 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3444:	000338c0 	call	338c <alt_get_errno>
    3448:	1007883a 	mov	r3,r2
    344c:	00801444 	movi	r2,81
    3450:	18800015 	stw	r2,0(r3)
    return 0;
    3454:	0005883a 	mov	r2,zero
  }
}
    3458:	e037883a 	mov	sp,fp
    345c:	dfc00117 	ldw	ra,4(sp)
    3460:	df000017 	ldw	fp,0(sp)
    3464:	dec00204 	addi	sp,sp,8
    3468:	f800283a 	ret

0000346c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    346c:	defffc04 	addi	sp,sp,-16
    3470:	df000315 	stw	fp,12(sp)
    3474:	df000304 	addi	fp,sp,12
    3478:	e13ffd15 	stw	r4,-12(fp)
    347c:	e17ffe15 	stw	r5,-8(fp)
    3480:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    3484:	e0fffe17 	ldw	r3,-8(fp)
    3488:	e0bffd17 	ldw	r2,-12(fp)
    348c:	18800c26 	beq	r3,r2,34c0 <alt_load_section+0x54>
  {
    while( to != end )
    3490:	00000806 	br	34b4 <alt_load_section+0x48>
    {
      *to++ = *from++;
    3494:	e0bffe17 	ldw	r2,-8(fp)
    3498:	10c00104 	addi	r3,r2,4
    349c:	e0fffe15 	stw	r3,-8(fp)
    34a0:	e0fffd17 	ldw	r3,-12(fp)
    34a4:	19000104 	addi	r4,r3,4
    34a8:	e13ffd15 	stw	r4,-12(fp)
    34ac:	18c00017 	ldw	r3,0(r3)
    34b0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    34b4:	e0fffe17 	ldw	r3,-8(fp)
    34b8:	e0bfff17 	ldw	r2,-4(fp)
    34bc:	18bff51e 	bne	r3,r2,3494 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003494>
    {
      *to++ = *from++;
    }
  }
}
    34c0:	0001883a 	nop
    34c4:	e037883a 	mov	sp,fp
    34c8:	df000017 	ldw	fp,0(sp)
    34cc:	dec00104 	addi	sp,sp,4
    34d0:	f800283a 	ret

000034d4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    34d4:	defffe04 	addi	sp,sp,-8
    34d8:	dfc00115 	stw	ra,4(sp)
    34dc:	df000015 	stw	fp,0(sp)
    34e0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    34e4:	01800074 	movhi	r6,1
    34e8:	31855e04 	addi	r6,r6,5496
    34ec:	01400074 	movhi	r5,1
    34f0:	297da404 	addi	r5,r5,-2416
    34f4:	01000074 	movhi	r4,1
    34f8:	21055e04 	addi	r4,r4,5496
    34fc:	000346c0 	call	346c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    3500:	01800034 	movhi	r6,0
    3504:	31809204 	addi	r6,r6,584
    3508:	01400034 	movhi	r5,0
    350c:	29400804 	addi	r5,r5,32
    3510:	01000034 	movhi	r4,0
    3514:	21000804 	addi	r4,r4,32
    3518:	000346c0 	call	346c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    351c:	01800074 	movhi	r6,1
    3520:	31bda404 	addi	r6,r6,-2416
    3524:	01400074 	movhi	r5,1
    3528:	297cdc04 	addi	r5,r5,-3216
    352c:	01000074 	movhi	r4,1
    3530:	213cdc04 	addi	r4,r4,-3216
    3534:	000346c0 	call	346c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    3538:	000e0140 	call	e014 <alt_dcache_flush_all>
  alt_icache_flush_all();
    353c:	000e2640 	call	e264 <alt_icache_flush_all>
}
    3540:	0001883a 	nop
    3544:	e037883a 	mov	sp,fp
    3548:	dfc00117 	ldw	ra,4(sp)
    354c:	df000017 	ldw	fp,0(sp)
    3550:	dec00204 	addi	sp,sp,8
    3554:	f800283a 	ret

00003558 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3558:	defffe04 	addi	sp,sp,-8
    355c:	dfc00115 	stw	ra,4(sp)
    3560:	df000015 	stw	fp,0(sp)
    3564:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3568:	d0a00917 	ldw	r2,-32732(gp)
    356c:	10000326 	beq	r2,zero,357c <alt_get_errno+0x24>
    3570:	d0a00917 	ldw	r2,-32732(gp)
    3574:	103ee83a 	callr	r2
    3578:	00000106 	br	3580 <alt_get_errno+0x28>
    357c:	d0a7ea04 	addi	r2,gp,-24664
}
    3580:	e037883a 	mov	sp,fp
    3584:	dfc00117 	ldw	ra,4(sp)
    3588:	df000017 	ldw	fp,0(sp)
    358c:	dec00204 	addi	sp,sp,8
    3590:	f800283a 	ret

00003594 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    3594:	defff904 	addi	sp,sp,-28
    3598:	dfc00615 	stw	ra,24(sp)
    359c:	df000515 	stw	fp,20(sp)
    35a0:	df000504 	addi	fp,sp,20
    35a4:	e13ffd15 	stw	r4,-12(fp)
    35a8:	e17ffe15 	stw	r5,-8(fp)
    35ac:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    35b0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    35b4:	e0bffd17 	ldw	r2,-12(fp)
    35b8:	10000616 	blt	r2,zero,35d4 <lseek+0x40>
    35bc:	e0bffd17 	ldw	r2,-12(fp)
    35c0:	10c00324 	muli	r3,r2,12
    35c4:	00800074 	movhi	r2,1
    35c8:	10bfb904 	addi	r2,r2,-284
    35cc:	1885883a 	add	r2,r3,r2
    35d0:	00000106 	br	35d8 <lseek+0x44>
    35d4:	0005883a 	mov	r2,zero
    35d8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    35dc:	e0bffc17 	ldw	r2,-16(fp)
    35e0:	10001026 	beq	r2,zero,3624 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    35e4:	e0bffc17 	ldw	r2,-16(fp)
    35e8:	10800017 	ldw	r2,0(r2)
    35ec:	10800717 	ldw	r2,28(r2)
    35f0:	10000926 	beq	r2,zero,3618 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    35f4:	e0bffc17 	ldw	r2,-16(fp)
    35f8:	10800017 	ldw	r2,0(r2)
    35fc:	10800717 	ldw	r2,28(r2)
    3600:	e1bfff17 	ldw	r6,-4(fp)
    3604:	e17ffe17 	ldw	r5,-8(fp)
    3608:	e13ffc17 	ldw	r4,-16(fp)
    360c:	103ee83a 	callr	r2
    3610:	e0bffb15 	stw	r2,-20(fp)
    3614:	00000506 	br	362c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    3618:	00bfde84 	movi	r2,-134
    361c:	e0bffb15 	stw	r2,-20(fp)
    3620:	00000206 	br	362c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    3624:	00bfebc4 	movi	r2,-81
    3628:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    362c:	e0bffb17 	ldw	r2,-20(fp)
    3630:	1000070e 	bge	r2,zero,3650 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    3634:	00035580 	call	3558 <alt_get_errno>
    3638:	1007883a 	mov	r3,r2
    363c:	e0bffb17 	ldw	r2,-20(fp)
    3640:	0085c83a 	sub	r2,zero,r2
    3644:	18800015 	stw	r2,0(r3)
    rc = -1;
    3648:	00bfffc4 	movi	r2,-1
    364c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    3650:	e0bffb17 	ldw	r2,-20(fp)
}
    3654:	e037883a 	mov	sp,fp
    3658:	dfc00117 	ldw	ra,4(sp)
    365c:	df000017 	ldw	fp,0(sp)
    3660:	dec00204 	addi	sp,sp,8
    3664:	f800283a 	ret

00003668 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    3668:	defff904 	addi	sp,sp,-28
    366c:	dfc00615 	stw	ra,24(sp)
    3670:	df000515 	stw	fp,20(sp)
    3674:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    3678:	0009883a 	mov	r4,zero
    367c:	000b5c80 	call	b5c8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    3680:	00046240 	call	4624 <OSInit>
    3684:	01000044 	movi	r4,1
    3688:	0008f840 	call	8f84 <OSSemCreate>
    368c:	d0a7f015 	stw	r2,-24640(gp)
    3690:	01000044 	movi	r4,1
    3694:	0008f840 	call	8f84 <OSSemCreate>
    3698:	d0a7f215 	stw	r2,-24632(gp)
    369c:	d0a7eb04 	addi	r2,gp,-24660
    36a0:	e0bffc15 	stw	r2,-16(fp)
    36a4:	00800044 	movi	r2,1
    36a8:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    36ac:	e0bffd0b 	ldhu	r2,-12(fp)
    36b0:	1009883a 	mov	r4,r2
    36b4:	0008f840 	call	8f84 <OSSemCreate>
    36b8:	1007883a 	mov	r3,r2
    36bc:	e0bffc17 	ldw	r2,-16(fp)
    36c0:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    36c4:	000b6000 	call	b600 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    36c8:	01800074 	movhi	r6,1
    36cc:	31bceb04 	addi	r6,r6,-3156
    36d0:	01400074 	movhi	r5,1
    36d4:	297ceb04 	addi	r5,r5,-3156
    36d8:	01000074 	movhi	r4,1
    36dc:	213ceb04 	addi	r4,r4,-3156
    36e0:	000e35c0 	call	e35c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    36e4:	000e1140 	call	e114 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    36e8:	01000074 	movhi	r4,1
    36ec:	21385d04 	addi	r4,r4,-7820
    36f0:	000efdc0 	call	efdc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    36f4:	d0a7ec17 	ldw	r2,-24656(gp)
    36f8:	d0e7ed17 	ldw	r3,-24652(gp)
    36fc:	d127ee17 	ldw	r4,-24648(gp)
    3700:	200d883a 	mov	r6,r4
    3704:	180b883a 	mov	r5,r3
    3708:	1009883a 	mov	r4,r2
    370c:	00002f40 	call	2f4 <main>
    3710:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    3714:	01000044 	movi	r4,1
    3718:	00031a40 	call	31a4 <close>
  exit (result);
    371c:	e13ffb17 	ldw	r4,-20(fp)
    3720:	000eff00 	call	eff0 <exit>

00003724 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3724:	defffe04 	addi	sp,sp,-8
    3728:	dfc00115 	stw	ra,4(sp)
    372c:	df000015 	stw	fp,0(sp)
    3730:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3734:	d0a00917 	ldw	r2,-32732(gp)
    3738:	10000326 	beq	r2,zero,3748 <alt_get_errno+0x24>
    373c:	d0a00917 	ldw	r2,-32732(gp)
    3740:	103ee83a 	callr	r2
    3744:	00000106 	br	374c <alt_get_errno+0x28>
    3748:	d0a7ea04 	addi	r2,gp,-24664
}
    374c:	e037883a 	mov	sp,fp
    3750:	dfc00117 	ldw	ra,4(sp)
    3754:	df000017 	ldw	fp,0(sp)
    3758:	dec00204 	addi	sp,sp,8
    375c:	f800283a 	ret

00003760 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    3760:	defff904 	addi	sp,sp,-28
    3764:	dfc00615 	stw	ra,24(sp)
    3768:	df000515 	stw	fp,20(sp)
    376c:	df000504 	addi	fp,sp,20
    3770:	e13ffd15 	stw	r4,-12(fp)
    3774:	e17ffe15 	stw	r5,-8(fp)
    3778:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    377c:	e0bffd17 	ldw	r2,-12(fp)
    3780:	10000616 	blt	r2,zero,379c <read+0x3c>
    3784:	e0bffd17 	ldw	r2,-12(fp)
    3788:	10c00324 	muli	r3,r2,12
    378c:	00800074 	movhi	r2,1
    3790:	10bfb904 	addi	r2,r2,-284
    3794:	1885883a 	add	r2,r3,r2
    3798:	00000106 	br	37a0 <read+0x40>
    379c:	0005883a 	mov	r2,zero
    37a0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    37a4:	e0bffb17 	ldw	r2,-20(fp)
    37a8:	10002226 	beq	r2,zero,3834 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    37ac:	e0bffb17 	ldw	r2,-20(fp)
    37b0:	10800217 	ldw	r2,8(r2)
    37b4:	108000cc 	andi	r2,r2,3
    37b8:	10800060 	cmpeqi	r2,r2,1
    37bc:	1000181e 	bne	r2,zero,3820 <read+0xc0>
        (fd->dev->read))
    37c0:	e0bffb17 	ldw	r2,-20(fp)
    37c4:	10800017 	ldw	r2,0(r2)
    37c8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    37cc:	10001426 	beq	r2,zero,3820 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    37d0:	e0bffb17 	ldw	r2,-20(fp)
    37d4:	10800017 	ldw	r2,0(r2)
    37d8:	10800517 	ldw	r2,20(r2)
    37dc:	e0ffff17 	ldw	r3,-4(fp)
    37e0:	180d883a 	mov	r6,r3
    37e4:	e17ffe17 	ldw	r5,-8(fp)
    37e8:	e13ffb17 	ldw	r4,-20(fp)
    37ec:	103ee83a 	callr	r2
    37f0:	e0bffc15 	stw	r2,-16(fp)
    37f4:	e0bffc17 	ldw	r2,-16(fp)
    37f8:	1000070e 	bge	r2,zero,3818 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    37fc:	00037240 	call	3724 <alt_get_errno>
    3800:	1007883a 	mov	r3,r2
    3804:	e0bffc17 	ldw	r2,-16(fp)
    3808:	0085c83a 	sub	r2,zero,r2
    380c:	18800015 	stw	r2,0(r3)
          return -1;
    3810:	00bfffc4 	movi	r2,-1
    3814:	00000c06 	br	3848 <read+0xe8>
        }
        return rval;
    3818:	e0bffc17 	ldw	r2,-16(fp)
    381c:	00000a06 	br	3848 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    3820:	00037240 	call	3724 <alt_get_errno>
    3824:	1007883a 	mov	r3,r2
    3828:	00800344 	movi	r2,13
    382c:	18800015 	stw	r2,0(r3)
    3830:	00000406 	br	3844 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    3834:	00037240 	call	3724 <alt_get_errno>
    3838:	1007883a 	mov	r3,r2
    383c:	00801444 	movi	r2,81
    3840:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3844:	00bfffc4 	movi	r2,-1
}
    3848:	e037883a 	mov	sp,fp
    384c:	dfc00117 	ldw	ra,4(sp)
    3850:	df000017 	ldw	fp,0(sp)
    3854:	dec00204 	addi	sp,sp,8
    3858:	f800283a 	ret

0000385c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    385c:	defffe04 	addi	sp,sp,-8
    3860:	df000115 	stw	fp,4(sp)
    3864:	df000104 	addi	fp,sp,4
    3868:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    386c:	e0bfff17 	ldw	r2,-4(fp)
    3870:	108000d0 	cmplti	r2,r2,3
    3874:	10000d1e 	bne	r2,zero,38ac <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    3878:	00800074 	movhi	r2,1
    387c:	10bfb904 	addi	r2,r2,-284
    3880:	e0ffff17 	ldw	r3,-4(fp)
    3884:	18c00324 	muli	r3,r3,12
    3888:	10c5883a 	add	r2,r2,r3
    388c:	10800204 	addi	r2,r2,8
    3890:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    3894:	00800074 	movhi	r2,1
    3898:	10bfb904 	addi	r2,r2,-284
    389c:	e0ffff17 	ldw	r3,-4(fp)
    38a0:	18c00324 	muli	r3,r3,12
    38a4:	10c5883a 	add	r2,r2,r3
    38a8:	10000015 	stw	zero,0(r2)
  }
}
    38ac:	0001883a 	nop
    38b0:	e037883a 	mov	sp,fp
    38b4:	df000017 	ldw	fp,0(sp)
    38b8:	dec00104 	addi	sp,sp,4
    38bc:	f800283a 	ret

000038c0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    38c0:	defff904 	addi	sp,sp,-28
    38c4:	df000615 	stw	fp,24(sp)
    38c8:	df000604 	addi	fp,sp,24
    38cc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    38d0:	0005303a 	rdctl	r2,status
    38d4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    38d8:	e0fffe17 	ldw	r3,-8(fp)
    38dc:	00bfff84 	movi	r2,-2
    38e0:	1884703a 	and	r2,r3,r2
    38e4:	1001703a 	wrctl	status,r2
  
  return context;
    38e8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    38ec:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    38f0:	d0a00a17 	ldw	r2,-32728(gp)
    38f4:	10c000c4 	addi	r3,r2,3
    38f8:	00bfff04 	movi	r2,-4
    38fc:	1884703a 	and	r2,r3,r2
    3900:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    3904:	d0e00a17 	ldw	r3,-32728(gp)
    3908:	e0bfff17 	ldw	r2,-4(fp)
    390c:	1887883a 	add	r3,r3,r2
    3910:	00810034 	movhi	r2,1024
    3914:	10800004 	addi	r2,r2,0
    3918:	10c0062e 	bgeu	r2,r3,3934 <sbrk+0x74>
    391c:	e0bffb17 	ldw	r2,-20(fp)
    3920:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3924:	e0bffa17 	ldw	r2,-24(fp)
    3928:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    392c:	00bfffc4 	movi	r2,-1
    3930:	00000b06 	br	3960 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    3934:	d0a00a17 	ldw	r2,-32728(gp)
    3938:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    393c:	d0e00a17 	ldw	r3,-32728(gp)
    3940:	e0bfff17 	ldw	r2,-4(fp)
    3944:	1885883a 	add	r2,r3,r2
    3948:	d0a00a15 	stw	r2,-32728(gp)
    394c:	e0bffb17 	ldw	r2,-20(fp)
    3950:	e0bffc15 	stw	r2,-16(fp)
    3954:	e0bffc17 	ldw	r2,-16(fp)
    3958:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    395c:	e0bffd17 	ldw	r2,-12(fp)
} 
    3960:	e037883a 	mov	sp,fp
    3964:	df000017 	ldw	fp,0(sp)
    3968:	dec00104 	addi	sp,sp,4
    396c:	f800283a 	ret

00003970 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3970:	defffe04 	addi	sp,sp,-8
    3974:	dfc00115 	stw	ra,4(sp)
    3978:	df000015 	stw	fp,0(sp)
    397c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3980:	d0a00917 	ldw	r2,-32732(gp)
    3984:	10000326 	beq	r2,zero,3994 <alt_get_errno+0x24>
    3988:	d0a00917 	ldw	r2,-32732(gp)
    398c:	103ee83a 	callr	r2
    3990:	00000106 	br	3998 <alt_get_errno+0x28>
    3994:	d0a7ea04 	addi	r2,gp,-24664
}
    3998:	e037883a 	mov	sp,fp
    399c:	dfc00117 	ldw	ra,4(sp)
    39a0:	df000017 	ldw	fp,0(sp)
    39a4:	dec00204 	addi	sp,sp,8
    39a8:	f800283a 	ret

000039ac <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    39ac:	defff904 	addi	sp,sp,-28
    39b0:	dfc00615 	stw	ra,24(sp)
    39b4:	df000515 	stw	fp,20(sp)
    39b8:	df000504 	addi	fp,sp,20
    39bc:	e13ffd15 	stw	r4,-12(fp)
    39c0:	e17ffe15 	stw	r5,-8(fp)
    39c4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    39c8:	e0bffd17 	ldw	r2,-12(fp)
    39cc:	10000616 	blt	r2,zero,39e8 <write+0x3c>
    39d0:	e0bffd17 	ldw	r2,-12(fp)
    39d4:	10c00324 	muli	r3,r2,12
    39d8:	00800074 	movhi	r2,1
    39dc:	10bfb904 	addi	r2,r2,-284
    39e0:	1885883a 	add	r2,r3,r2
    39e4:	00000106 	br	39ec <write+0x40>
    39e8:	0005883a 	mov	r2,zero
    39ec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    39f0:	e0bffb17 	ldw	r2,-20(fp)
    39f4:	10002126 	beq	r2,zero,3a7c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    39f8:	e0bffb17 	ldw	r2,-20(fp)
    39fc:	10800217 	ldw	r2,8(r2)
    3a00:	108000cc 	andi	r2,r2,3
    3a04:	10001826 	beq	r2,zero,3a68 <write+0xbc>
    3a08:	e0bffb17 	ldw	r2,-20(fp)
    3a0c:	10800017 	ldw	r2,0(r2)
    3a10:	10800617 	ldw	r2,24(r2)
    3a14:	10001426 	beq	r2,zero,3a68 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    3a18:	e0bffb17 	ldw	r2,-20(fp)
    3a1c:	10800017 	ldw	r2,0(r2)
    3a20:	10800617 	ldw	r2,24(r2)
    3a24:	e0ffff17 	ldw	r3,-4(fp)
    3a28:	180d883a 	mov	r6,r3
    3a2c:	e17ffe17 	ldw	r5,-8(fp)
    3a30:	e13ffb17 	ldw	r4,-20(fp)
    3a34:	103ee83a 	callr	r2
    3a38:	e0bffc15 	stw	r2,-16(fp)
    3a3c:	e0bffc17 	ldw	r2,-16(fp)
    3a40:	1000070e 	bge	r2,zero,3a60 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    3a44:	00039700 	call	3970 <alt_get_errno>
    3a48:	1007883a 	mov	r3,r2
    3a4c:	e0bffc17 	ldw	r2,-16(fp)
    3a50:	0085c83a 	sub	r2,zero,r2
    3a54:	18800015 	stw	r2,0(r3)
        return -1;
    3a58:	00bfffc4 	movi	r2,-1
    3a5c:	00000c06 	br	3a90 <write+0xe4>
      }
      return rval;
    3a60:	e0bffc17 	ldw	r2,-16(fp)
    3a64:	00000a06 	br	3a90 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    3a68:	00039700 	call	3970 <alt_get_errno>
    3a6c:	1007883a 	mov	r3,r2
    3a70:	00800344 	movi	r2,13
    3a74:	18800015 	stw	r2,0(r3)
    3a78:	00000406 	br	3a8c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    3a7c:	00039700 	call	3970 <alt_get_errno>
    3a80:	1007883a 	mov	r3,r2
    3a84:	00801444 	movi	r2,81
    3a88:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3a8c:	00bfffc4 	movi	r2,-1
}
    3a90:	e037883a 	mov	sp,fp
    3a94:	dfc00117 	ldw	ra,4(sp)
    3a98:	df000017 	ldw	fp,0(sp)
    3a9c:	dec00204 	addi	sp,sp,8
    3aa0:	f800283a 	ret

00003aa4 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    3aa4:	deffdf04 	addi	sp,sp,-132
    3aa8:	dfc02015 	stw	ra,128(sp)
    3aac:	df001f15 	stw	fp,124(sp)
    3ab0:	df001f04 	addi	fp,sp,124
    3ab4:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    3ab8:	e0bfe204 	addi	r2,fp,-120
    3abc:	100b883a 	mov	r5,r2
    3ac0:	01003fc4 	movi	r4,255
    3ac4:	000af0c0 	call	af0c <OSTaskQuery>
    3ac8:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    3acc:	e0bffe83 	ldbu	r2,-6(fp)
    3ad0:	10803fcc 	andi	r2,r2,255
    3ad4:	10001e1e 	bne	r2,zero,3b50 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
    3ad8:	e0bfee83 	ldbu	r2,-70(fp)
    3adc:	10803fcc 	andi	r2,r2,255
    3ae0:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    3ae4:	d0a7f017 	ldw	r2,-24640(gp)
    3ae8:	e0fffd04 	addi	r3,fp,-12
    3aec:	180b883a 	mov	r5,r3
    3af0:	1009883a 	mov	r4,r2
    3af4:	00097240 	call	9724 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    3af8:	e0bffe43 	ldbu	r2,-7(fp)
    3afc:	10803fcc 	andi	r2,r2,255
    3b00:	10000726 	beq	r2,zero,3b20 <__env_lock+0x7c>
    3b04:	d0a00b17 	ldw	r2,-32724(gp)
    3b08:	e0ffe117 	ldw	r3,-124(fp)
    3b0c:	1880041e 	bne	r3,r2,3b20 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
    3b10:	d0a7ef17 	ldw	r2,-24644(gp)
    3b14:	10800044 	addi	r2,r2,1
    3b18:	d0a7ef15 	stw	r2,-24644(gp)
    3b1c:	00000a06 	br	3b48 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    3b20:	d0a7f017 	ldw	r2,-24640(gp)
    3b24:	e0fffe84 	addi	r3,fp,-6
    3b28:	180d883a 	mov	r6,r3
    3b2c:	000b883a 	mov	r5,zero
    3b30:	1009883a 	mov	r4,r2
    3b34:	000929c0 	call	929c <OSSemPend>
    locks  = 1;
    3b38:	00800044 	movi	r2,1
    3b3c:	d0a7ef15 	stw	r2,-24644(gp)
    lockid = id;
    3b40:	e0bfe117 	ldw	r2,-124(fp)
    3b44:	d0a00b15 	stw	r2,-32724(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    3b48:	0001883a 	nop
    3b4c:	00000106 	br	3b54 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    3b50:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    3b54:	e037883a 	mov	sp,fp
    3b58:	dfc00117 	ldw	ra,4(sp)
    3b5c:	df000017 	ldw	fp,0(sp)
    3b60:	dec00204 	addi	sp,sp,8
    3b64:	f800283a 	ret

00003b68 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    3b68:	defffd04 	addi	sp,sp,-12
    3b6c:	dfc00215 	stw	ra,8(sp)
    3b70:	df000115 	stw	fp,4(sp)
    3b74:	df000104 	addi	fp,sp,4
    3b78:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    3b7c:	d0a7ef17 	ldw	r2,-24644(gp)
    3b80:	10000b26 	beq	r2,zero,3bb0 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    3b84:	d0a7ef17 	ldw	r2,-24644(gp)
    3b88:	10bfffc4 	addi	r2,r2,-1
    3b8c:	d0a7ef15 	stw	r2,-24644(gp)
    3b90:	d0a7ef17 	ldw	r2,-24644(gp)
    3b94:	1000071e 	bne	r2,zero,3bb4 <__env_unlock+0x4c>
  {
    lockid = -1;
    3b98:	00bfffc4 	movi	r2,-1
    3b9c:	d0a00b15 	stw	r2,-32724(gp)
    OSSemPost( alt_envsem );
    3ba0:	d0a7f017 	ldw	r2,-24640(gp)
    3ba4:	1009883a 	mov	r4,r2
    3ba8:	00096140 	call	9614 <OSSemPost>
    3bac:	00000106 	br	3bb4 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
    3bb0:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    3bb4:	e037883a 	mov	sp,fp
    3bb8:	dfc00117 	ldw	ra,4(sp)
    3bbc:	df000017 	ldw	fp,0(sp)
    3bc0:	dec00204 	addi	sp,sp,8
    3bc4:	f800283a 	ret

00003bc8 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    3bc8:	deffdb04 	addi	sp,sp,-148
    3bcc:	dfc02415 	stw	ra,144(sp)
    3bd0:	df002315 	stw	fp,140(sp)
    3bd4:	df002304 	addi	fp,sp,140
    3bd8:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3bdc:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    3be0:	d0a7f343 	ldbu	r2,-24627(gp)
    3be4:	10803fcc 	andi	r2,r2,255
    3be8:	10800060 	cmpeqi	r2,r2,1
    3bec:	10003626 	beq	r2,zero,3cc8 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    3bf0:	e0bfe204 	addi	r2,fp,-120
    3bf4:	100b883a 	mov	r5,r2
    3bf8:	01003fc4 	movi	r4,255
    3bfc:	000af0c0 	call	af0c <OSTaskQuery>
    3c00:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    3c04:	e0bffe83 	ldbu	r2,-6(fp)
    3c08:	10803fcc 	andi	r2,r2,255
    3c0c:	1000301e 	bne	r2,zero,3cd0 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
    3c10:	e0bfee83 	ldbu	r2,-70(fp)
    3c14:	10803fcc 	andi	r2,r2,255
    3c18:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    3c1c:	d0a7f217 	ldw	r2,-24632(gp)
    3c20:	e0fffd04 	addi	r3,fp,-12
    3c24:	180b883a 	mov	r5,r3
    3c28:	1009883a 	mov	r4,r2
    3c2c:	00097240 	call	9724 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3c30:	0005303a 	rdctl	r2,status
    3c34:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3c38:	e0ffe117 	ldw	r3,-124(fp)
    3c3c:	00bfff84 	movi	r2,-2
    3c40:	1884703a 	and	r2,r3,r2
    3c44:	1001703a 	wrctl	status,r2
  
  return context;
    3c48:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
    3c4c:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    3c50:	e0bffd0b 	ldhu	r2,-12(fp)
    3c54:	10bfffcc 	andi	r2,r2,65535
    3c58:	10000b1e 	bne	r2,zero,3c88 <__malloc_lock+0xc0>
    3c5c:	d0a00c17 	ldw	r2,-32720(gp)
    3c60:	e0ffde17 	ldw	r3,-136(fp)
    3c64:	1880081e 	bne	r3,r2,3c88 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
    3c68:	d0a7f117 	ldw	r2,-24636(gp)
    3c6c:	10800044 	addi	r2,r2,1
    3c70:	d0a7f115 	stw	r2,-24636(gp)
    3c74:	e0bfdd17 	ldw	r2,-140(fp)
    3c78:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3c7c:	e0bfdf17 	ldw	r2,-132(fp)
    3c80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    3c84:	00000e06 	br	3cc0 <__malloc_lock+0xf8>
    3c88:	e0bfdd17 	ldw	r2,-140(fp)
    3c8c:	e0bfe015 	stw	r2,-128(fp)
    3c90:	e0bfe017 	ldw	r2,-128(fp)
    3c94:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    3c98:	d0a7f217 	ldw	r2,-24632(gp)
    3c9c:	e0fffe84 	addi	r3,fp,-6
    3ca0:	180d883a 	mov	r6,r3
    3ca4:	000b883a 	mov	r5,zero
    3ca8:	1009883a 	mov	r4,r2
    3cac:	000929c0 	call	929c <OSSemPend>
    locks  = 1;
    3cb0:	00800044 	movi	r2,1
    3cb4:	d0a7f115 	stw	r2,-24636(gp)
    lockid = id;
    3cb8:	e0bfde17 	ldw	r2,-136(fp)
    3cbc:	d0a00c15 	stw	r2,-32720(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    3cc0:	0001883a 	nop
    3cc4:	00000306 	br	3cd4 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
    3cc8:	0001883a 	nop
    3ccc:	00000106 	br	3cd4 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    3cd0:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    3cd4:	e037883a 	mov	sp,fp
    3cd8:	dfc00117 	ldw	ra,4(sp)
    3cdc:	df000017 	ldw	fp,0(sp)
    3ce0:	dec00204 	addi	sp,sp,8
    3ce4:	f800283a 	ret

00003ce8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    3ce8:	defff804 	addi	sp,sp,-32
    3cec:	dfc00715 	stw	ra,28(sp)
    3cf0:	df000615 	stw	fp,24(sp)
    3cf4:	df000604 	addi	fp,sp,24
    3cf8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3cfc:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    3d00:	d0a7f343 	ldbu	r2,-24627(gp)
    3d04:	10803fcc 	andi	r2,r2,255
    3d08:	10800060 	cmpeqi	r2,r2,1
    3d0c:	10002326 	beq	r2,zero,3d9c <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3d10:	0005303a 	rdctl	r2,status
    3d14:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3d18:	e0fffe17 	ldw	r3,-8(fp)
    3d1c:	00bfff84 	movi	r2,-2
    3d20:	1884703a 	and	r2,r3,r2
    3d24:	1001703a 	wrctl	status,r2
  
  return context;
    3d28:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
    3d2c:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    3d30:	d0a7f117 	ldw	r2,-24636(gp)
    3d34:	1000051e 	bne	r2,zero,3d4c <__malloc_unlock+0x64>
    3d38:	e0bffa17 	ldw	r2,-24(fp)
    3d3c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3d40:	e0bffb17 	ldw	r2,-20(fp)
    3d44:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    3d48:	00001506 	br	3da0 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    3d4c:	d0a7f117 	ldw	r2,-24636(gp)
    3d50:	10bfffc4 	addi	r2,r2,-1
    3d54:	d0a7f115 	stw	r2,-24636(gp)
    3d58:	d0a7f117 	ldw	r2,-24636(gp)
    3d5c:	10000a1e 	bne	r2,zero,3d88 <__malloc_unlock+0xa0>
  {
    lockid = -1;
    3d60:	00bfffc4 	movi	r2,-1
    3d64:	d0a00c15 	stw	r2,-32720(gp)
    3d68:	e0bffa17 	ldw	r2,-24(fp)
    3d6c:	e0bffc15 	stw	r2,-16(fp)
    3d70:	e0bffc17 	ldw	r2,-16(fp)
    3d74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    3d78:	d0a7f217 	ldw	r2,-24632(gp)
    3d7c:	1009883a 	mov	r4,r2
    3d80:	00096140 	call	9614 <OSSemPost>
    3d84:	00000606 	br	3da0 <__malloc_unlock+0xb8>
    3d88:	e0bffa17 	ldw	r2,-24(fp)
    3d8c:	e0bffd15 	stw	r2,-12(fp)
    3d90:	e0bffd17 	ldw	r2,-12(fp)
    3d94:	1001703a 	wrctl	status,r2
    3d98:	00000106 	br	3da0 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
    3d9c:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    3da0:	e037883a 	mov	sp,fp
    3da4:	dfc00117 	ldw	ra,4(sp)
    3da8:	df000017 	ldw	fp,0(sp)
    3dac:	dec00204 	addi	sp,sp,8
    3db0:	f800283a 	ret

00003db4 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    3db4:	defff704 	addi	sp,sp,-36
    3db8:	dfc00815 	stw	ra,32(sp)
    3dbc:	df000715 	stw	fp,28(sp)
    3dc0:	df000704 	addi	fp,sp,28
    3dc4:	e13ffd15 	stw	r4,-12(fp)
    3dc8:	e17ffe15 	stw	r5,-8(fp)
    3dcc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3dd0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    3dd4:	e0bfff17 	ldw	r2,-4(fp)
    3dd8:	1000021e 	bne	r2,zero,3de4 <OSEventNameGet+0x30>
        return (0);
    3ddc:	0005883a 	mov	r2,zero
    3de0:	00003706 	br	3ec0 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    3de4:	e0bffd17 	ldw	r2,-12(fp)
    3de8:	1000051e 	bne	r2,zero,3e00 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    3dec:	e0bfff17 	ldw	r2,-4(fp)
    3df0:	00c00104 	movi	r3,4
    3df4:	10c00005 	stb	r3,0(r2)
        return (0);
    3df8:	0005883a 	mov	r2,zero
    3dfc:	00003006 	br	3ec0 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    3e00:	e0bffe17 	ldw	r2,-8(fp)
    3e04:	1000051e 	bne	r2,zero,3e1c <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    3e08:	e0bfff17 	ldw	r2,-4(fp)
    3e0c:	00c00304 	movi	r3,12
    3e10:	10c00005 	stb	r3,0(r2)
        return (0);
    3e14:	0005883a 	mov	r2,zero
    3e18:	00002906 	br	3ec0 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    3e1c:	d0a80103 	ldbu	r2,-24572(gp)
    3e20:	10803fcc 	andi	r2,r2,255
    3e24:	10000526 	beq	r2,zero,3e3c <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    3e28:	e0bfff17 	ldw	r2,-4(fp)
    3e2c:	00c00444 	movi	r3,17
    3e30:	10c00005 	stb	r3,0(r2)
        return (0);
    3e34:	0005883a 	mov	r2,zero
    3e38:	00002106 	br	3ec0 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    3e3c:	e0bffd17 	ldw	r2,-12(fp)
    3e40:	10800003 	ldbu	r2,0(r2)
    3e44:	10803fcc 	andi	r2,r2,255
    3e48:	10bfffc4 	addi	r2,r2,-1
    3e4c:	10800128 	cmpgeui	r2,r2,4
    3e50:	10000526 	beq	r2,zero,3e68 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    3e54:	e0bfff17 	ldw	r2,-4(fp)
    3e58:	00c00044 	movi	r3,1
    3e5c:	10c00005 	stb	r3,0(r2)
             return (0);
    3e60:	0005883a 	mov	r2,zero
    3e64:	00001606 	br	3ec0 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    3e68:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3e6c:	0005303a 	rdctl	r2,status
    3e70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3e74:	e0fffb17 	ldw	r3,-20(fp)
    3e78:	00bfff84 	movi	r2,-2
    3e7c:	1884703a 	and	r2,r3,r2
    3e80:	1001703a 	wrctl	status,r2
  
  return context;
    3e84:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    3e88:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    3e8c:	e0bffd17 	ldw	r2,-12(fp)
    3e90:	10800384 	addi	r2,r2,14
    3e94:	100b883a 	mov	r5,r2
    3e98:	e13ffe17 	ldw	r4,-8(fp)
    3e9c:	00058380 	call	5838 <OS_StrCopy>
    3ea0:	e0bffa05 	stb	r2,-24(fp)
    3ea4:	e0bff917 	ldw	r2,-28(fp)
    3ea8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3eac:	e0bffc17 	ldw	r2,-16(fp)
    3eb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    3eb4:	e0bfff17 	ldw	r2,-4(fp)
    3eb8:	10000005 	stb	zero,0(r2)
    return (len);
    3ebc:	e0bffa03 	ldbu	r2,-24(fp)
}
    3ec0:	e037883a 	mov	sp,fp
    3ec4:	dfc00117 	ldw	ra,4(sp)
    3ec8:	df000017 	ldw	fp,0(sp)
    3ecc:	dec00204 	addi	sp,sp,8
    3ed0:	f800283a 	ret

00003ed4 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    3ed4:	defff604 	addi	sp,sp,-40
    3ed8:	dfc00915 	stw	ra,36(sp)
    3edc:	df000815 	stw	fp,32(sp)
    3ee0:	df000804 	addi	fp,sp,32
    3ee4:	e13ffd15 	stw	r4,-12(fp)
    3ee8:	e17ffe15 	stw	r5,-8(fp)
    3eec:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3ef0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    3ef4:	e0bfff17 	ldw	r2,-4(fp)
    3ef8:	10004026 	beq	r2,zero,3ffc <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    3efc:	e0bffd17 	ldw	r2,-12(fp)
    3f00:	1000041e 	bne	r2,zero,3f14 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    3f04:	e0bfff17 	ldw	r2,-4(fp)
    3f08:	00c00104 	movi	r3,4
    3f0c:	10c00005 	stb	r3,0(r2)
        return;
    3f10:	00003b06 	br	4000 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    3f14:	e0bffe17 	ldw	r2,-8(fp)
    3f18:	1000041e 	bne	r2,zero,3f2c <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    3f1c:	e0bfff17 	ldw	r2,-4(fp)
    3f20:	00c00304 	movi	r3,12
    3f24:	10c00005 	stb	r3,0(r2)
        return;
    3f28:	00003506 	br	4000 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    3f2c:	d0a80103 	ldbu	r2,-24572(gp)
    3f30:	10803fcc 	andi	r2,r2,255
    3f34:	10000426 	beq	r2,zero,3f48 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    3f38:	e0bfff17 	ldw	r2,-4(fp)
    3f3c:	00c00484 	movi	r3,18
    3f40:	10c00005 	stb	r3,0(r2)
        return;
    3f44:	00002e06 	br	4000 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
    3f48:	e0bffd17 	ldw	r2,-12(fp)
    3f4c:	10800003 	ldbu	r2,0(r2)
    3f50:	10803fcc 	andi	r2,r2,255
    3f54:	10bfffc4 	addi	r2,r2,-1
    3f58:	10800128 	cmpgeui	r2,r2,4
    3f5c:	10000426 	beq	r2,zero,3f70 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    3f60:	e0bfff17 	ldw	r2,-4(fp)
    3f64:	00c00044 	movi	r3,1
    3f68:	10c00005 	stb	r3,0(r2)
             return;
    3f6c:	00002406 	br	4000 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    3f70:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3f74:	0005303a 	rdctl	r2,status
    3f78:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3f7c:	e0fffc17 	ldw	r3,-16(fp)
    3f80:	00bfff84 	movi	r2,-2
    3f84:	1884703a 	and	r2,r3,r2
    3f88:	1001703a 	wrctl	status,r2
  
  return context;
    3f8c:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    3f90:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    3f94:	e13ffe17 	ldw	r4,-8(fp)
    3f98:	00058ac0 	call	58ac <OS_StrLen>
    3f9c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    3fa0:	e0bffa03 	ldbu	r2,-24(fp)
    3fa4:	10800830 	cmpltui	r2,r2,32
    3fa8:	1000081e 	bne	r2,zero,3fcc <OSEventNameSet+0xf8>
    3fac:	e0bff817 	ldw	r2,-32(fp)
    3fb0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3fb4:	e0bff917 	ldw	r2,-28(fp)
    3fb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    3fbc:	e0bfff17 	ldw	r2,-4(fp)
    3fc0:	00c002c4 	movi	r3,11
    3fc4:	10c00005 	stb	r3,0(r2)
        return;
    3fc8:	00000d06 	br	4000 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    3fcc:	e0bffd17 	ldw	r2,-12(fp)
    3fd0:	10800384 	addi	r2,r2,14
    3fd4:	e17ffe17 	ldw	r5,-8(fp)
    3fd8:	1009883a 	mov	r4,r2
    3fdc:	00058380 	call	5838 <OS_StrCopy>
    3fe0:	e0bff817 	ldw	r2,-32(fp)
    3fe4:	e0bffb15 	stw	r2,-20(fp)
    3fe8:	e0bffb17 	ldw	r2,-20(fp)
    3fec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    3ff0:	e0bfff17 	ldw	r2,-4(fp)
    3ff4:	10000005 	stb	zero,0(r2)
    3ff8:	00000106 	br	4000 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    3ffc:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    4000:	e037883a 	mov	sp,fp
    4004:	dfc00117 	ldw	ra,4(sp)
    4008:	df000017 	ldw	fp,0(sp)
    400c:	dec00204 	addi	sp,sp,8
    4010:	f800283a 	ret

00004014 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    4014:	deffed04 	addi	sp,sp,-76
    4018:	dfc01215 	stw	ra,72(sp)
    401c:	df001115 	stw	fp,68(sp)
    4020:	df001104 	addi	fp,sp,68
    4024:	e13ffc15 	stw	r4,-16(fp)
    4028:	e17ffd15 	stw	r5,-12(fp)
    402c:	e1bffe15 	stw	r6,-8(fp)
    4030:	3805883a 	mov	r2,r7
    4034:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    4038:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    403c:	e0800217 	ldw	r2,8(fp)
    4040:	1000021e 	bne	r2,zero,404c <OSEventPendMulti+0x38>
        return (0);
    4044:	0005883a 	mov	r2,zero
    4048:	00017106 	br	4610 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    404c:	e0bffc17 	ldw	r2,-16(fp)
    4050:	1000051e 	bne	r2,zero,4068 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    4054:	e0800217 	ldw	r2,8(fp)
    4058:	00c00104 	movi	r3,4
    405c:	10c00005 	stb	r3,0(r2)
        return (0);
    4060:	0005883a 	mov	r2,zero
    4064:	00016a06 	br	4610 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    4068:	e0bffd17 	ldw	r2,-12(fp)
    406c:	1000051e 	bne	r2,zero,4084 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    4070:	e0800217 	ldw	r2,8(fp)
    4074:	00c00104 	movi	r3,4
    4078:	10c00005 	stb	r3,0(r2)
        return (0);
    407c:	0005883a 	mov	r2,zero
    4080:	00016306 	br	4610 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    4084:	e0bffe17 	ldw	r2,-8(fp)
    4088:	1000051e 	bne	r2,zero,40a0 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    408c:	e0800217 	ldw	r2,8(fp)
    4090:	00c00104 	movi	r3,4
    4094:	10c00005 	stb	r3,0(r2)
        return (0);
    4098:	0005883a 	mov	r2,zero
    409c:	00015c06 	br	4610 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    40a0:	e0bffd17 	ldw	r2,-12(fp)
    40a4:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    40a8:	e0bffc17 	ldw	r2,-16(fp)
    40ac:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    40b0:	e0bfef17 	ldw	r2,-68(fp)
    40b4:	10800017 	ldw	r2,0(r2)
    40b8:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    40bc:	00001906 	br	4124 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    40c0:	e0bff017 	ldw	r2,-64(fp)
    40c4:	10800003 	ldbu	r2,0(r2)
    40c8:	10803fcc 	andi	r2,r2,255
    40cc:	10c000a0 	cmpeqi	r3,r2,2
    40d0:	1800091e 	bne	r3,zero,40f8 <OSEventPendMulti+0xe4>
    40d4:	10c000e0 	cmpeqi	r3,r2,3
    40d8:	1800091e 	bne	r3,zero,4100 <OSEventPendMulti+0xec>
    40dc:	10800060 	cmpeqi	r2,r2,1
    40e0:	1000091e 	bne	r2,zero,4108 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    40e4:	e0800217 	ldw	r2,8(fp)
    40e8:	00c00044 	movi	r3,1
    40ec:	10c00005 	stb	r3,0(r2)
                 return (0);
    40f0:	0005883a 	mov	r2,zero
    40f4:	00014606 	br	4610 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    40f8:	0001883a 	nop
    40fc:	00000306 	br	410c <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    4100:	0001883a 	nop
    4104:	00000106 	br	410c <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    4108:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    410c:	e0bfef17 	ldw	r2,-68(fp)
    4110:	10800104 	addi	r2,r2,4
    4114:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    4118:	e0bfef17 	ldw	r2,-68(fp)
    411c:	10800017 	ldw	r2,0(r2)
    4120:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    4124:	e0bff017 	ldw	r2,-64(fp)
    4128:	103fe51e 	bne	r2,zero,40c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70040c0>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    412c:	d0a80103 	ldbu	r2,-24572(gp)
    4130:	10803fcc 	andi	r2,r2,255
    4134:	10000526 	beq	r2,zero,414c <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    4138:	e0800217 	ldw	r2,8(fp)
    413c:	00c00084 	movi	r3,2
    4140:	10c00005 	stb	r3,0(r2)
        return (0);
    4144:	0005883a 	mov	r2,zero
    4148:	00013106 	br	4610 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    414c:	d0a7f303 	ldbu	r2,-24628(gp)
    4150:	10803fcc 	andi	r2,r2,255
    4154:	10000526 	beq	r2,zero,416c <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    4158:	e0800217 	ldw	r2,8(fp)
    415c:	00c00344 	movi	r3,13
    4160:	10c00005 	stb	r3,0(r2)
        return (0);
    4164:	0005883a 	mov	r2,zero
    4168:	00012906 	br	4610 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    416c:	0005303a 	rdctl	r2,status
    4170:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4174:	e0fffb17 	ldw	r3,-20(fp)
    4178:	00bfff84 	movi	r2,-2
    417c:	1884703a 	and	r2,r3,r2
    4180:	1001703a 	wrctl	status,r2
  
  return context;
    4184:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    4188:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    418c:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    4190:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    4194:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    4198:	e0bffc17 	ldw	r2,-16(fp)
    419c:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    41a0:	e0bfef17 	ldw	r2,-68(fp)
    41a4:	10800017 	ldw	r2,0(r2)
    41a8:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    41ac:	00008106 	br	43b4 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    41b0:	e0bff017 	ldw	r2,-64(fp)
    41b4:	10800003 	ldbu	r2,0(r2)
    41b8:	10803fcc 	andi	r2,r2,255
    41bc:	10c000a0 	cmpeqi	r3,r2,2
    41c0:	18003c1e 	bne	r3,zero,42b4 <OSEventPendMulti+0x2a0>
    41c4:	10c000e0 	cmpeqi	r3,r2,3
    41c8:	1800031e 	bne	r3,zero,41d8 <OSEventPendMulti+0x1c4>
    41cc:	10800060 	cmpeqi	r2,r2,1
    41d0:	10001e1e 	bne	r2,zero,424c <OSEventPendMulti+0x238>
    41d4:	00006606 	br	4370 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    41d8:	e0bff017 	ldw	r2,-64(fp)
    41dc:	1080020b 	ldhu	r2,8(r2)
    41e0:	10bfffcc 	andi	r2,r2,65535
    41e4:	10001526 	beq	r2,zero,423c <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    41e8:	e0bff017 	ldw	r2,-64(fp)
    41ec:	1080020b 	ldhu	r2,8(r2)
    41f0:	10bfffc4 	addi	r2,r2,-1
    41f4:	1007883a 	mov	r3,r2
    41f8:	e0bff017 	ldw	r2,-64(fp)
    41fc:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    4200:	e0bffd17 	ldw	r2,-12(fp)
    4204:	10c00104 	addi	r3,r2,4
    4208:	e0fffd15 	stw	r3,-12(fp)
    420c:	e0fff017 	ldw	r3,-64(fp)
    4210:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    4214:	00800044 	movi	r2,1
    4218:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    421c:	e0bffe17 	ldw	r2,-8(fp)
    4220:	10c00104 	addi	r3,r2,4
    4224:	e0fffe15 	stw	r3,-8(fp)
    4228:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    422c:	e0bff18b 	ldhu	r2,-58(fp)
    4230:	10800044 	addi	r2,r2,1
    4234:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    4238:	00005806 	br	439c <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    423c:	e0bff203 	ldbu	r2,-56(fp)
    4240:	10800054 	ori	r2,r2,1
    4244:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    4248:	00005406 	br	439c <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    424c:	e0bff017 	ldw	r2,-64(fp)
    4250:	10800117 	ldw	r2,4(r2)
    4254:	10001326 	beq	r2,zero,42a4 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    4258:	e0bffe17 	ldw	r2,-8(fp)
    425c:	10c00104 	addi	r3,r2,4
    4260:	e0fffe15 	stw	r3,-8(fp)
    4264:	e0fff017 	ldw	r3,-64(fp)
    4268:	18c00117 	ldw	r3,4(r3)
    426c:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    4270:	e0bff017 	ldw	r2,-64(fp)
    4274:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    4278:	e0bffd17 	ldw	r2,-12(fp)
    427c:	10c00104 	addi	r3,r2,4
    4280:	e0fffd15 	stw	r3,-12(fp)
    4284:	e0fff017 	ldw	r3,-64(fp)
    4288:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    428c:	00800044 	movi	r2,1
    4290:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    4294:	e0bff18b 	ldhu	r2,-58(fp)
    4298:	10800044 	addi	r2,r2,1
    429c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    42a0:	00003e06 	br	439c <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    42a4:	e0bff203 	ldbu	r2,-56(fp)
    42a8:	10800094 	ori	r2,r2,2
    42ac:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    42b0:	00003a06 	br	439c <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    42b4:	e0bff017 	ldw	r2,-64(fp)
    42b8:	10800117 	ldw	r2,4(r2)
    42bc:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    42c0:	e0bff517 	ldw	r2,-44(fp)
    42c4:	1080058b 	ldhu	r2,22(r2)
    42c8:	10bfffcc 	andi	r2,r2,65535
    42cc:	10002426 	beq	r2,zero,4360 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    42d0:	e0bffe17 	ldw	r2,-8(fp)
    42d4:	10c00104 	addi	r3,r2,4
    42d8:	e0fffe15 	stw	r3,-8(fp)
    42dc:	e0fff517 	ldw	r3,-44(fp)
    42e0:	18c00417 	ldw	r3,16(r3)
    42e4:	19400104 	addi	r5,r3,4
    42e8:	e13ff517 	ldw	r4,-44(fp)
    42ec:	21400415 	stw	r5,16(r4)
    42f0:	18c00017 	ldw	r3,0(r3)
    42f4:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    42f8:	e0bff517 	ldw	r2,-44(fp)
    42fc:	10c00417 	ldw	r3,16(r2)
    4300:	e0bff517 	ldw	r2,-44(fp)
    4304:	10800217 	ldw	r2,8(r2)
    4308:	1880041e 	bne	r3,r2,431c <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    430c:	e0bff517 	ldw	r2,-44(fp)
    4310:	10c00117 	ldw	r3,4(r2)
    4314:	e0bff517 	ldw	r2,-44(fp)
    4318:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    431c:	e0bff517 	ldw	r2,-44(fp)
    4320:	1080058b 	ldhu	r2,22(r2)
    4324:	10bfffc4 	addi	r2,r2,-1
    4328:	1007883a 	mov	r3,r2
    432c:	e0bff517 	ldw	r2,-44(fp)
    4330:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    4334:	e0bffd17 	ldw	r2,-12(fp)
    4338:	10c00104 	addi	r3,r2,4
    433c:	e0fffd15 	stw	r3,-12(fp)
    4340:	e0fff017 	ldw	r3,-64(fp)
    4344:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    4348:	00800044 	movi	r2,1
    434c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    4350:	e0bff18b 	ldhu	r2,-58(fp)
    4354:	10800044 	addi	r2,r2,1
    4358:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    435c:	00000f06 	br	439c <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    4360:	e0bff203 	ldbu	r2,-56(fp)
    4364:	10800114 	ori	r2,r2,4
    4368:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    436c:	00000b06 	br	439c <OSEventPendMulti+0x388>
    4370:	e0bff317 	ldw	r2,-52(fp)
    4374:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4378:	e0bff417 	ldw	r2,-48(fp)
    437c:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    4380:	e0bffd17 	ldw	r2,-12(fp)
    4384:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    4388:	e0800217 	ldw	r2,8(fp)
    438c:	00c00044 	movi	r3,1
    4390:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    4394:	e0bff18b 	ldhu	r2,-58(fp)
    4398:	00009d06 	br	4610 <OSEventPendMulti+0x5fc>
        }
        pevents++;
    439c:	e0bfef17 	ldw	r2,-68(fp)
    43a0:	10800104 	addi	r2,r2,4
    43a4:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    43a8:	e0bfef17 	ldw	r2,-68(fp)
    43ac:	10800017 	ldw	r2,0(r2)
    43b0:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    43b4:	e0bff017 	ldw	r2,-64(fp)
    43b8:	103f7d1e 	bne	r2,zero,41b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70041b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    43bc:	e0bff103 	ldbu	r2,-60(fp)
    43c0:	10800058 	cmpnei	r2,r2,1
    43c4:	10000a1e 	bne	r2,zero,43f0 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    43c8:	e0bffd17 	ldw	r2,-12(fp)
    43cc:	10000015 	stw	zero,0(r2)
    43d0:	e0bff317 	ldw	r2,-52(fp)
    43d4:	e0bff615 	stw	r2,-40(fp)
    43d8:	e0bff617 	ldw	r2,-40(fp)
    43dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    43e0:	e0800217 	ldw	r2,8(fp)
    43e4:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    43e8:	e0bff18b 	ldhu	r2,-58(fp)
    43ec:	00008806 	br	4610 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    43f0:	d0a80217 	ldw	r2,-24568(gp)
    43f4:	d0e80217 	ldw	r3,-24568(gp)
    43f8:	19000c03 	ldbu	r4,48(r3)
    43fc:	e0fff203 	ldbu	r3,-56(fp)
    4400:	20c6b03a 	or	r3,r4,r3
    4404:	1809883a 	mov	r4,r3
    4408:	00ffe004 	movi	r3,-128
    440c:	20c6b03a 	or	r3,r4,r3
    4410:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    4414:	d0a80217 	ldw	r2,-24568(gp)
    4418:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    441c:	d0a80217 	ldw	r2,-24568(gp)
    4420:	e0ffff0b 	ldhu	r3,-4(fp)
    4424:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    4428:	e13ffc17 	ldw	r4,-16(fp)
    442c:	0004f500 	call	4f50 <OS_EventTaskWaitMulti>
    4430:	e0bff317 	ldw	r2,-52(fp)
    4434:	e0bff915 	stw	r2,-28(fp)
    4438:	e0bff917 	ldw	r2,-28(fp)
    443c:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    4440:	00056f40 	call	56f4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4444:	0005303a 	rdctl	r2,status
    4448:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    444c:	e0fff717 	ldw	r3,-36(fp)
    4450:	00bfff84 	movi	r2,-2
    4454:	1884703a 	and	r2,r3,r2
    4458:	1001703a 	wrctl	status,r2
  
  return context;
    445c:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
    4460:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    4464:	d0a80217 	ldw	r2,-24568(gp)
    4468:	10800c43 	ldbu	r2,49(r2)
    446c:	10803fcc 	andi	r2,r2,255
    4470:	10000226 	beq	r2,zero,447c <OSEventPendMulti+0x468>
    4474:	108000a0 	cmpeqi	r2,r2,2
    4478:	10001826 	beq	r2,zero,44dc <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    447c:	d0a80217 	ldw	r2,-24568(gp)
    4480:	10800717 	ldw	r2,28(r2)
    4484:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    4488:	e0bff017 	ldw	r2,-64(fp)
    448c:	10000b26 	beq	r2,zero,44bc <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    4490:	e0bffd17 	ldw	r2,-12(fp)
    4494:	10c00104 	addi	r3,r2,4
    4498:	e0fffd15 	stw	r3,-12(fp)
    449c:	e0fff017 	ldw	r3,-64(fp)
    44a0:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    44a4:	e0bffd17 	ldw	r2,-12(fp)
    44a8:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    44ac:	e0bff18b 	ldhu	r2,-58(fp)
    44b0:	10800044 	addi	r2,r2,1
    44b4:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    44b8:	00000d06 	br	44f0 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    44bc:	d0a80217 	ldw	r2,-24568(gp)
    44c0:	00c00044 	movi	r3,1
    44c4:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    44c8:	d0a80217 	ldw	r2,-24568(gp)
    44cc:	e17ffc17 	ldw	r5,-16(fp)
    44d0:	1009883a 	mov	r4,r2
    44d4:	00051580 	call	5158 <OS_EventTaskRemoveMulti>
             }
			 break;
    44d8:	00000506 	br	44f0 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    44dc:	d0a80217 	ldw	r2,-24568(gp)
    44e0:	e17ffc17 	ldw	r5,-16(fp)
    44e4:	1009883a 	mov	r4,r2
    44e8:	00051580 	call	5158 <OS_EventTaskRemoveMulti>
             break;
    44ec:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    44f0:	d0a80217 	ldw	r2,-24568(gp)
    44f4:	10800c43 	ldbu	r2,49(r2)
    44f8:	10803fcc 	andi	r2,r2,255
    44fc:	10000326 	beq	r2,zero,450c <OSEventPendMulti+0x4f8>
    4500:	108000a0 	cmpeqi	r2,r2,2
    4504:	1000231e 	bne	r2,zero,4594 <OSEventPendMulti+0x580>
    4508:	00002a06 	br	45b4 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    450c:	e0bff017 	ldw	r2,-64(fp)
    4510:	10800003 	ldbu	r2,0(r2)
    4514:	10803fcc 	andi	r2,r2,255
    4518:	0080100e 	bge	zero,r2,455c <OSEventPendMulti+0x548>
    451c:	10c000d0 	cmplti	r3,r2,3
    4520:	1800071e 	bne	r3,zero,4540 <OSEventPendMulti+0x52c>
    4524:	108000e0 	cmpeqi	r2,r2,3
    4528:	10000c26 	beq	r2,zero,455c <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    452c:	e0bffe17 	ldw	r2,-8(fp)
    4530:	10c00104 	addi	r3,r2,4
    4534:	e0fffe15 	stw	r3,-8(fp)
    4538:	10000015 	stw	zero,0(r2)
                      break;
    453c:	00001206 	br	4588 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    4540:	e0bffe17 	ldw	r2,-8(fp)
    4544:	10c00104 	addi	r3,r2,4
    4548:	e0fffe15 	stw	r3,-8(fp)
    454c:	d0e80217 	ldw	r3,-24568(gp)
    4550:	18c00917 	ldw	r3,36(r3)
    4554:	10c00015 	stw	r3,0(r2)
                      break;
    4558:	00000b06 	br	4588 <OSEventPendMulti+0x574>
    455c:	e0bff317 	ldw	r2,-52(fp)
    4560:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4564:	e0bff817 	ldw	r2,-32(fp)
    4568:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    456c:	e0bffd17 	ldw	r2,-12(fp)
    4570:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    4574:	e0800217 	ldw	r2,8(fp)
    4578:	00c00044 	movi	r3,1
    457c:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    4580:	e0bff18b 	ldhu	r2,-58(fp)
    4584:	00002206 	br	4610 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    4588:	e0800217 	ldw	r2,8(fp)
    458c:	10000005 	stb	zero,0(r2)
             break;
    4590:	00001006 	br	45d4 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    4594:	e0bffe17 	ldw	r2,-8(fp)
    4598:	10c00104 	addi	r3,r2,4
    459c:	e0fffe15 	stw	r3,-8(fp)
    45a0:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    45a4:	e0800217 	ldw	r2,8(fp)
    45a8:	00c00384 	movi	r3,14
    45ac:	10c00005 	stb	r3,0(r2)
             break;
    45b0:	00000806 	br	45d4 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    45b4:	e0bffe17 	ldw	r2,-8(fp)
    45b8:	10c00104 	addi	r3,r2,4
    45bc:	e0fffe15 	stw	r3,-8(fp)
    45c0:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    45c4:	e0800217 	ldw	r2,8(fp)
    45c8:	00c00284 	movi	r3,10
    45cc:	10c00005 	stb	r3,0(r2)
             break;
    45d0:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    45d4:	d0a80217 	ldw	r2,-24568(gp)
    45d8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    45dc:	d0a80217 	ldw	r2,-24568(gp)
    45e0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    45e4:	d0a80217 	ldw	r2,-24568(gp)
    45e8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    45ec:	d0a80217 	ldw	r2,-24568(gp)
    45f0:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    45f4:	d0a80217 	ldw	r2,-24568(gp)
    45f8:	10000915 	stw	zero,36(r2)
    45fc:	e0bff317 	ldw	r2,-52(fp)
    4600:	e0bffa15 	stw	r2,-24(fp)
    4604:	e0bffa17 	ldw	r2,-24(fp)
    4608:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    460c:	e0bff18b 	ldhu	r2,-58(fp)
}
    4610:	e037883a 	mov	sp,fp
    4614:	dfc00117 	ldw	ra,4(sp)
    4618:	df000017 	ldw	fp,0(sp)
    461c:	dec00204 	addi	sp,sp,8
    4620:	f800283a 	ret

00004624 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    4624:	defffe04 	addi	sp,sp,-8
    4628:	dfc00115 	stw	ra,4(sp)
    462c:	df000015 	stw	fp,0(sp)
    4630:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    4634:	000ec480 	call	ec48 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    4638:	00053a00 	call	53a0 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    463c:	00053e80 	call	53e8 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    4640:	00055540 	call	5554 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    4644:	00052c00 	call	52c0 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    4648:	00074040 	call	7404 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    464c:	0007d040 	call	7d04 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    4650:	0008e2c0 	call	8e2c <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    4654:	00054540 	call	5454 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    4658:	00054d40 	call	54d4 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    465c:	000ec680 	call	ec68 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    4660:	0005dd80 	call	5dd8 <OSDebugInit>
#endif
}
    4664:	0001883a 	nop
    4668:	e037883a 	mov	sp,fp
    466c:	dfc00117 	ldw	ra,4(sp)
    4670:	df000017 	ldw	fp,0(sp)
    4674:	dec00204 	addi	sp,sp,8
    4678:	f800283a 	ret

0000467c <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    467c:	deffff04 	addi	sp,sp,-4
    4680:	df000015 	stw	fp,0(sp)
    4684:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
    4688:	d0a7f343 	ldbu	r2,-24627(gp)
    468c:	10803fcc 	andi	r2,r2,255
    4690:	10800058 	cmpnei	r2,r2,1
    4694:	1000071e 	bne	r2,zero,46b4 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
    4698:	d0a80103 	ldbu	r2,-24572(gp)
    469c:	10803fcc 	andi	r2,r2,255
    46a0:	10803fe0 	cmpeqi	r2,r2,255
    46a4:	1000031e 	bne	r2,zero,46b4 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    46a8:	d0a80103 	ldbu	r2,-24572(gp)
    46ac:	10800044 	addi	r2,r2,1
    46b0:	d0a80105 	stb	r2,-24572(gp)
        }
    }
}
    46b4:	0001883a 	nop
    46b8:	e037883a 	mov	sp,fp
    46bc:	df000017 	ldw	fp,0(sp)
    46c0:	dec00104 	addi	sp,sp,4
    46c4:	f800283a 	ret

000046c8 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    46c8:	defffb04 	addi	sp,sp,-20
    46cc:	dfc00415 	stw	ra,16(sp)
    46d0:	df000315 	stw	fp,12(sp)
    46d4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    46d8:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    46dc:	d0a7f343 	ldbu	r2,-24627(gp)
    46e0:	10803fcc 	andi	r2,r2,255
    46e4:	10800058 	cmpnei	r2,r2,1
    46e8:	10002f1e 	bne	r2,zero,47a8 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    46ec:	0005303a 	rdctl	r2,status
    46f0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    46f4:	e0ffff17 	ldw	r3,-4(fp)
    46f8:	00bfff84 	movi	r2,-2
    46fc:	1884703a 	and	r2,r3,r2
    4700:	1001703a 	wrctl	status,r2
  
  return context;
    4704:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    4708:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    470c:	d0a80103 	ldbu	r2,-24572(gp)
    4710:	10803fcc 	andi	r2,r2,255
    4714:	10000326 	beq	r2,zero,4724 <OSIntExit+0x5c>
            OSIntNesting--;
    4718:	d0a80103 	ldbu	r2,-24572(gp)
    471c:	10bfffc4 	addi	r2,r2,-1
    4720:	d0a80105 	stb	r2,-24572(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    4724:	d0a80103 	ldbu	r2,-24572(gp)
    4728:	10803fcc 	andi	r2,r2,255
    472c:	10001a1e 	bne	r2,zero,4798 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    4730:	d0a7f303 	ldbu	r2,-24628(gp)
    4734:	10803fcc 	andi	r2,r2,255
    4738:	1000171e 	bne	r2,zero,4798 <OSIntExit+0xd0>
                OS_SchedNew();
    473c:	00057c40 	call	57c4 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    4740:	d0e7f503 	ldbu	r3,-24620(gp)
    4744:	d0a7f543 	ldbu	r2,-24619(gp)
    4748:	18c03fcc 	andi	r3,r3,255
    474c:	10803fcc 	andi	r2,r2,255
    4750:	18801126 	beq	r3,r2,4798 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    4754:	d0a7f503 	ldbu	r2,-24620(gp)
    4758:	10c03fcc 	andi	r3,r2,255
    475c:	008000b4 	movhi	r2,2
    4760:	10a9ba04 	addi	r2,r2,-22808
    4764:	18c7883a 	add	r3,r3,r3
    4768:	18c7883a 	add	r3,r3,r3
    476c:	10c5883a 	add	r2,r2,r3
    4770:	10800017 	ldw	r2,0(r2)
    4774:	d0a7fd15 	stw	r2,-24588(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    4778:	d0a7fd17 	ldw	r2,-24588(gp)
    477c:	10c00e17 	ldw	r3,56(r2)
    4780:	18c00044 	addi	r3,r3,1
    4784:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    4788:	d0a7f817 	ldw	r2,-24608(gp)
    478c:	10800044 	addi	r2,r2,1
    4790:	d0a7f815 	stw	r2,-24608(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    4794:	000e9740 	call	e974 <OSCtxSw>
    4798:	e0bffd17 	ldw	r2,-12(fp)
    479c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    47a0:	e0bffe17 	ldw	r2,-8(fp)
    47a4:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    47a8:	0001883a 	nop
    47ac:	e037883a 	mov	sp,fp
    47b0:	dfc00117 	ldw	ra,4(sp)
    47b4:	df000017 	ldw	fp,0(sp)
    47b8:	dec00204 	addi	sp,sp,8
    47bc:	f800283a 	ret

000047c0 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    47c0:	defffc04 	addi	sp,sp,-16
    47c4:	df000315 	stw	fp,12(sp)
    47c8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    47cc:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    47d0:	d0a7f343 	ldbu	r2,-24627(gp)
    47d4:	10803fcc 	andi	r2,r2,255
    47d8:	10800058 	cmpnei	r2,r2,1
    47dc:	1000161e 	bne	r2,zero,4838 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    47e0:	0005303a 	rdctl	r2,status
    47e4:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    47e8:	e0ffff17 	ldw	r3,-4(fp)
    47ec:	00bfff84 	movi	r2,-2
    47f0:	1884703a 	and	r2,r3,r2
    47f4:	1001703a 	wrctl	status,r2
  
  return context;
    47f8:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    47fc:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    4800:	d0a80103 	ldbu	r2,-24572(gp)
    4804:	10803fcc 	andi	r2,r2,255
    4808:	1000071e 	bne	r2,zero,4828 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    480c:	d0a7f303 	ldbu	r2,-24628(gp)
    4810:	10803fcc 	andi	r2,r2,255
    4814:	10803fe0 	cmpeqi	r2,r2,255
    4818:	1000031e 	bne	r2,zero,4828 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    481c:	d0a7f303 	ldbu	r2,-24628(gp)
    4820:	10800044 	addi	r2,r2,1
    4824:	d0a7f305 	stb	r2,-24628(gp)
    4828:	e0bffd17 	ldw	r2,-12(fp)
    482c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4830:	e0bffe17 	ldw	r2,-8(fp)
    4834:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    4838:	0001883a 	nop
    483c:	e037883a 	mov	sp,fp
    4840:	df000017 	ldw	fp,0(sp)
    4844:	dec00104 	addi	sp,sp,4
    4848:	f800283a 	ret

0000484c <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    484c:	defff804 	addi	sp,sp,-32
    4850:	dfc00715 	stw	ra,28(sp)
    4854:	df000615 	stw	fp,24(sp)
    4858:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    485c:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    4860:	d0a7f343 	ldbu	r2,-24627(gp)
    4864:	10803fcc 	andi	r2,r2,255
    4868:	10800058 	cmpnei	r2,r2,1
    486c:	1000281e 	bne	r2,zero,4910 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4870:	0005303a 	rdctl	r2,status
    4874:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4878:	e0ffff17 	ldw	r3,-4(fp)
    487c:	00bfff84 	movi	r2,-2
    4880:	1884703a 	and	r2,r3,r2
    4884:	1001703a 	wrctl	status,r2
  
  return context;
    4888:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    488c:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    4890:	d0a7f303 	ldbu	r2,-24628(gp)
    4894:	10803fcc 	andi	r2,r2,255
    4898:	10001926 	beq	r2,zero,4900 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    489c:	d0a7f303 	ldbu	r2,-24628(gp)
    48a0:	10bfffc4 	addi	r2,r2,-1
    48a4:	d0a7f305 	stb	r2,-24628(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    48a8:	d0a7f303 	ldbu	r2,-24628(gp)
    48ac:	10803fcc 	andi	r2,r2,255
    48b0:	10000e1e 	bne	r2,zero,48ec <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    48b4:	d0a80103 	ldbu	r2,-24572(gp)
    48b8:	10803fcc 	andi	r2,r2,255
    48bc:	1000061e 	bne	r2,zero,48d8 <OSSchedUnlock+0x8c>
    48c0:	e0bffa17 	ldw	r2,-24(fp)
    48c4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    48c8:	e0bffb17 	ldw	r2,-20(fp)
    48cc:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    48d0:	00056f40 	call	56f4 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    48d4:	00000e06 	br	4910 <OSSchedUnlock+0xc4>
    48d8:	e0bffa17 	ldw	r2,-24(fp)
    48dc:	e0bffc15 	stw	r2,-16(fp)
    48e0:	e0bffc17 	ldw	r2,-16(fp)
    48e4:	1001703a 	wrctl	status,r2
    48e8:	00000906 	br	4910 <OSSchedUnlock+0xc4>
    48ec:	e0bffa17 	ldw	r2,-24(fp)
    48f0:	e0bffd15 	stw	r2,-12(fp)
    48f4:	e0bffd17 	ldw	r2,-12(fp)
    48f8:	1001703a 	wrctl	status,r2
    48fc:	00000406 	br	4910 <OSSchedUnlock+0xc4>
    4900:	e0bffa17 	ldw	r2,-24(fp)
    4904:	e0bffe15 	stw	r2,-8(fp)
    4908:	e0bffe17 	ldw	r2,-8(fp)
    490c:	1001703a 	wrctl	status,r2
    4910:	0001883a 	nop
    4914:	e037883a 	mov	sp,fp
    4918:	dfc00117 	ldw	ra,4(sp)
    491c:	df000017 	ldw	fp,0(sp)
    4920:	dec00204 	addi	sp,sp,8
    4924:	f800283a 	ret

00004928 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    4928:	defffe04 	addi	sp,sp,-8
    492c:	dfc00115 	stw	ra,4(sp)
    4930:	df000015 	stw	fp,0(sp)
    4934:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    4938:	d0a7f343 	ldbu	r2,-24627(gp)
    493c:	10803fcc 	andi	r2,r2,255
    4940:	10000f1e 	bne	r2,zero,4980 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    4944:	00057c40 	call	57c4 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    4948:	d0a7f503 	ldbu	r2,-24620(gp)
    494c:	d0a7f545 	stb	r2,-24619(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    4950:	d0a7f503 	ldbu	r2,-24620(gp)
    4954:	10c03fcc 	andi	r3,r2,255
    4958:	008000b4 	movhi	r2,2
    495c:	10a9ba04 	addi	r2,r2,-22808
    4960:	18c7883a 	add	r3,r3,r3
    4964:	18c7883a 	add	r3,r3,r3
    4968:	10c5883a 	add	r2,r2,r3
    496c:	10800017 	ldw	r2,0(r2)
    4970:	d0a7fd15 	stw	r2,-24588(gp)
        OSTCBCur      = OSTCBHighRdy;
    4974:	d0a7fd17 	ldw	r2,-24588(gp)
    4978:	d0a80215 	stw	r2,-24568(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    497c:	000ea000 	call	ea00 <OSStartHighRdy>
    }
}
    4980:	0001883a 	nop
    4984:	e037883a 	mov	sp,fp
    4988:	dfc00117 	ldw	ra,4(sp)
    498c:	df000017 	ldw	fp,0(sp)
    4990:	dec00204 	addi	sp,sp,8
    4994:	f800283a 	ret

00004998 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    4998:	defff904 	addi	sp,sp,-28
    499c:	dfc00615 	stw	ra,24(sp)
    49a0:	df000515 	stw	fp,20(sp)
    49a4:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    49a8:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    49ac:	01000084 	movi	r4,2
    49b0:	000b0a00 	call	b0a0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    49b4:	0005303a 	rdctl	r2,status
    49b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    49bc:	e0fffc17 	ldw	r3,-16(fp)
    49c0:	00bfff84 	movi	r2,-2
    49c4:	1884703a 	and	r2,r3,r2
    49c8:	1001703a 	wrctl	status,r2
  
  return context;
    49cc:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    49d0:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    49d4:	d027f415 	stw	zero,-24624(gp)
    49d8:	e0bffb17 	ldw	r2,-20(fp)
    49dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    49e0:	e0bffd17 	ldw	r2,-12(fp)
    49e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    49e8:	0009883a 	mov	r4,zero
    49ec:	000b0a00 	call	b0a0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    49f0:	0005303a 	rdctl	r2,status
    49f4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    49f8:	e0fffe17 	ldw	r3,-8(fp)
    49fc:	00bfff84 	movi	r2,-2
    4a00:	1884703a 	and	r2,r3,r2
    4a04:	1001703a 	wrctl	status,r2
  
  return context;
    4a08:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    4a0c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    4a10:	d0a7f417 	ldw	r2,-24624(gp)
    4a14:	d0a7f915 	stw	r2,-24604(gp)
    OSStatRdy    = OS_TRUE;
    4a18:	00800044 	movi	r2,1
    4a1c:	d0a80505 	stb	r2,-24556(gp)
    4a20:	e0bffb17 	ldw	r2,-20(fp)
    4a24:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4a28:	e0bfff17 	ldw	r2,-4(fp)
    4a2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    4a30:	0001883a 	nop
    4a34:	e037883a 	mov	sp,fp
    4a38:	dfc00117 	ldw	ra,4(sp)
    4a3c:	df000017 	ldw	fp,0(sp)
    4a40:	dec00204 	addi	sp,sp,8
    4a44:	f800283a 	ret

00004a48 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    4a48:	defff704 	addi	sp,sp,-36
    4a4c:	dfc00815 	stw	ra,32(sp)
    4a50:	df000715 	stw	fp,28(sp)
    4a54:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    4a58:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    4a5c:	000ec280 	call	ec28 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4a60:	0005303a 	rdctl	r2,status
    4a64:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4a68:	e0fffd17 	ldw	r3,-12(fp)
    4a6c:	00bfff84 	movi	r2,-2
    4a70:	1884703a 	and	r2,r3,r2
    4a74:	1001703a 	wrctl	status,r2
  
  return context;
    4a78:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    4a7c:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    4a80:	d0a80317 	ldw	r2,-24564(gp)
    4a84:	10800044 	addi	r2,r2,1
    4a88:	d0a80315 	stw	r2,-24564(gp)
    4a8c:	e0bffb17 	ldw	r2,-20(fp)
    4a90:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4a94:	e0bfff17 	ldw	r2,-4(fp)
    4a98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    4a9c:	d0a7f343 	ldbu	r2,-24627(gp)
    4aa0:	10803fcc 	andi	r2,r2,255
    4aa4:	10800058 	cmpnei	r2,r2,1
    4aa8:	10006a1e 	bne	r2,zero,4c54 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    4aac:	d0a7f703 	ldbu	r2,-24612(gp)
    4ab0:	10803fcc 	andi	r2,r2,255
    4ab4:	10c00060 	cmpeqi	r3,r2,1
    4ab8:	1800061e 	bne	r3,zero,4ad4 <OSTimeTick+0x8c>
    4abc:	10c000a0 	cmpeqi	r3,r2,2
    4ac0:	1800061e 	bne	r3,zero,4adc <OSTimeTick+0x94>
    4ac4:	10000a1e 	bne	r2,zero,4af0 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    4ac8:	00800044 	movi	r2,1
    4acc:	e0bffa05 	stb	r2,-24(fp)
                 break;
    4ad0:	00000b06 	br	4b00 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    4ad4:	e03ffa05 	stb	zero,-24(fp)
                 break;
    4ad8:	00000906 	br	4b00 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    4adc:	00800044 	movi	r2,1
    4ae0:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    4ae4:	00800044 	movi	r2,1
    4ae8:	d0a7f705 	stb	r2,-24612(gp)
                 break;
    4aec:	00000406 	br	4b00 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    4af0:	00800044 	movi	r2,1
    4af4:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    4af8:	d027f705 	stb	zero,-24612(gp)
                 break;
    4afc:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    4b00:	e0bffa03 	ldbu	r2,-24(fp)
    4b04:	10005226 	beq	r2,zero,4c50 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    4b08:	d0a7f617 	ldw	r2,-24616(gp)
    4b0c:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    4b10:	00004906 	br	4c38 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4b14:	0005303a 	rdctl	r2,status
    4b18:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4b1c:	e0fffc17 	ldw	r3,-16(fp)
    4b20:	00bfff84 	movi	r2,-2
    4b24:	1884703a 	and	r2,r3,r2
    4b28:	1001703a 	wrctl	status,r2
  
  return context;
    4b2c:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
    4b30:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    4b34:	e0bff917 	ldw	r2,-28(fp)
    4b38:	10800b8b 	ldhu	r2,46(r2)
    4b3c:	10bfffcc 	andi	r2,r2,65535
    4b40:	10003626 	beq	r2,zero,4c1c <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    4b44:	e0bff917 	ldw	r2,-28(fp)
    4b48:	10800b8b 	ldhu	r2,46(r2)
    4b4c:	10bfffc4 	addi	r2,r2,-1
    4b50:	1007883a 	mov	r3,r2
    4b54:	e0bff917 	ldw	r2,-28(fp)
    4b58:	10c00b8d 	sth	r3,46(r2)
    4b5c:	e0bff917 	ldw	r2,-28(fp)
    4b60:	10800b8b 	ldhu	r2,46(r2)
    4b64:	10bfffcc 	andi	r2,r2,65535
    4b68:	10002c1e 	bne	r2,zero,4c1c <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    4b6c:	e0bff917 	ldw	r2,-28(fp)
    4b70:	10800c03 	ldbu	r2,48(r2)
    4b74:	10803fcc 	andi	r2,r2,255
    4b78:	10800dcc 	andi	r2,r2,55
    4b7c:	10000b26 	beq	r2,zero,4bac <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    4b80:	e0bff917 	ldw	r2,-28(fp)
    4b84:	10c00c03 	ldbu	r3,48(r2)
    4b88:	00bff204 	movi	r2,-56
    4b8c:	1884703a 	and	r2,r3,r2
    4b90:	1007883a 	mov	r3,r2
    4b94:	e0bff917 	ldw	r2,-28(fp)
    4b98:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    4b9c:	e0bff917 	ldw	r2,-28(fp)
    4ba0:	00c00044 	movi	r3,1
    4ba4:	10c00c45 	stb	r3,49(r2)
    4ba8:	00000206 	br	4bb4 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    4bac:	e0bff917 	ldw	r2,-28(fp)
    4bb0:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    4bb4:	e0bff917 	ldw	r2,-28(fp)
    4bb8:	10800c03 	ldbu	r2,48(r2)
    4bbc:	10803fcc 	andi	r2,r2,255
    4bc0:	1080020c 	andi	r2,r2,8
    4bc4:	1000151e 	bne	r2,zero,4c1c <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    4bc8:	e0bff917 	ldw	r2,-28(fp)
    4bcc:	10c00d83 	ldbu	r3,54(r2)
    4bd0:	d0a7ff03 	ldbu	r2,-24580(gp)
    4bd4:	1884b03a 	or	r2,r3,r2
    4bd8:	d0a7ff05 	stb	r2,-24580(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    4bdc:	e0bff917 	ldw	r2,-28(fp)
    4be0:	10800d03 	ldbu	r2,52(r2)
    4be4:	10c03fcc 	andi	r3,r2,255
    4be8:	e0bff917 	ldw	r2,-28(fp)
    4bec:	10800d03 	ldbu	r2,52(r2)
    4bf0:	11003fcc 	andi	r4,r2,255
    4bf4:	d0a7ff44 	addi	r2,gp,-24579
    4bf8:	2085883a 	add	r2,r4,r2
    4bfc:	11000003 	ldbu	r4,0(r2)
    4c00:	e0bff917 	ldw	r2,-28(fp)
    4c04:	10800d43 	ldbu	r2,53(r2)
    4c08:	2084b03a 	or	r2,r4,r2
    4c0c:	1009883a 	mov	r4,r2
    4c10:	d0a7ff44 	addi	r2,gp,-24579
    4c14:	1885883a 	add	r2,r3,r2
    4c18:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    4c1c:	e0bff917 	ldw	r2,-28(fp)
    4c20:	10800517 	ldw	r2,20(r2)
    4c24:	e0bff915 	stw	r2,-28(fp)
    4c28:	e0bffb17 	ldw	r2,-20(fp)
    4c2c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4c30:	e0bffe17 	ldw	r2,-8(fp)
    4c34:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    4c38:	e0bff917 	ldw	r2,-28(fp)
    4c3c:	10800c83 	ldbu	r2,50(r2)
    4c40:	10803fcc 	andi	r2,r2,255
    4c44:	10800518 	cmpnei	r2,r2,20
    4c48:	103fb21e 	bne	r2,zero,4b14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004b14>
    4c4c:	00000106 	br	4c54 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
    4c50:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    4c54:	e037883a 	mov	sp,fp
    4c58:	dfc00117 	ldw	ra,4(sp)
    4c5c:	df000017 	ldw	fp,0(sp)
    4c60:	dec00204 	addi	sp,sp,8
    4c64:	f800283a 	ret

00004c68 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    4c68:	deffff04 	addi	sp,sp,-4
    4c6c:	df000015 	stw	fp,0(sp)
    4c70:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    4c74:	00804784 	movi	r2,286
}
    4c78:	e037883a 	mov	sp,fp
    4c7c:	df000017 	ldw	fp,0(sp)
    4c80:	dec00104 	addi	sp,sp,4
    4c84:	f800283a 	ret

00004c88 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    4c88:	deffff04 	addi	sp,sp,-4
    4c8c:	df000015 	stw	fp,0(sp)
    4c90:	d839883a 	mov	fp,sp
}
    4c94:	0001883a 	nop
    4c98:	e037883a 	mov	sp,fp
    4c9c:	df000017 	ldw	fp,0(sp)
    4ca0:	dec00104 	addi	sp,sp,4
    4ca4:	f800283a 	ret

00004ca8 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    4ca8:	defff804 	addi	sp,sp,-32
    4cac:	dfc00715 	stw	ra,28(sp)
    4cb0:	df000615 	stw	fp,24(sp)
    4cb4:	df000604 	addi	fp,sp,24
    4cb8:	e13ffc15 	stw	r4,-16(fp)
    4cbc:	e17ffd15 	stw	r5,-12(fp)
    4cc0:	3007883a 	mov	r3,r6
    4cc4:	3805883a 	mov	r2,r7
    4cc8:	e0fffe05 	stb	r3,-8(fp)
    4ccc:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    4cd0:	e0bffc17 	ldw	r2,-16(fp)
    4cd4:	10800283 	ldbu	r2,10(r2)
    4cd8:	10c03fcc 	andi	r3,r2,255
    4cdc:	00800074 	movhi	r2,1
    4ce0:	10bcef04 	addi	r2,r2,-3140
    4ce4:	10c5883a 	add	r2,r2,r3
    4ce8:	10800003 	ldbu	r2,0(r2)
    4cec:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    4cf0:	e0bffa03 	ldbu	r2,-24(fp)
    4cf4:	e0fffc17 	ldw	r3,-16(fp)
    4cf8:	1885883a 	add	r2,r3,r2
    4cfc:	108002c4 	addi	r2,r2,11
    4d00:	10800003 	ldbu	r2,0(r2)
    4d04:	10c03fcc 	andi	r3,r2,255
    4d08:	00800074 	movhi	r2,1
    4d0c:	10bcef04 	addi	r2,r2,-3140
    4d10:	10c5883a 	add	r2,r2,r3
    4d14:	10800003 	ldbu	r2,0(r2)
    4d18:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    4d1c:	e0bffa03 	ldbu	r2,-24(fp)
    4d20:	100490fa 	slli	r2,r2,3
    4d24:	1007883a 	mov	r3,r2
    4d28:	e0bffa43 	ldbu	r2,-23(fp)
    4d2c:	1885883a 	add	r2,r3,r2
    4d30:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    4d34:	e0fffa83 	ldbu	r3,-22(fp)
    4d38:	008000b4 	movhi	r2,2
    4d3c:	10a9ba04 	addi	r2,r2,-22808
    4d40:	18c7883a 	add	r3,r3,r3
    4d44:	18c7883a 	add	r3,r3,r3
    4d48:	10c5883a 	add	r2,r2,r3
    4d4c:	10800017 	ldw	r2,0(r2)
    4d50:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    4d54:	e0bffb17 	ldw	r2,-20(fp)
    4d58:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    4d5c:	e0bffb17 	ldw	r2,-20(fp)
    4d60:	e0fffd17 	ldw	r3,-12(fp)
    4d64:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    4d68:	e0bffb17 	ldw	r2,-20(fp)
    4d6c:	10800c03 	ldbu	r2,48(r2)
    4d70:	1007883a 	mov	r3,r2
    4d74:	e0bffe03 	ldbu	r2,-8(fp)
    4d78:	0084303a 	nor	r2,zero,r2
    4d7c:	1884703a 	and	r2,r3,r2
    4d80:	1007883a 	mov	r3,r2
    4d84:	e0bffb17 	ldw	r2,-20(fp)
    4d88:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    4d8c:	e0bffb17 	ldw	r2,-20(fp)
    4d90:	e0ffff03 	ldbu	r3,-4(fp)
    4d94:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    4d98:	e0bffb17 	ldw	r2,-20(fp)
    4d9c:	10800c03 	ldbu	r2,48(r2)
    4da0:	10803fcc 	andi	r2,r2,255
    4da4:	1080020c 	andi	r2,r2,8
    4da8:	1000111e 	bne	r2,zero,4df0 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    4dac:	e0bffb17 	ldw	r2,-20(fp)
    4db0:	10c00d83 	ldbu	r3,54(r2)
    4db4:	d0a7ff03 	ldbu	r2,-24580(gp)
    4db8:	1884b03a 	or	r2,r3,r2
    4dbc:	d0a7ff05 	stb	r2,-24580(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    4dc0:	e0fffa03 	ldbu	r3,-24(fp)
    4dc4:	e13ffa03 	ldbu	r4,-24(fp)
    4dc8:	d0a7ff44 	addi	r2,gp,-24579
    4dcc:	2085883a 	add	r2,r4,r2
    4dd0:	11000003 	ldbu	r4,0(r2)
    4dd4:	e0bffb17 	ldw	r2,-20(fp)
    4dd8:	10800d43 	ldbu	r2,53(r2)
    4ddc:	2084b03a 	or	r2,r4,r2
    4de0:	1009883a 	mov	r4,r2
    4de4:	d0a7ff44 	addi	r2,gp,-24579
    4de8:	1885883a 	add	r2,r3,r2
    4dec:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    4df0:	e17ffc17 	ldw	r5,-16(fp)
    4df4:	e13ffb17 	ldw	r4,-20(fp)
    4df8:	00050a00 	call	50a0 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    4dfc:	e0bffb17 	ldw	r2,-20(fp)
    4e00:	10800817 	ldw	r2,32(r2)
    4e04:	10000826 	beq	r2,zero,4e28 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    4e08:	e0bffb17 	ldw	r2,-20(fp)
    4e0c:	10800817 	ldw	r2,32(r2)
    4e10:	100b883a 	mov	r5,r2
    4e14:	e13ffb17 	ldw	r4,-20(fp)
    4e18:	00051580 	call	5158 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    4e1c:	e0bffb17 	ldw	r2,-20(fp)
    4e20:	e0fffc17 	ldw	r3,-16(fp)
    4e24:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    4e28:	e0bffa83 	ldbu	r2,-22(fp)
}
    4e2c:	e037883a 	mov	sp,fp
    4e30:	dfc00117 	ldw	ra,4(sp)
    4e34:	df000017 	ldw	fp,0(sp)
    4e38:	dec00204 	addi	sp,sp,8
    4e3c:	f800283a 	ret

00004e40 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    4e40:	defffd04 	addi	sp,sp,-12
    4e44:	df000215 	stw	fp,8(sp)
    4e48:	df000204 	addi	fp,sp,8
    4e4c:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    4e50:	d0a80217 	ldw	r2,-24568(gp)
    4e54:	e0ffff17 	ldw	r3,-4(fp)
    4e58:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    4e5c:	d0a80217 	ldw	r2,-24568(gp)
    4e60:	10800d03 	ldbu	r2,52(r2)
    4e64:	10803fcc 	andi	r2,r2,255
    4e68:	d0e80217 	ldw	r3,-24568(gp)
    4e6c:	18c00d03 	ldbu	r3,52(r3)
    4e70:	18c03fcc 	andi	r3,r3,255
    4e74:	e13fff17 	ldw	r4,-4(fp)
    4e78:	20c7883a 	add	r3,r4,r3
    4e7c:	18c002c4 	addi	r3,r3,11
    4e80:	19000003 	ldbu	r4,0(r3)
    4e84:	d0e80217 	ldw	r3,-24568(gp)
    4e88:	18c00d43 	ldbu	r3,53(r3)
    4e8c:	20c6b03a 	or	r3,r4,r3
    4e90:	1809883a 	mov	r4,r3
    4e94:	e0ffff17 	ldw	r3,-4(fp)
    4e98:	1885883a 	add	r2,r3,r2
    4e9c:	108002c4 	addi	r2,r2,11
    4ea0:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    4ea4:	e0bfff17 	ldw	r2,-4(fp)
    4ea8:	10c00283 	ldbu	r3,10(r2)
    4eac:	d0a80217 	ldw	r2,-24568(gp)
    4eb0:	10800d83 	ldbu	r2,54(r2)
    4eb4:	1884b03a 	or	r2,r3,r2
    4eb8:	1007883a 	mov	r3,r2
    4ebc:	e0bfff17 	ldw	r2,-4(fp)
    4ec0:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    4ec4:	d0a80217 	ldw	r2,-24568(gp)
    4ec8:	10800d03 	ldbu	r2,52(r2)
    4ecc:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    4ed0:	e0fffe03 	ldbu	r3,-8(fp)
    4ed4:	e13ffe03 	ldbu	r4,-8(fp)
    4ed8:	d0a7ff44 	addi	r2,gp,-24579
    4edc:	2085883a 	add	r2,r4,r2
    4ee0:	10800003 	ldbu	r2,0(r2)
    4ee4:	1009883a 	mov	r4,r2
    4ee8:	d0a80217 	ldw	r2,-24568(gp)
    4eec:	10800d43 	ldbu	r2,53(r2)
    4ef0:	0084303a 	nor	r2,zero,r2
    4ef4:	2084703a 	and	r2,r4,r2
    4ef8:	1009883a 	mov	r4,r2
    4efc:	d0a7ff44 	addi	r2,gp,-24579
    4f00:	1885883a 	add	r2,r3,r2
    4f04:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    4f08:	e0fffe03 	ldbu	r3,-8(fp)
    4f0c:	d0a7ff44 	addi	r2,gp,-24579
    4f10:	1885883a 	add	r2,r3,r2
    4f14:	10800003 	ldbu	r2,0(r2)
    4f18:	10803fcc 	andi	r2,r2,255
    4f1c:	1000071e 	bne	r2,zero,4f3c <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    4f20:	d0a80217 	ldw	r2,-24568(gp)
    4f24:	10800d83 	ldbu	r2,54(r2)
    4f28:	0084303a 	nor	r2,zero,r2
    4f2c:	1007883a 	mov	r3,r2
    4f30:	d0a7ff03 	ldbu	r2,-24580(gp)
    4f34:	1884703a 	and	r2,r3,r2
    4f38:	d0a7ff05 	stb	r2,-24580(gp)
    }
}
    4f3c:	0001883a 	nop
    4f40:	e037883a 	mov	sp,fp
    4f44:	df000017 	ldw	fp,0(sp)
    4f48:	dec00104 	addi	sp,sp,4
    4f4c:	f800283a 	ret

00004f50 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    4f50:	defffb04 	addi	sp,sp,-20
    4f54:	df000415 	stw	fp,16(sp)
    4f58:	df000404 	addi	fp,sp,16
    4f5c:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    4f60:	d0a80217 	ldw	r2,-24568(gp)
    4f64:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    4f68:	d0a80217 	ldw	r2,-24568(gp)
    4f6c:	e0ffff17 	ldw	r3,-4(fp)
    4f70:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    4f74:	e0bfff17 	ldw	r2,-4(fp)
    4f78:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    4f7c:	e0bffc17 	ldw	r2,-16(fp)
    4f80:	10800017 	ldw	r2,0(r2)
    4f84:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    4f88:	00002006 	br	500c <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    4f8c:	d0a80217 	ldw	r2,-24568(gp)
    4f90:	10800d03 	ldbu	r2,52(r2)
    4f94:	10803fcc 	andi	r2,r2,255
    4f98:	d0e80217 	ldw	r3,-24568(gp)
    4f9c:	18c00d03 	ldbu	r3,52(r3)
    4fa0:	18c03fcc 	andi	r3,r3,255
    4fa4:	e13ffd17 	ldw	r4,-12(fp)
    4fa8:	20c7883a 	add	r3,r4,r3
    4fac:	18c002c4 	addi	r3,r3,11
    4fb0:	19000003 	ldbu	r4,0(r3)
    4fb4:	d0e80217 	ldw	r3,-24568(gp)
    4fb8:	18c00d43 	ldbu	r3,53(r3)
    4fbc:	20c6b03a 	or	r3,r4,r3
    4fc0:	1809883a 	mov	r4,r3
    4fc4:	e0fffd17 	ldw	r3,-12(fp)
    4fc8:	1885883a 	add	r2,r3,r2
    4fcc:	108002c4 	addi	r2,r2,11
    4fd0:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    4fd4:	e0bffd17 	ldw	r2,-12(fp)
    4fd8:	10c00283 	ldbu	r3,10(r2)
    4fdc:	d0a80217 	ldw	r2,-24568(gp)
    4fe0:	10800d83 	ldbu	r2,54(r2)
    4fe4:	1884b03a 	or	r2,r3,r2
    4fe8:	1007883a 	mov	r3,r2
    4fec:	e0bffd17 	ldw	r2,-12(fp)
    4ff0:	10c00285 	stb	r3,10(r2)
        pevents++;
    4ff4:	e0bffc17 	ldw	r2,-16(fp)
    4ff8:	10800104 	addi	r2,r2,4
    4ffc:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    5000:	e0bffc17 	ldw	r2,-16(fp)
    5004:	10800017 	ldw	r2,0(r2)
    5008:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    500c:	e0bffd17 	ldw	r2,-12(fp)
    5010:	103fde1e 	bne	r2,zero,4f8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004f8c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    5014:	d0a80217 	ldw	r2,-24568(gp)
    5018:	10800d03 	ldbu	r2,52(r2)
    501c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    5020:	e0fffe03 	ldbu	r3,-8(fp)
    5024:	e13ffe03 	ldbu	r4,-8(fp)
    5028:	d0a7ff44 	addi	r2,gp,-24579
    502c:	2085883a 	add	r2,r4,r2
    5030:	10800003 	ldbu	r2,0(r2)
    5034:	1009883a 	mov	r4,r2
    5038:	d0a80217 	ldw	r2,-24568(gp)
    503c:	10800d43 	ldbu	r2,53(r2)
    5040:	0084303a 	nor	r2,zero,r2
    5044:	2084703a 	and	r2,r4,r2
    5048:	1009883a 	mov	r4,r2
    504c:	d0a7ff44 	addi	r2,gp,-24579
    5050:	1885883a 	add	r2,r3,r2
    5054:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    5058:	e0fffe03 	ldbu	r3,-8(fp)
    505c:	d0a7ff44 	addi	r2,gp,-24579
    5060:	1885883a 	add	r2,r3,r2
    5064:	10800003 	ldbu	r2,0(r2)
    5068:	10803fcc 	andi	r2,r2,255
    506c:	1000071e 	bne	r2,zero,508c <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    5070:	d0a80217 	ldw	r2,-24568(gp)
    5074:	10800d83 	ldbu	r2,54(r2)
    5078:	0084303a 	nor	r2,zero,r2
    507c:	1007883a 	mov	r3,r2
    5080:	d0a7ff03 	ldbu	r2,-24580(gp)
    5084:	1884703a 	and	r2,r3,r2
    5088:	d0a7ff05 	stb	r2,-24580(gp)
    }
}
    508c:	0001883a 	nop
    5090:	e037883a 	mov	sp,fp
    5094:	df000017 	ldw	fp,0(sp)
    5098:	dec00104 	addi	sp,sp,4
    509c:	f800283a 	ret

000050a0 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    50a0:	defffc04 	addi	sp,sp,-16
    50a4:	df000315 	stw	fp,12(sp)
    50a8:	df000304 	addi	fp,sp,12
    50ac:	e13ffe15 	stw	r4,-8(fp)
    50b0:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    50b4:	e0bffe17 	ldw	r2,-8(fp)
    50b8:	10800d03 	ldbu	r2,52(r2)
    50bc:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    50c0:	e0bffd03 	ldbu	r2,-12(fp)
    50c4:	e0fffd03 	ldbu	r3,-12(fp)
    50c8:	e13fff17 	ldw	r4,-4(fp)
    50cc:	20c7883a 	add	r3,r4,r3
    50d0:	18c002c4 	addi	r3,r3,11
    50d4:	18c00003 	ldbu	r3,0(r3)
    50d8:	1809883a 	mov	r4,r3
    50dc:	e0fffe17 	ldw	r3,-8(fp)
    50e0:	18c00d43 	ldbu	r3,53(r3)
    50e4:	00c6303a 	nor	r3,zero,r3
    50e8:	20c6703a 	and	r3,r4,r3
    50ec:	1809883a 	mov	r4,r3
    50f0:	e0ffff17 	ldw	r3,-4(fp)
    50f4:	1885883a 	add	r2,r3,r2
    50f8:	108002c4 	addi	r2,r2,11
    50fc:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
    5100:	e0bffd03 	ldbu	r2,-12(fp)
    5104:	e0ffff17 	ldw	r3,-4(fp)
    5108:	1885883a 	add	r2,r3,r2
    510c:	108002c4 	addi	r2,r2,11
    5110:	10800003 	ldbu	r2,0(r2)
    5114:	10803fcc 	andi	r2,r2,255
    5118:	10000a1e 	bne	r2,zero,5144 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    511c:	e0bfff17 	ldw	r2,-4(fp)
    5120:	10800283 	ldbu	r2,10(r2)
    5124:	1007883a 	mov	r3,r2
    5128:	e0bffe17 	ldw	r2,-8(fp)
    512c:	10800d83 	ldbu	r2,54(r2)
    5130:	0084303a 	nor	r2,zero,r2
    5134:	1884703a 	and	r2,r3,r2
    5138:	1007883a 	mov	r3,r2
    513c:	e0bfff17 	ldw	r2,-4(fp)
    5140:	10c00285 	stb	r3,10(r2)
    }
}
    5144:	0001883a 	nop
    5148:	e037883a 	mov	sp,fp
    514c:	df000017 	ldw	fp,0(sp)
    5150:	dec00104 	addi	sp,sp,4
    5154:	f800283a 	ret

00005158 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    5158:	defffa04 	addi	sp,sp,-24
    515c:	df000515 	stw	fp,20(sp)
    5160:	df000504 	addi	fp,sp,20
    5164:	e13ffe15 	stw	r4,-8(fp)
    5168:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    516c:	e0bffe17 	ldw	r2,-8(fp)
    5170:	10800d03 	ldbu	r2,52(r2)
    5174:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    5178:	e0bffe17 	ldw	r2,-8(fp)
    517c:	10800d83 	ldbu	r2,54(r2)
    5180:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    5184:	e0bffe17 	ldw	r2,-8(fp)
    5188:	10800d43 	ldbu	r2,53(r2)
    518c:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    5190:	e0bfff17 	ldw	r2,-4(fp)
    5194:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    5198:	e0bffb17 	ldw	r2,-20(fp)
    519c:	10800017 	ldw	r2,0(r2)
    51a0:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    51a4:	00002506 	br	523c <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    51a8:	e0bffd03 	ldbu	r2,-12(fp)
    51ac:	e0fffd03 	ldbu	r3,-12(fp)
    51b0:	e13ffc17 	ldw	r4,-16(fp)
    51b4:	20c7883a 	add	r3,r4,r3
    51b8:	18c002c4 	addi	r3,r3,11
    51bc:	18c00003 	ldbu	r3,0(r3)
    51c0:	1809883a 	mov	r4,r3
    51c4:	e0fffd83 	ldbu	r3,-10(fp)
    51c8:	00c6303a 	nor	r3,zero,r3
    51cc:	20c6703a 	and	r3,r4,r3
    51d0:	1809883a 	mov	r4,r3
    51d4:	e0fffc17 	ldw	r3,-16(fp)
    51d8:	1885883a 	add	r2,r3,r2
    51dc:	108002c4 	addi	r2,r2,11
    51e0:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
    51e4:	e0bffd03 	ldbu	r2,-12(fp)
    51e8:	e0fffc17 	ldw	r3,-16(fp)
    51ec:	1885883a 	add	r2,r3,r2
    51f0:	108002c4 	addi	r2,r2,11
    51f4:	10800003 	ldbu	r2,0(r2)
    51f8:	10803fcc 	andi	r2,r2,255
    51fc:	1000091e 	bne	r2,zero,5224 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    5200:	e0bffc17 	ldw	r2,-16(fp)
    5204:	10800283 	ldbu	r2,10(r2)
    5208:	1007883a 	mov	r3,r2
    520c:	e0bffd43 	ldbu	r2,-11(fp)
    5210:	0084303a 	nor	r2,zero,r2
    5214:	1884703a 	and	r2,r3,r2
    5218:	1007883a 	mov	r3,r2
    521c:	e0bffc17 	ldw	r2,-16(fp)
    5220:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    5224:	e0bffb17 	ldw	r2,-20(fp)
    5228:	10800104 	addi	r2,r2,4
    522c:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    5230:	e0bffb17 	ldw	r2,-20(fp)
    5234:	10800017 	ldw	r2,0(r2)
    5238:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    523c:	e0bffc17 	ldw	r2,-16(fp)
    5240:	103fd91e 	bne	r2,zero,51a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70051a8>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    5244:	0001883a 	nop
    5248:	e037883a 	mov	sp,fp
    524c:	df000017 	ldw	fp,0(sp)
    5250:	dec00104 	addi	sp,sp,4
    5254:	f800283a 	ret

00005258 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    5258:	defffc04 	addi	sp,sp,-16
    525c:	df000315 	stw	fp,12(sp)
    5260:	df000304 	addi	fp,sp,12
    5264:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    5268:	e0bfff17 	ldw	r2,-4(fp)
    526c:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    5270:	e0bfff17 	ldw	r2,-4(fp)
    5274:	108002c4 	addi	r2,r2,11
    5278:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    527c:	e03ffe05 	stb	zero,-8(fp)
    5280:	00000706 	br	52a0 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    5284:	e0bffd17 	ldw	r2,-12(fp)
    5288:	10c00044 	addi	r3,r2,1
    528c:	e0fffd15 	stw	r3,-12(fp)
    5290:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    5294:	e0bffe03 	ldbu	r2,-8(fp)
    5298:	10800044 	addi	r2,r2,1
    529c:	e0bffe05 	stb	r2,-8(fp)
    52a0:	e0bffe03 	ldbu	r2,-8(fp)
    52a4:	108000f0 	cmpltui	r2,r2,3
    52a8:	103ff61e 	bne	r2,zero,5284 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005284>
        *ptbl++ = 0;
    }
}
    52ac:	0001883a 	nop
    52b0:	e037883a 	mov	sp,fp
    52b4:	df000017 	ldw	fp,0(sp)
    52b8:	dec00104 	addi	sp,sp,4
    52bc:	f800283a 	ret

000052c0 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    52c0:	defffb04 	addi	sp,sp,-20
    52c4:	dfc00415 	stw	ra,16(sp)
    52c8:	df000315 	stw	fp,12(sp)
    52cc:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    52d0:	0142d004 	movi	r5,2880
    52d4:	010000b4 	movhi	r4,2
    52d8:	2125a604 	addi	r4,r4,-26984
    52dc:	00056380 	call	5638 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    52e0:	008000b4 	movhi	r2,2
    52e4:	10a5a604 	addi	r2,r2,-26984
    52e8:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    52ec:	008000b4 	movhi	r2,2
    52f0:	10a5b204 	addi	r2,r2,-26936
    52f4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    52f8:	e03ffd0d 	sth	zero,-12(fp)
    52fc:	00001306 	br	534c <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    5300:	e0bffe17 	ldw	r2,-8(fp)
    5304:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    5308:	e0bffe17 	ldw	r2,-8(fp)
    530c:	e0ffff17 	ldw	r3,-4(fp)
    5310:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    5314:	e0bffe17 	ldw	r2,-8(fp)
    5318:	00c00fc4 	movi	r3,63
    531c:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    5320:	e0bffe17 	ldw	r2,-8(fp)
    5324:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    5328:	e0bffe17 	ldw	r2,-8(fp)
    532c:	10800c04 	addi	r2,r2,48
    5330:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    5334:	e0bfff17 	ldw	r2,-4(fp)
    5338:	10800c04 	addi	r2,r2,48
    533c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    5340:	e0bffd0b 	ldhu	r2,-12(fp)
    5344:	10800044 	addi	r2,r2,1
    5348:	e0bffd0d 	sth	r2,-12(fp)
    534c:	e0bffd0b 	ldhu	r2,-12(fp)
    5350:	10800ef0 	cmpltui	r2,r2,59
    5354:	103fea1e 	bne	r2,zero,5300 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005300>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    5358:	e0bffe17 	ldw	r2,-8(fp)
    535c:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    5360:	e0bffe17 	ldw	r2,-8(fp)
    5364:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    5368:	e0bffe17 	ldw	r2,-8(fp)
    536c:	00c00fc4 	movi	r3,63
    5370:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    5374:	e0bffe17 	ldw	r2,-8(fp)
    5378:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    537c:	008000b4 	movhi	r2,2
    5380:	10a5a604 	addi	r2,r2,-26984
    5384:	d0a80015 	stw	r2,-24576(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    5388:	0001883a 	nop
    538c:	e037883a 	mov	sp,fp
    5390:	dfc00117 	ldw	ra,4(sp)
    5394:	df000017 	ldw	fp,0(sp)
    5398:	dec00204 	addi	sp,sp,8
    539c:	f800283a 	ret

000053a0 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    53a0:	deffff04 	addi	sp,sp,-4
    53a4:	df000015 	stw	fp,0(sp)
    53a8:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    53ac:	d0280315 	stw	zero,-24564(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    53b0:	d0280105 	stb	zero,-24572(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    53b4:	d027f305 	stb	zero,-24628(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    53b8:	d027fb45 	stb	zero,-24595(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    53bc:	d027f345 	stb	zero,-24627(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    53c0:	d027f815 	stw	zero,-24608(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    53c4:	d027f415 	stw	zero,-24624(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    53c8:	d0280615 	stw	zero,-24552(gp)
    OSIdleCtrMax  = 0L;
    53cc:	d027f915 	stw	zero,-24604(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    53d0:	d0280505 	stb	zero,-24556(gp)
#endif
}
    53d4:	0001883a 	nop
    53d8:	e037883a 	mov	sp,fp
    53dc:	df000017 	ldw	fp,0(sp)
    53e0:	dec00104 	addi	sp,sp,4
    53e4:	f800283a 	ret

000053e8 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    53e8:	defffd04 	addi	sp,sp,-12
    53ec:	df000215 	stw	fp,8(sp)
    53f0:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    53f4:	d027ff05 	stb	zero,-24580(gp)
    prdytbl       = &OSRdyTbl[0];
    53f8:	d0a7ff44 	addi	r2,gp,-24579
    53fc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    5400:	e03ffe05 	stb	zero,-8(fp)
    5404:	00000706 	br	5424 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    5408:	e0bfff17 	ldw	r2,-4(fp)
    540c:	10c00044 	addi	r3,r2,1
    5410:	e0ffff15 	stw	r3,-4(fp)
    5414:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    5418:	e0bffe03 	ldbu	r2,-8(fp)
    541c:	10800044 	addi	r2,r2,1
    5420:	e0bffe05 	stb	r2,-8(fp)
    5424:	e0bffe03 	ldbu	r2,-8(fp)
    5428:	108000f0 	cmpltui	r2,r2,3
    542c:	103ff61e 	bne	r2,zero,5408 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005408>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    5430:	d027f545 	stb	zero,-24619(gp)
    OSPrioHighRdy = 0;
    5434:	d027f505 	stb	zero,-24620(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    5438:	d027fd15 	stw	zero,-24588(gp)
    OSTCBCur      = (OS_TCB *)0;
    543c:	d0280215 	stw	zero,-24568(gp)
}
    5440:	0001883a 	nop
    5444:	e037883a 	mov	sp,fp
    5448:	df000017 	ldw	fp,0(sp)
    544c:	dec00104 	addi	sp,sp,4
    5450:	f800283a 	ret

00005454 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    5454:	defff804 	addi	sp,sp,-32
    5458:	dfc00715 	stw	ra,28(sp)
    545c:	df000615 	stw	fp,24(sp)
    5460:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    5464:	008000c4 	movi	r2,3
    5468:	d8800415 	stw	r2,16(sp)
    546c:	d8000315 	stw	zero,12(sp)
    5470:	00808004 	movi	r2,512
    5474:	d8800215 	stw	r2,8(sp)
    5478:	008000b4 	movhi	r2,2
    547c:	10a3a604 	addi	r2,r2,-29032
    5480:	d8800115 	stw	r2,4(sp)
    5484:	00bfffd4 	movui	r2,65535
    5488:	d8800015 	stw	r2,0(sp)
    548c:	01c00504 	movi	r7,20
    5490:	018000b4 	movhi	r6,2
    5494:	31a5a504 	addi	r6,r6,-26988
    5498:	000b883a 	mov	r5,zero
    549c:	01000034 	movhi	r4,0
    54a0:	21164004 	addi	r4,r4,22784
    54a4:	0009fd00 	call	9fd0 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    54a8:	e1bfff04 	addi	r6,fp,-4
    54ac:	01400074 	movhi	r5,1
    54b0:	297d2f04 	addi	r5,r5,-2884
    54b4:	01000504 	movi	r4,20
    54b8:	000a7e00 	call	a7e0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    54bc:	0001883a 	nop
    54c0:	e037883a 	mov	sp,fp
    54c4:	dfc00117 	ldw	ra,4(sp)
    54c8:	df000017 	ldw	fp,0(sp)
    54cc:	dec00204 	addi	sp,sp,8
    54d0:	f800283a 	ret

000054d4 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    54d4:	defff804 	addi	sp,sp,-32
    54d8:	dfc00715 	stw	ra,28(sp)
    54dc:	df000615 	stw	fp,24(sp)
    54e0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    54e4:	008000c4 	movi	r2,3
    54e8:	d8800415 	stw	r2,16(sp)
    54ec:	d8000315 	stw	zero,12(sp)
    54f0:	00808004 	movi	r2,512
    54f4:	d8800215 	stw	r2,8(sp)
    54f8:	008000b4 	movhi	r2,2
    54fc:	10a12e04 	addi	r2,r2,-31560
    5500:	d8800115 	stw	r2,4(sp)
    5504:	00bfff94 	movui	r2,65534
    5508:	d8800015 	stw	r2,0(sp)
    550c:	01c004c4 	movi	r7,19
    5510:	018000b4 	movhi	r6,2
    5514:	31a32d04 	addi	r6,r6,-29516
    5518:	000b883a 	mov	r5,zero
    551c:	01000034 	movhi	r4,0
    5520:	21165704 	addi	r4,r4,22876
    5524:	0009fd00 	call	9fd0 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    5528:	e1bfff04 	addi	r6,fp,-4
    552c:	01400074 	movhi	r5,1
    5530:	297d3304 	addi	r5,r5,-2868
    5534:	010004c4 	movi	r4,19
    5538:	000a7e00 	call	a7e0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    553c:	0001883a 	nop
    5540:	e037883a 	mov	sp,fp
    5544:	dfc00117 	ldw	ra,4(sp)
    5548:	df000017 	ldw	fp,0(sp)
    554c:	dec00204 	addi	sp,sp,8
    5550:	f800283a 	ret

00005554 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    5554:	defffb04 	addi	sp,sp,-20
    5558:	dfc00415 	stw	ra,16(sp)
    555c:	df000315 	stw	fp,12(sp)
    5560:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    5564:	01414404 	movi	r5,1296
    5568:	010000b4 	movhi	r4,2
    556c:	21287604 	addi	r4,r4,-24104
    5570:	00056380 	call	5638 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    5574:	01401504 	movi	r5,84
    5578:	010000b4 	movhi	r4,2
    557c:	2129ba04 	addi	r4,r4,-22808
    5580:	00056380 	call	5638 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    5584:	008000b4 	movhi	r2,2
    5588:	10a87604 	addi	r2,r2,-24104
    558c:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    5590:	008000b4 	movhi	r2,2
    5594:	10a89104 	addi	r2,r2,-23996
    5598:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    559c:	e03ffd05 	stb	zero,-12(fp)
    55a0:	00001106 	br	55e8 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    55a4:	e0bffe17 	ldw	r2,-8(fp)
    55a8:	e0ffff17 	ldw	r3,-4(fp)
    55ac:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    55b0:	e0bffe17 	ldw	r2,-8(fp)
    55b4:	00c00fc4 	movi	r3,63
    55b8:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    55bc:	e0bffe17 	ldw	r2,-8(fp)
    55c0:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    55c4:	e0bffe17 	ldw	r2,-8(fp)
    55c8:	10801b04 	addi	r2,r2,108
    55cc:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    55d0:	e0bfff17 	ldw	r2,-4(fp)
    55d4:	10801b04 	addi	r2,r2,108
    55d8:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    55dc:	e0bffd03 	ldbu	r2,-12(fp)
    55e0:	10800044 	addi	r2,r2,1
    55e4:	e0bffd05 	stb	r2,-12(fp)
    55e8:	e0bffd03 	ldbu	r2,-12(fp)
    55ec:	108002f0 	cmpltui	r2,r2,11
    55f0:	103fec1e 	bne	r2,zero,55a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70055a4>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    55f4:	e0bffe17 	ldw	r2,-8(fp)
    55f8:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    55fc:	e0bffe17 	ldw	r2,-8(fp)
    5600:	00c00fc4 	movi	r3,63
    5604:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    5608:	e0bffe17 	ldw	r2,-8(fp)
    560c:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    5610:	d027f615 	stw	zero,-24616(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    5614:	008000b4 	movhi	r2,2
    5618:	10a87604 	addi	r2,r2,-24104
    561c:	d0a7fa15 	stw	r2,-24600(gp)
}
    5620:	0001883a 	nop
    5624:	e037883a 	mov	sp,fp
    5628:	dfc00117 	ldw	ra,4(sp)
    562c:	df000017 	ldw	fp,0(sp)
    5630:	dec00204 	addi	sp,sp,8
    5634:	f800283a 	ret

00005638 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    5638:	defffd04 	addi	sp,sp,-12
    563c:	df000215 	stw	fp,8(sp)
    5640:	df000204 	addi	fp,sp,8
    5644:	e13ffe15 	stw	r4,-8(fp)
    5648:	2805883a 	mov	r2,r5
    564c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    5650:	00000706 	br	5670 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    5654:	e0bffe17 	ldw	r2,-8(fp)
    5658:	10c00044 	addi	r3,r2,1
    565c:	e0fffe15 	stw	r3,-8(fp)
    5660:	10000005 	stb	zero,0(r2)
        size--;
    5664:	e0bfff0b 	ldhu	r2,-4(fp)
    5668:	10bfffc4 	addi	r2,r2,-1
    566c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    5670:	e0bfff0b 	ldhu	r2,-4(fp)
    5674:	103ff71e 	bne	r2,zero,5654 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005654>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    5678:	0001883a 	nop
    567c:	e037883a 	mov	sp,fp
    5680:	df000017 	ldw	fp,0(sp)
    5684:	dec00104 	addi	sp,sp,4
    5688:	f800283a 	ret

0000568c <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    568c:	defffc04 	addi	sp,sp,-16
    5690:	df000315 	stw	fp,12(sp)
    5694:	df000304 	addi	fp,sp,12
    5698:	e13ffd15 	stw	r4,-12(fp)
    569c:	e17ffe15 	stw	r5,-8(fp)
    56a0:	3005883a 	mov	r2,r6
    56a4:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    56a8:	00000b06 	br	56d8 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    56ac:	e0bffd17 	ldw	r2,-12(fp)
    56b0:	10c00044 	addi	r3,r2,1
    56b4:	e0fffd15 	stw	r3,-12(fp)
    56b8:	e0fffe17 	ldw	r3,-8(fp)
    56bc:	19000044 	addi	r4,r3,1
    56c0:	e13ffe15 	stw	r4,-8(fp)
    56c4:	18c00003 	ldbu	r3,0(r3)
    56c8:	10c00005 	stb	r3,0(r2)
        size--;
    56cc:	e0bfff0b 	ldhu	r2,-4(fp)
    56d0:	10bfffc4 	addi	r2,r2,-1
    56d4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    56d8:	e0bfff0b 	ldhu	r2,-4(fp)
    56dc:	103ff31e 	bne	r2,zero,56ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056ac>
        *pdest++ = *psrc++;
        size--;
    }
}
    56e0:	0001883a 	nop
    56e4:	e037883a 	mov	sp,fp
    56e8:	df000017 	ldw	fp,0(sp)
    56ec:	dec00104 	addi	sp,sp,4
    56f0:	f800283a 	ret

000056f4 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    56f4:	defffb04 	addi	sp,sp,-20
    56f8:	dfc00415 	stw	ra,16(sp)
    56fc:	df000315 	stw	fp,12(sp)
    5700:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    5704:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5708:	0005303a 	rdctl	r2,status
    570c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5710:	e0ffff17 	ldw	r3,-4(fp)
    5714:	00bfff84 	movi	r2,-2
    5718:	1884703a 	and	r2,r3,r2
    571c:	1001703a 	wrctl	status,r2
  
  return context;
    5720:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
    5724:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    5728:	d0a80103 	ldbu	r2,-24572(gp)
    572c:	10803fcc 	andi	r2,r2,255
    5730:	10001a1e 	bne	r2,zero,579c <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    5734:	d0a7f303 	ldbu	r2,-24628(gp)
    5738:	10803fcc 	andi	r2,r2,255
    573c:	1000171e 	bne	r2,zero,579c <OS_Sched+0xa8>
            OS_SchedNew();
    5740:	00057c40 	call	57c4 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    5744:	d0e7f503 	ldbu	r3,-24620(gp)
    5748:	d0a7f543 	ldbu	r2,-24619(gp)
    574c:	18c03fcc 	andi	r3,r3,255
    5750:	10803fcc 	andi	r2,r2,255
    5754:	18801126 	beq	r3,r2,579c <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    5758:	d0a7f503 	ldbu	r2,-24620(gp)
    575c:	10c03fcc 	andi	r3,r2,255
    5760:	008000b4 	movhi	r2,2
    5764:	10a9ba04 	addi	r2,r2,-22808
    5768:	18c7883a 	add	r3,r3,r3
    576c:	18c7883a 	add	r3,r3,r3
    5770:	10c5883a 	add	r2,r2,r3
    5774:	10800017 	ldw	r2,0(r2)
    5778:	d0a7fd15 	stw	r2,-24588(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    577c:	d0a7fd17 	ldw	r2,-24588(gp)
    5780:	10c00e17 	ldw	r3,56(r2)
    5784:	18c00044 	addi	r3,r3,1
    5788:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    578c:	d0a7f817 	ldw	r2,-24608(gp)
    5790:	10800044 	addi	r2,r2,1
    5794:	d0a7f815 	stw	r2,-24608(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    5798:	000e9740 	call	e974 <OSCtxSw>
    579c:	e0bffd17 	ldw	r2,-12(fp)
    57a0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    57a4:	e0bffe17 	ldw	r2,-8(fp)
    57a8:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    57ac:	0001883a 	nop
    57b0:	e037883a 	mov	sp,fp
    57b4:	dfc00117 	ldw	ra,4(sp)
    57b8:	df000017 	ldw	fp,0(sp)
    57bc:	dec00204 	addi	sp,sp,8
    57c0:	f800283a 	ret

000057c4 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    57c4:	defffe04 	addi	sp,sp,-8
    57c8:	df000115 	stw	fp,4(sp)
    57cc:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    57d0:	d0a7ff03 	ldbu	r2,-24580(gp)
    57d4:	10c03fcc 	andi	r3,r2,255
    57d8:	00800074 	movhi	r2,1
    57dc:	10bcef04 	addi	r2,r2,-3140
    57e0:	10c5883a 	add	r2,r2,r3
    57e4:	10800003 	ldbu	r2,0(r2)
    57e8:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    57ec:	e0bfff03 	ldbu	r2,-4(fp)
    57f0:	100490fa 	slli	r2,r2,3
    57f4:	1009883a 	mov	r4,r2
    57f8:	e0ffff03 	ldbu	r3,-4(fp)
    57fc:	d0a7ff44 	addi	r2,gp,-24579
    5800:	1885883a 	add	r2,r3,r2
    5804:	10800003 	ldbu	r2,0(r2)
    5808:	10c03fcc 	andi	r3,r2,255
    580c:	00800074 	movhi	r2,1
    5810:	10bcef04 	addi	r2,r2,-3140
    5814:	10c5883a 	add	r2,r2,r3
    5818:	10800003 	ldbu	r2,0(r2)
    581c:	2085883a 	add	r2,r4,r2
    5820:	d0a7f505 	stb	r2,-24620(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    5824:	0001883a 	nop
    5828:	e037883a 	mov	sp,fp
    582c:	df000017 	ldw	fp,0(sp)
    5830:	dec00104 	addi	sp,sp,4
    5834:	f800283a 	ret

00005838 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    5838:	defffc04 	addi	sp,sp,-16
    583c:	df000315 	stw	fp,12(sp)
    5840:	df000304 	addi	fp,sp,12
    5844:	e13ffe15 	stw	r4,-8(fp)
    5848:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    584c:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    5850:	00000b06 	br	5880 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    5854:	e0bffe17 	ldw	r2,-8(fp)
    5858:	10c00044 	addi	r3,r2,1
    585c:	e0fffe15 	stw	r3,-8(fp)
    5860:	e0ffff17 	ldw	r3,-4(fp)
    5864:	19000044 	addi	r4,r3,1
    5868:	e13fff15 	stw	r4,-4(fp)
    586c:	18c00003 	ldbu	r3,0(r3)
    5870:	10c00005 	stb	r3,0(r2)
        len++;
    5874:	e0bffd03 	ldbu	r2,-12(fp)
    5878:	10800044 	addi	r2,r2,1
    587c:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    5880:	e0bfff17 	ldw	r2,-4(fp)
    5884:	10800003 	ldbu	r2,0(r2)
    5888:	10803fcc 	andi	r2,r2,255
    588c:	103ff11e 	bne	r2,zero,5854 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005854>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    5890:	e0bffe17 	ldw	r2,-8(fp)
    5894:	10000005 	stb	zero,0(r2)
    return (len);
    5898:	e0bffd03 	ldbu	r2,-12(fp)
}
    589c:	e037883a 	mov	sp,fp
    58a0:	df000017 	ldw	fp,0(sp)
    58a4:	dec00104 	addi	sp,sp,4
    58a8:	f800283a 	ret

000058ac <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    58ac:	defffd04 	addi	sp,sp,-12
    58b0:	df000215 	stw	fp,8(sp)
    58b4:	df000204 	addi	fp,sp,8
    58b8:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    58bc:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    58c0:	00000606 	br	58dc <OS_StrLen+0x30>
        psrc++;
    58c4:	e0bfff17 	ldw	r2,-4(fp)
    58c8:	10800044 	addi	r2,r2,1
    58cc:	e0bfff15 	stw	r2,-4(fp)
        len++;
    58d0:	e0bffe03 	ldbu	r2,-8(fp)
    58d4:	10800044 	addi	r2,r2,1
    58d8:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    58dc:	e0bfff17 	ldw	r2,-4(fp)
    58e0:	10800003 	ldbu	r2,0(r2)
    58e4:	10803fcc 	andi	r2,r2,255
    58e8:	103ff61e 	bne	r2,zero,58c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70058c4>
        psrc++;
        len++;
    }
    return (len);
    58ec:	e0bffe03 	ldbu	r2,-8(fp)
}
    58f0:	e037883a 	mov	sp,fp
    58f4:	df000017 	ldw	fp,0(sp)
    58f8:	dec00104 	addi	sp,sp,4
    58fc:	f800283a 	ret

00005900 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    5900:	defffa04 	addi	sp,sp,-24
    5904:	dfc00515 	stw	ra,20(sp)
    5908:	df000415 	stw	fp,16(sp)
    590c:	df000404 	addi	fp,sp,16
    5910:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5914:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5918:	0005303a 	rdctl	r2,status
    591c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5920:	e0fffd17 	ldw	r3,-12(fp)
    5924:	00bfff84 	movi	r2,-2
    5928:	1884703a 	and	r2,r3,r2
    592c:	1001703a 	wrctl	status,r2
  
  return context;
    5930:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    5934:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
    5938:	d0a7f417 	ldw	r2,-24624(gp)
    593c:	10800044 	addi	r2,r2,1
    5940:	d0a7f415 	stw	r2,-24624(gp)
    5944:	e0bffc17 	ldw	r2,-16(fp)
    5948:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    594c:	e0bffe17 	ldw	r2,-8(fp)
    5950:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    5954:	000ec880 	call	ec88 <OSTaskIdleHook>
    }
    5958:	003fef06 	br	5918 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005918>

0000595c <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    595c:	defff804 	addi	sp,sp,-32
    5960:	dfc00715 	stw	ra,28(sp)
    5964:	df000615 	stw	fp,24(sp)
    5968:	dc400515 	stw	r17,20(sp)
    596c:	dc000415 	stw	r16,16(sp)
    5970:	df000604 	addi	fp,sp,24
    5974:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5978:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    597c:	00000206 	br	5988 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    5980:	01000044 	movi	r4,1
    5984:	000b0a00 	call	b0a0 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    5988:	d0a80503 	ldbu	r2,-24556(gp)
    598c:	10803fcc 	andi	r2,r2,255
    5990:	103ffb26 	beq	r2,zero,5980 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005980>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    5994:	d0e7f917 	ldw	r3,-24604(gp)
    5998:	00947b34 	movhi	r2,20972
    599c:	10a147c4 	addi	r2,r2,-31457
    59a0:	1888383a 	mulxuu	r4,r3,r2
    59a4:	1885383a 	mul	r2,r3,r2
    59a8:	1021883a 	mov	r16,r2
    59ac:	2023883a 	mov	r17,r4
    59b0:	8804d17a 	srli	r2,r17,5
    59b4:	d0a7f915 	stw	r2,-24604(gp)
    if (OSIdleCtrMax == 0L) {
    59b8:	d0a7f917 	ldw	r2,-24604(gp)
    59bc:	1000031e 	bne	r2,zero,59cc <OS_TaskStat+0x70>
        OSCPUUsage = 0;
    59c0:	d027fb05 	stb	zero,-24596(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    59c4:	01003fc4 	movi	r4,255
    59c8:	000ad280 	call	ad28 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    59cc:	0005303a 	rdctl	r2,status
    59d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    59d4:	e0fffb17 	ldw	r3,-20(fp)
    59d8:	00bfff84 	movi	r2,-2
    59dc:	1884703a 	and	r2,r3,r2
    59e0:	1001703a 	wrctl	status,r2
  
  return context;
    59e4:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    59e8:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    59ec:	d0a7f417 	ldw	r2,-24624(gp)
    59f0:	d0a80615 	stw	r2,-24552(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    59f4:	d027f415 	stw	zero,-24624(gp)
    59f8:	e0bffa17 	ldw	r2,-24(fp)
    59fc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5a00:	e0bffc17 	ldw	r2,-16(fp)
    5a04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    5a08:	d0e80617 	ldw	r3,-24552(gp)
    5a0c:	d0a7f917 	ldw	r2,-24604(gp)
    5a10:	1885203a 	divu	r2,r3,r2
    5a14:	1007883a 	mov	r3,r2
    5a18:	00801904 	movi	r2,100
    5a1c:	10c5c83a 	sub	r2,r2,r3
    5a20:	d0a7fb05 	stb	r2,-24596(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    5a24:	000ec080 	call	ec08 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    5a28:	0005a380 	call	5a38 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    5a2c:	0009883a 	mov	r4,zero
    5a30:	000b0a00 	call	b0a0 <OSTimeDly>
    }
    5a34:	003fe506 	br	59cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70059cc>

00005a38 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    5a38:	defffa04 	addi	sp,sp,-24
    5a3c:	dfc00515 	stw	ra,20(sp)
    5a40:	df000415 	stw	fp,16(sp)
    5a44:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    5a48:	e03ffc05 	stb	zero,-16(fp)
    5a4c:	00002406 	br	5ae0 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    5a50:	e0bffc03 	ldbu	r2,-16(fp)
    5a54:	e0fffe04 	addi	r3,fp,-8
    5a58:	180b883a 	mov	r5,r3
    5a5c:	1009883a 	mov	r4,r2
    5a60:	000ab680 	call	ab68 <OSTaskStkChk>
    5a64:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    5a68:	e0bffc43 	ldbu	r2,-15(fp)
    5a6c:	1000191e 	bne	r2,zero,5ad4 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    5a70:	e0fffc03 	ldbu	r3,-16(fp)
    5a74:	008000b4 	movhi	r2,2
    5a78:	10a9ba04 	addi	r2,r2,-22808
    5a7c:	18c7883a 	add	r3,r3,r3
    5a80:	18c7883a 	add	r3,r3,r3
    5a84:	10c5883a 	add	r2,r2,r3
    5a88:	10800017 	ldw	r2,0(r2)
    5a8c:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    5a90:	e0bffd17 	ldw	r2,-12(fp)
    5a94:	10000f26 	beq	r2,zero,5ad4 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    5a98:	e0bffd17 	ldw	r2,-12(fp)
    5a9c:	10800060 	cmpeqi	r2,r2,1
    5aa0:	10000c1e 	bne	r2,zero,5ad4 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    5aa4:	e0bffd17 	ldw	r2,-12(fp)
    5aa8:	10c00217 	ldw	r3,8(r2)
    5aac:	e0bffd17 	ldw	r2,-12(fp)
    5ab0:	10800317 	ldw	r2,12(r2)
    5ab4:	1085883a 	add	r2,r2,r2
    5ab8:	1085883a 	add	r2,r2,r2
    5abc:	1887883a 	add	r3,r3,r2
    5ac0:	e0bffd17 	ldw	r2,-12(fp)
    5ac4:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    5ac8:	e0ffff17 	ldw	r3,-4(fp)
    5acc:	e0bffd17 	ldw	r2,-12(fp)
    5ad0:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    5ad4:	e0bffc03 	ldbu	r2,-16(fp)
    5ad8:	10800044 	addi	r2,r2,1
    5adc:	e0bffc05 	stb	r2,-16(fp)
    5ae0:	e0bffc03 	ldbu	r2,-16(fp)
    5ae4:	10800570 	cmpltui	r2,r2,21
    5ae8:	103fd91e 	bne	r2,zero,5a50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005a50>
#endif
                }
            }
        }
    }
}
    5aec:	0001883a 	nop
    5af0:	e037883a 	mov	sp,fp
    5af4:	dfc00117 	ldw	ra,4(sp)
    5af8:	df000017 	ldw	fp,0(sp)
    5afc:	dec00204 	addi	sp,sp,8
    5b00:	f800283a 	ret

00005b04 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    5b04:	defff204 	addi	sp,sp,-56
    5b08:	dfc00d15 	stw	ra,52(sp)
    5b0c:	df000c15 	stw	fp,48(sp)
    5b10:	df000c04 	addi	fp,sp,48
    5b14:	e17ffc15 	stw	r5,-16(fp)
    5b18:	e1bffd15 	stw	r6,-12(fp)
    5b1c:	3807883a 	mov	r3,r7
    5b20:	e0800417 	ldw	r2,16(fp)
    5b24:	e13ffb05 	stb	r4,-20(fp)
    5b28:	e0fffe0d 	sth	r3,-8(fp)
    5b2c:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    5b30:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5b34:	0005303a 	rdctl	r2,status
    5b38:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5b3c:	e0fffa17 	ldw	r3,-24(fp)
    5b40:	00bfff84 	movi	r2,-2
    5b44:	1884703a 	and	r2,r3,r2
    5b48:	1001703a 	wrctl	status,r2
  
  return context;
    5b4c:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
    5b50:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    5b54:	d0a7fa17 	ldw	r2,-24600(gp)
    5b58:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
    5b5c:	e0bff617 	ldw	r2,-40(fp)
    5b60:	10009326 	beq	r2,zero,5db0 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    5b64:	e0bff617 	ldw	r2,-40(fp)
    5b68:	10800517 	ldw	r2,20(r2)
    5b6c:	d0a7fa15 	stw	r2,-24600(gp)
    5b70:	e0bff417 	ldw	r2,-48(fp)
    5b74:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5b78:	e0bff817 	ldw	r2,-32(fp)
    5b7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    5b80:	e0bff617 	ldw	r2,-40(fp)
    5b84:	e0fffc17 	ldw	r3,-16(fp)
    5b88:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    5b8c:	e0bff617 	ldw	r2,-40(fp)
    5b90:	e0fffb03 	ldbu	r3,-20(fp)
    5b94:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    5b98:	e0bff617 	ldw	r2,-40(fp)
    5b9c:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    5ba0:	e0bff617 	ldw	r2,-40(fp)
    5ba4:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    5ba8:	e0bff617 	ldw	r2,-40(fp)
    5bac:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    5bb0:	e0bff617 	ldw	r2,-40(fp)
    5bb4:	e0c00317 	ldw	r3,12(fp)
    5bb8:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    5bbc:	e0bff617 	ldw	r2,-40(fp)
    5bc0:	e0c00217 	ldw	r3,8(fp)
    5bc4:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    5bc8:	e0bff617 	ldw	r2,-40(fp)
    5bcc:	e0fffd17 	ldw	r3,-12(fp)
    5bd0:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    5bd4:	e0bff617 	ldw	r2,-40(fp)
    5bd8:	e0ffff0b 	ldhu	r3,-4(fp)
    5bdc:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    5be0:	e0bff617 	ldw	r2,-40(fp)
    5be4:	e0fffe0b 	ldhu	r3,-8(fp)
    5be8:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    5bec:	e0bff617 	ldw	r2,-40(fp)
    5bf0:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    5bf4:	e0bffb03 	ldbu	r2,-20(fp)
    5bf8:	1004d0fa 	srli	r2,r2,3
    5bfc:	1007883a 	mov	r3,r2
    5c00:	e0bff617 	ldw	r2,-40(fp)
    5c04:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    5c08:	e0bffb03 	ldbu	r2,-20(fp)
    5c0c:	108001cc 	andi	r2,r2,7
    5c10:	1007883a 	mov	r3,r2
    5c14:	e0bff617 	ldw	r2,-40(fp)
    5c18:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    5c1c:	e0bff617 	ldw	r2,-40(fp)
    5c20:	10800d03 	ldbu	r2,52(r2)
    5c24:	10803fcc 	andi	r2,r2,255
    5c28:	00c00044 	movi	r3,1
    5c2c:	1884983a 	sll	r2,r3,r2
    5c30:	1007883a 	mov	r3,r2
    5c34:	e0bff617 	ldw	r2,-40(fp)
    5c38:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    5c3c:	e0bff617 	ldw	r2,-40(fp)
    5c40:	10800cc3 	ldbu	r2,51(r2)
    5c44:	10803fcc 	andi	r2,r2,255
    5c48:	00c00044 	movi	r3,1
    5c4c:	1884983a 	sll	r2,r3,r2
    5c50:	1007883a 	mov	r3,r2
    5c54:	e0bff617 	ldw	r2,-40(fp)
    5c58:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    5c5c:	e0bff617 	ldw	r2,-40(fp)
    5c60:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    5c64:	e0bff617 	ldw	r2,-40(fp)
    5c68:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    5c6c:	e0bff617 	ldw	r2,-40(fp)
    5c70:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    5c74:	e0bff617 	ldw	r2,-40(fp)
    5c78:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    5c7c:	e0bff617 	ldw	r2,-40(fp)
    5c80:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    5c84:	e0bff617 	ldw	r2,-40(fp)
    5c88:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    5c8c:	e0bff617 	ldw	r2,-40(fp)
    5c90:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    5c94:	e0bff617 	ldw	r2,-40(fp)
    5c98:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    5c9c:	e0bff617 	ldw	r2,-40(fp)
    5ca0:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    5ca4:	e0bff617 	ldw	r2,-40(fp)
    5ca8:	00c00fc4 	movi	r3,63
    5cac:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    5cb0:	e0bff617 	ldw	r2,-40(fp)
    5cb4:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    5cb8:	e13ff617 	ldw	r4,-40(fp)
    5cbc:	000eca80 	call	eca8 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    5cc0:	e13ff617 	ldw	r4,-40(fp)
    5cc4:	000eba00 	call	eba0 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5cc8:	0005303a 	rdctl	r2,status
    5ccc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5cd0:	e0fff517 	ldw	r3,-44(fp)
    5cd4:	00bfff84 	movi	r2,-2
    5cd8:	1884703a 	and	r2,r3,r2
    5cdc:	1001703a 	wrctl	status,r2
  
  return context;
    5ce0:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
    5ce4:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
    5ce8:	e0fffb03 	ldbu	r3,-20(fp)
    5cec:	008000b4 	movhi	r2,2
    5cf0:	10a9ba04 	addi	r2,r2,-22808
    5cf4:	18c7883a 	add	r3,r3,r3
    5cf8:	18c7883a 	add	r3,r3,r3
    5cfc:	10c5883a 	add	r2,r2,r3
    5d00:	e0fff617 	ldw	r3,-40(fp)
    5d04:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    5d08:	d0e7f617 	ldw	r3,-24616(gp)
    5d0c:	e0bff617 	ldw	r2,-40(fp)
    5d10:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    5d14:	e0bff617 	ldw	r2,-40(fp)
    5d18:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    5d1c:	d0a7f617 	ldw	r2,-24616(gp)
    5d20:	10000326 	beq	r2,zero,5d30 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
    5d24:	d0a7f617 	ldw	r2,-24616(gp)
    5d28:	e0fff617 	ldw	r3,-40(fp)
    5d2c:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
    5d30:	e0bff617 	ldw	r2,-40(fp)
    5d34:	d0a7f615 	stw	r2,-24616(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    5d38:	e0bff617 	ldw	r2,-40(fp)
    5d3c:	10c00d83 	ldbu	r3,54(r2)
    5d40:	d0a7ff03 	ldbu	r2,-24580(gp)
    5d44:	1884b03a 	or	r2,r3,r2
    5d48:	d0a7ff05 	stb	r2,-24580(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    5d4c:	e0bff617 	ldw	r2,-40(fp)
    5d50:	10800d03 	ldbu	r2,52(r2)
    5d54:	10c03fcc 	andi	r3,r2,255
    5d58:	e0bff617 	ldw	r2,-40(fp)
    5d5c:	10800d03 	ldbu	r2,52(r2)
    5d60:	11003fcc 	andi	r4,r2,255
    5d64:	d0a7ff44 	addi	r2,gp,-24579
    5d68:	2085883a 	add	r2,r4,r2
    5d6c:	11000003 	ldbu	r4,0(r2)
    5d70:	e0bff617 	ldw	r2,-40(fp)
    5d74:	10800d43 	ldbu	r2,53(r2)
    5d78:	2084b03a 	or	r2,r4,r2
    5d7c:	1009883a 	mov	r4,r2
    5d80:	d0a7ff44 	addi	r2,gp,-24579
    5d84:	1885883a 	add	r2,r3,r2
    5d88:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    5d8c:	d0a7fb43 	ldbu	r2,-24595(gp)
    5d90:	10800044 	addi	r2,r2,1
    5d94:	d0a7fb45 	stb	r2,-24595(gp)
    5d98:	e0bff417 	ldw	r2,-48(fp)
    5d9c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5da0:	e0bff717 	ldw	r2,-36(fp)
    5da4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    5da8:	0005883a 	mov	r2,zero
    5dac:	00000506 	br	5dc4 <OS_TCBInit+0x2c0>
    5db0:	e0bff417 	ldw	r2,-48(fp)
    5db4:	e0bff915 	stw	r2,-28(fp)
    5db8:	e0bff917 	ldw	r2,-28(fp)
    5dbc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    5dc0:	00801084 	movi	r2,66
}
    5dc4:	e037883a 	mov	sp,fp
    5dc8:	dfc00117 	ldw	ra,4(sp)
    5dcc:	df000017 	ldw	fp,0(sp)
    5dd0:	dec00204 	addi	sp,sp,8
    5dd4:	f800283a 	ret

00005dd8 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    5dd8:	defffe04 	addi	sp,sp,-8
    5ddc:	df000115 	stw	fp,4(sp)
    5de0:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    5de4:	d0a00d04 	addi	r2,gp,-32716
    5de8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    5dec:	d0a00e04 	addi	r2,gp,-32712
    5df0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    5df4:	d0a00f84 	addi	r2,gp,-32706
    5df8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    5dfc:	d0a01004 	addi	r2,gp,-32704
    5e00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    5e04:	d0a00f04 	addi	r2,gp,-32708
    5e08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    5e0c:	d0a01084 	addi	r2,gp,-32702
    5e10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    5e14:	d0a01104 	addi	r2,gp,-32700
    5e18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    5e1c:	d0a01184 	addi	r2,gp,-32698
    5e20:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    5e24:	d0a01204 	addi	r2,gp,-32696
    5e28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    5e2c:	d0a01284 	addi	r2,gp,-32694
    5e30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    5e34:	d0a01304 	addi	r2,gp,-32692
    5e38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    5e3c:	d0a01384 	addi	r2,gp,-32690
    5e40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    5e44:	d0a01404 	addi	r2,gp,-32688
    5e48:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    5e4c:	d0a01484 	addi	r2,gp,-32686
    5e50:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    5e54:	d0a01504 	addi	r2,gp,-32684
    5e58:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    5e5c:	d0a01584 	addi	r2,gp,-32682
    5e60:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    5e64:	d0a01604 	addi	r2,gp,-32680
    5e68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    5e6c:	d0a01684 	addi	r2,gp,-32678
    5e70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    5e74:	d0a01704 	addi	r2,gp,-32676
    5e78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    5e7c:	d0a01784 	addi	r2,gp,-32674
    5e80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    5e84:	d0a01804 	addi	r2,gp,-32672
    5e88:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    5e8c:	d0a01884 	addi	r2,gp,-32670
    5e90:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    5e94:	d0a01904 	addi	r2,gp,-32668
    5e98:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    5e9c:	d0a01984 	addi	r2,gp,-32666
    5ea0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    5ea4:	d0a01a04 	addi	r2,gp,-32664
    5ea8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    5eac:	d0a01a84 	addi	r2,gp,-32662
    5eb0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    5eb4:	d0a01b04 	addi	r2,gp,-32660
    5eb8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    5ebc:	d0a01b84 	addi	r2,gp,-32658
    5ec0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    5ec4:	d0a01c04 	addi	r2,gp,-32656
    5ec8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    5ecc:	d0a01c84 	addi	r2,gp,-32654
    5ed0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
    5ed4:	d0a01d04 	addi	r2,gp,-32652
    5ed8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
    5edc:	d0a01d84 	addi	r2,gp,-32650
    5ee0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
    5ee4:	d0a01e04 	addi	r2,gp,-32648
    5ee8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
    5eec:	d0a01e84 	addi	r2,gp,-32646
    5ef0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
    5ef4:	d0a01f04 	addi	r2,gp,-32644
    5ef8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
    5efc:	d0a01f84 	addi	r2,gp,-32642
    5f00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
    5f04:	d0a02004 	addi	r2,gp,-32640
    5f08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
    5f0c:	d0a02084 	addi	r2,gp,-32638
    5f10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
    5f14:	d0a02104 	addi	r2,gp,-32636
    5f18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
    5f1c:	d0a02184 	addi	r2,gp,-32634
    5f20:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
    5f24:	d0a02204 	addi	r2,gp,-32632
    5f28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
    5f2c:	d0a02284 	addi	r2,gp,-32630
    5f30:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
    5f34:	d0a02304 	addi	r2,gp,-32628
    5f38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
    5f3c:	d0a02384 	addi	r2,gp,-32626
    5f40:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
    5f44:	d0a02404 	addi	r2,gp,-32624
    5f48:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
    5f4c:	d0a02904 	addi	r2,gp,-32604
    5f50:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    5f54:	0001883a 	nop
    5f58:	e037883a 	mov	sp,fp
    5f5c:	df000017 	ldw	fp,0(sp)
    5f60:	dec00104 	addi	sp,sp,4
    5f64:	f800283a 	ret

00005f68 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    5f68:	defff204 	addi	sp,sp,-56
    5f6c:	df000d15 	stw	fp,52(sp)
    5f70:	df000d04 	addi	fp,sp,52
    5f74:	e13ffc15 	stw	r4,-16(fp)
    5f78:	2807883a 	mov	r3,r5
    5f7c:	3005883a 	mov	r2,r6
    5f80:	e1ffff15 	stw	r7,-4(fp)
    5f84:	e0fffd0d 	sth	r3,-12(fp)
    5f88:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    5f8c:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    5f90:	e0bfff17 	ldw	r2,-4(fp)
    5f94:	1000021e 	bne	r2,zero,5fa0 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
    5f98:	0005883a 	mov	r2,zero
    5f9c:	0000b006 	br	6260 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    5fa0:	e0bffc17 	ldw	r2,-16(fp)
    5fa4:	1000051e 	bne	r2,zero,5fbc <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    5fa8:	e0bfff17 	ldw	r2,-4(fp)
    5fac:	00c01b84 	movi	r3,110
    5fb0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    5fb4:	0005883a 	mov	r2,zero
    5fb8:	0000a906 	br	6260 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    5fbc:	e0bffc17 	ldw	r2,-16(fp)
    5fc0:	10800003 	ldbu	r2,0(r2)
    5fc4:	10803fcc 	andi	r2,r2,255
    5fc8:	10800160 	cmpeqi	r2,r2,5
    5fcc:	1000051e 	bne	r2,zero,5fe4 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
    5fd0:	e0bfff17 	ldw	r2,-4(fp)
    5fd4:	00c00044 	movi	r3,1
    5fd8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    5fdc:	0005883a 	mov	r2,zero
    5fe0:	00009f06 	br	6260 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    5fe4:	e0fffe03 	ldbu	r3,-8(fp)
    5fe8:	00bfe004 	movi	r2,-128
    5fec:	1884703a 	and	r2,r3,r2
    5ff0:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    5ff4:	e0bff503 	ldbu	r2,-44(fp)
    5ff8:	10000626 	beq	r2,zero,6014 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
    5ffc:	e0bffe03 	ldbu	r2,-8(fp)
    6000:	10801fcc 	andi	r2,r2,127
    6004:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    6008:	00800044 	movi	r2,1
    600c:	e0bff385 	stb	r2,-50(fp)
    6010:	00000106 	br	6018 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
    6014:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    6018:	e0bfff17 	ldw	r2,-4(fp)
    601c:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6020:	0005303a 	rdctl	r2,status
    6024:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6028:	e0fffb17 	ldw	r3,-20(fp)
    602c:	00bfff84 	movi	r2,-2
    6030:	1884703a 	and	r2,r3,r2
    6034:	1001703a 	wrctl	status,r2
  
  return context;
    6038:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    603c:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
    6040:	e0bffe03 	ldbu	r2,-8(fp)
    6044:	10c00060 	cmpeqi	r3,r2,1
    6048:	18005f1e 	bne	r3,zero,61c8 <OSFlagAccept+0x260>
    604c:	10c00088 	cmpgei	r3,r2,2
    6050:	1800021e 	bne	r3,zero,605c <OSFlagAccept+0xf4>
    6054:	10003f26 	beq	r2,zero,6154 <OSFlagAccept+0x1ec>
    6058:	00007706 	br	6238 <OSFlagAccept+0x2d0>
    605c:	10c000a0 	cmpeqi	r3,r2,2
    6060:	1800031e 	bne	r3,zero,6070 <OSFlagAccept+0x108>
    6064:	108000e0 	cmpeqi	r2,r2,3
    6068:	10001e1e 	bne	r2,zero,60e4 <OSFlagAccept+0x17c>
    606c:	00007206 	br	6238 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    6070:	e0bffc17 	ldw	r2,-16(fp)
    6074:	10c0020b 	ldhu	r3,8(r2)
    6078:	e0bffd0b 	ldhu	r2,-12(fp)
    607c:	1884703a 	and	r2,r3,r2
    6080:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    6084:	e0fff30b 	ldhu	r3,-52(fp)
    6088:	e0bffd0b 	ldhu	r2,-12(fp)
    608c:	18800d1e 	bne	r3,r2,60c4 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6090:	e0bff383 	ldbu	r2,-50(fp)
    6094:	10800058 	cmpnei	r2,r2,1
    6098:	10000d1e 	bne	r2,zero,60d0 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    609c:	e0bffc17 	ldw	r2,-16(fp)
    60a0:	1080020b 	ldhu	r2,8(r2)
    60a4:	1007883a 	mov	r3,r2
    60a8:	e0bff30b 	ldhu	r2,-52(fp)
    60ac:	0084303a 	nor	r2,zero,r2
    60b0:	1884703a 	and	r2,r3,r2
    60b4:	1007883a 	mov	r3,r2
    60b8:	e0bffc17 	ldw	r2,-16(fp)
    60bc:	10c0020d 	sth	r3,8(r2)
    60c0:	00000306 	br	60d0 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    60c4:	e0bfff17 	ldw	r2,-4(fp)
    60c8:	00c01c04 	movi	r3,112
    60cc:	10c00005 	stb	r3,0(r2)
    60d0:	e0bff417 	ldw	r2,-48(fp)
    60d4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    60d8:	e0bff617 	ldw	r2,-40(fp)
    60dc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    60e0:	00005e06 	br	625c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    60e4:	e0bffc17 	ldw	r2,-16(fp)
    60e8:	10c0020b 	ldhu	r3,8(r2)
    60ec:	e0bffd0b 	ldhu	r2,-12(fp)
    60f0:	1884703a 	and	r2,r3,r2
    60f4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    60f8:	e0bff30b 	ldhu	r2,-52(fp)
    60fc:	10000d26 	beq	r2,zero,6134 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6100:	e0bff383 	ldbu	r2,-50(fp)
    6104:	10800058 	cmpnei	r2,r2,1
    6108:	10000d1e 	bne	r2,zero,6140 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    610c:	e0bffc17 	ldw	r2,-16(fp)
    6110:	1080020b 	ldhu	r2,8(r2)
    6114:	1007883a 	mov	r3,r2
    6118:	e0bff30b 	ldhu	r2,-52(fp)
    611c:	0084303a 	nor	r2,zero,r2
    6120:	1884703a 	and	r2,r3,r2
    6124:	1007883a 	mov	r3,r2
    6128:	e0bffc17 	ldw	r2,-16(fp)
    612c:	10c0020d 	sth	r3,8(r2)
    6130:	00000306 	br	6140 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    6134:	e0bfff17 	ldw	r2,-4(fp)
    6138:	00c01c04 	movi	r3,112
    613c:	10c00005 	stb	r3,0(r2)
    6140:	e0bff417 	ldw	r2,-48(fp)
    6144:	e0bff715 	stw	r2,-36(fp)
    6148:	e0bff717 	ldw	r2,-36(fp)
    614c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    6150:	00004206 	br	625c <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    6154:	e0bffc17 	ldw	r2,-16(fp)
    6158:	1080020b 	ldhu	r2,8(r2)
    615c:	0084303a 	nor	r2,zero,r2
    6160:	1007883a 	mov	r3,r2
    6164:	e0bffd0b 	ldhu	r2,-12(fp)
    6168:	1884703a 	and	r2,r3,r2
    616c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    6170:	e0fff30b 	ldhu	r3,-52(fp)
    6174:	e0bffd0b 	ldhu	r2,-12(fp)
    6178:	18800b1e 	bne	r3,r2,61a8 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    617c:	e0bff383 	ldbu	r2,-50(fp)
    6180:	10800058 	cmpnei	r2,r2,1
    6184:	10000b1e 	bne	r2,zero,61b4 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    6188:	e0bffc17 	ldw	r2,-16(fp)
    618c:	10c0020b 	ldhu	r3,8(r2)
    6190:	e0bff30b 	ldhu	r2,-52(fp)
    6194:	1884b03a 	or	r2,r3,r2
    6198:	1007883a 	mov	r3,r2
    619c:	e0bffc17 	ldw	r2,-16(fp)
    61a0:	10c0020d 	sth	r3,8(r2)
    61a4:	00000306 	br	61b4 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    61a8:	e0bfff17 	ldw	r2,-4(fp)
    61ac:	00c01c04 	movi	r3,112
    61b0:	10c00005 	stb	r3,0(r2)
    61b4:	e0bff417 	ldw	r2,-48(fp)
    61b8:	e0bff815 	stw	r2,-32(fp)
    61bc:	e0bff817 	ldw	r2,-32(fp)
    61c0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    61c4:	00002506 	br	625c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    61c8:	e0bffc17 	ldw	r2,-16(fp)
    61cc:	1080020b 	ldhu	r2,8(r2)
    61d0:	0084303a 	nor	r2,zero,r2
    61d4:	1007883a 	mov	r3,r2
    61d8:	e0bffd0b 	ldhu	r2,-12(fp)
    61dc:	1884703a 	and	r2,r3,r2
    61e0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    61e4:	e0bff30b 	ldhu	r2,-52(fp)
    61e8:	10000b26 	beq	r2,zero,6218 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    61ec:	e0bff383 	ldbu	r2,-50(fp)
    61f0:	10800058 	cmpnei	r2,r2,1
    61f4:	10000b1e 	bne	r2,zero,6224 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    61f8:	e0bffc17 	ldw	r2,-16(fp)
    61fc:	10c0020b 	ldhu	r3,8(r2)
    6200:	e0bff30b 	ldhu	r2,-52(fp)
    6204:	1884b03a 	or	r2,r3,r2
    6208:	1007883a 	mov	r3,r2
    620c:	e0bffc17 	ldw	r2,-16(fp)
    6210:	10c0020d 	sth	r3,8(r2)
    6214:	00000306 	br	6224 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    6218:	e0bfff17 	ldw	r2,-4(fp)
    621c:	00c01c04 	movi	r3,112
    6220:	10c00005 	stb	r3,0(r2)
    6224:	e0bff417 	ldw	r2,-48(fp)
    6228:	e0bff915 	stw	r2,-28(fp)
    622c:	e0bff917 	ldw	r2,-28(fp)
    6230:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    6234:	00000906 	br	625c <OSFlagAccept+0x2f4>
    6238:	e0bff417 	ldw	r2,-48(fp)
    623c:	e0bffa15 	stw	r2,-24(fp)
    6240:	e0bffa17 	ldw	r2,-24(fp)
    6244:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    6248:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
    624c:	e0bfff17 	ldw	r2,-4(fp)
    6250:	00c01bc4 	movi	r3,111
    6254:	10c00005 	stb	r3,0(r2)
             break;
    6258:	0001883a 	nop
    }
    return (flags_rdy);
    625c:	e0bff30b 	ldhu	r2,-52(fp)
}
    6260:	e037883a 	mov	sp,fp
    6264:	df000017 	ldw	fp,0(sp)
    6268:	dec00104 	addi	sp,sp,4
    626c:	f800283a 	ret

00006270 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
    6270:	defff804 	addi	sp,sp,-32
    6274:	df000715 	stw	fp,28(sp)
    6278:	df000704 	addi	fp,sp,28
    627c:	2005883a 	mov	r2,r4
    6280:	e17fff15 	stw	r5,-4(fp)
    6284:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
    6288:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
    628c:	e0bfff17 	ldw	r2,-4(fp)
    6290:	1000021e 	bne	r2,zero,629c <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
    6294:	0005883a 	mov	r2,zero
    6298:	00003306 	br	6368 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
    629c:	d0a80103 	ldbu	r2,-24572(gp)
    62a0:	10803fcc 	andi	r2,r2,255
    62a4:	10000526 	beq	r2,zero,62bc <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
    62a8:	e0bfff17 	ldw	r2,-4(fp)
    62ac:	00c00404 	movi	r3,16
    62b0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
    62b4:	0005883a 	mov	r2,zero
    62b8:	00002b06 	br	6368 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    62bc:	0005303a 	rdctl	r2,status
    62c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    62c4:	e0fffd17 	ldw	r3,-12(fp)
    62c8:	00bfff84 	movi	r2,-2
    62cc:	1884703a 	and	r2,r3,r2
    62d0:	1001703a 	wrctl	status,r2
  
  return context;
    62d4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    62d8:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    62dc:	d0a80417 	ldw	r2,-24560(gp)
    62e0:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
    62e4:	e0bffb17 	ldw	r2,-20(fp)
    62e8:	10001726 	beq	r2,zero,6348 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
    62ec:	d0a80417 	ldw	r2,-24560(gp)
    62f0:	10800117 	ldw	r2,4(r2)
    62f4:	d0a80415 	stw	r2,-24560(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
    62f8:	e0bffb17 	ldw	r2,-20(fp)
    62fc:	00c00144 	movi	r3,5
    6300:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
    6304:	e0bffb17 	ldw	r2,-20(fp)
    6308:	e0fffe0b 	ldhu	r3,-8(fp)
    630c:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
    6310:	e0bffb17 	ldw	r2,-20(fp)
    6314:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
    6318:	e0bffb17 	ldw	r2,-20(fp)
    631c:	00c00fc4 	movi	r3,63
    6320:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    6324:	e0bffb17 	ldw	r2,-20(fp)
    6328:	100002c5 	stb	zero,11(r2)
    632c:	e0bff917 	ldw	r2,-28(fp)
    6330:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6334:	e0bffa17 	ldw	r2,-24(fp)
    6338:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
    633c:	e0bfff17 	ldw	r2,-4(fp)
    6340:	10000005 	stb	zero,0(r2)
    6344:	00000706 	br	6364 <OSFlagCreate+0xf4>
    6348:	e0bff917 	ldw	r2,-28(fp)
    634c:	e0bffc15 	stw	r2,-16(fp)
    6350:	e0bffc17 	ldw	r2,-16(fp)
    6354:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
    6358:	e0bfff17 	ldw	r2,-4(fp)
    635c:	00c01c84 	movi	r3,114
    6360:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
    6364:	e0bffb17 	ldw	r2,-20(fp)
}
    6368:	e037883a 	mov	sp,fp
    636c:	df000017 	ldw	fp,0(sp)
    6370:	dec00104 	addi	sp,sp,4
    6374:	f800283a 	ret

00006378 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
    6378:	defff204 	addi	sp,sp,-56
    637c:	dfc00d15 	stw	ra,52(sp)
    6380:	df000c15 	stw	fp,48(sp)
    6384:	df000c04 	addi	fp,sp,48
    6388:	e13ffd15 	stw	r4,-12(fp)
    638c:	2805883a 	mov	r2,r5
    6390:	e1bfff15 	stw	r6,-4(fp)
    6394:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    6398:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    639c:	e0bfff17 	ldw	r2,-4(fp)
    63a0:	1000021e 	bne	r2,zero,63ac <OSFlagDel+0x34>
        return (pgrp);
    63a4:	e0bffd17 	ldw	r2,-12(fp)
    63a8:	00008006 	br	65ac <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    63ac:	e0bffd17 	ldw	r2,-12(fp)
    63b0:	1000051e 	bne	r2,zero,63c8 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    63b4:	e0bfff17 	ldw	r2,-4(fp)
    63b8:	00c01b84 	movi	r3,110
    63bc:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    63c0:	e0bffd17 	ldw	r2,-12(fp)
    63c4:	00007906 	br	65ac <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    63c8:	d0a80103 	ldbu	r2,-24572(gp)
    63cc:	10803fcc 	andi	r2,r2,255
    63d0:	10000526 	beq	r2,zero,63e8 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    63d4:	e0bfff17 	ldw	r2,-4(fp)
    63d8:	00c003c4 	movi	r3,15
    63dc:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    63e0:	e0bffd17 	ldw	r2,-12(fp)
    63e4:	00007106 	br	65ac <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
    63e8:	e0bffd17 	ldw	r2,-12(fp)
    63ec:	10800003 	ldbu	r2,0(r2)
    63f0:	10803fcc 	andi	r2,r2,255
    63f4:	10800160 	cmpeqi	r2,r2,5
    63f8:	1000051e 	bne	r2,zero,6410 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
    63fc:	e0bfff17 	ldw	r2,-4(fp)
    6400:	00c00044 	movi	r3,1
    6404:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    6408:	e0bffd17 	ldw	r2,-12(fp)
    640c:	00006706 	br	65ac <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6410:	0005303a 	rdctl	r2,status
    6414:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6418:	e0fffc17 	ldw	r3,-16(fp)
    641c:	00bfff84 	movi	r2,-2
    6420:	1884703a 	and	r2,r3,r2
    6424:	1001703a 	wrctl	status,r2
  
  return context;
    6428:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    642c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
    6430:	e0bffd17 	ldw	r2,-12(fp)
    6434:	10800117 	ldw	r2,4(r2)
    6438:	10000326 	beq	r2,zero,6448 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    643c:	00800044 	movi	r2,1
    6440:	e0bff405 	stb	r2,-48(fp)
    6444:	00000106 	br	644c <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    6448:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    644c:	e0bffe03 	ldbu	r2,-8(fp)
    6450:	10000326 	beq	r2,zero,6460 <OSFlagDel+0xe8>
    6454:	10800060 	cmpeqi	r2,r2,1
    6458:	1000231e 	bne	r2,zero,64e8 <OSFlagDel+0x170>
    645c:	00004806 	br	6580 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
    6460:	e0bff403 	ldbu	r2,-48(fp)
    6464:	1000161e 	bne	r2,zero,64c0 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
    6468:	e0bffd17 	ldw	r2,-12(fp)
    646c:	00c00fc4 	movi	r3,63
    6470:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    6474:	e0bffd17 	ldw	r2,-12(fp)
    6478:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    647c:	e0bffd17 	ldw	r2,-12(fp)
    6480:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
    6484:	d0e80417 	ldw	r3,-24560(gp)
    6488:	e0bffd17 	ldw	r2,-12(fp)
    648c:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
    6490:	e0bffd17 	ldw	r2,-12(fp)
    6494:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
    6498:	e0bffd17 	ldw	r2,-12(fp)
    649c:	d0a80415 	stw	r2,-24560(gp)
    64a0:	e0bff717 	ldw	r2,-36(fp)
    64a4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    64a8:	e0bff817 	ldw	r2,-32(fp)
    64ac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
    64b0:	e0bfff17 	ldw	r2,-4(fp)
    64b4:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
    64b8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
    64bc:	00003a06 	br	65a8 <OSFlagDel+0x230>
    64c0:	e0bff717 	ldw	r2,-36(fp)
    64c4:	e0bff915 	stw	r2,-28(fp)
    64c8:	e0bff917 	ldw	r2,-28(fp)
    64cc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
    64d0:	e0bfff17 	ldw	r2,-4(fp)
    64d4:	00c01244 	movi	r3,73
    64d8:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
    64dc:	e0bffd17 	ldw	r2,-12(fp)
    64e0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    64e4:	00003006 	br	65a8 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    64e8:	e0bffd17 	ldw	r2,-12(fp)
    64ec:	10800117 	ldw	r2,4(r2)
    64f0:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    64f4:	00000606 	br	6510 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
    64f8:	000b883a 	mov	r5,zero
    64fc:	e13ff517 	ldw	r4,-44(fp)
    6500:	00074e40 	call	74e4 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    6504:	e0bff517 	ldw	r2,-44(fp)
    6508:	10800017 	ldw	r2,0(r2)
    650c:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    6510:	e0bff517 	ldw	r2,-44(fp)
    6514:	103ff81e 	bne	r2,zero,64f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70064f8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
    6518:	e0bffd17 	ldw	r2,-12(fp)
    651c:	00c00fc4 	movi	r3,63
    6520:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    6524:	e0bffd17 	ldw	r2,-12(fp)
    6528:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    652c:	e0bffd17 	ldw	r2,-12(fp)
    6530:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
    6534:	d0e80417 	ldw	r3,-24560(gp)
    6538:	e0bffd17 	ldw	r2,-12(fp)
    653c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
    6540:	e0bffd17 	ldw	r2,-12(fp)
    6544:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
    6548:	e0bffd17 	ldw	r2,-12(fp)
    654c:	d0a80415 	stw	r2,-24560(gp)
    6550:	e0bff717 	ldw	r2,-36(fp)
    6554:	e0bffa15 	stw	r2,-24(fp)
    6558:	e0bffa17 	ldw	r2,-24(fp)
    655c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    6560:	e0bff403 	ldbu	r2,-48(fp)
    6564:	10800058 	cmpnei	r2,r2,1
    6568:	1000011e 	bne	r2,zero,6570 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    656c:	00056f40 	call	56f4 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
    6570:	e0bfff17 	ldw	r2,-4(fp)
    6574:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
    6578:	e03ff615 	stw	zero,-40(fp)
             break;
    657c:	00000a06 	br	65a8 <OSFlagDel+0x230>
    6580:	e0bff717 	ldw	r2,-36(fp)
    6584:	e0bffb15 	stw	r2,-20(fp)
    6588:	e0bffb17 	ldw	r2,-20(fp)
    658c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
    6590:	e0bfff17 	ldw	r2,-4(fp)
    6594:	00c001c4 	movi	r3,7
    6598:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
    659c:	e0bffd17 	ldw	r2,-12(fp)
    65a0:	e0bff615 	stw	r2,-40(fp)
             break;
    65a4:	0001883a 	nop
    }
    return (pgrp_return);
    65a8:	e0bff617 	ldw	r2,-40(fp)
}
    65ac:	e037883a 	mov	sp,fp
    65b0:	dfc00117 	ldw	ra,4(sp)
    65b4:	df000017 	ldw	fp,0(sp)
    65b8:	dec00204 	addi	sp,sp,8
    65bc:	f800283a 	ret

000065c0 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    65c0:	defff604 	addi	sp,sp,-40
    65c4:	dfc00915 	stw	ra,36(sp)
    65c8:	df000815 	stw	fp,32(sp)
    65cc:	df000804 	addi	fp,sp,32
    65d0:	e13ffd15 	stw	r4,-12(fp)
    65d4:	e17ffe15 	stw	r5,-8(fp)
    65d8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    65dc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    65e0:	e0bfff17 	ldw	r2,-4(fp)
    65e4:	1000021e 	bne	r2,zero,65f0 <OSFlagNameGet+0x30>
        return (0);
    65e8:	0005883a 	mov	r2,zero
    65ec:	00003906 	br	66d4 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    65f0:	e0bffd17 	ldw	r2,-12(fp)
    65f4:	1000051e 	bne	r2,zero,660c <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    65f8:	e0bfff17 	ldw	r2,-4(fp)
    65fc:	00c01b84 	movi	r3,110
    6600:	10c00005 	stb	r3,0(r2)
        return (0);
    6604:	0005883a 	mov	r2,zero
    6608:	00003206 	br	66d4 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    660c:	e0bffe17 	ldw	r2,-8(fp)
    6610:	1000051e 	bne	r2,zero,6628 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    6614:	e0bfff17 	ldw	r2,-4(fp)
    6618:	00c00304 	movi	r3,12
    661c:	10c00005 	stb	r3,0(r2)
        return (0);
    6620:	0005883a 	mov	r2,zero
    6624:	00002b06 	br	66d4 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    6628:	d0a80103 	ldbu	r2,-24572(gp)
    662c:	10803fcc 	andi	r2,r2,255
    6630:	10000526 	beq	r2,zero,6648 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
    6634:	e0bfff17 	ldw	r2,-4(fp)
    6638:	00c00444 	movi	r3,17
    663c:	10c00005 	stb	r3,0(r2)
        return (0);
    6640:	0005883a 	mov	r2,zero
    6644:	00002306 	br	66d4 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6648:	0005303a 	rdctl	r2,status
    664c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6650:	e0fffc17 	ldw	r3,-16(fp)
    6654:	00bfff84 	movi	r2,-2
    6658:	1884703a 	and	r2,r3,r2
    665c:	1001703a 	wrctl	status,r2
  
  return context;
    6660:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    6664:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    6668:	e0bffd17 	ldw	r2,-12(fp)
    666c:	10800003 	ldbu	r2,0(r2)
    6670:	10803fcc 	andi	r2,r2,255
    6674:	10800160 	cmpeqi	r2,r2,5
    6678:	1000091e 	bne	r2,zero,66a0 <OSFlagNameGet+0xe0>
    667c:	e0bff817 	ldw	r2,-32(fp)
    6680:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6684:	e0bff917 	ldw	r2,-28(fp)
    6688:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    668c:	e0bfff17 	ldw	r2,-4(fp)
    6690:	00c00044 	movi	r3,1
    6694:	10c00005 	stb	r3,0(r2)
        return (0);
    6698:	0005883a 	mov	r2,zero
    669c:	00000d06 	br	66d4 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    66a0:	e0bffd17 	ldw	r2,-12(fp)
    66a4:	10800284 	addi	r2,r2,10
    66a8:	100b883a 	mov	r5,r2
    66ac:	e13ffe17 	ldw	r4,-8(fp)
    66b0:	00058380 	call	5838 <OS_StrCopy>
    66b4:	e0bffb05 	stb	r2,-20(fp)
    66b8:	e0bff817 	ldw	r2,-32(fp)
    66bc:	e0bffa15 	stw	r2,-24(fp)
    66c0:	e0bffa17 	ldw	r2,-24(fp)
    66c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    66c8:	e0bfff17 	ldw	r2,-4(fp)
    66cc:	10000005 	stb	zero,0(r2)
    return (len);
    66d0:	e0bffb03 	ldbu	r2,-20(fp)
}
    66d4:	e037883a 	mov	sp,fp
    66d8:	dfc00117 	ldw	ra,4(sp)
    66dc:	df000017 	ldw	fp,0(sp)
    66e0:	dec00204 	addi	sp,sp,8
    66e4:	f800283a 	ret

000066e8 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    66e8:	defff504 	addi	sp,sp,-44
    66ec:	dfc00a15 	stw	ra,40(sp)
    66f0:	df000915 	stw	fp,36(sp)
    66f4:	df000904 	addi	fp,sp,36
    66f8:	e13ffd15 	stw	r4,-12(fp)
    66fc:	e17ffe15 	stw	r5,-8(fp)
    6700:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6704:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    6708:	e0bfff17 	ldw	r2,-4(fp)
    670c:	10004326 	beq	r2,zero,681c <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    6710:	e0bffd17 	ldw	r2,-12(fp)
    6714:	1000041e 	bne	r2,zero,6728 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    6718:	e0bfff17 	ldw	r2,-4(fp)
    671c:	00c01b84 	movi	r3,110
    6720:	10c00005 	stb	r3,0(r2)
        return;
    6724:	00003e06 	br	6820 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    6728:	e0bffe17 	ldw	r2,-8(fp)
    672c:	1000041e 	bne	r2,zero,6740 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    6730:	e0bfff17 	ldw	r2,-4(fp)
    6734:	00c00304 	movi	r3,12
    6738:	10c00005 	stb	r3,0(r2)
        return;
    673c:	00003806 	br	6820 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    6740:	d0a80103 	ldbu	r2,-24572(gp)
    6744:	10803fcc 	andi	r2,r2,255
    6748:	10000426 	beq	r2,zero,675c <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    674c:	e0bfff17 	ldw	r2,-4(fp)
    6750:	00c00484 	movi	r3,18
    6754:	10c00005 	stb	r3,0(r2)
        return;
    6758:	00003106 	br	6820 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    675c:	0005303a 	rdctl	r2,status
    6760:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6764:	e0fffc17 	ldw	r3,-16(fp)
    6768:	00bfff84 	movi	r2,-2
    676c:	1884703a 	and	r2,r3,r2
    6770:	1001703a 	wrctl	status,r2
  
  return context;
    6774:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    6778:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    677c:	e0bffd17 	ldw	r2,-12(fp)
    6780:	10800003 	ldbu	r2,0(r2)
    6784:	10803fcc 	andi	r2,r2,255
    6788:	10800160 	cmpeqi	r2,r2,5
    678c:	1000081e 	bne	r2,zero,67b0 <OSFlagNameSet+0xc8>
    6790:	e0bff717 	ldw	r2,-36(fp)
    6794:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6798:	e0bff817 	ldw	r2,-32(fp)
    679c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    67a0:	e0bfff17 	ldw	r2,-4(fp)
    67a4:	00c00044 	movi	r3,1
    67a8:	10c00005 	stb	r3,0(r2)
        return;
    67ac:	00001c06 	br	6820 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    67b0:	e13ffe17 	ldw	r4,-8(fp)
    67b4:	00058ac0 	call	58ac <OS_StrLen>
    67b8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
    67bc:	e0bffa03 	ldbu	r2,-24(fp)
    67c0:	10800830 	cmpltui	r2,r2,32
    67c4:	1000081e 	bne	r2,zero,67e8 <OSFlagNameSet+0x100>
    67c8:	e0bff717 	ldw	r2,-36(fp)
    67cc:	e0bff915 	stw	r2,-28(fp)
    67d0:	e0bff917 	ldw	r2,-28(fp)
    67d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
    67d8:	e0bfff17 	ldw	r2,-4(fp)
    67dc:	00c01cc4 	movi	r3,115
    67e0:	10c00005 	stb	r3,0(r2)
        return;
    67e4:	00000e06 	br	6820 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    67e8:	e0bffd17 	ldw	r2,-12(fp)
    67ec:	10800284 	addi	r2,r2,10
    67f0:	e17ffe17 	ldw	r5,-8(fp)
    67f4:	1009883a 	mov	r4,r2
    67f8:	00058380 	call	5838 <OS_StrCopy>
    67fc:	e0bff717 	ldw	r2,-36(fp)
    6800:	e0bffb15 	stw	r2,-20(fp)
    6804:	e0bffb17 	ldw	r2,-20(fp)
    6808:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    680c:	e0bfff17 	ldw	r2,-4(fp)
    6810:	10000005 	stb	zero,0(r2)
    return;
    6814:	0001883a 	nop
    6818:	00000106 	br	6820 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    681c:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
    6820:	e037883a 	mov	sp,fp
    6824:	dfc00117 	ldw	ra,4(sp)
    6828:	df000017 	ldw	fp,0(sp)
    682c:	dec00204 	addi	sp,sp,8
    6830:	f800283a 	ret

00006834 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
    6834:	deffe104 	addi	sp,sp,-124
    6838:	dfc01e15 	stw	ra,120(sp)
    683c:	df001d15 	stw	fp,116(sp)
    6840:	df001d04 	addi	fp,sp,116
    6844:	e13ffc15 	stw	r4,-16(fp)
    6848:	2809883a 	mov	r4,r5
    684c:	3007883a 	mov	r3,r6
    6850:	3805883a 	mov	r2,r7
    6854:	e13ffd0d 	sth	r4,-12(fp)
    6858:	e0fffe05 	stb	r3,-8(fp)
    685c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    6860:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    6864:	e0800217 	ldw	r2,8(fp)
    6868:	1000021e 	bne	r2,zero,6874 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
    686c:	0005883a 	mov	r2,zero
    6870:	00015906 	br	6dd8 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    6874:	e0bffc17 	ldw	r2,-16(fp)
    6878:	1000051e 	bne	r2,zero,6890 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    687c:	e0800217 	ldw	r2,8(fp)
    6880:	00c01b84 	movi	r3,110
    6884:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6888:	0005883a 	mov	r2,zero
    688c:	00015206 	br	6dd8 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    6890:	d0a80103 	ldbu	r2,-24572(gp)
    6894:	10803fcc 	andi	r2,r2,255
    6898:	10000526 	beq	r2,zero,68b0 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
    689c:	e0800217 	ldw	r2,8(fp)
    68a0:	00c00084 	movi	r3,2
    68a4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    68a8:	0005883a 	mov	r2,zero
    68ac:	00014a06 	br	6dd8 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
    68b0:	d0a7f303 	ldbu	r2,-24628(gp)
    68b4:	10803fcc 	andi	r2,r2,255
    68b8:	10000526 	beq	r2,zero,68d0 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
    68bc:	e0800217 	ldw	r2,8(fp)
    68c0:	00c00344 	movi	r3,13
    68c4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    68c8:	0005883a 	mov	r2,zero
    68cc:	00014206 	br	6dd8 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    68d0:	e0bffc17 	ldw	r2,-16(fp)
    68d4:	10800003 	ldbu	r2,0(r2)
    68d8:	10803fcc 	andi	r2,r2,255
    68dc:	10800160 	cmpeqi	r2,r2,5
    68e0:	1000051e 	bne	r2,zero,68f8 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
    68e4:	e0800217 	ldw	r2,8(fp)
    68e8:	00c00044 	movi	r3,1
    68ec:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    68f0:	0005883a 	mov	r2,zero
    68f4:	00013806 	br	6dd8 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    68f8:	e0fffe03 	ldbu	r3,-8(fp)
    68fc:	00bfe004 	movi	r2,-128
    6900:	1884703a 	and	r2,r3,r2
    6904:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
    6908:	e0bfe603 	ldbu	r2,-104(fp)
    690c:	10000626 	beq	r2,zero,6928 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
    6910:	e0bffe03 	ldbu	r2,-8(fp)
    6914:	10801fcc 	andi	r2,r2,127
    6918:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    691c:	00800044 	movi	r2,1
    6920:	e0bfe405 	stb	r2,-112(fp)
    6924:	00000106 	br	692c <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
    6928:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    692c:	0005303a 	rdctl	r2,status
    6930:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6934:	e0fff617 	ldw	r3,-40(fp)
    6938:	00bfff84 	movi	r2,-2
    693c:	1884703a 	and	r2,r3,r2
    6940:	1001703a 	wrctl	status,r2
  
  return context;
    6944:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    6948:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
    694c:	e0bffe03 	ldbu	r2,-8(fp)
    6950:	10c00060 	cmpeqi	r3,r2,1
    6954:	1800921e 	bne	r3,zero,6ba0 <OSFlagPend+0x36c>
    6958:	10c00088 	cmpgei	r3,r2,2
    695c:	1800021e 	bne	r3,zero,6968 <OSFlagPend+0x134>
    6960:	10006126 	beq	r2,zero,6ae8 <OSFlagPend+0x2b4>
    6964:	0000bb06 	br	6c54 <OSFlagPend+0x420>
    6968:	10c000a0 	cmpeqi	r3,r2,2
    696c:	1800031e 	bne	r3,zero,697c <OSFlagPend+0x148>
    6970:	108000e0 	cmpeqi	r2,r2,3
    6974:	10002f1e 	bne	r2,zero,6a34 <OSFlagPend+0x200>
    6978:	0000b606 	br	6c54 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
    697c:	e0bffc17 	ldw	r2,-16(fp)
    6980:	10c0020b 	ldhu	r3,8(r2)
    6984:	e0bffd0b 	ldhu	r2,-12(fp)
    6988:	1884703a 	and	r2,r3,r2
    698c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    6990:	e0ffe80b 	ldhu	r3,-96(fp)
    6994:	e0bffd0b 	ldhu	r2,-12(fp)
    6998:	1880171e 	bne	r3,r2,69f8 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    699c:	e0bfe403 	ldbu	r2,-112(fp)
    69a0:	10800058 	cmpnei	r2,r2,1
    69a4:	1000091e 	bne	r2,zero,69cc <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    69a8:	e0bffc17 	ldw	r2,-16(fp)
    69ac:	1080020b 	ldhu	r2,8(r2)
    69b0:	1007883a 	mov	r3,r2
    69b4:	e0bfe80b 	ldhu	r2,-96(fp)
    69b8:	0084303a 	nor	r2,zero,r2
    69bc:	1884703a 	and	r2,r3,r2
    69c0:	1007883a 	mov	r3,r2
    69c4:	e0bffc17 	ldw	r2,-16(fp)
    69c8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    69cc:	d0a80217 	ldw	r2,-24568(gp)
    69d0:	e0ffe80b 	ldhu	r3,-96(fp)
    69d4:	10c00b0d 	sth	r3,44(r2)
    69d8:	e0bfe517 	ldw	r2,-108(fp)
    69dc:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    69e0:	e0bfe717 	ldw	r2,-100(fp)
    69e4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    69e8:	e0800217 	ldw	r2,8(fp)
    69ec:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    69f0:	e0bfe80b 	ldhu	r2,-96(fp)
    69f4:	0000f806 	br	6dd8 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    69f8:	e13ffd0b 	ldhu	r4,-12(fp)
    69fc:	e17ffe03 	ldbu	r5,-8(fp)
    6a00:	e0bfff0b 	ldhu	r2,-4(fp)
    6a04:	e0fff704 	addi	r3,fp,-36
    6a08:	d8800015 	stw	r2,0(sp)
    6a0c:	280f883a 	mov	r7,r5
    6a10:	200d883a 	mov	r6,r4
    6a14:	180b883a 	mov	r5,r3
    6a18:	e13ffc17 	ldw	r4,-16(fp)
    6a1c:	00072a40 	call	72a4 <OS_FlagBlock>
    6a20:	e0bfe517 	ldw	r2,-108(fp)
    6a24:	e0bfe915 	stw	r2,-92(fp)
    6a28:	e0bfe917 	ldw	r2,-92(fp)
    6a2c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    6a30:	00009206 	br	6c7c <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
    6a34:	e0bffc17 	ldw	r2,-16(fp)
    6a38:	10c0020b 	ldhu	r3,8(r2)
    6a3c:	e0bffd0b 	ldhu	r2,-12(fp)
    6a40:	1884703a 	and	r2,r3,r2
    6a44:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    6a48:	e0bfe80b 	ldhu	r2,-96(fp)
    6a4c:	10001726 	beq	r2,zero,6aac <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6a50:	e0bfe403 	ldbu	r2,-112(fp)
    6a54:	10800058 	cmpnei	r2,r2,1
    6a58:	1000091e 	bne	r2,zero,6a80 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    6a5c:	e0bffc17 	ldw	r2,-16(fp)
    6a60:	1080020b 	ldhu	r2,8(r2)
    6a64:	1007883a 	mov	r3,r2
    6a68:	e0bfe80b 	ldhu	r2,-96(fp)
    6a6c:	0084303a 	nor	r2,zero,r2
    6a70:	1884703a 	and	r2,r3,r2
    6a74:	1007883a 	mov	r3,r2
    6a78:	e0bffc17 	ldw	r2,-16(fp)
    6a7c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    6a80:	d0a80217 	ldw	r2,-24568(gp)
    6a84:	e0ffe80b 	ldhu	r3,-96(fp)
    6a88:	10c00b0d 	sth	r3,44(r2)
    6a8c:	e0bfe517 	ldw	r2,-108(fp)
    6a90:	e0bfea15 	stw	r2,-88(fp)
    6a94:	e0bfea17 	ldw	r2,-88(fp)
    6a98:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    6a9c:	e0800217 	ldw	r2,8(fp)
    6aa0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    6aa4:	e0bfe80b 	ldhu	r2,-96(fp)
    6aa8:	0000cb06 	br	6dd8 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    6aac:	e13ffd0b 	ldhu	r4,-12(fp)
    6ab0:	e17ffe03 	ldbu	r5,-8(fp)
    6ab4:	e0bfff0b 	ldhu	r2,-4(fp)
    6ab8:	e0fff704 	addi	r3,fp,-36
    6abc:	d8800015 	stw	r2,0(sp)
    6ac0:	280f883a 	mov	r7,r5
    6ac4:	200d883a 	mov	r6,r4
    6ac8:	180b883a 	mov	r5,r3
    6acc:	e13ffc17 	ldw	r4,-16(fp)
    6ad0:	00072a40 	call	72a4 <OS_FlagBlock>
    6ad4:	e0bfe517 	ldw	r2,-108(fp)
    6ad8:	e0bfeb15 	stw	r2,-84(fp)
    6adc:	e0bfeb17 	ldw	r2,-84(fp)
    6ae0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    6ae4:	00006506 	br	6c7c <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    6ae8:	e0bffc17 	ldw	r2,-16(fp)
    6aec:	1080020b 	ldhu	r2,8(r2)
    6af0:	0084303a 	nor	r2,zero,r2
    6af4:	1007883a 	mov	r3,r2
    6af8:	e0bffd0b 	ldhu	r2,-12(fp)
    6afc:	1884703a 	and	r2,r3,r2
    6b00:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    6b04:	e0ffe80b 	ldhu	r3,-96(fp)
    6b08:	e0bffd0b 	ldhu	r2,-12(fp)
    6b0c:	1880151e 	bne	r3,r2,6b64 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6b10:	e0bfe403 	ldbu	r2,-112(fp)
    6b14:	10800058 	cmpnei	r2,r2,1
    6b18:	1000071e 	bne	r2,zero,6b38 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    6b1c:	e0bffc17 	ldw	r2,-16(fp)
    6b20:	10c0020b 	ldhu	r3,8(r2)
    6b24:	e0bfe80b 	ldhu	r2,-96(fp)
    6b28:	1884b03a 	or	r2,r3,r2
    6b2c:	1007883a 	mov	r3,r2
    6b30:	e0bffc17 	ldw	r2,-16(fp)
    6b34:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    6b38:	d0a80217 	ldw	r2,-24568(gp)
    6b3c:	e0ffe80b 	ldhu	r3,-96(fp)
    6b40:	10c00b0d 	sth	r3,44(r2)
    6b44:	e0bfe517 	ldw	r2,-108(fp)
    6b48:	e0bfec15 	stw	r2,-80(fp)
    6b4c:	e0bfec17 	ldw	r2,-80(fp)
    6b50:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    6b54:	e0800217 	ldw	r2,8(fp)
    6b58:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    6b5c:	e0bfe80b 	ldhu	r2,-96(fp)
    6b60:	00009d06 	br	6dd8 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    6b64:	e13ffd0b 	ldhu	r4,-12(fp)
    6b68:	e17ffe03 	ldbu	r5,-8(fp)
    6b6c:	e0bfff0b 	ldhu	r2,-4(fp)
    6b70:	e0fff704 	addi	r3,fp,-36
    6b74:	d8800015 	stw	r2,0(sp)
    6b78:	280f883a 	mov	r7,r5
    6b7c:	200d883a 	mov	r6,r4
    6b80:	180b883a 	mov	r5,r3
    6b84:	e13ffc17 	ldw	r4,-16(fp)
    6b88:	00072a40 	call	72a4 <OS_FlagBlock>
    6b8c:	e0bfe517 	ldw	r2,-108(fp)
    6b90:	e0bfed15 	stw	r2,-76(fp)
    6b94:	e0bfed17 	ldw	r2,-76(fp)
    6b98:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    6b9c:	00003706 	br	6c7c <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    6ba0:	e0bffc17 	ldw	r2,-16(fp)
    6ba4:	1080020b 	ldhu	r2,8(r2)
    6ba8:	0084303a 	nor	r2,zero,r2
    6bac:	1007883a 	mov	r3,r2
    6bb0:	e0bffd0b 	ldhu	r2,-12(fp)
    6bb4:	1884703a 	and	r2,r3,r2
    6bb8:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    6bbc:	e0bfe80b 	ldhu	r2,-96(fp)
    6bc0:	10001526 	beq	r2,zero,6c18 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6bc4:	e0bfe403 	ldbu	r2,-112(fp)
    6bc8:	10800058 	cmpnei	r2,r2,1
    6bcc:	1000071e 	bne	r2,zero,6bec <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    6bd0:	e0bffc17 	ldw	r2,-16(fp)
    6bd4:	10c0020b 	ldhu	r3,8(r2)
    6bd8:	e0bfe80b 	ldhu	r2,-96(fp)
    6bdc:	1884b03a 	or	r2,r3,r2
    6be0:	1007883a 	mov	r3,r2
    6be4:	e0bffc17 	ldw	r2,-16(fp)
    6be8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    6bec:	d0a80217 	ldw	r2,-24568(gp)
    6bf0:	e0ffe80b 	ldhu	r3,-96(fp)
    6bf4:	10c00b0d 	sth	r3,44(r2)
    6bf8:	e0bfe517 	ldw	r2,-108(fp)
    6bfc:	e0bfee15 	stw	r2,-72(fp)
    6c00:	e0bfee17 	ldw	r2,-72(fp)
    6c04:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    6c08:	e0800217 	ldw	r2,8(fp)
    6c0c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    6c10:	e0bfe80b 	ldhu	r2,-96(fp)
    6c14:	00007006 	br	6dd8 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    6c18:	e13ffd0b 	ldhu	r4,-12(fp)
    6c1c:	e17ffe03 	ldbu	r5,-8(fp)
    6c20:	e0bfff0b 	ldhu	r2,-4(fp)
    6c24:	e0fff704 	addi	r3,fp,-36
    6c28:	d8800015 	stw	r2,0(sp)
    6c2c:	280f883a 	mov	r7,r5
    6c30:	200d883a 	mov	r6,r4
    6c34:	180b883a 	mov	r5,r3
    6c38:	e13ffc17 	ldw	r4,-16(fp)
    6c3c:	00072a40 	call	72a4 <OS_FlagBlock>
    6c40:	e0bfe517 	ldw	r2,-108(fp)
    6c44:	e0bfef15 	stw	r2,-68(fp)
    6c48:	e0bfef17 	ldw	r2,-68(fp)
    6c4c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    6c50:	00000a06 	br	6c7c <OSFlagPend+0x448>
    6c54:	e0bfe517 	ldw	r2,-108(fp)
    6c58:	e0bff015 	stw	r2,-64(fp)
    6c5c:	e0bff017 	ldw	r2,-64(fp)
    6c60:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    6c64:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
    6c68:	e0800217 	ldw	r2,8(fp)
    6c6c:	00c01bc4 	movi	r3,111
    6c70:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
    6c74:	e0bfe80b 	ldhu	r2,-96(fp)
    6c78:	00005706 	br	6dd8 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
    6c7c:	00056f40 	call	56f4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6c80:	0005303a 	rdctl	r2,status
    6c84:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6c88:	e0fff117 	ldw	r3,-60(fp)
    6c8c:	00bfff84 	movi	r2,-2
    6c90:	1884703a 	and	r2,r3,r2
    6c94:	1001703a 	wrctl	status,r2
  
  return context;
    6c98:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
    6c9c:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
    6ca0:	d0a80217 	ldw	r2,-24568(gp)
    6ca4:	10800c43 	ldbu	r2,49(r2)
    6ca8:	10803fcc 	andi	r2,r2,255
    6cac:	10001c26 	beq	r2,zero,6d20 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
    6cb0:	d0a80217 	ldw	r2,-24568(gp)
    6cb4:	10800c43 	ldbu	r2,49(r2)
    6cb8:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    6cbc:	d0a80217 	ldw	r2,-24568(gp)
    6cc0:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
    6cc4:	e0bff704 	addi	r2,fp,-36
    6cc8:	1009883a 	mov	r4,r2
    6ccc:	00075d80 	call	75d8 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
    6cd0:	d0a80217 	ldw	r2,-24568(gp)
    6cd4:	10000c05 	stb	zero,48(r2)
    6cd8:	e0bfe517 	ldw	r2,-108(fp)
    6cdc:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6ce0:	e0bff217 	ldw	r2,-56(fp)
    6ce4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
    6ce8:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
    6cec:	e0bff303 	ldbu	r2,-52(fp)
    6cf0:	108000a0 	cmpeqi	r2,r2,2
    6cf4:	10000426 	beq	r2,zero,6d08 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
    6cf8:	e0800217 	ldw	r2,8(fp)
    6cfc:	00c00384 	movi	r3,14
    6d00:	10c00005 	stb	r3,0(r2)
                 break;
    6d04:	00000406 	br	6d18 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
    6d08:	e0800217 	ldw	r2,8(fp)
    6d0c:	00c00284 	movi	r3,10
    6d10:	10c00005 	stb	r3,0(r2)
                 break;
    6d14:	0001883a 	nop
        }
        return (flags_rdy);
    6d18:	e0bfe80b 	ldhu	r2,-96(fp)
    6d1c:	00002e06 	br	6dd8 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
    6d20:	d0a80217 	ldw	r2,-24568(gp)
    6d24:	10800b0b 	ldhu	r2,44(r2)
    6d28:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
    6d2c:	e0bfe403 	ldbu	r2,-112(fp)
    6d30:	10800058 	cmpnei	r2,r2,1
    6d34:	1000211e 	bne	r2,zero,6dbc <OSFlagPend+0x588>
        switch (wait_type) {
    6d38:	e0bffe03 	ldbu	r2,-8(fp)
    6d3c:	10001616 	blt	r2,zero,6d98 <OSFlagPend+0x564>
    6d40:	10c00090 	cmplti	r3,r2,2
    6d44:	18000c1e 	bne	r3,zero,6d78 <OSFlagPend+0x544>
    6d48:	10800108 	cmpgei	r2,r2,4
    6d4c:	1000121e 	bne	r2,zero,6d98 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
    6d50:	e0bffc17 	ldw	r2,-16(fp)
    6d54:	1080020b 	ldhu	r2,8(r2)
    6d58:	1007883a 	mov	r3,r2
    6d5c:	e0bfe80b 	ldhu	r2,-96(fp)
    6d60:	0084303a 	nor	r2,zero,r2
    6d64:	1884703a 	and	r2,r3,r2
    6d68:	1007883a 	mov	r3,r2
    6d6c:	e0bffc17 	ldw	r2,-16(fp)
    6d70:	10c0020d 	sth	r3,8(r2)
                 break;
    6d74:	00001106 	br	6dbc <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
    6d78:	e0bffc17 	ldw	r2,-16(fp)
    6d7c:	10c0020b 	ldhu	r3,8(r2)
    6d80:	e0bfe80b 	ldhu	r2,-96(fp)
    6d84:	1884b03a 	or	r2,r3,r2
    6d88:	1007883a 	mov	r3,r2
    6d8c:	e0bffc17 	ldw	r2,-16(fp)
    6d90:	10c0020d 	sth	r3,8(r2)
                 break;
    6d94:	00000906 	br	6dbc <OSFlagPend+0x588>
    6d98:	e0bfe517 	ldw	r2,-108(fp)
    6d9c:	e0bff415 	stw	r2,-48(fp)
    6da0:	e0bff417 	ldw	r2,-48(fp)
    6da4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    6da8:	e0800217 	ldw	r2,8(fp)
    6dac:	00c01bc4 	movi	r3,111
    6db0:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    6db4:	0005883a 	mov	r2,zero
    6db8:	00000706 	br	6dd8 <OSFlagPend+0x5a4>
    6dbc:	e0bfe517 	ldw	r2,-108(fp)
    6dc0:	e0bff515 	stw	r2,-44(fp)
    6dc4:	e0bff517 	ldw	r2,-44(fp)
    6dc8:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
    6dcc:	e0800217 	ldw	r2,8(fp)
    6dd0:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
    6dd4:	e0bfe80b 	ldhu	r2,-96(fp)
}
    6dd8:	e037883a 	mov	sp,fp
    6ddc:	dfc00117 	ldw	ra,4(sp)
    6de0:	df000017 	ldw	fp,0(sp)
    6de4:	dec00204 	addi	sp,sp,8
    6de8:	f800283a 	ret

00006dec <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
    6dec:	defffb04 	addi	sp,sp,-20
    6df0:	df000415 	stw	fp,16(sp)
    6df4:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    6df8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6dfc:	0005303a 	rdctl	r2,status
    6e00:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6e04:	e0fffe17 	ldw	r3,-8(fp)
    6e08:	00bfff84 	movi	r2,-2
    6e0c:	1884703a 	and	r2,r3,r2
    6e10:	1001703a 	wrctl	status,r2
  
  return context;
    6e14:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    6e18:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
    6e1c:	d0a80217 	ldw	r2,-24568(gp)
    6e20:	10800b0b 	ldhu	r2,44(r2)
    6e24:	e0bffd0d 	sth	r2,-12(fp)
    6e28:	e0bffc17 	ldw	r2,-16(fp)
    6e2c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6e30:	e0bfff17 	ldw	r2,-4(fp)
    6e34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
    6e38:	e0bffd0b 	ldhu	r2,-12(fp)
}
    6e3c:	e037883a 	mov	sp,fp
    6e40:	df000017 	ldw	fp,0(sp)
    6e44:	dec00104 	addi	sp,sp,4
    6e48:	f800283a 	ret

00006e4c <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
    6e4c:	deffef04 	addi	sp,sp,-68
    6e50:	dfc01015 	stw	ra,64(sp)
    6e54:	df000f15 	stw	fp,60(sp)
    6e58:	df000f04 	addi	fp,sp,60
    6e5c:	e13ffc15 	stw	r4,-16(fp)
    6e60:	2807883a 	mov	r3,r5
    6e64:	3005883a 	mov	r2,r6
    6e68:	e1ffff15 	stw	r7,-4(fp)
    6e6c:	e0fffd0d 	sth	r3,-12(fp)
    6e70:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
    6e74:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    6e78:	e0bfff17 	ldw	r2,-4(fp)
    6e7c:	1000021e 	bne	r2,zero,6e88 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
    6e80:	0005883a 	mov	r2,zero
    6e84:	0000d106 	br	71cc <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
    6e88:	e0bffc17 	ldw	r2,-16(fp)
    6e8c:	1000051e 	bne	r2,zero,6ea4 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    6e90:	e0bfff17 	ldw	r2,-4(fp)
    6e94:	00c01b84 	movi	r3,110
    6e98:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6e9c:	0005883a 	mov	r2,zero
    6ea0:	0000ca06 	br	71cc <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
    6ea4:	e0bffc17 	ldw	r2,-16(fp)
    6ea8:	10800003 	ldbu	r2,0(r2)
    6eac:	10803fcc 	andi	r2,r2,255
    6eb0:	10800160 	cmpeqi	r2,r2,5
    6eb4:	1000051e 	bne	r2,zero,6ecc <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
    6eb8:	e0bfff17 	ldw	r2,-4(fp)
    6ebc:	00c00044 	movi	r3,1
    6ec0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6ec4:	0005883a 	mov	r2,zero
    6ec8:	0000c006 	br	71cc <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6ecc:	0005303a 	rdctl	r2,status
    6ed0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6ed4:	e0fffb17 	ldw	r3,-20(fp)
    6ed8:	00bfff84 	movi	r2,-2
    6edc:	1884703a 	and	r2,r3,r2
    6ee0:	1001703a 	wrctl	status,r2
  
  return context;
    6ee4:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    6ee8:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
    6eec:	e0bffe03 	ldbu	r2,-8(fp)
    6ef0:	10000326 	beq	r2,zero,6f00 <OSFlagPost+0xb4>
    6ef4:	10800060 	cmpeqi	r2,r2,1
    6ef8:	10000b1e 	bne	r2,zero,6f28 <OSFlagPost+0xdc>
    6efc:	00001206 	br	6f48 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
    6f00:	e0bffc17 	ldw	r2,-16(fp)
    6f04:	1080020b 	ldhu	r2,8(r2)
    6f08:	1007883a 	mov	r3,r2
    6f0c:	e0bffd0b 	ldhu	r2,-12(fp)
    6f10:	0084303a 	nor	r2,zero,r2
    6f14:	1884703a 	and	r2,r3,r2
    6f18:	1007883a 	mov	r3,r2
    6f1c:	e0bffc17 	ldw	r2,-16(fp)
    6f20:	10c0020d 	sth	r3,8(r2)
             break;
    6f24:	00001106 	br	6f6c <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
    6f28:	e0bffc17 	ldw	r2,-16(fp)
    6f2c:	10c0020b 	ldhu	r3,8(r2)
    6f30:	e0bffd0b 	ldhu	r2,-12(fp)
    6f34:	1884b03a 	or	r2,r3,r2
    6f38:	1007883a 	mov	r3,r2
    6f3c:	e0bffc17 	ldw	r2,-16(fp)
    6f40:	10c0020d 	sth	r3,8(r2)
             break;
    6f44:	00000906 	br	6f6c <OSFlagPost+0x120>
    6f48:	e0bff317 	ldw	r2,-52(fp)
    6f4c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6f50:	e0bff417 	ldw	r2,-48(fp)
    6f54:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
    6f58:	e0bfff17 	ldw	r2,-4(fp)
    6f5c:	00c01c44 	movi	r3,113
    6f60:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
    6f64:	0005883a 	mov	r2,zero
    6f68:	00009806 	br	71cc <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    6f6c:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    6f70:	e0bffc17 	ldw	r2,-16(fp)
    6f74:	10800117 	ldw	r2,4(r2)
    6f78:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    6f7c:	00007706 	br	715c <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
    6f80:	e0bff117 	ldw	r2,-60(fp)
    6f84:	10800483 	ldbu	r2,18(r2)
    6f88:	10803fcc 	andi	r2,r2,255
    6f8c:	10c00060 	cmpeqi	r3,r2,1
    6f90:	18004a1e 	bne	r3,zero,70bc <OSFlagPost+0x270>
    6f94:	10c00088 	cmpgei	r3,r2,2
    6f98:	1800021e 	bne	r3,zero,6fa4 <OSFlagPost+0x158>
    6f9c:	10002f26 	beq	r2,zero,705c <OSFlagPost+0x210>
    6fa0:	00005b06 	br	7110 <OSFlagPost+0x2c4>
    6fa4:	10c000a0 	cmpeqi	r3,r2,2
    6fa8:	1800031e 	bne	r3,zero,6fb8 <OSFlagPost+0x16c>
    6fac:	108000e0 	cmpeqi	r2,r2,3
    6fb0:	1000171e 	bne	r2,zero,7010 <OSFlagPost+0x1c4>
    6fb4:	00005606 	br	7110 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    6fb8:	e0bffc17 	ldw	r2,-16(fp)
    6fbc:	10c0020b 	ldhu	r3,8(r2)
    6fc0:	e0bff117 	ldw	r2,-60(fp)
    6fc4:	1080040b 	ldhu	r2,16(r2)
    6fc8:	1884703a 	and	r2,r3,r2
    6fcc:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    6fd0:	e0bff117 	ldw	r2,-60(fp)
    6fd4:	1080040b 	ldhu	r2,16(r2)
    6fd8:	10ffffcc 	andi	r3,r2,65535
    6fdc:	e0bff60b 	ldhu	r2,-40(fp)
    6fe0:	1880541e 	bne	r3,r2,7134 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    6fe4:	e0bff60b 	ldhu	r2,-40(fp)
    6fe8:	100b883a 	mov	r5,r2
    6fec:	e13ff117 	ldw	r4,-60(fp)
    6ff0:	00074e40 	call	74e4 <OS_FlagTaskRdy>
    6ff4:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    6ff8:	e0bff683 	ldbu	r2,-38(fp)
    6ffc:	10800058 	cmpnei	r2,r2,1
    7000:	10004c1e 	bne	r2,zero,7134 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    7004:	00800044 	movi	r2,1
    7008:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    700c:	00004906 	br	7134 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    7010:	e0bffc17 	ldw	r2,-16(fp)
    7014:	10c0020b 	ldhu	r3,8(r2)
    7018:	e0bff117 	ldw	r2,-60(fp)
    701c:	1080040b 	ldhu	r2,16(r2)
    7020:	1884703a 	and	r2,r3,r2
    7024:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    7028:	e0bff60b 	ldhu	r2,-40(fp)
    702c:	10004326 	beq	r2,zero,713c <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    7030:	e0bff60b 	ldhu	r2,-40(fp)
    7034:	100b883a 	mov	r5,r2
    7038:	e13ff117 	ldw	r4,-60(fp)
    703c:	00074e40 	call	74e4 <OS_FlagTaskRdy>
    7040:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    7044:	e0bff683 	ldbu	r2,-38(fp)
    7048:	10800058 	cmpnei	r2,r2,1
    704c:	10003b1e 	bne	r2,zero,713c <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    7050:	00800044 	movi	r2,1
    7054:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    7058:	00003806 	br	713c <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    705c:	e0bffc17 	ldw	r2,-16(fp)
    7060:	1080020b 	ldhu	r2,8(r2)
    7064:	0084303a 	nor	r2,zero,r2
    7068:	1007883a 	mov	r3,r2
    706c:	e0bff117 	ldw	r2,-60(fp)
    7070:	1080040b 	ldhu	r2,16(r2)
    7074:	1884703a 	and	r2,r3,r2
    7078:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    707c:	e0bff117 	ldw	r2,-60(fp)
    7080:	1080040b 	ldhu	r2,16(r2)
    7084:	10ffffcc 	andi	r3,r2,65535
    7088:	e0bff60b 	ldhu	r2,-40(fp)
    708c:	18802d1e 	bne	r3,r2,7144 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    7090:	e0bff60b 	ldhu	r2,-40(fp)
    7094:	100b883a 	mov	r5,r2
    7098:	e13ff117 	ldw	r4,-60(fp)
    709c:	00074e40 	call	74e4 <OS_FlagTaskRdy>
    70a0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    70a4:	e0bff683 	ldbu	r2,-38(fp)
    70a8:	10800058 	cmpnei	r2,r2,1
    70ac:	1000251e 	bne	r2,zero,7144 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    70b0:	00800044 	movi	r2,1
    70b4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    70b8:	00002206 	br	7144 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    70bc:	e0bffc17 	ldw	r2,-16(fp)
    70c0:	1080020b 	ldhu	r2,8(r2)
    70c4:	0084303a 	nor	r2,zero,r2
    70c8:	1007883a 	mov	r3,r2
    70cc:	e0bff117 	ldw	r2,-60(fp)
    70d0:	1080040b 	ldhu	r2,16(r2)
    70d4:	1884703a 	and	r2,r3,r2
    70d8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    70dc:	e0bff60b 	ldhu	r2,-40(fp)
    70e0:	10001a26 	beq	r2,zero,714c <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    70e4:	e0bff60b 	ldhu	r2,-40(fp)
    70e8:	100b883a 	mov	r5,r2
    70ec:	e13ff117 	ldw	r4,-60(fp)
    70f0:	00074e40 	call	74e4 <OS_FlagTaskRdy>
    70f4:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    70f8:	e0bff683 	ldbu	r2,-38(fp)
    70fc:	10800058 	cmpnei	r2,r2,1
    7100:	1000121e 	bne	r2,zero,714c <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    7104:	00800044 	movi	r2,1
    7108:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    710c:	00000f06 	br	714c <OSFlagPost+0x300>
    7110:	e0bff317 	ldw	r2,-52(fp)
    7114:	e0bff515 	stw	r2,-44(fp)
    7118:	e0bff517 	ldw	r2,-44(fp)
    711c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    7120:	e0bfff17 	ldw	r2,-4(fp)
    7124:	00c01bc4 	movi	r3,111
    7128:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    712c:	0005883a 	mov	r2,zero
    7130:	00002606 	br	71cc <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    7134:	0001883a 	nop
    7138:	00000506 	br	7150 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    713c:	0001883a 	nop
    7140:	00000306 	br	7150 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    7144:	0001883a 	nop
    7148:	00000106 	br	7150 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    714c:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    7150:	e0bff117 	ldw	r2,-60(fp)
    7154:	10800017 	ldw	r2,0(r2)
    7158:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    715c:	e0bff117 	ldw	r2,-60(fp)
    7160:	103f871e 	bne	r2,zero,6f80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006f80>
    7164:	e0bff317 	ldw	r2,-52(fp)
    7168:	e0bff715 	stw	r2,-36(fp)
    716c:	e0bff717 	ldw	r2,-36(fp)
    7170:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
    7174:	e0bff203 	ldbu	r2,-56(fp)
    7178:	10800058 	cmpnei	r2,r2,1
    717c:	1000011e 	bne	r2,zero,7184 <OSFlagPost+0x338>
        OS_Sched();
    7180:	00056f40 	call	56f4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7184:	0005303a 	rdctl	r2,status
    7188:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    718c:	e0fffa17 	ldw	r3,-24(fp)
    7190:	00bfff84 	movi	r2,-2
    7194:	1884703a 	and	r2,r3,r2
    7198:	1001703a 	wrctl	status,r2
  
  return context;
    719c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    71a0:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
    71a4:	e0bffc17 	ldw	r2,-16(fp)
    71a8:	1080020b 	ldhu	r2,8(r2)
    71ac:	e0bff90d 	sth	r2,-28(fp)
    71b0:	e0bff317 	ldw	r2,-52(fp)
    71b4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    71b8:	e0bff817 	ldw	r2,-32(fp)
    71bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
    71c0:	e0bfff17 	ldw	r2,-4(fp)
    71c4:	10000005 	stb	zero,0(r2)
    return (flags_cur);
    71c8:	e0bff90b 	ldhu	r2,-28(fp)
}
    71cc:	e037883a 	mov	sp,fp
    71d0:	dfc00117 	ldw	ra,4(sp)
    71d4:	df000017 	ldw	fp,0(sp)
    71d8:	dec00204 	addi	sp,sp,8
    71dc:	f800283a 	ret

000071e0 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
    71e0:	defff904 	addi	sp,sp,-28
    71e4:	df000615 	stw	fp,24(sp)
    71e8:	df000604 	addi	fp,sp,24
    71ec:	e13ffe15 	stw	r4,-8(fp)
    71f0:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
    71f4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
    71f8:	e0bfff17 	ldw	r2,-4(fp)
    71fc:	1000021e 	bne	r2,zero,7208 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
    7200:	0005883a 	mov	r2,zero
    7204:	00002306 	br	7294 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
    7208:	e0bffe17 	ldw	r2,-8(fp)
    720c:	1000051e 	bne	r2,zero,7224 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    7210:	e0bfff17 	ldw	r2,-4(fp)
    7214:	00c01b84 	movi	r3,110
    7218:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    721c:	0005883a 	mov	r2,zero
    7220:	00001c06 	br	7294 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
    7224:	e0bffe17 	ldw	r2,-8(fp)
    7228:	10800003 	ldbu	r2,0(r2)
    722c:	10803fcc 	andi	r2,r2,255
    7230:	10800160 	cmpeqi	r2,r2,5
    7234:	1000051e 	bne	r2,zero,724c <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    7238:	e0bfff17 	ldw	r2,-4(fp)
    723c:	00c00044 	movi	r3,1
    7240:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7244:	0005883a 	mov	r2,zero
    7248:	00001206 	br	7294 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    724c:	0005303a 	rdctl	r2,status
    7250:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7254:	e0fffc17 	ldw	r3,-16(fp)
    7258:	00bfff84 	movi	r2,-2
    725c:	1884703a 	and	r2,r3,r2
    7260:	1001703a 	wrctl	status,r2
  
  return context;
    7264:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    7268:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
    726c:	e0bffe17 	ldw	r2,-8(fp)
    7270:	1080020b 	ldhu	r2,8(r2)
    7274:	e0bffb0d 	sth	r2,-20(fp)
    7278:	e0bffa17 	ldw	r2,-24(fp)
    727c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7280:	e0bffd17 	ldw	r2,-12(fp)
    7284:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    7288:	e0bfff17 	ldw	r2,-4(fp)
    728c:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
    7290:	e0bffb0b 	ldhu	r2,-20(fp)
}
    7294:	e037883a 	mov	sp,fp
    7298:	df000017 	ldw	fp,0(sp)
    729c:	dec00104 	addi	sp,sp,4
    72a0:	f800283a 	ret

000072a4 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
    72a4:	defff804 	addi	sp,sp,-32
    72a8:	df000715 	stw	fp,28(sp)
    72ac:	df000704 	addi	fp,sp,28
    72b0:	e13ffb15 	stw	r4,-20(fp)
    72b4:	e17ffc15 	stw	r5,-16(fp)
    72b8:	3009883a 	mov	r4,r6
    72bc:	3807883a 	mov	r3,r7
    72c0:	e0800117 	ldw	r2,4(fp)
    72c4:	e13ffd0d 	sth	r4,-12(fp)
    72c8:	e0fffe05 	stb	r3,-8(fp)
    72cc:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
    72d0:	d0a80217 	ldw	r2,-24568(gp)
    72d4:	d0e80217 	ldw	r3,-24568(gp)
    72d8:	18c00c03 	ldbu	r3,48(r3)
    72dc:	18c00814 	ori	r3,r3,32
    72e0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
    72e4:	d0a80217 	ldw	r2,-24568(gp)
    72e8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
    72ec:	d0a80217 	ldw	r2,-24568(gp)
    72f0:	e0ffff0b 	ldhu	r3,-4(fp)
    72f4:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
    72f8:	d0a80217 	ldw	r2,-24568(gp)
    72fc:	e0fffc17 	ldw	r3,-16(fp)
    7300:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    7304:	e0bffc17 	ldw	r2,-16(fp)
    7308:	e0fffd0b 	ldhu	r3,-12(fp)
    730c:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    7310:	e0bffc17 	ldw	r2,-16(fp)
    7314:	e0fffe03 	ldbu	r3,-8(fp)
    7318:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    731c:	d0e80217 	ldw	r3,-24568(gp)
    7320:	e0bffc17 	ldw	r2,-16(fp)
    7324:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
    7328:	e0bffb17 	ldw	r2,-20(fp)
    732c:	10c00117 	ldw	r3,4(r2)
    7330:	e0bffc17 	ldw	r2,-16(fp)
    7334:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
    7338:	e0bffc17 	ldw	r2,-16(fp)
    733c:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    7340:	e0bffc17 	ldw	r2,-16(fp)
    7344:	e0fffb17 	ldw	r3,-20(fp)
    7348:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    734c:	e0bffb17 	ldw	r2,-20(fp)
    7350:	10800117 	ldw	r2,4(r2)
    7354:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
    7358:	e0bff917 	ldw	r2,-28(fp)
    735c:	10000326 	beq	r2,zero,736c <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    7360:	e0bff917 	ldw	r2,-28(fp)
    7364:	e0fffc17 	ldw	r3,-16(fp)
    7368:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
    736c:	e0bffb17 	ldw	r2,-20(fp)
    7370:	e0fffc17 	ldw	r3,-16(fp)
    7374:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    7378:	d0a80217 	ldw	r2,-24568(gp)
    737c:	10800d03 	ldbu	r2,52(r2)
    7380:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    7384:	e0fffa03 	ldbu	r3,-24(fp)
    7388:	e13ffa03 	ldbu	r4,-24(fp)
    738c:	d0a7ff44 	addi	r2,gp,-24579
    7390:	2085883a 	add	r2,r4,r2
    7394:	10800003 	ldbu	r2,0(r2)
    7398:	1009883a 	mov	r4,r2
    739c:	d0a80217 	ldw	r2,-24568(gp)
    73a0:	10800d43 	ldbu	r2,53(r2)
    73a4:	0084303a 	nor	r2,zero,r2
    73a8:	2084703a 	and	r2,r4,r2
    73ac:	1009883a 	mov	r4,r2
    73b0:	d0a7ff44 	addi	r2,gp,-24579
    73b4:	1885883a 	add	r2,r3,r2
    73b8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
    73bc:	e0fffa03 	ldbu	r3,-24(fp)
    73c0:	d0a7ff44 	addi	r2,gp,-24579
    73c4:	1885883a 	add	r2,r3,r2
    73c8:	10800003 	ldbu	r2,0(r2)
    73cc:	10803fcc 	andi	r2,r2,255
    73d0:	1000071e 	bne	r2,zero,73f0 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    73d4:	d0a80217 	ldw	r2,-24568(gp)
    73d8:	10800d83 	ldbu	r2,54(r2)
    73dc:	0084303a 	nor	r2,zero,r2
    73e0:	1007883a 	mov	r3,r2
    73e4:	d0a7ff03 	ldbu	r2,-24580(gp)
    73e8:	1884703a 	and	r2,r3,r2
    73ec:	d0a7ff05 	stb	r2,-24580(gp)
    }
}
    73f0:	0001883a 	nop
    73f4:	e037883a 	mov	sp,fp
    73f8:	df000017 	ldw	fp,0(sp)
    73fc:	dec00104 	addi	sp,sp,4
    7400:	f800283a 	ret

00007404 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
    7404:	defffb04 	addi	sp,sp,-20
    7408:	dfc00415 	stw	ra,16(sp)
    740c:	df000315 	stw	fp,12(sp)
    7410:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    7414:	0140dc04 	movi	r5,880
    7418:	01000074 	movhi	r4,1
    741c:	211d4604 	addi	r4,r4,29976
    7420:	00056380 	call	5638 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
    7424:	00800074 	movhi	r2,1
    7428:	109d4604 	addi	r2,r2,29976
    742c:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
    7430:	00800074 	movhi	r2,1
    7434:	109d5104 	addi	r2,r2,30020
    7438:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    743c:	e03ffd0d 	sth	zero,-12(fp)
    7440:	00001306 	br	7490 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    7444:	e0bffe17 	ldw	r2,-8(fp)
    7448:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
    744c:	e0bffe17 	ldw	r2,-8(fp)
    7450:	e0ffff17 	ldw	r3,-4(fp)
    7454:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
    7458:	e0bffe17 	ldw	r2,-8(fp)
    745c:	00c00fc4 	movi	r3,63
    7460:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    7464:	e0bffe17 	ldw	r2,-8(fp)
    7468:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
    746c:	e0bffe17 	ldw	r2,-8(fp)
    7470:	10800b04 	addi	r2,r2,44
    7474:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
    7478:	e0bfff17 	ldw	r2,-4(fp)
    747c:	10800b04 	addi	r2,r2,44
    7480:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    7484:	e0bffd0b 	ldhu	r2,-12(fp)
    7488:	10800044 	addi	r2,r2,1
    748c:	e0bffd0d 	sth	r2,-12(fp)
    7490:	e0bffd0b 	ldhu	r2,-12(fp)
    7494:	108004f0 	cmpltui	r2,r2,19
    7498:	103fea1e 	bne	r2,zero,7444 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007444>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    749c:	e0bffe17 	ldw	r2,-8(fp)
    74a0:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
    74a4:	e0bffe17 	ldw	r2,-8(fp)
    74a8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    74ac:	e0bffe17 	ldw	r2,-8(fp)
    74b0:	00c00fc4 	movi	r3,63
    74b4:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    74b8:	e0bffe17 	ldw	r2,-8(fp)
    74bc:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
    74c0:	00800074 	movhi	r2,1
    74c4:	109d4604 	addi	r2,r2,29976
    74c8:	d0a80415 	stw	r2,-24560(gp)
#endif
}
    74cc:	0001883a 	nop
    74d0:	e037883a 	mov	sp,fp
    74d4:	dfc00117 	ldw	ra,4(sp)
    74d8:	df000017 	ldw	fp,0(sp)
    74dc:	dec00204 	addi	sp,sp,8
    74e0:	f800283a 	ret

000074e4 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
    74e4:	defffa04 	addi	sp,sp,-24
    74e8:	dfc00515 	stw	ra,20(sp)
    74ec:	df000415 	stw	fp,16(sp)
    74f0:	df000404 	addi	fp,sp,16
    74f4:	e13ffe15 	stw	r4,-8(fp)
    74f8:	2805883a 	mov	r2,r5
    74fc:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    7500:	e0bffe17 	ldw	r2,-8(fp)
    7504:	10800217 	ldw	r2,8(r2)
    7508:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
    750c:	e0bffd17 	ldw	r2,-12(fp)
    7510:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    7514:	e0bffd17 	ldw	r2,-12(fp)
    7518:	e0ffff0b 	ldhu	r3,-4(fp)
    751c:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    7520:	e0bffd17 	ldw	r2,-12(fp)
    7524:	10c00c03 	ldbu	r3,48(r2)
    7528:	00bff7c4 	movi	r2,-33
    752c:	1884703a 	and	r2,r3,r2
    7530:	1007883a 	mov	r3,r2
    7534:	e0bffd17 	ldw	r2,-12(fp)
    7538:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    753c:	e0bffd17 	ldw	r2,-12(fp)
    7540:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
    7544:	e0bffd17 	ldw	r2,-12(fp)
    7548:	10800c03 	ldbu	r2,48(r2)
    754c:	10803fcc 	andi	r2,r2,255
    7550:	1000181e 	bne	r2,zero,75b4 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
    7554:	e0bffd17 	ldw	r2,-12(fp)
    7558:	10c00d83 	ldbu	r3,54(r2)
    755c:	d0a7ff03 	ldbu	r2,-24580(gp)
    7560:	1884b03a 	or	r2,r3,r2
    7564:	d0a7ff05 	stb	r2,-24580(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    7568:	e0bffd17 	ldw	r2,-12(fp)
    756c:	10800d03 	ldbu	r2,52(r2)
    7570:	10c03fcc 	andi	r3,r2,255
    7574:	e0bffd17 	ldw	r2,-12(fp)
    7578:	10800d03 	ldbu	r2,52(r2)
    757c:	11003fcc 	andi	r4,r2,255
    7580:	d0a7ff44 	addi	r2,gp,-24579
    7584:	2085883a 	add	r2,r4,r2
    7588:	11000003 	ldbu	r4,0(r2)
    758c:	e0bffd17 	ldw	r2,-12(fp)
    7590:	10800d43 	ldbu	r2,53(r2)
    7594:	2084b03a 	or	r2,r4,r2
    7598:	1009883a 	mov	r4,r2
    759c:	d0a7ff44 	addi	r2,gp,-24579
    75a0:	1885883a 	add	r2,r3,r2
    75a4:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
    75a8:	00800044 	movi	r2,1
    75ac:	e0bffc05 	stb	r2,-16(fp)
    75b0:	00000106 	br	75b8 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
    75b4:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
    75b8:	e13ffe17 	ldw	r4,-8(fp)
    75bc:	00075d80 	call	75d8 <OS_FlagUnlink>
    return (sched);
    75c0:	e0bffc03 	ldbu	r2,-16(fp)
}
    75c4:	e037883a 	mov	sp,fp
    75c8:	dfc00117 	ldw	ra,4(sp)
    75cc:	df000017 	ldw	fp,0(sp)
    75d0:	dec00204 	addi	sp,sp,8
    75d4:	f800283a 	ret

000075d8 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
    75d8:	defffa04 	addi	sp,sp,-24
    75dc:	df000515 	stw	fp,20(sp)
    75e0:	df000504 	addi	fp,sp,20
    75e4:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    75e8:	e0bfff17 	ldw	r2,-4(fp)
    75ec:	10800117 	ldw	r2,4(r2)
    75f0:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    75f4:	e0bfff17 	ldw	r2,-4(fp)
    75f8:	10800017 	ldw	r2,0(r2)
    75fc:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
    7600:	e0bffb17 	ldw	r2,-20(fp)
    7604:	10000b1e 	bne	r2,zero,7634 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
    7608:	e0bfff17 	ldw	r2,-4(fp)
    760c:	10800317 	ldw	r2,12(r2)
    7610:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
    7614:	e0bffd17 	ldw	r2,-12(fp)
    7618:	e0fffc17 	ldw	r3,-16(fp)
    761c:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
    7620:	e0bffc17 	ldw	r2,-16(fp)
    7624:	10000b26 	beq	r2,zero,7654 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
    7628:	e0bffc17 	ldw	r2,-16(fp)
    762c:	10000115 	stw	zero,4(r2)
    7630:	00000806 	br	7654 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
    7634:	e0bffb17 	ldw	r2,-20(fp)
    7638:	e0fffc17 	ldw	r3,-16(fp)
    763c:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
    7640:	e0bffc17 	ldw	r2,-16(fp)
    7644:	10000326 	beq	r2,zero,7654 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
    7648:	e0bffc17 	ldw	r2,-16(fp)
    764c:	e0fffb17 	ldw	r3,-20(fp)
    7650:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    7654:	e0bfff17 	ldw	r2,-4(fp)
    7658:	10800217 	ldw	r2,8(r2)
    765c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
    7660:	e0bffe17 	ldw	r2,-8(fp)
    7664:	10000a15 	stw	zero,40(r2)
#endif
}
    7668:	0001883a 	nop
    766c:	e037883a 	mov	sp,fp
    7670:	df000017 	ldw	fp,0(sp)
    7674:	dec00104 	addi	sp,sp,4
    7678:	f800283a 	ret

0000767c <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
    767c:	defff404 	addi	sp,sp,-48
    7680:	df000b15 	stw	fp,44(sp)
    7684:	df000b04 	addi	fp,sp,44
    7688:	e13ffc15 	stw	r4,-16(fp)
    768c:	e17ffd15 	stw	r5,-12(fp)
    7690:	e1bffe15 	stw	r6,-8(fp)
    7694:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    7698:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    769c:	e0bfff17 	ldw	r2,-4(fp)
    76a0:	1000021e 	bne	r2,zero,76ac <OSMemCreate+0x30>
        return ((OS_MEM *)0);
    76a4:	0005883a 	mov	r2,zero
    76a8:	00006506 	br	7840 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
    76ac:	e0bffc17 	ldw	r2,-16(fp)
    76b0:	1000051e 	bne	r2,zero,76c8 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    76b4:	e0bfff17 	ldw	r2,-4(fp)
    76b8:	00c01884 	movi	r3,98
    76bc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    76c0:	0005883a 	mov	r2,zero
    76c4:	00005e06 	br	7840 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
    76c8:	e0bffc17 	ldw	r2,-16(fp)
    76cc:	108000cc 	andi	r2,r2,3
    76d0:	10000526 	beq	r2,zero,76e8 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    76d4:	e0bfff17 	ldw	r2,-4(fp)
    76d8:	00c01884 	movi	r3,98
    76dc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    76e0:	0005883a 	mov	r2,zero
    76e4:	00005606 	br	7840 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
    76e8:	e0bffd17 	ldw	r2,-12(fp)
    76ec:	108000a8 	cmpgeui	r2,r2,2
    76f0:	1000051e 	bne	r2,zero,7708 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
    76f4:	e0bfff17 	ldw	r2,-4(fp)
    76f8:	00c016c4 	movi	r3,91
    76fc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    7700:	0005883a 	mov	r2,zero
    7704:	00004e06 	br	7840 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
    7708:	e0bffe17 	ldw	r2,-8(fp)
    770c:	10800128 	cmpgeui	r2,r2,4
    7710:	1000051e 	bne	r2,zero,7728 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
    7714:	e0bfff17 	ldw	r2,-4(fp)
    7718:	00c01704 	movi	r3,92
    771c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    7720:	0005883a 	mov	r2,zero
    7724:	00004606 	br	7840 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7728:	0005303a 	rdctl	r2,status
    772c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7730:	e0fffb17 	ldw	r3,-20(fp)
    7734:	00bfff84 	movi	r2,-2
    7738:	1884703a 	and	r2,r3,r2
    773c:	1001703a 	wrctl	status,r2
  
  return context;
    7740:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    7744:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
    7748:	d0a7fc17 	ldw	r2,-24592(gp)
    774c:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
    7750:	d0a7fc17 	ldw	r2,-24592(gp)
    7754:	10000326 	beq	r2,zero,7764 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
    7758:	d0a7fc17 	ldw	r2,-24592(gp)
    775c:	10800117 	ldw	r2,4(r2)
    7760:	d0a7fc15 	stw	r2,-24592(gp)
    7764:	e0bff817 	ldw	r2,-32(fp)
    7768:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    776c:	e0bff917 	ldw	r2,-28(fp)
    7770:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
    7774:	e0bffa17 	ldw	r2,-24(fp)
    7778:	1000051e 	bne	r2,zero,7790 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
    777c:	e0bfff17 	ldw	r2,-4(fp)
    7780:	00c01684 	movi	r3,90
    7784:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    7788:	0005883a 	mov	r2,zero
    778c:	00002c06 	br	7840 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    7790:	e0bffc17 	ldw	r2,-16(fp)
    7794:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
    7798:	e0fffc17 	ldw	r3,-16(fp)
    779c:	e0bffe17 	ldw	r2,-8(fp)
    77a0:	1885883a 	add	r2,r3,r2
    77a4:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
    77a8:	e03ff715 	stw	zero,-36(fp)
    77ac:	00000c06 	br	77e0 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
    77b0:	e0bff617 	ldw	r2,-40(fp)
    77b4:	e0fff517 	ldw	r3,-44(fp)
    77b8:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
    77bc:	e0bff517 	ldw	r2,-44(fp)
    77c0:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    77c4:	e0fff517 	ldw	r3,-44(fp)
    77c8:	e0bffe17 	ldw	r2,-8(fp)
    77cc:	1885883a 	add	r2,r3,r2
    77d0:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
    77d4:	e0bff717 	ldw	r2,-36(fp)
    77d8:	10800044 	addi	r2,r2,1
    77dc:	e0bff715 	stw	r2,-36(fp)
    77e0:	e0bffd17 	ldw	r2,-12(fp)
    77e4:	10bfffc4 	addi	r2,r2,-1
    77e8:	e0fff717 	ldw	r3,-36(fp)
    77ec:	18bff036 	bltu	r3,r2,77b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70077b0>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
    77f0:	e0bff617 	ldw	r2,-40(fp)
    77f4:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
    77f8:	e0bffa17 	ldw	r2,-24(fp)
    77fc:	e0fffc17 	ldw	r3,-16(fp)
    7800:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
    7804:	e0bffa17 	ldw	r2,-24(fp)
    7808:	e0fffc17 	ldw	r3,-16(fp)
    780c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
    7810:	e0bffa17 	ldw	r2,-24(fp)
    7814:	e0fffd17 	ldw	r3,-12(fp)
    7818:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
    781c:	e0bffa17 	ldw	r2,-24(fp)
    7820:	e0fffd17 	ldw	r3,-12(fp)
    7824:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
    7828:	e0bffa17 	ldw	r2,-24(fp)
    782c:	e0fffe17 	ldw	r3,-8(fp)
    7830:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
    7834:	e0bfff17 	ldw	r2,-4(fp)
    7838:	10000005 	stb	zero,0(r2)
    return (pmem);
    783c:	e0bffa17 	ldw	r2,-24(fp)
}
    7840:	e037883a 	mov	sp,fp
    7844:	df000017 	ldw	fp,0(sp)
    7848:	dec00104 	addi	sp,sp,4
    784c:	f800283a 	ret

00007850 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
    7850:	defff804 	addi	sp,sp,-32
    7854:	df000715 	stw	fp,28(sp)
    7858:	df000704 	addi	fp,sp,28
    785c:	e13ffe15 	stw	r4,-8(fp)
    7860:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    7864:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    7868:	e0bfff17 	ldw	r2,-4(fp)
    786c:	1000021e 	bne	r2,zero,7878 <OSMemGet+0x28>
        return ((void *)0);
    7870:	0005883a 	mov	r2,zero
    7874:	00002e06 	br	7930 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
    7878:	e0bffe17 	ldw	r2,-8(fp)
    787c:	1000051e 	bne	r2,zero,7894 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    7880:	e0bfff17 	ldw	r2,-4(fp)
    7884:	00c01804 	movi	r3,96
    7888:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    788c:	0005883a 	mov	r2,zero
    7890:	00002706 	br	7930 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7894:	0005303a 	rdctl	r2,status
    7898:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    789c:	e0fffd17 	ldw	r3,-12(fp)
    78a0:	00bfff84 	movi	r2,-2
    78a4:	1884703a 	and	r2,r3,r2
    78a8:	1001703a 	wrctl	status,r2
  
  return context;
    78ac:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    78b0:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
    78b4:	e0bffe17 	ldw	r2,-8(fp)
    78b8:	10800417 	ldw	r2,16(r2)
    78bc:	10001426 	beq	r2,zero,7910 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
    78c0:	e0bffe17 	ldw	r2,-8(fp)
    78c4:	10800117 	ldw	r2,4(r2)
    78c8:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
    78cc:	e0bffb17 	ldw	r2,-20(fp)
    78d0:	10c00017 	ldw	r3,0(r2)
    78d4:	e0bffe17 	ldw	r2,-8(fp)
    78d8:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
    78dc:	e0bffe17 	ldw	r2,-8(fp)
    78e0:	10800417 	ldw	r2,16(r2)
    78e4:	10ffffc4 	addi	r3,r2,-1
    78e8:	e0bffe17 	ldw	r2,-8(fp)
    78ec:	10c00415 	stw	r3,16(r2)
    78f0:	e0bff917 	ldw	r2,-28(fp)
    78f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    78f8:	e0bffa17 	ldw	r2,-24(fp)
    78fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
    7900:	e0bfff17 	ldw	r2,-4(fp)
    7904:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
    7908:	e0bffb17 	ldw	r2,-20(fp)
    790c:	00000806 	br	7930 <OSMemGet+0xe0>
    7910:	e0bff917 	ldw	r2,-28(fp)
    7914:	e0bffc15 	stw	r2,-16(fp)
    7918:	e0bffc17 	ldw	r2,-16(fp)
    791c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
    7920:	e0bfff17 	ldw	r2,-4(fp)
    7924:	00c01744 	movi	r3,93
    7928:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
    792c:	0005883a 	mov	r2,zero
}
    7930:	e037883a 	mov	sp,fp
    7934:	df000017 	ldw	fp,0(sp)
    7938:	dec00104 	addi	sp,sp,4
    793c:	f800283a 	ret

00007940 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    7940:	defff704 	addi	sp,sp,-36
    7944:	dfc00815 	stw	ra,32(sp)
    7948:	df000715 	stw	fp,28(sp)
    794c:	df000704 	addi	fp,sp,28
    7950:	e13ffd15 	stw	r4,-12(fp)
    7954:	e17ffe15 	stw	r5,-8(fp)
    7958:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    795c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    7960:	e0bfff17 	ldw	r2,-4(fp)
    7964:	1000021e 	bne	r2,zero,7970 <OSMemNameGet+0x30>
        return (0);
    7968:	0005883a 	mov	r2,zero
    796c:	00002b06 	br	7a1c <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    7970:	e0bffd17 	ldw	r2,-12(fp)
    7974:	1000051e 	bne	r2,zero,798c <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    7978:	e0bfff17 	ldw	r2,-4(fp)
    797c:	00c01804 	movi	r3,96
    7980:	10c00005 	stb	r3,0(r2)
        return (0);
    7984:	0005883a 	mov	r2,zero
    7988:	00002406 	br	7a1c <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    798c:	e0bffe17 	ldw	r2,-8(fp)
    7990:	1000051e 	bne	r2,zero,79a8 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    7994:	e0bfff17 	ldw	r2,-4(fp)
    7998:	00c00304 	movi	r3,12
    799c:	10c00005 	stb	r3,0(r2)
        return (0);
    79a0:	0005883a 	mov	r2,zero
    79a4:	00001d06 	br	7a1c <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    79a8:	d0a80103 	ldbu	r2,-24572(gp)
    79ac:	10803fcc 	andi	r2,r2,255
    79b0:	10000526 	beq	r2,zero,79c8 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
    79b4:	e0bfff17 	ldw	r2,-4(fp)
    79b8:	00c00444 	movi	r3,17
    79bc:	10c00005 	stb	r3,0(r2)
        return (0);
    79c0:	0005883a 	mov	r2,zero
    79c4:	00001506 	br	7a1c <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    79c8:	0005303a 	rdctl	r2,status
    79cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    79d0:	e0fffb17 	ldw	r3,-20(fp)
    79d4:	00bfff84 	movi	r2,-2
    79d8:	1884703a 	and	r2,r3,r2
    79dc:	1001703a 	wrctl	status,r2
  
  return context;
    79e0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    79e4:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
    79e8:	e0bffd17 	ldw	r2,-12(fp)
    79ec:	10800504 	addi	r2,r2,20
    79f0:	100b883a 	mov	r5,r2
    79f4:	e13ffe17 	ldw	r4,-8(fp)
    79f8:	00058380 	call	5838 <OS_StrCopy>
    79fc:	e0bffa05 	stb	r2,-24(fp)
    7a00:	e0bff917 	ldw	r2,-28(fp)
    7a04:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7a08:	e0bffc17 	ldw	r2,-16(fp)
    7a0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    7a10:	e0bfff17 	ldw	r2,-4(fp)
    7a14:	10000005 	stb	zero,0(r2)
    return (len);
    7a18:	e0bffa03 	ldbu	r2,-24(fp)
}
    7a1c:	e037883a 	mov	sp,fp
    7a20:	dfc00117 	ldw	ra,4(sp)
    7a24:	df000017 	ldw	fp,0(sp)
    7a28:	dec00204 	addi	sp,sp,8
    7a2c:	f800283a 	ret

00007a30 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    7a30:	defff604 	addi	sp,sp,-40
    7a34:	dfc00915 	stw	ra,36(sp)
    7a38:	df000815 	stw	fp,32(sp)
    7a3c:	df000804 	addi	fp,sp,32
    7a40:	e13ffd15 	stw	r4,-12(fp)
    7a44:	e17ffe15 	stw	r5,-8(fp)
    7a48:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7a4c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    7a50:	e0bfff17 	ldw	r2,-4(fp)
    7a54:	10003526 	beq	r2,zero,7b2c <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    7a58:	e0bffd17 	ldw	r2,-12(fp)
    7a5c:	1000041e 	bne	r2,zero,7a70 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    7a60:	e0bfff17 	ldw	r2,-4(fp)
    7a64:	00c01804 	movi	r3,96
    7a68:	10c00005 	stb	r3,0(r2)
        return;
    7a6c:	00003006 	br	7b30 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    7a70:	e0bffe17 	ldw	r2,-8(fp)
    7a74:	1000041e 	bne	r2,zero,7a88 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    7a78:	e0bfff17 	ldw	r2,-4(fp)
    7a7c:	00c00304 	movi	r3,12
    7a80:	10c00005 	stb	r3,0(r2)
        return;
    7a84:	00002a06 	br	7b30 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    7a88:	d0a80103 	ldbu	r2,-24572(gp)
    7a8c:	10803fcc 	andi	r2,r2,255
    7a90:	10000426 	beq	r2,zero,7aa4 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    7a94:	e0bfff17 	ldw	r2,-4(fp)
    7a98:	00c00484 	movi	r3,18
    7a9c:	10c00005 	stb	r3,0(r2)
        return;
    7aa0:	00002306 	br	7b30 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7aa4:	0005303a 	rdctl	r2,status
    7aa8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7aac:	e0fffc17 	ldw	r3,-16(fp)
    7ab0:	00bfff84 	movi	r2,-2
    7ab4:	1884703a 	and	r2,r3,r2
    7ab8:	1001703a 	wrctl	status,r2
  
  return context;
    7abc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    7ac0:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    7ac4:	e13ffe17 	ldw	r4,-8(fp)
    7ac8:	00058ac0 	call	58ac <OS_StrLen>
    7acc:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
    7ad0:	e0bffa03 	ldbu	r2,-24(fp)
    7ad4:	10800830 	cmpltui	r2,r2,32
    7ad8:	1000081e 	bne	r2,zero,7afc <OSMemNameSet+0xcc>
    7adc:	e0bff817 	ldw	r2,-32(fp)
    7ae0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7ae4:	e0bff917 	ldw	r2,-28(fp)
    7ae8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
    7aec:	e0bfff17 	ldw	r2,-4(fp)
    7af0:	00c018c4 	movi	r3,99
    7af4:	10c00005 	stb	r3,0(r2)
        return;
    7af8:	00000d06 	br	7b30 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    7afc:	e0bffd17 	ldw	r2,-12(fp)
    7b00:	10800504 	addi	r2,r2,20
    7b04:	e17ffe17 	ldw	r5,-8(fp)
    7b08:	1009883a 	mov	r4,r2
    7b0c:	00058380 	call	5838 <OS_StrCopy>
    7b10:	e0bff817 	ldw	r2,-32(fp)
    7b14:	e0bffb15 	stw	r2,-20(fp)
    7b18:	e0bffb17 	ldw	r2,-20(fp)
    7b1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    7b20:	e0bfff17 	ldw	r2,-4(fp)
    7b24:	10000005 	stb	zero,0(r2)
    7b28:	00000106 	br	7b30 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    7b2c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    7b30:	e037883a 	mov	sp,fp
    7b34:	dfc00117 	ldw	ra,4(sp)
    7b38:	df000017 	ldw	fp,0(sp)
    7b3c:	dec00204 	addi	sp,sp,8
    7b40:	f800283a 	ret

00007b44 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
    7b44:	defff904 	addi	sp,sp,-28
    7b48:	df000615 	stw	fp,24(sp)
    7b4c:	df000604 	addi	fp,sp,24
    7b50:	e13ffe15 	stw	r4,-8(fp)
    7b54:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7b58:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    7b5c:	e0bffe17 	ldw	r2,-8(fp)
    7b60:	1000021e 	bne	r2,zero,7b6c <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    7b64:	00801804 	movi	r2,96
    7b68:	00002806 	br	7c0c <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
    7b6c:	e0bfff17 	ldw	r2,-4(fp)
    7b70:	1000021e 	bne	r2,zero,7b7c <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
    7b74:	008017c4 	movi	r2,95
    7b78:	00002406 	br	7c0c <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7b7c:	0005303a 	rdctl	r2,status
    7b80:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7b84:	e0fffd17 	ldw	r3,-12(fp)
    7b88:	00bfff84 	movi	r2,-2
    7b8c:	1884703a 	and	r2,r3,r2
    7b90:	1001703a 	wrctl	status,r2
  
  return context;
    7b94:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    7b98:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
    7b9c:	e0bffe17 	ldw	r2,-8(fp)
    7ba0:	10c00417 	ldw	r3,16(r2)
    7ba4:	e0bffe17 	ldw	r2,-8(fp)
    7ba8:	10800317 	ldw	r2,12(r2)
    7bac:	18800636 	bltu	r3,r2,7bc8 <OSMemPut+0x84>
    7bb0:	e0bffa17 	ldw	r2,-24(fp)
    7bb4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7bb8:	e0bffb17 	ldw	r2,-20(fp)
    7bbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
    7bc0:	00801784 	movi	r2,94
    7bc4:	00001106 	br	7c0c <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
    7bc8:	e0bffe17 	ldw	r2,-8(fp)
    7bcc:	10c00117 	ldw	r3,4(r2)
    7bd0:	e0bfff17 	ldw	r2,-4(fp)
    7bd4:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
    7bd8:	e0bffe17 	ldw	r2,-8(fp)
    7bdc:	e0ffff17 	ldw	r3,-4(fp)
    7be0:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
    7be4:	e0bffe17 	ldw	r2,-8(fp)
    7be8:	10800417 	ldw	r2,16(r2)
    7bec:	10c00044 	addi	r3,r2,1
    7bf0:	e0bffe17 	ldw	r2,-8(fp)
    7bf4:	10c00415 	stw	r3,16(r2)
    7bf8:	e0bffa17 	ldw	r2,-24(fp)
    7bfc:	e0bffc15 	stw	r2,-16(fp)
    7c00:	e0bffc17 	ldw	r2,-16(fp)
    7c04:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
    7c08:	0005883a 	mov	r2,zero
}
    7c0c:	e037883a 	mov	sp,fp
    7c10:	df000017 	ldw	fp,0(sp)
    7c14:	dec00104 	addi	sp,sp,4
    7c18:	f800283a 	ret

00007c1c <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
    7c1c:	defffa04 	addi	sp,sp,-24
    7c20:	df000515 	stw	fp,20(sp)
    7c24:	df000504 	addi	fp,sp,20
    7c28:	e13ffe15 	stw	r4,-8(fp)
    7c2c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7c30:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    7c34:	e0bffe17 	ldw	r2,-8(fp)
    7c38:	1000021e 	bne	r2,zero,7c44 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    7c3c:	00801804 	movi	r2,96
    7c40:	00002c06 	br	7cf4 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
    7c44:	e0bfff17 	ldw	r2,-4(fp)
    7c48:	1000021e 	bne	r2,zero,7c54 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
    7c4c:	00801844 	movi	r2,97
    7c50:	00002806 	br	7cf4 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7c54:	0005303a 	rdctl	r2,status
    7c58:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7c5c:	e0fffc17 	ldw	r3,-16(fp)
    7c60:	00bfff84 	movi	r2,-2
    7c64:	1884703a 	and	r2,r3,r2
    7c68:	1001703a 	wrctl	status,r2
  
  return context;
    7c6c:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    7c70:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
    7c74:	e0bffe17 	ldw	r2,-8(fp)
    7c78:	10c00017 	ldw	r3,0(r2)
    7c7c:	e0bfff17 	ldw	r2,-4(fp)
    7c80:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
    7c84:	e0bffe17 	ldw	r2,-8(fp)
    7c88:	10c00117 	ldw	r3,4(r2)
    7c8c:	e0bfff17 	ldw	r2,-4(fp)
    7c90:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
    7c94:	e0bffe17 	ldw	r2,-8(fp)
    7c98:	10c00217 	ldw	r3,8(r2)
    7c9c:	e0bfff17 	ldw	r2,-4(fp)
    7ca0:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
    7ca4:	e0bffe17 	ldw	r2,-8(fp)
    7ca8:	10c00317 	ldw	r3,12(r2)
    7cac:	e0bfff17 	ldw	r2,-4(fp)
    7cb0:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
    7cb4:	e0bffe17 	ldw	r2,-8(fp)
    7cb8:	10c00417 	ldw	r3,16(r2)
    7cbc:	e0bfff17 	ldw	r2,-4(fp)
    7cc0:	10c00415 	stw	r3,16(r2)
    7cc4:	e0bffb17 	ldw	r2,-20(fp)
    7cc8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7ccc:	e0bffd17 	ldw	r2,-12(fp)
    7cd0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
    7cd4:	e0bfff17 	ldw	r2,-4(fp)
    7cd8:	10c00317 	ldw	r3,12(r2)
    7cdc:	e0bfff17 	ldw	r2,-4(fp)
    7ce0:	10800417 	ldw	r2,16(r2)
    7ce4:	1887c83a 	sub	r3,r3,r2
    7ce8:	e0bfff17 	ldw	r2,-4(fp)
    7cec:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
    7cf0:	0005883a 	mov	r2,zero
}
    7cf4:	e037883a 	mov	sp,fp
    7cf8:	df000017 	ldw	fp,0(sp)
    7cfc:	dec00104 	addi	sp,sp,4
    7d00:	f800283a 	ret

00007d04 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
    7d04:	defffc04 	addi	sp,sp,-16
    7d08:	dfc00315 	stw	ra,12(sp)
    7d0c:	df000215 	stw	fp,8(sp)
    7d10:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    7d14:	01430c04 	movi	r5,3120
    7d18:	01000074 	movhi	r4,1
    7d1c:	211e2204 	addi	r4,r4,30856
    7d20:	00056380 	call	5638 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    7d24:	00800074 	movhi	r2,1
    7d28:	109e2204 	addi	r2,r2,30856
    7d2c:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    7d30:	e03fff0d 	sth	zero,-4(fp)
    7d34:	00001306 	br	7d84 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
    7d38:	e0bfff0b 	ldhu	r2,-4(fp)
    7d3c:	10800044 	addi	r2,r2,1
    7d40:	10c00d24 	muli	r3,r2,52
    7d44:	00800074 	movhi	r2,1
    7d48:	109e2204 	addi	r2,r2,30856
    7d4c:	1887883a 	add	r3,r3,r2
    7d50:	e0bffe17 	ldw	r2,-8(fp)
    7d54:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
    7d58:	e0bffe17 	ldw	r2,-8(fp)
    7d5c:	00c00fc4 	movi	r3,63
    7d60:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
    7d64:	e0bffe17 	ldw	r2,-8(fp)
    7d68:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
    7d6c:	e0bffe17 	ldw	r2,-8(fp)
    7d70:	10800d04 	addi	r2,r2,52
    7d74:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    7d78:	e0bfff0b 	ldhu	r2,-4(fp)
    7d7c:	10800044 	addi	r2,r2,1
    7d80:	e0bfff0d 	sth	r2,-4(fp)
    7d84:	e0bfff0b 	ldhu	r2,-4(fp)
    7d88:	10800ef0 	cmpltui	r2,r2,59
    7d8c:	103fea1e 	bne	r2,zero,7d38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d38>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
    7d90:	e0bffe17 	ldw	r2,-8(fp)
    7d94:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
    7d98:	e0bffe17 	ldw	r2,-8(fp)
    7d9c:	00c00fc4 	movi	r3,63
    7da0:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
    7da4:	e0bffe17 	ldw	r2,-8(fp)
    7da8:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
    7dac:	00800074 	movhi	r2,1
    7db0:	109e2204 	addi	r2,r2,30856
    7db4:	d0a7fc15 	stw	r2,-24592(gp)
#endif
}
    7db8:	0001883a 	nop
    7dbc:	e037883a 	mov	sp,fp
    7dc0:	dfc00117 	ldw	ra,4(sp)
    7dc4:	df000017 	ldw	fp,0(sp)
    7dc8:	dec00204 	addi	sp,sp,8
    7dcc:	f800283a 	ret

00007dd0 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
    7dd0:	defff804 	addi	sp,sp,-32
    7dd4:	df000715 	stw	fp,28(sp)
    7dd8:	df000704 	addi	fp,sp,28
    7ddc:	e13ffe15 	stw	r4,-8(fp)
    7de0:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7de4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    7de8:	e0bfff17 	ldw	r2,-4(fp)
    7dec:	1000021e 	bne	r2,zero,7df8 <OSQAccept+0x28>
        return ((void *)0);
    7df0:	0005883a 	mov	r2,zero
    7df4:	00004206 	br	7f00 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    7df8:	e0bffe17 	ldw	r2,-8(fp)
    7dfc:	1000051e 	bne	r2,zero,7e14 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    7e00:	e0bfff17 	ldw	r2,-4(fp)
    7e04:	00c00104 	movi	r3,4
    7e08:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    7e0c:	0005883a 	mov	r2,zero
    7e10:	00003b06 	br	7f00 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    7e14:	e0bffe17 	ldw	r2,-8(fp)
    7e18:	10800003 	ldbu	r2,0(r2)
    7e1c:	10803fcc 	andi	r2,r2,255
    7e20:	108000a0 	cmpeqi	r2,r2,2
    7e24:	1000051e 	bne	r2,zero,7e3c <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    7e28:	e0bfff17 	ldw	r2,-4(fp)
    7e2c:	00c00044 	movi	r3,1
    7e30:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    7e34:	0005883a 	mov	r2,zero
    7e38:	00003106 	br	7f00 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7e3c:	0005303a 	rdctl	r2,status
    7e40:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7e44:	e0fffd17 	ldw	r3,-12(fp)
    7e48:	00bfff84 	movi	r2,-2
    7e4c:	1884703a 	and	r2,r3,r2
    7e50:	1001703a 	wrctl	status,r2
  
  return context;
    7e54:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    7e58:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    7e5c:	e0bffe17 	ldw	r2,-8(fp)
    7e60:	10800117 	ldw	r2,4(r2)
    7e64:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    7e68:	e0bffc17 	ldw	r2,-16(fp)
    7e6c:	1080058b 	ldhu	r2,22(r2)
    7e70:	10bfffcc 	andi	r2,r2,65535
    7e74:	10001926 	beq	r2,zero,7edc <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    7e78:	e0bffc17 	ldw	r2,-16(fp)
    7e7c:	10800417 	ldw	r2,16(r2)
    7e80:	11000104 	addi	r4,r2,4
    7e84:	e0fffc17 	ldw	r3,-16(fp)
    7e88:	19000415 	stw	r4,16(r3)
    7e8c:	10800017 	ldw	r2,0(r2)
    7e90:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    7e94:	e0bffc17 	ldw	r2,-16(fp)
    7e98:	1080058b 	ldhu	r2,22(r2)
    7e9c:	10bfffc4 	addi	r2,r2,-1
    7ea0:	1007883a 	mov	r3,r2
    7ea4:	e0bffc17 	ldw	r2,-16(fp)
    7ea8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    7eac:	e0bffc17 	ldw	r2,-16(fp)
    7eb0:	10c00417 	ldw	r3,16(r2)
    7eb4:	e0bffc17 	ldw	r2,-16(fp)
    7eb8:	10800217 	ldw	r2,8(r2)
    7ebc:	1880041e 	bne	r3,r2,7ed0 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
    7ec0:	e0bffc17 	ldw	r2,-16(fp)
    7ec4:	10c00117 	ldw	r3,4(r2)
    7ec8:	e0bffc17 	ldw	r2,-16(fp)
    7ecc:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
    7ed0:	e0bfff17 	ldw	r2,-4(fp)
    7ed4:	10000005 	stb	zero,0(r2)
    7ed8:	00000406 	br	7eec <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
    7edc:	e0bfff17 	ldw	r2,-4(fp)
    7ee0:	00c007c4 	movi	r3,31
    7ee4:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
    7ee8:	e03ff915 	stw	zero,-28(fp)
    7eec:	e0bffa17 	ldw	r2,-24(fp)
    7ef0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7ef4:	e0bffb17 	ldw	r2,-20(fp)
    7ef8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
    7efc:	e0bff917 	ldw	r2,-28(fp)
}
    7f00:	e037883a 	mov	sp,fp
    7f04:	df000017 	ldw	fp,0(sp)
    7f08:	dec00104 	addi	sp,sp,4
    7f0c:	f800283a 	ret

00007f10 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
    7f10:	defff404 	addi	sp,sp,-48
    7f14:	dfc00b15 	stw	ra,44(sp)
    7f18:	df000a15 	stw	fp,40(sp)
    7f1c:	df000a04 	addi	fp,sp,40
    7f20:	e13ffe15 	stw	r4,-8(fp)
    7f24:	2805883a 	mov	r2,r5
    7f28:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7f2c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    7f30:	d0a80103 	ldbu	r2,-24572(gp)
    7f34:	10803fcc 	andi	r2,r2,255
    7f38:	10000226 	beq	r2,zero,7f44 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    7f3c:	0005883a 	mov	r2,zero
    7f40:	00005906 	br	80a8 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7f44:	0005303a 	rdctl	r2,status
    7f48:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7f4c:	e0fffd17 	ldw	r3,-12(fp)
    7f50:	00bfff84 	movi	r2,-2
    7f54:	1884703a 	and	r2,r3,r2
    7f58:	1001703a 	wrctl	status,r2
  
  return context;
    7f5c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    7f60:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    7f64:	d0a80017 	ldw	r2,-24576(gp)
    7f68:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    7f6c:	d0a80017 	ldw	r2,-24576(gp)
    7f70:	10000326 	beq	r2,zero,7f80 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    7f74:	d0a80017 	ldw	r2,-24576(gp)
    7f78:	10800117 	ldw	r2,4(r2)
    7f7c:	d0a80015 	stw	r2,-24576(gp)
    7f80:	e0bff717 	ldw	r2,-36(fp)
    7f84:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7f88:	e0bff817 	ldw	r2,-32(fp)
    7f8c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
    7f90:	e0bff617 	ldw	r2,-40(fp)
    7f94:	10004326 	beq	r2,zero,80a4 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7f98:	0005303a 	rdctl	r2,status
    7f9c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7fa0:	e0fff917 	ldw	r3,-28(fp)
    7fa4:	00bfff84 	movi	r2,-2
    7fa8:	1884703a 	and	r2,r3,r2
    7fac:	1001703a 	wrctl	status,r2
  
  return context;
    7fb0:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
    7fb4:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
    7fb8:	d0a7fe17 	ldw	r2,-24584(gp)
    7fbc:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
    7fc0:	e0bffb17 	ldw	r2,-20(fp)
    7fc4:	10002d26 	beq	r2,zero,807c <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
    7fc8:	d0a7fe17 	ldw	r2,-24584(gp)
    7fcc:	10800017 	ldw	r2,0(r2)
    7fd0:	d0a7fe15 	stw	r2,-24584(gp)
    7fd4:	e0bff717 	ldw	r2,-36(fp)
    7fd8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7fdc:	e0bffa17 	ldw	r2,-24(fp)
    7fe0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
    7fe4:	e0bffb17 	ldw	r2,-20(fp)
    7fe8:	e0fffe17 	ldw	r3,-8(fp)
    7fec:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
    7ff0:	e0bfff0b 	ldhu	r2,-4(fp)
    7ff4:	1085883a 	add	r2,r2,r2
    7ff8:	1085883a 	add	r2,r2,r2
    7ffc:	1007883a 	mov	r3,r2
    8000:	e0bffe17 	ldw	r2,-8(fp)
    8004:	10c7883a 	add	r3,r2,r3
    8008:	e0bffb17 	ldw	r2,-20(fp)
    800c:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
    8010:	e0bffb17 	ldw	r2,-20(fp)
    8014:	e0fffe17 	ldw	r3,-8(fp)
    8018:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
    801c:	e0bffb17 	ldw	r2,-20(fp)
    8020:	e0fffe17 	ldw	r3,-8(fp)
    8024:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
    8028:	e0bffb17 	ldw	r2,-20(fp)
    802c:	e0ffff0b 	ldhu	r3,-4(fp)
    8030:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
    8034:	e0bffb17 	ldw	r2,-20(fp)
    8038:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
    803c:	e0bff617 	ldw	r2,-40(fp)
    8040:	00c00084 	movi	r3,2
    8044:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
    8048:	e0bff617 	ldw	r2,-40(fp)
    804c:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
    8050:	e0bff617 	ldw	r2,-40(fp)
    8054:	e0fffb17 	ldw	r3,-20(fp)
    8058:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
    805c:	e0bff617 	ldw	r2,-40(fp)
    8060:	00c00fc4 	movi	r3,63
    8064:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
    8068:	e0bff617 	ldw	r2,-40(fp)
    806c:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
    8070:	e13ff617 	ldw	r4,-40(fp)
    8074:	00052580 	call	5258 <OS_EventWaitListInit>
    8078:	00000a06 	br	80a4 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
    807c:	d0e80017 	ldw	r3,-24576(gp)
    8080:	e0bff617 	ldw	r2,-40(fp)
    8084:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
    8088:	e0bff617 	ldw	r2,-40(fp)
    808c:	d0a80015 	stw	r2,-24576(gp)
    8090:	e0bff717 	ldw	r2,-36(fp)
    8094:	e0bffc15 	stw	r2,-16(fp)
    8098:	e0bffc17 	ldw	r2,-16(fp)
    809c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
    80a0:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
    80a4:	e0bff617 	ldw	r2,-40(fp)
}
    80a8:	e037883a 	mov	sp,fp
    80ac:	dfc00117 	ldw	ra,4(sp)
    80b0:	df000017 	ldw	fp,0(sp)
    80b4:	dec00204 	addi	sp,sp,8
    80b8:	f800283a 	ret

000080bc <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    80bc:	defff204 	addi	sp,sp,-56
    80c0:	dfc00d15 	stw	ra,52(sp)
    80c4:	df000c15 	stw	fp,48(sp)
    80c8:	df000c04 	addi	fp,sp,48
    80cc:	e13ffd15 	stw	r4,-12(fp)
    80d0:	2805883a 	mov	r2,r5
    80d4:	e1bfff15 	stw	r6,-4(fp)
    80d8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    80dc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    80e0:	e0bfff17 	ldw	r2,-4(fp)
    80e4:	1000021e 	bne	r2,zero,80f0 <OSQDel+0x34>
        return (pevent);
    80e8:	e0bffd17 	ldw	r2,-12(fp)
    80ec:	00008e06 	br	8328 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    80f0:	e0bffd17 	ldw	r2,-12(fp)
    80f4:	1000051e 	bne	r2,zero,810c <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    80f8:	e0bfff17 	ldw	r2,-4(fp)
    80fc:	00c00104 	movi	r3,4
    8100:	10c00005 	stb	r3,0(r2)
        return (pevent);
    8104:	e0bffd17 	ldw	r2,-12(fp)
    8108:	00008706 	br	8328 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    810c:	e0bffd17 	ldw	r2,-12(fp)
    8110:	10800003 	ldbu	r2,0(r2)
    8114:	10803fcc 	andi	r2,r2,255
    8118:	108000a0 	cmpeqi	r2,r2,2
    811c:	1000051e 	bne	r2,zero,8134 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    8120:	e0bfff17 	ldw	r2,-4(fp)
    8124:	00c00044 	movi	r3,1
    8128:	10c00005 	stb	r3,0(r2)
        return (pevent);
    812c:	e0bffd17 	ldw	r2,-12(fp)
    8130:	00007d06 	br	8328 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    8134:	d0a80103 	ldbu	r2,-24572(gp)
    8138:	10803fcc 	andi	r2,r2,255
    813c:	10000526 	beq	r2,zero,8154 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    8140:	e0bfff17 	ldw	r2,-4(fp)
    8144:	00c003c4 	movi	r3,15
    8148:	10c00005 	stb	r3,0(r2)
        return (pevent);
    814c:	e0bffd17 	ldw	r2,-12(fp)
    8150:	00007506 	br	8328 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8154:	0005303a 	rdctl	r2,status
    8158:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    815c:	e0fffc17 	ldw	r3,-16(fp)
    8160:	00bfff84 	movi	r2,-2
    8164:	1884703a 	and	r2,r3,r2
    8168:	1001703a 	wrctl	status,r2
  
  return context;
    816c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8170:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
    8174:	e0bffd17 	ldw	r2,-12(fp)
    8178:	10800283 	ldbu	r2,10(r2)
    817c:	10803fcc 	andi	r2,r2,255
    8180:	10000326 	beq	r2,zero,8190 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    8184:	00800044 	movi	r2,1
    8188:	e0bff405 	stb	r2,-48(fp)
    818c:	00000106 	br	8194 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    8190:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    8194:	e0bffe03 	ldbu	r2,-8(fp)
    8198:	10000326 	beq	r2,zero,81a8 <OSQDel+0xec>
    819c:	10800060 	cmpeqi	r2,r2,1
    81a0:	1000301e 	bne	r2,zero,8264 <OSQDel+0x1a8>
    81a4:	00005506 	br	82fc <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
    81a8:	e0bff403 	ldbu	r2,-48(fp)
    81ac:	10001e1e 	bne	r2,zero,8228 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    81b0:	e0bffd17 	ldw	r2,-12(fp)
    81b4:	00c00fc4 	movi	r3,63
    81b8:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    81bc:	e0bffd17 	ldw	r2,-12(fp)
    81c0:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
    81c4:	e0bffd17 	ldw	r2,-12(fp)
    81c8:	10800117 	ldw	r2,4(r2)
    81cc:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
    81d0:	d0e7fe17 	ldw	r3,-24584(gp)
    81d4:	e0bff817 	ldw	r2,-32(fp)
    81d8:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
    81dc:	e0bff817 	ldw	r2,-32(fp)
    81e0:	d0a7fe15 	stw	r2,-24584(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    81e4:	e0bffd17 	ldw	r2,-12(fp)
    81e8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    81ec:	d0e80017 	ldw	r3,-24576(gp)
    81f0:	e0bffd17 	ldw	r2,-12(fp)
    81f4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    81f8:	e0bffd17 	ldw	r2,-12(fp)
    81fc:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    8200:	e0bffd17 	ldw	r2,-12(fp)
    8204:	d0a80015 	stw	r2,-24576(gp)
    8208:	e0bff617 	ldw	r2,-40(fp)
    820c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8210:	e0bff717 	ldw	r2,-36(fp)
    8214:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    8218:	e0bfff17 	ldw	r2,-4(fp)
    821c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
    8220:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    8224:	00003f06 	br	8324 <OSQDel+0x268>
    8228:	e0bff617 	ldw	r2,-40(fp)
    822c:	e0bff915 	stw	r2,-28(fp)
    8230:	e0bff917 	ldw	r2,-28(fp)
    8234:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    8238:	e0bfff17 	ldw	r2,-4(fp)
    823c:	00c01244 	movi	r3,73
    8240:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    8244:	e0bffd17 	ldw	r2,-12(fp)
    8248:	e0bff515 	stw	r2,-44(fp)
             }
             break;
    824c:	00003506 	br	8324 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
    8250:	000f883a 	mov	r7,zero
    8254:	01800104 	movi	r6,4
    8258:	000b883a 	mov	r5,zero
    825c:	e13ffd17 	ldw	r4,-12(fp)
    8260:	0004ca80 	call	4ca8 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
    8264:	e0bffd17 	ldw	r2,-12(fp)
    8268:	10800283 	ldbu	r2,10(r2)
    826c:	10803fcc 	andi	r2,r2,255
    8270:	103ff71e 	bne	r2,zero,8250 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008250>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    8274:	e0bffd17 	ldw	r2,-12(fp)
    8278:	00c00fc4 	movi	r3,63
    827c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    8280:	e0bffd17 	ldw	r2,-12(fp)
    8284:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
    8288:	e0bffd17 	ldw	r2,-12(fp)
    828c:	10800117 	ldw	r2,4(r2)
    8290:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
    8294:	d0e7fe17 	ldw	r3,-24584(gp)
    8298:	e0bff817 	ldw	r2,-32(fp)
    829c:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
    82a0:	e0bff817 	ldw	r2,-32(fp)
    82a4:	d0a7fe15 	stw	r2,-24584(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    82a8:	e0bffd17 	ldw	r2,-12(fp)
    82ac:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    82b0:	d0e80017 	ldw	r3,-24576(gp)
    82b4:	e0bffd17 	ldw	r2,-12(fp)
    82b8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    82bc:	e0bffd17 	ldw	r2,-12(fp)
    82c0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    82c4:	e0bffd17 	ldw	r2,-12(fp)
    82c8:	d0a80015 	stw	r2,-24576(gp)
    82cc:	e0bff617 	ldw	r2,-40(fp)
    82d0:	e0bffa15 	stw	r2,-24(fp)
    82d4:	e0bffa17 	ldw	r2,-24(fp)
    82d8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    82dc:	e0bff403 	ldbu	r2,-48(fp)
    82e0:	10800058 	cmpnei	r2,r2,1
    82e4:	1000011e 	bne	r2,zero,82ec <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    82e8:	00056f40 	call	56f4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    82ec:	e0bfff17 	ldw	r2,-4(fp)
    82f0:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
    82f4:	e03ff515 	stw	zero,-44(fp)
             break;
    82f8:	00000a06 	br	8324 <OSQDel+0x268>
    82fc:	e0bff617 	ldw	r2,-40(fp)
    8300:	e0bffb15 	stw	r2,-20(fp)
    8304:	e0bffb17 	ldw	r2,-20(fp)
    8308:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    830c:	e0bfff17 	ldw	r2,-4(fp)
    8310:	00c001c4 	movi	r3,7
    8314:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    8318:	e0bffd17 	ldw	r2,-12(fp)
    831c:	e0bff515 	stw	r2,-44(fp)
             break;
    8320:	0001883a 	nop
    }
    return (pevent_return);
    8324:	e0bff517 	ldw	r2,-44(fp)
}
    8328:	e037883a 	mov	sp,fp
    832c:	dfc00117 	ldw	ra,4(sp)
    8330:	df000017 	ldw	fp,0(sp)
    8334:	dec00204 	addi	sp,sp,8
    8338:	f800283a 	ret

0000833c <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
    833c:	defffa04 	addi	sp,sp,-24
    8340:	df000515 	stw	fp,20(sp)
    8344:	df000504 	addi	fp,sp,20
    8348:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    834c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    8350:	e0bfff17 	ldw	r2,-4(fp)
    8354:	1000021e 	bne	r2,zero,8360 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
    8358:	00800104 	movi	r2,4
    835c:	00002106 	br	83e4 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    8360:	e0bfff17 	ldw	r2,-4(fp)
    8364:	10800003 	ldbu	r2,0(r2)
    8368:	10803fcc 	andi	r2,r2,255
    836c:	108000a0 	cmpeqi	r2,r2,2
    8370:	1000021e 	bne	r2,zero,837c <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
    8374:	00800044 	movi	r2,1
    8378:	00001a06 	br	83e4 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    837c:	0005303a 	rdctl	r2,status
    8380:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8384:	e0fffd17 	ldw	r3,-12(fp)
    8388:	00bfff84 	movi	r2,-2
    838c:	1884703a 	and	r2,r3,r2
    8390:	1001703a 	wrctl	status,r2
  
  return context;
    8394:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    8398:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
    839c:	e0bfff17 	ldw	r2,-4(fp)
    83a0:	10800117 	ldw	r2,4(r2)
    83a4:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
    83a8:	e0bffc17 	ldw	r2,-16(fp)
    83ac:	10c00117 	ldw	r3,4(r2)
    83b0:	e0bffc17 	ldw	r2,-16(fp)
    83b4:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
    83b8:	e0bffc17 	ldw	r2,-16(fp)
    83bc:	10c00117 	ldw	r3,4(r2)
    83c0:	e0bffc17 	ldw	r2,-16(fp)
    83c4:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
    83c8:	e0bffc17 	ldw	r2,-16(fp)
    83cc:	1000058d 	sth	zero,22(r2)
    83d0:	e0bffb17 	ldw	r2,-20(fp)
    83d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    83d8:	e0bffe17 	ldw	r2,-8(fp)
    83dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    83e0:	0005883a 	mov	r2,zero
}
    83e4:	e037883a 	mov	sp,fp
    83e8:	df000017 	ldw	fp,0(sp)
    83ec:	dec00104 	addi	sp,sp,4
    83f0:	f800283a 	ret

000083f4 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    83f4:	defff304 	addi	sp,sp,-52
    83f8:	dfc00c15 	stw	ra,48(sp)
    83fc:	df000b15 	stw	fp,44(sp)
    8400:	df000b04 	addi	fp,sp,44
    8404:	e13ffd15 	stw	r4,-12(fp)
    8408:	2805883a 	mov	r2,r5
    840c:	e1bfff15 	stw	r6,-4(fp)
    8410:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8414:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    8418:	e0bfff17 	ldw	r2,-4(fp)
    841c:	1000021e 	bne	r2,zero,8428 <OSQPend+0x34>
        return ((void *)0);
    8420:	0005883a 	mov	r2,zero
    8424:	00009106 	br	866c <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    8428:	e0bffd17 	ldw	r2,-12(fp)
    842c:	1000051e 	bne	r2,zero,8444 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    8430:	e0bfff17 	ldw	r2,-4(fp)
    8434:	00c00104 	movi	r3,4
    8438:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    843c:	0005883a 	mov	r2,zero
    8440:	00008a06 	br	866c <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    8444:	e0bffd17 	ldw	r2,-12(fp)
    8448:	10800003 	ldbu	r2,0(r2)
    844c:	10803fcc 	andi	r2,r2,255
    8450:	108000a0 	cmpeqi	r2,r2,2
    8454:	1000051e 	bne	r2,zero,846c <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    8458:	e0bfff17 	ldw	r2,-4(fp)
    845c:	00c00044 	movi	r3,1
    8460:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8464:	0005883a 	mov	r2,zero
    8468:	00008006 	br	866c <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    846c:	d0a80103 	ldbu	r2,-24572(gp)
    8470:	10803fcc 	andi	r2,r2,255
    8474:	10000526 	beq	r2,zero,848c <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
    8478:	e0bfff17 	ldw	r2,-4(fp)
    847c:	00c00084 	movi	r3,2
    8480:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8484:	0005883a 	mov	r2,zero
    8488:	00007806 	br	866c <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
    848c:	d0a7f303 	ldbu	r2,-24628(gp)
    8490:	10803fcc 	andi	r2,r2,255
    8494:	10000526 	beq	r2,zero,84ac <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
    8498:	e0bfff17 	ldw	r2,-4(fp)
    849c:	00c00344 	movi	r3,13
    84a0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    84a4:	0005883a 	mov	r2,zero
    84a8:	00007006 	br	866c <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    84ac:	0005303a 	rdctl	r2,status
    84b0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    84b4:	e0fffc17 	ldw	r3,-16(fp)
    84b8:	00bfff84 	movi	r2,-2
    84bc:	1884703a 	and	r2,r3,r2
    84c0:	1001703a 	wrctl	status,r2
  
  return context;
    84c4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    84c8:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    84cc:	e0bffd17 	ldw	r2,-12(fp)
    84d0:	10800117 	ldw	r2,4(r2)
    84d4:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    84d8:	e0bff817 	ldw	r2,-32(fp)
    84dc:	1080058b 	ldhu	r2,22(r2)
    84e0:	10bfffcc 	andi	r2,r2,65535
    84e4:	10001e26 	beq	r2,zero,8560 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    84e8:	e0bff817 	ldw	r2,-32(fp)
    84ec:	10800417 	ldw	r2,16(r2)
    84f0:	11000104 	addi	r4,r2,4
    84f4:	e0fff817 	ldw	r3,-32(fp)
    84f8:	19000415 	stw	r4,16(r3)
    84fc:	10800017 	ldw	r2,0(r2)
    8500:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    8504:	e0bff817 	ldw	r2,-32(fp)
    8508:	1080058b 	ldhu	r2,22(r2)
    850c:	10bfffc4 	addi	r2,r2,-1
    8510:	1007883a 	mov	r3,r2
    8514:	e0bff817 	ldw	r2,-32(fp)
    8518:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    851c:	e0bff817 	ldw	r2,-32(fp)
    8520:	10c00417 	ldw	r3,16(r2)
    8524:	e0bff817 	ldw	r2,-32(fp)
    8528:	10800217 	ldw	r2,8(r2)
    852c:	1880041e 	bne	r3,r2,8540 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
    8530:	e0bff817 	ldw	r2,-32(fp)
    8534:	10c00117 	ldw	r3,4(r2)
    8538:	e0bff817 	ldw	r2,-32(fp)
    853c:	10c00415 	stw	r3,16(r2)
    8540:	e0bff617 	ldw	r2,-40(fp)
    8544:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8548:	e0bff717 	ldw	r2,-36(fp)
    854c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    8550:	e0bfff17 	ldw	r2,-4(fp)
    8554:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
    8558:	e0bff517 	ldw	r2,-44(fp)
    855c:	00004306 	br	866c <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
    8560:	d0a80217 	ldw	r2,-24568(gp)
    8564:	d0e80217 	ldw	r3,-24568(gp)
    8568:	18c00c03 	ldbu	r3,48(r3)
    856c:	18c00114 	ori	r3,r3,4
    8570:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    8574:	d0a80217 	ldw	r2,-24568(gp)
    8578:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
    857c:	d0a80217 	ldw	r2,-24568(gp)
    8580:	e0fffe0b 	ldhu	r3,-8(fp)
    8584:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
    8588:	e13ffd17 	ldw	r4,-12(fp)
    858c:	0004e400 	call	4e40 <OS_EventTaskWait>
    8590:	e0bff617 	ldw	r2,-40(fp)
    8594:	e0bffb15 	stw	r2,-20(fp)
    8598:	e0bffb17 	ldw	r2,-20(fp)
    859c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
    85a0:	00056f40 	call	56f4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    85a4:	0005303a 	rdctl	r2,status
    85a8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    85ac:	e0fff917 	ldw	r3,-28(fp)
    85b0:	00bfff84 	movi	r2,-2
    85b4:	1884703a 	and	r2,r3,r2
    85b8:	1001703a 	wrctl	status,r2
  
  return context;
    85bc:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    85c0:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    85c4:	d0a80217 	ldw	r2,-24568(gp)
    85c8:	10800c43 	ldbu	r2,49(r2)
    85cc:	10803fcc 	andi	r2,r2,255
    85d0:	10000326 	beq	r2,zero,85e0 <OSQPend+0x1ec>
    85d4:	108000a0 	cmpeqi	r2,r2,2
    85d8:	1000071e 	bne	r2,zero,85f8 <OSQPend+0x204>
    85dc:	00000b06 	br	860c <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
    85e0:	d0a80217 	ldw	r2,-24568(gp)
    85e4:	10800917 	ldw	r2,36(r2)
    85e8:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
    85ec:	e0bfff17 	ldw	r2,-4(fp)
    85f0:	10000005 	stb	zero,0(r2)
             break;
    85f4:	00000e06 	br	8630 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
    85f8:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    85fc:	e0bfff17 	ldw	r2,-4(fp)
    8600:	00c00384 	movi	r3,14
    8604:	10c00005 	stb	r3,0(r2)
             break;
    8608:	00000906 	br	8630 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    860c:	d0a80217 	ldw	r2,-24568(gp)
    8610:	e17ffd17 	ldw	r5,-12(fp)
    8614:	1009883a 	mov	r4,r2
    8618:	00050a00 	call	50a0 <OS_EventTaskRemove>
             pmsg = (void *)0;
    861c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    8620:	e0bfff17 	ldw	r2,-4(fp)
    8624:	00c00284 	movi	r3,10
    8628:	10c00005 	stb	r3,0(r2)
             break;
    862c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    8630:	d0a80217 	ldw	r2,-24568(gp)
    8634:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    8638:	d0a80217 	ldw	r2,-24568(gp)
    863c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    8640:	d0a80217 	ldw	r2,-24568(gp)
    8644:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    8648:	d0a80217 	ldw	r2,-24568(gp)
    864c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    8650:	d0a80217 	ldw	r2,-24568(gp)
    8654:	10000915 	stw	zero,36(r2)
    8658:	e0bff617 	ldw	r2,-40(fp)
    865c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8660:	e0bffa17 	ldw	r2,-24(fp)
    8664:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
    8668:	e0bff517 	ldw	r2,-44(fp)
}
    866c:	e037883a 	mov	sp,fp
    8670:	dfc00117 	ldw	ra,4(sp)
    8674:	df000017 	ldw	fp,0(sp)
    8678:	dec00204 	addi	sp,sp,8
    867c:	f800283a 	ret

00008680 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    8680:	defff604 	addi	sp,sp,-40
    8684:	dfc00915 	stw	ra,36(sp)
    8688:	df000815 	stw	fp,32(sp)
    868c:	df000804 	addi	fp,sp,32
    8690:	e13ffd15 	stw	r4,-12(fp)
    8694:	2805883a 	mov	r2,r5
    8698:	e1bfff15 	stw	r6,-4(fp)
    869c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    86a0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    86a4:	e0bfff17 	ldw	r2,-4(fp)
    86a8:	1000021e 	bne	r2,zero,86b4 <OSQPendAbort+0x34>
        return (0);
    86ac:	0005883a 	mov	r2,zero
    86b0:	00004906 	br	87d8 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    86b4:	e0bffd17 	ldw	r2,-12(fp)
    86b8:	1000051e 	bne	r2,zero,86d0 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    86bc:	e0bfff17 	ldw	r2,-4(fp)
    86c0:	00c00104 	movi	r3,4
    86c4:	10c00005 	stb	r3,0(r2)
        return (0);
    86c8:	0005883a 	mov	r2,zero
    86cc:	00004206 	br	87d8 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    86d0:	e0bffd17 	ldw	r2,-12(fp)
    86d4:	10800003 	ldbu	r2,0(r2)
    86d8:	10803fcc 	andi	r2,r2,255
    86dc:	108000a0 	cmpeqi	r2,r2,2
    86e0:	1000051e 	bne	r2,zero,86f8 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    86e4:	e0bfff17 	ldw	r2,-4(fp)
    86e8:	00c00044 	movi	r3,1
    86ec:	10c00005 	stb	r3,0(r2)
        return (0);
    86f0:	0005883a 	mov	r2,zero
    86f4:	00003806 	br	87d8 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    86f8:	0005303a 	rdctl	r2,status
    86fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8700:	e0fffc17 	ldw	r3,-16(fp)
    8704:	00bfff84 	movi	r2,-2
    8708:	1884703a 	and	r2,r3,r2
    870c:	1001703a 	wrctl	status,r2
  
  return context;
    8710:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8714:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
    8718:	e0bffd17 	ldw	r2,-12(fp)
    871c:	10800283 	ldbu	r2,10(r2)
    8720:	10803fcc 	andi	r2,r2,255
    8724:	10002526 	beq	r2,zero,87bc <OSQPendAbort+0x13c>
        nbr_tasks = 0;
    8728:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    872c:	e0bffe03 	ldbu	r2,-8(fp)
    8730:	10800060 	cmpeqi	r2,r2,1
    8734:	10000e26 	beq	r2,zero,8770 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    8738:	00000806 	br	875c <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    873c:	01c00084 	movi	r7,2
    8740:	01800104 	movi	r6,4
    8744:	000b883a 	mov	r5,zero
    8748:	e13ffd17 	ldw	r4,-12(fp)
    874c:	0004ca80 	call	4ca8 <OS_EventTaskRdy>
                     nbr_tasks++;
    8750:	e0bff803 	ldbu	r2,-32(fp)
    8754:	10800044 	addi	r2,r2,1
    8758:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    875c:	e0bffd17 	ldw	r2,-12(fp)
    8760:	10800283 	ldbu	r2,10(r2)
    8764:	10803fcc 	andi	r2,r2,255
    8768:	103ff41e 	bne	r2,zero,873c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700873c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    876c:	00000906 	br	8794 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    8770:	01c00084 	movi	r7,2
    8774:	01800104 	movi	r6,4
    8778:	000b883a 	mov	r5,zero
    877c:	e13ffd17 	ldw	r4,-12(fp)
    8780:	0004ca80 	call	4ca8 <OS_EventTaskRdy>
                 nbr_tasks++;
    8784:	e0bff803 	ldbu	r2,-32(fp)
    8788:	10800044 	addi	r2,r2,1
    878c:	e0bff805 	stb	r2,-32(fp)
                 break;
    8790:	0001883a 	nop
    8794:	e0bff917 	ldw	r2,-28(fp)
    8798:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    879c:	e0bffa17 	ldw	r2,-24(fp)
    87a0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
    87a4:	00056f40 	call	56f4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    87a8:	e0bfff17 	ldw	r2,-4(fp)
    87ac:	00c00384 	movi	r3,14
    87b0:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    87b4:	e0bff803 	ldbu	r2,-32(fp)
    87b8:	00000706 	br	87d8 <OSQPendAbort+0x158>
    87bc:	e0bff917 	ldw	r2,-28(fp)
    87c0:	e0bffb15 	stw	r2,-20(fp)
    87c4:	e0bffb17 	ldw	r2,-20(fp)
    87c8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    87cc:	e0bfff17 	ldw	r2,-4(fp)
    87d0:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
    87d4:	0005883a 	mov	r2,zero
}
    87d8:	e037883a 	mov	sp,fp
    87dc:	dfc00117 	ldw	ra,4(sp)
    87e0:	df000017 	ldw	fp,0(sp)
    87e4:	dec00204 	addi	sp,sp,8
    87e8:	f800283a 	ret

000087ec <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
    87ec:	defff604 	addi	sp,sp,-40
    87f0:	dfc00915 	stw	ra,36(sp)
    87f4:	df000815 	stw	fp,32(sp)
    87f8:	df000804 	addi	fp,sp,32
    87fc:	e13ffe15 	stw	r4,-8(fp)
    8800:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    8804:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    8808:	e0bffe17 	ldw	r2,-8(fp)
    880c:	1000021e 	bne	r2,zero,8818 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
    8810:	00800104 	movi	r2,4
    8814:	00004a06 	br	8940 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    8818:	e0bffe17 	ldw	r2,-8(fp)
    881c:	10800003 	ldbu	r2,0(r2)
    8820:	10803fcc 	andi	r2,r2,255
    8824:	108000a0 	cmpeqi	r2,r2,2
    8828:	1000021e 	bne	r2,zero,8834 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
    882c:	00800044 	movi	r2,1
    8830:	00004306 	br	8940 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8834:	0005303a 	rdctl	r2,status
    8838:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    883c:	e0fffd17 	ldw	r3,-12(fp)
    8840:	00bfff84 	movi	r2,-2
    8844:	1884703a 	and	r2,r3,r2
    8848:	1001703a 	wrctl	status,r2
  
  return context;
    884c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    8850:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
    8854:	e0bffe17 	ldw	r2,-8(fp)
    8858:	10800283 	ldbu	r2,10(r2)
    885c:	10803fcc 	andi	r2,r2,255
    8860:	10000c26 	beq	r2,zero,8894 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    8864:	000f883a 	mov	r7,zero
    8868:	01800104 	movi	r6,4
    886c:	e17fff17 	ldw	r5,-4(fp)
    8870:	e13ffe17 	ldw	r4,-8(fp)
    8874:	0004ca80 	call	4ca8 <OS_EventTaskRdy>
    8878:	e0bff817 	ldw	r2,-32(fp)
    887c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8880:	e0bff917 	ldw	r2,-28(fp)
    8884:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
    8888:	00056f40 	call	56f4 <OS_Sched>
        return (OS_ERR_NONE);
    888c:	0005883a 	mov	r2,zero
    8890:	00002b06 	br	8940 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
    8894:	e0bffe17 	ldw	r2,-8(fp)
    8898:	10800117 	ldw	r2,4(r2)
    889c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
    88a0:	e0bffb17 	ldw	r2,-20(fp)
    88a4:	10c0058b 	ldhu	r3,22(r2)
    88a8:	e0bffb17 	ldw	r2,-20(fp)
    88ac:	1080050b 	ldhu	r2,20(r2)
    88b0:	18ffffcc 	andi	r3,r3,65535
    88b4:	10bfffcc 	andi	r2,r2,65535
    88b8:	18800636 	bltu	r3,r2,88d4 <OSQPost+0xe8>
    88bc:	e0bff817 	ldw	r2,-32(fp)
    88c0:	e0bffa15 	stw	r2,-24(fp)
    88c4:	e0bffa17 	ldw	r2,-24(fp)
    88c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    88cc:	00800784 	movi	r2,30
    88d0:	00001b06 	br	8940 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
    88d4:	e0bffb17 	ldw	r2,-20(fp)
    88d8:	10800317 	ldw	r2,12(r2)
    88dc:	11000104 	addi	r4,r2,4
    88e0:	e0fffb17 	ldw	r3,-20(fp)
    88e4:	19000315 	stw	r4,12(r3)
    88e8:	e0ffff17 	ldw	r3,-4(fp)
    88ec:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
    88f0:	e0bffb17 	ldw	r2,-20(fp)
    88f4:	1080058b 	ldhu	r2,22(r2)
    88f8:	10800044 	addi	r2,r2,1
    88fc:	1007883a 	mov	r3,r2
    8900:	e0bffb17 	ldw	r2,-20(fp)
    8904:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
    8908:	e0bffb17 	ldw	r2,-20(fp)
    890c:	10c00317 	ldw	r3,12(r2)
    8910:	e0bffb17 	ldw	r2,-20(fp)
    8914:	10800217 	ldw	r2,8(r2)
    8918:	1880041e 	bne	r3,r2,892c <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
    891c:	e0bffb17 	ldw	r2,-20(fp)
    8920:	10c00117 	ldw	r3,4(r2)
    8924:	e0bffb17 	ldw	r2,-20(fp)
    8928:	10c00315 	stw	r3,12(r2)
    892c:	e0bff817 	ldw	r2,-32(fp)
    8930:	e0bffc15 	stw	r2,-16(fp)
    8934:	e0bffc17 	ldw	r2,-16(fp)
    8938:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    893c:	0005883a 	mov	r2,zero
}
    8940:	e037883a 	mov	sp,fp
    8944:	dfc00117 	ldw	ra,4(sp)
    8948:	df000017 	ldw	fp,0(sp)
    894c:	dec00204 	addi	sp,sp,8
    8950:	f800283a 	ret

00008954 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
    8954:	defff604 	addi	sp,sp,-40
    8958:	dfc00915 	stw	ra,36(sp)
    895c:	df000815 	stw	fp,32(sp)
    8960:	df000804 	addi	fp,sp,32
    8964:	e13ffe15 	stw	r4,-8(fp)
    8968:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    896c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    8970:	e0bffe17 	ldw	r2,-8(fp)
    8974:	1000021e 	bne	r2,zero,8980 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
    8978:	00800104 	movi	r2,4
    897c:	00004c06 	br	8ab0 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    8980:	e0bffe17 	ldw	r2,-8(fp)
    8984:	10800003 	ldbu	r2,0(r2)
    8988:	10803fcc 	andi	r2,r2,255
    898c:	108000a0 	cmpeqi	r2,r2,2
    8990:	1000021e 	bne	r2,zero,899c <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
    8994:	00800044 	movi	r2,1
    8998:	00004506 	br	8ab0 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    899c:	0005303a 	rdctl	r2,status
    89a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    89a4:	e0fffd17 	ldw	r3,-12(fp)
    89a8:	00bfff84 	movi	r2,-2
    89ac:	1884703a 	and	r2,r3,r2
    89b0:	1001703a 	wrctl	status,r2
  
  return context;
    89b4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    89b8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
    89bc:	e0bffe17 	ldw	r2,-8(fp)
    89c0:	10800283 	ldbu	r2,10(r2)
    89c4:	10803fcc 	andi	r2,r2,255
    89c8:	10000c26 	beq	r2,zero,89fc <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    89cc:	000f883a 	mov	r7,zero
    89d0:	01800104 	movi	r6,4
    89d4:	e17fff17 	ldw	r5,-4(fp)
    89d8:	e13ffe17 	ldw	r4,-8(fp)
    89dc:	0004ca80 	call	4ca8 <OS_EventTaskRdy>
    89e0:	e0bff817 	ldw	r2,-32(fp)
    89e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    89e8:	e0bff917 	ldw	r2,-28(fp)
    89ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
    89f0:	00056f40 	call	56f4 <OS_Sched>
        return (OS_ERR_NONE);
    89f4:	0005883a 	mov	r2,zero
    89f8:	00002d06 	br	8ab0 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    89fc:	e0bffe17 	ldw	r2,-8(fp)
    8a00:	10800117 	ldw	r2,4(r2)
    8a04:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    8a08:	e0bffb17 	ldw	r2,-20(fp)
    8a0c:	10c0058b 	ldhu	r3,22(r2)
    8a10:	e0bffb17 	ldw	r2,-20(fp)
    8a14:	1080050b 	ldhu	r2,20(r2)
    8a18:	18ffffcc 	andi	r3,r3,65535
    8a1c:	10bfffcc 	andi	r2,r2,65535
    8a20:	18800636 	bltu	r3,r2,8a3c <OSQPostFront+0xe8>
    8a24:	e0bff817 	ldw	r2,-32(fp)
    8a28:	e0bffa15 	stw	r2,-24(fp)
    8a2c:	e0bffa17 	ldw	r2,-24(fp)
    8a30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    8a34:	00800784 	movi	r2,30
    8a38:	00001d06 	br	8ab0 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
    8a3c:	e0bffb17 	ldw	r2,-20(fp)
    8a40:	10c00417 	ldw	r3,16(r2)
    8a44:	e0bffb17 	ldw	r2,-20(fp)
    8a48:	10800117 	ldw	r2,4(r2)
    8a4c:	1880041e 	bne	r3,r2,8a60 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
    8a50:	e0bffb17 	ldw	r2,-20(fp)
    8a54:	10c00217 	ldw	r3,8(r2)
    8a58:	e0bffb17 	ldw	r2,-20(fp)
    8a5c:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
    8a60:	e0bffb17 	ldw	r2,-20(fp)
    8a64:	10800417 	ldw	r2,16(r2)
    8a68:	10ffff04 	addi	r3,r2,-4
    8a6c:	e0bffb17 	ldw	r2,-20(fp)
    8a70:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
    8a74:	e0bffb17 	ldw	r2,-20(fp)
    8a78:	10800417 	ldw	r2,16(r2)
    8a7c:	e0ffff17 	ldw	r3,-4(fp)
    8a80:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    8a84:	e0bffb17 	ldw	r2,-20(fp)
    8a88:	1080058b 	ldhu	r2,22(r2)
    8a8c:	10800044 	addi	r2,r2,1
    8a90:	1007883a 	mov	r3,r2
    8a94:	e0bffb17 	ldw	r2,-20(fp)
    8a98:	10c0058d 	sth	r3,22(r2)
    8a9c:	e0bff817 	ldw	r2,-32(fp)
    8aa0:	e0bffc15 	stw	r2,-16(fp)
    8aa4:	e0bffc17 	ldw	r2,-16(fp)
    8aa8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    8aac:	0005883a 	mov	r2,zero
}
    8ab0:	e037883a 	mov	sp,fp
    8ab4:	dfc00117 	ldw	ra,4(sp)
    8ab8:	df000017 	ldw	fp,0(sp)
    8abc:	dec00204 	addi	sp,sp,8
    8ac0:	f800283a 	ret

00008ac4 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
    8ac4:	defff504 	addi	sp,sp,-44
    8ac8:	dfc00a15 	stw	ra,40(sp)
    8acc:	df000915 	stw	fp,36(sp)
    8ad0:	df000904 	addi	fp,sp,36
    8ad4:	e13ffd15 	stw	r4,-12(fp)
    8ad8:	e17ffe15 	stw	r5,-8(fp)
    8adc:	3005883a 	mov	r2,r6
    8ae0:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8ae4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    8ae8:	e0bffd17 	ldw	r2,-12(fp)
    8aec:	1000021e 	bne	r2,zero,8af8 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
    8af0:	00800104 	movi	r2,4
    8af4:	00007106 	br	8cbc <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    8af8:	e0bffd17 	ldw	r2,-12(fp)
    8afc:	10800003 	ldbu	r2,0(r2)
    8b00:	10803fcc 	andi	r2,r2,255
    8b04:	108000a0 	cmpeqi	r2,r2,2
    8b08:	1000021e 	bne	r2,zero,8b14 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
    8b0c:	00800044 	movi	r2,1
    8b10:	00006a06 	br	8cbc <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8b14:	0005303a 	rdctl	r2,status
    8b18:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8b1c:	e0fffc17 	ldw	r3,-16(fp)
    8b20:	00bfff84 	movi	r2,-2
    8b24:	1884703a 	and	r2,r3,r2
    8b28:	1001703a 	wrctl	status,r2
  
  return context;
    8b2c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8b30:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
    8b34:	e0bffd17 	ldw	r2,-12(fp)
    8b38:	10800283 	ldbu	r2,10(r2)
    8b3c:	10803fcc 	andi	r2,r2,255
    8b40:	10001d26 	beq	r2,zero,8bb8 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
    8b44:	e0bfff03 	ldbu	r2,-4(fp)
    8b48:	1080004c 	andi	r2,r2,1
    8b4c:	10000b26 	beq	r2,zero,8b7c <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    8b50:	00000506 	br	8b68 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    8b54:	000f883a 	mov	r7,zero
    8b58:	01800104 	movi	r6,4
    8b5c:	e17ffe17 	ldw	r5,-8(fp)
    8b60:	e13ffd17 	ldw	r4,-12(fp)
    8b64:	0004ca80 	call	4ca8 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    8b68:	e0bffd17 	ldw	r2,-12(fp)
    8b6c:	10800283 	ldbu	r2,10(r2)
    8b70:	10803fcc 	andi	r2,r2,255
    8b74:	103ff71e 	bne	r2,zero,8b54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b54>
    8b78:	00000506 	br	8b90 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    8b7c:	000f883a 	mov	r7,zero
    8b80:	01800104 	movi	r6,4
    8b84:	e17ffe17 	ldw	r5,-8(fp)
    8b88:	e13ffd17 	ldw	r4,-12(fp)
    8b8c:	0004ca80 	call	4ca8 <OS_EventTaskRdy>
    8b90:	e0bff717 	ldw	r2,-36(fp)
    8b94:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8b98:	e0bff817 	ldw	r2,-32(fp)
    8b9c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
    8ba0:	e0bfff03 	ldbu	r2,-4(fp)
    8ba4:	1080010c 	andi	r2,r2,4
    8ba8:	1000011e 	bne	r2,zero,8bb0 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
    8bac:	00056f40 	call	56f4 <OS_Sched>
        }
        return (OS_ERR_NONE);
    8bb0:	0005883a 	mov	r2,zero
    8bb4:	00004106 	br	8cbc <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    8bb8:	e0bffd17 	ldw	r2,-12(fp)
    8bbc:	10800117 	ldw	r2,4(r2)
    8bc0:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    8bc4:	e0bffa17 	ldw	r2,-24(fp)
    8bc8:	10c0058b 	ldhu	r3,22(r2)
    8bcc:	e0bffa17 	ldw	r2,-24(fp)
    8bd0:	1080050b 	ldhu	r2,20(r2)
    8bd4:	18ffffcc 	andi	r3,r3,65535
    8bd8:	10bfffcc 	andi	r2,r2,65535
    8bdc:	18800636 	bltu	r3,r2,8bf8 <OSQPostOpt+0x134>
    8be0:	e0bff717 	ldw	r2,-36(fp)
    8be4:	e0bff915 	stw	r2,-28(fp)
    8be8:	e0bff917 	ldw	r2,-28(fp)
    8bec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    8bf0:	00800784 	movi	r2,30
    8bf4:	00003106 	br	8cbc <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
    8bf8:	e0bfff03 	ldbu	r2,-4(fp)
    8bfc:	1080008c 	andi	r2,r2,2
    8c00:	10001326 	beq	r2,zero,8c50 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
    8c04:	e0bffa17 	ldw	r2,-24(fp)
    8c08:	10c00417 	ldw	r3,16(r2)
    8c0c:	e0bffa17 	ldw	r2,-24(fp)
    8c10:	10800117 	ldw	r2,4(r2)
    8c14:	1880041e 	bne	r3,r2,8c28 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
    8c18:	e0bffa17 	ldw	r2,-24(fp)
    8c1c:	10c00217 	ldw	r3,8(r2)
    8c20:	e0bffa17 	ldw	r2,-24(fp)
    8c24:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
    8c28:	e0bffa17 	ldw	r2,-24(fp)
    8c2c:	10800417 	ldw	r2,16(r2)
    8c30:	10ffff04 	addi	r3,r2,-4
    8c34:	e0bffa17 	ldw	r2,-24(fp)
    8c38:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
    8c3c:	e0bffa17 	ldw	r2,-24(fp)
    8c40:	10800417 	ldw	r2,16(r2)
    8c44:	e0fffe17 	ldw	r3,-8(fp)
    8c48:	10c00015 	stw	r3,0(r2)
    8c4c:	00001006 	br	8c90 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
    8c50:	e0bffa17 	ldw	r2,-24(fp)
    8c54:	10800317 	ldw	r2,12(r2)
    8c58:	11000104 	addi	r4,r2,4
    8c5c:	e0fffa17 	ldw	r3,-24(fp)
    8c60:	19000315 	stw	r4,12(r3)
    8c64:	e0fffe17 	ldw	r3,-8(fp)
    8c68:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
    8c6c:	e0bffa17 	ldw	r2,-24(fp)
    8c70:	10c00317 	ldw	r3,12(r2)
    8c74:	e0bffa17 	ldw	r2,-24(fp)
    8c78:	10800217 	ldw	r2,8(r2)
    8c7c:	1880041e 	bne	r3,r2,8c90 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
    8c80:	e0bffa17 	ldw	r2,-24(fp)
    8c84:	10c00117 	ldw	r3,4(r2)
    8c88:	e0bffa17 	ldw	r2,-24(fp)
    8c8c:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    8c90:	e0bffa17 	ldw	r2,-24(fp)
    8c94:	1080058b 	ldhu	r2,22(r2)
    8c98:	10800044 	addi	r2,r2,1
    8c9c:	1007883a 	mov	r3,r2
    8ca0:	e0bffa17 	ldw	r2,-24(fp)
    8ca4:	10c0058d 	sth	r3,22(r2)
    8ca8:	e0bff717 	ldw	r2,-36(fp)
    8cac:	e0bffb15 	stw	r2,-20(fp)
    8cb0:	e0bffb17 	ldw	r2,-20(fp)
    8cb4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    8cb8:	0005883a 	mov	r2,zero
}
    8cbc:	e037883a 	mov	sp,fp
    8cc0:	dfc00117 	ldw	ra,4(sp)
    8cc4:	df000017 	ldw	fp,0(sp)
    8cc8:	dec00204 	addi	sp,sp,8
    8ccc:	f800283a 	ret

00008cd0 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
    8cd0:	defff604 	addi	sp,sp,-40
    8cd4:	df000915 	stw	fp,36(sp)
    8cd8:	df000904 	addi	fp,sp,36
    8cdc:	e13ffe15 	stw	r4,-8(fp)
    8ce0:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    8ce4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    8ce8:	e0bffe17 	ldw	r2,-8(fp)
    8cec:	1000021e 	bne	r2,zero,8cf8 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    8cf0:	00800104 	movi	r2,4
    8cf4:	00004906 	br	8e1c <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
    8cf8:	e0bfff17 	ldw	r2,-4(fp)
    8cfc:	1000021e 	bne	r2,zero,8d08 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    8d00:	00800244 	movi	r2,9
    8d04:	00004506 	br	8e1c <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    8d08:	e0bffe17 	ldw	r2,-8(fp)
    8d0c:	10800003 	ldbu	r2,0(r2)
    8d10:	10803fcc 	andi	r2,r2,255
    8d14:	108000a0 	cmpeqi	r2,r2,2
    8d18:	1000021e 	bne	r2,zero,8d24 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    8d1c:	00800044 	movi	r2,1
    8d20:	00003e06 	br	8e1c <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8d24:	0005303a 	rdctl	r2,status
    8d28:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8d2c:	e0fffd17 	ldw	r3,-12(fp)
    8d30:	00bfff84 	movi	r2,-2
    8d34:	1884703a 	and	r2,r3,r2
    8d38:	1001703a 	wrctl	status,r2
  
  return context;
    8d3c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    8d40:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    8d44:	e0bffe17 	ldw	r2,-8(fp)
    8d48:	10c00283 	ldbu	r3,10(r2)
    8d4c:	e0bfff17 	ldw	r2,-4(fp)
    8d50:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
    8d54:	e0bffe17 	ldw	r2,-8(fp)
    8d58:	108002c4 	addi	r2,r2,11
    8d5c:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
    8d60:	e0bfff17 	ldw	r2,-4(fp)
    8d64:	10800204 	addi	r2,r2,8
    8d68:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    8d6c:	e03ff705 	stb	zero,-36(fp)
    8d70:	00000b06 	br	8da0 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
    8d74:	e0bff917 	ldw	r2,-28(fp)
    8d78:	10c00044 	addi	r3,r2,1
    8d7c:	e0fff915 	stw	r3,-28(fp)
    8d80:	e0fff817 	ldw	r3,-32(fp)
    8d84:	19000044 	addi	r4,r3,1
    8d88:	e13ff815 	stw	r4,-32(fp)
    8d8c:	18c00003 	ldbu	r3,0(r3)
    8d90:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    8d94:	e0bff703 	ldbu	r2,-36(fp)
    8d98:	10800044 	addi	r2,r2,1
    8d9c:	e0bff705 	stb	r2,-36(fp)
    8da0:	e0bff703 	ldbu	r2,-36(fp)
    8da4:	108000f0 	cmpltui	r2,r2,3
    8da8:	103ff21e 	bne	r2,zero,8d74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008d74>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
    8dac:	e0bffe17 	ldw	r2,-8(fp)
    8db0:	10800117 	ldw	r2,4(r2)
    8db4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
    8db8:	e0bffc17 	ldw	r2,-16(fp)
    8dbc:	1080058b 	ldhu	r2,22(r2)
    8dc0:	10bfffcc 	andi	r2,r2,65535
    8dc4:	10000626 	beq	r2,zero,8de0 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
    8dc8:	e0bffc17 	ldw	r2,-16(fp)
    8dcc:	10800417 	ldw	r2,16(r2)
    8dd0:	10c00017 	ldw	r3,0(r2)
    8dd4:	e0bfff17 	ldw	r2,-4(fp)
    8dd8:	10c00015 	stw	r3,0(r2)
    8ddc:	00000206 	br	8de8 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
    8de0:	e0bfff17 	ldw	r2,-4(fp)
    8de4:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
    8de8:	e0bffc17 	ldw	r2,-16(fp)
    8dec:	10c0058b 	ldhu	r3,22(r2)
    8df0:	e0bfff17 	ldw	r2,-4(fp)
    8df4:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
    8df8:	e0bffc17 	ldw	r2,-16(fp)
    8dfc:	10c0050b 	ldhu	r3,20(r2)
    8e00:	e0bfff17 	ldw	r2,-4(fp)
    8e04:	10c0018d 	sth	r3,6(r2)
    8e08:	e0bffa17 	ldw	r2,-24(fp)
    8e0c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8e10:	e0bffb17 	ldw	r2,-20(fp)
    8e14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    8e18:	0005883a 	mov	r2,zero
}
    8e1c:	e037883a 	mov	sp,fp
    8e20:	df000017 	ldw	fp,0(sp)
    8e24:	dec00104 	addi	sp,sp,4
    8e28:	f800283a 	ret

00008e2c <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
    8e2c:	defffb04 	addi	sp,sp,-20
    8e30:	dfc00415 	stw	ra,16(sp)
    8e34:	df000315 	stw	fp,12(sp)
    8e38:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    8e3c:	01407804 	movi	r5,480
    8e40:	010000b4 	movhi	r4,2
    8e44:	21232e04 	addi	r4,r4,-29512
    8e48:	00056380 	call	5638 <OS_MemClr>
    pq1 = &OSQTbl[0];
    8e4c:	008000b4 	movhi	r2,2
    8e50:	10a32e04 	addi	r2,r2,-29512
    8e54:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
    8e58:	008000b4 	movhi	r2,2
    8e5c:	10a33404 	addi	r2,r2,-29488
    8e60:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    8e64:	e03ffd0d 	sth	zero,-12(fp)
    8e68:	00000c06 	br	8e9c <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
    8e6c:	e0bffe17 	ldw	r2,-8(fp)
    8e70:	e0ffff17 	ldw	r3,-4(fp)
    8e74:	10c00015 	stw	r3,0(r2)
        pq1++;
    8e78:	e0bffe17 	ldw	r2,-8(fp)
    8e7c:	10800604 	addi	r2,r2,24
    8e80:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
    8e84:	e0bfff17 	ldw	r2,-4(fp)
    8e88:	10800604 	addi	r2,r2,24
    8e8c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    8e90:	e0bffd0b 	ldhu	r2,-12(fp)
    8e94:	10800044 	addi	r2,r2,1
    8e98:	e0bffd0d 	sth	r2,-12(fp)
    8e9c:	e0bffd0b 	ldhu	r2,-12(fp)
    8ea0:	108004f0 	cmpltui	r2,r2,19
    8ea4:	103ff11e 	bne	r2,zero,8e6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008e6c>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
    8ea8:	e0bffe17 	ldw	r2,-8(fp)
    8eac:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
    8eb0:	008000b4 	movhi	r2,2
    8eb4:	10a32e04 	addi	r2,r2,-29512
    8eb8:	d0a7fe15 	stw	r2,-24584(gp)
#endif
}
    8ebc:	0001883a 	nop
    8ec0:	e037883a 	mov	sp,fp
    8ec4:	dfc00117 	ldw	ra,4(sp)
    8ec8:	df000017 	ldw	fp,0(sp)
    8ecc:	dec00204 	addi	sp,sp,8
    8ed0:	f800283a 	ret

00008ed4 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
    8ed4:	defffa04 	addi	sp,sp,-24
    8ed8:	df000515 	stw	fp,20(sp)
    8edc:	df000504 	addi	fp,sp,20
    8ee0:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8ee4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    8ee8:	e0bfff17 	ldw	r2,-4(fp)
    8eec:	1000021e 	bne	r2,zero,8ef8 <OSSemAccept+0x24>
        return (0);
    8ef0:	0005883a 	mov	r2,zero
    8ef4:	00001f06 	br	8f74 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    8ef8:	e0bfff17 	ldw	r2,-4(fp)
    8efc:	10800003 	ldbu	r2,0(r2)
    8f00:	10803fcc 	andi	r2,r2,255
    8f04:	108000e0 	cmpeqi	r2,r2,3
    8f08:	1000021e 	bne	r2,zero,8f14 <OSSemAccept+0x40>
        return (0);
    8f0c:	0005883a 	mov	r2,zero
    8f10:	00001806 	br	8f74 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8f14:	0005303a 	rdctl	r2,status
    8f18:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8f1c:	e0fffe17 	ldw	r3,-8(fp)
    8f20:	00bfff84 	movi	r2,-2
    8f24:	1884703a 	and	r2,r3,r2
    8f28:	1001703a 	wrctl	status,r2
  
  return context;
    8f2c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    8f30:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
    8f34:	e0bfff17 	ldw	r2,-4(fp)
    8f38:	1080020b 	ldhu	r2,8(r2)
    8f3c:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
    8f40:	e0bffd0b 	ldhu	r2,-12(fp)
    8f44:	10000626 	beq	r2,zero,8f60 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
    8f48:	e0bfff17 	ldw	r2,-4(fp)
    8f4c:	1080020b 	ldhu	r2,8(r2)
    8f50:	10bfffc4 	addi	r2,r2,-1
    8f54:	1007883a 	mov	r3,r2
    8f58:	e0bfff17 	ldw	r2,-4(fp)
    8f5c:	10c0020d 	sth	r3,8(r2)
    8f60:	e0bffb17 	ldw	r2,-20(fp)
    8f64:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8f68:	e0bffc17 	ldw	r2,-16(fp)
    8f6c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
    8f70:	e0bffd0b 	ldhu	r2,-12(fp)
}
    8f74:	e037883a 	mov	sp,fp
    8f78:	df000017 	ldw	fp,0(sp)
    8f7c:	dec00104 	addi	sp,sp,4
    8f80:	f800283a 	ret

00008f84 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
    8f84:	defff904 	addi	sp,sp,-28
    8f88:	dfc00615 	stw	ra,24(sp)
    8f8c:	df000515 	stw	fp,20(sp)
    8f90:	df000504 	addi	fp,sp,20
    8f94:	2005883a 	mov	r2,r4
    8f98:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    8f9c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    8fa0:	d0a80103 	ldbu	r2,-24572(gp)
    8fa4:	10803fcc 	andi	r2,r2,255
    8fa8:	10000226 	beq	r2,zero,8fb4 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    8fac:	0005883a 	mov	r2,zero
    8fb0:	00002506 	br	9048 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8fb4:	0005303a 	rdctl	r2,status
    8fb8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8fbc:	e0fffe17 	ldw	r3,-8(fp)
    8fc0:	00bfff84 	movi	r2,-2
    8fc4:	1884703a 	and	r2,r3,r2
    8fc8:	1001703a 	wrctl	status,r2
  
  return context;
    8fcc:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    8fd0:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    8fd4:	d0a80017 	ldw	r2,-24576(gp)
    8fd8:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    8fdc:	d0a80017 	ldw	r2,-24576(gp)
    8fe0:	10000326 	beq	r2,zero,8ff0 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    8fe4:	d0a80017 	ldw	r2,-24576(gp)
    8fe8:	10800117 	ldw	r2,4(r2)
    8fec:	d0a80015 	stw	r2,-24576(gp)
    8ff0:	e0bffb17 	ldw	r2,-20(fp)
    8ff4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8ff8:	e0bffc17 	ldw	r2,-16(fp)
    8ffc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
    9000:	e0bffd17 	ldw	r2,-12(fp)
    9004:	10000f26 	beq	r2,zero,9044 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
    9008:	e0bffd17 	ldw	r2,-12(fp)
    900c:	00c000c4 	movi	r3,3
    9010:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
    9014:	e0bffd17 	ldw	r2,-12(fp)
    9018:	e0ffff0b 	ldhu	r3,-4(fp)
    901c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
    9020:	e0bffd17 	ldw	r2,-12(fp)
    9024:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
    9028:	e0bffd17 	ldw	r2,-12(fp)
    902c:	00c00fc4 	movi	r3,63
    9030:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
    9034:	e0bffd17 	ldw	r2,-12(fp)
    9038:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    903c:	e13ffd17 	ldw	r4,-12(fp)
    9040:	00052580 	call	5258 <OS_EventWaitListInit>
    }
    return (pevent);
    9044:	e0bffd17 	ldw	r2,-12(fp)
}
    9048:	e037883a 	mov	sp,fp
    904c:	dfc00117 	ldw	ra,4(sp)
    9050:	df000017 	ldw	fp,0(sp)
    9054:	dec00204 	addi	sp,sp,8
    9058:	f800283a 	ret

0000905c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    905c:	defff304 	addi	sp,sp,-52
    9060:	dfc00c15 	stw	ra,48(sp)
    9064:	df000b15 	stw	fp,44(sp)
    9068:	df000b04 	addi	fp,sp,44
    906c:	e13ffd15 	stw	r4,-12(fp)
    9070:	2805883a 	mov	r2,r5
    9074:	e1bfff15 	stw	r6,-4(fp)
    9078:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    907c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    9080:	e0bfff17 	ldw	r2,-4(fp)
    9084:	1000021e 	bne	r2,zero,9090 <OSSemDel+0x34>
        return (pevent);
    9088:	e0bffd17 	ldw	r2,-12(fp)
    908c:	00007e06 	br	9288 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    9090:	e0bffd17 	ldw	r2,-12(fp)
    9094:	1000051e 	bne	r2,zero,90ac <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    9098:	e0bfff17 	ldw	r2,-4(fp)
    909c:	00c00104 	movi	r3,4
    90a0:	10c00005 	stb	r3,0(r2)
        return (pevent);
    90a4:	e0bffd17 	ldw	r2,-12(fp)
    90a8:	00007706 	br	9288 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    90ac:	e0bffd17 	ldw	r2,-12(fp)
    90b0:	10800003 	ldbu	r2,0(r2)
    90b4:	10803fcc 	andi	r2,r2,255
    90b8:	108000e0 	cmpeqi	r2,r2,3
    90bc:	1000051e 	bne	r2,zero,90d4 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    90c0:	e0bfff17 	ldw	r2,-4(fp)
    90c4:	00c00044 	movi	r3,1
    90c8:	10c00005 	stb	r3,0(r2)
        return (pevent);
    90cc:	e0bffd17 	ldw	r2,-12(fp)
    90d0:	00006d06 	br	9288 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    90d4:	d0a80103 	ldbu	r2,-24572(gp)
    90d8:	10803fcc 	andi	r2,r2,255
    90dc:	10000526 	beq	r2,zero,90f4 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
    90e0:	e0bfff17 	ldw	r2,-4(fp)
    90e4:	00c003c4 	movi	r3,15
    90e8:	10c00005 	stb	r3,0(r2)
        return (pevent);
    90ec:	e0bffd17 	ldw	r2,-12(fp)
    90f0:	00006506 	br	9288 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    90f4:	0005303a 	rdctl	r2,status
    90f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    90fc:	e0fffc17 	ldw	r3,-16(fp)
    9100:	00bfff84 	movi	r2,-2
    9104:	1884703a 	and	r2,r3,r2
    9108:	1001703a 	wrctl	status,r2
  
  return context;
    910c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    9110:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
    9114:	e0bffd17 	ldw	r2,-12(fp)
    9118:	10800283 	ldbu	r2,10(r2)
    911c:	10803fcc 	andi	r2,r2,255
    9120:	10000326 	beq	r2,zero,9130 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    9124:	00800044 	movi	r2,1
    9128:	e0bff505 	stb	r2,-44(fp)
    912c:	00000106 	br	9134 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    9130:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
    9134:	e0bffe03 	ldbu	r2,-8(fp)
    9138:	10000326 	beq	r2,zero,9148 <OSSemDel+0xec>
    913c:	10800060 	cmpeqi	r2,r2,1
    9140:	1000281e 	bne	r2,zero,91e4 <OSSemDel+0x188>
    9144:	00004506 	br	925c <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
    9148:	e0bff503 	ldbu	r2,-44(fp)
    914c:	1000161e 	bne	r2,zero,91a8 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    9150:	e0bffd17 	ldw	r2,-12(fp)
    9154:	00c00fc4 	movi	r3,63
    9158:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    915c:	e0bffd17 	ldw	r2,-12(fp)
    9160:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    9164:	e0bffd17 	ldw	r2,-12(fp)
    9168:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    916c:	d0e80017 	ldw	r3,-24576(gp)
    9170:	e0bffd17 	ldw	r2,-12(fp)
    9174:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    9178:	e0bffd17 	ldw	r2,-12(fp)
    917c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    9180:	e0bffd17 	ldw	r2,-12(fp)
    9184:	d0a80015 	stw	r2,-24576(gp)
    9188:	e0bff717 	ldw	r2,-36(fp)
    918c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9190:	e0bff817 	ldw	r2,-32(fp)
    9194:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    9198:	e0bfff17 	ldw	r2,-4(fp)
    919c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
    91a0:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    91a4:	00003706 	br	9284 <OSSemDel+0x228>
    91a8:	e0bff717 	ldw	r2,-36(fp)
    91ac:	e0bff915 	stw	r2,-28(fp)
    91b0:	e0bff917 	ldw	r2,-28(fp)
    91b4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    91b8:	e0bfff17 	ldw	r2,-4(fp)
    91bc:	00c01244 	movi	r3,73
    91c0:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    91c4:	e0bffd17 	ldw	r2,-12(fp)
    91c8:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    91cc:	00002d06 	br	9284 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    91d0:	000f883a 	mov	r7,zero
    91d4:	01800044 	movi	r6,1
    91d8:	000b883a 	mov	r5,zero
    91dc:	e13ffd17 	ldw	r4,-12(fp)
    91e0:	0004ca80 	call	4ca8 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
    91e4:	e0bffd17 	ldw	r2,-12(fp)
    91e8:	10800283 	ldbu	r2,10(r2)
    91ec:	10803fcc 	andi	r2,r2,255
    91f0:	103ff71e 	bne	r2,zero,91d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70091d0>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    91f4:	e0bffd17 	ldw	r2,-12(fp)
    91f8:	00c00fc4 	movi	r3,63
    91fc:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    9200:	e0bffd17 	ldw	r2,-12(fp)
    9204:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    9208:	e0bffd17 	ldw	r2,-12(fp)
    920c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    9210:	d0e80017 	ldw	r3,-24576(gp)
    9214:	e0bffd17 	ldw	r2,-12(fp)
    9218:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    921c:	e0bffd17 	ldw	r2,-12(fp)
    9220:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    9224:	e0bffd17 	ldw	r2,-12(fp)
    9228:	d0a80015 	stw	r2,-24576(gp)
    922c:	e0bff717 	ldw	r2,-36(fp)
    9230:	e0bffa15 	stw	r2,-24(fp)
    9234:	e0bffa17 	ldw	r2,-24(fp)
    9238:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    923c:	e0bff503 	ldbu	r2,-44(fp)
    9240:	10800058 	cmpnei	r2,r2,1
    9244:	1000011e 	bne	r2,zero,924c <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    9248:	00056f40 	call	56f4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    924c:	e0bfff17 	ldw	r2,-4(fp)
    9250:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
    9254:	e03ff615 	stw	zero,-40(fp)
             break;
    9258:	00000a06 	br	9284 <OSSemDel+0x228>
    925c:	e0bff717 	ldw	r2,-36(fp)
    9260:	e0bffb15 	stw	r2,-20(fp)
    9264:	e0bffb17 	ldw	r2,-20(fp)
    9268:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    926c:	e0bfff17 	ldw	r2,-4(fp)
    9270:	00c001c4 	movi	r3,7
    9274:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    9278:	e0bffd17 	ldw	r2,-12(fp)
    927c:	e0bff615 	stw	r2,-40(fp)
             break;
    9280:	0001883a 	nop
    }
    return (pevent_return);
    9284:	e0bff617 	ldw	r2,-40(fp)
}
    9288:	e037883a 	mov	sp,fp
    928c:	dfc00117 	ldw	ra,4(sp)
    9290:	df000017 	ldw	fp,0(sp)
    9294:	dec00204 	addi	sp,sp,8
    9298:	f800283a 	ret

0000929c <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    929c:	defff504 	addi	sp,sp,-44
    92a0:	dfc00a15 	stw	ra,40(sp)
    92a4:	df000915 	stw	fp,36(sp)
    92a8:	df000904 	addi	fp,sp,36
    92ac:	e13ffd15 	stw	r4,-12(fp)
    92b0:	2805883a 	mov	r2,r5
    92b4:	e1bfff15 	stw	r6,-4(fp)
    92b8:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    92bc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    92c0:	e0bfff17 	ldw	r2,-4(fp)
    92c4:	10007226 	beq	r2,zero,9490 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    92c8:	e0bffd17 	ldw	r2,-12(fp)
    92cc:	1000041e 	bne	r2,zero,92e0 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    92d0:	e0bfff17 	ldw	r2,-4(fp)
    92d4:	00c00104 	movi	r3,4
    92d8:	10c00005 	stb	r3,0(r2)
        return;
    92dc:	00006d06 	br	9494 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    92e0:	e0bffd17 	ldw	r2,-12(fp)
    92e4:	10800003 	ldbu	r2,0(r2)
    92e8:	10803fcc 	andi	r2,r2,255
    92ec:	108000e0 	cmpeqi	r2,r2,3
    92f0:	1000041e 	bne	r2,zero,9304 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
    92f4:	e0bfff17 	ldw	r2,-4(fp)
    92f8:	00c00044 	movi	r3,1
    92fc:	10c00005 	stb	r3,0(r2)
        return;
    9300:	00006406 	br	9494 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    9304:	d0a80103 	ldbu	r2,-24572(gp)
    9308:	10803fcc 	andi	r2,r2,255
    930c:	10000426 	beq	r2,zero,9320 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    9310:	e0bfff17 	ldw	r2,-4(fp)
    9314:	00c00084 	movi	r3,2
    9318:	10c00005 	stb	r3,0(r2)
        return;
    931c:	00005d06 	br	9494 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    9320:	d0a7f303 	ldbu	r2,-24628(gp)
    9324:	10803fcc 	andi	r2,r2,255
    9328:	10000426 	beq	r2,zero,933c <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    932c:	e0bfff17 	ldw	r2,-4(fp)
    9330:	00c00344 	movi	r3,13
    9334:	10c00005 	stb	r3,0(r2)
        return;
    9338:	00005606 	br	9494 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    933c:	0005303a 	rdctl	r2,status
    9340:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9344:	e0fffc17 	ldw	r3,-16(fp)
    9348:	00bfff84 	movi	r2,-2
    934c:	1884703a 	and	r2,r3,r2
    9350:	1001703a 	wrctl	status,r2
  
  return context;
    9354:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    9358:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
    935c:	e0bffd17 	ldw	r2,-12(fp)
    9360:	1080020b 	ldhu	r2,8(r2)
    9364:	10bfffcc 	andi	r2,r2,65535
    9368:	10000d26 	beq	r2,zero,93a0 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    936c:	e0bffd17 	ldw	r2,-12(fp)
    9370:	1080020b 	ldhu	r2,8(r2)
    9374:	10bfffc4 	addi	r2,r2,-1
    9378:	1007883a 	mov	r3,r2
    937c:	e0bffd17 	ldw	r2,-12(fp)
    9380:	10c0020d 	sth	r3,8(r2)
    9384:	e0bff717 	ldw	r2,-36(fp)
    9388:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    938c:	e0bff817 	ldw	r2,-32(fp)
    9390:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    9394:	e0bfff17 	ldw	r2,-4(fp)
    9398:	10000005 	stb	zero,0(r2)
        return;
    939c:	00003d06 	br	9494 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
    93a0:	d0a80217 	ldw	r2,-24568(gp)
    93a4:	d0e80217 	ldw	r3,-24568(gp)
    93a8:	18c00c03 	ldbu	r3,48(r3)
    93ac:	18c00054 	ori	r3,r3,1
    93b0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    93b4:	d0a80217 	ldw	r2,-24568(gp)
    93b8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
    93bc:	d0a80217 	ldw	r2,-24568(gp)
    93c0:	e0fffe0b 	ldhu	r3,-8(fp)
    93c4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    93c8:	e13ffd17 	ldw	r4,-12(fp)
    93cc:	0004e400 	call	4e40 <OS_EventTaskWait>
    93d0:	e0bff717 	ldw	r2,-36(fp)
    93d4:	e0bffb15 	stw	r2,-20(fp)
    93d8:	e0bffb17 	ldw	r2,-20(fp)
    93dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
    93e0:	00056f40 	call	56f4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    93e4:	0005303a 	rdctl	r2,status
    93e8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    93ec:	e0fff917 	ldw	r3,-28(fp)
    93f0:	00bfff84 	movi	r2,-2
    93f4:	1884703a 	and	r2,r3,r2
    93f8:	1001703a 	wrctl	status,r2
  
  return context;
    93fc:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    9400:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    9404:	d0a80217 	ldw	r2,-24568(gp)
    9408:	10800c43 	ldbu	r2,49(r2)
    940c:	10803fcc 	andi	r2,r2,255
    9410:	10000326 	beq	r2,zero,9420 <OSSemPend+0x184>
    9414:	108000a0 	cmpeqi	r2,r2,2
    9418:	1000041e 	bne	r2,zero,942c <OSSemPend+0x190>
    941c:	00000706 	br	943c <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    9420:	e0bfff17 	ldw	r2,-4(fp)
    9424:	10000005 	stb	zero,0(r2)
             break;
    9428:	00000c06 	br	945c <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    942c:	e0bfff17 	ldw	r2,-4(fp)
    9430:	00c00384 	movi	r3,14
    9434:	10c00005 	stb	r3,0(r2)
             break;
    9438:	00000806 	br	945c <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
    943c:	d0a80217 	ldw	r2,-24568(gp)
    9440:	e17ffd17 	ldw	r5,-12(fp)
    9444:	1009883a 	mov	r4,r2
    9448:	00050a00 	call	50a0 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    944c:	e0bfff17 	ldw	r2,-4(fp)
    9450:	00c00284 	movi	r3,10
    9454:	10c00005 	stb	r3,0(r2)
             break;
    9458:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    945c:	d0a80217 	ldw	r2,-24568(gp)
    9460:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    9464:	d0a80217 	ldw	r2,-24568(gp)
    9468:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    946c:	d0a80217 	ldw	r2,-24568(gp)
    9470:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    9474:	d0a80217 	ldw	r2,-24568(gp)
    9478:	10000815 	stw	zero,32(r2)
    947c:	e0bff717 	ldw	r2,-36(fp)
    9480:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9484:	e0bffa17 	ldw	r2,-24(fp)
    9488:	1001703a 	wrctl	status,r2
    948c:	00000106 	br	9494 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
    9490:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
    9494:	e037883a 	mov	sp,fp
    9498:	dfc00117 	ldw	ra,4(sp)
    949c:	df000017 	ldw	fp,0(sp)
    94a0:	dec00204 	addi	sp,sp,8
    94a4:	f800283a 	ret

000094a8 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    94a8:	defff604 	addi	sp,sp,-40
    94ac:	dfc00915 	stw	ra,36(sp)
    94b0:	df000815 	stw	fp,32(sp)
    94b4:	df000804 	addi	fp,sp,32
    94b8:	e13ffd15 	stw	r4,-12(fp)
    94bc:	2805883a 	mov	r2,r5
    94c0:	e1bfff15 	stw	r6,-4(fp)
    94c4:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    94c8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    94cc:	e0bfff17 	ldw	r2,-4(fp)
    94d0:	1000021e 	bne	r2,zero,94dc <OSSemPendAbort+0x34>
        return (0);
    94d4:	0005883a 	mov	r2,zero
    94d8:	00004906 	br	9600 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    94dc:	e0bffd17 	ldw	r2,-12(fp)
    94e0:	1000051e 	bne	r2,zero,94f8 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    94e4:	e0bfff17 	ldw	r2,-4(fp)
    94e8:	00c00104 	movi	r3,4
    94ec:	10c00005 	stb	r3,0(r2)
        return (0);
    94f0:	0005883a 	mov	r2,zero
    94f4:	00004206 	br	9600 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    94f8:	e0bffd17 	ldw	r2,-12(fp)
    94fc:	10800003 	ldbu	r2,0(r2)
    9500:	10803fcc 	andi	r2,r2,255
    9504:	108000e0 	cmpeqi	r2,r2,3
    9508:	1000051e 	bne	r2,zero,9520 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    950c:	e0bfff17 	ldw	r2,-4(fp)
    9510:	00c00044 	movi	r3,1
    9514:	10c00005 	stb	r3,0(r2)
        return (0);
    9518:	0005883a 	mov	r2,zero
    951c:	00003806 	br	9600 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9520:	0005303a 	rdctl	r2,status
    9524:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9528:	e0fffc17 	ldw	r3,-16(fp)
    952c:	00bfff84 	movi	r2,-2
    9530:	1884703a 	and	r2,r3,r2
    9534:	1001703a 	wrctl	status,r2
  
  return context;
    9538:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    953c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
    9540:	e0bffd17 	ldw	r2,-12(fp)
    9544:	10800283 	ldbu	r2,10(r2)
    9548:	10803fcc 	andi	r2,r2,255
    954c:	10002526 	beq	r2,zero,95e4 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
    9550:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    9554:	e0bffe03 	ldbu	r2,-8(fp)
    9558:	10800060 	cmpeqi	r2,r2,1
    955c:	10000e26 	beq	r2,zero,9598 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    9560:	00000806 	br	9584 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    9564:	01c00084 	movi	r7,2
    9568:	01800044 	movi	r6,1
    956c:	000b883a 	mov	r5,zero
    9570:	e13ffd17 	ldw	r4,-12(fp)
    9574:	0004ca80 	call	4ca8 <OS_EventTaskRdy>
                     nbr_tasks++;
    9578:	e0bff803 	ldbu	r2,-32(fp)
    957c:	10800044 	addi	r2,r2,1
    9580:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    9584:	e0bffd17 	ldw	r2,-12(fp)
    9588:	10800283 	ldbu	r2,10(r2)
    958c:	10803fcc 	andi	r2,r2,255
    9590:	103ff41e 	bne	r2,zero,9564 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009564>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    9594:	00000906 	br	95bc <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    9598:	01c00084 	movi	r7,2
    959c:	01800044 	movi	r6,1
    95a0:	000b883a 	mov	r5,zero
    95a4:	e13ffd17 	ldw	r4,-12(fp)
    95a8:	0004ca80 	call	4ca8 <OS_EventTaskRdy>
                 nbr_tasks++;
    95ac:	e0bff803 	ldbu	r2,-32(fp)
    95b0:	10800044 	addi	r2,r2,1
    95b4:	e0bff805 	stb	r2,-32(fp)
                 break;
    95b8:	0001883a 	nop
    95bc:	e0bff917 	ldw	r2,-28(fp)
    95c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    95c4:	e0bffa17 	ldw	r2,-24(fp)
    95c8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    95cc:	00056f40 	call	56f4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    95d0:	e0bfff17 	ldw	r2,-4(fp)
    95d4:	00c00384 	movi	r3,14
    95d8:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    95dc:	e0bff803 	ldbu	r2,-32(fp)
    95e0:	00000706 	br	9600 <OSSemPendAbort+0x158>
    95e4:	e0bff917 	ldw	r2,-28(fp)
    95e8:	e0bffb15 	stw	r2,-20(fp)
    95ec:	e0bffb17 	ldw	r2,-20(fp)
    95f0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    95f4:	e0bfff17 	ldw	r2,-4(fp)
    95f8:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
    95fc:	0005883a 	mov	r2,zero
}
    9600:	e037883a 	mov	sp,fp
    9604:	dfc00117 	ldw	ra,4(sp)
    9608:	df000017 	ldw	fp,0(sp)
    960c:	dec00204 	addi	sp,sp,8
    9610:	f800283a 	ret

00009614 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    9614:	defff804 	addi	sp,sp,-32
    9618:	dfc00715 	stw	ra,28(sp)
    961c:	df000615 	stw	fp,24(sp)
    9620:	df000604 	addi	fp,sp,24
    9624:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9628:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    962c:	e0bfff17 	ldw	r2,-4(fp)
    9630:	1000021e 	bne	r2,zero,963c <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
    9634:	00800104 	movi	r2,4
    9638:	00003506 	br	9710 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    963c:	e0bfff17 	ldw	r2,-4(fp)
    9640:	10800003 	ldbu	r2,0(r2)
    9644:	10803fcc 	andi	r2,r2,255
    9648:	108000e0 	cmpeqi	r2,r2,3
    964c:	1000021e 	bne	r2,zero,9658 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
    9650:	00800044 	movi	r2,1
    9654:	00002e06 	br	9710 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9658:	0005303a 	rdctl	r2,status
    965c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9660:	e0fffe17 	ldw	r3,-8(fp)
    9664:	00bfff84 	movi	r2,-2
    9668:	1884703a 	and	r2,r3,r2
    966c:	1001703a 	wrctl	status,r2
  
  return context;
    9670:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    9674:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
    9678:	e0bfff17 	ldw	r2,-4(fp)
    967c:	10800283 	ldbu	r2,10(r2)
    9680:	10803fcc 	andi	r2,r2,255
    9684:	10000c26 	beq	r2,zero,96b8 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    9688:	000f883a 	mov	r7,zero
    968c:	01800044 	movi	r6,1
    9690:	000b883a 	mov	r5,zero
    9694:	e13fff17 	ldw	r4,-4(fp)
    9698:	0004ca80 	call	4ca8 <OS_EventTaskRdy>
    969c:	e0bffa17 	ldw	r2,-24(fp)
    96a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    96a4:	e0bffb17 	ldw	r2,-20(fp)
    96a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    96ac:	00056f40 	call	56f4 <OS_Sched>
        return (OS_ERR_NONE);
    96b0:	0005883a 	mov	r2,zero
    96b4:	00001606 	br	9710 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    96b8:	e0bfff17 	ldw	r2,-4(fp)
    96bc:	1080020b 	ldhu	r2,8(r2)
    96c0:	10ffffcc 	andi	r3,r2,65535
    96c4:	00bfffd4 	movui	r2,65535
    96c8:	18800c26 	beq	r3,r2,96fc <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    96cc:	e0bfff17 	ldw	r2,-4(fp)
    96d0:	1080020b 	ldhu	r2,8(r2)
    96d4:	10800044 	addi	r2,r2,1
    96d8:	1007883a 	mov	r3,r2
    96dc:	e0bfff17 	ldw	r2,-4(fp)
    96e0:	10c0020d 	sth	r3,8(r2)
    96e4:	e0bffa17 	ldw	r2,-24(fp)
    96e8:	e0bffc15 	stw	r2,-16(fp)
    96ec:	e0bffc17 	ldw	r2,-16(fp)
    96f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    96f4:	0005883a 	mov	r2,zero
    96f8:	00000506 	br	9710 <OSSemPost+0xfc>
    96fc:	e0bffa17 	ldw	r2,-24(fp)
    9700:	e0bffd15 	stw	r2,-12(fp)
    9704:	e0bffd17 	ldw	r2,-12(fp)
    9708:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
    970c:	00800c84 	movi	r2,50
}
    9710:	e037883a 	mov	sp,fp
    9714:	dfc00117 	ldw	ra,4(sp)
    9718:	df000017 	ldw	fp,0(sp)
    971c:	dec00204 	addi	sp,sp,8
    9720:	f800283a 	ret

00009724 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
    9724:	defff704 	addi	sp,sp,-36
    9728:	df000815 	stw	fp,32(sp)
    972c:	df000804 	addi	fp,sp,32
    9730:	e13ffe15 	stw	r4,-8(fp)
    9734:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    9738:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    973c:	e0bffe17 	ldw	r2,-8(fp)
    9740:	1000021e 	bne	r2,zero,974c <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    9744:	00800104 	movi	r2,4
    9748:	00003606 	br	9824 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
    974c:	e0bfff17 	ldw	r2,-4(fp)
    9750:	1000021e 	bne	r2,zero,975c <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    9754:	00800244 	movi	r2,9
    9758:	00003206 	br	9824 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    975c:	e0bffe17 	ldw	r2,-8(fp)
    9760:	10800003 	ldbu	r2,0(r2)
    9764:	10803fcc 	andi	r2,r2,255
    9768:	108000e0 	cmpeqi	r2,r2,3
    976c:	1000021e 	bne	r2,zero,9778 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    9770:	00800044 	movi	r2,1
    9774:	00002b06 	br	9824 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9778:	0005303a 	rdctl	r2,status
    977c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9780:	e0fffd17 	ldw	r3,-12(fp)
    9784:	00bfff84 	movi	r2,-2
    9788:	1884703a 	and	r2,r3,r2
    978c:	1001703a 	wrctl	status,r2
  
  return context;
    9790:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    9794:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    9798:	e0bffe17 	ldw	r2,-8(fp)
    979c:	10c00283 	ldbu	r3,10(r2)
    97a0:	e0bfff17 	ldw	r2,-4(fp)
    97a4:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
    97a8:	e0bffe17 	ldw	r2,-8(fp)
    97ac:	108002c4 	addi	r2,r2,11
    97b0:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
    97b4:	e0bfff17 	ldw	r2,-4(fp)
    97b8:	10800084 	addi	r2,r2,2
    97bc:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    97c0:	e03ffa05 	stb	zero,-24(fp)
    97c4:	00000b06 	br	97f4 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
    97c8:	e0bff917 	ldw	r2,-28(fp)
    97cc:	10c00044 	addi	r3,r2,1
    97d0:	e0fff915 	stw	r3,-28(fp)
    97d4:	e0fff817 	ldw	r3,-32(fp)
    97d8:	19000044 	addi	r4,r3,1
    97dc:	e13ff815 	stw	r4,-32(fp)
    97e0:	18c00003 	ldbu	r3,0(r3)
    97e4:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    97e8:	e0bffa03 	ldbu	r2,-24(fp)
    97ec:	10800044 	addi	r2,r2,1
    97f0:	e0bffa05 	stb	r2,-24(fp)
    97f4:	e0bffa03 	ldbu	r2,-24(fp)
    97f8:	108000f0 	cmpltui	r2,r2,3
    97fc:	103ff21e 	bne	r2,zero,97c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70097c8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
    9800:	e0bffe17 	ldw	r2,-8(fp)
    9804:	10c0020b 	ldhu	r3,8(r2)
    9808:	e0bfff17 	ldw	r2,-4(fp)
    980c:	10c0000d 	sth	r3,0(r2)
    9810:	e0bffb17 	ldw	r2,-20(fp)
    9814:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9818:	e0bffc17 	ldw	r2,-16(fp)
    981c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    9820:	0005883a 	mov	r2,zero
}
    9824:	e037883a 	mov	sp,fp
    9828:	df000017 	ldw	fp,0(sp)
    982c:	dec00104 	addi	sp,sp,4
    9830:	f800283a 	ret

00009834 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
    9834:	defff904 	addi	sp,sp,-28
    9838:	df000615 	stw	fp,24(sp)
    983c:	df000604 	addi	fp,sp,24
    9840:	e13ffd15 	stw	r4,-12(fp)
    9844:	2805883a 	mov	r2,r5
    9848:	e1bfff15 	stw	r6,-4(fp)
    984c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9850:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    9854:	e0bfff17 	ldw	r2,-4(fp)
    9858:	10003126 	beq	r2,zero,9920 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    985c:	e0bffd17 	ldw	r2,-12(fp)
    9860:	1000041e 	bne	r2,zero,9874 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    9864:	e0bfff17 	ldw	r2,-4(fp)
    9868:	00c00104 	movi	r3,4
    986c:	10c00005 	stb	r3,0(r2)
        return;
    9870:	00002c06 	br	9924 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    9874:	e0bffd17 	ldw	r2,-12(fp)
    9878:	10800003 	ldbu	r2,0(r2)
    987c:	10803fcc 	andi	r2,r2,255
    9880:	108000e0 	cmpeqi	r2,r2,3
    9884:	1000041e 	bne	r2,zero,9898 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
    9888:	e0bfff17 	ldw	r2,-4(fp)
    988c:	00c00044 	movi	r3,1
    9890:	10c00005 	stb	r3,0(r2)
        return;
    9894:	00002306 	br	9924 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9898:	0005303a 	rdctl	r2,status
    989c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    98a0:	e0fffc17 	ldw	r3,-16(fp)
    98a4:	00bfff84 	movi	r2,-2
    98a8:	1884703a 	and	r2,r3,r2
    98ac:	1001703a 	wrctl	status,r2
  
  return context;
    98b0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    98b4:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
    98b8:	e0bfff17 	ldw	r2,-4(fp)
    98bc:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
    98c0:	e0bffd17 	ldw	r2,-12(fp)
    98c4:	1080020b 	ldhu	r2,8(r2)
    98c8:	10bfffcc 	andi	r2,r2,65535
    98cc:	10000426 	beq	r2,zero,98e0 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
    98d0:	e0bffd17 	ldw	r2,-12(fp)
    98d4:	e0fffe0b 	ldhu	r3,-8(fp)
    98d8:	10c0020d 	sth	r3,8(r2)
    98dc:	00000b06 	br	990c <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
    98e0:	e0bffd17 	ldw	r2,-12(fp)
    98e4:	10800283 	ldbu	r2,10(r2)
    98e8:	10803fcc 	andi	r2,r2,255
    98ec:	1000041e 	bne	r2,zero,9900 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
    98f0:	e0bffd17 	ldw	r2,-12(fp)
    98f4:	e0fffe0b 	ldhu	r3,-8(fp)
    98f8:	10c0020d 	sth	r3,8(r2)
    98fc:	00000306 	br	990c <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
    9900:	e0bfff17 	ldw	r2,-4(fp)
    9904:	00c01244 	movi	r3,73
    9908:	10c00005 	stb	r3,0(r2)
    990c:	e0bffa17 	ldw	r2,-24(fp)
    9910:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9914:	e0bffb17 	ldw	r2,-20(fp)
    9918:	1001703a 	wrctl	status,r2
    991c:	00000106 	br	9924 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
    9920:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
    9924:	e037883a 	mov	sp,fp
    9928:	df000017 	ldw	fp,0(sp)
    992c:	dec00104 	addi	sp,sp,4
    9930:	f800283a 	ret

00009934 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
    9934:	defff104 	addi	sp,sp,-60
    9938:	dfc00e15 	stw	ra,56(sp)
    993c:	df000d15 	stw	fp,52(sp)
    9940:	df000d04 	addi	fp,sp,52
    9944:	2007883a 	mov	r3,r4
    9948:	2805883a 	mov	r2,r5
    994c:	e0fffe05 	stb	r3,-8(fp)
    9950:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
    9954:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
    9958:	e0bffe03 	ldbu	r2,-8(fp)
    995c:	10800530 	cmpltui	r2,r2,20
    9960:	1000051e 	bne	r2,zero,9978 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
    9964:	e0bffe03 	ldbu	r2,-8(fp)
    9968:	10803fe0 	cmpeqi	r2,r2,255
    996c:	1000021e 	bne	r2,zero,9978 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
    9970:	00800a84 	movi	r2,42
    9974:	00012606 	br	9e10 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
    9978:	e0bfff03 	ldbu	r2,-4(fp)
    997c:	10800530 	cmpltui	r2,r2,20
    9980:	1000021e 	bne	r2,zero,998c <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
    9984:	00800a84 	movi	r2,42
    9988:	00012106 	br	9e10 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    998c:	0005303a 	rdctl	r2,status
    9990:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9994:	e0fffd17 	ldw	r3,-12(fp)
    9998:	00bfff84 	movi	r2,-2
    999c:	1884703a 	and	r2,r3,r2
    99a0:	1001703a 	wrctl	status,r2
  
  return context;
    99a4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    99a8:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
    99ac:	e0ffff03 	ldbu	r3,-4(fp)
    99b0:	008000b4 	movhi	r2,2
    99b4:	10a9ba04 	addi	r2,r2,-22808
    99b8:	18c7883a 	add	r3,r3,r3
    99bc:	18c7883a 	add	r3,r3,r3
    99c0:	10c5883a 	add	r2,r2,r3
    99c4:	10800017 	ldw	r2,0(r2)
    99c8:	10000626 	beq	r2,zero,99e4 <OSTaskChangePrio+0xb0>
    99cc:	e0bff517 	ldw	r2,-44(fp)
    99d0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    99d4:	e0bff617 	ldw	r2,-40(fp)
    99d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
    99dc:	00800a04 	movi	r2,40
    99e0:	00010b06 	br	9e10 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
    99e4:	e0bffe03 	ldbu	r2,-8(fp)
    99e8:	10803fd8 	cmpnei	r2,r2,255
    99ec:	1000031e 	bne	r2,zero,99fc <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
    99f0:	d0a80217 	ldw	r2,-24568(gp)
    99f4:	10800c83 	ldbu	r2,50(r2)
    99f8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
    99fc:	e0fffe03 	ldbu	r3,-8(fp)
    9a00:	008000b4 	movhi	r2,2
    9a04:	10a9ba04 	addi	r2,r2,-22808
    9a08:	18c7883a 	add	r3,r3,r3
    9a0c:	18c7883a 	add	r3,r3,r3
    9a10:	10c5883a 	add	r2,r2,r3
    9a14:	10800017 	ldw	r2,0(r2)
    9a18:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
    9a1c:	e0bff817 	ldw	r2,-32(fp)
    9a20:	1000061e 	bne	r2,zero,9a3c <OSTaskChangePrio+0x108>
    9a24:	e0bff517 	ldw	r2,-44(fp)
    9a28:	e0bff715 	stw	r2,-36(fp)
    9a2c:	e0bff717 	ldw	r2,-36(fp)
    9a30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
    9a34:	00800a44 	movi	r2,41
    9a38:	0000f506 	br	9e10 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
    9a3c:	e0bff817 	ldw	r2,-32(fp)
    9a40:	10800058 	cmpnei	r2,r2,1
    9a44:	1000061e 	bne	r2,zero,9a60 <OSTaskChangePrio+0x12c>
    9a48:	e0bff517 	ldw	r2,-44(fp)
    9a4c:	e0bff915 	stw	r2,-28(fp)
    9a50:	e0bff917 	ldw	r2,-28(fp)
    9a54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
    9a58:	008010c4 	movi	r2,67
    9a5c:	0000ec06 	br	9e10 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
    9a60:	e0bfff03 	ldbu	r2,-4(fp)
    9a64:	1004d0fa 	srli	r2,r2,3
    9a68:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
    9a6c:	e0bfff03 	ldbu	r2,-4(fp)
    9a70:	108001cc 	andi	r2,r2,7
    9a74:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
    9a78:	e0bffb03 	ldbu	r2,-20(fp)
    9a7c:	00c00044 	movi	r3,1
    9a80:	1884983a 	sll	r2,r3,r2
    9a84:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
    9a88:	e0bffb43 	ldbu	r2,-19(fp)
    9a8c:	00c00044 	movi	r3,1
    9a90:	1884983a 	sll	r2,r3,r2
    9a94:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
    9a98:	e0fffe03 	ldbu	r3,-8(fp)
    9a9c:	008000b4 	movhi	r2,2
    9aa0:	10a9ba04 	addi	r2,r2,-22808
    9aa4:	18c7883a 	add	r3,r3,r3
    9aa8:	18c7883a 	add	r3,r3,r3
    9aac:	10c5883a 	add	r2,r2,r3
    9ab0:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
    9ab4:	e0ffff03 	ldbu	r3,-4(fp)
    9ab8:	008000b4 	movhi	r2,2
    9abc:	10a9ba04 	addi	r2,r2,-22808
    9ac0:	18c7883a 	add	r3,r3,r3
    9ac4:	18c7883a 	add	r3,r3,r3
    9ac8:	10c5883a 	add	r2,r2,r3
    9acc:	e0fff817 	ldw	r3,-32(fp)
    9ad0:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
    9ad4:	e0bff817 	ldw	r2,-32(fp)
    9ad8:	10800d03 	ldbu	r2,52(r2)
    9adc:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
    9ae0:	e0bff817 	ldw	r2,-32(fp)
    9ae4:	10800d83 	ldbu	r2,54(r2)
    9ae8:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
    9aec:	e0bff817 	ldw	r2,-32(fp)
    9af0:	10800d43 	ldbu	r2,53(r2)
    9af4:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
    9af8:	e0fffc03 	ldbu	r3,-16(fp)
    9afc:	d0a7ff44 	addi	r2,gp,-24579
    9b00:	1885883a 	add	r2,r3,r2
    9b04:	10c00003 	ldbu	r3,0(r2)
    9b08:	e0bffc83 	ldbu	r2,-14(fp)
    9b0c:	1884703a 	and	r2,r3,r2
    9b10:	10803fcc 	andi	r2,r2,255
    9b14:	10002826 	beq	r2,zero,9bb8 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
    9b18:	e0fffc03 	ldbu	r3,-16(fp)
    9b1c:	e13ffc03 	ldbu	r4,-16(fp)
    9b20:	d0a7ff44 	addi	r2,gp,-24579
    9b24:	2085883a 	add	r2,r4,r2
    9b28:	10800003 	ldbu	r2,0(r2)
    9b2c:	1009883a 	mov	r4,r2
    9b30:	e0bffc83 	ldbu	r2,-14(fp)
    9b34:	0084303a 	nor	r2,zero,r2
    9b38:	2084703a 	and	r2,r4,r2
    9b3c:	1009883a 	mov	r4,r2
    9b40:	d0a7ff44 	addi	r2,gp,-24579
    9b44:	1885883a 	add	r2,r3,r2
    9b48:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
    9b4c:	e0fffc03 	ldbu	r3,-16(fp)
    9b50:	d0a7ff44 	addi	r2,gp,-24579
    9b54:	1885883a 	add	r2,r3,r2
    9b58:	10800003 	ldbu	r2,0(r2)
    9b5c:	10803fcc 	andi	r2,r2,255
    9b60:	1000061e 	bne	r2,zero,9b7c <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
    9b64:	e0bffc43 	ldbu	r2,-15(fp)
    9b68:	0084303a 	nor	r2,zero,r2
    9b6c:	1007883a 	mov	r3,r2
    9b70:	d0a7ff03 	ldbu	r2,-24580(gp)
    9b74:	1884703a 	and	r2,r3,r2
    9b78:	d0a7ff05 	stb	r2,-24580(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
    9b7c:	d0e7ff03 	ldbu	r3,-24580(gp)
    9b80:	e0bffb83 	ldbu	r2,-18(fp)
    9b84:	1884b03a 	or	r2,r3,r2
    9b88:	d0a7ff05 	stb	r2,-24580(gp)
         OSRdyTbl[y_new] |= bitx_new;
    9b8c:	e0fffb03 	ldbu	r3,-20(fp)
    9b90:	e13ffb03 	ldbu	r4,-20(fp)
    9b94:	d0a7ff44 	addi	r2,gp,-24579
    9b98:	2085883a 	add	r2,r4,r2
    9b9c:	11000003 	ldbu	r4,0(r2)
    9ba0:	e0bffbc3 	ldbu	r2,-17(fp)
    9ba4:	2084b03a 	or	r2,r4,r2
    9ba8:	1009883a 	mov	r4,r2
    9bac:	d0a7ff44 	addi	r2,gp,-24579
    9bb0:	1885883a 	add	r2,r3,r2
    9bb4:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
    9bb8:	e0bff817 	ldw	r2,-32(fp)
    9bbc:	10800717 	ldw	r2,28(r2)
    9bc0:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
    9bc4:	e0bff317 	ldw	r2,-52(fp)
    9bc8:	10003326 	beq	r2,zero,9c98 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
    9bcc:	e0bffc03 	ldbu	r2,-16(fp)
    9bd0:	e0fffc03 	ldbu	r3,-16(fp)
    9bd4:	e13ff317 	ldw	r4,-52(fp)
    9bd8:	20c7883a 	add	r3,r4,r3
    9bdc:	18c002c4 	addi	r3,r3,11
    9be0:	18c00003 	ldbu	r3,0(r3)
    9be4:	1809883a 	mov	r4,r3
    9be8:	e0fffc83 	ldbu	r3,-14(fp)
    9bec:	00c6303a 	nor	r3,zero,r3
    9bf0:	20c6703a 	and	r3,r4,r3
    9bf4:	1809883a 	mov	r4,r3
    9bf8:	e0fff317 	ldw	r3,-52(fp)
    9bfc:	1885883a 	add	r2,r3,r2
    9c00:	108002c4 	addi	r2,r2,11
    9c04:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
    9c08:	e0bffc03 	ldbu	r2,-16(fp)
    9c0c:	e0fff317 	ldw	r3,-52(fp)
    9c10:	1885883a 	add	r2,r3,r2
    9c14:	108002c4 	addi	r2,r2,11
    9c18:	10800003 	ldbu	r2,0(r2)
    9c1c:	10803fcc 	andi	r2,r2,255
    9c20:	1000091e 	bne	r2,zero,9c48 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
    9c24:	e0bff317 	ldw	r2,-52(fp)
    9c28:	10800283 	ldbu	r2,10(r2)
    9c2c:	1007883a 	mov	r3,r2
    9c30:	e0bffc43 	ldbu	r2,-15(fp)
    9c34:	0084303a 	nor	r2,zero,r2
    9c38:	1884703a 	and	r2,r3,r2
    9c3c:	1007883a 	mov	r3,r2
    9c40:	e0bff317 	ldw	r2,-52(fp)
    9c44:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
    9c48:	e0bff317 	ldw	r2,-52(fp)
    9c4c:	10c00283 	ldbu	r3,10(r2)
    9c50:	e0bffb83 	ldbu	r2,-18(fp)
    9c54:	1884b03a 	or	r2,r3,r2
    9c58:	1007883a 	mov	r3,r2
    9c5c:	e0bff317 	ldw	r2,-52(fp)
    9c60:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
    9c64:	e0bffb03 	ldbu	r2,-20(fp)
    9c68:	e0fffb03 	ldbu	r3,-20(fp)
    9c6c:	e13ff317 	ldw	r4,-52(fp)
    9c70:	20c7883a 	add	r3,r4,r3
    9c74:	18c002c4 	addi	r3,r3,11
    9c78:	19000003 	ldbu	r4,0(r3)
    9c7c:	e0fffbc3 	ldbu	r3,-17(fp)
    9c80:	20c6b03a 	or	r3,r4,r3
    9c84:	1809883a 	mov	r4,r3
    9c88:	e0fff317 	ldw	r3,-52(fp)
    9c8c:	1885883a 	add	r2,r3,r2
    9c90:	108002c4 	addi	r2,r2,11
    9c94:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
    9c98:	e0bff817 	ldw	r2,-32(fp)
    9c9c:	10800817 	ldw	r2,32(r2)
    9ca0:	10004226 	beq	r2,zero,9dac <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
    9ca4:	e0bff817 	ldw	r2,-32(fp)
    9ca8:	10800817 	ldw	r2,32(r2)
    9cac:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
    9cb0:	e0bff417 	ldw	r2,-48(fp)
    9cb4:	10800017 	ldw	r2,0(r2)
    9cb8:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
    9cbc:	00003906 	br	9da4 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
    9cc0:	e0bffc03 	ldbu	r2,-16(fp)
    9cc4:	e0fffc03 	ldbu	r3,-16(fp)
    9cc8:	e13ff317 	ldw	r4,-52(fp)
    9ccc:	20c7883a 	add	r3,r4,r3
    9cd0:	18c002c4 	addi	r3,r3,11
    9cd4:	18c00003 	ldbu	r3,0(r3)
    9cd8:	1809883a 	mov	r4,r3
    9cdc:	e0fffc83 	ldbu	r3,-14(fp)
    9ce0:	00c6303a 	nor	r3,zero,r3
    9ce4:	20c6703a 	and	r3,r4,r3
    9ce8:	1809883a 	mov	r4,r3
    9cec:	e0fff317 	ldw	r3,-52(fp)
    9cf0:	1885883a 	add	r2,r3,r2
    9cf4:	108002c4 	addi	r2,r2,11
    9cf8:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
    9cfc:	e0bffc03 	ldbu	r2,-16(fp)
    9d00:	e0fff317 	ldw	r3,-52(fp)
    9d04:	1885883a 	add	r2,r3,r2
    9d08:	108002c4 	addi	r2,r2,11
    9d0c:	10800003 	ldbu	r2,0(r2)
    9d10:	10803fcc 	andi	r2,r2,255
    9d14:	1000091e 	bne	r2,zero,9d3c <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
    9d18:	e0bff317 	ldw	r2,-52(fp)
    9d1c:	10800283 	ldbu	r2,10(r2)
    9d20:	1007883a 	mov	r3,r2
    9d24:	e0bffc43 	ldbu	r2,-15(fp)
    9d28:	0084303a 	nor	r2,zero,r2
    9d2c:	1884703a 	and	r2,r3,r2
    9d30:	1007883a 	mov	r3,r2
    9d34:	e0bff317 	ldw	r2,-52(fp)
    9d38:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
    9d3c:	e0bff317 	ldw	r2,-52(fp)
    9d40:	10c00283 	ldbu	r3,10(r2)
    9d44:	e0bffb83 	ldbu	r2,-18(fp)
    9d48:	1884b03a 	or	r2,r3,r2
    9d4c:	1007883a 	mov	r3,r2
    9d50:	e0bff317 	ldw	r2,-52(fp)
    9d54:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
    9d58:	e0bffb03 	ldbu	r2,-20(fp)
    9d5c:	e0fffb03 	ldbu	r3,-20(fp)
    9d60:	e13ff317 	ldw	r4,-52(fp)
    9d64:	20c7883a 	add	r3,r4,r3
    9d68:	18c002c4 	addi	r3,r3,11
    9d6c:	19000003 	ldbu	r4,0(r3)
    9d70:	e0fffbc3 	ldbu	r3,-17(fp)
    9d74:	20c6b03a 	or	r3,r4,r3
    9d78:	1809883a 	mov	r4,r3
    9d7c:	e0fff317 	ldw	r3,-52(fp)
    9d80:	1885883a 	add	r2,r3,r2
    9d84:	108002c4 	addi	r2,r2,11
    9d88:	11000005 	stb	r4,0(r2)
            pevents++;
    9d8c:	e0bff417 	ldw	r2,-48(fp)
    9d90:	10800104 	addi	r2,r2,4
    9d94:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
    9d98:	e0bff417 	ldw	r2,-48(fp)
    9d9c:	10800017 	ldw	r2,0(r2)
    9da0:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
    9da4:	e0bff317 	ldw	r2,-52(fp)
    9da8:	103fc51e 	bne	r2,zero,9cc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009cc0>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
    9dac:	e0bff817 	ldw	r2,-32(fp)
    9db0:	e0ffff03 	ldbu	r3,-4(fp)
    9db4:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
    9db8:	e0bff817 	ldw	r2,-32(fp)
    9dbc:	e0fffb03 	ldbu	r3,-20(fp)
    9dc0:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
    9dc4:	e0bff817 	ldw	r2,-32(fp)
    9dc8:	e0fffb43 	ldbu	r3,-19(fp)
    9dcc:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
    9dd0:	e0bff817 	ldw	r2,-32(fp)
    9dd4:	e0fffb83 	ldbu	r3,-18(fp)
    9dd8:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
    9ddc:	e0bff817 	ldw	r2,-32(fp)
    9de0:	e0fffbc3 	ldbu	r3,-17(fp)
    9de4:	10c00d45 	stb	r3,53(r2)
    9de8:	e0bff517 	ldw	r2,-44(fp)
    9dec:	e0bffa15 	stw	r2,-24(fp)
    9df0:	e0bffa17 	ldw	r2,-24(fp)
    9df4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    9df8:	d0a7f343 	ldbu	r2,-24627(gp)
    9dfc:	10803fcc 	andi	r2,r2,255
    9e00:	10800058 	cmpnei	r2,r2,1
    9e04:	1000011e 	bne	r2,zero,9e0c <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
    9e08:	00056f40 	call	56f4 <OS_Sched>
    }
    return (OS_ERR_NONE);
    9e0c:	0005883a 	mov	r2,zero
}
    9e10:	e037883a 	mov	sp,fp
    9e14:	dfc00117 	ldw	ra,4(sp)
    9e18:	df000017 	ldw	fp,0(sp)
    9e1c:	dec00204 	addi	sp,sp,8
    9e20:	f800283a 	ret

00009e24 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
    9e24:	deffee04 	addi	sp,sp,-72
    9e28:	dfc01115 	stw	ra,68(sp)
    9e2c:	df001015 	stw	fp,64(sp)
    9e30:	df001004 	addi	fp,sp,64
    9e34:	e13ffc15 	stw	r4,-16(fp)
    9e38:	e17ffd15 	stw	r5,-12(fp)
    9e3c:	e1bffe15 	stw	r6,-8(fp)
    9e40:	3805883a 	mov	r2,r7
    9e44:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    9e48:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    9e4c:	e0bfff03 	ldbu	r2,-4(fp)
    9e50:	10800570 	cmpltui	r2,r2,21
    9e54:	1000021e 	bne	r2,zero,9e60 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
    9e58:	00800a84 	movi	r2,42
    9e5c:	00005706 	br	9fbc <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9e60:	0005303a 	rdctl	r2,status
    9e64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9e68:	e0fffb17 	ldw	r3,-20(fp)
    9e6c:	00bfff84 	movi	r2,-2
    9e70:	1884703a 	and	r2,r3,r2
    9e74:	1001703a 	wrctl	status,r2
  
  return context;
    9e78:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    9e7c:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    9e80:	d0a80103 	ldbu	r2,-24572(gp)
    9e84:	10803fcc 	andi	r2,r2,255
    9e88:	10000626 	beq	r2,zero,9ea4 <OSTaskCreate+0x80>
    9e8c:	e0bff317 	ldw	r2,-52(fp)
    9e90:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9e94:	e0bff417 	ldw	r2,-48(fp)
    9e98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    9e9c:	00800f04 	movi	r2,60
    9ea0:	00004606 	br	9fbc <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    9ea4:	e0ffff03 	ldbu	r3,-4(fp)
    9ea8:	008000b4 	movhi	r2,2
    9eac:	10a9ba04 	addi	r2,r2,-22808
    9eb0:	18c7883a 	add	r3,r3,r3
    9eb4:	18c7883a 	add	r3,r3,r3
    9eb8:	10c5883a 	add	r2,r2,r3
    9ebc:	10800017 	ldw	r2,0(r2)
    9ec0:	1000391e 	bne	r2,zero,9fa8 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    9ec4:	e0ffff03 	ldbu	r3,-4(fp)
    9ec8:	008000b4 	movhi	r2,2
    9ecc:	10a9ba04 	addi	r2,r2,-22808
    9ed0:	18c7883a 	add	r3,r3,r3
    9ed4:	18c7883a 	add	r3,r3,r3
    9ed8:	10c5883a 	add	r2,r2,r3
    9edc:	00c00044 	movi	r3,1
    9ee0:	10c00015 	stw	r3,0(r2)
    9ee4:	e0bff317 	ldw	r2,-52(fp)
    9ee8:	e0bff515 	stw	r2,-44(fp)
    9eec:	e0bff517 	ldw	r2,-44(fp)
    9ef0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
    9ef4:	000f883a 	mov	r7,zero
    9ef8:	e1bffe17 	ldw	r6,-8(fp)
    9efc:	e17ffd17 	ldw	r5,-12(fp)
    9f00:	e13ffc17 	ldw	r4,-16(fp)
    9f04:	000ea440 	call	ea44 <OSTaskStkInit>
    9f08:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
    9f0c:	e0bfff03 	ldbu	r2,-4(fp)
    9f10:	d8000215 	stw	zero,8(sp)
    9f14:	d8000115 	stw	zero,4(sp)
    9f18:	d8000015 	stw	zero,0(sp)
    9f1c:	000f883a 	mov	r7,zero
    9f20:	000d883a 	mov	r6,zero
    9f24:	e17ff717 	ldw	r5,-36(fp)
    9f28:	1009883a 	mov	r4,r2
    9f2c:	0005b040 	call	5b04 <OS_TCBInit>
    9f30:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
    9f34:	e0bff803 	ldbu	r2,-32(fp)
    9f38:	1000061e 	bne	r2,zero,9f54 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
    9f3c:	d0a7f343 	ldbu	r2,-24627(gp)
    9f40:	10803fcc 	andi	r2,r2,255
    9f44:	10800058 	cmpnei	r2,r2,1
    9f48:	1000151e 	bne	r2,zero,9fa0 <OSTaskCreate+0x17c>
                OS_Sched();
    9f4c:	00056f40 	call	56f4 <OS_Sched>
    9f50:	00001306 	br	9fa0 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9f54:	0005303a 	rdctl	r2,status
    9f58:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9f5c:	e0fffa17 	ldw	r3,-24(fp)
    9f60:	00bfff84 	movi	r2,-2
    9f64:	1884703a 	and	r2,r3,r2
    9f68:	1001703a 	wrctl	status,r2
  
  return context;
    9f6c:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    9f70:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    9f74:	e0ffff03 	ldbu	r3,-4(fp)
    9f78:	008000b4 	movhi	r2,2
    9f7c:	10a9ba04 	addi	r2,r2,-22808
    9f80:	18c7883a 	add	r3,r3,r3
    9f84:	18c7883a 	add	r3,r3,r3
    9f88:	10c5883a 	add	r2,r2,r3
    9f8c:	10000015 	stw	zero,0(r2)
    9f90:	e0bff317 	ldw	r2,-52(fp)
    9f94:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9f98:	e0bff617 	ldw	r2,-40(fp)
    9f9c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    9fa0:	e0bff803 	ldbu	r2,-32(fp)
    9fa4:	00000506 	br	9fbc <OSTaskCreate+0x198>
    9fa8:	e0bff317 	ldw	r2,-52(fp)
    9fac:	e0bff915 	stw	r2,-28(fp)
    9fb0:	e0bff917 	ldw	r2,-28(fp)
    9fb4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    9fb8:	00800a04 	movi	r2,40
}
    9fbc:	e037883a 	mov	sp,fp
    9fc0:	dfc00117 	ldw	ra,4(sp)
    9fc4:	df000017 	ldw	fp,0(sp)
    9fc8:	dec00204 	addi	sp,sp,8
    9fcc:	f800283a 	ret

00009fd0 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
    9fd0:	deffec04 	addi	sp,sp,-80
    9fd4:	dfc01315 	stw	ra,76(sp)
    9fd8:	df001215 	stw	fp,72(sp)
    9fdc:	df001204 	addi	fp,sp,72
    9fe0:	e13ffa15 	stw	r4,-24(fp)
    9fe4:	e17ffb15 	stw	r5,-20(fp)
    9fe8:	e1bffc15 	stw	r6,-16(fp)
    9fec:	3809883a 	mov	r4,r7
    9ff0:	e0c00217 	ldw	r3,8(fp)
    9ff4:	e0800617 	ldw	r2,24(fp)
    9ff8:	e13ffd05 	stb	r4,-12(fp)
    9ffc:	e0fffe0d 	sth	r3,-8(fp)
    a000:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    a004:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    a008:	e0bffd03 	ldbu	r2,-12(fp)
    a00c:	10800570 	cmpltui	r2,r2,21
    a010:	1000021e 	bne	r2,zero,a01c <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
    a014:	00800a84 	movi	r2,42
    a018:	00006106 	br	a1a0 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a01c:	0005303a 	rdctl	r2,status
    a020:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a024:	e0fff917 	ldw	r3,-28(fp)
    a028:	00bfff84 	movi	r2,-2
    a02c:	1884703a 	and	r2,r3,r2
    a030:	1001703a 	wrctl	status,r2
  
  return context;
    a034:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    a038:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    a03c:	d0a80103 	ldbu	r2,-24572(gp)
    a040:	10803fcc 	andi	r2,r2,255
    a044:	10000626 	beq	r2,zero,a060 <OSTaskCreateExt+0x90>
    a048:	e0bff117 	ldw	r2,-60(fp)
    a04c:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a050:	e0bff217 	ldw	r2,-56(fp)
    a054:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    a058:	00800f04 	movi	r2,60
    a05c:	00005006 	br	a1a0 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    a060:	e0fffd03 	ldbu	r3,-12(fp)
    a064:	008000b4 	movhi	r2,2
    a068:	10a9ba04 	addi	r2,r2,-22808
    a06c:	18c7883a 	add	r3,r3,r3
    a070:	18c7883a 	add	r3,r3,r3
    a074:	10c5883a 	add	r2,r2,r3
    a078:	10800017 	ldw	r2,0(r2)
    a07c:	1000431e 	bne	r2,zero,a18c <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    a080:	e0fffd03 	ldbu	r3,-12(fp)
    a084:	008000b4 	movhi	r2,2
    a088:	10a9ba04 	addi	r2,r2,-22808
    a08c:	18c7883a 	add	r3,r3,r3
    a090:	18c7883a 	add	r3,r3,r3
    a094:	10c5883a 	add	r2,r2,r3
    a098:	00c00044 	movi	r3,1
    a09c:	10c00015 	stw	r3,0(r2)
    a0a0:	e0bff117 	ldw	r2,-60(fp)
    a0a4:	e0bff315 	stw	r2,-52(fp)
    a0a8:	e0bff317 	ldw	r2,-52(fp)
    a0ac:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
    a0b0:	e0bfff0b 	ldhu	r2,-4(fp)
    a0b4:	100d883a 	mov	r6,r2
    a0b8:	e1400417 	ldw	r5,16(fp)
    a0bc:	e1000317 	ldw	r4,12(fp)
    a0c0:	000b0300 	call	b030 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
    a0c4:	e0bfff0b 	ldhu	r2,-4(fp)
    a0c8:	100f883a 	mov	r7,r2
    a0cc:	e1bffc17 	ldw	r6,-16(fp)
    a0d0:	e17ffb17 	ldw	r5,-20(fp)
    a0d4:	e13ffa17 	ldw	r4,-24(fp)
    a0d8:	000ea440 	call	ea44 <OSTaskStkInit>
    a0dc:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
    a0e0:	e0fffd03 	ldbu	r3,-12(fp)
    a0e4:	e13ffe0b 	ldhu	r4,-8(fp)
    a0e8:	e0bfff0b 	ldhu	r2,-4(fp)
    a0ec:	d8800215 	stw	r2,8(sp)
    a0f0:	e0800517 	ldw	r2,20(fp)
    a0f4:	d8800115 	stw	r2,4(sp)
    a0f8:	e0800417 	ldw	r2,16(fp)
    a0fc:	d8800015 	stw	r2,0(sp)
    a100:	200f883a 	mov	r7,r4
    a104:	e1800317 	ldw	r6,12(fp)
    a108:	e17ff517 	ldw	r5,-44(fp)
    a10c:	1809883a 	mov	r4,r3
    a110:	0005b040 	call	5b04 <OS_TCBInit>
    a114:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
    a118:	e0bff603 	ldbu	r2,-40(fp)
    a11c:	1000061e 	bne	r2,zero,a138 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
    a120:	d0a7f343 	ldbu	r2,-24627(gp)
    a124:	10803fcc 	andi	r2,r2,255
    a128:	10800058 	cmpnei	r2,r2,1
    a12c:	1000151e 	bne	r2,zero,a184 <OSTaskCreateExt+0x1b4>
                OS_Sched();
    a130:	00056f40 	call	56f4 <OS_Sched>
    a134:	00001306 	br	a184 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a138:	0005303a 	rdctl	r2,status
    a13c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a140:	e0fff817 	ldw	r3,-32(fp)
    a144:	00bfff84 	movi	r2,-2
    a148:	1884703a 	and	r2,r3,r2
    a14c:	1001703a 	wrctl	status,r2
  
  return context;
    a150:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    a154:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
    a158:	e0fffd03 	ldbu	r3,-12(fp)
    a15c:	008000b4 	movhi	r2,2
    a160:	10a9ba04 	addi	r2,r2,-22808
    a164:	18c7883a 	add	r3,r3,r3
    a168:	18c7883a 	add	r3,r3,r3
    a16c:	10c5883a 	add	r2,r2,r3
    a170:	10000015 	stw	zero,0(r2)
    a174:	e0bff117 	ldw	r2,-60(fp)
    a178:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a17c:	e0bff417 	ldw	r2,-48(fp)
    a180:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    a184:	e0bff603 	ldbu	r2,-40(fp)
    a188:	00000506 	br	a1a0 <OSTaskCreateExt+0x1d0>
    a18c:	e0bff117 	ldw	r2,-60(fp)
    a190:	e0bff715 	stw	r2,-36(fp)
    a194:	e0bff717 	ldw	r2,-36(fp)
    a198:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    a19c:	00800a04 	movi	r2,40
}
    a1a0:	e037883a 	mov	sp,fp
    a1a4:	dfc00117 	ldw	ra,4(sp)
    a1a8:	df000017 	ldw	fp,0(sp)
    a1ac:	dec00204 	addi	sp,sp,8
    a1b0:	f800283a 	ret

0000a1b4 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
    a1b4:	defff404 	addi	sp,sp,-48
    a1b8:	dfc00b15 	stw	ra,44(sp)
    a1bc:	df000a15 	stw	fp,40(sp)
    a1c0:	df000a04 	addi	fp,sp,40
    a1c4:	2005883a 	mov	r2,r4
    a1c8:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
    a1cc:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
    a1d0:	d0a80103 	ldbu	r2,-24572(gp)
    a1d4:	10803fcc 	andi	r2,r2,255
    a1d8:	10000226 	beq	r2,zero,a1e4 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
    a1dc:	00801004 	movi	r2,64
    a1e0:	0000c006 	br	a4e4 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
    a1e4:	e0bfff03 	ldbu	r2,-4(fp)
    a1e8:	10800518 	cmpnei	r2,r2,20
    a1ec:	1000021e 	bne	r2,zero,a1f8 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
    a1f0:	00800f84 	movi	r2,62
    a1f4:	0000bb06 	br	a4e4 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
    a1f8:	e0bfff03 	ldbu	r2,-4(fp)
    a1fc:	10800530 	cmpltui	r2,r2,20
    a200:	1000051e 	bne	r2,zero,a218 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
    a204:	e0bfff03 	ldbu	r2,-4(fp)
    a208:	10803fe0 	cmpeqi	r2,r2,255
    a20c:	1000021e 	bne	r2,zero,a218 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
    a210:	00800a84 	movi	r2,42
    a214:	0000b306 	br	a4e4 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a218:	0005303a 	rdctl	r2,status
    a21c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a220:	e0fffe17 	ldw	r3,-8(fp)
    a224:	00bfff84 	movi	r2,-2
    a228:	1884703a 	and	r2,r3,r2
    a22c:	1001703a 	wrctl	status,r2
  
  return context;
    a230:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
    a234:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
    a238:	e0bfff03 	ldbu	r2,-4(fp)
    a23c:	10803fd8 	cmpnei	r2,r2,255
    a240:	1000031e 	bne	r2,zero,a250 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
    a244:	d0a80217 	ldw	r2,-24568(gp)
    a248:	10800c83 	ldbu	r2,50(r2)
    a24c:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    a250:	e0ffff03 	ldbu	r3,-4(fp)
    a254:	008000b4 	movhi	r2,2
    a258:	10a9ba04 	addi	r2,r2,-22808
    a25c:	18c7883a 	add	r3,r3,r3
    a260:	18c7883a 	add	r3,r3,r3
    a264:	10c5883a 	add	r2,r2,r3
    a268:	10800017 	ldw	r2,0(r2)
    a26c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
    a270:	e0bff817 	ldw	r2,-32(fp)
    a274:	1000061e 	bne	r2,zero,a290 <OSTaskDel+0xdc>
    a278:	e0bff617 	ldw	r2,-40(fp)
    a27c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a280:	e0bff717 	ldw	r2,-36(fp)
    a284:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    a288:	008010c4 	movi	r2,67
    a28c:	00009506 	br	a4e4 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
    a290:	e0bff817 	ldw	r2,-32(fp)
    a294:	10800058 	cmpnei	r2,r2,1
    a298:	1000061e 	bne	r2,zero,a2b4 <OSTaskDel+0x100>
    a29c:	e0bff617 	ldw	r2,-40(fp)
    a2a0:	e0bff915 	stw	r2,-28(fp)
    a2a4:	e0bff917 	ldw	r2,-28(fp)
    a2a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    a2ac:	00800f44 	movi	r2,61
    a2b0:	00008c06 	br	a4e4 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
    a2b4:	e0bff817 	ldw	r2,-32(fp)
    a2b8:	10800d03 	ldbu	r2,52(r2)
    a2bc:	10c03fcc 	andi	r3,r2,255
    a2c0:	e0bff817 	ldw	r2,-32(fp)
    a2c4:	10800d03 	ldbu	r2,52(r2)
    a2c8:	11003fcc 	andi	r4,r2,255
    a2cc:	d0a7ff44 	addi	r2,gp,-24579
    a2d0:	2085883a 	add	r2,r4,r2
    a2d4:	10800003 	ldbu	r2,0(r2)
    a2d8:	1009883a 	mov	r4,r2
    a2dc:	e0bff817 	ldw	r2,-32(fp)
    a2e0:	10800d43 	ldbu	r2,53(r2)
    a2e4:	0084303a 	nor	r2,zero,r2
    a2e8:	2084703a 	and	r2,r4,r2
    a2ec:	1009883a 	mov	r4,r2
    a2f0:	d0a7ff44 	addi	r2,gp,-24579
    a2f4:	1885883a 	add	r2,r3,r2
    a2f8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
    a2fc:	e0bff817 	ldw	r2,-32(fp)
    a300:	10800d03 	ldbu	r2,52(r2)
    a304:	10c03fcc 	andi	r3,r2,255
    a308:	d0a7ff44 	addi	r2,gp,-24579
    a30c:	1885883a 	add	r2,r3,r2
    a310:	10800003 	ldbu	r2,0(r2)
    a314:	10803fcc 	andi	r2,r2,255
    a318:	1000071e 	bne	r2,zero,a338 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
    a31c:	e0bff817 	ldw	r2,-32(fp)
    a320:	10800d83 	ldbu	r2,54(r2)
    a324:	0084303a 	nor	r2,zero,r2
    a328:	1007883a 	mov	r3,r2
    a32c:	d0a7ff03 	ldbu	r2,-24580(gp)
    a330:	1884703a 	and	r2,r3,r2
    a334:	d0a7ff05 	stb	r2,-24580(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
    a338:	e0bff817 	ldw	r2,-32(fp)
    a33c:	10800717 	ldw	r2,28(r2)
    a340:	10000526 	beq	r2,zero,a358 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
    a344:	e0bff817 	ldw	r2,-32(fp)
    a348:	10800717 	ldw	r2,28(r2)
    a34c:	100b883a 	mov	r5,r2
    a350:	e13ff817 	ldw	r4,-32(fp)
    a354:	00050a00 	call	50a0 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
    a358:	e0bff817 	ldw	r2,-32(fp)
    a35c:	10800817 	ldw	r2,32(r2)
    a360:	10000526 	beq	r2,zero,a378 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    a364:	e0bff817 	ldw	r2,-32(fp)
    a368:	10800817 	ldw	r2,32(r2)
    a36c:	100b883a 	mov	r5,r2
    a370:	e13ff817 	ldw	r4,-32(fp)
    a374:	00051580 	call	5158 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
    a378:	e0bff817 	ldw	r2,-32(fp)
    a37c:	10800a17 	ldw	r2,40(r2)
    a380:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
    a384:	e0bffb17 	ldw	r2,-20(fp)
    a388:	10000226 	beq	r2,zero,a394 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
    a38c:	e13ffb17 	ldw	r4,-20(fp)
    a390:	00075d80 	call	75d8 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
    a394:	e0bff817 	ldw	r2,-32(fp)
    a398:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
    a39c:	e0bff817 	ldw	r2,-32(fp)
    a3a0:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    a3a4:	e0bff817 	ldw	r2,-32(fp)
    a3a8:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
    a3ac:	d0a7f303 	ldbu	r2,-24628(gp)
    a3b0:	10803fcc 	andi	r2,r2,255
    a3b4:	10803fe0 	cmpeqi	r2,r2,255
    a3b8:	1000031e 	bne	r2,zero,a3c8 <OSTaskDel+0x214>
        OSLockNesting++;
    a3bc:	d0a7f303 	ldbu	r2,-24628(gp)
    a3c0:	10800044 	addi	r2,r2,1
    a3c4:	d0a7f305 	stb	r2,-24628(gp)
    a3c8:	e0bff617 	ldw	r2,-40(fp)
    a3cc:	e0bffd15 	stw	r2,-12(fp)
    a3d0:	e0bffd17 	ldw	r2,-12(fp)
    a3d4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
    a3d8:	0004c880 	call	4c88 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a3dc:	0005303a 	rdctl	r2,status
    a3e0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a3e4:	e0fffa17 	ldw	r3,-24(fp)
    a3e8:	00bfff84 	movi	r2,-2
    a3ec:	1884703a 	and	r2,r3,r2
    a3f0:	1001703a 	wrctl	status,r2
  
  return context;
    a3f4:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
    a3f8:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
    a3fc:	d0a7f303 	ldbu	r2,-24628(gp)
    a400:	10803fcc 	andi	r2,r2,255
    a404:	10000326 	beq	r2,zero,a414 <OSTaskDel+0x260>
        OSLockNesting--;
    a408:	d0a7f303 	ldbu	r2,-24628(gp)
    a40c:	10bfffc4 	addi	r2,r2,-1
    a410:	d0a7f305 	stb	r2,-24628(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
    a414:	e13ff817 	ldw	r4,-32(fp)
    a418:	000ebc40 	call	ebc4 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
    a41c:	d0a7fb43 	ldbu	r2,-24595(gp)
    a420:	10bfffc4 	addi	r2,r2,-1
    a424:	d0a7fb45 	stb	r2,-24595(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
    a428:	e0ffff03 	ldbu	r3,-4(fp)
    a42c:	008000b4 	movhi	r2,2
    a430:	10a9ba04 	addi	r2,r2,-22808
    a434:	18c7883a 	add	r3,r3,r3
    a438:	18c7883a 	add	r3,r3,r3
    a43c:	10c5883a 	add	r2,r2,r3
    a440:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
    a444:	e0bff817 	ldw	r2,-32(fp)
    a448:	10800617 	ldw	r2,24(r2)
    a44c:	1000071e 	bne	r2,zero,a46c <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
    a450:	e0bff817 	ldw	r2,-32(fp)
    a454:	10800517 	ldw	r2,20(r2)
    a458:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
    a45c:	e0bff817 	ldw	r2,-32(fp)
    a460:	10800517 	ldw	r2,20(r2)
    a464:	d0a7f615 	stw	r2,-24616(gp)
    a468:	00000a06 	br	a494 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
    a46c:	e0bff817 	ldw	r2,-32(fp)
    a470:	10800617 	ldw	r2,24(r2)
    a474:	e0fff817 	ldw	r3,-32(fp)
    a478:	18c00517 	ldw	r3,20(r3)
    a47c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
    a480:	e0bff817 	ldw	r2,-32(fp)
    a484:	10800517 	ldw	r2,20(r2)
    a488:	e0fff817 	ldw	r3,-32(fp)
    a48c:	18c00617 	ldw	r3,24(r3)
    a490:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
    a494:	d0e7fa17 	ldw	r3,-24600(gp)
    a498:	e0bff817 	ldw	r2,-32(fp)
    a49c:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
    a4a0:	e0bff817 	ldw	r2,-32(fp)
    a4a4:	d0a7fa15 	stw	r2,-24600(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
    a4a8:	e0bff817 	ldw	r2,-32(fp)
    a4ac:	00c00fc4 	movi	r3,63
    a4b0:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    a4b4:	e0bff817 	ldw	r2,-32(fp)
    a4b8:	10001345 	stb	zero,77(r2)
    a4bc:	e0bff617 	ldw	r2,-40(fp)
    a4c0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a4c4:	e0bffc17 	ldw	r2,-16(fp)
    a4c8:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    a4cc:	d0a7f343 	ldbu	r2,-24627(gp)
    a4d0:	10803fcc 	andi	r2,r2,255
    a4d4:	10800058 	cmpnei	r2,r2,1
    a4d8:	1000011e 	bne	r2,zero,a4e0 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
    a4dc:	00056f40 	call	56f4 <OS_Sched>
    }
    return (OS_ERR_NONE);
    a4e0:	0005883a 	mov	r2,zero
}
    a4e4:	e037883a 	mov	sp,fp
    a4e8:	dfc00117 	ldw	ra,4(sp)
    a4ec:	df000017 	ldw	fp,0(sp)
    a4f0:	dec00204 	addi	sp,sp,8
    a4f4:	f800283a 	ret

0000a4f8 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
    a4f8:	defff504 	addi	sp,sp,-44
    a4fc:	df000a15 	stw	fp,40(sp)
    a500:	df000a04 	addi	fp,sp,40
    a504:	2005883a 	mov	r2,r4
    a508:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    a50c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
    a510:	e0bfff03 	ldbu	r2,-4(fp)
    a514:	10800518 	cmpnei	r2,r2,20
    a518:	1000021e 	bne	r2,zero,a524 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
    a51c:	00800f84 	movi	r2,62
    a520:	00004506 	br	a638 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    a524:	e0bfff03 	ldbu	r2,-4(fp)
    a528:	10800530 	cmpltui	r2,r2,20
    a52c:	1000051e 	bne	r2,zero,a544 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
    a530:	e0bfff03 	ldbu	r2,-4(fp)
    a534:	10803fe0 	cmpeqi	r2,r2,255
    a538:	1000021e 	bne	r2,zero,a544 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
    a53c:	00800a84 	movi	r2,42
    a540:	00003d06 	br	a638 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
    a544:	e0bfff03 	ldbu	r2,-4(fp)
    a548:	10803fd8 	cmpnei	r2,r2,255
    a54c:	1000111e 	bne	r2,zero,a594 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a550:	0005303a 	rdctl	r2,status
    a554:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a558:	e0fff917 	ldw	r3,-28(fp)
    a55c:	00bfff84 	movi	r2,-2
    a560:	1884703a 	and	r2,r3,r2
    a564:	1001703a 	wrctl	status,r2
  
  return context;
    a568:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
    a56c:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
    a570:	d0a80217 	ldw	r2,-24568(gp)
    a574:	10800dc3 	ldbu	r2,55(r2)
    a578:	e0bff805 	stb	r2,-32(fp)
    a57c:	e0bff617 	ldw	r2,-40(fp)
    a580:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a584:	e0bffe17 	ldw	r2,-8(fp)
    a588:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
    a58c:	e0bff803 	ldbu	r2,-32(fp)
    a590:	00002906 	br	a638 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a594:	0005303a 	rdctl	r2,status
    a598:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a59c:	e0fff717 	ldw	r3,-36(fp)
    a5a0:	00bfff84 	movi	r2,-2
    a5a4:	1884703a 	and	r2,r3,r2
    a5a8:	1001703a 	wrctl	status,r2
  
  return context;
    a5ac:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
    a5b0:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    a5b4:	e0ffff03 	ldbu	r3,-4(fp)
    a5b8:	008000b4 	movhi	r2,2
    a5bc:	10a9ba04 	addi	r2,r2,-22808
    a5c0:	18c7883a 	add	r3,r3,r3
    a5c4:	18c7883a 	add	r3,r3,r3
    a5c8:	10c5883a 	add	r2,r2,r3
    a5cc:	10800017 	ldw	r2,0(r2)
    a5d0:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
    a5d4:	e0bffb17 	ldw	r2,-20(fp)
    a5d8:	1000061e 	bne	r2,zero,a5f4 <OSTaskDelReq+0xfc>
    a5dc:	e0bff617 	ldw	r2,-40(fp)
    a5e0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a5e4:	e0bffa17 	ldw	r2,-24(fp)
    a5e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
    a5ec:	008010c4 	movi	r2,67
    a5f0:	00001106 	br	a638 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
    a5f4:	e0bffb17 	ldw	r2,-20(fp)
    a5f8:	10800058 	cmpnei	r2,r2,1
    a5fc:	1000061e 	bne	r2,zero,a618 <OSTaskDelReq+0x120>
    a600:	e0bff617 	ldw	r2,-40(fp)
    a604:	e0bffc15 	stw	r2,-16(fp)
    a608:	e0bffc17 	ldw	r2,-16(fp)
    a60c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    a610:	00800f44 	movi	r2,61
    a614:	00000806 	br	a638 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
    a618:	e0bffb17 	ldw	r2,-20(fp)
    a61c:	00c00fc4 	movi	r3,63
    a620:	10c00dc5 	stb	r3,55(r2)
    a624:	e0bff617 	ldw	r2,-40(fp)
    a628:	e0bffd15 	stw	r2,-12(fp)
    a62c:	e0bffd17 	ldw	r2,-12(fp)
    a630:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    a634:	0005883a 	mov	r2,zero
}
    a638:	e037883a 	mov	sp,fp
    a63c:	df000017 	ldw	fp,0(sp)
    a640:	dec00104 	addi	sp,sp,4
    a644:	f800283a 	ret

0000a648 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
    a648:	defff404 	addi	sp,sp,-48
    a64c:	dfc00b15 	stw	ra,44(sp)
    a650:	df000a15 	stw	fp,40(sp)
    a654:	df000a04 	addi	fp,sp,40
    a658:	2005883a 	mov	r2,r4
    a65c:	e17ffe15 	stw	r5,-8(fp)
    a660:	e1bfff15 	stw	r6,-4(fp)
    a664:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
    a668:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
    a66c:	e0bfff17 	ldw	r2,-4(fp)
    a670:	1000021e 	bne	r2,zero,a67c <OSTaskNameGet+0x34>
        return (0);
    a674:	0005883a 	mov	r2,zero
    a678:	00005406 	br	a7cc <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
    a67c:	e0bffd03 	ldbu	r2,-12(fp)
    a680:	10800570 	cmpltui	r2,r2,21
    a684:	1000081e 	bne	r2,zero,a6a8 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
    a688:	e0bffd03 	ldbu	r2,-12(fp)
    a68c:	10803fe0 	cmpeqi	r2,r2,255
    a690:	1000051e 	bne	r2,zero,a6a8 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
    a694:	e0bfff17 	ldw	r2,-4(fp)
    a698:	00c00a84 	movi	r3,42
    a69c:	10c00005 	stb	r3,0(r2)
            return (0);
    a6a0:	0005883a 	mov	r2,zero
    a6a4:	00004906 	br	a7cc <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
    a6a8:	e0bffe17 	ldw	r2,-8(fp)
    a6ac:	1000051e 	bne	r2,zero,a6c4 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
    a6b0:	e0bfff17 	ldw	r2,-4(fp)
    a6b4:	00c00304 	movi	r3,12
    a6b8:	10c00005 	stb	r3,0(r2)
        return (0);
    a6bc:	0005883a 	mov	r2,zero
    a6c0:	00004206 	br	a7cc <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
    a6c4:	d0a80103 	ldbu	r2,-24572(gp)
    a6c8:	10803fcc 	andi	r2,r2,255
    a6cc:	10000526 	beq	r2,zero,a6e4 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
    a6d0:	e0bfff17 	ldw	r2,-4(fp)
    a6d4:	00c00444 	movi	r3,17
    a6d8:	10c00005 	stb	r3,0(r2)
        return (0);
    a6dc:	0005883a 	mov	r2,zero
    a6e0:	00003a06 	br	a7cc <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a6e4:	0005303a 	rdctl	r2,status
    a6e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a6ec:	e0fffc17 	ldw	r3,-16(fp)
    a6f0:	00bfff84 	movi	r2,-2
    a6f4:	1884703a 	and	r2,r3,r2
    a6f8:	1001703a 	wrctl	status,r2
  
  return context;
    a6fc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    a700:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
    a704:	e0bffd03 	ldbu	r2,-12(fp)
    a708:	10803fd8 	cmpnei	r2,r2,255
    a70c:	1000031e 	bne	r2,zero,a71c <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
    a710:	d0a80217 	ldw	r2,-24568(gp)
    a714:	10800c83 	ldbu	r2,50(r2)
    a718:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    a71c:	e0fffd03 	ldbu	r3,-12(fp)
    a720:	008000b4 	movhi	r2,2
    a724:	10a9ba04 	addi	r2,r2,-22808
    a728:	18c7883a 	add	r3,r3,r3
    a72c:	18c7883a 	add	r3,r3,r3
    a730:	10c5883a 	add	r2,r2,r3
    a734:	10800017 	ldw	r2,0(r2)
    a738:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
    a73c:	e0bff817 	ldw	r2,-32(fp)
    a740:	1000091e 	bne	r2,zero,a768 <OSTaskNameGet+0x120>
    a744:	e0bff617 	ldw	r2,-40(fp)
    a748:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a74c:	e0bff717 	ldw	r2,-36(fp)
    a750:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
    a754:	e0bfff17 	ldw	r2,-4(fp)
    a758:	00c010c4 	movi	r3,67
    a75c:	10c00005 	stb	r3,0(r2)
        return (0);
    a760:	0005883a 	mov	r2,zero
    a764:	00001906 	br	a7cc <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
    a768:	e0bff817 	ldw	r2,-32(fp)
    a76c:	10800058 	cmpnei	r2,r2,1
    a770:	1000091e 	bne	r2,zero,a798 <OSTaskNameGet+0x150>
    a774:	e0bff617 	ldw	r2,-40(fp)
    a778:	e0bff915 	stw	r2,-28(fp)
    a77c:	e0bff917 	ldw	r2,-28(fp)
    a780:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
    a784:	e0bfff17 	ldw	r2,-4(fp)
    a788:	00c010c4 	movi	r3,67
    a78c:	10c00005 	stb	r3,0(r2)
        return (0);
    a790:	0005883a 	mov	r2,zero
    a794:	00000d06 	br	a7cc <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    a798:	e0bff817 	ldw	r2,-32(fp)
    a79c:	10801304 	addi	r2,r2,76
    a7a0:	100b883a 	mov	r5,r2
    a7a4:	e13ffe17 	ldw	r4,-8(fp)
    a7a8:	00058380 	call	5838 <OS_StrCopy>
    a7ac:	e0bffb05 	stb	r2,-20(fp)
    a7b0:	e0bff617 	ldw	r2,-40(fp)
    a7b4:	e0bffa15 	stw	r2,-24(fp)
    a7b8:	e0bffa17 	ldw	r2,-24(fp)
    a7bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    a7c0:	e0bfff17 	ldw	r2,-4(fp)
    a7c4:	10000005 	stb	zero,0(r2)
    return (len);
    a7c8:	e0bffb03 	ldbu	r2,-20(fp)
}
    a7cc:	e037883a 	mov	sp,fp
    a7d0:	dfc00117 	ldw	ra,4(sp)
    a7d4:	df000017 	ldw	fp,0(sp)
    a7d8:	dec00204 	addi	sp,sp,8
    a7dc:	f800283a 	ret

0000a7e0 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
    a7e0:	defff304 	addi	sp,sp,-52
    a7e4:	dfc00c15 	stw	ra,48(sp)
    a7e8:	df000b15 	stw	fp,44(sp)
    a7ec:	df000b04 	addi	fp,sp,44
    a7f0:	2005883a 	mov	r2,r4
    a7f4:	e17ffe15 	stw	r5,-8(fp)
    a7f8:	e1bfff15 	stw	r6,-4(fp)
    a7fc:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    a800:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    a804:	e0bfff17 	ldw	r2,-4(fp)
    a808:	10005c26 	beq	r2,zero,a97c <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
    a80c:	e0bffd03 	ldbu	r2,-12(fp)
    a810:	10800570 	cmpltui	r2,r2,21
    a814:	1000071e 	bne	r2,zero,a834 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
    a818:	e0bffd03 	ldbu	r2,-12(fp)
    a81c:	10803fe0 	cmpeqi	r2,r2,255
    a820:	1000041e 	bne	r2,zero,a834 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
    a824:	e0bfff17 	ldw	r2,-4(fp)
    a828:	00c00a84 	movi	r3,42
    a82c:	10c00005 	stb	r3,0(r2)
            return;
    a830:	00005306 	br	a980 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
    a834:	e0bffe17 	ldw	r2,-8(fp)
    a838:	1000041e 	bne	r2,zero,a84c <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
    a83c:	e0bfff17 	ldw	r2,-4(fp)
    a840:	00c00304 	movi	r3,12
    a844:	10c00005 	stb	r3,0(r2)
        return;
    a848:	00004d06 	br	a980 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
    a84c:	d0a80103 	ldbu	r2,-24572(gp)
    a850:	10803fcc 	andi	r2,r2,255
    a854:	10000426 	beq	r2,zero,a868 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
    a858:	e0bfff17 	ldw	r2,-4(fp)
    a85c:	00c00484 	movi	r3,18
    a860:	10c00005 	stb	r3,0(r2)
        return;
    a864:	00004606 	br	a980 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a868:	0005303a 	rdctl	r2,status
    a86c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a870:	e0fffc17 	ldw	r3,-16(fp)
    a874:	00bfff84 	movi	r2,-2
    a878:	1884703a 	and	r2,r3,r2
    a87c:	1001703a 	wrctl	status,r2
  
  return context;
    a880:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    a884:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
    a888:	e0bffd03 	ldbu	r2,-12(fp)
    a88c:	10803fd8 	cmpnei	r2,r2,255
    a890:	1000031e 	bne	r2,zero,a8a0 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
    a894:	d0a80217 	ldw	r2,-24568(gp)
    a898:	10800c83 	ldbu	r2,50(r2)
    a89c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    a8a0:	e0fffd03 	ldbu	r3,-12(fp)
    a8a4:	008000b4 	movhi	r2,2
    a8a8:	10a9ba04 	addi	r2,r2,-22808
    a8ac:	18c7883a 	add	r3,r3,r3
    a8b0:	18c7883a 	add	r3,r3,r3
    a8b4:	10c5883a 	add	r2,r2,r3
    a8b8:	10800017 	ldw	r2,0(r2)
    a8bc:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
    a8c0:	e0bff717 	ldw	r2,-36(fp)
    a8c4:	1000081e 	bne	r2,zero,a8e8 <OSTaskNameSet+0x108>
    a8c8:	e0bff517 	ldw	r2,-44(fp)
    a8cc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a8d0:	e0bff617 	ldw	r2,-40(fp)
    a8d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
    a8d8:	e0bfff17 	ldw	r2,-4(fp)
    a8dc:	00c010c4 	movi	r3,67
    a8e0:	10c00005 	stb	r3,0(r2)
        return;
    a8e4:	00002606 	br	a980 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
    a8e8:	e0bff717 	ldw	r2,-36(fp)
    a8ec:	10800058 	cmpnei	r2,r2,1
    a8f0:	1000081e 	bne	r2,zero,a914 <OSTaskNameSet+0x134>
    a8f4:	e0bff517 	ldw	r2,-44(fp)
    a8f8:	e0bff815 	stw	r2,-32(fp)
    a8fc:	e0bff817 	ldw	r2,-32(fp)
    a900:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
    a904:	e0bfff17 	ldw	r2,-4(fp)
    a908:	00c010c4 	movi	r3,67
    a90c:	10c00005 	stb	r3,0(r2)
        return;
    a910:	00001b06 	br	a980 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
    a914:	e13ffe17 	ldw	r4,-8(fp)
    a918:	00058ac0 	call	58ac <OS_StrLen>
    a91c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
    a920:	e0bffa03 	ldbu	r2,-24(fp)
    a924:	10800830 	cmpltui	r2,r2,32
    a928:	1000081e 	bne	r2,zero,a94c <OSTaskNameSet+0x16c>
    a92c:	e0bff517 	ldw	r2,-44(fp)
    a930:	e0bff915 	stw	r2,-28(fp)
    a934:	e0bff917 	ldw	r2,-28(fp)
    a938:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
    a93c:	e0bfff17 	ldw	r2,-4(fp)
    a940:	00c01044 	movi	r3,65
    a944:	10c00005 	stb	r3,0(r2)
        return;
    a948:	00000d06 	br	a980 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    a94c:	e0bff717 	ldw	r2,-36(fp)
    a950:	10801304 	addi	r2,r2,76
    a954:	e17ffe17 	ldw	r5,-8(fp)
    a958:	1009883a 	mov	r4,r2
    a95c:	00058380 	call	5838 <OS_StrCopy>
    a960:	e0bff517 	ldw	r2,-44(fp)
    a964:	e0bffb15 	stw	r2,-20(fp)
    a968:	e0bffb17 	ldw	r2,-20(fp)
    a96c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    a970:	e0bfff17 	ldw	r2,-4(fp)
    a974:	10000005 	stb	zero,0(r2)
    a978:	00000106 	br	a980 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
    a97c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    a980:	e037883a 	mov	sp,fp
    a984:	dfc00117 	ldw	ra,4(sp)
    a988:	df000017 	ldw	fp,0(sp)
    a98c:	dec00204 	addi	sp,sp,8
    a990:	f800283a 	ret

0000a994 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
    a994:	defff404 	addi	sp,sp,-48
    a998:	dfc00b15 	stw	ra,44(sp)
    a99c:	df000a15 	stw	fp,40(sp)
    a9a0:	df000a04 	addi	fp,sp,40
    a9a4:	2005883a 	mov	r2,r4
    a9a8:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    a9ac:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
    a9b0:	e0bfff03 	ldbu	r2,-4(fp)
    a9b4:	10800530 	cmpltui	r2,r2,20
    a9b8:	1000021e 	bne	r2,zero,a9c4 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    a9bc:	00800a84 	movi	r2,42
    a9c0:	00006406 	br	ab54 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a9c4:	0005303a 	rdctl	r2,status
    a9c8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a9cc:	e0fffe17 	ldw	r3,-8(fp)
    a9d0:	00bfff84 	movi	r2,-2
    a9d4:	1884703a 	and	r2,r3,r2
    a9d8:	1001703a 	wrctl	status,r2
  
  return context;
    a9dc:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    a9e0:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    a9e4:	e0ffff03 	ldbu	r3,-4(fp)
    a9e8:	008000b4 	movhi	r2,2
    a9ec:	10a9ba04 	addi	r2,r2,-22808
    a9f0:	18c7883a 	add	r3,r3,r3
    a9f4:	18c7883a 	add	r3,r3,r3
    a9f8:	10c5883a 	add	r2,r2,r3
    a9fc:	10800017 	ldw	r2,0(r2)
    aa00:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
    aa04:	e0bff817 	ldw	r2,-32(fp)
    aa08:	1000061e 	bne	r2,zero,aa24 <OSTaskResume+0x90>
    aa0c:	e0bff617 	ldw	r2,-40(fp)
    aa10:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    aa14:	e0bff717 	ldw	r2,-36(fp)
    aa18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
    aa1c:	00801184 	movi	r2,70
    aa20:	00004c06 	br	ab54 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
    aa24:	e0bff817 	ldw	r2,-32(fp)
    aa28:	10800058 	cmpnei	r2,r2,1
    aa2c:	1000061e 	bne	r2,zero,aa48 <OSTaskResume+0xb4>
    aa30:	e0bff617 	ldw	r2,-40(fp)
    aa34:	e0bff915 	stw	r2,-28(fp)
    aa38:	e0bff917 	ldw	r2,-28(fp)
    aa3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    aa40:	008010c4 	movi	r2,67
    aa44:	00004306 	br	ab54 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
    aa48:	e0bff817 	ldw	r2,-32(fp)
    aa4c:	10800c03 	ldbu	r2,48(r2)
    aa50:	10803fcc 	andi	r2,r2,255
    aa54:	1080020c 	andi	r2,r2,8
    aa58:	10003926 	beq	r2,zero,ab40 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
    aa5c:	e0bff817 	ldw	r2,-32(fp)
    aa60:	10c00c03 	ldbu	r3,48(r2)
    aa64:	00bffdc4 	movi	r2,-9
    aa68:	1884703a 	and	r2,r3,r2
    aa6c:	1007883a 	mov	r3,r2
    aa70:	e0bff817 	ldw	r2,-32(fp)
    aa74:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
    aa78:	e0bff817 	ldw	r2,-32(fp)
    aa7c:	10800c03 	ldbu	r2,48(r2)
    aa80:	10803fcc 	andi	r2,r2,255
    aa84:	1000281e 	bne	r2,zero,ab28 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
    aa88:	e0bff817 	ldw	r2,-32(fp)
    aa8c:	10800b8b 	ldhu	r2,46(r2)
    aa90:	10bfffcc 	andi	r2,r2,65535
    aa94:	10001f1e 	bne	r2,zero,ab14 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
    aa98:	e0bff817 	ldw	r2,-32(fp)
    aa9c:	10c00d83 	ldbu	r3,54(r2)
    aaa0:	d0a7ff03 	ldbu	r2,-24580(gp)
    aaa4:	1884b03a 	or	r2,r3,r2
    aaa8:	d0a7ff05 	stb	r2,-24580(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    aaac:	e0bff817 	ldw	r2,-32(fp)
    aab0:	10800d03 	ldbu	r2,52(r2)
    aab4:	10c03fcc 	andi	r3,r2,255
    aab8:	e0bff817 	ldw	r2,-32(fp)
    aabc:	10800d03 	ldbu	r2,52(r2)
    aac0:	11003fcc 	andi	r4,r2,255
    aac4:	d0a7ff44 	addi	r2,gp,-24579
    aac8:	2085883a 	add	r2,r4,r2
    aacc:	11000003 	ldbu	r4,0(r2)
    aad0:	e0bff817 	ldw	r2,-32(fp)
    aad4:	10800d43 	ldbu	r2,53(r2)
    aad8:	2084b03a 	or	r2,r4,r2
    aadc:	1009883a 	mov	r4,r2
    aae0:	d0a7ff44 	addi	r2,gp,-24579
    aae4:	1885883a 	add	r2,r3,r2
    aae8:	11000005 	stb	r4,0(r2)
    aaec:	e0bff617 	ldw	r2,-40(fp)
    aaf0:	e0bffa15 	stw	r2,-24(fp)
    aaf4:	e0bffa17 	ldw	r2,-24(fp)
    aaf8:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
    aafc:	d0a7f343 	ldbu	r2,-24627(gp)
    ab00:	10803fcc 	andi	r2,r2,255
    ab04:	10800058 	cmpnei	r2,r2,1
    ab08:	10000b1e 	bne	r2,zero,ab38 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
    ab0c:	00056f40 	call	56f4 <OS_Sched>
    ab10:	00000906 	br	ab38 <OSTaskResume+0x1a4>
    ab14:	e0bff617 	ldw	r2,-40(fp)
    ab18:	e0bffb15 	stw	r2,-20(fp)
    ab1c:	e0bffb17 	ldw	r2,-20(fp)
    ab20:	1001703a 	wrctl	status,r2
    ab24:	00000406 	br	ab38 <OSTaskResume+0x1a4>
    ab28:	e0bff617 	ldw	r2,-40(fp)
    ab2c:	e0bffc15 	stw	r2,-16(fp)
    ab30:	e0bffc17 	ldw	r2,-16(fp)
    ab34:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
    ab38:	0005883a 	mov	r2,zero
    ab3c:	00000506 	br	ab54 <OSTaskResume+0x1c0>
    ab40:	e0bff617 	ldw	r2,-40(fp)
    ab44:	e0bffd15 	stw	r2,-12(fp)
    ab48:	e0bffd17 	ldw	r2,-12(fp)
    ab4c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
    ab50:	00801104 	movi	r2,68
}
    ab54:	e037883a 	mov	sp,fp
    ab58:	dfc00117 	ldw	ra,4(sp)
    ab5c:	df000017 	ldw	fp,0(sp)
    ab60:	dec00204 	addi	sp,sp,8
    ab64:	f800283a 	ret

0000ab68 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
    ab68:	defff304 	addi	sp,sp,-52
    ab6c:	df000c15 	stw	fp,48(sp)
    ab70:	df000c04 	addi	fp,sp,48
    ab74:	2005883a 	mov	r2,r4
    ab78:	e17fff15 	stw	r5,-4(fp)
    ab7c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    ab80:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
    ab84:	e0bffe03 	ldbu	r2,-8(fp)
    ab88:	10800570 	cmpltui	r2,r2,21
    ab8c:	1000051e 	bne	r2,zero,aba4 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
    ab90:	e0bffe03 	ldbu	r2,-8(fp)
    ab94:	10803fe0 	cmpeqi	r2,r2,255
    ab98:	1000021e 	bne	r2,zero,aba4 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
    ab9c:	00800a84 	movi	r2,42
    aba0:	00005d06 	br	ad18 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
    aba4:	e0bfff17 	ldw	r2,-4(fp)
    aba8:	1000021e 	bne	r2,zero,abb4 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
    abac:	00800244 	movi	r2,9
    abb0:	00005906 	br	ad18 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
    abb4:	e0bfff17 	ldw	r2,-4(fp)
    abb8:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
    abbc:	e0bfff17 	ldw	r2,-4(fp)
    abc0:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    abc4:	0005303a 	rdctl	r2,status
    abc8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    abcc:	e0fffd17 	ldw	r3,-12(fp)
    abd0:	00bfff84 	movi	r2,-2
    abd4:	1884703a 	and	r2,r3,r2
    abd8:	1001703a 	wrctl	status,r2
  
  return context;
    abdc:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
    abe0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
    abe4:	e0bffe03 	ldbu	r2,-8(fp)
    abe8:	10803fd8 	cmpnei	r2,r2,255
    abec:	1000031e 	bne	r2,zero,abfc <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
    abf0:	d0a80217 	ldw	r2,-24568(gp)
    abf4:	10800c83 	ldbu	r2,50(r2)
    abf8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    abfc:	e0fffe03 	ldbu	r3,-8(fp)
    ac00:	008000b4 	movhi	r2,2
    ac04:	10a9ba04 	addi	r2,r2,-22808
    ac08:	18c7883a 	add	r3,r3,r3
    ac0c:	18c7883a 	add	r3,r3,r3
    ac10:	10c5883a 	add	r2,r2,r3
    ac14:	10800017 	ldw	r2,0(r2)
    ac18:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
    ac1c:	e0bff817 	ldw	r2,-32(fp)
    ac20:	1000061e 	bne	r2,zero,ac3c <OSTaskStkChk+0xd4>
    ac24:	e0bff617 	ldw	r2,-40(fp)
    ac28:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ac2c:	e0bff717 	ldw	r2,-36(fp)
    ac30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    ac34:	008010c4 	movi	r2,67
    ac38:	00003706 	br	ad18 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
    ac3c:	e0bff817 	ldw	r2,-32(fp)
    ac40:	10800058 	cmpnei	r2,r2,1
    ac44:	1000061e 	bne	r2,zero,ac60 <OSTaskStkChk+0xf8>
    ac48:	e0bff617 	ldw	r2,-40(fp)
    ac4c:	e0bff915 	stw	r2,-28(fp)
    ac50:	e0bff917 	ldw	r2,-28(fp)
    ac54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    ac58:	008010c4 	movi	r2,67
    ac5c:	00002e06 	br	ad18 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
    ac60:	e0bff817 	ldw	r2,-32(fp)
    ac64:	1080040b 	ldhu	r2,16(r2)
    ac68:	10bfffcc 	andi	r2,r2,65535
    ac6c:	1080004c 	andi	r2,r2,1
    ac70:	1000061e 	bne	r2,zero,ac8c <OSTaskStkChk+0x124>
    ac74:	e0bff617 	ldw	r2,-40(fp)
    ac78:	e0bffa15 	stw	r2,-24(fp)
    ac7c:	e0bffa17 	ldw	r2,-24(fp)
    ac80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
    ac84:	00801144 	movi	r2,69
    ac88:	00002306 	br	ad18 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
    ac8c:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
    ac90:	e0bff817 	ldw	r2,-32(fp)
    ac94:	10800317 	ldw	r2,12(r2)
    ac98:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
    ac9c:	e0bff817 	ldw	r2,-32(fp)
    aca0:	10800217 	ldw	r2,8(r2)
    aca4:	e0bff415 	stw	r2,-48(fp)
    aca8:	e0bff617 	ldw	r2,-40(fp)
    acac:	e0bffb15 	stw	r2,-20(fp)
    acb0:	e0bffb17 	ldw	r2,-20(fp)
    acb4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    acb8:	00000306 	br	acc8 <OSTaskStkChk+0x160>
        nfree++;
    acbc:	e0bff517 	ldw	r2,-44(fp)
    acc0:	10800044 	addi	r2,r2,1
    acc4:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    acc8:	e0bff417 	ldw	r2,-48(fp)
    accc:	10c00104 	addi	r3,r2,4
    acd0:	e0fff415 	stw	r3,-48(fp)
    acd4:	10800017 	ldw	r2,0(r2)
    acd8:	103ff826 	beq	r2,zero,acbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700acbc>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
    acdc:	e0bff517 	ldw	r2,-44(fp)
    ace0:	1085883a 	add	r2,r2,r2
    ace4:	1085883a 	add	r2,r2,r2
    ace8:	1007883a 	mov	r3,r2
    acec:	e0bfff17 	ldw	r2,-4(fp)
    acf0:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
    acf4:	e0fffc17 	ldw	r3,-16(fp)
    acf8:	e0bff517 	ldw	r2,-44(fp)
    acfc:	1885c83a 	sub	r2,r3,r2
    ad00:	1085883a 	add	r2,r2,r2
    ad04:	1085883a 	add	r2,r2,r2
    ad08:	1007883a 	mov	r3,r2
    ad0c:	e0bfff17 	ldw	r2,-4(fp)
    ad10:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
    ad14:	0005883a 	mov	r2,zero
}
    ad18:	e037883a 	mov	sp,fp
    ad1c:	df000017 	ldw	fp,0(sp)
    ad20:	dec00104 	addi	sp,sp,4
    ad24:	f800283a 	ret

0000ad28 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
    ad28:	defff504 	addi	sp,sp,-44
    ad2c:	dfc00a15 	stw	ra,40(sp)
    ad30:	df000915 	stw	fp,36(sp)
    ad34:	df000904 	addi	fp,sp,36
    ad38:	2005883a 	mov	r2,r4
    ad3c:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    ad40:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
    ad44:	e0bfff03 	ldbu	r2,-4(fp)
    ad48:	10800518 	cmpnei	r2,r2,20
    ad4c:	1000021e 	bne	r2,zero,ad58 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
    ad50:	008011c4 	movi	r2,71
    ad54:	00006806 	br	aef8 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    ad58:	e0bfff03 	ldbu	r2,-4(fp)
    ad5c:	10800530 	cmpltui	r2,r2,20
    ad60:	1000051e 	bne	r2,zero,ad78 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
    ad64:	e0bfff03 	ldbu	r2,-4(fp)
    ad68:	10803fe0 	cmpeqi	r2,r2,255
    ad6c:	1000021e 	bne	r2,zero,ad78 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
    ad70:	00800a84 	movi	r2,42
    ad74:	00006006 	br	aef8 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ad78:	0005303a 	rdctl	r2,status
    ad7c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ad80:	e0fffe17 	ldw	r3,-8(fp)
    ad84:	00bfff84 	movi	r2,-2
    ad88:	1884703a 	and	r2,r3,r2
    ad8c:	1001703a 	wrctl	status,r2
  
  return context;
    ad90:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
    ad94:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
    ad98:	e0bfff03 	ldbu	r2,-4(fp)
    ad9c:	10803fd8 	cmpnei	r2,r2,255
    ada0:	1000061e 	bne	r2,zero,adbc <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
    ada4:	d0a80217 	ldw	r2,-24568(gp)
    ada8:	10800c83 	ldbu	r2,50(r2)
    adac:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
    adb0:	00800044 	movi	r2,1
    adb4:	e0bff705 	stb	r2,-36(fp)
    adb8:	00000906 	br	ade0 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
    adbc:	d0a80217 	ldw	r2,-24568(gp)
    adc0:	10800c83 	ldbu	r2,50(r2)
    adc4:	10c03fcc 	andi	r3,r2,255
    adc8:	e0bfff03 	ldbu	r2,-4(fp)
    adcc:	1880031e 	bne	r3,r2,addc <OSTaskSuspend+0xb4>
        self = OS_TRUE;
    add0:	00800044 	movi	r2,1
    add4:	e0bff705 	stb	r2,-36(fp)
    add8:	00000106 	br	ade0 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    addc:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    ade0:	e0ffff03 	ldbu	r3,-4(fp)
    ade4:	008000b4 	movhi	r2,2
    ade8:	10a9ba04 	addi	r2,r2,-22808
    adec:	18c7883a 	add	r3,r3,r3
    adf0:	18c7883a 	add	r3,r3,r3
    adf4:	10c5883a 	add	r2,r2,r3
    adf8:	10800017 	ldw	r2,0(r2)
    adfc:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
    ae00:	e0bffa17 	ldw	r2,-24(fp)
    ae04:	1000061e 	bne	r2,zero,ae20 <OSTaskSuspend+0xf8>
    ae08:	e0bff817 	ldw	r2,-32(fp)
    ae0c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ae10:	e0bff917 	ldw	r2,-28(fp)
    ae14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
    ae18:	00801204 	movi	r2,72
    ae1c:	00003606 	br	aef8 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
    ae20:	e0bffa17 	ldw	r2,-24(fp)
    ae24:	10800058 	cmpnei	r2,r2,1
    ae28:	1000061e 	bne	r2,zero,ae44 <OSTaskSuspend+0x11c>
    ae2c:	e0bff817 	ldw	r2,-32(fp)
    ae30:	e0bffb15 	stw	r2,-20(fp)
    ae34:	e0bffb17 	ldw	r2,-20(fp)
    ae38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    ae3c:	008010c4 	movi	r2,67
    ae40:	00002d06 	br	aef8 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
    ae44:	e0bffa17 	ldw	r2,-24(fp)
    ae48:	10800d03 	ldbu	r2,52(r2)
    ae4c:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
    ae50:	e0fffd03 	ldbu	r3,-12(fp)
    ae54:	e13ffd03 	ldbu	r4,-12(fp)
    ae58:	d0a7ff44 	addi	r2,gp,-24579
    ae5c:	2085883a 	add	r2,r4,r2
    ae60:	10800003 	ldbu	r2,0(r2)
    ae64:	1009883a 	mov	r4,r2
    ae68:	e0bffa17 	ldw	r2,-24(fp)
    ae6c:	10800d43 	ldbu	r2,53(r2)
    ae70:	0084303a 	nor	r2,zero,r2
    ae74:	2084703a 	and	r2,r4,r2
    ae78:	1009883a 	mov	r4,r2
    ae7c:	d0a7ff44 	addi	r2,gp,-24579
    ae80:	1885883a 	add	r2,r3,r2
    ae84:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    ae88:	e0fffd03 	ldbu	r3,-12(fp)
    ae8c:	d0a7ff44 	addi	r2,gp,-24579
    ae90:	1885883a 	add	r2,r3,r2
    ae94:	10800003 	ldbu	r2,0(r2)
    ae98:	10803fcc 	andi	r2,r2,255
    ae9c:	1000071e 	bne	r2,zero,aebc <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
    aea0:	e0bffa17 	ldw	r2,-24(fp)
    aea4:	10800d83 	ldbu	r2,54(r2)
    aea8:	0084303a 	nor	r2,zero,r2
    aeac:	1007883a 	mov	r3,r2
    aeb0:	d0a7ff03 	ldbu	r2,-24580(gp)
    aeb4:	1884703a 	and	r2,r3,r2
    aeb8:	d0a7ff05 	stb	r2,-24580(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
    aebc:	e0bffa17 	ldw	r2,-24(fp)
    aec0:	10800c03 	ldbu	r2,48(r2)
    aec4:	10800214 	ori	r2,r2,8
    aec8:	1007883a 	mov	r3,r2
    aecc:	e0bffa17 	ldw	r2,-24(fp)
    aed0:	10c00c05 	stb	r3,48(r2)
    aed4:	e0bff817 	ldw	r2,-32(fp)
    aed8:	e0bffc15 	stw	r2,-16(fp)
    aedc:	e0bffc17 	ldw	r2,-16(fp)
    aee0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
    aee4:	e0bff703 	ldbu	r2,-36(fp)
    aee8:	10800058 	cmpnei	r2,r2,1
    aeec:	1000011e 	bne	r2,zero,aef4 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
    aef0:	00056f40 	call	56f4 <OS_Sched>
    }
    return (OS_ERR_NONE);
    aef4:	0005883a 	mov	r2,zero
}
    aef8:	e037883a 	mov	sp,fp
    aefc:	dfc00117 	ldw	ra,4(sp)
    af00:	df000017 	ldw	fp,0(sp)
    af04:	dec00204 	addi	sp,sp,8
    af08:	f800283a 	ret

0000af0c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
    af0c:	defff604 	addi	sp,sp,-40
    af10:	dfc00915 	stw	ra,36(sp)
    af14:	df000815 	stw	fp,32(sp)
    af18:	df000804 	addi	fp,sp,32
    af1c:	2005883a 	mov	r2,r4
    af20:	e17fff15 	stw	r5,-4(fp)
    af24:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    af28:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
    af2c:	e0bffe03 	ldbu	r2,-8(fp)
    af30:	10800570 	cmpltui	r2,r2,21
    af34:	1000051e 	bne	r2,zero,af4c <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
    af38:	e0bffe03 	ldbu	r2,-8(fp)
    af3c:	10803fe0 	cmpeqi	r2,r2,255
    af40:	1000021e 	bne	r2,zero,af4c <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
    af44:	00800a84 	movi	r2,42
    af48:	00003406 	br	b01c <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
    af4c:	e0bfff17 	ldw	r2,-4(fp)
    af50:	1000021e 	bne	r2,zero,af5c <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
    af54:	00800244 	movi	r2,9
    af58:	00003006 	br	b01c <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    af5c:	0005303a 	rdctl	r2,status
    af60:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    af64:	e0fffd17 	ldw	r3,-12(fp)
    af68:	00bfff84 	movi	r2,-2
    af6c:	1884703a 	and	r2,r3,r2
    af70:	1001703a 	wrctl	status,r2
  
  return context;
    af74:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    af78:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
    af7c:	e0bffe03 	ldbu	r2,-8(fp)
    af80:	10803fd8 	cmpnei	r2,r2,255
    af84:	1000031e 	bne	r2,zero,af94 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
    af88:	d0a80217 	ldw	r2,-24568(gp)
    af8c:	10800c83 	ldbu	r2,50(r2)
    af90:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    af94:	e0fffe03 	ldbu	r3,-8(fp)
    af98:	008000b4 	movhi	r2,2
    af9c:	10a9ba04 	addi	r2,r2,-22808
    afa0:	18c7883a 	add	r3,r3,r3
    afa4:	18c7883a 	add	r3,r3,r3
    afa8:	10c5883a 	add	r2,r2,r3
    afac:	10800017 	ldw	r2,0(r2)
    afb0:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
    afb4:	e0bffa17 	ldw	r2,-24(fp)
    afb8:	1000061e 	bne	r2,zero,afd4 <OSTaskQuery+0xc8>
    afbc:	e0bff817 	ldw	r2,-32(fp)
    afc0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    afc4:	e0bff917 	ldw	r2,-28(fp)
    afc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
    afcc:	00800a44 	movi	r2,41
    afd0:	00001206 	br	b01c <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
    afd4:	e0bffa17 	ldw	r2,-24(fp)
    afd8:	10800058 	cmpnei	r2,r2,1
    afdc:	1000061e 	bne	r2,zero,aff8 <OSTaskQuery+0xec>
    afe0:	e0bff817 	ldw	r2,-32(fp)
    afe4:	e0bffb15 	stw	r2,-20(fp)
    afe8:	e0bffb17 	ldw	r2,-20(fp)
    afec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    aff0:	008010c4 	movi	r2,67
    aff4:	00000906 	br	b01c <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    aff8:	01801b04 	movi	r6,108
    affc:	e17ffa17 	ldw	r5,-24(fp)
    b000:	e13fff17 	ldw	r4,-4(fp)
    b004:	000568c0 	call	568c <OS_MemCopy>
    b008:	e0bff817 	ldw	r2,-32(fp)
    b00c:	e0bffc15 	stw	r2,-16(fp)
    b010:	e0bffc17 	ldw	r2,-16(fp)
    b014:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    b018:	0005883a 	mov	r2,zero
}
    b01c:	e037883a 	mov	sp,fp
    b020:	dfc00117 	ldw	ra,4(sp)
    b024:	df000017 	ldw	fp,0(sp)
    b028:	dec00204 	addi	sp,sp,8
    b02c:	f800283a 	ret

0000b030 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    b030:	defffc04 	addi	sp,sp,-16
    b034:	df000315 	stw	fp,12(sp)
    b038:	df000304 	addi	fp,sp,12
    b03c:	e13ffd15 	stw	r4,-12(fp)
    b040:	e17ffe15 	stw	r5,-8(fp)
    b044:	3005883a 	mov	r2,r6
    b048:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
    b04c:	e0bfff0b 	ldhu	r2,-4(fp)
    b050:	1080004c 	andi	r2,r2,1
    b054:	10000d26 	beq	r2,zero,b08c <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
    b058:	e0bfff0b 	ldhu	r2,-4(fp)
    b05c:	1080008c 	andi	r2,r2,2
    b060:	10000a26 	beq	r2,zero,b08c <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    b064:	00000706 	br	b084 <OS_TaskStkClr+0x54>
                size--;
    b068:	e0bffe17 	ldw	r2,-8(fp)
    b06c:	10bfffc4 	addi	r2,r2,-1
    b070:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
    b074:	e0bffd17 	ldw	r2,-12(fp)
    b078:	10c00104 	addi	r3,r2,4
    b07c:	e0fffd15 	stw	r3,-12(fp)
    b080:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    b084:	e0bffe17 	ldw	r2,-8(fp)
    b088:	103ff71e 	bne	r2,zero,b068 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b068>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
    b08c:	0001883a 	nop
    b090:	e037883a 	mov	sp,fp
    b094:	df000017 	ldw	fp,0(sp)
    b098:	dec00104 	addi	sp,sp,4
    b09c:	f800283a 	ret

0000b0a0 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
    b0a0:	defff904 	addi	sp,sp,-28
    b0a4:	dfc00615 	stw	ra,24(sp)
    b0a8:	df000515 	stw	fp,20(sp)
    b0ac:	df000504 	addi	fp,sp,20
    b0b0:	2005883a 	mov	r2,r4
    b0b4:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b0b8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    b0bc:	d0a80103 	ldbu	r2,-24572(gp)
    b0c0:	10803fcc 	andi	r2,r2,255
    b0c4:	1000311e 	bne	r2,zero,b18c <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
    b0c8:	e0bfff0b 	ldhu	r2,-4(fp)
    b0cc:	10003026 	beq	r2,zero,b190 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b0d0:	0005303a 	rdctl	r2,status
    b0d4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b0d8:	e0fffe17 	ldw	r3,-8(fp)
    b0dc:	00bfff84 	movi	r2,-2
    b0e0:	1884703a 	and	r2,r3,r2
    b0e4:	1001703a 	wrctl	status,r2
  
  return context;
    b0e8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    b0ec:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    b0f0:	d0a80217 	ldw	r2,-24568(gp)
    b0f4:	10800d03 	ldbu	r2,52(r2)
    b0f8:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    b0fc:	e0fffd03 	ldbu	r3,-12(fp)
    b100:	e13ffd03 	ldbu	r4,-12(fp)
    b104:	d0a7ff44 	addi	r2,gp,-24579
    b108:	2085883a 	add	r2,r4,r2
    b10c:	10800003 	ldbu	r2,0(r2)
    b110:	1009883a 	mov	r4,r2
    b114:	d0a80217 	ldw	r2,-24568(gp)
    b118:	10800d43 	ldbu	r2,53(r2)
    b11c:	0084303a 	nor	r2,zero,r2
    b120:	2084703a 	and	r2,r4,r2
    b124:	1009883a 	mov	r4,r2
    b128:	d0a7ff44 	addi	r2,gp,-24579
    b12c:	1885883a 	add	r2,r3,r2
    b130:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
    b134:	e0fffd03 	ldbu	r3,-12(fp)
    b138:	d0a7ff44 	addi	r2,gp,-24579
    b13c:	1885883a 	add	r2,r3,r2
    b140:	10800003 	ldbu	r2,0(r2)
    b144:	10803fcc 	andi	r2,r2,255
    b148:	1000071e 	bne	r2,zero,b168 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    b14c:	d0a80217 	ldw	r2,-24568(gp)
    b150:	10800d83 	ldbu	r2,54(r2)
    b154:	0084303a 	nor	r2,zero,r2
    b158:	1007883a 	mov	r3,r2
    b15c:	d0a7ff03 	ldbu	r2,-24580(gp)
    b160:	1884703a 	and	r2,r3,r2
    b164:	d0a7ff05 	stb	r2,-24580(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    b168:	d0a80217 	ldw	r2,-24568(gp)
    b16c:	e0ffff0b 	ldhu	r3,-4(fp)
    b170:	10c00b8d 	sth	r3,46(r2)
    b174:	e0bffb17 	ldw	r2,-20(fp)
    b178:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b17c:	e0bffc17 	ldw	r2,-16(fp)
    b180:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    b184:	00056f40 	call	56f4 <OS_Sched>
    b188:	00000106 	br	b190 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
    b18c:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
    b190:	e037883a 	mov	sp,fp
    b194:	dfc00117 	ldw	ra,4(sp)
    b198:	df000017 	ldw	fp,0(sp)
    b19c:	dec00204 	addi	sp,sp,8
    b1a0:	f800283a 	ret

0000b1a4 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
    b1a4:	defff804 	addi	sp,sp,-32
    b1a8:	dfc00715 	stw	ra,28(sp)
    b1ac:	df000615 	stw	fp,24(sp)
    b1b0:	df000604 	addi	fp,sp,24
    b1b4:	2015883a 	mov	r10,r4
    b1b8:	2809883a 	mov	r4,r5
    b1bc:	3007883a 	mov	r3,r6
    b1c0:	3805883a 	mov	r2,r7
    b1c4:	e2bffc05 	stb	r10,-16(fp)
    b1c8:	e13ffd05 	stb	r4,-12(fp)
    b1cc:	e0fffe05 	stb	r3,-8(fp)
    b1d0:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    b1d4:	d0a80103 	ldbu	r2,-24572(gp)
    b1d8:	10803fcc 	andi	r2,r2,255
    b1dc:	10000226 	beq	r2,zero,b1e8 <OSTimeDlyHMSM+0x44>
        return (OS_ERR_TIME_DLY_ISR);
    b1e0:	00801544 	movi	r2,85
    b1e4:	00004206 	br	b2f0 <OSTimeDlyHMSM+0x14c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
    b1e8:	e0bffc03 	ldbu	r2,-16(fp)
    b1ec:	1000081e 	bne	r2,zero,b210 <OSTimeDlyHMSM+0x6c>
        if (minutes == 0) {
    b1f0:	e0bffd03 	ldbu	r2,-12(fp)
    b1f4:	1000061e 	bne	r2,zero,b210 <OSTimeDlyHMSM+0x6c>
            if (seconds == 0) {
    b1f8:	e0bffe03 	ldbu	r2,-8(fp)
    b1fc:	1000041e 	bne	r2,zero,b210 <OSTimeDlyHMSM+0x6c>
                if (ms == 0) {
    b200:	e0bfff0b 	ldhu	r2,-4(fp)
    b204:	1000021e 	bne	r2,zero,b210 <OSTimeDlyHMSM+0x6c>
                    return (OS_ERR_TIME_ZERO_DLY);
    b208:	00801504 	movi	r2,84
    b20c:	00003806 	br	b2f0 <OSTimeDlyHMSM+0x14c>
                }
            }
        }
    }
    if (minutes > 59) {
    b210:	e0bffd03 	ldbu	r2,-12(fp)
    b214:	10800f30 	cmpltui	r2,r2,60
    b218:	1000021e 	bne	r2,zero,b224 <OSTimeDlyHMSM+0x80>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
    b21c:	00801444 	movi	r2,81
    b220:	00003306 	br	b2f0 <OSTimeDlyHMSM+0x14c>
    }
    if (seconds > 59) {
    b224:	e0bffe03 	ldbu	r2,-8(fp)
    b228:	10800f30 	cmpltui	r2,r2,60
    b22c:	1000021e 	bne	r2,zero,b238 <OSTimeDlyHMSM+0x94>
        return (OS_ERR_TIME_INVALID_SECONDS);
    b230:	00801484 	movi	r2,82
    b234:	00002e06 	br	b2f0 <OSTimeDlyHMSM+0x14c>
    }
    if (ms > 999) {
    b238:	e0bfff0b 	ldhu	r2,-4(fp)
    b23c:	1080fa30 	cmpltui	r2,r2,1000
    b240:	1000021e 	bne	r2,zero,b24c <OSTimeDlyHMSM+0xa8>
        return (OS_ERR_TIME_INVALID_MS);
    b244:	008014c4 	movi	r2,83
    b248:	00002906 	br	b2f0 <OSTimeDlyHMSM+0x14c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    b24c:	e0bffc03 	ldbu	r2,-16(fp)
    b250:	10c38424 	muli	r3,r2,3600
    b254:	e0bffd03 	ldbu	r2,-12(fp)
    b258:	10800f24 	muli	r2,r2,60
    b25c:	1887883a 	add	r3,r3,r2
    b260:	e0bffe03 	ldbu	r2,-8(fp)
    b264:	1885883a 	add	r2,r3,r2
    b268:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    b26c:	e0bfff0b 	ldhu	r2,-4(fp)
    b270:	10800f84 	addi	r2,r2,62
    b274:	100690fa 	slli	r3,r2,3
    b278:	008418b4 	movhi	r2,4194
    b27c:	109374c4 	addi	r2,r2,19923
    b280:	188a383a 	mulxuu	r5,r3,r2
    b284:	1885383a 	mul	r2,r3,r2
    b288:	1011883a 	mov	r8,r2
    b28c:	2813883a 	mov	r9,r5
    b290:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    b294:	2085883a 	add	r2,r4,r2
    b298:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    b29c:	e0bffb17 	ldw	r2,-20(fp)
    b2a0:	1004d43a 	srli	r2,r2,16
    b2a4:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    b2a8:	e0bffb17 	ldw	r2,-20(fp)
    b2ac:	10bfffcc 	andi	r2,r2,65535
    b2b0:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
    b2b4:	e0bffb17 	ldw	r2,-20(fp)
    b2b8:	10bfffcc 	andi	r2,r2,65535
    b2bc:	1009883a 	mov	r4,r2
    b2c0:	000b0a00 	call	b0a0 <OSTimeDly>
    while (loops > 0) {
    b2c4:	00000706 	br	b2e4 <OSTimeDlyHMSM+0x140>
        OSTimeDly((INT16U)32768u);
    b2c8:	01200014 	movui	r4,32768
    b2cc:	000b0a00 	call	b0a0 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
    b2d0:	01200014 	movui	r4,32768
    b2d4:	000b0a00 	call	b0a0 <OSTimeDly>
        loops--;
    b2d8:	e0bffa0b 	ldhu	r2,-24(fp)
    b2dc:	10bfffc4 	addi	r2,r2,-1
    b2e0:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
    b2e4:	e0bffa0b 	ldhu	r2,-24(fp)
    b2e8:	103ff71e 	bne	r2,zero,b2c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b2c8>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
    b2ec:	0005883a 	mov	r2,zero
}
    b2f0:	e037883a 	mov	sp,fp
    b2f4:	dfc00117 	ldw	ra,4(sp)
    b2f8:	df000017 	ldw	fp,0(sp)
    b2fc:	dec00204 	addi	sp,sp,8
    b300:	f800283a 	ret

0000b304 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
    b304:	defff504 	addi	sp,sp,-44
    b308:	dfc00a15 	stw	ra,40(sp)
    b30c:	df000915 	stw	fp,36(sp)
    b310:	df000904 	addi	fp,sp,36
    b314:	2005883a 	mov	r2,r4
    b318:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    b31c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
    b320:	e0bfff03 	ldbu	r2,-4(fp)
    b324:	10800530 	cmpltui	r2,r2,20
    b328:	1000021e 	bne	r2,zero,b334 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    b32c:	00800a84 	movi	r2,42
    b330:	00006406 	br	b4c4 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b334:	0005303a 	rdctl	r2,status
    b338:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b33c:	e0fffe17 	ldw	r3,-8(fp)
    b340:	00bfff84 	movi	r2,-2
    b344:	1884703a 	and	r2,r3,r2
    b348:	1001703a 	wrctl	status,r2
  
  return context;
    b34c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    b350:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
    b354:	e0ffff03 	ldbu	r3,-4(fp)
    b358:	008000b4 	movhi	r2,2
    b35c:	10a9ba04 	addi	r2,r2,-22808
    b360:	18c7883a 	add	r3,r3,r3
    b364:	18c7883a 	add	r3,r3,r3
    b368:	10c5883a 	add	r2,r2,r3
    b36c:	10800017 	ldw	r2,0(r2)
    b370:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
    b374:	e0bff917 	ldw	r2,-28(fp)
    b378:	1000061e 	bne	r2,zero,b394 <OSTimeDlyResume+0x90>
    b37c:	e0bff717 	ldw	r2,-36(fp)
    b380:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b384:	e0bff817 	ldw	r2,-32(fp)
    b388:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    b38c:	008010c4 	movi	r2,67
    b390:	00004c06 	br	b4c4 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
    b394:	e0bff917 	ldw	r2,-28(fp)
    b398:	10800058 	cmpnei	r2,r2,1
    b39c:	1000061e 	bne	r2,zero,b3b8 <OSTimeDlyResume+0xb4>
    b3a0:	e0bff717 	ldw	r2,-36(fp)
    b3a4:	e0bffa15 	stw	r2,-24(fp)
    b3a8:	e0bffa17 	ldw	r2,-24(fp)
    b3ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    b3b0:	008010c4 	movi	r2,67
    b3b4:	00004306 	br	b4c4 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
    b3b8:	e0bff917 	ldw	r2,-28(fp)
    b3bc:	10800b8b 	ldhu	r2,46(r2)
    b3c0:	10bfffcc 	andi	r2,r2,65535
    b3c4:	1000061e 	bne	r2,zero,b3e0 <OSTimeDlyResume+0xdc>
    b3c8:	e0bff717 	ldw	r2,-36(fp)
    b3cc:	e0bffb15 	stw	r2,-20(fp)
    b3d0:	e0bffb17 	ldw	r2,-20(fp)
    b3d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    b3d8:	00801404 	movi	r2,80
    b3dc:	00003906 	br	b4c4 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
    b3e0:	e0bff917 	ldw	r2,-28(fp)
    b3e4:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    b3e8:	e0bff917 	ldw	r2,-28(fp)
    b3ec:	10800c03 	ldbu	r2,48(r2)
    b3f0:	10803fcc 	andi	r2,r2,255
    b3f4:	10800dcc 	andi	r2,r2,55
    b3f8:	10000b26 	beq	r2,zero,b428 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
    b3fc:	e0bff917 	ldw	r2,-28(fp)
    b400:	10c00c03 	ldbu	r3,48(r2)
    b404:	00bff204 	movi	r2,-56
    b408:	1884703a 	and	r2,r3,r2
    b40c:	1007883a 	mov	r3,r2
    b410:	e0bff917 	ldw	r2,-28(fp)
    b414:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
    b418:	e0bff917 	ldw	r2,-28(fp)
    b41c:	00c00044 	movi	r3,1
    b420:	10c00c45 	stb	r3,49(r2)
    b424:	00000206 	br	b430 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
    b428:	e0bff917 	ldw	r2,-28(fp)
    b42c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
    b430:	e0bff917 	ldw	r2,-28(fp)
    b434:	10800c03 	ldbu	r2,48(r2)
    b438:	10803fcc 	andi	r2,r2,255
    b43c:	1080020c 	andi	r2,r2,8
    b440:	10001b1e 	bne	r2,zero,b4b0 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
    b444:	e0bff917 	ldw	r2,-28(fp)
    b448:	10c00d83 	ldbu	r3,54(r2)
    b44c:	d0a7ff03 	ldbu	r2,-24580(gp)
    b450:	1884b03a 	or	r2,r3,r2
    b454:	d0a7ff05 	stb	r2,-24580(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    b458:	e0bff917 	ldw	r2,-28(fp)
    b45c:	10800d03 	ldbu	r2,52(r2)
    b460:	10c03fcc 	andi	r3,r2,255
    b464:	e0bff917 	ldw	r2,-28(fp)
    b468:	10800d03 	ldbu	r2,52(r2)
    b46c:	11003fcc 	andi	r4,r2,255
    b470:	d0a7ff44 	addi	r2,gp,-24579
    b474:	2085883a 	add	r2,r4,r2
    b478:	11000003 	ldbu	r4,0(r2)
    b47c:	e0bff917 	ldw	r2,-28(fp)
    b480:	10800d43 	ldbu	r2,53(r2)
    b484:	2084b03a 	or	r2,r4,r2
    b488:	1009883a 	mov	r4,r2
    b48c:	d0a7ff44 	addi	r2,gp,-24579
    b490:	1885883a 	add	r2,r3,r2
    b494:	11000005 	stb	r4,0(r2)
    b498:	e0bff717 	ldw	r2,-36(fp)
    b49c:	e0bffc15 	stw	r2,-16(fp)
    b4a0:	e0bffc17 	ldw	r2,-16(fp)
    b4a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
    b4a8:	00056f40 	call	56f4 <OS_Sched>
    b4ac:	00000406 	br	b4c0 <OSTimeDlyResume+0x1bc>
    b4b0:	e0bff717 	ldw	r2,-36(fp)
    b4b4:	e0bffd15 	stw	r2,-12(fp)
    b4b8:	e0bffd17 	ldw	r2,-12(fp)
    b4bc:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
    b4c0:	0005883a 	mov	r2,zero
}
    b4c4:	e037883a 	mov	sp,fp
    b4c8:	dfc00117 	ldw	ra,4(sp)
    b4cc:	df000017 	ldw	fp,0(sp)
    b4d0:	dec00204 	addi	sp,sp,8
    b4d4:	f800283a 	ret

0000b4d8 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
    b4d8:	defffb04 	addi	sp,sp,-20
    b4dc:	df000415 	stw	fp,16(sp)
    b4e0:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b4e4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b4e8:	0005303a 	rdctl	r2,status
    b4ec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b4f0:	e0fffe17 	ldw	r3,-8(fp)
    b4f4:	00bfff84 	movi	r2,-2
    b4f8:	1884703a 	and	r2,r3,r2
    b4fc:	1001703a 	wrctl	status,r2
  
  return context;
    b500:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    b504:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
    b508:	d0a80317 	ldw	r2,-24564(gp)
    b50c:	e0bffd15 	stw	r2,-12(fp)
    b510:	e0bffc17 	ldw	r2,-16(fp)
    b514:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b518:	e0bfff17 	ldw	r2,-4(fp)
    b51c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
    b520:	e0bffd17 	ldw	r2,-12(fp)
}
    b524:	e037883a 	mov	sp,fp
    b528:	df000017 	ldw	fp,0(sp)
    b52c:	dec00104 	addi	sp,sp,4
    b530:	f800283a 	ret

0000b534 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
    b534:	defffb04 	addi	sp,sp,-20
    b538:	df000415 	stw	fp,16(sp)
    b53c:	df000404 	addi	fp,sp,16
    b540:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b544:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b548:	0005303a 	rdctl	r2,status
    b54c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b550:	e0fffd17 	ldw	r3,-12(fp)
    b554:	00bfff84 	movi	r2,-2
    b558:	1884703a 	and	r2,r3,r2
    b55c:	1001703a 	wrctl	status,r2
  
  return context;
    b560:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
    b564:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
    b568:	e0bfff17 	ldw	r2,-4(fp)
    b56c:	d0a80315 	stw	r2,-24564(gp)
    b570:	e0bffc17 	ldw	r2,-16(fp)
    b574:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b578:	e0bffe17 	ldw	r2,-8(fp)
    b57c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    b580:	0001883a 	nop
    b584:	e037883a 	mov	sp,fp
    b588:	df000017 	ldw	fp,0(sp)
    b58c:	dec00104 	addi	sp,sp,4
    b590:	f800283a 	ret

0000b594 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    b594:	defffd04 	addi	sp,sp,-12
    b598:	dfc00215 	stw	ra,8(sp)
    b59c:	df000115 	stw	fp,4(sp)
    b5a0:	df000104 	addi	fp,sp,4
    b5a4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    b5a8:	d1600604 	addi	r5,gp,-32744
    b5ac:	e13fff17 	ldw	r4,-4(fp)
    b5b0:	000e0700 	call	e070 <alt_dev_llist_insert>
}
    b5b4:	e037883a 	mov	sp,fp
    b5b8:	dfc00117 	ldw	ra,4(sp)
    b5bc:	df000017 	ldw	fp,0(sp)
    b5c0:	dec00204 	addi	sp,sp,8
    b5c4:	f800283a 	ret

0000b5c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    b5c8:	defffd04 	addi	sp,sp,-12
    b5cc:	dfc00215 	stw	ra,8(sp)
    b5d0:	df000115 	stw	fp,4(sp)
    b5d4:	df000104 	addi	fp,sp,4
    b5d8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
    b5dc:	000e9500 	call	e950 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    b5e0:	00800044 	movi	r2,1
    b5e4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    b5e8:	0001883a 	nop
    b5ec:	e037883a 	mov	sp,fp
    b5f0:	dfc00117 	ldw	ra,4(sp)
    b5f4:	df000017 	ldw	fp,0(sp)
    b5f8:	dec00204 	addi	sp,sp,8
    b5fc:	f800283a 	ret

0000b600 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    b600:	defffc04 	addi	sp,sp,-16
    b604:	dfc00315 	stw	ra,12(sp)
    b608:	df000215 	stw	fp,8(sp)
    b60c:	df000204 	addi	fp,sp,8
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    b610:	01c00204 	movi	r7,8
    b614:	000d883a 	mov	r6,zero
    b618:	000b883a 	mov	r5,zero
    b61c:	01040034 	movhi	r4,4096
    b620:	21080004 	addi	r4,r4,8192
    b624:	000cbb40 	call	cbb4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    b628:	01800204 	movi	r6,8
    b62c:	000b883a 	mov	r5,zero
    b630:	01000074 	movhi	r4,1
    b634:	21002304 	addi	r4,r4,140
    b638:	000bf780 	call	bf78 <altera_avalon_jtag_uart_init>
    b63c:	01000074 	movhi	r4,1
    b640:	21001904 	addi	r4,r4,100
    b644:	000b5940 	call	b594 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
    b648:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    b64c:	01000074 	movhi	r4,1
    b650:	21043404 	addi	r4,r4,4304
    b654:	000b5940 	call	b594 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
    b658:	01000074 	movhi	r4,1
    b65c:	21044004 	addi	r4,r4,4352
    b660:	000b5940 	call	b594 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    b664:	01000074 	movhi	r4,1
    b668:	21044c04 	addi	r4,r4,4400
    b66c:	000ccdc0 	call	ccdc <alt_up_character_lcd_init>
    b670:	01000074 	movhi	r4,1
    b674:	21044c04 	addi	r4,r4,4400
    b678:	000b5940 	call	b594 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
    b67c:	01000074 	movhi	r4,1
    b680:	21045704 	addi	r4,r4,4444
    b684:	000b5940 	call	b594 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
    b688:	01000074 	movhi	r4,1
    b68c:	21046204 	addi	r4,r4,4488
    b690:	000b5940 	call	b594 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    b694:	01000074 	movhi	r4,1
    b698:	21046d04 	addi	r4,r4,4532
    b69c:	000b5940 	call	b594 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    b6a0:	01000074 	movhi	r4,1
    b6a4:	21047804 	addi	r4,r4,4576
    b6a8:	000b5940 	call	b594 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    b6ac:	01000074 	movhi	r4,1
    b6b0:	21048304 	addi	r4,r4,4620
    b6b4:	000b5940 	call	b594 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    b6b8:	01000074 	movhi	r4,1
    b6bc:	21048e04 	addi	r4,r4,4664
    b6c0:	000b5940 	call	b594 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    b6c4:	01000074 	movhi	r4,1
    b6c8:	21049904 	addi	r4,r4,4708
    b6cc:	000b5940 	call	b594 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    b6d0:	01000074 	movhi	r4,1
    b6d4:	2104a404 	addi	r4,r4,4752
    b6d8:	000b5940 	call	b594 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    b6dc:	01000074 	movhi	r4,1
    b6e0:	2104af04 	addi	r4,r4,4796
    b6e4:	000d5d00 	call	d5d0 <alt_up_ps2_init>
    b6e8:	01000074 	movhi	r4,1
    b6ec:	2104af04 	addi	r4,r4,4796
    b6f0:	000b5940 	call	b594 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
    b6f4:	01000074 	movhi	r4,1
    b6f8:	2104bd04 	addi	r4,r4,4852
    b6fc:	000d5d00 	call	d5d0 <alt_up_ps2_init>
    b700:	01000074 	movhi	r4,1
    b704:	2104bd04 	addi	r4,r4,4852
    b708:	000b5940 	call	b594 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    b70c:	01000074 	movhi	r4,1
    b710:	2104cb04 	addi	r4,r4,4908
    b714:	000b5940 	call	b594 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
    b718:	01000074 	movhi	r4,1
    b71c:	2104d604 	addi	r4,r4,4952
    b720:	000b5940 	call	b594 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
    b724:	00800074 	movhi	r2,1
    b728:	1084e304 	addi	r2,r2,5004
    b72c:	10800a17 	ldw	r2,40(r2)
    b730:	10800017 	ldw	r2,0(r2)
    b734:	1007883a 	mov	r3,r2
    b738:	00800074 	movhi	r2,1
    b73c:	1084e304 	addi	r2,r2,5004
    b740:	10c00b15 	stw	r3,44(r2)
    b744:	00800074 	movhi	r2,1
    b748:	1084e304 	addi	r2,r2,5004
    b74c:	10800a17 	ldw	r2,40(r2)
    b750:	10800104 	addi	r2,r2,4
    b754:	10800017 	ldw	r2,0(r2)
    b758:	1007883a 	mov	r3,r2
    b75c:	00800074 	movhi	r2,1
    b760:	1084e304 	addi	r2,r2,5004
    b764:	10c00c15 	stw	r3,48(r2)
    b768:	00800074 	movhi	r2,1
    b76c:	1084e304 	addi	r2,r2,5004
    b770:	10800a17 	ldw	r2,40(r2)
    b774:	10800204 	addi	r2,r2,8
    b778:	10800017 	ldw	r2,0(r2)
    b77c:	10ffffcc 	andi	r3,r2,65535
    b780:	00800074 	movhi	r2,1
    b784:	1084e304 	addi	r2,r2,5004
    b788:	10c01115 	stw	r3,68(r2)
    b78c:	00800074 	movhi	r2,1
    b790:	1084e304 	addi	r2,r2,5004
    b794:	10800a17 	ldw	r2,40(r2)
    b798:	10800204 	addi	r2,r2,8
    b79c:	10800017 	ldw	r2,0(r2)
    b7a0:	1006d43a 	srli	r3,r2,16
    b7a4:	00800074 	movhi	r2,1
    b7a8:	1084e304 	addi	r2,r2,5004
    b7ac:	10c01215 	stw	r3,72(r2)
    b7b0:	00800074 	movhi	r2,1
    b7b4:	1084e304 	addi	r2,r2,5004
    b7b8:	10800a17 	ldw	r2,40(r2)
    b7bc:	10800304 	addi	r2,r2,12
    b7c0:	10800017 	ldw	r2,0(r2)
    b7c4:	1005d07a 	srai	r2,r2,1
    b7c8:	10c0004c 	andi	r3,r2,1
    b7cc:	00800074 	movhi	r2,1
    b7d0:	1084e304 	addi	r2,r2,5004
    b7d4:	10c00d15 	stw	r3,52(r2)
    b7d8:	00800074 	movhi	r2,1
    b7dc:	1084e304 	addi	r2,r2,5004
    b7e0:	10800a17 	ldw	r2,40(r2)
    b7e4:	10800304 	addi	r2,r2,12
    b7e8:	10800017 	ldw	r2,0(r2)
    b7ec:	1005d23a 	srai	r2,r2,8
    b7f0:	10c003cc 	andi	r3,r2,15
    b7f4:	00800074 	movhi	r2,1
    b7f8:	1084e304 	addi	r2,r2,5004
    b7fc:	10c00e15 	stw	r3,56(r2)
    b800:	00800074 	movhi	r2,1
    b804:	1084e304 	addi	r2,r2,5004
    b808:	10800a17 	ldw	r2,40(r2)
    b80c:	10800304 	addi	r2,r2,12
    b810:	10800017 	ldw	r2,0(r2)
    b814:	1005d1ba 	srai	r2,r2,6
    b818:	10c000cc 	andi	r3,r2,3
    b81c:	00800074 	movhi	r2,1
    b820:	1084e304 	addi	r2,r2,5004
    b824:	10c00f15 	stw	r3,60(r2)
    b828:	00800074 	movhi	r2,1
    b82c:	1084e304 	addi	r2,r2,5004
    b830:	10800e17 	ldw	r2,56(r2)
    b834:	1007883a 	mov	r3,r2
    b838:	00800074 	movhi	r2,1
    b83c:	1084e304 	addi	r2,r2,5004
    b840:	10800f17 	ldw	r2,60(r2)
    b844:	1885383a 	mul	r2,r3,r2
    b848:	e0bffe05 	stb	r2,-8(fp)
    b84c:	e0bffe03 	ldbu	r2,-8(fp)
    b850:	10800268 	cmpgeui	r2,r2,9
    b854:	1000051e 	bne	r2,zero,b86c <alt_sys_init+0x26c>
    b858:	00800074 	movhi	r2,1
    b85c:	1084e304 	addi	r2,r2,5004
    b860:	00c00044 	movi	r3,1
    b864:	10c01015 	stw	r3,64(r2)
    b868:	00000c06 	br	b89c <alt_sys_init+0x29c>
    b86c:	e0bffe03 	ldbu	r2,-8(fp)
    b870:	10800468 	cmpgeui	r2,r2,17
    b874:	1000051e 	bne	r2,zero,b88c <alt_sys_init+0x28c>
    b878:	00800074 	movhi	r2,1
    b87c:	1084e304 	addi	r2,r2,5004
    b880:	00c00084 	movi	r3,2
    b884:	10c01015 	stw	r3,64(r2)
    b888:	00000406 	br	b89c <alt_sys_init+0x29c>
    b88c:	00800074 	movhi	r2,1
    b890:	1084e304 	addi	r2,r2,5004
    b894:	00c00104 	movi	r3,4
    b898:	10c01015 	stw	r3,64(r2)
    b89c:	00800074 	movhi	r2,1
    b8a0:	1084e304 	addi	r2,r2,5004
    b8a4:	10800a17 	ldw	r2,40(r2)
    b8a8:	10800304 	addi	r2,r2,12
    b8ac:	10800017 	ldw	r2,0(r2)
    b8b0:	1005d43a 	srai	r2,r2,16
    b8b4:	e0bffe45 	stb	r2,-7(fp)
    b8b8:	00800074 	movhi	r2,1
    b8bc:	1084e304 	addi	r2,r2,5004
    b8c0:	10800a17 	ldw	r2,40(r2)
    b8c4:	10800304 	addi	r2,r2,12
    b8c8:	10800017 	ldw	r2,0(r2)
    b8cc:	1004d63a 	srli	r2,r2,24
    b8d0:	e0bffe85 	stb	r2,-6(fp)
    b8d4:	00800074 	movhi	r2,1
    b8d8:	1084e304 	addi	r2,r2,5004
    b8dc:	10801017 	ldw	r2,64(r2)
    b8e0:	10800058 	cmpnei	r2,r2,1
    b8e4:	1000041e 	bne	r2,zero,b8f8 <alt_sys_init+0x2f8>
    b8e8:	00800074 	movhi	r2,1
    b8ec:	1084e304 	addi	r2,r2,5004
    b8f0:	10001315 	stw	zero,76(r2)
    b8f4:	00000e06 	br	b930 <alt_sys_init+0x330>
    b8f8:	00800074 	movhi	r2,1
    b8fc:	1084e304 	addi	r2,r2,5004
    b900:	10801017 	ldw	r2,64(r2)
    b904:	10800098 	cmpnei	r2,r2,2
    b908:	1000051e 	bne	r2,zero,b920 <alt_sys_init+0x320>
    b90c:	00800074 	movhi	r2,1
    b910:	1084e304 	addi	r2,r2,5004
    b914:	00c00044 	movi	r3,1
    b918:	10c01315 	stw	r3,76(r2)
    b91c:	00000406 	br	b930 <alt_sys_init+0x330>
    b920:	00800074 	movhi	r2,1
    b924:	1084e304 	addi	r2,r2,5004
    b928:	00c00084 	movi	r3,2
    b92c:	10c01315 	stw	r3,76(r2)
    b930:	e0bffe43 	ldbu	r2,-7(fp)
    b934:	00c00804 	movi	r3,32
    b938:	1885c83a 	sub	r2,r3,r2
    b93c:	00ffffc4 	movi	r3,-1
    b940:	1886d83a 	srl	r3,r3,r2
    b944:	00800074 	movhi	r2,1
    b948:	1084e304 	addi	r2,r2,5004
    b94c:	10c01415 	stw	r3,80(r2)
    b950:	e0fffe43 	ldbu	r3,-7(fp)
    b954:	00800074 	movhi	r2,1
    b958:	1084e304 	addi	r2,r2,5004
    b95c:	10801317 	ldw	r2,76(r2)
    b960:	1887883a 	add	r3,r3,r2
    b964:	00800074 	movhi	r2,1
    b968:	1084e304 	addi	r2,r2,5004
    b96c:	10c01515 	stw	r3,84(r2)
    b970:	e0bffe83 	ldbu	r2,-6(fp)
    b974:	00c00804 	movi	r3,32
    b978:	1885c83a 	sub	r2,r3,r2
    b97c:	00ffffc4 	movi	r3,-1
    b980:	1886d83a 	srl	r3,r3,r2
    b984:	00800074 	movhi	r2,1
    b988:	1084e304 	addi	r2,r2,5004
    b98c:	10c01615 	stw	r3,88(r2)
    b990:	01000074 	movhi	r4,1
    b994:	2104e304 	addi	r4,r4,5004
    b998:	000b5940 	call	b594 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_IN_SUBSYSTEM_VIDEO_IN_DMA, Video_In_Subsystem_Video_In_DMA);
    b99c:	00800074 	movhi	r2,1
    b9a0:	1084fa04 	addi	r2,r2,5096
    b9a4:	10800a17 	ldw	r2,40(r2)
    b9a8:	10800017 	ldw	r2,0(r2)
    b9ac:	1007883a 	mov	r3,r2
    b9b0:	00800074 	movhi	r2,1
    b9b4:	1084fa04 	addi	r2,r2,5096
    b9b8:	10c00b15 	stw	r3,44(r2)
    b9bc:	00800074 	movhi	r2,1
    b9c0:	1084fa04 	addi	r2,r2,5096
    b9c4:	10800a17 	ldw	r2,40(r2)
    b9c8:	10800104 	addi	r2,r2,4
    b9cc:	10800017 	ldw	r2,0(r2)
    b9d0:	1007883a 	mov	r3,r2
    b9d4:	00800074 	movhi	r2,1
    b9d8:	1084fa04 	addi	r2,r2,5096
    b9dc:	10c00c15 	stw	r3,48(r2)
    b9e0:	00800074 	movhi	r2,1
    b9e4:	1084fa04 	addi	r2,r2,5096
    b9e8:	10800a17 	ldw	r2,40(r2)
    b9ec:	10800204 	addi	r2,r2,8
    b9f0:	10800017 	ldw	r2,0(r2)
    b9f4:	10ffffcc 	andi	r3,r2,65535
    b9f8:	00800074 	movhi	r2,1
    b9fc:	1084fa04 	addi	r2,r2,5096
    ba00:	10c01115 	stw	r3,68(r2)
    ba04:	00800074 	movhi	r2,1
    ba08:	1084fa04 	addi	r2,r2,5096
    ba0c:	10800a17 	ldw	r2,40(r2)
    ba10:	10800204 	addi	r2,r2,8
    ba14:	10800017 	ldw	r2,0(r2)
    ba18:	1006d43a 	srli	r3,r2,16
    ba1c:	00800074 	movhi	r2,1
    ba20:	1084fa04 	addi	r2,r2,5096
    ba24:	10c01215 	stw	r3,72(r2)
    ba28:	00800074 	movhi	r2,1
    ba2c:	1084fa04 	addi	r2,r2,5096
    ba30:	10800a17 	ldw	r2,40(r2)
    ba34:	10800304 	addi	r2,r2,12
    ba38:	10800017 	ldw	r2,0(r2)
    ba3c:	1005d07a 	srai	r2,r2,1
    ba40:	10c0004c 	andi	r3,r2,1
    ba44:	00800074 	movhi	r2,1
    ba48:	1084fa04 	addi	r2,r2,5096
    ba4c:	10c00d15 	stw	r3,52(r2)
    ba50:	00800074 	movhi	r2,1
    ba54:	1084fa04 	addi	r2,r2,5096
    ba58:	10800a17 	ldw	r2,40(r2)
    ba5c:	10800304 	addi	r2,r2,12
    ba60:	10800017 	ldw	r2,0(r2)
    ba64:	1005d23a 	srai	r2,r2,8
    ba68:	10c003cc 	andi	r3,r2,15
    ba6c:	00800074 	movhi	r2,1
    ba70:	1084fa04 	addi	r2,r2,5096
    ba74:	10c00e15 	stw	r3,56(r2)
    ba78:	00800074 	movhi	r2,1
    ba7c:	1084fa04 	addi	r2,r2,5096
    ba80:	10800a17 	ldw	r2,40(r2)
    ba84:	10800304 	addi	r2,r2,12
    ba88:	10800017 	ldw	r2,0(r2)
    ba8c:	1005d1ba 	srai	r2,r2,6
    ba90:	10c000cc 	andi	r3,r2,3
    ba94:	00800074 	movhi	r2,1
    ba98:	1084fa04 	addi	r2,r2,5096
    ba9c:	10c00f15 	stw	r3,60(r2)
    baa0:	00800074 	movhi	r2,1
    baa4:	1084fa04 	addi	r2,r2,5096
    baa8:	10800e17 	ldw	r2,56(r2)
    baac:	1007883a 	mov	r3,r2
    bab0:	00800074 	movhi	r2,1
    bab4:	1084fa04 	addi	r2,r2,5096
    bab8:	10800f17 	ldw	r2,60(r2)
    babc:	1885383a 	mul	r2,r3,r2
    bac0:	e0bffec5 	stb	r2,-5(fp)
    bac4:	e0bffec3 	ldbu	r2,-5(fp)
    bac8:	10800268 	cmpgeui	r2,r2,9
    bacc:	1000051e 	bne	r2,zero,bae4 <alt_sys_init+0x4e4>
    bad0:	00800074 	movhi	r2,1
    bad4:	1084fa04 	addi	r2,r2,5096
    bad8:	00c00044 	movi	r3,1
    badc:	10c01015 	stw	r3,64(r2)
    bae0:	00000c06 	br	bb14 <alt_sys_init+0x514>
    bae4:	e0bffec3 	ldbu	r2,-5(fp)
    bae8:	10800468 	cmpgeui	r2,r2,17
    baec:	1000051e 	bne	r2,zero,bb04 <alt_sys_init+0x504>
    baf0:	00800074 	movhi	r2,1
    baf4:	1084fa04 	addi	r2,r2,5096
    baf8:	00c00084 	movi	r3,2
    bafc:	10c01015 	stw	r3,64(r2)
    bb00:	00000406 	br	bb14 <alt_sys_init+0x514>
    bb04:	00800074 	movhi	r2,1
    bb08:	1084fa04 	addi	r2,r2,5096
    bb0c:	00c00104 	movi	r3,4
    bb10:	10c01015 	stw	r3,64(r2)
    bb14:	00800074 	movhi	r2,1
    bb18:	1084fa04 	addi	r2,r2,5096
    bb1c:	10800a17 	ldw	r2,40(r2)
    bb20:	10800304 	addi	r2,r2,12
    bb24:	10800017 	ldw	r2,0(r2)
    bb28:	1005d43a 	srai	r2,r2,16
    bb2c:	e0bfff05 	stb	r2,-4(fp)
    bb30:	00800074 	movhi	r2,1
    bb34:	1084fa04 	addi	r2,r2,5096
    bb38:	10800a17 	ldw	r2,40(r2)
    bb3c:	10800304 	addi	r2,r2,12
    bb40:	10800017 	ldw	r2,0(r2)
    bb44:	1004d63a 	srli	r2,r2,24
    bb48:	e0bfff45 	stb	r2,-3(fp)
    bb4c:	00800074 	movhi	r2,1
    bb50:	1084fa04 	addi	r2,r2,5096
    bb54:	10801017 	ldw	r2,64(r2)
    bb58:	10800058 	cmpnei	r2,r2,1
    bb5c:	1000041e 	bne	r2,zero,bb70 <alt_sys_init+0x570>
    bb60:	00800074 	movhi	r2,1
    bb64:	1084fa04 	addi	r2,r2,5096
    bb68:	10001315 	stw	zero,76(r2)
    bb6c:	00000e06 	br	bba8 <alt_sys_init+0x5a8>
    bb70:	00800074 	movhi	r2,1
    bb74:	1084fa04 	addi	r2,r2,5096
    bb78:	10801017 	ldw	r2,64(r2)
    bb7c:	10800098 	cmpnei	r2,r2,2
    bb80:	1000051e 	bne	r2,zero,bb98 <alt_sys_init+0x598>
    bb84:	00800074 	movhi	r2,1
    bb88:	1084fa04 	addi	r2,r2,5096
    bb8c:	00c00044 	movi	r3,1
    bb90:	10c01315 	stw	r3,76(r2)
    bb94:	00000406 	br	bba8 <alt_sys_init+0x5a8>
    bb98:	00800074 	movhi	r2,1
    bb9c:	1084fa04 	addi	r2,r2,5096
    bba0:	00c00084 	movi	r3,2
    bba4:	10c01315 	stw	r3,76(r2)
    bba8:	e0bfff03 	ldbu	r2,-4(fp)
    bbac:	00c00804 	movi	r3,32
    bbb0:	1885c83a 	sub	r2,r3,r2
    bbb4:	00ffffc4 	movi	r3,-1
    bbb8:	1886d83a 	srl	r3,r3,r2
    bbbc:	00800074 	movhi	r2,1
    bbc0:	1084fa04 	addi	r2,r2,5096
    bbc4:	10c01415 	stw	r3,80(r2)
    bbc8:	e0ffff03 	ldbu	r3,-4(fp)
    bbcc:	00800074 	movhi	r2,1
    bbd0:	1084fa04 	addi	r2,r2,5096
    bbd4:	10801317 	ldw	r2,76(r2)
    bbd8:	1887883a 	add	r3,r3,r2
    bbdc:	00800074 	movhi	r2,1
    bbe0:	1084fa04 	addi	r2,r2,5096
    bbe4:	10c01515 	stw	r3,84(r2)
    bbe8:	e0bfff43 	ldbu	r2,-3(fp)
    bbec:	00c00804 	movi	r3,32
    bbf0:	1885c83a 	sub	r2,r3,r2
    bbf4:	00ffffc4 	movi	r3,-1
    bbf8:	1886d83a 	srl	r3,r3,r2
    bbfc:	00800074 	movhi	r2,1
    bc00:	1084fa04 	addi	r2,r2,5096
    bc04:	10c01615 	stw	r3,88(r2)
    bc08:	01000074 	movhi	r4,1
    bc0c:	2104fa04 	addi	r4,r4,5096
    bc10:	000b5940 	call	b594 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
    bc14:	00800074 	movhi	r2,1
    bc18:	10851104 	addi	r2,r2,5188
    bc1c:	10800a17 	ldw	r2,40(r2)
    bc20:	10800017 	ldw	r2,0(r2)
    bc24:	1007883a 	mov	r3,r2
    bc28:	00800074 	movhi	r2,1
    bc2c:	10851104 	addi	r2,r2,5188
    bc30:	10c00b15 	stw	r3,44(r2)
    bc34:	00800074 	movhi	r2,1
    bc38:	10851104 	addi	r2,r2,5188
    bc3c:	10800a17 	ldw	r2,40(r2)
    bc40:	10800104 	addi	r2,r2,4
    bc44:	10800017 	ldw	r2,0(r2)
    bc48:	1007883a 	mov	r3,r2
    bc4c:	00800074 	movhi	r2,1
    bc50:	10851104 	addi	r2,r2,5188
    bc54:	10c00c15 	stw	r3,48(r2)
    bc58:	00800074 	movhi	r2,1
    bc5c:	10851104 	addi	r2,r2,5188
    bc60:	10800a17 	ldw	r2,40(r2)
    bc64:	10800204 	addi	r2,r2,8
    bc68:	10800017 	ldw	r2,0(r2)
    bc6c:	10ffffcc 	andi	r3,r2,65535
    bc70:	00800074 	movhi	r2,1
    bc74:	10851104 	addi	r2,r2,5188
    bc78:	10c00f15 	stw	r3,60(r2)
    bc7c:	00800074 	movhi	r2,1
    bc80:	10851104 	addi	r2,r2,5188
    bc84:	10800a17 	ldw	r2,40(r2)
    bc88:	10800204 	addi	r2,r2,8
    bc8c:	10800017 	ldw	r2,0(r2)
    bc90:	1006d43a 	srli	r3,r2,16
    bc94:	00800074 	movhi	r2,1
    bc98:	10851104 	addi	r2,r2,5188
    bc9c:	10c01015 	stw	r3,64(r2)
    bca0:	00800074 	movhi	r2,1
    bca4:	10851104 	addi	r2,r2,5188
    bca8:	10800a17 	ldw	r2,40(r2)
    bcac:	10800304 	addi	r2,r2,12
    bcb0:	10800017 	ldw	r2,0(r2)
    bcb4:	1005d07a 	srai	r2,r2,1
    bcb8:	10c0004c 	andi	r3,r2,1
    bcbc:	00800074 	movhi	r2,1
    bcc0:	10851104 	addi	r2,r2,5188
    bcc4:	10c00d15 	stw	r3,52(r2)
    bcc8:	00800074 	movhi	r2,1
    bccc:	10851104 	addi	r2,r2,5188
    bcd0:	10800a17 	ldw	r2,40(r2)
    bcd4:	10800304 	addi	r2,r2,12
    bcd8:	10800017 	ldw	r2,0(r2)
    bcdc:	1005d13a 	srai	r2,r2,4
    bce0:	10c003cc 	andi	r3,r2,15
    bce4:	00800074 	movhi	r2,1
    bce8:	10851104 	addi	r2,r2,5188
    bcec:	10c00e15 	stw	r3,56(r2)
    bcf0:	00800074 	movhi	r2,1
    bcf4:	10851104 	addi	r2,r2,5188
    bcf8:	10800a17 	ldw	r2,40(r2)
    bcfc:	10800304 	addi	r2,r2,12
    bd00:	10800017 	ldw	r2,0(r2)
    bd04:	1005d43a 	srai	r2,r2,16
    bd08:	e0bfff85 	stb	r2,-2(fp)
    bd0c:	00800074 	movhi	r2,1
    bd10:	10851104 	addi	r2,r2,5188
    bd14:	10800a17 	ldw	r2,40(r2)
    bd18:	10800304 	addi	r2,r2,12
    bd1c:	10800017 	ldw	r2,0(r2)
    bd20:	1004d63a 	srli	r2,r2,24
    bd24:	e0bfffc5 	stb	r2,-1(fp)
    bd28:	00800074 	movhi	r2,1
    bd2c:	10851104 	addi	r2,r2,5188
    bd30:	10800e17 	ldw	r2,56(r2)
    bd34:	10800058 	cmpnei	r2,r2,1
    bd38:	1000041e 	bne	r2,zero,bd4c <alt_sys_init+0x74c>
    bd3c:	00800074 	movhi	r2,1
    bd40:	10851104 	addi	r2,r2,5188
    bd44:	10001115 	stw	zero,68(r2)
    bd48:	00000e06 	br	bd84 <alt_sys_init+0x784>
    bd4c:	00800074 	movhi	r2,1
    bd50:	10851104 	addi	r2,r2,5188
    bd54:	10800e17 	ldw	r2,56(r2)
    bd58:	10800098 	cmpnei	r2,r2,2
    bd5c:	1000051e 	bne	r2,zero,bd74 <alt_sys_init+0x774>
    bd60:	00800074 	movhi	r2,1
    bd64:	10851104 	addi	r2,r2,5188
    bd68:	00c00044 	movi	r3,1
    bd6c:	10c01115 	stw	r3,68(r2)
    bd70:	00000406 	br	bd84 <alt_sys_init+0x784>
    bd74:	00800074 	movhi	r2,1
    bd78:	10851104 	addi	r2,r2,5188
    bd7c:	00c00084 	movi	r3,2
    bd80:	10c01115 	stw	r3,68(r2)
    bd84:	e0bfff83 	ldbu	r2,-2(fp)
    bd88:	00c00804 	movi	r3,32
    bd8c:	1885c83a 	sub	r2,r3,r2
    bd90:	00ffffc4 	movi	r3,-1
    bd94:	1886d83a 	srl	r3,r3,r2
    bd98:	00800074 	movhi	r2,1
    bd9c:	10851104 	addi	r2,r2,5188
    bda0:	10c01215 	stw	r3,72(r2)
    bda4:	e0ffff83 	ldbu	r3,-2(fp)
    bda8:	00800074 	movhi	r2,1
    bdac:	10851104 	addi	r2,r2,5188
    bdb0:	10801117 	ldw	r2,68(r2)
    bdb4:	1887883a 	add	r3,r3,r2
    bdb8:	00800074 	movhi	r2,1
    bdbc:	10851104 	addi	r2,r2,5188
    bdc0:	10c01315 	stw	r3,76(r2)
    bdc4:	e0bfffc3 	ldbu	r2,-1(fp)
    bdc8:	00c00804 	movi	r3,32
    bdcc:	1885c83a 	sub	r2,r3,r2
    bdd0:	00ffffc4 	movi	r3,-1
    bdd4:	1886d83a 	srl	r3,r3,r2
    bdd8:	00800074 	movhi	r2,1
    bddc:	10851104 	addi	r2,r2,5188
    bde0:	10c01415 	stw	r3,80(r2)
    bde4:	01000074 	movhi	r4,1
    bde8:	21051104 	addi	r4,r4,5188
    bdec:	000b5940 	call	b594 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
    bdf0:	01000074 	movhi	r4,1
    bdf4:	21052604 	addi	r4,r4,5272
    bdf8:	000b5940 	call	b594 <alt_dev_reg>
}
    bdfc:	0001883a 	nop
    be00:	e037883a 	mov	sp,fp
    be04:	dfc00117 	ldw	ra,4(sp)
    be08:	df000017 	ldw	fp,0(sp)
    be0c:	dec00204 	addi	sp,sp,8
    be10:	f800283a 	ret

0000be14 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    be14:	defffa04 	addi	sp,sp,-24
    be18:	dfc00515 	stw	ra,20(sp)
    be1c:	df000415 	stw	fp,16(sp)
    be20:	df000404 	addi	fp,sp,16
    be24:	e13ffd15 	stw	r4,-12(fp)
    be28:	e17ffe15 	stw	r5,-8(fp)
    be2c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    be30:	e0bffd17 	ldw	r2,-12(fp)
    be34:	10800017 	ldw	r2,0(r2)
    be38:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    be3c:	e0bffc17 	ldw	r2,-16(fp)
    be40:	10c00a04 	addi	r3,r2,40
    be44:	e0bffd17 	ldw	r2,-12(fp)
    be48:	10800217 	ldw	r2,8(r2)
    be4c:	100f883a 	mov	r7,r2
    be50:	e1bfff17 	ldw	r6,-4(fp)
    be54:	e17ffe17 	ldw	r5,-8(fp)
    be58:	1809883a 	mov	r4,r3
    be5c:	000c5b80 	call	c5b8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    be60:	e037883a 	mov	sp,fp
    be64:	dfc00117 	ldw	ra,4(sp)
    be68:	df000017 	ldw	fp,0(sp)
    be6c:	dec00204 	addi	sp,sp,8
    be70:	f800283a 	ret

0000be74 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    be74:	defffa04 	addi	sp,sp,-24
    be78:	dfc00515 	stw	ra,20(sp)
    be7c:	df000415 	stw	fp,16(sp)
    be80:	df000404 	addi	fp,sp,16
    be84:	e13ffd15 	stw	r4,-12(fp)
    be88:	e17ffe15 	stw	r5,-8(fp)
    be8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    be90:	e0bffd17 	ldw	r2,-12(fp)
    be94:	10800017 	ldw	r2,0(r2)
    be98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    be9c:	e0bffc17 	ldw	r2,-16(fp)
    bea0:	10c00a04 	addi	r3,r2,40
    bea4:	e0bffd17 	ldw	r2,-12(fp)
    bea8:	10800217 	ldw	r2,8(r2)
    beac:	100f883a 	mov	r7,r2
    beb0:	e1bfff17 	ldw	r6,-4(fp)
    beb4:	e17ffe17 	ldw	r5,-8(fp)
    beb8:	1809883a 	mov	r4,r3
    bebc:	000c8740 	call	c874 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    bec0:	e037883a 	mov	sp,fp
    bec4:	dfc00117 	ldw	ra,4(sp)
    bec8:	df000017 	ldw	fp,0(sp)
    becc:	dec00204 	addi	sp,sp,8
    bed0:	f800283a 	ret

0000bed4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    bed4:	defffc04 	addi	sp,sp,-16
    bed8:	dfc00315 	stw	ra,12(sp)
    bedc:	df000215 	stw	fp,8(sp)
    bee0:	df000204 	addi	fp,sp,8
    bee4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    bee8:	e0bfff17 	ldw	r2,-4(fp)
    beec:	10800017 	ldw	r2,0(r2)
    bef0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    bef4:	e0bffe17 	ldw	r2,-8(fp)
    bef8:	10c00a04 	addi	r3,r2,40
    befc:	e0bfff17 	ldw	r2,-4(fp)
    bf00:	10800217 	ldw	r2,8(r2)
    bf04:	100b883a 	mov	r5,r2
    bf08:	1809883a 	mov	r4,r3
    bf0c:	000c4600 	call	c460 <altera_avalon_jtag_uart_close>
}
    bf10:	e037883a 	mov	sp,fp
    bf14:	dfc00117 	ldw	ra,4(sp)
    bf18:	df000017 	ldw	fp,0(sp)
    bf1c:	dec00204 	addi	sp,sp,8
    bf20:	f800283a 	ret

0000bf24 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    bf24:	defffa04 	addi	sp,sp,-24
    bf28:	dfc00515 	stw	ra,20(sp)
    bf2c:	df000415 	stw	fp,16(sp)
    bf30:	df000404 	addi	fp,sp,16
    bf34:	e13ffd15 	stw	r4,-12(fp)
    bf38:	e17ffe15 	stw	r5,-8(fp)
    bf3c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    bf40:	e0bffd17 	ldw	r2,-12(fp)
    bf44:	10800017 	ldw	r2,0(r2)
    bf48:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    bf4c:	e0bffc17 	ldw	r2,-16(fp)
    bf50:	10800a04 	addi	r2,r2,40
    bf54:	e1bfff17 	ldw	r6,-4(fp)
    bf58:	e17ffe17 	ldw	r5,-8(fp)
    bf5c:	1009883a 	mov	r4,r2
    bf60:	000c4c80 	call	c4c8 <altera_avalon_jtag_uart_ioctl>
}
    bf64:	e037883a 	mov	sp,fp
    bf68:	dfc00117 	ldw	ra,4(sp)
    bf6c:	df000017 	ldw	fp,0(sp)
    bf70:	dec00204 	addi	sp,sp,8
    bf74:	f800283a 	ret

0000bf78 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    bf78:	defff204 	addi	sp,sp,-56
    bf7c:	dfc00d15 	stw	ra,52(sp)
    bf80:	df000c15 	stw	fp,48(sp)
    bf84:	df000c04 	addi	fp,sp,48
    bf88:	e13ff915 	stw	r4,-28(fp)
    bf8c:	e17ffa15 	stw	r5,-24(fp)
    bf90:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
    bf94:	e0bff917 	ldw	r2,-28(fp)
    bf98:	10800c04 	addi	r2,r2,48
    bf9c:	e0bff415 	stw	r2,-48(fp)
    bfa0:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
    bfa4:	e0bff80b 	ldhu	r2,-32(fp)
    bfa8:	e0fff884 	addi	r3,fp,-30
    bfac:	180b883a 	mov	r5,r3
    bfb0:	1009883a 	mov	r4,r2
    bfb4:	00062700 	call	6270 <OSFlagCreate>
    bfb8:	1007883a 	mov	r3,r2
    bfbc:	e0bff417 	ldw	r2,-48(fp)
    bfc0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
    bfc4:	e0bff917 	ldw	r2,-28(fp)
    bfc8:	10800a04 	addi	r2,r2,40
    bfcc:	e0bff515 	stw	r2,-44(fp)
    bfd0:	00800044 	movi	r2,1
    bfd4:	e0bff78d 	sth	r2,-34(fp)
    bfd8:	e0bff78b 	ldhu	r2,-34(fp)
    bfdc:	1009883a 	mov	r4,r2
    bfe0:	0008f840 	call	8f84 <OSSemCreate>
    bfe4:	1007883a 	mov	r3,r2
    bfe8:	e0bff517 	ldw	r2,-44(fp)
    bfec:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
    bff0:	e0bff917 	ldw	r2,-28(fp)
    bff4:	10800b04 	addi	r2,r2,44
    bff8:	e0bff615 	stw	r2,-40(fp)
    bffc:	00800044 	movi	r2,1
    c000:	e0bff70d 	sth	r2,-36(fp)
    c004:	e0bff70b 	ldhu	r2,-36(fp)
    c008:	1009883a 	mov	r4,r2
    c00c:	0008f840 	call	8f84 <OSSemCreate>
    c010:	1007883a 	mov	r3,r2
    c014:	e0bff617 	ldw	r2,-40(fp)
    c018:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c01c:	e0bff917 	ldw	r2,-28(fp)
    c020:	00c00044 	movi	r3,1
    c024:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    c028:	e0bff917 	ldw	r2,-28(fp)
    c02c:	10800017 	ldw	r2,0(r2)
    c030:	10800104 	addi	r2,r2,4
    c034:	1007883a 	mov	r3,r2
    c038:	e0bff917 	ldw	r2,-28(fp)
    c03c:	10800817 	ldw	r2,32(r2)
    c040:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    c044:	e0bffb17 	ldw	r2,-20(fp)
    c048:	01800074 	movhi	r6,1
    c04c:	31b02d04 	addi	r6,r6,-16204
    c050:	e17ff917 	ldw	r5,-28(fp)
    c054:	1009883a 	mov	r4,r2
    c058:	000e3d80 	call	e3d8 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    c05c:	e0bff917 	ldw	r2,-28(fp)
    c060:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    c064:	e0bff917 	ldw	r2,-28(fp)
    c068:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    c06c:	d0e80817 	ldw	r3,-24544(gp)
    c070:	e1fff917 	ldw	r7,-28(fp)
    c074:	01800074 	movhi	r6,1
    c078:	31b0d704 	addi	r6,r6,-15524
    c07c:	180b883a 	mov	r5,r3
    c080:	1009883a 	mov	r4,r2
    c084:	000dee80 	call	dee8 <alt_alarm_start>
    c088:	1000040e 	bge	r2,zero,c09c <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    c08c:	e0fff917 	ldw	r3,-28(fp)
    c090:	00a00034 	movhi	r2,32768
    c094:	10bfffc4 	addi	r2,r2,-1
    c098:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    c09c:	0001883a 	nop
    c0a0:	e037883a 	mov	sp,fp
    c0a4:	dfc00117 	ldw	ra,4(sp)
    c0a8:	df000017 	ldw	fp,0(sp)
    c0ac:	dec00204 	addi	sp,sp,8
    c0b0:	f800283a 	ret

0000c0b4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    c0b4:	defff104 	addi	sp,sp,-60
    c0b8:	dfc00e15 	stw	ra,56(sp)
    c0bc:	df000d15 	stw	fp,52(sp)
    c0c0:	df000d04 	addi	fp,sp,52
    c0c4:	e13ffe15 	stw	r4,-8(fp)
    c0c8:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    c0cc:	e0bffe17 	ldw	r2,-8(fp)
    c0d0:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
    c0d4:	e0bff517 	ldw	r2,-44(fp)
    c0d8:	10800017 	ldw	r2,0(r2)
    c0dc:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c0e0:	e0bff617 	ldw	r2,-40(fp)
    c0e4:	10800104 	addi	r2,r2,4
    c0e8:	10800037 	ldwio	r2,0(r2)
    c0ec:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    c0f0:	e0bff717 	ldw	r2,-36(fp)
    c0f4:	1080c00c 	andi	r2,r2,768
    c0f8:	10009126 	beq	r2,zero,c340 <altera_avalon_jtag_uart_irq+0x28c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    c0fc:	e0bff717 	ldw	r2,-36(fp)
    c100:	1080400c 	andi	r2,r2,256
    c104:	10004726 	beq	r2,zero,c224 <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    c108:	00800074 	movhi	r2,1
    c10c:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c110:	e0bff517 	ldw	r2,-44(fp)
    c114:	10800d17 	ldw	r2,52(r2)
    c118:	10800044 	addi	r2,r2,1
    c11c:	1081ffcc 	andi	r2,r2,2047
    c120:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
    c124:	e0bff517 	ldw	r2,-44(fp)
    c128:	10c00e17 	ldw	r3,56(r2)
    c12c:	e0bff817 	ldw	r2,-32(fp)
    c130:	18802726 	beq	r3,r2,c1d0 <altera_avalon_jtag_uart_irq+0x11c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    c134:	e0bff617 	ldw	r2,-40(fp)
    c138:	10800037 	ldwio	r2,0(r2)
    c13c:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    c140:	e0bff317 	ldw	r2,-52(fp)
    c144:	10a0000c 	andi	r2,r2,32768
    c148:	10002326 	beq	r2,zero,c1d8 <altera_avalon_jtag_uart_irq+0x124>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    c14c:	e0bff517 	ldw	r2,-44(fp)
    c150:	10800d17 	ldw	r2,52(r2)
    c154:	e0fff317 	ldw	r3,-52(fp)
    c158:	1809883a 	mov	r4,r3
    c15c:	e0fff517 	ldw	r3,-44(fp)
    c160:	1885883a 	add	r2,r3,r2
    c164:	10801104 	addi	r2,r2,68
    c168:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c16c:	e0bff517 	ldw	r2,-44(fp)
    c170:	10800d17 	ldw	r2,52(r2)
    c174:	10800044 	addi	r2,r2,1
    c178:	10c1ffcc 	andi	r3,r2,2047
    c17c:	e0bff517 	ldw	r2,-44(fp)
    c180:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
    c184:	e0bff517 	ldw	r2,-44(fp)
    c188:	10800c17 	ldw	r2,48(r2)
    c18c:	e0bffa15 	stw	r2,-24(fp)
    c190:	00800044 	movi	r2,1
    c194:	e0bffb0d 	sth	r2,-20(fp)
    c198:	00800044 	movi	r2,1
    c19c:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    c1a0:	d0a7f343 	ldbu	r2,-24627(gp)
    c1a4:	10803fcc 	andi	r2,r2,255
    c1a8:	103fd926 	beq	r2,zero,c110 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c110>
  {
    OSFlagPost (group, flags, opt, &err);
    c1ac:	e0bffb0b 	ldhu	r2,-20(fp)
    c1b0:	e0fffb83 	ldbu	r3,-18(fp)
    c1b4:	e13ffcc4 	addi	r4,fp,-13
    c1b8:	200f883a 	mov	r7,r4
    c1bc:	180d883a 	mov	r6,r3
    c1c0:	100b883a 	mov	r5,r2
    c1c4:	e13ffa17 	ldw	r4,-24(fp)
    c1c8:	0006e4c0 	call	6e4c <OSFlagPost>
      }
    c1cc:	003fd006 	br	c110 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c110>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    c1d0:	0001883a 	nop
    c1d4:	00000106 	br	c1dc <altera_avalon_jtag_uart_irq+0x128>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    c1d8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    c1dc:	e0bff317 	ldw	r2,-52(fp)
    c1e0:	10bfffec 	andhi	r2,r2,65535
    c1e4:	10000f26 	beq	r2,zero,c224 <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c1e8:	e0bff517 	ldw	r2,-44(fp)
    c1ec:	10c00817 	ldw	r3,32(r2)
    c1f0:	00bfff84 	movi	r2,-2
    c1f4:	1886703a 	and	r3,r3,r2
    c1f8:	e0bff517 	ldw	r2,-44(fp)
    c1fc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    c200:	e0bff617 	ldw	r2,-40(fp)
    c204:	10800104 	addi	r2,r2,4
    c208:	1007883a 	mov	r3,r2
    c20c:	e0bff517 	ldw	r2,-44(fp)
    c210:	10800817 	ldw	r2,32(r2)
    c214:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c218:	e0bff617 	ldw	r2,-40(fp)
    c21c:	10800104 	addi	r2,r2,4
    c220:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    c224:	e0bff717 	ldw	r2,-36(fp)
    c228:	1080800c 	andi	r2,r2,512
    c22c:	103fac26 	beq	r2,zero,c0e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c0e0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    c230:	e0bff717 	ldw	r2,-36(fp)
    c234:	1004d43a 	srli	r2,r2,16
    c238:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    c23c:	00002606 	br	c2d8 <altera_avalon_jtag_uart_irq+0x224>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    c240:	e0bff617 	ldw	r2,-40(fp)
    c244:	e0fff517 	ldw	r3,-44(fp)
    c248:	18c01017 	ldw	r3,64(r3)
    c24c:	e13ff517 	ldw	r4,-44(fp)
    c250:	20c7883a 	add	r3,r4,r3
    c254:	18c21104 	addi	r3,r3,2116
    c258:	18c00003 	ldbu	r3,0(r3)
    c25c:	18c03fcc 	andi	r3,r3,255
    c260:	18c0201c 	xori	r3,r3,128
    c264:	18ffe004 	addi	r3,r3,-128
    c268:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c26c:	e0bff517 	ldw	r2,-44(fp)
    c270:	10801017 	ldw	r2,64(r2)
    c274:	10800044 	addi	r2,r2,1
    c278:	10c1ffcc 	andi	r3,r2,2047
    c27c:	e0bff517 	ldw	r2,-44(fp)
    c280:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
    c284:	e0bff517 	ldw	r2,-44(fp)
    c288:	10800c17 	ldw	r2,48(r2)
    c28c:	e0bff915 	stw	r2,-28(fp)
    c290:	00800084 	movi	r2,2
    c294:	e0bffc0d 	sth	r2,-16(fp)
    c298:	00800044 	movi	r2,1
    c29c:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    c2a0:	d0a7f343 	ldbu	r2,-24627(gp)
    c2a4:	10803fcc 	andi	r2,r2,255
    c2a8:	10000826 	beq	r2,zero,c2cc <altera_avalon_jtag_uart_irq+0x218>
  {
    OSFlagPost (group, flags, opt, &err);
    c2ac:	e0bffc0b 	ldhu	r2,-16(fp)
    c2b0:	e0fffc83 	ldbu	r3,-14(fp)
    c2b4:	e13ffd04 	addi	r4,fp,-12
    c2b8:	200f883a 	mov	r7,r4
    c2bc:	180d883a 	mov	r6,r3
    c2c0:	100b883a 	mov	r5,r2
    c2c4:	e13ff917 	ldw	r4,-28(fp)
    c2c8:	0006e4c0 	call	6e4c <OSFlagPost>

        space--;
    c2cc:	e0bff417 	ldw	r2,-48(fp)
    c2d0:	10bfffc4 	addi	r2,r2,-1
    c2d4:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    c2d8:	e0bff417 	ldw	r2,-48(fp)
    c2dc:	10000526 	beq	r2,zero,c2f4 <altera_avalon_jtag_uart_irq+0x240>
    c2e0:	e0bff517 	ldw	r2,-44(fp)
    c2e4:	10c01017 	ldw	r3,64(r2)
    c2e8:	e0bff517 	ldw	r2,-44(fp)
    c2ec:	10800f17 	ldw	r2,60(r2)
    c2f0:	18bfd31e 	bne	r3,r2,c240 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c240>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    c2f4:	e0bff417 	ldw	r2,-48(fp)
    c2f8:	103f7926 	beq	r2,zero,c0e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c0e0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c2fc:	e0bff517 	ldw	r2,-44(fp)
    c300:	10c00817 	ldw	r3,32(r2)
    c304:	00bfff44 	movi	r2,-3
    c308:	1886703a 	and	r3,r3,r2
    c30c:	e0bff517 	ldw	r2,-44(fp)
    c310:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c314:	e0bff517 	ldw	r2,-44(fp)
    c318:	10800017 	ldw	r2,0(r2)
    c31c:	10800104 	addi	r2,r2,4
    c320:	1007883a 	mov	r3,r2
    c324:	e0bff517 	ldw	r2,-44(fp)
    c328:	10800817 	ldw	r2,32(r2)
    c32c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c330:	e0bff617 	ldw	r2,-40(fp)
    c334:	10800104 	addi	r2,r2,4
    c338:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    c33c:	003f6806 	br	c0e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c0e0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    c340:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    c344:	0001883a 	nop
    c348:	e037883a 	mov	sp,fp
    c34c:	dfc00117 	ldw	ra,4(sp)
    c350:	df000017 	ldw	fp,0(sp)
    c354:	dec00204 	addi	sp,sp,8
    c358:	f800283a 	ret

0000c35c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    c35c:	defff904 	addi	sp,sp,-28
    c360:	dfc00615 	stw	ra,24(sp)
    c364:	df000515 	stw	fp,20(sp)
    c368:	df000504 	addi	fp,sp,20
    c36c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    c370:	e0bfff17 	ldw	r2,-4(fp)
    c374:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    c378:	e0bffb17 	ldw	r2,-20(fp)
    c37c:	10800017 	ldw	r2,0(r2)
    c380:	10800104 	addi	r2,r2,4
    c384:	10800037 	ldwio	r2,0(r2)
    c388:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    c38c:	e0bffc17 	ldw	r2,-16(fp)
    c390:	1081000c 	andi	r2,r2,1024
    c394:	10000b26 	beq	r2,zero,c3c4 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    c398:	e0bffb17 	ldw	r2,-20(fp)
    c39c:	10800017 	ldw	r2,0(r2)
    c3a0:	10800104 	addi	r2,r2,4
    c3a4:	1007883a 	mov	r3,r2
    c3a8:	e0bffb17 	ldw	r2,-20(fp)
    c3ac:	10800817 	ldw	r2,32(r2)
    c3b0:	10810014 	ori	r2,r2,1024
    c3b4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    c3b8:	e0bffb17 	ldw	r2,-20(fp)
    c3bc:	10000915 	stw	zero,36(r2)
    c3c0:	00002106 	br	c448 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    c3c4:	e0bffb17 	ldw	r2,-20(fp)
    c3c8:	10c00917 	ldw	r3,36(r2)
    c3cc:	00a00034 	movhi	r2,32768
    c3d0:	10bfff04 	addi	r2,r2,-4
    c3d4:	10c01c36 	bltu	r2,r3,c448 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
    c3d8:	e0bffb17 	ldw	r2,-20(fp)
    c3dc:	10800917 	ldw	r2,36(r2)
    c3e0:	10c00044 	addi	r3,r2,1
    c3e4:	e0bffb17 	ldw	r2,-20(fp)
    c3e8:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
    c3ec:	e0bffb17 	ldw	r2,-20(fp)
    c3f0:	10c00917 	ldw	r3,36(r2)
    c3f4:	e0bffb17 	ldw	r2,-20(fp)
    c3f8:	10800117 	ldw	r2,4(r2)
    c3fc:	18801236 	bltu	r3,r2,c448 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    c400:	e0bffb17 	ldw	r2,-20(fp)
    c404:	10800c17 	ldw	r2,48(r2)
    c408:	e0bffd15 	stw	r2,-12(fp)
    c40c:	00800104 	movi	r2,4
    c410:	e0bffe0d 	sth	r2,-8(fp)
    c414:	00800044 	movi	r2,1
    c418:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    c41c:	d0a7f343 	ldbu	r2,-24627(gp)
    c420:	10803fcc 	andi	r2,r2,255
    c424:	10000826 	beq	r2,zero,c448 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
    c428:	e0bffe0b 	ldhu	r2,-8(fp)
    c42c:	e0fffe83 	ldbu	r3,-6(fp)
    c430:	e13ffec4 	addi	r4,fp,-5
    c434:	200f883a 	mov	r7,r4
    c438:	180d883a 	mov	r6,r3
    c43c:	100b883a 	mov	r5,r2
    c440:	e13ffd17 	ldw	r4,-12(fp)
    c444:	0006e4c0 	call	6e4c <OSFlagPost>
    c448:	d0a80817 	ldw	r2,-24544(gp)
    }
  }

  return alt_ticks_per_second();
}
    c44c:	e037883a 	mov	sp,fp
    c450:	dfc00117 	ldw	ra,4(sp)
    c454:	df000017 	ldw	fp,0(sp)
    c458:	dec00204 	addi	sp,sp,8
    c45c:	f800283a 	ret

0000c460 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    c460:	defffd04 	addi	sp,sp,-12
    c464:	df000215 	stw	fp,8(sp)
    c468:	df000204 	addi	fp,sp,8
    c46c:	e13ffe15 	stw	r4,-8(fp)
    c470:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c474:	00000506 	br	c48c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    c478:	e0bfff17 	ldw	r2,-4(fp)
    c47c:	1090000c 	andi	r2,r2,16384
    c480:	10000226 	beq	r2,zero,c48c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    c484:	00bffd44 	movi	r2,-11
    c488:	00000b06 	br	c4b8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c48c:	e0bffe17 	ldw	r2,-8(fp)
    c490:	10c01017 	ldw	r3,64(r2)
    c494:	e0bffe17 	ldw	r2,-8(fp)
    c498:	10800f17 	ldw	r2,60(r2)
    c49c:	18800526 	beq	r3,r2,c4b4 <altera_avalon_jtag_uart_close+0x54>
    c4a0:	e0bffe17 	ldw	r2,-8(fp)
    c4a4:	10c00917 	ldw	r3,36(r2)
    c4a8:	e0bffe17 	ldw	r2,-8(fp)
    c4ac:	10800117 	ldw	r2,4(r2)
    c4b0:	18bff136 	bltu	r3,r2,c478 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c478>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    c4b4:	0005883a 	mov	r2,zero
}
    c4b8:	e037883a 	mov	sp,fp
    c4bc:	df000017 	ldw	fp,0(sp)
    c4c0:	dec00104 	addi	sp,sp,4
    c4c4:	f800283a 	ret

0000c4c8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    c4c8:	defffa04 	addi	sp,sp,-24
    c4cc:	df000515 	stw	fp,20(sp)
    c4d0:	df000504 	addi	fp,sp,20
    c4d4:	e13ffd15 	stw	r4,-12(fp)
    c4d8:	e17ffe15 	stw	r5,-8(fp)
    c4dc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    c4e0:	00bff9c4 	movi	r2,-25
    c4e4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    c4e8:	e0bffe17 	ldw	r2,-8(fp)
    c4ec:	10da8060 	cmpeqi	r3,r2,27137
    c4f0:	1800031e 	bne	r3,zero,c500 <altera_avalon_jtag_uart_ioctl+0x38>
    c4f4:	109a80a0 	cmpeqi	r2,r2,27138
    c4f8:	1000181e 	bne	r2,zero,c55c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    c4fc:	00002906 	br	c5a4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    c500:	e0bffd17 	ldw	r2,-12(fp)
    c504:	10c00117 	ldw	r3,4(r2)
    c508:	00a00034 	movhi	r2,32768
    c50c:	10bfffc4 	addi	r2,r2,-1
    c510:	18802126 	beq	r3,r2,c598 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    c514:	e0bfff17 	ldw	r2,-4(fp)
    c518:	10800017 	ldw	r2,0(r2)
    c51c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    c520:	e0bffc17 	ldw	r2,-16(fp)
    c524:	10800090 	cmplti	r2,r2,2
    c528:	1000061e 	bne	r2,zero,c544 <altera_avalon_jtag_uart_ioctl+0x7c>
    c52c:	e0fffc17 	ldw	r3,-16(fp)
    c530:	00a00034 	movhi	r2,32768
    c534:	10bfffc4 	addi	r2,r2,-1
    c538:	18800226 	beq	r3,r2,c544 <altera_avalon_jtag_uart_ioctl+0x7c>
    c53c:	e0bffc17 	ldw	r2,-16(fp)
    c540:	00000206 	br	c54c <altera_avalon_jtag_uart_ioctl+0x84>
    c544:	00a00034 	movhi	r2,32768
    c548:	10bfff84 	addi	r2,r2,-2
    c54c:	e0fffd17 	ldw	r3,-12(fp)
    c550:	18800115 	stw	r2,4(r3)
      rc = 0;
    c554:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    c558:	00000f06 	br	c598 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    c55c:	e0bffd17 	ldw	r2,-12(fp)
    c560:	10c00117 	ldw	r3,4(r2)
    c564:	00a00034 	movhi	r2,32768
    c568:	10bfffc4 	addi	r2,r2,-1
    c56c:	18800c26 	beq	r3,r2,c5a0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    c570:	e0bffd17 	ldw	r2,-12(fp)
    c574:	10c00917 	ldw	r3,36(r2)
    c578:	e0bffd17 	ldw	r2,-12(fp)
    c57c:	10800117 	ldw	r2,4(r2)
    c580:	1885803a 	cmpltu	r2,r3,r2
    c584:	10c03fcc 	andi	r3,r2,255
    c588:	e0bfff17 	ldw	r2,-4(fp)
    c58c:	10c00015 	stw	r3,0(r2)
      rc = 0;
    c590:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    c594:	00000206 	br	c5a0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    c598:	0001883a 	nop
    c59c:	00000106 	br	c5a4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    c5a0:	0001883a 	nop

  default:
    break;
  }

  return rc;
    c5a4:	e0bffb17 	ldw	r2,-20(fp)
}
    c5a8:	e037883a 	mov	sp,fp
    c5ac:	df000017 	ldw	fp,0(sp)
    c5b0:	dec00104 	addi	sp,sp,4
    c5b4:	f800283a 	ret

0000c5b8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    c5b8:	deffed04 	addi	sp,sp,-76
    c5bc:	dfc01215 	stw	ra,72(sp)
    c5c0:	df001115 	stw	fp,68(sp)
    c5c4:	df001104 	addi	fp,sp,68
    c5c8:	e13ffc15 	stw	r4,-16(fp)
    c5cc:	e17ffd15 	stw	r5,-12(fp)
    c5d0:	e1bffe15 	stw	r6,-8(fp)
    c5d4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    c5d8:	e0bffd17 	ldw	r2,-12(fp)
    c5dc:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
    c5e0:	e0bffc17 	ldw	r2,-16(fp)
    c5e4:	10800a17 	ldw	r2,40(r2)
    c5e8:	e0bff815 	stw	r2,-32(fp)
    c5ec:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
    c5f0:	e0bff90b 	ldhu	r2,-28(fp)
    c5f4:	e0fffb04 	addi	r3,fp,-20
    c5f8:	180d883a 	mov	r6,r3
    c5fc:	100b883a 	mov	r5,r2
    c600:	e13ff817 	ldw	r4,-32(fp)
    c604:	000929c0 	call	929c <OSSemPend>

  while (space > 0)
    c608:	00006106 	br	c790 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    c60c:	e0bffc17 	ldw	r2,-16(fp)
    c610:	10800d17 	ldw	r2,52(r2)
    c614:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
    c618:	e0bffc17 	ldw	r2,-16(fp)
    c61c:	10800e17 	ldw	r2,56(r2)
    c620:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
    c624:	e0fff317 	ldw	r3,-52(fp)
    c628:	e0bff417 	ldw	r2,-48(fp)
    c62c:	18800536 	bltu	r3,r2,c644 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
    c630:	e0fff317 	ldw	r3,-52(fp)
    c634:	e0bff417 	ldw	r2,-48(fp)
    c638:	1885c83a 	sub	r2,r3,r2
    c63c:	e0bff115 	stw	r2,-60(fp)
    c640:	00000406 	br	c654 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    c644:	00c20004 	movi	r3,2048
    c648:	e0bff417 	ldw	r2,-48(fp)
    c64c:	1885c83a 	sub	r2,r3,r2
    c650:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
    c654:	e0bff117 	ldw	r2,-60(fp)
    c658:	10001e26 	beq	r2,zero,c6d4 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
    c65c:	e0fffe17 	ldw	r3,-8(fp)
    c660:	e0bff117 	ldw	r2,-60(fp)
    c664:	1880022e 	bgeu	r3,r2,c670 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
    c668:	e0bffe17 	ldw	r2,-8(fp)
    c66c:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    c670:	e0bffc17 	ldw	r2,-16(fp)
    c674:	10c01104 	addi	r3,r2,68
    c678:	e0bff417 	ldw	r2,-48(fp)
    c67c:	1885883a 	add	r2,r3,r2
    c680:	e1bff117 	ldw	r6,-60(fp)
    c684:	100b883a 	mov	r5,r2
    c688:	e13ff017 	ldw	r4,-64(fp)
    c68c:	00017e00 	call	17e0 <memcpy>
      ptr   += n;
    c690:	e0fff017 	ldw	r3,-64(fp)
    c694:	e0bff117 	ldw	r2,-60(fp)
    c698:	1885883a 	add	r2,r3,r2
    c69c:	e0bff015 	stw	r2,-64(fp)
      space -= n;
    c6a0:	e0fffe17 	ldw	r3,-8(fp)
    c6a4:	e0bff117 	ldw	r2,-60(fp)
    c6a8:	1885c83a 	sub	r2,r3,r2
    c6ac:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c6b0:	e0fff417 	ldw	r3,-48(fp)
    c6b4:	e0bff117 	ldw	r2,-60(fp)
    c6b8:	1885883a 	add	r2,r3,r2
    c6bc:	10c1ffcc 	andi	r3,r2,2047
    c6c0:	e0bffc17 	ldw	r2,-16(fp)
    c6c4:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
    c6c8:	e0bffe17 	ldw	r2,-8(fp)
    c6cc:	00bfcf16 	blt	zero,r2,c60c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c60c>
    c6d0:	00000106 	br	c6d8 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    c6d4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    c6d8:	e0fff017 	ldw	r3,-64(fp)
    c6dc:	e0bffd17 	ldw	r2,-12(fp)
    c6e0:	18802e1e 	bne	r3,r2,c79c <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    c6e4:	e0bfff17 	ldw	r2,-4(fp)
    c6e8:	1090000c 	andi	r2,r2,16384
    c6ec:	10002d1e 	bne	r2,zero,c7a4 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
    c6f0:	d0a7f343 	ldbu	r2,-24627(gp)
    c6f4:	10803fcc 	andi	r2,r2,255
    c6f8:	10800058 	cmpnei	r2,r2,1
    c6fc:	1000161e 	bne	r2,zero,c758 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
    c700:	e0bffc17 	ldw	r2,-16(fp)
    c704:	10800c17 	ldw	r2,48(r2)
    c708:	e0bff215 	stw	r2,-56(fp)
    c70c:	00800144 	movi	r2,5
    c710:	e0bff98d 	sth	r2,-26(fp)
    c714:	00bfe0c4 	movi	r2,-125
    c718:	e0bffa05 	stb	r2,-24(fp)
    c71c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    c720:	d0a7f343 	ldbu	r2,-24627(gp)
    c724:	10803fcc 	andi	r2,r2,255
    c728:	10001526 	beq	r2,zero,c780 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    c72c:	e0fff98b 	ldhu	r3,-26(fp)
    c730:	e13ffa03 	ldbu	r4,-24(fp)
    c734:	e17ffa8b 	ldhu	r5,-22(fp)
    c738:	e0bffb44 	addi	r2,fp,-19
    c73c:	d8800015 	stw	r2,0(sp)
    c740:	280f883a 	mov	r7,r5
    c744:	200d883a 	mov	r6,r4
    c748:	180b883a 	mov	r5,r3
    c74c:	e13ff217 	ldw	r4,-56(fp)
    c750:	00068340 	call	6834 <OSFlagPend>
    c754:	00000a06 	br	c780 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    c758:	0001883a 	nop
    c75c:	e0bffc17 	ldw	r2,-16(fp)
    c760:	10c00d17 	ldw	r3,52(r2)
    c764:	e0bff317 	ldw	r2,-52(fp)
    c768:	1880051e 	bne	r3,r2,c780 <altera_avalon_jtag_uart_read+0x1c8>
    c76c:	e0bffc17 	ldw	r2,-16(fp)
    c770:	10c00917 	ldw	r3,36(r2)
    c774:	e0bffc17 	ldw	r2,-16(fp)
    c778:	10800117 	ldw	r2,4(r2)
    c77c:	18bff736 	bltu	r3,r2,c75c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c75c>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    c780:	e0bffc17 	ldw	r2,-16(fp)
    c784:	10c00d17 	ldw	r3,52(r2)
    c788:	e0bff317 	ldw	r2,-52(fp)
    c78c:	18800726 	beq	r3,r2,c7ac <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    c790:	e0bffe17 	ldw	r2,-8(fp)
    c794:	00bf9d16 	blt	zero,r2,c60c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c60c>
    c798:	00000506 	br	c7b0 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    c79c:	0001883a 	nop
    c7a0:	00000306 	br	c7b0 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    c7a4:	0001883a 	nop
    c7a8:	00000106 	br	c7b0 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    c7ac:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
    c7b0:	e0bffc17 	ldw	r2,-16(fp)
    c7b4:	10800a17 	ldw	r2,40(r2)
    c7b8:	1009883a 	mov	r4,r2
    c7bc:	00096140 	call	9614 <OSSemPost>

  if (ptr != buffer)
    c7c0:	e0fff017 	ldw	r3,-64(fp)
    c7c4:	e0bffd17 	ldw	r2,-12(fp)
    c7c8:	18801826 	beq	r3,r2,c82c <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c7cc:	0005303a 	rdctl	r2,status
    c7d0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c7d4:	e0fff717 	ldw	r3,-36(fp)
    c7d8:	00bfff84 	movi	r2,-2
    c7dc:	1884703a 	and	r2,r3,r2
    c7e0:	1001703a 	wrctl	status,r2
  
  return context;
    c7e4:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    c7e8:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c7ec:	e0bffc17 	ldw	r2,-16(fp)
    c7f0:	10800817 	ldw	r2,32(r2)
    c7f4:	10c00054 	ori	r3,r2,1
    c7f8:	e0bffc17 	ldw	r2,-16(fp)
    c7fc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c800:	e0bffc17 	ldw	r2,-16(fp)
    c804:	10800017 	ldw	r2,0(r2)
    c808:	10800104 	addi	r2,r2,4
    c80c:	1007883a 	mov	r3,r2
    c810:	e0bffc17 	ldw	r2,-16(fp)
    c814:	10800817 	ldw	r2,32(r2)
    c818:	18800035 	stwio	r2,0(r3)
    c81c:	e0bff617 	ldw	r2,-40(fp)
    c820:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c824:	e0bff517 	ldw	r2,-44(fp)
    c828:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    c82c:	e0fff017 	ldw	r3,-64(fp)
    c830:	e0bffd17 	ldw	r2,-12(fp)
    c834:	18800426 	beq	r3,r2,c848 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
    c838:	e0fff017 	ldw	r3,-64(fp)
    c83c:	e0bffd17 	ldw	r2,-12(fp)
    c840:	1885c83a 	sub	r2,r3,r2
    c844:	00000606 	br	c860 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
    c848:	e0bfff17 	ldw	r2,-4(fp)
    c84c:	1090000c 	andi	r2,r2,16384
    c850:	10000226 	beq	r2,zero,c85c <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
    c854:	00bffd44 	movi	r2,-11
    c858:	00000106 	br	c860 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
    c85c:	00bffec4 	movi	r2,-5
}
    c860:	e037883a 	mov	sp,fp
    c864:	dfc00117 	ldw	ra,4(sp)
    c868:	df000017 	ldw	fp,0(sp)
    c86c:	dec00204 	addi	sp,sp,8
    c870:	f800283a 	ret

0000c874 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    c874:	deffed04 	addi	sp,sp,-76
    c878:	dfc01215 	stw	ra,72(sp)
    c87c:	df001115 	stw	fp,68(sp)
    c880:	df001104 	addi	fp,sp,68
    c884:	e13ffc15 	stw	r4,-16(fp)
    c888:	e17ffd15 	stw	r5,-12(fp)
    c88c:	e1bffe15 	stw	r6,-8(fp)
    c890:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    c894:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    c898:	e0bffd17 	ldw	r2,-12(fp)
    c89c:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
    c8a0:	e0bffc17 	ldw	r2,-16(fp)
    c8a4:	10800b17 	ldw	r2,44(r2)
    c8a8:	e0bff815 	stw	r2,-32(fp)
    c8ac:	e03ff90d 	sth	zero,-28(fp)
    c8b0:	e0bff90b 	ldhu	r2,-28(fp)
    c8b4:	e0fffb44 	addi	r3,fp,-19
    c8b8:	180d883a 	mov	r6,r3
    c8bc:	100b883a 	mov	r5,r2
    c8c0:	e13ff817 	ldw	r4,-32(fp)
    c8c4:	000929c0 	call	929c <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c8c8:	00003706 	br	c9a8 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    c8cc:	e0bffc17 	ldw	r2,-16(fp)
    c8d0:	10800f17 	ldw	r2,60(r2)
    c8d4:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
    c8d8:	e0bffc17 	ldw	r2,-16(fp)
    c8dc:	10801017 	ldw	r2,64(r2)
    c8e0:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
    c8e4:	e0fff417 	ldw	r3,-48(fp)
    c8e8:	e0bff017 	ldw	r2,-64(fp)
    c8ec:	1880062e 	bgeu	r3,r2,c908 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
    c8f0:	e0fff017 	ldw	r3,-64(fp)
    c8f4:	e0bff417 	ldw	r2,-48(fp)
    c8f8:	1885c83a 	sub	r2,r3,r2
    c8fc:	10bfffc4 	addi	r2,r2,-1
    c900:	e0bff115 	stw	r2,-60(fp)
    c904:	00000b06 	br	c934 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
    c908:	e0bff017 	ldw	r2,-64(fp)
    c90c:	10000526 	beq	r2,zero,c924 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    c910:	00c20004 	movi	r3,2048
    c914:	e0bff417 	ldw	r2,-48(fp)
    c918:	1885c83a 	sub	r2,r3,r2
    c91c:	e0bff115 	stw	r2,-60(fp)
    c920:	00000406 	br	c934 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    c924:	00c1ffc4 	movi	r3,2047
    c928:	e0bff417 	ldw	r2,-48(fp)
    c92c:	1885c83a 	sub	r2,r3,r2
    c930:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
    c934:	e0bff117 	ldw	r2,-60(fp)
    c938:	10001e26 	beq	r2,zero,c9b4 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
    c93c:	e0fffe17 	ldw	r3,-8(fp)
    c940:	e0bff117 	ldw	r2,-60(fp)
    c944:	1880022e 	bgeu	r3,r2,c950 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
    c948:	e0bffe17 	ldw	r2,-8(fp)
    c94c:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    c950:	e0bffc17 	ldw	r2,-16(fp)
    c954:	10c21104 	addi	r3,r2,2116
    c958:	e0bff417 	ldw	r2,-48(fp)
    c95c:	1885883a 	add	r2,r3,r2
    c960:	e1bff117 	ldw	r6,-60(fp)
    c964:	e17ffd17 	ldw	r5,-12(fp)
    c968:	1009883a 	mov	r4,r2
    c96c:	00017e00 	call	17e0 <memcpy>
      ptr   += n;
    c970:	e0fffd17 	ldw	r3,-12(fp)
    c974:	e0bff117 	ldw	r2,-60(fp)
    c978:	1885883a 	add	r2,r3,r2
    c97c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    c980:	e0fffe17 	ldw	r3,-8(fp)
    c984:	e0bff117 	ldw	r2,-60(fp)
    c988:	1885c83a 	sub	r2,r3,r2
    c98c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c990:	e0fff417 	ldw	r3,-48(fp)
    c994:	e0bff117 	ldw	r2,-60(fp)
    c998:	1885883a 	add	r2,r3,r2
    c99c:	10c1ffcc 	andi	r3,r2,2047
    c9a0:	e0bffc17 	ldw	r2,-16(fp)
    c9a4:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c9a8:	e0bffe17 	ldw	r2,-8(fp)
    c9ac:	00bfc716 	blt	zero,r2,c8cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c8cc>
    c9b0:	00000106 	br	c9b8 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    c9b4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c9b8:	0005303a 	rdctl	r2,status
    c9bc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c9c0:	e0fff717 	ldw	r3,-36(fp)
    c9c4:	00bfff84 	movi	r2,-2
    c9c8:	1884703a 	and	r2,r3,r2
    c9cc:	1001703a 	wrctl	status,r2
  
  return context;
    c9d0:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    c9d4:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c9d8:	e0bffc17 	ldw	r2,-16(fp)
    c9dc:	10800817 	ldw	r2,32(r2)
    c9e0:	10c00094 	ori	r3,r2,2
    c9e4:	e0bffc17 	ldw	r2,-16(fp)
    c9e8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c9ec:	e0bffc17 	ldw	r2,-16(fp)
    c9f0:	10800017 	ldw	r2,0(r2)
    c9f4:	10800104 	addi	r2,r2,4
    c9f8:	1007883a 	mov	r3,r2
    c9fc:	e0bffc17 	ldw	r2,-16(fp)
    ca00:	10800817 	ldw	r2,32(r2)
    ca04:	18800035 	stwio	r2,0(r3)
    ca08:	e0bff617 	ldw	r2,-40(fp)
    ca0c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ca10:	e0bff317 	ldw	r2,-52(fp)
    ca14:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    ca18:	e0bffe17 	ldw	r2,-8(fp)
    ca1c:	00802a0e 	bge	zero,r2,cac8 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
    ca20:	e0bfff17 	ldw	r2,-4(fp)
    ca24:	1090000c 	andi	r2,r2,16384
    ca28:	10002a1e 	bne	r2,zero,cad4 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
    ca2c:	d0a7f343 	ldbu	r2,-24627(gp)
    ca30:	10803fcc 	andi	r2,r2,255
    ca34:	10800058 	cmpnei	r2,r2,1
    ca38:	1000161e 	bne	r2,zero,ca94 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
    ca3c:	e0bffc17 	ldw	r2,-16(fp)
    ca40:	10800c17 	ldw	r2,48(r2)
    ca44:	e0bff515 	stw	r2,-44(fp)
    ca48:	00800184 	movi	r2,6
    ca4c:	e0bff98d 	sth	r2,-26(fp)
    ca50:	00bfe0c4 	movi	r2,-125
    ca54:	e0bffa05 	stb	r2,-24(fp)
    ca58:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    ca5c:	d0a7f343 	ldbu	r2,-24627(gp)
    ca60:	10803fcc 	andi	r2,r2,255
    ca64:	10001526 	beq	r2,zero,cabc <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    ca68:	e0fff98b 	ldhu	r3,-26(fp)
    ca6c:	e13ffa03 	ldbu	r4,-24(fp)
    ca70:	e17ffa8b 	ldhu	r5,-22(fp)
    ca74:	e0bffb04 	addi	r2,fp,-20
    ca78:	d8800015 	stw	r2,0(sp)
    ca7c:	280f883a 	mov	r7,r5
    ca80:	200d883a 	mov	r6,r4
    ca84:	180b883a 	mov	r5,r3
    ca88:	e13ff517 	ldw	r4,-44(fp)
    ca8c:	00068340 	call	6834 <OSFlagPend>
    ca90:	00000a06 	br	cabc <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    ca94:	0001883a 	nop
    ca98:	e0bffc17 	ldw	r2,-16(fp)
    ca9c:	10c01017 	ldw	r3,64(r2)
    caa0:	e0bff017 	ldw	r2,-64(fp)
    caa4:	1880051e 	bne	r3,r2,cabc <altera_avalon_jtag_uart_write+0x248>
    caa8:	e0bffc17 	ldw	r2,-16(fp)
    caac:	10c00917 	ldw	r3,36(r2)
    cab0:	e0bffc17 	ldw	r2,-16(fp)
    cab4:	10800117 	ldw	r2,4(r2)
    cab8:	18bff736 	bltu	r3,r2,ca98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca98>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    cabc:	e0bffc17 	ldw	r2,-16(fp)
    cac0:	10800917 	ldw	r2,36(r2)
    cac4:	1000051e 	bne	r2,zero,cadc <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
    cac8:	e0bffe17 	ldw	r2,-8(fp)
    cacc:	00bfb616 	blt	zero,r2,c9a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c9a8>
    cad0:	00000306 	br	cae0 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    cad4:	0001883a 	nop
    cad8:	00000106 	br	cae0 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    cadc:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
    cae0:	e0bffc17 	ldw	r2,-16(fp)
    cae4:	10800b17 	ldw	r2,44(r2)
    cae8:	1009883a 	mov	r4,r2
    caec:	00096140 	call	9614 <OSSemPost>

  if (ptr != start)
    caf0:	e0fffd17 	ldw	r3,-12(fp)
    caf4:	e0bff217 	ldw	r2,-56(fp)
    caf8:	18800426 	beq	r3,r2,cb0c <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
    cafc:	e0fffd17 	ldw	r3,-12(fp)
    cb00:	e0bff217 	ldw	r2,-56(fp)
    cb04:	1885c83a 	sub	r2,r3,r2
    cb08:	00000606 	br	cb24 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
    cb0c:	e0bfff17 	ldw	r2,-4(fp)
    cb10:	1090000c 	andi	r2,r2,16384
    cb14:	10000226 	beq	r2,zero,cb20 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
    cb18:	00bffd44 	movi	r2,-11
    cb1c:	00000106 	br	cb24 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    cb20:	00bffec4 	movi	r2,-5
}
    cb24:	e037883a 	mov	sp,fp
    cb28:	dfc00117 	ldw	ra,4(sp)
    cb2c:	df000017 	ldw	fp,0(sp)
    cb30:	dec00204 	addi	sp,sp,8
    cb34:	f800283a 	ret

0000cb38 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    cb38:	defff904 	addi	sp,sp,-28
    cb3c:	dfc00615 	stw	ra,24(sp)
    cb40:	df000515 	stw	fp,20(sp)
    cb44:	df000504 	addi	fp,sp,20
    cb48:	e13ffe15 	stw	r4,-8(fp)
    cb4c:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    cb50:	0007883a 	mov	r3,zero
    cb54:	e0bffe17 	ldw	r2,-8(fp)
    cb58:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    cb5c:	e0bffe17 	ldw	r2,-8(fp)
    cb60:	10800104 	addi	r2,r2,4
    cb64:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cb68:	0005303a 	rdctl	r2,status
    cb6c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cb70:	e0fffc17 	ldw	r3,-16(fp)
    cb74:	00bfff84 	movi	r2,-2
    cb78:	1884703a 	and	r2,r3,r2
    cb7c:	1001703a 	wrctl	status,r2
  
  return context;
    cb80:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    cb84:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    cb88:	000e8480 	call	e848 <alt_tick>
    cb8c:	e0bffb17 	ldw	r2,-20(fp)
    cb90:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cb94:	e0bffd17 	ldw	r2,-12(fp)
    cb98:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    cb9c:	0001883a 	nop
    cba0:	e037883a 	mov	sp,fp
    cba4:	dfc00117 	ldw	ra,4(sp)
    cba8:	df000017 	ldw	fp,0(sp)
    cbac:	dec00204 	addi	sp,sp,8
    cbb0:	f800283a 	ret

0000cbb4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    cbb4:	defff904 	addi	sp,sp,-28
    cbb8:	dfc00615 	stw	ra,24(sp)
    cbbc:	df000515 	stw	fp,20(sp)
    cbc0:	df000504 	addi	fp,sp,20
    cbc4:	e13ffc15 	stw	r4,-16(fp)
    cbc8:	e17ffd15 	stw	r5,-12(fp)
    cbcc:	e1bffe15 	stw	r6,-8(fp)
    cbd0:	e1ffff15 	stw	r7,-4(fp)
    cbd4:	e0bfff17 	ldw	r2,-4(fp)
    cbd8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    cbdc:	d0a80817 	ldw	r2,-24544(gp)
    cbe0:	1000021e 	bne	r2,zero,cbec <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    cbe4:	e0bffb17 	ldw	r2,-20(fp)
    cbe8:	d0a80815 	stw	r2,-24544(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    cbec:	e0bffc17 	ldw	r2,-16(fp)
    cbf0:	10800104 	addi	r2,r2,4
    cbf4:	00c001c4 	movi	r3,7
    cbf8:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    cbfc:	01800074 	movhi	r6,1
    cc00:	31b2ce04 	addi	r6,r6,-13512
    cc04:	e17ffc17 	ldw	r5,-16(fp)
    cc08:	e13ffe17 	ldw	r4,-8(fp)
    cc0c:	000e3d80 	call	e3d8 <alt_irq_register>
#endif  
}
    cc10:	0001883a 	nop
    cc14:	e037883a 	mov	sp,fp
    cc18:	dfc00117 	ldw	ra,4(sp)
    cc1c:	df000017 	ldw	fp,0(sp)
    cc20:	dec00204 	addi	sp,sp,8
    cc24:	f800283a 	ret

0000cc28 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    cc28:	defffc04 	addi	sp,sp,-16
    cc2c:	df000315 	stw	fp,12(sp)
    cc30:	df000304 	addi	fp,sp,12
    cc34:	e13ffe15 	stw	r4,-8(fp)
    cc38:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    cc3c:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    cc40:	e0bfff17 	ldw	r2,-4(fp)
    cc44:	1000061e 	bne	r2,zero,cc60 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
    cc48:	e0bffe17 	ldw	r2,-8(fp)
    cc4c:	1007883a 	mov	r3,r2
    cc50:	e0bffd03 	ldbu	r2,-12(fp)
    cc54:	1884b03a 	or	r2,r3,r2
    cc58:	e0bffd05 	stb	r2,-12(fp)
    cc5c:	00000806 	br	cc80 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
    cc60:	e0bffe17 	ldw	r2,-8(fp)
    cc64:	1007883a 	mov	r3,r2
    cc68:	e0bffd03 	ldbu	r2,-12(fp)
    cc6c:	1884b03a 	or	r2,r3,r2
    cc70:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    cc74:	e0bffd03 	ldbu	r2,-12(fp)
    cc78:	10801014 	ori	r2,r2,64
    cc7c:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    cc80:	e0fffd03 	ldbu	r3,-12(fp)
    cc84:	00bfe004 	movi	r2,-128
    cc88:	1884b03a 	or	r2,r3,r2
}
    cc8c:	e037883a 	mov	sp,fp
    cc90:	df000017 	ldw	fp,0(sp)
    cc94:	dec00104 	addi	sp,sp,4
    cc98:	f800283a 	ret

0000cc9c <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    cc9c:	defffd04 	addi	sp,sp,-12
    cca0:	df000215 	stw	fp,8(sp)
    cca4:	df000204 	addi	fp,sp,8
    cca8:	e13ffe15 	stw	r4,-8(fp)
    ccac:	2805883a 	mov	r2,r5
    ccb0:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    ccb4:	e0bffe17 	ldw	r2,-8(fp)
    ccb8:	10800a17 	ldw	r2,40(r2)
    ccbc:	1007883a 	mov	r3,r2
    ccc0:	e0bfff03 	ldbu	r2,-4(fp)
    ccc4:	18800025 	stbio	r2,0(r3)
}
    ccc8:	0001883a 	nop
    cccc:	e037883a 	mov	sp,fp
    ccd0:	df000017 	ldw	fp,0(sp)
    ccd4:	dec00104 	addi	sp,sp,4
    ccd8:	f800283a 	ret

0000ccdc <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    ccdc:	defffe04 	addi	sp,sp,-8
    cce0:	df000115 	stw	fp,4(sp)
    cce4:	df000104 	addi	fp,sp,4
    cce8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    ccec:	e0bfff17 	ldw	r2,-4(fp)
    ccf0:	10800a17 	ldw	r2,40(r2)
    ccf4:	1007883a 	mov	r3,r2
    ccf8:	00800044 	movi	r2,1
    ccfc:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    cd00:	0001883a 	nop
    cd04:	e037883a 	mov	sp,fp
    cd08:	df000017 	ldw	fp,0(sp)
    cd0c:	dec00104 	addi	sp,sp,4
    cd10:	f800283a 	ret

0000cd14 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    cd14:	defffc04 	addi	sp,sp,-16
    cd18:	dfc00315 	stw	ra,12(sp)
    cd1c:	df000215 	stw	fp,8(sp)
    cd20:	df000204 	addi	fp,sp,8
    cd24:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    cd28:	d1600604 	addi	r5,gp,-32744
    cd2c:	e13fff17 	ldw	r4,-4(fp)
    cd30:	000e1d40 	call	e1d4 <alt_find_dev>
    cd34:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    cd38:	e0bffe17 	ldw	r2,-8(fp)
}
    cd3c:	e037883a 	mov	sp,fp
    cd40:	dfc00117 	ldw	ra,4(sp)
    cd44:	df000017 	ldw	fp,0(sp)
    cd48:	dec00204 	addi	sp,sp,8
    cd4c:	f800283a 	ret

0000cd50 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    cd50:	defffb04 	addi	sp,sp,-20
    cd54:	df000415 	stw	fp,16(sp)
    cd58:	df000404 	addi	fp,sp,16
    cd5c:	e13ffd15 	stw	r4,-12(fp)
    cd60:	e17ffe15 	stw	r5,-8(fp)
    cd64:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    cd68:	e03ffc15 	stw	zero,-16(fp)
    cd6c:	00000f06 	br	cdac <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    cd70:	e0bffd17 	ldw	r2,-12(fp)
    cd74:	10800a17 	ldw	r2,40(r2)
    cd78:	10800044 	addi	r2,r2,1
    cd7c:	1009883a 	mov	r4,r2
    cd80:	e0fffe17 	ldw	r3,-8(fp)
    cd84:	e0bffc17 	ldw	r2,-16(fp)
    cd88:	1885883a 	add	r2,r3,r2
    cd8c:	10800003 	ldbu	r2,0(r2)
    cd90:	10803fcc 	andi	r2,r2,255
    cd94:	1080201c 	xori	r2,r2,128
    cd98:	10bfe004 	addi	r2,r2,-128
    cd9c:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    cda0:	e0bffc17 	ldw	r2,-16(fp)
    cda4:	10800044 	addi	r2,r2,1
    cda8:	e0bffc15 	stw	r2,-16(fp)
    cdac:	e0fffc17 	ldw	r3,-16(fp)
    cdb0:	e0bfff17 	ldw	r2,-4(fp)
    cdb4:	18bfee36 	bltu	r3,r2,cd70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cd70>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    cdb8:	0001883a 	nop
    cdbc:	e037883a 	mov	sp,fp
    cdc0:	df000017 	ldw	fp,0(sp)
    cdc4:	dec00104 	addi	sp,sp,4
    cdc8:	f800283a 	ret

0000cdcc <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    cdcc:	defffd04 	addi	sp,sp,-12
    cdd0:	df000215 	stw	fp,8(sp)
    cdd4:	df000204 	addi	fp,sp,8
    cdd8:	e13ffe15 	stw	r4,-8(fp)
    cddc:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    cde0:	00000d06 	br	ce18 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    cde4:	e0bffe17 	ldw	r2,-8(fp)
    cde8:	10800a17 	ldw	r2,40(r2)
    cdec:	10800044 	addi	r2,r2,1
    cdf0:	1007883a 	mov	r3,r2
    cdf4:	e0bfff17 	ldw	r2,-4(fp)
    cdf8:	10800003 	ldbu	r2,0(r2)
    cdfc:	10803fcc 	andi	r2,r2,255
    ce00:	1080201c 	xori	r2,r2,128
    ce04:	10bfe004 	addi	r2,r2,-128
    ce08:	18800025 	stbio	r2,0(r3)
		++ptr;
    ce0c:	e0bfff17 	ldw	r2,-4(fp)
    ce10:	10800044 	addi	r2,r2,1
    ce14:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    ce18:	e0bfff17 	ldw	r2,-4(fp)
    ce1c:	10800003 	ldbu	r2,0(r2)
    ce20:	10803fcc 	andi	r2,r2,255
    ce24:	1080201c 	xori	r2,r2,128
    ce28:	10bfe004 	addi	r2,r2,-128
    ce2c:	103fed1e 	bne	r2,zero,cde4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cde4>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    ce30:	0001883a 	nop
    ce34:	e037883a 	mov	sp,fp
    ce38:	df000017 	ldw	fp,0(sp)
    ce3c:	dec00104 	addi	sp,sp,4
    ce40:	f800283a 	ret

0000ce44 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    ce44:	defffb04 	addi	sp,sp,-20
    ce48:	dfc00415 	stw	ra,16(sp)
    ce4c:	df000315 	stw	fp,12(sp)
    ce50:	df000304 	addi	fp,sp,12
    ce54:	e13ffd15 	stw	r4,-12(fp)
    ce58:	e17ffe15 	stw	r5,-8(fp)
    ce5c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    ce60:	e0bffd17 	ldw	r2,-12(fp)
    ce64:	10800017 	ldw	r2,0(r2)
    ce68:	e0ffff17 	ldw	r3,-4(fp)
    ce6c:	180d883a 	mov	r6,r3
    ce70:	e17ffe17 	ldw	r5,-8(fp)
    ce74:	1009883a 	mov	r4,r2
    ce78:	000cd500 	call	cd50 <alt_up_character_lcd_write>
	return 0;
    ce7c:	0005883a 	mov	r2,zero
}
    ce80:	e037883a 	mov	sp,fp
    ce84:	dfc00117 	ldw	ra,4(sp)
    ce88:	df000017 	ldw	fp,0(sp)
    ce8c:	dec00204 	addi	sp,sp,8
    ce90:	f800283a 	ret

0000ce94 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    ce94:	defffa04 	addi	sp,sp,-24
    ce98:	dfc00515 	stw	ra,20(sp)
    ce9c:	df000415 	stw	fp,16(sp)
    cea0:	df000404 	addi	fp,sp,16
    cea4:	e13ffd15 	stw	r4,-12(fp)
    cea8:	e17ffe15 	stw	r5,-8(fp)
    ceac:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    ceb0:	e0bffe17 	ldw	r2,-8(fp)
    ceb4:	10800a28 	cmpgeui	r2,r2,40
    ceb8:	1000031e 	bne	r2,zero,cec8 <alt_up_character_lcd_set_cursor_pos+0x34>
    cebc:	e0bfff17 	ldw	r2,-4(fp)
    cec0:	108000b0 	cmpltui	r2,r2,2
    cec4:	1000021e 	bne	r2,zero,ced0 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
    cec8:	00bfffc4 	movi	r2,-1
    cecc:	00000906 	br	cef4 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    ced0:	e17fff17 	ldw	r5,-4(fp)
    ced4:	e13ffe17 	ldw	r4,-8(fp)
    ced8:	000cc280 	call	cc28 <get_DDRAM_addr>
    cedc:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    cee0:	e0bffc03 	ldbu	r2,-16(fp)
    cee4:	100b883a 	mov	r5,r2
    cee8:	e13ffd17 	ldw	r4,-12(fp)
    ceec:	000cc9c0 	call	cc9c <alt_up_character_lcd_send_cmd>
	return 0;
    cef0:	0005883a 	mov	r2,zero
}
    cef4:	e037883a 	mov	sp,fp
    cef8:	dfc00117 	ldw	ra,4(sp)
    cefc:	df000017 	ldw	fp,0(sp)
    cf00:	dec00204 	addi	sp,sp,8
    cf04:	f800283a 	ret

0000cf08 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    cf08:	defffb04 	addi	sp,sp,-20
    cf0c:	dfc00415 	stw	ra,16(sp)
    cf10:	df000315 	stw	fp,12(sp)
    cf14:	df000304 	addi	fp,sp,12
    cf18:	e13ffe15 	stw	r4,-8(fp)
    cf1c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
    cf20:	e0bfff17 	ldw	r2,-4(fp)
    cf24:	10001526 	beq	r2,zero,cf7c <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    cf28:	e0bfff17 	ldw	r2,-4(fp)
    cf2c:	0080020e 	bge	zero,r2,cf38 <alt_up_character_lcd_shift_cursor+0x30>
    cf30:	00800504 	movi	r2,20
    cf34:	00000106 	br	cf3c <alt_up_character_lcd_shift_cursor+0x34>
    cf38:	00800404 	movi	r2,16
    cf3c:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    cf40:	e0bfff17 	ldw	r2,-4(fp)
    cf44:	1000010e 	bge	r2,zero,cf4c <alt_up_character_lcd_shift_cursor+0x44>
    cf48:	0085c83a 	sub	r2,zero,r2
    cf4c:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    cf50:	00000406 	br	cf64 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    cf54:	e0bffd43 	ldbu	r2,-11(fp)
    cf58:	100b883a 	mov	r5,r2
    cf5c:	e13ffe17 	ldw	r4,-8(fp)
    cf60:	000cc9c0 	call	cc9c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    cf64:	e0bffd03 	ldbu	r2,-12(fp)
    cf68:	10ffffc4 	addi	r3,r2,-1
    cf6c:	e0fffd05 	stb	r3,-12(fp)
    cf70:	10803fcc 	andi	r2,r2,255
    cf74:	103ff71e 	bne	r2,zero,cf54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf54>
    cf78:	00000106 	br	cf80 <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
    cf7c:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    cf80:	e037883a 	mov	sp,fp
    cf84:	dfc00117 	ldw	ra,4(sp)
    cf88:	df000017 	ldw	fp,0(sp)
    cf8c:	dec00204 	addi	sp,sp,8
    cf90:	f800283a 	ret

0000cf94 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    cf94:	defffb04 	addi	sp,sp,-20
    cf98:	dfc00415 	stw	ra,16(sp)
    cf9c:	df000315 	stw	fp,12(sp)
    cfa0:	df000304 	addi	fp,sp,12
    cfa4:	e13ffe15 	stw	r4,-8(fp)
    cfa8:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
    cfac:	e0bfff17 	ldw	r2,-4(fp)
    cfb0:	10001526 	beq	r2,zero,d008 <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    cfb4:	e0bfff17 	ldw	r2,-4(fp)
    cfb8:	0080020e 	bge	zero,r2,cfc4 <alt_up_character_lcd_shift_display+0x30>
    cfbc:	00800704 	movi	r2,28
    cfc0:	00000106 	br	cfc8 <alt_up_character_lcd_shift_display+0x34>
    cfc4:	00800604 	movi	r2,24
    cfc8:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    cfcc:	e0bfff17 	ldw	r2,-4(fp)
    cfd0:	1000010e 	bge	r2,zero,cfd8 <alt_up_character_lcd_shift_display+0x44>
    cfd4:	0085c83a 	sub	r2,zero,r2
    cfd8:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    cfdc:	00000406 	br	cff0 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    cfe0:	e0bffd43 	ldbu	r2,-11(fp)
    cfe4:	100b883a 	mov	r5,r2
    cfe8:	e13ffe17 	ldw	r4,-8(fp)
    cfec:	000cc9c0 	call	cc9c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    cff0:	e0bffd03 	ldbu	r2,-12(fp)
    cff4:	10ffffc4 	addi	r3,r2,-1
    cff8:	e0fffd05 	stb	r3,-12(fp)
    cffc:	10803fcc 	andi	r2,r2,255
    d000:	103ff71e 	bne	r2,zero,cfe0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cfe0>
    d004:	00000106 	br	d00c <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
    d008:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    d00c:	e037883a 	mov	sp,fp
    d010:	dfc00117 	ldw	ra,4(sp)
    d014:	df000017 	ldw	fp,0(sp)
    d018:	dec00204 	addi	sp,sp,8
    d01c:	f800283a 	ret

0000d020 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    d020:	defffa04 	addi	sp,sp,-24
    d024:	dfc00515 	stw	ra,20(sp)
    d028:	df000415 	stw	fp,16(sp)
    d02c:	df000404 	addi	fp,sp,16
    d030:	e13ffd15 	stw	r4,-12(fp)
    d034:	e17ffe15 	stw	r5,-8(fp)
    d038:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    d03c:	e0bffe17 	ldw	r2,-8(fp)
    d040:	10800a28 	cmpgeui	r2,r2,40
    d044:	1000031e 	bne	r2,zero,d054 <alt_up_character_lcd_erase_pos+0x34>
    d048:	e0bfff17 	ldw	r2,-4(fp)
    d04c:	108000b0 	cmpltui	r2,r2,2
    d050:	1000021e 	bne	r2,zero,d05c <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
    d054:	00bfffc4 	movi	r2,-1
    d058:	00000f06 	br	d098 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    d05c:	e17fff17 	ldw	r5,-4(fp)
    d060:	e13ffe17 	ldw	r4,-8(fp)
    d064:	000cc280 	call	cc28 <get_DDRAM_addr>
    d068:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    d06c:	e0bffc03 	ldbu	r2,-16(fp)
    d070:	100b883a 	mov	r5,r2
    d074:	e13ffd17 	ldw	r4,-12(fp)
    d078:	000cc9c0 	call	cc9c <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    d07c:	e0bffd17 	ldw	r2,-12(fp)
    d080:	10800a17 	ldw	r2,40(r2)
    d084:	10800044 	addi	r2,r2,1
    d088:	1007883a 	mov	r3,r2
    d08c:	00800084 	movi	r2,2
    d090:	18800025 	stbio	r2,0(r3)
	return 0;
    d094:	0005883a 	mov	r2,zero
}
    d098:	e037883a 	mov	sp,fp
    d09c:	dfc00117 	ldw	ra,4(sp)
    d0a0:	df000017 	ldw	fp,0(sp)
    d0a4:	dec00204 	addi	sp,sp,8
    d0a8:	f800283a 	ret

0000d0ac <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    d0ac:	defffd04 	addi	sp,sp,-12
    d0b0:	dfc00215 	stw	ra,8(sp)
    d0b4:	df000115 	stw	fp,4(sp)
    d0b8:	df000104 	addi	fp,sp,4
    d0bc:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    d0c0:	01400304 	movi	r5,12
    d0c4:	e13fff17 	ldw	r4,-4(fp)
    d0c8:	000cc9c0 	call	cc9c <alt_up_character_lcd_send_cmd>
}
    d0cc:	0001883a 	nop
    d0d0:	e037883a 	mov	sp,fp
    d0d4:	dfc00117 	ldw	ra,4(sp)
    d0d8:	df000017 	ldw	fp,0(sp)
    d0dc:	dec00204 	addi	sp,sp,8
    d0e0:	f800283a 	ret

0000d0e4 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    d0e4:	defffd04 	addi	sp,sp,-12
    d0e8:	dfc00215 	stw	ra,8(sp)
    d0ec:	df000115 	stw	fp,4(sp)
    d0f0:	df000104 	addi	fp,sp,4
    d0f4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    d0f8:	014003c4 	movi	r5,15
    d0fc:	e13fff17 	ldw	r4,-4(fp)
    d100:	000cc9c0 	call	cc9c <alt_up_character_lcd_send_cmd>
}
    d104:	0001883a 	nop
    d108:	e037883a 	mov	sp,fp
    d10c:	dfc00117 	ldw	ra,4(sp)
    d110:	df000017 	ldw	fp,0(sp)
    d114:	dec00204 	addi	sp,sp,8
    d118:	f800283a 	ret

0000d11c <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    d11c:	defffd04 	addi	sp,sp,-12
    d120:	df000215 	stw	fp,8(sp)
    d124:	df000204 	addi	fp,sp,8
    d128:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    d12c:	e0bfff17 	ldw	r2,-4(fp)
    d130:	10800a17 	ldw	r2,40(r2)
    d134:	10800104 	addi	r2,r2,4
    d138:	10800037 	ldwio	r2,0(r2)
    d13c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    d140:	e0bffe17 	ldw	r2,-8(fp)
    d144:	10800054 	ori	r2,r2,1
    d148:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    d14c:	e0bfff17 	ldw	r2,-4(fp)
    d150:	10800a17 	ldw	r2,40(r2)
    d154:	10800104 	addi	r2,r2,4
    d158:	1007883a 	mov	r3,r2
    d15c:	e0bffe17 	ldw	r2,-8(fp)
    d160:	18800035 	stwio	r2,0(r3)
}
    d164:	0001883a 	nop
    d168:	e037883a 	mov	sp,fp
    d16c:	df000017 	ldw	fp,0(sp)
    d170:	dec00104 	addi	sp,sp,4
    d174:	f800283a 	ret

0000d178 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    d178:	defffd04 	addi	sp,sp,-12
    d17c:	df000215 	stw	fp,8(sp)
    d180:	df000204 	addi	fp,sp,8
    d184:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    d188:	e0bfff17 	ldw	r2,-4(fp)
    d18c:	10800a17 	ldw	r2,40(r2)
    d190:	10800104 	addi	r2,r2,4
    d194:	10800037 	ldwio	r2,0(r2)
    d198:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    d19c:	e0fffe17 	ldw	r3,-8(fp)
    d1a0:	00bfff84 	movi	r2,-2
    d1a4:	1884703a 	and	r2,r3,r2
    d1a8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    d1ac:	e0bfff17 	ldw	r2,-4(fp)
    d1b0:	10800a17 	ldw	r2,40(r2)
    d1b4:	10800104 	addi	r2,r2,4
    d1b8:	1007883a 	mov	r3,r2
    d1bc:	e0bffe17 	ldw	r2,-8(fp)
    d1c0:	18800035 	stwio	r2,0(r3)
}
    d1c4:	0001883a 	nop
    d1c8:	e037883a 	mov	sp,fp
    d1cc:	df000017 	ldw	fp,0(sp)
    d1d0:	dec00104 	addi	sp,sp,4
    d1d4:	f800283a 	ret

0000d1d8 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    d1d8:	defffd04 	addi	sp,sp,-12
    d1dc:	df000215 	stw	fp,8(sp)
    d1e0:	df000204 	addi	fp,sp,8
    d1e4:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    d1e8:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    d1ec:	e0bfff17 	ldw	r2,-4(fp)
    d1f0:	10800a17 	ldw	r2,40(r2)
    d1f4:	10800084 	addi	r2,r2,2
    d1f8:	1080002b 	ldhuio	r2,0(r2)
    d1fc:	10bfffcc 	andi	r2,r2,65535
    d200:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    d204:	e0bffe0b 	ldhu	r2,-8(fp)
}
    d208:	e037883a 	mov	sp,fp
    d20c:	df000017 	ldw	fp,0(sp)
    d210:	dec00104 	addi	sp,sp,4
    d214:	f800283a 	ret

0000d218 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    d218:	defffd04 	addi	sp,sp,-12
    d21c:	df000215 	stw	fp,8(sp)
    d220:	df000204 	addi	fp,sp,8
    d224:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    d228:	e0bfff17 	ldw	r2,-4(fp)
    d22c:	10800a17 	ldw	r2,40(r2)
    d230:	10800104 	addi	r2,r2,4
    d234:	10800037 	ldwio	r2,0(r2)
    d238:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    d23c:	e0bffe17 	ldw	r2,-8(fp)
    d240:	1004d43a 	srli	r2,r2,16
}
    d244:	e037883a 	mov	sp,fp
    d248:	df000017 	ldw	fp,0(sp)
    d24c:	dec00104 	addi	sp,sp,4
    d250:	f800283a 	ret

0000d254 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    d254:	defffd04 	addi	sp,sp,-12
    d258:	df000215 	stw	fp,8(sp)
    d25c:	df000204 	addi	fp,sp,8
    d260:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    d264:	e0bfff17 	ldw	r2,-4(fp)
    d268:	1080800c 	andi	r2,r2,512
    d26c:	1004d27a 	srli	r2,r2,9
    d270:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    d274:	e0bffe17 	ldw	r2,-8(fp)
    d278:	10000226 	beq	r2,zero,d284 <alt_up_irda_check_parity+0x30>
    d27c:	00bfffc4 	movi	r2,-1
    d280:	00000106 	br	d288 <alt_up_irda_check_parity+0x34>
    d284:	0005883a 	mov	r2,zero
}
    d288:	e037883a 	mov	sp,fp
    d28c:	df000017 	ldw	fp,0(sp)
    d290:	dec00104 	addi	sp,sp,4
    d294:	f800283a 	ret

0000d298 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    d298:	defffd04 	addi	sp,sp,-12
    d29c:	df000215 	stw	fp,8(sp)
    d2a0:	df000204 	addi	fp,sp,8
    d2a4:	e13ffe15 	stw	r4,-8(fp)
    d2a8:	2805883a 	mov	r2,r5
    d2ac:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    d2b0:	e0bffe17 	ldw	r2,-8(fp)
    d2b4:	10800a17 	ldw	r2,40(r2)
    d2b8:	1007883a 	mov	r3,r2
    d2bc:	e0bfff03 	ldbu	r2,-4(fp)
    d2c0:	18800035 	stwio	r2,0(r3)
	return 0;
    d2c4:	0005883a 	mov	r2,zero
}
    d2c8:	e037883a 	mov	sp,fp
    d2cc:	df000017 	ldw	fp,0(sp)
    d2d0:	dec00104 	addi	sp,sp,4
    d2d4:	f800283a 	ret

0000d2d8 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    d2d8:	defffa04 	addi	sp,sp,-24
    d2dc:	dfc00515 	stw	ra,20(sp)
    d2e0:	df000415 	stw	fp,16(sp)
    d2e4:	df000404 	addi	fp,sp,16
    d2e8:	e13ffd15 	stw	r4,-12(fp)
    d2ec:	e17ffe15 	stw	r5,-8(fp)
    d2f0:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    d2f4:	e0bffd17 	ldw	r2,-12(fp)
    d2f8:	10800a17 	ldw	r2,40(r2)
    d2fc:	10800037 	ldwio	r2,0(r2)
    d300:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    d304:	e0bffc17 	ldw	r2,-16(fp)
    d308:	1007883a 	mov	r3,r2
    d30c:	e0bffe17 	ldw	r2,-8(fp)
    d310:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    d314:	e13ffc17 	ldw	r4,-16(fp)
    d318:	000d2540 	call	d254 <alt_up_irda_check_parity>
    d31c:	1007883a 	mov	r3,r2
    d320:	e0bfff17 	ldw	r2,-4(fp)
    d324:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    d328:	e0bffc17 	ldw	r2,-16(fp)
    d32c:	10a0000c 	andi	r2,r2,32768
    d330:	1004d3fa 	srli	r2,r2,15
    d334:	10bfffc4 	addi	r2,r2,-1
}
    d338:	e037883a 	mov	sp,fp
    d33c:	dfc00117 	ldw	ra,4(sp)
    d340:	df000017 	ldw	fp,0(sp)
    d344:	dec00204 	addi	sp,sp,8
    d348:	f800283a 	ret

0000d34c <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    d34c:	defff804 	addi	sp,sp,-32
    d350:	dfc00715 	stw	ra,28(sp)
    d354:	df000615 	stw	fp,24(sp)
    d358:	df000604 	addi	fp,sp,24
    d35c:	e13ffd15 	stw	r4,-12(fp)
    d360:	e17ffe15 	stw	r5,-8(fp)
    d364:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    d368:	e0bffd17 	ldw	r2,-12(fp)
    d36c:	10800017 	ldw	r2,0(r2)
    d370:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    d374:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    d378:	00000c06 	br	d3ac <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
    d37c:	e0bffe17 	ldw	r2,-8(fp)
    d380:	10c00044 	addi	r3,r2,1
    d384:	e0fffe15 	stw	r3,-8(fp)
    d388:	e0fffc04 	addi	r3,fp,-16
    d38c:	180d883a 	mov	r6,r3
    d390:	100b883a 	mov	r5,r2
    d394:	e13ffb17 	ldw	r4,-20(fp)
    d398:	000d2d80 	call	d2d8 <alt_up_irda_read_data>
    d39c:	1000081e 	bne	r2,zero,d3c0 <alt_up_irda_read_fd+0x74>
			count++;
    d3a0:	e0bffa17 	ldw	r2,-24(fp)
    d3a4:	10800044 	addi	r2,r2,1
    d3a8:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    d3ac:	e0bfff17 	ldw	r2,-4(fp)
    d3b0:	10ffffc4 	addi	r3,r2,-1
    d3b4:	e0ffff15 	stw	r3,-4(fp)
    d3b8:	103ff01e 	bne	r2,zero,d37c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d37c>
    d3bc:	00000106 	br	d3c4 <alt_up_irda_read_fd+0x78>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
    d3c0:	0001883a 	nop
	}
	return count;
    d3c4:	e0bffa17 	ldw	r2,-24(fp)
}
    d3c8:	e037883a 	mov	sp,fp
    d3cc:	dfc00117 	ldw	ra,4(sp)
    d3d0:	df000017 	ldw	fp,0(sp)
    d3d4:	dec00204 	addi	sp,sp,8
    d3d8:	f800283a 	ret

0000d3dc <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    d3dc:	defff904 	addi	sp,sp,-28
    d3e0:	dfc00615 	stw	ra,24(sp)
    d3e4:	df000515 	stw	fp,20(sp)
    d3e8:	df000504 	addi	fp,sp,20
    d3ec:	e13ffd15 	stw	r4,-12(fp)
    d3f0:	e17ffe15 	stw	r5,-8(fp)
    d3f4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    d3f8:	e0bffd17 	ldw	r2,-12(fp)
    d3fc:	10800017 	ldw	r2,0(r2)
    d400:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    d404:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    d408:	00000c06 	br	d43c <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
    d40c:	e0bffe17 	ldw	r2,-8(fp)
    d410:	10c00044 	addi	r3,r2,1
    d414:	e0fffe15 	stw	r3,-8(fp)
    d418:	10800003 	ldbu	r2,0(r2)
    d41c:	10803fcc 	andi	r2,r2,255
    d420:	100b883a 	mov	r5,r2
    d424:	e13ffc17 	ldw	r4,-16(fp)
    d428:	000d2980 	call	d298 <alt_up_irda_write_data>
    d42c:	1000081e 	bne	r2,zero,d450 <alt_up_irda_write_fd+0x74>
			count++;
    d430:	e0bffb17 	ldw	r2,-20(fp)
    d434:	10800044 	addi	r2,r2,1
    d438:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    d43c:	e0bfff17 	ldw	r2,-4(fp)
    d440:	10ffffc4 	addi	r3,r2,-1
    d444:	e0ffff15 	stw	r3,-4(fp)
    d448:	103ff01e 	bne	r2,zero,d40c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d40c>
    d44c:	00000106 	br	d454 <alt_up_irda_write_fd+0x78>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
    d450:	0001883a 	nop
	}
	return count;
    d454:	e0bffb17 	ldw	r2,-20(fp)
}
    d458:	e037883a 	mov	sp,fp
    d45c:	dfc00117 	ldw	ra,4(sp)
    d460:	df000017 	ldw	fp,0(sp)
    d464:	dec00204 	addi	sp,sp,8
    d468:	f800283a 	ret

0000d46c <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    d46c:	defffc04 	addi	sp,sp,-16
    d470:	dfc00315 	stw	ra,12(sp)
    d474:	df000215 	stw	fp,8(sp)
    d478:	df000204 	addi	fp,sp,8
    d47c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    d480:	d1600604 	addi	r5,gp,-32744
    d484:	e13fff17 	ldw	r4,-4(fp)
    d488:	000e1d40 	call	e1d4 <alt_find_dev>
    d48c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    d490:	e0bffe17 	ldw	r2,-8(fp)
}
    d494:	e037883a 	mov	sp,fp
    d498:	dfc00117 	ldw	ra,4(sp)
    d49c:	df000017 	ldw	fp,0(sp)
    d4a0:	dec00204 	addi	sp,sp,8
    d4a4:	f800283a 	ret

0000d4a8 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    d4a8:	defffd04 	addi	sp,sp,-12
    d4ac:	df000215 	stw	fp,8(sp)
    d4b0:	df000204 	addi	fp,sp,8
    d4b4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    d4b8:	e0bfff17 	ldw	r2,-4(fp)
    d4bc:	1080400c 	andi	r2,r2,256
    d4c0:	1004d23a 	srli	r2,r2,8
    d4c4:	e0bffe05 	stb	r2,-8(fp)
	return ri;
    d4c8:	e0bffe03 	ldbu	r2,-8(fp)
}
    d4cc:	e037883a 	mov	sp,fp
    d4d0:	df000017 	ldw	fp,0(sp)
    d4d4:	dec00104 	addi	sp,sp,4
    d4d8:	f800283a 	ret

0000d4dc <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    d4dc:	defffd04 	addi	sp,sp,-12
    d4e0:	df000215 	stw	fp,8(sp)
    d4e4:	df000204 	addi	fp,sp,8
    d4e8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    d4ec:	e0bfff17 	ldw	r2,-4(fp)
    d4f0:	1080004c 	andi	r2,r2,1
    d4f4:	e0bffe05 	stb	r2,-8(fp)
	return re;
    d4f8:	e0bffe03 	ldbu	r2,-8(fp)
}
    d4fc:	e037883a 	mov	sp,fp
    d500:	df000017 	ldw	fp,0(sp)
    d504:	dec00104 	addi	sp,sp,4
    d508:	f800283a 	ret

0000d50c <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    d50c:	defffd04 	addi	sp,sp,-12
    d510:	df000215 	stw	fp,8(sp)
    d514:	df000204 	addi	fp,sp,8
    d518:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    d51c:	e0bfff17 	ldw	r2,-4(fp)
    d520:	1081000c 	andi	r2,r2,1024
    d524:	1004d2ba 	srli	r2,r2,10
    d528:	e0bffe05 	stb	r2,-8(fp)
	return re;
    d52c:	e0bffe03 	ldbu	r2,-8(fp)
}
    d530:	e037883a 	mov	sp,fp
    d534:	df000017 	ldw	fp,0(sp)
    d538:	dec00104 	addi	sp,sp,4
    d53c:	f800283a 	ret

0000d540 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    d540:	defffd04 	addi	sp,sp,-12
    d544:	df000215 	stw	fp,8(sp)
    d548:	df000204 	addi	fp,sp,8
    d54c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    d550:	e0bfff17 	ldw	r2,-4(fp)
    d554:	1004d43a 	srli	r2,r2,16
    d558:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
    d55c:	e0bffe0b 	ldhu	r2,-8(fp)
}
    d560:	e037883a 	mov	sp,fp
    d564:	df000017 	ldw	fp,0(sp)
    d568:	dec00104 	addi	sp,sp,4
    d56c:	f800283a 	ret

0000d570 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    d570:	defffd04 	addi	sp,sp,-12
    d574:	df000215 	stw	fp,8(sp)
    d578:	df000204 	addi	fp,sp,8
    d57c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    d580:	e0bfff17 	ldw	r2,-4(fp)
    d584:	10a0000c 	andi	r2,r2,32768
    d588:	1004d3fa 	srli	r2,r2,15
    d58c:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
    d590:	e0bffe03 	ldbu	r2,-8(fp)
}
    d594:	e037883a 	mov	sp,fp
    d598:	df000017 	ldw	fp,0(sp)
    d59c:	dec00104 	addi	sp,sp,4
    d5a0:	f800283a 	ret

0000d5a4 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    d5a4:	defffd04 	addi	sp,sp,-12
    d5a8:	df000215 	stw	fp,8(sp)
    d5ac:	df000204 	addi	fp,sp,8
    d5b0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    d5b4:	e0bfff17 	ldw	r2,-4(fp)
    d5b8:	e0bffe05 	stb	r2,-8(fp)
	return data;
    d5bc:	e0bffe03 	ldbu	r2,-8(fp)
}
    d5c0:	e037883a 	mov	sp,fp
    d5c4:	df000017 	ldw	fp,0(sp)
    d5c8:	dec00104 	addi	sp,sp,4
    d5cc:	f800283a 	ret

0000d5d0 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    d5d0:	defffb04 	addi	sp,sp,-20
    d5d4:	dfc00415 	stw	ra,16(sp)
    d5d8:	df000315 	stw	fp,12(sp)
    d5dc:	df000304 	addi	fp,sp,12
    d5e0:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    d5e4:	01403fc4 	movi	r5,255
    d5e8:	e13fff17 	ldw	r4,-4(fp)
    d5ec:	000d8300 	call	d830 <alt_up_ps2_write_data_byte_with_ack>
    d5f0:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
    d5f4:	e0bffd17 	ldw	r2,-12(fp)
    d5f8:	1000211e 	bne	r2,zero,d680 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    d5fc:	e0bffe04 	addi	r2,fp,-8
    d600:	100b883a 	mov	r5,r2
    d604:	e13fff17 	ldw	r4,-4(fp)
    d608:	000d8940 	call	d894 <alt_up_ps2_read_data_byte_timeout>
    d60c:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
    d610:	e0bffd17 	ldw	r2,-12(fp)
    d614:	10001a1e 	bne	r2,zero,d680 <alt_up_ps2_init+0xb0>
    d618:	e0bffe03 	ldbu	r2,-8(fp)
    d61c:	10803fcc 	andi	r2,r2,255
    d620:	10802a98 	cmpnei	r2,r2,170
    d624:	1000161e 	bne	r2,zero,d680 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    d628:	e0bffe04 	addi	r2,fp,-8
    d62c:	100b883a 	mov	r5,r2
    d630:	e13fff17 	ldw	r4,-4(fp)
    d634:	000d8940 	call	d894 <alt_up_ps2_read_data_byte_timeout>
    d638:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
    d63c:	e0bffd17 	ldw	r2,-12(fp)
    d640:	10bfe318 	cmpnei	r2,r2,-116
    d644:	1000041e 	bne	r2,zero,d658 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    d648:	e0bfff17 	ldw	r2,-4(fp)
    d64c:	00c00044 	movi	r3,1
    d650:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
    d654:	00000a06 	br	d680 <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
    d658:	e0bffd17 	ldw	r2,-12(fp)
    d65c:	1000081e 	bne	r2,zero,d680 <alt_up_ps2_init+0xb0>
    d660:	e0bffe03 	ldbu	r2,-8(fp)
    d664:	10803fcc 	andi	r2,r2,255
    d668:	1000051e 	bne	r2,zero,d680 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    d66c:	e0bfff17 	ldw	r2,-4(fp)
    d670:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    d674:	01403d04 	movi	r5,244
    d678:	e13fff17 	ldw	r4,-4(fp)
    d67c:	000d7540 	call	d754 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    d680:	0001883a 	nop
    d684:	e037883a 	mov	sp,fp
    d688:	dfc00117 	ldw	ra,4(sp)
    d68c:	df000017 	ldw	fp,0(sp)
    d690:	dec00204 	addi	sp,sp,8
    d694:	f800283a 	ret

0000d698 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    d698:	defffd04 	addi	sp,sp,-12
    d69c:	df000215 	stw	fp,8(sp)
    d6a0:	df000204 	addi	fp,sp,8
    d6a4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    d6a8:	e0bfff17 	ldw	r2,-4(fp)
    d6ac:	10800a17 	ldw	r2,40(r2)
    d6b0:	10800104 	addi	r2,r2,4
    d6b4:	10800037 	ldwio	r2,0(r2)
    d6b8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    d6bc:	e0bffe17 	ldw	r2,-8(fp)
    d6c0:	10800054 	ori	r2,r2,1
    d6c4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    d6c8:	e0bfff17 	ldw	r2,-4(fp)
    d6cc:	10800a17 	ldw	r2,40(r2)
    d6d0:	10800104 	addi	r2,r2,4
    d6d4:	1007883a 	mov	r3,r2
    d6d8:	e0bffe17 	ldw	r2,-8(fp)
    d6dc:	18800035 	stwio	r2,0(r3)
}
    d6e0:	0001883a 	nop
    d6e4:	e037883a 	mov	sp,fp
    d6e8:	df000017 	ldw	fp,0(sp)
    d6ec:	dec00104 	addi	sp,sp,4
    d6f0:	f800283a 	ret

0000d6f4 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    d6f4:	defffd04 	addi	sp,sp,-12
    d6f8:	df000215 	stw	fp,8(sp)
    d6fc:	df000204 	addi	fp,sp,8
    d700:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    d704:	e0bfff17 	ldw	r2,-4(fp)
    d708:	10800a17 	ldw	r2,40(r2)
    d70c:	10800104 	addi	r2,r2,4
    d710:	10800037 	ldwio	r2,0(r2)
    d714:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    d718:	e0fffe17 	ldw	r3,-8(fp)
    d71c:	00bfff84 	movi	r2,-2
    d720:	1884703a 	and	r2,r3,r2
    d724:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    d728:	e0bfff17 	ldw	r2,-4(fp)
    d72c:	10800a17 	ldw	r2,40(r2)
    d730:	10800104 	addi	r2,r2,4
    d734:	1007883a 	mov	r3,r2
    d738:	e0bffe17 	ldw	r2,-8(fp)
    d73c:	18800035 	stwio	r2,0(r3)
}
    d740:	0001883a 	nop
    d744:	e037883a 	mov	sp,fp
    d748:	df000017 	ldw	fp,0(sp)
    d74c:	dec00104 	addi	sp,sp,4
    d750:	f800283a 	ret

0000d754 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    d754:	defffb04 	addi	sp,sp,-20
    d758:	dfc00415 	stw	ra,16(sp)
    d75c:	df000315 	stw	fp,12(sp)
    d760:	df000304 	addi	fp,sp,12
    d764:	e13ffe15 	stw	r4,-8(fp)
    d768:	2805883a 	mov	r2,r5
    d76c:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    d770:	e0bffe17 	ldw	r2,-8(fp)
    d774:	10800a17 	ldw	r2,40(r2)
    d778:	1007883a 	mov	r3,r2
    d77c:	e0bfff03 	ldbu	r2,-4(fp)
    d780:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    d784:	e0bffe17 	ldw	r2,-8(fp)
    d788:	10800a17 	ldw	r2,40(r2)
    d78c:	10800104 	addi	r2,r2,4
    d790:	10800037 	ldwio	r2,0(r2)
    d794:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
    d798:	e13ffd17 	ldw	r4,-12(fp)
    d79c:	000d50c0 	call	d50c <read_CE_bit>
    d7a0:	10803fcc 	andi	r2,r2,255
    d7a4:	10000226 	beq	r2,zero,d7b0 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    d7a8:	00bffec4 	movi	r2,-5
    d7ac:	00000106 	br	d7b4 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    d7b0:	0005883a 	mov	r2,zero
}
    d7b4:	e037883a 	mov	sp,fp
    d7b8:	dfc00117 	ldw	ra,4(sp)
    d7bc:	df000017 	ldw	fp,0(sp)
    d7c0:	dec00204 	addi	sp,sp,8
    d7c4:	f800283a 	ret

0000d7c8 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    d7c8:	defffc04 	addi	sp,sp,-16
    d7cc:	dfc00315 	stw	ra,12(sp)
    d7d0:	df000215 	stw	fp,8(sp)
    d7d4:	df000204 	addi	fp,sp,8
    d7d8:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
    d7dc:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
    d7e0:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    d7e4:	e0bffe44 	addi	r2,fp,-7
    d7e8:	100b883a 	mov	r5,r2
    d7ec:	e13fff17 	ldw	r4,-4(fp)
    d7f0:	000d8940 	call	d894 <alt_up_ps2_read_data_byte_timeout>
    d7f4:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
    d7f8:	e0bffe03 	ldbu	r2,-8(fp)
    d7fc:	1000061e 	bne	r2,zero,d818 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    d800:	e0bffe43 	ldbu	r2,-7(fp)
    d804:	10803fcc 	andi	r2,r2,255
    d808:	10803e98 	cmpnei	r2,r2,250
    d80c:	103ff51e 	bne	r2,zero,d7e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d7e4>
				return 0;
    d810:	0005883a 	mov	r2,zero
    d814:	00000106 	br	d81c <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
    d818:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
    d81c:	e037883a 	mov	sp,fp
    d820:	dfc00117 	ldw	ra,4(sp)
    d824:	df000017 	ldw	fp,0(sp)
    d828:	dec00204 	addi	sp,sp,8
    d82c:	f800283a 	ret

0000d830 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    d830:	defffa04 	addi	sp,sp,-24
    d834:	dfc00515 	stw	ra,20(sp)
    d838:	df000415 	stw	fp,16(sp)
    d83c:	df000404 	addi	fp,sp,16
    d840:	e13ffe15 	stw	r4,-8(fp)
    d844:	2805883a 	mov	r2,r5
    d848:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    d84c:	e0bfff03 	ldbu	r2,-4(fp)
    d850:	100b883a 	mov	r5,r2
    d854:	e13ffe17 	ldw	r4,-8(fp)
    d858:	000d7540 	call	d754 <alt_up_ps2_write_data_byte>
    d85c:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
    d860:	e0bffc17 	ldw	r2,-16(fp)
    d864:	10000226 	beq	r2,zero,d870 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    d868:	e0bffc17 	ldw	r2,-16(fp)
    d86c:	00000406 	br	d880 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    d870:	e13ffe17 	ldw	r4,-8(fp)
    d874:	000d7c80 	call	d7c8 <alt_up_ps2_wait_for_ack>
    d878:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
    d87c:	e0bffd17 	ldw	r2,-12(fp)
}
    d880:	e037883a 	mov	sp,fp
    d884:	dfc00117 	ldw	ra,4(sp)
    d888:	df000017 	ldw	fp,0(sp)
    d88c:	dec00204 	addi	sp,sp,8
    d890:	f800283a 	ret

0000d894 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    d894:	defffa04 	addi	sp,sp,-24
    d898:	dfc00515 	stw	ra,20(sp)
    d89c:	df000415 	stw	fp,16(sp)
    d8a0:	df000404 	addi	fp,sp,16
    d8a4:	e13ffe15 	stw	r4,-8(fp)
    d8a8:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    d8ac:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
    d8b0:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
    d8b4:	e0bffc17 	ldw	r2,-16(fp)
    d8b8:	10800044 	addi	r2,r2,1
    d8bc:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    d8c0:	e0bffe17 	ldw	r2,-8(fp)
    d8c4:	10800a17 	ldw	r2,40(r2)
    d8c8:	10800037 	ldwio	r2,0(r2)
    d8cc:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
    d8d0:	e13ffd17 	ldw	r4,-12(fp)
    d8d4:	000d5700 	call	d570 <read_data_valid>
    d8d8:	10803fcc 	andi	r2,r2,255
    d8dc:	10000726 	beq	r2,zero,d8fc <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
    d8e0:	e13ffd17 	ldw	r4,-12(fp)
    d8e4:	000d5a40 	call	d5a4 <read_data_byte>
    d8e8:	1007883a 	mov	r3,r2
    d8ec:	e0bfff17 	ldw	r2,-4(fp)
    d8f0:	10c00005 	stb	r3,0(r2)
			return 0;
    d8f4:	0005883a 	mov	r2,zero
    d8f8:	00000806 	br	d91c <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    d8fc:	e0bffe17 	ldw	r2,-8(fp)
    d900:	10800c17 	ldw	r2,48(r2)
    d904:	103feb26 	beq	r2,zero,d8b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d8b4>
    d908:	e0bffe17 	ldw	r2,-8(fp)
    d90c:	10c00c17 	ldw	r3,48(r2)
    d910:	e0bffc17 	ldw	r2,-16(fp)
    d914:	18bfe72e 	bgeu	r3,r2,d8b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d8b4>
		{
			return -ETIMEDOUT;
    d918:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
    d91c:	e037883a 	mov	sp,fp
    d920:	dfc00117 	ldw	ra,4(sp)
    d924:	df000017 	ldw	fp,0(sp)
    d928:	dec00204 	addi	sp,sp,8
    d92c:	f800283a 	ret

0000d930 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    d930:	defffb04 	addi	sp,sp,-20
    d934:	dfc00415 	stw	ra,16(sp)
    d938:	df000315 	stw	fp,12(sp)
    d93c:	df000304 	addi	fp,sp,12
    d940:	e13ffe15 	stw	r4,-8(fp)
    d944:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    d948:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    d94c:	e0bffe17 	ldw	r2,-8(fp)
    d950:	10800a17 	ldw	r2,40(r2)
    d954:	10800037 	ldwio	r2,0(r2)
    d958:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
    d95c:	e13ffd17 	ldw	r4,-12(fp)
    d960:	000d5700 	call	d570 <read_data_valid>
    d964:	10803fcc 	andi	r2,r2,255
    d968:	10000726 	beq	r2,zero,d988 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
    d96c:	e13ffd17 	ldw	r4,-12(fp)
    d970:	000d5a40 	call	d5a4 <read_data_byte>
    d974:	1007883a 	mov	r3,r2
    d978:	e0bfff17 	ldw	r2,-4(fp)
    d97c:	10c00005 	stb	r3,0(r2)
		return 0;
    d980:	0005883a 	mov	r2,zero
    d984:	00000106 	br	d98c <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
    d988:	00bfffc4 	movi	r2,-1
}
    d98c:	e037883a 	mov	sp,fp
    d990:	dfc00117 	ldw	ra,4(sp)
    d994:	df000017 	ldw	fp,0(sp)
    d998:	dec00204 	addi	sp,sp,8
    d99c:	f800283a 	ret

0000d9a0 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    d9a0:	defffb04 	addi	sp,sp,-20
    d9a4:	dfc00415 	stw	ra,16(sp)
    d9a8:	df000315 	stw	fp,12(sp)
    d9ac:	df000304 	addi	fp,sp,12
    d9b0:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    d9b4:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
    d9b8:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    d9bc:	e0bfff17 	ldw	r2,-4(fp)
    d9c0:	10800a17 	ldw	r2,40(r2)
    d9c4:	10800037 	ldwio	r2,0(r2)
    d9c8:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    d9cc:	e13ffe17 	ldw	r4,-8(fp)
    d9d0:	000d5400 	call	d540 <read_num_bytes_available>
    d9d4:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
    d9d8:	e0bffd0b 	ldhu	r2,-12(fp)
    d9dc:	103ff71e 	bne	r2,zero,d9bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d9bc>
}
    d9e0:	0001883a 	nop
    d9e4:	e037883a 	mov	sp,fp
    d9e8:	dfc00117 	ldw	ra,4(sp)
    d9ec:	df000017 	ldw	fp,0(sp)
    d9f0:	dec00204 	addi	sp,sp,8
    d9f4:	f800283a 	ret

0000d9f8 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    d9f8:	defff804 	addi	sp,sp,-32
    d9fc:	dfc00715 	stw	ra,28(sp)
    da00:	df000615 	stw	fp,24(sp)
    da04:	df000604 	addi	fp,sp,24
    da08:	e13ffd15 	stw	r4,-12(fp)
    da0c:	e17ffe15 	stw	r5,-8(fp)
    da10:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    da14:	e0bffd17 	ldw	r2,-12(fp)
    da18:	10800017 	ldw	r2,0(r2)
    da1c:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
    da20:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
    da24:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
    da28:	e0fffc17 	ldw	r3,-16(fp)
    da2c:	e0bfff17 	ldw	r2,-4(fp)
    da30:	18bffd16 	blt	r3,r2,da28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da28>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
    da34:	e0bffe17 	ldw	r2,-8(fp)
    da38:	10c00044 	addi	r3,r2,1
    da3c:	e0fffe15 	stw	r3,-8(fp)
    da40:	100b883a 	mov	r5,r2
    da44:	e13ffa17 	ldw	r4,-24(fp)
    da48:	000d8940 	call	d894 <alt_up_ps2_read_data_byte_timeout>
    da4c:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
    da50:	e0bffb17 	ldw	r2,-20(fp)
    da54:	10000226 	beq	r2,zero,da60 <alt_up_ps2_read_fd+0x68>
			return count;
    da58:	e0bffc17 	ldw	r2,-16(fp)
    da5c:	00000406 	br	da70 <alt_up_ps2_read_fd+0x78>
		count++;
    da60:	e0bffc17 	ldw	r2,-16(fp)
    da64:	10800044 	addi	r2,r2,1
    da68:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
    da6c:	e0bffc17 	ldw	r2,-16(fp)
}
    da70:	e037883a 	mov	sp,fp
    da74:	dfc00117 	ldw	ra,4(sp)
    da78:	df000017 	ldw	fp,0(sp)
    da7c:	dec00204 	addi	sp,sp,8
    da80:	f800283a 	ret

0000da84 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    da84:	defff804 	addi	sp,sp,-32
    da88:	dfc00715 	stw	ra,28(sp)
    da8c:	df000615 	stw	fp,24(sp)
    da90:	df000604 	addi	fp,sp,24
    da94:	e13ffd15 	stw	r4,-12(fp)
    da98:	e17ffe15 	stw	r5,-8(fp)
    da9c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    daa0:	e0bffd17 	ldw	r2,-12(fp)
    daa4:	10800017 	ldw	r2,0(r2)
    daa8:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    daac:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
    dab0:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
    dab4:	00001006 	br	daf8 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    dab8:	e0bffe17 	ldw	r2,-8(fp)
    dabc:	10c00044 	addi	r3,r2,1
    dac0:	e0fffe15 	stw	r3,-8(fp)
    dac4:	10800003 	ldbu	r2,0(r2)
    dac8:	10803fcc 	andi	r2,r2,255
    dacc:	100b883a 	mov	r5,r2
    dad0:	e13ffb17 	ldw	r4,-20(fp)
    dad4:	000d7540 	call	d754 <alt_up_ps2_write_data_byte>
    dad8:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
    dadc:	e0bffc17 	ldw	r2,-16(fp)
    dae0:	10000226 	beq	r2,zero,daec <alt_up_ps2_write_fd+0x68>
			return count;
    dae4:	e0bffa17 	ldw	r2,-24(fp)
    dae8:	00000706 	br	db08 <alt_up_ps2_write_fd+0x84>
		count++;
    daec:	e0bffa17 	ldw	r2,-24(fp)
    daf0:	10800044 	addi	r2,r2,1
    daf4:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    daf8:	e0fffa17 	ldw	r3,-24(fp)
    dafc:	e0bfff17 	ldw	r2,-4(fp)
    db00:	18bfed16 	blt	r3,r2,dab8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dab8>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
    db04:	e0bffa17 	ldw	r2,-24(fp)
}
    db08:	e037883a 	mov	sp,fp
    db0c:	dfc00117 	ldw	ra,4(sp)
    db10:	df000017 	ldw	fp,0(sp)
    db14:	dec00204 	addi	sp,sp,8
    db18:	f800283a 	ret

0000db1c <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    db1c:	defffc04 	addi	sp,sp,-16
    db20:	dfc00315 	stw	ra,12(sp)
    db24:	df000215 	stw	fp,8(sp)
    db28:	df000204 	addi	fp,sp,8
    db2c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    db30:	d1600604 	addi	r5,gp,-32744
    db34:	e13fff17 	ldw	r4,-4(fp)
    db38:	000e1d40 	call	e1d4 <alt_find_dev>
    db3c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    db40:	e0bffe17 	ldw	r2,-8(fp)
}
    db44:	e037883a 	mov	sp,fp
    db48:	dfc00117 	ldw	ra,4(sp)
    db4c:	df000017 	ldw	fp,0(sp)
    db50:	dec00204 	addi	sp,sp,8
    db54:	f800283a 	ret

0000db58 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    db58:	defffd04 	addi	sp,sp,-12
    db5c:	df000215 	stw	fp,8(sp)
    db60:	df000204 	addi	fp,sp,8
    db64:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    db68:	e0bfff17 	ldw	r2,-4(fp)
    db6c:	10800a17 	ldw	r2,40(r2)
    db70:	10800104 	addi	r2,r2,4
    db74:	10800037 	ldwio	r2,0(r2)
    db78:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    db7c:	e0bffe17 	ldw	r2,-8(fp)
    db80:	10800054 	ori	r2,r2,1
    db84:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    db88:	e0bfff17 	ldw	r2,-4(fp)
    db8c:	10800a17 	ldw	r2,40(r2)
    db90:	10800104 	addi	r2,r2,4
    db94:	1007883a 	mov	r3,r2
    db98:	e0bffe17 	ldw	r2,-8(fp)
    db9c:	18800035 	stwio	r2,0(r3)
}
    dba0:	0001883a 	nop
    dba4:	e037883a 	mov	sp,fp
    dba8:	df000017 	ldw	fp,0(sp)
    dbac:	dec00104 	addi	sp,sp,4
    dbb0:	f800283a 	ret

0000dbb4 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    dbb4:	defffd04 	addi	sp,sp,-12
    dbb8:	df000215 	stw	fp,8(sp)
    dbbc:	df000204 	addi	fp,sp,8
    dbc0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    dbc4:	e0bfff17 	ldw	r2,-4(fp)
    dbc8:	10800a17 	ldw	r2,40(r2)
    dbcc:	10800104 	addi	r2,r2,4
    dbd0:	10800037 	ldwio	r2,0(r2)
    dbd4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    dbd8:	e0fffe17 	ldw	r3,-8(fp)
    dbdc:	00bfff84 	movi	r2,-2
    dbe0:	1884703a 	and	r2,r3,r2
    dbe4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    dbe8:	e0bfff17 	ldw	r2,-4(fp)
    dbec:	10800a17 	ldw	r2,40(r2)
    dbf0:	10800104 	addi	r2,r2,4
    dbf4:	1007883a 	mov	r3,r2
    dbf8:	e0bffe17 	ldw	r2,-8(fp)
    dbfc:	18800035 	stwio	r2,0(r3)
}
    dc00:	0001883a 	nop
    dc04:	e037883a 	mov	sp,fp
    dc08:	df000017 	ldw	fp,0(sp)
    dc0c:	dec00104 	addi	sp,sp,4
    dc10:	f800283a 	ret

0000dc14 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    dc14:	defffd04 	addi	sp,sp,-12
    dc18:	df000215 	stw	fp,8(sp)
    dc1c:	df000204 	addi	fp,sp,8
    dc20:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    dc24:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    dc28:	e0bfff17 	ldw	r2,-4(fp)
    dc2c:	10800a17 	ldw	r2,40(r2)
    dc30:	10800084 	addi	r2,r2,2
    dc34:	1080002b 	ldhuio	r2,0(r2)
    dc38:	10bfffcc 	andi	r2,r2,65535
    dc3c:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    dc40:	e0bffe0b 	ldhu	r2,-8(fp)
}
    dc44:	e037883a 	mov	sp,fp
    dc48:	df000017 	ldw	fp,0(sp)
    dc4c:	dec00104 	addi	sp,sp,4
    dc50:	f800283a 	ret

0000dc54 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    dc54:	defffd04 	addi	sp,sp,-12
    dc58:	df000215 	stw	fp,8(sp)
    dc5c:	df000204 	addi	fp,sp,8
    dc60:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    dc64:	e0bfff17 	ldw	r2,-4(fp)
    dc68:	10800a17 	ldw	r2,40(r2)
    dc6c:	10800104 	addi	r2,r2,4
    dc70:	10800037 	ldwio	r2,0(r2)
    dc74:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    dc78:	e0bffe17 	ldw	r2,-8(fp)
    dc7c:	1004d43a 	srli	r2,r2,16
}
    dc80:	e037883a 	mov	sp,fp
    dc84:	df000017 	ldw	fp,0(sp)
    dc88:	dec00104 	addi	sp,sp,4
    dc8c:	f800283a 	ret

0000dc90 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    dc90:	defffd04 	addi	sp,sp,-12
    dc94:	df000215 	stw	fp,8(sp)
    dc98:	df000204 	addi	fp,sp,8
    dc9c:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    dca0:	e0bfff17 	ldw	r2,-4(fp)
    dca4:	1080800c 	andi	r2,r2,512
    dca8:	1004d27a 	srli	r2,r2,9
    dcac:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    dcb0:	e0bffe17 	ldw	r2,-8(fp)
    dcb4:	10000226 	beq	r2,zero,dcc0 <alt_up_rs232_check_parity+0x30>
    dcb8:	00bfffc4 	movi	r2,-1
    dcbc:	00000106 	br	dcc4 <alt_up_rs232_check_parity+0x34>
    dcc0:	0005883a 	mov	r2,zero
}
    dcc4:	e037883a 	mov	sp,fp
    dcc8:	df000017 	ldw	fp,0(sp)
    dccc:	dec00104 	addi	sp,sp,4
    dcd0:	f800283a 	ret

0000dcd4 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    dcd4:	defffd04 	addi	sp,sp,-12
    dcd8:	df000215 	stw	fp,8(sp)
    dcdc:	df000204 	addi	fp,sp,8
    dce0:	e13ffe15 	stw	r4,-8(fp)
    dce4:	2805883a 	mov	r2,r5
    dce8:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    dcec:	e0bffe17 	ldw	r2,-8(fp)
    dcf0:	10800a17 	ldw	r2,40(r2)
    dcf4:	1007883a 	mov	r3,r2
    dcf8:	e0bfff03 	ldbu	r2,-4(fp)
    dcfc:	18800035 	stwio	r2,0(r3)
	return 0;
    dd00:	0005883a 	mov	r2,zero
}
    dd04:	e037883a 	mov	sp,fp
    dd08:	df000017 	ldw	fp,0(sp)
    dd0c:	dec00104 	addi	sp,sp,4
    dd10:	f800283a 	ret

0000dd14 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    dd14:	defffa04 	addi	sp,sp,-24
    dd18:	dfc00515 	stw	ra,20(sp)
    dd1c:	df000415 	stw	fp,16(sp)
    dd20:	df000404 	addi	fp,sp,16
    dd24:	e13ffd15 	stw	r4,-12(fp)
    dd28:	e17ffe15 	stw	r5,-8(fp)
    dd2c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    dd30:	e0bffd17 	ldw	r2,-12(fp)
    dd34:	10800a17 	ldw	r2,40(r2)
    dd38:	10800037 	ldwio	r2,0(r2)
    dd3c:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    dd40:	e0bffc17 	ldw	r2,-16(fp)
    dd44:	1007883a 	mov	r3,r2
    dd48:	e0bffe17 	ldw	r2,-8(fp)
    dd4c:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    dd50:	e13ffc17 	ldw	r4,-16(fp)
    dd54:	000dc900 	call	dc90 <alt_up_rs232_check_parity>
    dd58:	1007883a 	mov	r3,r2
    dd5c:	e0bfff17 	ldw	r2,-4(fp)
    dd60:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    dd64:	e0bffc17 	ldw	r2,-16(fp)
    dd68:	10a0000c 	andi	r2,r2,32768
    dd6c:	1004d3fa 	srli	r2,r2,15
    dd70:	10bfffc4 	addi	r2,r2,-1
}
    dd74:	e037883a 	mov	sp,fp
    dd78:	dfc00117 	ldw	ra,4(sp)
    dd7c:	df000017 	ldw	fp,0(sp)
    dd80:	dec00204 	addi	sp,sp,8
    dd84:	f800283a 	ret

0000dd88 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    dd88:	defff804 	addi	sp,sp,-32
    dd8c:	dfc00715 	stw	ra,28(sp)
    dd90:	df000615 	stw	fp,24(sp)
    dd94:	df000604 	addi	fp,sp,24
    dd98:	e13ffd15 	stw	r4,-12(fp)
    dd9c:	e17ffe15 	stw	r5,-8(fp)
    dda0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    dda4:	e0bffd17 	ldw	r2,-12(fp)
    dda8:	10800017 	ldw	r2,0(r2)
    ddac:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    ddb0:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    ddb4:	00000c06 	br	dde8 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
    ddb8:	e0bffe17 	ldw	r2,-8(fp)
    ddbc:	10c00044 	addi	r3,r2,1
    ddc0:	e0fffe15 	stw	r3,-8(fp)
    ddc4:	e0fffc04 	addi	r3,fp,-16
    ddc8:	180d883a 	mov	r6,r3
    ddcc:	100b883a 	mov	r5,r2
    ddd0:	e13ffb17 	ldw	r4,-20(fp)
    ddd4:	000dd140 	call	dd14 <alt_up_rs232_read_data>
    ddd8:	1000081e 	bne	r2,zero,ddfc <alt_up_rs232_read_fd+0x74>
			count++;
    dddc:	e0bffa17 	ldw	r2,-24(fp)
    dde0:	10800044 	addi	r2,r2,1
    dde4:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    dde8:	e0bfff17 	ldw	r2,-4(fp)
    ddec:	10ffffc4 	addi	r3,r2,-1
    ddf0:	e0ffff15 	stw	r3,-4(fp)
    ddf4:	103ff01e 	bne	r2,zero,ddb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ddb8>
    ddf8:	00000106 	br	de00 <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
    ddfc:	0001883a 	nop
	}
	return count;
    de00:	e0bffa17 	ldw	r2,-24(fp)
}
    de04:	e037883a 	mov	sp,fp
    de08:	dfc00117 	ldw	ra,4(sp)
    de0c:	df000017 	ldw	fp,0(sp)
    de10:	dec00204 	addi	sp,sp,8
    de14:	f800283a 	ret

0000de18 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    de18:	defff904 	addi	sp,sp,-28
    de1c:	dfc00615 	stw	ra,24(sp)
    de20:	df000515 	stw	fp,20(sp)
    de24:	df000504 	addi	fp,sp,20
    de28:	e13ffd15 	stw	r4,-12(fp)
    de2c:	e17ffe15 	stw	r5,-8(fp)
    de30:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    de34:	e0bffd17 	ldw	r2,-12(fp)
    de38:	10800017 	ldw	r2,0(r2)
    de3c:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    de40:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    de44:	00000d06 	br	de7c <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    de48:	e0bffe17 	ldw	r2,-8(fp)
    de4c:	10800003 	ldbu	r2,0(r2)
    de50:	10803fcc 	andi	r2,r2,255
    de54:	100b883a 	mov	r5,r2
    de58:	e13ffc17 	ldw	r4,-16(fp)
    de5c:	000dcd40 	call	dcd4 <alt_up_rs232_write_data>
    de60:	10000b1e 	bne	r2,zero,de90 <alt_up_rs232_write_fd+0x78>
		{
			count++;
    de64:	e0bffb17 	ldw	r2,-20(fp)
    de68:	10800044 	addi	r2,r2,1
    de6c:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    de70:	e0bffe17 	ldw	r2,-8(fp)
    de74:	10800044 	addi	r2,r2,1
    de78:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    de7c:	e0bfff17 	ldw	r2,-4(fp)
    de80:	10ffffc4 	addi	r3,r2,-1
    de84:	e0ffff15 	stw	r3,-4(fp)
    de88:	103fef1e 	bne	r2,zero,de48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de48>
    de8c:	00000106 	br	de94 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
    de90:	0001883a 	nop
	}
	return count;
    de94:	e0bffb17 	ldw	r2,-20(fp)
}
    de98:	e037883a 	mov	sp,fp
    de9c:	dfc00117 	ldw	ra,4(sp)
    dea0:	df000017 	ldw	fp,0(sp)
    dea4:	dec00204 	addi	sp,sp,8
    dea8:	f800283a 	ret

0000deac <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    deac:	defffc04 	addi	sp,sp,-16
    deb0:	dfc00315 	stw	ra,12(sp)
    deb4:	df000215 	stw	fp,8(sp)
    deb8:	df000204 	addi	fp,sp,8
    debc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    dec0:	d1600604 	addi	r5,gp,-32744
    dec4:	e13fff17 	ldw	r4,-4(fp)
    dec8:	000e1d40 	call	e1d4 <alt_find_dev>
    decc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    ded0:	e0bffe17 	ldw	r2,-8(fp)
}
    ded4:	e037883a 	mov	sp,fp
    ded8:	dfc00117 	ldw	ra,4(sp)
    dedc:	df000017 	ldw	fp,0(sp)
    dee0:	dec00204 	addi	sp,sp,8
    dee4:	f800283a 	ret

0000dee8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    dee8:	defff504 	addi	sp,sp,-44
    deec:	df000a15 	stw	fp,40(sp)
    def0:	df000a04 	addi	fp,sp,40
    def4:	e13ffc15 	stw	r4,-16(fp)
    def8:	e17ffd15 	stw	r5,-12(fp)
    defc:	e1bffe15 	stw	r6,-8(fp)
    df00:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    df04:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    df08:	d0a80817 	ldw	r2,-24544(gp)
  
  if (alt_ticks_per_second ())
    df0c:	10003c26 	beq	r2,zero,e000 <alt_alarm_start+0x118>
  {
    if (alarm)
    df10:	e0bffc17 	ldw	r2,-16(fp)
    df14:	10003826 	beq	r2,zero,dff8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    df18:	e0bffc17 	ldw	r2,-16(fp)
    df1c:	e0fffe17 	ldw	r3,-8(fp)
    df20:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    df24:	e0bffc17 	ldw	r2,-16(fp)
    df28:	e0ffff17 	ldw	r3,-4(fp)
    df2c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    df30:	0005303a 	rdctl	r2,status
    df34:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    df38:	e0fff917 	ldw	r3,-28(fp)
    df3c:	00bfff84 	movi	r2,-2
    df40:	1884703a 	and	r2,r3,r2
    df44:	1001703a 	wrctl	status,r2
  
  return context;
    df48:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    df4c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    df50:	d0a80917 	ldw	r2,-24540(gp)
      
      current_nticks = alt_nticks();
    df54:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    df58:	e0fffd17 	ldw	r3,-12(fp)
    df5c:	e0bff617 	ldw	r2,-40(fp)
    df60:	1885883a 	add	r2,r3,r2
    df64:	10c00044 	addi	r3,r2,1
    df68:	e0bffc17 	ldw	r2,-16(fp)
    df6c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    df70:	e0bffc17 	ldw	r2,-16(fp)
    df74:	10c00217 	ldw	r3,8(r2)
    df78:	e0bff617 	ldw	r2,-40(fp)
    df7c:	1880042e 	bgeu	r3,r2,df90 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    df80:	e0bffc17 	ldw	r2,-16(fp)
    df84:	00c00044 	movi	r3,1
    df88:	10c00405 	stb	r3,16(r2)
    df8c:	00000206 	br	df98 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    df90:	e0bffc17 	ldw	r2,-16(fp)
    df94:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    df98:	e0bffc17 	ldw	r2,-16(fp)
    df9c:	d0e02b04 	addi	r3,gp,-32596
    dfa0:	e0fffa15 	stw	r3,-24(fp)
    dfa4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    dfa8:	e0bffb17 	ldw	r2,-20(fp)
    dfac:	e0fffa17 	ldw	r3,-24(fp)
    dfb0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    dfb4:	e0bffa17 	ldw	r2,-24(fp)
    dfb8:	10c00017 	ldw	r3,0(r2)
    dfbc:	e0bffb17 	ldw	r2,-20(fp)
    dfc0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    dfc4:	e0bffa17 	ldw	r2,-24(fp)
    dfc8:	10800017 	ldw	r2,0(r2)
    dfcc:	e0fffb17 	ldw	r3,-20(fp)
    dfd0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    dfd4:	e0bffa17 	ldw	r2,-24(fp)
    dfd8:	e0fffb17 	ldw	r3,-20(fp)
    dfdc:	10c00015 	stw	r3,0(r2)
    dfe0:	e0bff817 	ldw	r2,-32(fp)
    dfe4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dfe8:	e0bff717 	ldw	r2,-36(fp)
    dfec:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    dff0:	0005883a 	mov	r2,zero
    dff4:	00000306 	br	e004 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    dff8:	00bffa84 	movi	r2,-22
    dffc:	00000106 	br	e004 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    e000:	00bfde84 	movi	r2,-134
  }
}
    e004:	e037883a 	mov	sp,fp
    e008:	df000017 	ldw	fp,0(sp)
    e00c:	dec00104 	addi	sp,sp,4
    e010:	f800283a 	ret

0000e014 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    e014:	deffff04 	addi	sp,sp,-4
    e018:	df000015 	stw	fp,0(sp)
    e01c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    e020:	0001883a 	nop
    e024:	e037883a 	mov	sp,fp
    e028:	df000017 	ldw	fp,0(sp)
    e02c:	dec00104 	addi	sp,sp,4
    e030:	f800283a 	ret

0000e034 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e034:	defffe04 	addi	sp,sp,-8
    e038:	dfc00115 	stw	ra,4(sp)
    e03c:	df000015 	stw	fp,0(sp)
    e040:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e044:	d0a00917 	ldw	r2,-32732(gp)
    e048:	10000326 	beq	r2,zero,e058 <alt_get_errno+0x24>
    e04c:	d0a00917 	ldw	r2,-32732(gp)
    e050:	103ee83a 	callr	r2
    e054:	00000106 	br	e05c <alt_get_errno+0x28>
    e058:	d0a7ea04 	addi	r2,gp,-24664
}
    e05c:	e037883a 	mov	sp,fp
    e060:	dfc00117 	ldw	ra,4(sp)
    e064:	df000017 	ldw	fp,0(sp)
    e068:	dec00204 	addi	sp,sp,8
    e06c:	f800283a 	ret

0000e070 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    e070:	defffa04 	addi	sp,sp,-24
    e074:	dfc00515 	stw	ra,20(sp)
    e078:	df000415 	stw	fp,16(sp)
    e07c:	df000404 	addi	fp,sp,16
    e080:	e13ffe15 	stw	r4,-8(fp)
    e084:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    e088:	e0bffe17 	ldw	r2,-8(fp)
    e08c:	10000326 	beq	r2,zero,e09c <alt_dev_llist_insert+0x2c>
    e090:	e0bffe17 	ldw	r2,-8(fp)
    e094:	10800217 	ldw	r2,8(r2)
    e098:	1000061e 	bne	r2,zero,e0b4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    e09c:	000e0340 	call	e034 <alt_get_errno>
    e0a0:	1007883a 	mov	r3,r2
    e0a4:	00800584 	movi	r2,22
    e0a8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    e0ac:	00bffa84 	movi	r2,-22
    e0b0:	00001306 	br	e100 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    e0b4:	e0bffe17 	ldw	r2,-8(fp)
    e0b8:	e0ffff17 	ldw	r3,-4(fp)
    e0bc:	e0fffc15 	stw	r3,-16(fp)
    e0c0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    e0c4:	e0bffd17 	ldw	r2,-12(fp)
    e0c8:	e0fffc17 	ldw	r3,-16(fp)
    e0cc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    e0d0:	e0bffc17 	ldw	r2,-16(fp)
    e0d4:	10c00017 	ldw	r3,0(r2)
    e0d8:	e0bffd17 	ldw	r2,-12(fp)
    e0dc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    e0e0:	e0bffc17 	ldw	r2,-16(fp)
    e0e4:	10800017 	ldw	r2,0(r2)
    e0e8:	e0fffd17 	ldw	r3,-12(fp)
    e0ec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    e0f0:	e0bffc17 	ldw	r2,-16(fp)
    e0f4:	e0fffd17 	ldw	r3,-12(fp)
    e0f8:	10c00015 	stw	r3,0(r2)

  return 0;  
    e0fc:	0005883a 	mov	r2,zero
}
    e100:	e037883a 	mov	sp,fp
    e104:	dfc00117 	ldw	ra,4(sp)
    e108:	df000017 	ldw	fp,0(sp)
    e10c:	dec00204 	addi	sp,sp,8
    e110:	f800283a 	ret

0000e114 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    e114:	defffd04 	addi	sp,sp,-12
    e118:	dfc00215 	stw	ra,8(sp)
    e11c:	df000115 	stw	fp,4(sp)
    e120:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    e124:	00800074 	movhi	r2,1
    e128:	10bcdb04 	addi	r2,r2,-3220
    e12c:	e0bfff15 	stw	r2,-4(fp)
    e130:	00000606 	br	e14c <_do_ctors+0x38>
        (*ctor) (); 
    e134:	e0bfff17 	ldw	r2,-4(fp)
    e138:	10800017 	ldw	r2,0(r2)
    e13c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    e140:	e0bfff17 	ldw	r2,-4(fp)
    e144:	10bfff04 	addi	r2,r2,-4
    e148:	e0bfff15 	stw	r2,-4(fp)
    e14c:	e0ffff17 	ldw	r3,-4(fp)
    e150:	00800074 	movhi	r2,1
    e154:	10bcdc04 	addi	r2,r2,-3216
    e158:	18bff62e 	bgeu	r3,r2,e134 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e134>
        (*ctor) (); 
}
    e15c:	0001883a 	nop
    e160:	e037883a 	mov	sp,fp
    e164:	dfc00117 	ldw	ra,4(sp)
    e168:	df000017 	ldw	fp,0(sp)
    e16c:	dec00204 	addi	sp,sp,8
    e170:	f800283a 	ret

0000e174 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    e174:	defffd04 	addi	sp,sp,-12
    e178:	dfc00215 	stw	ra,8(sp)
    e17c:	df000115 	stw	fp,4(sp)
    e180:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    e184:	00800074 	movhi	r2,1
    e188:	10bcdb04 	addi	r2,r2,-3220
    e18c:	e0bfff15 	stw	r2,-4(fp)
    e190:	00000606 	br	e1ac <_do_dtors+0x38>
        (*dtor) (); 
    e194:	e0bfff17 	ldw	r2,-4(fp)
    e198:	10800017 	ldw	r2,0(r2)
    e19c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    e1a0:	e0bfff17 	ldw	r2,-4(fp)
    e1a4:	10bfff04 	addi	r2,r2,-4
    e1a8:	e0bfff15 	stw	r2,-4(fp)
    e1ac:	e0ffff17 	ldw	r3,-4(fp)
    e1b0:	00800074 	movhi	r2,1
    e1b4:	10bcdc04 	addi	r2,r2,-3216
    e1b8:	18bff62e 	bgeu	r3,r2,e194 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e194>
        (*dtor) (); 
}
    e1bc:	0001883a 	nop
    e1c0:	e037883a 	mov	sp,fp
    e1c4:	dfc00117 	ldw	ra,4(sp)
    e1c8:	df000017 	ldw	fp,0(sp)
    e1cc:	dec00204 	addi	sp,sp,8
    e1d0:	f800283a 	ret

0000e1d4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    e1d4:	defffa04 	addi	sp,sp,-24
    e1d8:	dfc00515 	stw	ra,20(sp)
    e1dc:	df000415 	stw	fp,16(sp)
    e1e0:	df000404 	addi	fp,sp,16
    e1e4:	e13ffe15 	stw	r4,-8(fp)
    e1e8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    e1ec:	e0bfff17 	ldw	r2,-4(fp)
    e1f0:	10800017 	ldw	r2,0(r2)
    e1f4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    e1f8:	e13ffe17 	ldw	r4,-8(fp)
    e1fc:	00004740 	call	474 <strlen>
    e200:	10800044 	addi	r2,r2,1
    e204:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    e208:	00000d06 	br	e240 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    e20c:	e0bffc17 	ldw	r2,-16(fp)
    e210:	10800217 	ldw	r2,8(r2)
    e214:	e0fffd17 	ldw	r3,-12(fp)
    e218:	180d883a 	mov	r6,r3
    e21c:	e17ffe17 	ldw	r5,-8(fp)
    e220:	1009883a 	mov	r4,r2
    e224:	000f0280 	call	f028 <memcmp>
    e228:	1000021e 	bne	r2,zero,e234 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    e22c:	e0bffc17 	ldw	r2,-16(fp)
    e230:	00000706 	br	e250 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    e234:	e0bffc17 	ldw	r2,-16(fp)
    e238:	10800017 	ldw	r2,0(r2)
    e23c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    e240:	e0fffc17 	ldw	r3,-16(fp)
    e244:	e0bfff17 	ldw	r2,-4(fp)
    e248:	18bff01e 	bne	r3,r2,e20c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e20c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    e24c:	0005883a 	mov	r2,zero
}
    e250:	e037883a 	mov	sp,fp
    e254:	dfc00117 	ldw	ra,4(sp)
    e258:	df000017 	ldw	fp,0(sp)
    e25c:	dec00204 	addi	sp,sp,8
    e260:	f800283a 	ret

0000e264 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    e264:	defffe04 	addi	sp,sp,-8
    e268:	dfc00115 	stw	ra,4(sp)
    e26c:	df000015 	stw	fp,0(sp)
    e270:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    e274:	01440004 	movi	r5,4096
    e278:	0009883a 	mov	r4,zero
    e27c:	000eeb00 	call	eeb0 <alt_icache_flush>
#endif
}
    e280:	0001883a 	nop
    e284:	e037883a 	mov	sp,fp
    e288:	dfc00117 	ldw	ra,4(sp)
    e28c:	df000017 	ldw	fp,0(sp)
    e290:	dec00204 	addi	sp,sp,8
    e294:	f800283a 	ret

0000e298 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    e298:	defff904 	addi	sp,sp,-28
    e29c:	dfc00615 	stw	ra,24(sp)
    e2a0:	df000515 	stw	fp,20(sp)
    e2a4:	df000504 	addi	fp,sp,20
    e2a8:	e13ffc15 	stw	r4,-16(fp)
    e2ac:	e17ffd15 	stw	r5,-12(fp)
    e2b0:	e1bffe15 	stw	r6,-8(fp)
    e2b4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    e2b8:	e1bfff17 	ldw	r6,-4(fp)
    e2bc:	e17ffe17 	ldw	r5,-8(fp)
    e2c0:	e13ffd17 	ldw	r4,-12(fp)
    e2c4:	000e6580 	call	e658 <open>
    e2c8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    e2cc:	e0bffb17 	ldw	r2,-20(fp)
    e2d0:	10001c16 	blt	r2,zero,e344 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    e2d4:	00800074 	movhi	r2,1
    e2d8:	10bfb904 	addi	r2,r2,-284
    e2dc:	e0fffb17 	ldw	r3,-20(fp)
    e2e0:	18c00324 	muli	r3,r3,12
    e2e4:	10c5883a 	add	r2,r2,r3
    e2e8:	10c00017 	ldw	r3,0(r2)
    e2ec:	e0bffc17 	ldw	r2,-16(fp)
    e2f0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    e2f4:	00800074 	movhi	r2,1
    e2f8:	10bfb904 	addi	r2,r2,-284
    e2fc:	e0fffb17 	ldw	r3,-20(fp)
    e300:	18c00324 	muli	r3,r3,12
    e304:	10c5883a 	add	r2,r2,r3
    e308:	10800104 	addi	r2,r2,4
    e30c:	10c00017 	ldw	r3,0(r2)
    e310:	e0bffc17 	ldw	r2,-16(fp)
    e314:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    e318:	00800074 	movhi	r2,1
    e31c:	10bfb904 	addi	r2,r2,-284
    e320:	e0fffb17 	ldw	r3,-20(fp)
    e324:	18c00324 	muli	r3,r3,12
    e328:	10c5883a 	add	r2,r2,r3
    e32c:	10800204 	addi	r2,r2,8
    e330:	10c00017 	ldw	r3,0(r2)
    e334:	e0bffc17 	ldw	r2,-16(fp)
    e338:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    e33c:	e13ffb17 	ldw	r4,-20(fp)
    e340:	000385c0 	call	385c <alt_release_fd>
  }
} 
    e344:	0001883a 	nop
    e348:	e037883a 	mov	sp,fp
    e34c:	dfc00117 	ldw	ra,4(sp)
    e350:	df000017 	ldw	fp,0(sp)
    e354:	dec00204 	addi	sp,sp,8
    e358:	f800283a 	ret

0000e35c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    e35c:	defffb04 	addi	sp,sp,-20
    e360:	dfc00415 	stw	ra,16(sp)
    e364:	df000315 	stw	fp,12(sp)
    e368:	df000304 	addi	fp,sp,12
    e36c:	e13ffd15 	stw	r4,-12(fp)
    e370:	e17ffe15 	stw	r5,-8(fp)
    e374:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    e378:	01c07fc4 	movi	r7,511
    e37c:	01800044 	movi	r6,1
    e380:	e17ffd17 	ldw	r5,-12(fp)
    e384:	01000074 	movhi	r4,1
    e388:	213fbc04 	addi	r4,r4,-272
    e38c:	000e2980 	call	e298 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    e390:	01c07fc4 	movi	r7,511
    e394:	000d883a 	mov	r6,zero
    e398:	e17ffe17 	ldw	r5,-8(fp)
    e39c:	01000074 	movhi	r4,1
    e3a0:	213fb904 	addi	r4,r4,-284
    e3a4:	000e2980 	call	e298 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    e3a8:	01c07fc4 	movi	r7,511
    e3ac:	01800044 	movi	r6,1
    e3b0:	e17fff17 	ldw	r5,-4(fp)
    e3b4:	01000074 	movhi	r4,1
    e3b8:	213fbf04 	addi	r4,r4,-260
    e3bc:	000e2980 	call	e298 <alt_open_fd>
}  
    e3c0:	0001883a 	nop
    e3c4:	e037883a 	mov	sp,fp
    e3c8:	dfc00117 	ldw	ra,4(sp)
    e3cc:	df000017 	ldw	fp,0(sp)
    e3d0:	dec00204 	addi	sp,sp,8
    e3d4:	f800283a 	ret

0000e3d8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    e3d8:	defff004 	addi	sp,sp,-64
    e3dc:	df000f15 	stw	fp,60(sp)
    e3e0:	df000f04 	addi	fp,sp,60
    e3e4:	e13ffd15 	stw	r4,-12(fp)
    e3e8:	e17ffe15 	stw	r5,-8(fp)
    e3ec:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    e3f0:	00bffa84 	movi	r2,-22
    e3f4:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    e3f8:	e0bffd17 	ldw	r2,-12(fp)
    e3fc:	10800828 	cmpgeui	r2,r2,32
    e400:	1000501e 	bne	r2,zero,e544 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e404:	0005303a 	rdctl	r2,status
    e408:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e40c:	e0fff617 	ldw	r3,-40(fp)
    e410:	00bfff84 	movi	r2,-2
    e414:	1884703a 	and	r2,r3,r2
    e418:	1001703a 	wrctl	status,r2
  
  return context;
    e41c:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    e420:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
    e424:	008000b4 	movhi	r2,2
    e428:	10a9cf04 	addi	r2,r2,-22724
    e42c:	e0fffd17 	ldw	r3,-12(fp)
    e430:	180690fa 	slli	r3,r3,3
    e434:	10c5883a 	add	r2,r2,r3
    e438:	e0ffff17 	ldw	r3,-4(fp)
    e43c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    e440:	008000b4 	movhi	r2,2
    e444:	10a9cf04 	addi	r2,r2,-22724
    e448:	e0fffd17 	ldw	r3,-12(fp)
    e44c:	180690fa 	slli	r3,r3,3
    e450:	10c5883a 	add	r2,r2,r3
    e454:	10800104 	addi	r2,r2,4
    e458:	e0fffe17 	ldw	r3,-8(fp)
    e45c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    e460:	e0bfff17 	ldw	r2,-4(fp)
    e464:	10001926 	beq	r2,zero,e4cc <alt_irq_register+0xf4>
    e468:	e0bffd17 	ldw	r2,-12(fp)
    e46c:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e470:	0005303a 	rdctl	r2,status
    e474:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e478:	e0fff717 	ldw	r3,-36(fp)
    e47c:	00bfff84 	movi	r2,-2
    e480:	1884703a 	and	r2,r3,r2
    e484:	1001703a 	wrctl	status,r2
  
  return context;
    e488:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    e48c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    e490:	00c00044 	movi	r3,1
    e494:	e0bff217 	ldw	r2,-56(fp)
    e498:	1884983a 	sll	r2,r3,r2
    e49c:	1007883a 	mov	r3,r2
    e4a0:	d0a80717 	ldw	r2,-24548(gp)
    e4a4:	1884b03a 	or	r2,r3,r2
    e4a8:	d0a80715 	stw	r2,-24548(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    e4ac:	d0a80717 	ldw	r2,-24548(gp)
    e4b0:	100170fa 	wrctl	ienable,r2
    e4b4:	e0bff817 	ldw	r2,-32(fp)
    e4b8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e4bc:	e0bff917 	ldw	r2,-28(fp)
    e4c0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    e4c4:	0005883a 	mov	r2,zero
    e4c8:	00001906 	br	e530 <alt_irq_register+0x158>
    e4cc:	e0bffd17 	ldw	r2,-12(fp)
    e4d0:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e4d4:	0005303a 	rdctl	r2,status
    e4d8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e4dc:	e0fffa17 	ldw	r3,-24(fp)
    e4e0:	00bfff84 	movi	r2,-2
    e4e4:	1884703a 	and	r2,r3,r2
    e4e8:	1001703a 	wrctl	status,r2
  
  return context;
    e4ec:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    e4f0:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
    e4f4:	00c00044 	movi	r3,1
    e4f8:	e0bff417 	ldw	r2,-48(fp)
    e4fc:	1884983a 	sll	r2,r3,r2
    e500:	0084303a 	nor	r2,zero,r2
    e504:	1007883a 	mov	r3,r2
    e508:	d0a80717 	ldw	r2,-24548(gp)
    e50c:	1884703a 	and	r2,r3,r2
    e510:	d0a80715 	stw	r2,-24548(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    e514:	d0a80717 	ldw	r2,-24548(gp)
    e518:	100170fa 	wrctl	ienable,r2
    e51c:	e0bffb17 	ldw	r2,-20(fp)
    e520:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e524:	e0bffc17 	ldw	r2,-16(fp)
    e528:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    e52c:	0005883a 	mov	r2,zero
    e530:	e0bff115 	stw	r2,-60(fp)
    e534:	e0bff317 	ldw	r2,-52(fp)
    e538:	e0bff515 	stw	r2,-44(fp)
    e53c:	e0bff517 	ldw	r2,-44(fp)
    e540:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    e544:	e0bff117 	ldw	r2,-60(fp)
}
    e548:	e037883a 	mov	sp,fp
    e54c:	df000017 	ldw	fp,0(sp)
    e550:	dec00104 	addi	sp,sp,4
    e554:	f800283a 	ret

0000e558 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e558:	defffe04 	addi	sp,sp,-8
    e55c:	dfc00115 	stw	ra,4(sp)
    e560:	df000015 	stw	fp,0(sp)
    e564:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e568:	d0a00917 	ldw	r2,-32732(gp)
    e56c:	10000326 	beq	r2,zero,e57c <alt_get_errno+0x24>
    e570:	d0a00917 	ldw	r2,-32732(gp)
    e574:	103ee83a 	callr	r2
    e578:	00000106 	br	e580 <alt_get_errno+0x28>
    e57c:	d0a7ea04 	addi	r2,gp,-24664
}
    e580:	e037883a 	mov	sp,fp
    e584:	dfc00117 	ldw	ra,4(sp)
    e588:	df000017 	ldw	fp,0(sp)
    e58c:	dec00204 	addi	sp,sp,8
    e590:	f800283a 	ret

0000e594 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    e594:	defffd04 	addi	sp,sp,-12
    e598:	df000215 	stw	fp,8(sp)
    e59c:	df000204 	addi	fp,sp,8
    e5a0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    e5a4:	e0bfff17 	ldw	r2,-4(fp)
    e5a8:	10800217 	ldw	r2,8(r2)
    e5ac:	10d00034 	orhi	r3,r2,16384
    e5b0:	e0bfff17 	ldw	r2,-4(fp)
    e5b4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    e5b8:	e03ffe15 	stw	zero,-8(fp)
    e5bc:	00001d06 	br	e634 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    e5c0:	00800074 	movhi	r2,1
    e5c4:	10bfb904 	addi	r2,r2,-284
    e5c8:	e0fffe17 	ldw	r3,-8(fp)
    e5cc:	18c00324 	muli	r3,r3,12
    e5d0:	10c5883a 	add	r2,r2,r3
    e5d4:	10c00017 	ldw	r3,0(r2)
    e5d8:	e0bfff17 	ldw	r2,-4(fp)
    e5dc:	10800017 	ldw	r2,0(r2)
    e5e0:	1880111e 	bne	r3,r2,e628 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    e5e4:	00800074 	movhi	r2,1
    e5e8:	10bfb904 	addi	r2,r2,-284
    e5ec:	e0fffe17 	ldw	r3,-8(fp)
    e5f0:	18c00324 	muli	r3,r3,12
    e5f4:	10c5883a 	add	r2,r2,r3
    e5f8:	10800204 	addi	r2,r2,8
    e5fc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    e600:	1000090e 	bge	r2,zero,e628 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    e604:	e0bffe17 	ldw	r2,-8(fp)
    e608:	10c00324 	muli	r3,r2,12
    e60c:	00800074 	movhi	r2,1
    e610:	10bfb904 	addi	r2,r2,-284
    e614:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    e618:	e0bfff17 	ldw	r2,-4(fp)
    e61c:	18800226 	beq	r3,r2,e628 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    e620:	00bffcc4 	movi	r2,-13
    e624:	00000806 	br	e648 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    e628:	e0bffe17 	ldw	r2,-8(fp)
    e62c:	10800044 	addi	r2,r2,1
    e630:	e0bffe15 	stw	r2,-8(fp)
    e634:	d0a00817 	ldw	r2,-32736(gp)
    e638:	1007883a 	mov	r3,r2
    e63c:	e0bffe17 	ldw	r2,-8(fp)
    e640:	18bfdf2e 	bgeu	r3,r2,e5c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e5c0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    e644:	0005883a 	mov	r2,zero
}
    e648:	e037883a 	mov	sp,fp
    e64c:	df000017 	ldw	fp,0(sp)
    e650:	dec00104 	addi	sp,sp,4
    e654:	f800283a 	ret

0000e658 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    e658:	defff604 	addi	sp,sp,-40
    e65c:	dfc00915 	stw	ra,36(sp)
    e660:	df000815 	stw	fp,32(sp)
    e664:	df000804 	addi	fp,sp,32
    e668:	e13ffd15 	stw	r4,-12(fp)
    e66c:	e17ffe15 	stw	r5,-8(fp)
    e670:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    e674:	00bfffc4 	movi	r2,-1
    e678:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    e67c:	00bffb44 	movi	r2,-19
    e680:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    e684:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    e688:	d1600604 	addi	r5,gp,-32744
    e68c:	e13ffd17 	ldw	r4,-12(fp)
    e690:	000e1d40 	call	e1d4 <alt_find_dev>
    e694:	e0bff815 	stw	r2,-32(fp)
    e698:	e0bff817 	ldw	r2,-32(fp)
    e69c:	1000051e 	bne	r2,zero,e6b4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    e6a0:	e13ffd17 	ldw	r4,-12(fp)
    e6a4:	000eccc0 	call	eccc <alt_find_file>
    e6a8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    e6ac:	00800044 	movi	r2,1
    e6b0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    e6b4:	e0bff817 	ldw	r2,-32(fp)
    e6b8:	10002926 	beq	r2,zero,e760 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    e6bc:	e13ff817 	ldw	r4,-32(fp)
    e6c0:	000edd40 	call	edd4 <alt_get_fd>
    e6c4:	e0bff915 	stw	r2,-28(fp)
    e6c8:	e0bff917 	ldw	r2,-28(fp)
    e6cc:	1000030e 	bge	r2,zero,e6dc <open+0x84>
    {
      status = index;
    e6d0:	e0bff917 	ldw	r2,-28(fp)
    e6d4:	e0bffa15 	stw	r2,-24(fp)
    e6d8:	00002306 	br	e768 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    e6dc:	e0bff917 	ldw	r2,-28(fp)
    e6e0:	10c00324 	muli	r3,r2,12
    e6e4:	00800074 	movhi	r2,1
    e6e8:	10bfb904 	addi	r2,r2,-284
    e6ec:	1885883a 	add	r2,r3,r2
    e6f0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    e6f4:	e0fffe17 	ldw	r3,-8(fp)
    e6f8:	00900034 	movhi	r2,16384
    e6fc:	10bfffc4 	addi	r2,r2,-1
    e700:	1886703a 	and	r3,r3,r2
    e704:	e0bffc17 	ldw	r2,-16(fp)
    e708:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    e70c:	e0bffb17 	ldw	r2,-20(fp)
    e710:	1000051e 	bne	r2,zero,e728 <open+0xd0>
    e714:	e13ffc17 	ldw	r4,-16(fp)
    e718:	000e5940 	call	e594 <alt_file_locked>
    e71c:	e0bffa15 	stw	r2,-24(fp)
    e720:	e0bffa17 	ldw	r2,-24(fp)
    e724:	10001016 	blt	r2,zero,e768 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    e728:	e0bff817 	ldw	r2,-32(fp)
    e72c:	10800317 	ldw	r2,12(r2)
    e730:	10000826 	beq	r2,zero,e754 <open+0xfc>
    e734:	e0bff817 	ldw	r2,-32(fp)
    e738:	10800317 	ldw	r2,12(r2)
    e73c:	e1ffff17 	ldw	r7,-4(fp)
    e740:	e1bffe17 	ldw	r6,-8(fp)
    e744:	e17ffd17 	ldw	r5,-12(fp)
    e748:	e13ffc17 	ldw	r4,-16(fp)
    e74c:	103ee83a 	callr	r2
    e750:	00000106 	br	e758 <open+0x100>
    e754:	0005883a 	mov	r2,zero
    e758:	e0bffa15 	stw	r2,-24(fp)
    e75c:	00000206 	br	e768 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    e760:	00bffb44 	movi	r2,-19
    e764:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    e768:	e0bffa17 	ldw	r2,-24(fp)
    e76c:	1000090e 	bge	r2,zero,e794 <open+0x13c>
  {
    alt_release_fd (index);  
    e770:	e13ff917 	ldw	r4,-28(fp)
    e774:	000385c0 	call	385c <alt_release_fd>
    ALT_ERRNO = -status;
    e778:	000e5580 	call	e558 <alt_get_errno>
    e77c:	1007883a 	mov	r3,r2
    e780:	e0bffa17 	ldw	r2,-24(fp)
    e784:	0085c83a 	sub	r2,zero,r2
    e788:	18800015 	stw	r2,0(r3)
    return -1;
    e78c:	00bfffc4 	movi	r2,-1
    e790:	00000106 	br	e798 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    e794:	e0bff917 	ldw	r2,-28(fp)
}
    e798:	e037883a 	mov	sp,fp
    e79c:	dfc00117 	ldw	ra,4(sp)
    e7a0:	df000017 	ldw	fp,0(sp)
    e7a4:	dec00204 	addi	sp,sp,8
    e7a8:	f800283a 	ret

0000e7ac <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    e7ac:	defffa04 	addi	sp,sp,-24
    e7b0:	df000515 	stw	fp,20(sp)
    e7b4:	df000504 	addi	fp,sp,20
    e7b8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e7bc:	0005303a 	rdctl	r2,status
    e7c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e7c4:	e0fffc17 	ldw	r3,-16(fp)
    e7c8:	00bfff84 	movi	r2,-2
    e7cc:	1884703a 	and	r2,r3,r2
    e7d0:	1001703a 	wrctl	status,r2
  
  return context;
    e7d4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    e7d8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    e7dc:	e0bfff17 	ldw	r2,-4(fp)
    e7e0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    e7e4:	e0bffd17 	ldw	r2,-12(fp)
    e7e8:	10800017 	ldw	r2,0(r2)
    e7ec:	e0fffd17 	ldw	r3,-12(fp)
    e7f0:	18c00117 	ldw	r3,4(r3)
    e7f4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    e7f8:	e0bffd17 	ldw	r2,-12(fp)
    e7fc:	10800117 	ldw	r2,4(r2)
    e800:	e0fffd17 	ldw	r3,-12(fp)
    e804:	18c00017 	ldw	r3,0(r3)
    e808:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    e80c:	e0bffd17 	ldw	r2,-12(fp)
    e810:	e0fffd17 	ldw	r3,-12(fp)
    e814:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    e818:	e0bffd17 	ldw	r2,-12(fp)
    e81c:	e0fffd17 	ldw	r3,-12(fp)
    e820:	10c00015 	stw	r3,0(r2)
    e824:	e0bffb17 	ldw	r2,-20(fp)
    e828:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e82c:	e0bffe17 	ldw	r2,-8(fp)
    e830:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    e834:	0001883a 	nop
    e838:	e037883a 	mov	sp,fp
    e83c:	df000017 	ldw	fp,0(sp)
    e840:	dec00104 	addi	sp,sp,4
    e844:	f800283a 	ret

0000e848 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    e848:	defffb04 	addi	sp,sp,-20
    e84c:	dfc00415 	stw	ra,16(sp)
    e850:	df000315 	stw	fp,12(sp)
    e854:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    e858:	d0a02b17 	ldw	r2,-32596(gp)
    e85c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    e860:	d0a80917 	ldw	r2,-24540(gp)
    e864:	10800044 	addi	r2,r2,1
    e868:	d0a80915 	stw	r2,-24540(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    e86c:	00002e06 	br	e928 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    e870:	e0bffd17 	ldw	r2,-12(fp)
    e874:	10800017 	ldw	r2,0(r2)
    e878:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    e87c:	e0bffd17 	ldw	r2,-12(fp)
    e880:	10800403 	ldbu	r2,16(r2)
    e884:	10803fcc 	andi	r2,r2,255
    e888:	10000426 	beq	r2,zero,e89c <alt_tick+0x54>
    e88c:	d0a80917 	ldw	r2,-24540(gp)
    e890:	1000021e 	bne	r2,zero,e89c <alt_tick+0x54>
    {
      alarm->rollover = 0;
    e894:	e0bffd17 	ldw	r2,-12(fp)
    e898:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    e89c:	e0bffd17 	ldw	r2,-12(fp)
    e8a0:	10800217 	ldw	r2,8(r2)
    e8a4:	d0e80917 	ldw	r3,-24540(gp)
    e8a8:	18801d36 	bltu	r3,r2,e920 <alt_tick+0xd8>
    e8ac:	e0bffd17 	ldw	r2,-12(fp)
    e8b0:	10800403 	ldbu	r2,16(r2)
    e8b4:	10803fcc 	andi	r2,r2,255
    e8b8:	1000191e 	bne	r2,zero,e920 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    e8bc:	e0bffd17 	ldw	r2,-12(fp)
    e8c0:	10800317 	ldw	r2,12(r2)
    e8c4:	e0fffd17 	ldw	r3,-12(fp)
    e8c8:	18c00517 	ldw	r3,20(r3)
    e8cc:	1809883a 	mov	r4,r3
    e8d0:	103ee83a 	callr	r2
    e8d4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    e8d8:	e0bfff17 	ldw	r2,-4(fp)
    e8dc:	1000031e 	bne	r2,zero,e8ec <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    e8e0:	e13ffd17 	ldw	r4,-12(fp)
    e8e4:	000e7ac0 	call	e7ac <alt_alarm_stop>
    e8e8:	00000d06 	br	e920 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    e8ec:	e0bffd17 	ldw	r2,-12(fp)
    e8f0:	10c00217 	ldw	r3,8(r2)
    e8f4:	e0bfff17 	ldw	r2,-4(fp)
    e8f8:	1887883a 	add	r3,r3,r2
    e8fc:	e0bffd17 	ldw	r2,-12(fp)
    e900:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    e904:	e0bffd17 	ldw	r2,-12(fp)
    e908:	10c00217 	ldw	r3,8(r2)
    e90c:	d0a80917 	ldw	r2,-24540(gp)
    e910:	1880032e 	bgeu	r3,r2,e920 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    e914:	e0bffd17 	ldw	r2,-12(fp)
    e918:	00c00044 	movi	r3,1
    e91c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    e920:	e0bffe17 	ldw	r2,-8(fp)
    e924:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    e928:	e0fffd17 	ldw	r3,-12(fp)
    e92c:	d0a02b04 	addi	r2,gp,-32596
    e930:	18bfcf1e 	bne	r3,r2,e870 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e870>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    e934:	0004a480 	call	4a48 <OSTimeTick>
}
    e938:	0001883a 	nop
    e93c:	e037883a 	mov	sp,fp
    e940:	dfc00117 	ldw	ra,4(sp)
    e944:	df000017 	ldw	fp,0(sp)
    e948:	dec00204 	addi	sp,sp,8
    e94c:	f800283a 	ret

0000e950 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    e950:	deffff04 	addi	sp,sp,-4
    e954:	df000015 	stw	fp,0(sp)
    e958:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    e95c:	000170fa 	wrctl	ienable,zero
}
    e960:	0001883a 	nop
    e964:	e037883a 	mov	sp,fp
    e968:	df000017 	ldw	fp,0(sp)
    e96c:	dec00104 	addi	sp,sp,4
    e970:	f800283a 	ret

0000e974 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
    e974:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
    e978:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
    e97c:	d1280217 	ldw	r4,-24568(gp)

      stw ra,  0(sp)
    e980:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
    e984:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
    e988:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
    e98c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
    e990:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
    e994:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
    e998:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
    e99c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
    e9a0:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
    e9a4:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
    e9a8:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
    e9ac:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    e9b0:	000ebe80 	call	ebe8 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
    e9b4:	d127fd17 	ldw	r4,-24588(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
    e9b8:	d167f507 	ldb	r5,-24620(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
    e9bc:	d1280215 	stw	r4,-24568(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
    e9c0:	d167f545 	stb	r5,-24619(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
    e9c4:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
    e9c8:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
    e9cc:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
    e9d0:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
    e9d4:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
    e9d8:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
    e9dc:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
    e9e0:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
    e9e4:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
    e9e8:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
    e9ec:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
    e9f0:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
    e9f4:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
    e9f8:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
    e9fc:	f800283a 	ret

0000ea00 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
    ea00:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
    ea04:	047fff84 	movi	r17,-2
      and   r18, r18, r17
    ea08:	9464703a 	and	r18,r18,r17
      wrctl status, r18
    ea0c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    ea10:	000ebe80 	call	ebe8 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
    ea14:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
    ea18:	d4a7f345 	stb	r18,-24627(gp)

      /*
       * start execution of the new task.
       */

      br 9b
    ea1c:	003fe506 	br	e9b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e9b4>

0000ea20 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
    ea20:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
    ea24:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
    ea28:	10800054 	ori	r2,r2,1
      wrctl status, r2
    ea2c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
    ea30:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
    ea34:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
    ea38:	dec00204 	addi	sp,sp,8

      callr r2
    ea3c:	103ee83a 	callr	r2

      nop
    ea40:	0001883a 	nop

0000ea44 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
    ea44:	defff704 	addi	sp,sp,-36
    ea48:	dfc00815 	stw	ra,32(sp)
    ea4c:	df000715 	stw	fp,28(sp)
    ea50:	df000704 	addi	fp,sp,28
    ea54:	e13ffc15 	stw	r4,-16(fp)
    ea58:	e17ffd15 	stw	r5,-12(fp)
    ea5c:	e1bffe15 	stw	r6,-8(fp)
    ea60:	3805883a 	mov	r2,r7
    ea64:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
    ea68:	e0fffe17 	ldw	r3,-8(fp)
    ea6c:	00bfff04 	movi	r2,-4
    ea70:	1884703a 	and	r2,r3,r2
    ea74:	10bef704 	addi	r2,r2,-1060
    ea78:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
    ea7c:	01810904 	movi	r6,1060
    ea80:	000b883a 	mov	r5,zero
    ea84:	e13ff917 	ldw	r4,-28(fp)
    ea88:	0001a840 	call	1a84 <memset>
    ea8c:	e0bff917 	ldw	r2,-28(fp)
    ea90:	10c0bb04 	addi	r3,r2,748
    ea94:	e0bff917 	ldw	r2,-28(fp)
    ea98:	10c00115 	stw	r3,4(r2)
    ea9c:	e0bff917 	ldw	r2,-28(fp)
    eaa0:	10c0d504 	addi	r3,r2,852
    eaa4:	e0bff917 	ldw	r2,-28(fp)
    eaa8:	10c00215 	stw	r3,8(r2)
    eaac:	e0bff917 	ldw	r2,-28(fp)
    eab0:	10c0ef04 	addi	r3,r2,956
    eab4:	e0bff917 	ldw	r2,-28(fp)
    eab8:	10c00315 	stw	r3,12(r2)
    eabc:	e0fff917 	ldw	r3,-28(fp)
    eac0:	00800074 	movhi	r2,1
    eac4:	10bda304 	addi	r2,r2,-2420
    eac8:	18800d15 	stw	r2,52(r3)
    eacc:	e0bff917 	ldw	r2,-28(fp)
    ead0:	00c00044 	movi	r3,1
    ead4:	10c02915 	stw	r3,164(r2)
    ead8:	10002a15 	stw	zero,168(r2)
    eadc:	e0bff917 	ldw	r2,-28(fp)
    eae0:	00ccc384 	movi	r3,13070
    eae4:	10c02b0d 	sth	r3,172(r2)
    eae8:	e0bff917 	ldw	r2,-28(fp)
    eaec:	00eaf344 	movi	r3,-21555
    eaf0:	10c02b8d 	sth	r3,174(r2)
    eaf4:	e0bff917 	ldw	r2,-28(fp)
    eaf8:	00c48d04 	movi	r3,4660
    eafc:	10c02c0d 	sth	r3,176(r2)
    eb00:	e0bff917 	ldw	r2,-28(fp)
    eb04:	00f99b44 	movi	r3,-6547
    eb08:	10c02c8d 	sth	r3,178(r2)
    eb0c:	e0bff917 	ldw	r2,-28(fp)
    eb10:	00f7bb04 	movi	r3,-8468
    eb14:	10c02d0d 	sth	r3,180(r2)
    eb18:	e0bff917 	ldw	r2,-28(fp)
    eb1c:	00c00144 	movi	r3,5
    eb20:	10c02d8d 	sth	r3,182(r2)
    eb24:	e0bff917 	ldw	r2,-28(fp)
    eb28:	00c002c4 	movi	r3,11
    eb2c:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
    eb30:	e0bff917 	ldw	r2,-28(fp)
    eb34:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
    eb38:	e0bffa17 	ldw	r2,-24(fp)
    eb3c:	10bff304 	addi	r2,r2,-52
    eb40:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
    eb44:	e0bffb17 	ldw	r2,-20(fp)
    eb48:	10800c04 	addi	r2,r2,48
    eb4c:	e0fffc17 	ldw	r3,-16(fp)
    eb50:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
    eb54:	e0bffb17 	ldw	r2,-20(fp)
    eb58:	10800b04 	addi	r2,r2,44
    eb5c:	e0fffd17 	ldw	r3,-12(fp)
    eb60:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
    eb64:	e0bffb17 	ldw	r2,-20(fp)
    eb68:	10800a04 	addi	r2,r2,40
    eb6c:	e0fff917 	ldw	r3,-28(fp)
    eb70:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
    eb74:	00800074 	movhi	r2,1
    eb78:	10ba8804 	addi	r2,r2,-5600
    eb7c:	10c00104 	addi	r3,r2,4
    eb80:	e0bffb17 	ldw	r2,-20(fp)
    eb84:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
    eb88:	e0bffb17 	ldw	r2,-20(fp)
}
    eb8c:	e037883a 	mov	sp,fp
    eb90:	dfc00117 	ldw	ra,4(sp)
    eb94:	df000017 	ldw	fp,0(sp)
    eb98:	dec00204 	addi	sp,sp,8
    eb9c:	f800283a 	ret

0000eba0 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
    eba0:	defffe04 	addi	sp,sp,-8
    eba4:	df000115 	stw	fp,4(sp)
    eba8:	df000104 	addi	fp,sp,4
    ebac:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
    ebb0:	0001883a 	nop
    ebb4:	e037883a 	mov	sp,fp
    ebb8:	df000017 	ldw	fp,0(sp)
    ebbc:	dec00104 	addi	sp,sp,4
    ebc0:	f800283a 	ret

0000ebc4 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
    ebc4:	defffe04 	addi	sp,sp,-8
    ebc8:	df000115 	stw	fp,4(sp)
    ebcc:	df000104 	addi	fp,sp,4
    ebd0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
    ebd4:	0001883a 	nop
    ebd8:	e037883a 	mov	sp,fp
    ebdc:	df000017 	ldw	fp,0(sp)
    ebe0:	dec00104 	addi	sp,sp,4
    ebe4:	f800283a 	ret

0000ebe8 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
    ebe8:	deffff04 	addi	sp,sp,-4
    ebec:	df000015 	stw	fp,0(sp)
    ebf0:	d839883a 	mov	fp,sp
}
    ebf4:	0001883a 	nop
    ebf8:	e037883a 	mov	sp,fp
    ebfc:	df000017 	ldw	fp,0(sp)
    ec00:	dec00104 	addi	sp,sp,4
    ec04:	f800283a 	ret

0000ec08 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
    ec08:	deffff04 	addi	sp,sp,-4
    ec0c:	df000015 	stw	fp,0(sp)
    ec10:	d839883a 	mov	fp,sp
}
    ec14:	0001883a 	nop
    ec18:	e037883a 	mov	sp,fp
    ec1c:	df000017 	ldw	fp,0(sp)
    ec20:	dec00104 	addi	sp,sp,4
    ec24:	f800283a 	ret

0000ec28 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
    ec28:	deffff04 	addi	sp,sp,-4
    ec2c:	df000015 	stw	fp,0(sp)
    ec30:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
    ec34:	0001883a 	nop
    ec38:	e037883a 	mov	sp,fp
    ec3c:	df000017 	ldw	fp,0(sp)
    ec40:	dec00104 	addi	sp,sp,4
    ec44:	f800283a 	ret

0000ec48 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
    ec48:	deffff04 	addi	sp,sp,-4
    ec4c:	df000015 	stw	fp,0(sp)
    ec50:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
    ec54:	0001883a 	nop
    ec58:	e037883a 	mov	sp,fp
    ec5c:	df000017 	ldw	fp,0(sp)
    ec60:	dec00104 	addi	sp,sp,4
    ec64:	f800283a 	ret

0000ec68 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
    ec68:	deffff04 	addi	sp,sp,-4
    ec6c:	df000015 	stw	fp,0(sp)
    ec70:	d839883a 	mov	fp,sp
}
    ec74:	0001883a 	nop
    ec78:	e037883a 	mov	sp,fp
    ec7c:	df000017 	ldw	fp,0(sp)
    ec80:	dec00104 	addi	sp,sp,4
    ec84:	f800283a 	ret

0000ec88 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
    ec88:	deffff04 	addi	sp,sp,-4
    ec8c:	df000015 	stw	fp,0(sp)
    ec90:	d839883a 	mov	fp,sp
}
    ec94:	0001883a 	nop
    ec98:	e037883a 	mov	sp,fp
    ec9c:	df000017 	ldw	fp,0(sp)
    eca0:	dec00104 	addi	sp,sp,4
    eca4:	f800283a 	ret

0000eca8 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
    eca8:	defffe04 	addi	sp,sp,-8
    ecac:	df000115 	stw	fp,4(sp)
    ecb0:	df000104 	addi	fp,sp,4
    ecb4:	e13fff15 	stw	r4,-4(fp)
}
    ecb8:	0001883a 	nop
    ecbc:	e037883a 	mov	sp,fp
    ecc0:	df000017 	ldw	fp,0(sp)
    ecc4:	dec00104 	addi	sp,sp,4
    ecc8:	f800283a 	ret

0000eccc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    eccc:	defffb04 	addi	sp,sp,-20
    ecd0:	dfc00415 	stw	ra,16(sp)
    ecd4:	df000315 	stw	fp,12(sp)
    ecd8:	df000304 	addi	fp,sp,12
    ecdc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    ece0:	d0a00417 	ldw	r2,-32752(gp)
    ece4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    ece8:	00003106 	br	edb0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    ecec:	e0bffd17 	ldw	r2,-12(fp)
    ecf0:	10800217 	ldw	r2,8(r2)
    ecf4:	1009883a 	mov	r4,r2
    ecf8:	00004740 	call	474 <strlen>
    ecfc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    ed00:	e0bffd17 	ldw	r2,-12(fp)
    ed04:	10c00217 	ldw	r3,8(r2)
    ed08:	e0bffe17 	ldw	r2,-8(fp)
    ed0c:	10bfffc4 	addi	r2,r2,-1
    ed10:	1885883a 	add	r2,r3,r2
    ed14:	10800003 	ldbu	r2,0(r2)
    ed18:	10803fcc 	andi	r2,r2,255
    ed1c:	1080201c 	xori	r2,r2,128
    ed20:	10bfe004 	addi	r2,r2,-128
    ed24:	10800bd8 	cmpnei	r2,r2,47
    ed28:	1000031e 	bne	r2,zero,ed38 <alt_find_file+0x6c>
    {
      len -= 1;
    ed2c:	e0bffe17 	ldw	r2,-8(fp)
    ed30:	10bfffc4 	addi	r2,r2,-1
    ed34:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    ed38:	e0bffe17 	ldw	r2,-8(fp)
    ed3c:	e0ffff17 	ldw	r3,-4(fp)
    ed40:	1885883a 	add	r2,r3,r2
    ed44:	10800003 	ldbu	r2,0(r2)
    ed48:	10803fcc 	andi	r2,r2,255
    ed4c:	1080201c 	xori	r2,r2,128
    ed50:	10bfe004 	addi	r2,r2,-128
    ed54:	10800be0 	cmpeqi	r2,r2,47
    ed58:	1000081e 	bne	r2,zero,ed7c <alt_find_file+0xb0>
    ed5c:	e0bffe17 	ldw	r2,-8(fp)
    ed60:	e0ffff17 	ldw	r3,-4(fp)
    ed64:	1885883a 	add	r2,r3,r2
    ed68:	10800003 	ldbu	r2,0(r2)
    ed6c:	10803fcc 	andi	r2,r2,255
    ed70:	1080201c 	xori	r2,r2,128
    ed74:	10bfe004 	addi	r2,r2,-128
    ed78:	10000a1e 	bne	r2,zero,eda4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    ed7c:	e0bffd17 	ldw	r2,-12(fp)
    ed80:	10800217 	ldw	r2,8(r2)
    ed84:	e0fffe17 	ldw	r3,-8(fp)
    ed88:	180d883a 	mov	r6,r3
    ed8c:	e17fff17 	ldw	r5,-4(fp)
    ed90:	1009883a 	mov	r4,r2
    ed94:	000f0280 	call	f028 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    ed98:	1000021e 	bne	r2,zero,eda4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    ed9c:	e0bffd17 	ldw	r2,-12(fp)
    eda0:	00000706 	br	edc0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    eda4:	e0bffd17 	ldw	r2,-12(fp)
    eda8:	10800017 	ldw	r2,0(r2)
    edac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    edb0:	e0fffd17 	ldw	r3,-12(fp)
    edb4:	d0a00404 	addi	r2,gp,-32752
    edb8:	18bfcc1e 	bne	r3,r2,ecec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ecec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    edbc:	0005883a 	mov	r2,zero
}
    edc0:	e037883a 	mov	sp,fp
    edc4:	dfc00117 	ldw	ra,4(sp)
    edc8:	df000017 	ldw	fp,0(sp)
    edcc:	dec00204 	addi	sp,sp,8
    edd0:	f800283a 	ret

0000edd4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    edd4:	defff904 	addi	sp,sp,-28
    edd8:	dfc00615 	stw	ra,24(sp)
    eddc:	df000515 	stw	fp,20(sp)
    ede0:	df000504 	addi	fp,sp,20
    ede4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    ede8:	00bffa04 	movi	r2,-24
    edec:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
    edf0:	d0a7eb17 	ldw	r2,-24660(gp)
    edf4:	e0bffd15 	stw	r2,-12(fp)
    edf8:	e03ffe0d 	sth	zero,-8(fp)
    edfc:	e0bffe0b 	ldhu	r2,-8(fp)
    ee00:	e0fffe84 	addi	r3,fp,-6
    ee04:	180d883a 	mov	r6,r3
    ee08:	100b883a 	mov	r5,r2
    ee0c:	e13ffd17 	ldw	r4,-12(fp)
    ee10:	000929c0 	call	929c <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    ee14:	e03ffb15 	stw	zero,-20(fp)
    ee18:	00001906 	br	ee80 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    ee1c:	00800074 	movhi	r2,1
    ee20:	10bfb904 	addi	r2,r2,-284
    ee24:	e0fffb17 	ldw	r3,-20(fp)
    ee28:	18c00324 	muli	r3,r3,12
    ee2c:	10c5883a 	add	r2,r2,r3
    ee30:	10800017 	ldw	r2,0(r2)
    ee34:	10000f1e 	bne	r2,zero,ee74 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    ee38:	00800074 	movhi	r2,1
    ee3c:	10bfb904 	addi	r2,r2,-284
    ee40:	e0fffb17 	ldw	r3,-20(fp)
    ee44:	18c00324 	muli	r3,r3,12
    ee48:	10c5883a 	add	r2,r2,r3
    ee4c:	e0ffff17 	ldw	r3,-4(fp)
    ee50:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    ee54:	d0e00817 	ldw	r3,-32736(gp)
    ee58:	e0bffb17 	ldw	r2,-20(fp)
    ee5c:	1880020e 	bge	r3,r2,ee68 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    ee60:	e0bffb17 	ldw	r2,-20(fp)
    ee64:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
    ee68:	e0bffb17 	ldw	r2,-20(fp)
    ee6c:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
    ee70:	00000606 	br	ee8c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    ee74:	e0bffb17 	ldw	r2,-20(fp)
    ee78:	10800044 	addi	r2,r2,1
    ee7c:	e0bffb15 	stw	r2,-20(fp)
    ee80:	e0bffb17 	ldw	r2,-20(fp)
    ee84:	10800810 	cmplti	r2,r2,32
    ee88:	103fe41e 	bne	r2,zero,ee1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ee1c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
    ee8c:	d0a7eb17 	ldw	r2,-24660(gp)
    ee90:	1009883a 	mov	r4,r2
    ee94:	00096140 	call	9614 <OSSemPost>

  return rc;
    ee98:	e0bffc17 	ldw	r2,-16(fp)
}
    ee9c:	e037883a 	mov	sp,fp
    eea0:	dfc00117 	ldw	ra,4(sp)
    eea4:	df000017 	ldw	fp,0(sp)
    eea8:	dec00204 	addi	sp,sp,8
    eeac:	f800283a 	ret

0000eeb0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    eeb0:	defffb04 	addi	sp,sp,-20
    eeb4:	df000415 	stw	fp,16(sp)
    eeb8:	df000404 	addi	fp,sp,16
    eebc:	e13ffe15 	stw	r4,-8(fp)
    eec0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    eec4:	e0bfff17 	ldw	r2,-4(fp)
    eec8:	10840070 	cmpltui	r2,r2,4097
    eecc:	1000021e 	bne	r2,zero,eed8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    eed0:	00840004 	movi	r2,4096
    eed4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    eed8:	e0fffe17 	ldw	r3,-8(fp)
    eedc:	e0bfff17 	ldw	r2,-4(fp)
    eee0:	1885883a 	add	r2,r3,r2
    eee4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    eee8:	e0bffe17 	ldw	r2,-8(fp)
    eeec:	e0bffc15 	stw	r2,-16(fp)
    eef0:	00000506 	br	ef08 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    eef4:	e0bffc17 	ldw	r2,-16(fp)
    eef8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    eefc:	e0bffc17 	ldw	r2,-16(fp)
    ef00:	10800804 	addi	r2,r2,32
    ef04:	e0bffc15 	stw	r2,-16(fp)
    ef08:	e0fffc17 	ldw	r3,-16(fp)
    ef0c:	e0bffd17 	ldw	r2,-12(fp)
    ef10:	18bff836 	bltu	r3,r2,eef4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eef4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    ef14:	e0bffe17 	ldw	r2,-8(fp)
    ef18:	108007cc 	andi	r2,r2,31
    ef1c:	10000226 	beq	r2,zero,ef28 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    ef20:	e0bffc17 	ldw	r2,-16(fp)
    ef24:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    ef28:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    ef2c:	0001883a 	nop
    ef30:	e037883a 	mov	sp,fp
    ef34:	df000017 	ldw	fp,0(sp)
    ef38:	dec00104 	addi	sp,sp,4
    ef3c:	f800283a 	ret

0000ef40 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    ef40:	defffe04 	addi	sp,sp,-8
    ef44:	df000115 	stw	fp,4(sp)
    ef48:	df000104 	addi	fp,sp,4
    ef4c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    ef50:	e0bfff17 	ldw	r2,-4(fp)
    ef54:	10bffe84 	addi	r2,r2,-6
    ef58:	10c00428 	cmpgeui	r3,r2,16
    ef5c:	18001a1e 	bne	r3,zero,efc8 <alt_exception_cause_generated_bad_addr+0x88>
    ef60:	100690ba 	slli	r3,r2,2
    ef64:	00800074 	movhi	r2,1
    ef68:	10bbde04 	addi	r2,r2,-4232
    ef6c:	1885883a 	add	r2,r3,r2
    ef70:	10800017 	ldw	r2,0(r2)
    ef74:	1000683a 	jmp	r2
    ef78:	0000efb8 	rdprs	zero,zero,958
    ef7c:	0000efb8 	rdprs	zero,zero,958
    ef80:	0000efc8 	cmpgei	zero,zero,959
    ef84:	0000efc8 	cmpgei	zero,zero,959
    ef88:	0000efc8 	cmpgei	zero,zero,959
    ef8c:	0000efb8 	rdprs	zero,zero,958
    ef90:	0000efc0 	call	efc <_malloc_r+0xc>
    ef94:	0000efc8 	cmpgei	zero,zero,959
    ef98:	0000efb8 	rdprs	zero,zero,958
    ef9c:	0000efb8 	rdprs	zero,zero,958
    efa0:	0000efc8 	cmpgei	zero,zero,959
    efa4:	0000efb8 	rdprs	zero,zero,958
    efa8:	0000efc0 	call	efc <_malloc_r+0xc>
    efac:	0000efc8 	cmpgei	zero,zero,959
    efb0:	0000efc8 	cmpgei	zero,zero,959
    efb4:	0000efb8 	rdprs	zero,zero,958
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    efb8:	00800044 	movi	r2,1
    efbc:	00000306 	br	efcc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    efc0:	0005883a 	mov	r2,zero
    efc4:	00000106 	br	efcc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    efc8:	0005883a 	mov	r2,zero
  }
}
    efcc:	e037883a 	mov	sp,fp
    efd0:	df000017 	ldw	fp,0(sp)
    efd4:	dec00104 	addi	sp,sp,4
    efd8:	f800283a 	ret

0000efdc <atexit>:
    efdc:	200b883a 	mov	r5,r4
    efe0:	000f883a 	mov	r7,zero
    efe4:	000d883a 	mov	r6,zero
    efe8:	0009883a 	mov	r4,zero
    efec:	000f0a41 	jmpi	f0a4 <__register_exitproc>

0000eff0 <exit>:
    eff0:	defffe04 	addi	sp,sp,-8
    eff4:	000b883a 	mov	r5,zero
    eff8:	dc000015 	stw	r16,0(sp)
    effc:	dfc00115 	stw	ra,4(sp)
    f000:	2021883a 	mov	r16,r4
    f004:	000f1bc0 	call	f1bc <__call_exitprocs>
    f008:	00800074 	movhi	r2,1
    f00c:	10853104 	addi	r2,r2,5316
    f010:	11000017 	ldw	r4,0(r2)
    f014:	20800f17 	ldw	r2,60(r4)
    f018:	10000126 	beq	r2,zero,f020 <exit+0x30>
    f01c:	103ee83a 	callr	r2
    f020:	8009883a 	mov	r4,r16
    f024:	000f33c0 	call	f33c <_exit>

0000f028 <memcmp>:
    f028:	01c000c4 	movi	r7,3
    f02c:	3980192e 	bgeu	r7,r6,f094 <memcmp+0x6c>
    f030:	2144b03a 	or	r2,r4,r5
    f034:	11c4703a 	and	r2,r2,r7
    f038:	10000f26 	beq	r2,zero,f078 <memcmp+0x50>
    f03c:	20800003 	ldbu	r2,0(r4)
    f040:	28c00003 	ldbu	r3,0(r5)
    f044:	10c0151e 	bne	r2,r3,f09c <memcmp+0x74>
    f048:	31bfff84 	addi	r6,r6,-2
    f04c:	01ffffc4 	movi	r7,-1
    f050:	00000406 	br	f064 <memcmp+0x3c>
    f054:	20800003 	ldbu	r2,0(r4)
    f058:	28c00003 	ldbu	r3,0(r5)
    f05c:	31bfffc4 	addi	r6,r6,-1
    f060:	10c00e1e 	bne	r2,r3,f09c <memcmp+0x74>
    f064:	21000044 	addi	r4,r4,1
    f068:	29400044 	addi	r5,r5,1
    f06c:	31fff91e 	bne	r6,r7,f054 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f054>
    f070:	0005883a 	mov	r2,zero
    f074:	f800283a 	ret
    f078:	20c00017 	ldw	r3,0(r4)
    f07c:	28800017 	ldw	r2,0(r5)
    f080:	18bfee1e 	bne	r3,r2,f03c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f03c>
    f084:	31bfff04 	addi	r6,r6,-4
    f088:	21000104 	addi	r4,r4,4
    f08c:	29400104 	addi	r5,r5,4
    f090:	39bff936 	bltu	r7,r6,f078 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f078>
    f094:	303fe91e 	bne	r6,zero,f03c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f03c>
    f098:	003ff506 	br	f070 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f070>
    f09c:	10c5c83a 	sub	r2,r2,r3
    f0a0:	f800283a 	ret

0000f0a4 <__register_exitproc>:
    f0a4:	defffa04 	addi	sp,sp,-24
    f0a8:	dc000315 	stw	r16,12(sp)
    f0ac:	04000074 	movhi	r16,1
    f0b0:	84053104 	addi	r16,r16,5316
    f0b4:	80c00017 	ldw	r3,0(r16)
    f0b8:	dc400415 	stw	r17,16(sp)
    f0bc:	dfc00515 	stw	ra,20(sp)
    f0c0:	18805217 	ldw	r2,328(r3)
    f0c4:	2023883a 	mov	r17,r4
    f0c8:	10003726 	beq	r2,zero,f1a8 <__register_exitproc+0x104>
    f0cc:	10c00117 	ldw	r3,4(r2)
    f0d0:	010007c4 	movi	r4,31
    f0d4:	20c00e16 	blt	r4,r3,f110 <__register_exitproc+0x6c>
    f0d8:	1a000044 	addi	r8,r3,1
    f0dc:	8800221e 	bne	r17,zero,f168 <__register_exitproc+0xc4>
    f0e0:	18c00084 	addi	r3,r3,2
    f0e4:	18c7883a 	add	r3,r3,r3
    f0e8:	18c7883a 	add	r3,r3,r3
    f0ec:	12000115 	stw	r8,4(r2)
    f0f0:	10c7883a 	add	r3,r2,r3
    f0f4:	19400015 	stw	r5,0(r3)
    f0f8:	0005883a 	mov	r2,zero
    f0fc:	dfc00517 	ldw	ra,20(sp)
    f100:	dc400417 	ldw	r17,16(sp)
    f104:	dc000317 	ldw	r16,12(sp)
    f108:	dec00604 	addi	sp,sp,24
    f10c:	f800283a 	ret
    f110:	00800034 	movhi	r2,0
    f114:	10800004 	addi	r2,r2,0
    f118:	10002626 	beq	r2,zero,f1b4 <__register_exitproc+0x110>
    f11c:	01006404 	movi	r4,400
    f120:	d9400015 	stw	r5,0(sp)
    f124:	d9800115 	stw	r6,4(sp)
    f128:	d9c00215 	stw	r7,8(sp)
    f12c:	00000000 	call	0 <__alt_mem_SDRAM>
    f130:	d9400017 	ldw	r5,0(sp)
    f134:	d9800117 	ldw	r6,4(sp)
    f138:	d9c00217 	ldw	r7,8(sp)
    f13c:	10001d26 	beq	r2,zero,f1b4 <__register_exitproc+0x110>
    f140:	81000017 	ldw	r4,0(r16)
    f144:	10000115 	stw	zero,4(r2)
    f148:	02000044 	movi	r8,1
    f14c:	22405217 	ldw	r9,328(r4)
    f150:	0007883a 	mov	r3,zero
    f154:	12400015 	stw	r9,0(r2)
    f158:	20805215 	stw	r2,328(r4)
    f15c:	10006215 	stw	zero,392(r2)
    f160:	10006315 	stw	zero,396(r2)
    f164:	883fde26 	beq	r17,zero,f0e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f0e0>
    f168:	18c9883a 	add	r4,r3,r3
    f16c:	2109883a 	add	r4,r4,r4
    f170:	1109883a 	add	r4,r2,r4
    f174:	21802215 	stw	r6,136(r4)
    f178:	01800044 	movi	r6,1
    f17c:	12406217 	ldw	r9,392(r2)
    f180:	30cc983a 	sll	r6,r6,r3
    f184:	4992b03a 	or	r9,r9,r6
    f188:	12406215 	stw	r9,392(r2)
    f18c:	21c04215 	stw	r7,264(r4)
    f190:	01000084 	movi	r4,2
    f194:	893fd21e 	bne	r17,r4,f0e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f0e0>
    f198:	11006317 	ldw	r4,396(r2)
    f19c:	218cb03a 	or	r6,r4,r6
    f1a0:	11806315 	stw	r6,396(r2)
    f1a4:	003fce06 	br	f0e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f0e0>
    f1a8:	18805304 	addi	r2,r3,332
    f1ac:	18805215 	stw	r2,328(r3)
    f1b0:	003fc606 	br	f0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f0cc>
    f1b4:	00bfffc4 	movi	r2,-1
    f1b8:	003fd006 	br	f0fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f0fc>

0000f1bc <__call_exitprocs>:
    f1bc:	defff504 	addi	sp,sp,-44
    f1c0:	df000915 	stw	fp,36(sp)
    f1c4:	dd400615 	stw	r21,24(sp)
    f1c8:	dc800315 	stw	r18,12(sp)
    f1cc:	dfc00a15 	stw	ra,40(sp)
    f1d0:	ddc00815 	stw	r23,32(sp)
    f1d4:	dd800715 	stw	r22,28(sp)
    f1d8:	dd000515 	stw	r20,20(sp)
    f1dc:	dcc00415 	stw	r19,16(sp)
    f1e0:	dc400215 	stw	r17,8(sp)
    f1e4:	dc000115 	stw	r16,4(sp)
    f1e8:	d9000015 	stw	r4,0(sp)
    f1ec:	2839883a 	mov	fp,r5
    f1f0:	04800044 	movi	r18,1
    f1f4:	057fffc4 	movi	r21,-1
    f1f8:	00800074 	movhi	r2,1
    f1fc:	10853104 	addi	r2,r2,5316
    f200:	12000017 	ldw	r8,0(r2)
    f204:	45005217 	ldw	r20,328(r8)
    f208:	44c05204 	addi	r19,r8,328
    f20c:	a0001c26 	beq	r20,zero,f280 <__call_exitprocs+0xc4>
    f210:	a0800117 	ldw	r2,4(r20)
    f214:	15ffffc4 	addi	r23,r2,-1
    f218:	b8000d16 	blt	r23,zero,f250 <__call_exitprocs+0x94>
    f21c:	14000044 	addi	r16,r2,1
    f220:	8421883a 	add	r16,r16,r16
    f224:	8421883a 	add	r16,r16,r16
    f228:	84402004 	addi	r17,r16,128
    f22c:	a463883a 	add	r17,r20,r17
    f230:	a421883a 	add	r16,r20,r16
    f234:	e0001e26 	beq	fp,zero,f2b0 <__call_exitprocs+0xf4>
    f238:	80804017 	ldw	r2,256(r16)
    f23c:	e0801c26 	beq	fp,r2,f2b0 <__call_exitprocs+0xf4>
    f240:	bdffffc4 	addi	r23,r23,-1
    f244:	843fff04 	addi	r16,r16,-4
    f248:	8c7fff04 	addi	r17,r17,-4
    f24c:	bd7ff91e 	bne	r23,r21,f234 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f234>
    f250:	00800034 	movhi	r2,0
    f254:	10800004 	addi	r2,r2,0
    f258:	10000926 	beq	r2,zero,f280 <__call_exitprocs+0xc4>
    f25c:	a0800117 	ldw	r2,4(r20)
    f260:	1000301e 	bne	r2,zero,f324 <__call_exitprocs+0x168>
    f264:	a0800017 	ldw	r2,0(r20)
    f268:	10003226 	beq	r2,zero,f334 <__call_exitprocs+0x178>
    f26c:	a009883a 	mov	r4,r20
    f270:	98800015 	stw	r2,0(r19)
    f274:	00000000 	call	0 <__alt_mem_SDRAM>
    f278:	9d000017 	ldw	r20,0(r19)
    f27c:	a03fe41e 	bne	r20,zero,f210 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f210>
    f280:	dfc00a17 	ldw	ra,40(sp)
    f284:	df000917 	ldw	fp,36(sp)
    f288:	ddc00817 	ldw	r23,32(sp)
    f28c:	dd800717 	ldw	r22,28(sp)
    f290:	dd400617 	ldw	r21,24(sp)
    f294:	dd000517 	ldw	r20,20(sp)
    f298:	dcc00417 	ldw	r19,16(sp)
    f29c:	dc800317 	ldw	r18,12(sp)
    f2a0:	dc400217 	ldw	r17,8(sp)
    f2a4:	dc000117 	ldw	r16,4(sp)
    f2a8:	dec00b04 	addi	sp,sp,44
    f2ac:	f800283a 	ret
    f2b0:	a0800117 	ldw	r2,4(r20)
    f2b4:	80c00017 	ldw	r3,0(r16)
    f2b8:	10bfffc4 	addi	r2,r2,-1
    f2bc:	15c01426 	beq	r2,r23,f310 <__call_exitprocs+0x154>
    f2c0:	80000015 	stw	zero,0(r16)
    f2c4:	183fde26 	beq	r3,zero,f240 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f240>
    f2c8:	95c8983a 	sll	r4,r18,r23
    f2cc:	a0806217 	ldw	r2,392(r20)
    f2d0:	a5800117 	ldw	r22,4(r20)
    f2d4:	2084703a 	and	r2,r4,r2
    f2d8:	10000b26 	beq	r2,zero,f308 <__call_exitprocs+0x14c>
    f2dc:	a0806317 	ldw	r2,396(r20)
    f2e0:	2088703a 	and	r4,r4,r2
    f2e4:	20000c1e 	bne	r4,zero,f318 <__call_exitprocs+0x15c>
    f2e8:	89400017 	ldw	r5,0(r17)
    f2ec:	d9000017 	ldw	r4,0(sp)
    f2f0:	183ee83a 	callr	r3
    f2f4:	a0800117 	ldw	r2,4(r20)
    f2f8:	15bfbf1e 	bne	r2,r22,f1f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f1f8>
    f2fc:	98800017 	ldw	r2,0(r19)
    f300:	153fcf26 	beq	r2,r20,f240 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f240>
    f304:	003fbc06 	br	f1f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f1f8>
    f308:	183ee83a 	callr	r3
    f30c:	003ff906 	br	f2f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f2f4>
    f310:	a5c00115 	stw	r23,4(r20)
    f314:	003feb06 	br	f2c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f2c4>
    f318:	89000017 	ldw	r4,0(r17)
    f31c:	183ee83a 	callr	r3
    f320:	003ff406 	br	f2f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f2f4>
    f324:	a0800017 	ldw	r2,0(r20)
    f328:	a027883a 	mov	r19,r20
    f32c:	1029883a 	mov	r20,r2
    f330:	003fb606 	br	f20c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f20c>
    f334:	0005883a 	mov	r2,zero
    f338:	003ffb06 	br	f328 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f328>

0000f33c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    f33c:	defffd04 	addi	sp,sp,-12
    f340:	df000215 	stw	fp,8(sp)
    f344:	df000204 	addi	fp,sp,8
    f348:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    f34c:	d027f345 	stb	zero,-24627(gp)
    f350:	e0bfff17 	ldw	r2,-4(fp)
    f354:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    f358:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    f35c:	10000226 	beq	r2,zero,f368 <_exit+0x2c>
    ALT_SIM_FAIL();
    f360:	002af070 	cmpltui	zero,zero,43969
    f364:	00000106 	br	f36c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    f368:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    f36c:	003fff06 	br	f36c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f36c>
