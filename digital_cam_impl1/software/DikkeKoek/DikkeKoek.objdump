
DikkeKoek.elf:     file format elf32-littlenios2
DikkeKoek.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00025d04 memsz 0x00025d04 flags r-x
    LOAD off    0x00026d24 vaddr 0x00025d24 paddr 0x000278a0 align 2**12
         filesz 0x00001b7c memsz 0x00001b7c flags rw-
    LOAD off    0x0002941c vaddr 0x0002941c paddr 0x0002941c align 2**12
         filesz 0x00000000 memsz 0x0000544c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00024748  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001398  0002498c  0002498c  0002598c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b7c  00025d24  000278a0  00026d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000544c  0002941c  0002941c  0002941c  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  0002e868  0002e868  000288a0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000288a0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000014c0  00000000  00000000  000288c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0003f025  00000000  00000000  00029d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000e7ef  00000000  00000000  00068dad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00013cf4  00000000  00000000  0007759c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003f30  00000000  00000000  0008b290  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00005b1d  00000000  00000000  0008f1c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00024fff  00000000  00000000  00094cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  000b9cdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002158  00000000  00000000  000b9d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  000c1416  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000c141c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000c1421  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000c1422  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  000c1423  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  000c142c  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  000c1435  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000c143e  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000053  00000000  00000000  000c1449  2**0
                  CONTENTS, READONLY
 26 .jdi          00008b87  00000000  00000000  000c149c  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0009e762  00000000  00000000  000ca023  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
0002498c l    d  .rodata	00000000 .rodata
00025d24 l    d  .rwdata	00000000 .rwdata
0002941c l    d  .bss	00000000 .bss
0002e868 l    d  .SDRAM	00000000 .SDRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../DikkeKoek_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 algo_ucos.c
00000000 l    df *ABS*	00000000 vector.c
00000000 l    df *ABS*	00000000 fgets.c
00000000 l    df *ABS*	00000000 findfp.c
00004af8 l     F .text	00000008 __fp_unlock
00004b0c l     F .text	0000019c __sinit.part.1
00004ca8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00025d24 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
00006284 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
00025506 l     O .rodata	00000010 zeroes.4404
00008b70 l     F .text	000000bc __sbprintf
00025516 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 vfscanf.c
0002552e l     O .rodata	00000022 basefix.4359
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
00025651 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
0000a6c0 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
00026570 l     O .rwdata	00000020 lc_ctype_charset
00026550 l     O .rwdata	00000020 lc_message_charset
00026590 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
000257f0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
0000e99c l     F .text	00000064 sulp
00025938 l     O .rodata	00000014 fpi.2737
0002594c l     O .rodata	00000028 tinytens
00025924 l     O .rodata	00000014 fpinan.2773
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
00025974 l     O .rodata	00000010 zeroes.4389
00025984 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
00012d88 l     F .text	000000fc __sprint_r.part.0
000259a4 l     O .rodata	00000010 blanks.4348
00025994 l     O .rodata	00000010 zeroes.4349
00014314 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
00014850 l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00025ac4 l     O .rodata	00000010 blanks.4332
00025ab4 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0001a1d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0001a2e4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0001a310 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0001a3fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001a4dc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001a5c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0001a794 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00027814 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0001a9e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00027818 l     O .rwdata	00000004 lockid
00029448 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0002781c l     O .rwdata	00000004 lockid
00029450 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0001c410 l     F .text	00000048 OS_InitMisc
0001c458 l     F .text	0000006c OS_InitRdyList
0001c5c4 l     F .text	000000e4 OS_InitTCBList
0001c330 l     F .text	000000e0 OS_InitEventList
0001c4c4 l     F .text	00000080 OS_InitTaskIdle
0001c544 l     F .text	00000080 OS_InitTaskStat
0001c834 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0001e554 l     F .text	000000f4 OS_FlagTaskRdy
0001e314 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00022604 l     F .text	00000034 alt_dev_reg
00026770 l     O .rwdata	0000106c JTAG_UART
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00022964 l     F .text	000002a4 altera_avalon_jtag_uart_irq
00022c08 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00023530 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000239a4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00023ae4 l     F .text	0000003c alt_get_errno
00023b20 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000294b4 g     O .bss	00000004 alt_instruction_exception_handler
00005c1c g     F .text	00000018 putchar
0000e370 g     F .text	00000074 _mprec_log10
0002786a g     O .rwdata	00000002 OSTaskNameSize
0000e45c g     F .text	0000008c __any_on
000153dc g     F .text	00000054 _isatty_r
000257fc g     O .rodata	00000028 __mprec_tinytens
0001a6d8 g     F .text	000000bc alt_main
00005c34 g     F .text	000000c0 _puts_r
0002e768 g     O .bss	00000100 alt_irq
0000cf50 g     F .text	00000060 _lseek_r
0001ed74 g     F .text	000000cc OS_MemInit
00000c30 g     F .text	0000024c stripCaptureVector
000278a0 g       *ABS*	00000000 __flash_rwdata_start
000225a4 g     F .text	00000060 OSTimeSet
00018b5c g     F .text	00000088 .hidden __eqdf2
00003ba4 g     F .text	000004a4 playerInput
0001b084 g     F .text	00000610 OSEventPendMulti
0002e868 g       *ABS*	00000000 __alt_heap_start
0002412c g     F .text	00000024 OSTaskCreateHook
00005bd8 g     F .text	0000003c printf
00027842 g     O .rwdata	00000002 OSMboxEn
0001b6ec g     F .text	0000004c OSIntEnter
0001690c g     F .text	0000009c _wcrtomb_r
0000660c g     F .text	0000005c __sseek
00004e48 g     F .text	00000010 __sinit
000143d0 g     F .text	00000140 __swbuf_r
00004524 g     F .text	00000058 vectorGet
00027852 g     O .rwdata	00000002 OSQEn
0000ce74 g     F .text	0000007c _setlocale_r
00004cb0 g     F .text	00000068 __sfmoreglue
00002574 g     F .text	000000d4 createKing
00012d70 g     F .text	00000018 ungetc
0001ad58 g     F .text	000000cc __malloc_unlock
00024194 g     F .text	00000020 OSTaskStatHook
00029458 g     O .bss	00000001 OSLockNesting
0000ea00 g     F .text	000015f8 _strtod_r
00027890 g     O .rwdata	00000002 OSDataSize
00029459 g     O .bss	00000001 OSRunning
0000d390 g     F .text	0000015c memmove
000241d4 g     F .text	00000020 OSInitHookBegin
00027888 g     O .rwdata	00000002 OSTmrSize
00004e30 g     F .text	00000018 _cleanup
0000d4ec g     F .text	000000a8 _Balloc
000046ec g     F .text	00000058 printLocation
0002945c g     O .bss	00000004 OSIdleCtr
00018be4 g     F .text	000000dc .hidden __gtdf2
00023edc g     F .text	00000024 altera_nios2_gen2_irq_init
00023fac g       .text	00000000 OSStartTsk
0001cb74 g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
0002788e g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0002782e g     O .rwdata	00000002 OSEventSize
00029460 g     O .bss	00000001 OSPrioHighRdy
000147f4 g     F .text	0000005c _fstat_r
00024150 g     F .text	00000024 OSTaskDelHook
00029428 g     O .bss	00000004 errno
0000a450 g     F .text	0000001c __svfscanf
00006588 g     F .text	00000008 __seofread
00023f8c g       .text	00000000 OSStartHighRdy
00021040 g     F .text	000001e4 OSTaskCreateExt
000156d0 g     F .text	0000123c ___svfiprintf_internal_r
0001de5c g     F .text	00000060 OSFlagPendGetFlagsRdy
0002786e g     O .rwdata	00000002 OSTaskStatStkSize
0001cfd8 g     F .text	00000308 OSFlagAccept
0001f3ac g     F .text	000000b8 OSQFlush
0001ee40 g     F .text	00000140 OSQAccept
00029440 g     O .bss	00000004 alt_argv
0002f7dc g       *ABS*	00000000 _gp
00020e94 g     F .text	000001ac OSTaskCreate
000209a4 g     F .text	000004f0 OSTaskChangePrio
00029454 g     O .bss	00000004 alt_heapsem
0001ce48 g     F .text	00000190 OSDebugInit
00021224 g     F .text	00000344 OSTaskDel
00004adc g     F .text	0000001c fgets
000265f0 g     O .rwdata	00000180 alt_fd_list
0002b544 g     O .bss	00000370 OSFlagTbl
00005c14 g     F .text	00000008 _putchar_r
000010a0 g     F .text	000002d0 generateCaptureList
0001c110 g     F .text	000000b8 OS_EventTaskRemove
00024258 g     F .text	00000090 alt_find_dev
00005938 g     F .text	00000148 memcpy
00015180 g     F .text	0000025c __hexnan
00027858 g     O .rwdata	00000002 OSRdyTblSize
000294e0 g     O .bss	00000064 board
00004b00 g     F .text	0000000c _cleanup_r
00019e48 g     F .text	000000dc .hidden __floatsidf
00023a68 g     F .text	0000007c alt_io_redirect
00018cc0 g     F .text	000000f4 .hidden __ltdf2
0002498c g       *ABS*	00000000 __DTOR_END__
00005cf4 g     F .text	00000014 puts
0002455c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0001ae24 g     F .text	00000120 OSEventNameGet
0002783c g     O .rwdata	00000002 OSFlagMax
0000d218 g     F .text	000000d8 mbrtowc
0000e6b0 g     F .text	00000074 __fpclassifyd
0000a46c g     F .text	0000004c _vfscanf_r
0000e2cc g     F .text	000000a4 __ratio
0001b738 g     F .text	000000f8 OSIntExit
000142f8 g     F .text	0000001c __vfiprintf_internal
00027876 g     O .rwdata	00000002 OSTCBSize
00029461 g     O .bss	00000001 OSPrioCur
00022e64 g     F .text	000002bc altera_avalon_jtag_uart_read
00005020 g     F .text	00000014 malloc
00005ba8 g     F .text	00000030 _printf_r
00017710 g     F .text	00000064 .hidden __udivsi3
0001a438 g     F .text	000000a4 isatty
0002785c g     O .rwdata	00000002 OSStkWidth
0000ce44 g     F .text	00000030 iswspace
0002584c g     O .rodata	000000c8 __mprec_tens
00027850 g     O .rwdata	00000002 OSPtrSize
0000cef0 g     F .text	0000000c __locale_charset
00017900 g     F .text	000000c8 .hidden __lesf2
00027830 g     O .rwdata	00000002 OSEventTblSize
00016af4 g     F .text	00000074 .hidden __fixunsdfsi
00023f00 g       .text	00000000 OSCtxSw
000244cc g     F .text	00000090 alt_icache_flush
00029424 g     O .bss	00000004 __malloc_top_pad
00029464 g     O .bss	00000004 OSTCBList
00029438 g     O .bss	00000004 alt_fd_list_lock
0001063c g     F .text	0000001c strtoul
000277f0 g     O .rwdata	00000004 __mb_cur_max
0000cf20 g     F .text	0000000c _localeconv_r
00010658 g     F .text	000002d8 _strtoull_r
0000d8f8 g     F .text	0000003c __i2b
0000c988 g     F .text	000004bc __sfvwrite_r
0002b8b4 g     O .bss	00000c30 OSMemTbl
00029468 g     O .bss	00000001 OSTickStepState
00006474 g     F .text	00000054 _sbrk_r
00027854 g     O .rwdata	00000002 OSQMax
0002c4e4 g     O .bss	00000800 OSTaskStatStk
0001e9b0 g     F .text	000000f0 OSMemNameGet
00027834 g     O .rwdata	00000002 OSFlagEn
0000e650 g     F .text	00000060 _read_r
0002787a g     O .rwdata	00000002 OSTimeTickHookEn
0001f85c g     F .text	00000168 OSQPost
0001e648 g     F .text	000000a4 OS_FlagUnlink
0002780c g     O .rwdata	00000004 alt_max_fd
0001c6fc g     F .text	00000068 OS_MemCopy
0001c764 g     F .text	000000d0 OS_Sched
0000bf48 g     F .text	000000f0 _fclose_r
0001e8c0 g     F .text	000000f0 OSMemGet
00021850 g     F .text	000001b4 OSTaskNameSet
0000c2c4 g     F .text	00000030 fflush
00029420 g     O .bss	00000004 __malloc_max_sbrked_mem
0002946c g     O .bss	00000004 OSCtxSwCtr
000241b4 g     F .text	00000020 OSTimeTickHook
0002783e g     O .rwdata	00000002 OSFlagNameSize
00004850 g     F .text	00000148 printVector
0001c1c8 g     F .text	00000100 OS_EventTaskRemoveMulti
000179c8 g     F .text	000008ac .hidden __adddf3
000177cc g     F .text	00000078 .hidden __nesf2
0001bfc0 g     F .text	00000150 OS_EventTaskWaitMulti
0000e074 g     F .text	0000010c __b2d
00027856 g     O .rwdata	00000002 OSQSize
000170e0 g     F .text	00000538 .hidden __umoddi3
0001a604 g     F .text	000000d4 lseek
0002030c g     F .text	0000020c OSSemPend
000277dc g     O .rwdata	00000004 _global_impure_ptr
00005d20 g     F .text	00000564 _realloc_r
00027840 g     O .rwdata	00000002 OSLowestPrio
0002e868 g       *ABS*	00000000 __bss_end
000238b4 g     F .text	000000f0 alt_iic_isr_register
00024234 g     F .text	00000024 OSTCBInitHook
00027886 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00023dd4 g     F .text	00000108 alt_tick
000259b4 g     O .rodata	00000100 __hexdig
00016b68 g     F .text	00000578 .hidden __udivdi3
00014750 g     F .text	00000024 _fputwc_r
00027828 g     O .rwdata	00000002 OSEventEn
00025824 g     O .rodata	00000028 __mprec_bigtens
0000d6dc g     F .text	00000104 __s2b
00027882 g     O .rwdata	00000002 OSTmrCfgNameSize
00019f24 g     F .text	000000a8 .hidden __floatunsidf
0000ddb4 g     F .text	00000060 __mcmp
00004e68 g     F .text	00000018 __fp_lock_all
00023868 g     F .text	0000004c alt_ic_irq_enabled
0001e474 g     F .text	000000e0 OS_FlagInit
00023d38 g     F .text	0000009c alt_alarm_stop
00006940 g     F .text	0000001c strtol
00027864 g     O .rwdata	00000002 OSTaskIdleStkSize
00000340 g     F .text	0000017c printCountPieces
000294a8 g     O .bss	00000004 alt_irq_active
0001ff44 g     F .text	000000b0 OSSemAccept
0001ebb4 g     F .text	000000d8 OSMemPut
0001e6ec g     F .text	000001d4 OSMemCreate
00029470 g     O .bss	00000004 OSIdleCtrMax
000000fc g     F .exceptions	000000d4 alt_irq_handler
000265c8 g     O .rwdata	00000028 alt_dev_null
00027878 g     O .rwdata	00000002 OSTicksPerSec
00023f00 g       .text	00000000 OSIntCtxSw
00023510 g     F .text	00000020 alt_dcache_flush_all
0000d7e0 g     F .text	00000068 __hi0bits
00019dc8 g     F .text	00000080 .hidden __fixdfsi
0000fff8 g     F .text	00000018 strtod
00029474 g     O .bss	00000004 OSTCBFreeList
000278a0 g       *ABS*	00000000 __ram_rwdata_end
00020518 g     F .text	0000016c OSSemPendAbort
00027804 g     O .rwdata	00000008 alt_dev_list
0001aa1c g     F .text	000000f8 write
0000e4e8 g     F .text	000000a0 _putc_r
0002787c g     O .rwdata	00000002 OSVersionNbr
00017844 g     F .text	000000bc .hidden __gtsf2
00025d24 g       *ABS*	00000000 __ram_rodata_end
0001a34c g     F .text	000000b0 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00018cc0 g     F .text	000000f4 .hidden __ledf2
00004744 g     F .text	0000010c printCapture
0000457c g     F .text	00000134 vectorDelete
00027824 g     O .rwdata	00000004 OSEndiannessTest
0000db2c g     F .text	00000140 __pow5mult
00012e9c g     F .text	0000145c ___vfiprintf_internal_r
00029434 g     O .bss	00000004 __nlocale_changed
00017774 g     F .text	00000058 .hidden __umodsi3
00006504 g     F .text	00000030 _scanf_r
00027836 g     O .rwdata	00000002 OSFlagGrpSize
0002e868 g       *ABS*	00000000 end
00004278 g     F .text	000000b8 createEmptyBoard
0002281c g     F .text	00000148 altera_avalon_jtag_uart_init
0001c9cc g     F .text	000000dc OS_TaskStat
00001000 g     F .text	000000a0 copyMoveList
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0002498c g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
000022b4 g     F .text	000002c0 move
0001a174 g     F .text	00000064 .hidden __clzsi2
00023120 g     F .text	000002c4 altera_avalon_jtag_uart_write
00004e58 g     F .text	00000004 __sfp_lock_acquire
00005854 g     F .text	000000e4 memchr
0001c6a8 g     F .text	00000054 OS_MemClr
0000695c g     F .text	000021f8 ___vfprintf_internal_r
00023fd0 g     F .text	0000015c OSTaskStkInit
0000e7fc g     F .text	00000058 _sprintf_r
0000c678 g     F .text	00000310 _free_r
0000cefc g     F .text	00000010 __locale_mb_cur_max
0001bd18 g     F .text	00000198 OS_EventTaskRdy
000247d8 g     F .text	00000180 __call_exitprocs
00029478 g     O .bss	00000001 OSCPUUsage
00029430 g     O .bss	00000004 __mlocale_changed
000277e4 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
000294ac g     O .bss	00000004 _alt_tick_rate
0001f464 g     F .text	0000028c OSQPend
00010110 g     F .text	000002e0 _strtoll_r
00001370 g     F .text	00000308 manCapture
00022110 g     F .text	00000104 OSTimeDly
0000dc6c g     F .text	00000148 __lshift
000294b0 g     O .bss	00000004 _alt_nticks
00004048 g     F .text	00000118 play
0001a7d0 g     F .text	000000fc read
00022670 g     F .text	00000048 alt_sys_init
00015500 g     F .text	000001d0 __ssprint_r
000246c0 g     F .text	00000118 __register_exitproc
00029479 g     O .bss	00000001 OSTaskCtr
00015430 g     F .text	000000d0 strncmp
00022214 g     F .text	00000160 OSTimeDlyHMSM
0000d934 g     F .text	000001f8 __multiply
00022d0c g     F .text	00000068 altera_avalon_jtag_uart_close
00025d24 g       *ABS*	00000000 __ram_rwdata_start
0002498c g       *ABS*	00000000 __ram_rodata_start
000294b8 g     O .bss	00000028 __malloc_current_mallinfo
0002782a g     O .rwdata	00000002 OSEventMax
000177cc g     F .text	00000078 .hidden __eqsf2
0000e180 g     F .text	0000014c __d2b
00020684 g     F .text	00000110 OSSemPost
0001b8bc g     F .text	000000dc OSSchedUnlock
00005d08 g     F .text	00000018 realloc
000226b8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000103f0 g     F .text	0000024c _strtoul_r
000243f0 g     F .text	000000dc alt_get_fd
0002947c g     O .bss	00000004 OSMemFreeList
0001ba08 g     F .text	000000b0 OSStatInit
0001e250 g     F .text	000000c4 OSFlagQuery
00001678 g     F .text	000001b0 manMove
00027860 g     O .rwdata	00000002 OSTaskCreateExtEn
0000a66c g     F .text	00000054 _close_r
00024644 g     F .text	0000007c memcmp
0001bcf8 g     F .text	00000020 OS_Dummy
00022778 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0002e868 g       *ABS*	00000000 __alt_stack_base
000227c8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000a518 g     F .text	00000154 __swsetup_r
0002cce4 g     O .bss	000001e0 OSQTbl
00018274 g     F .text	000008e8 .hidden __divdf3
00004d18 g     F .text	00000118 __sfp
0000e3e4 g     F .text	00000078 __copybits
000043a4 g     F .text	00000120 vectorAdd
00026148 g     O .rwdata	00000408 __malloc_av_
00004e64 g     F .text	00000004 __sinit_lock_release
00029480 g     O .bss	00000004 OSTCBHighRdy
00018db4 g     F .text	00000718 .hidden __muldf3
00006534 g     F .text	00000054 __sread
0000c520 g     F .text	00000034 fread
00029484 g     O .bss	00000004 OSQFreeList
000242e8 g     F .text	00000108 alt_find_file
0002356c g     F .text	000000a4 alt_dev_llist_insert
0001ac38 g     F .text	00000120 __malloc_lock
0001a930 g     F .text	000000b0 sbrk
00010930 g     F .text	000021d8 ___svfprintf_internal_r
0001af44 g     F .text	00000140 OSEventNameSet
0000c268 g     F .text	0000005c _fflush_r
00014528 g     F .text	000000c4 _calloc_r
00029488 g     O .bss	00000001 OSRdyGrp
0002941c g       *ABS*	00000000 __bss_start
00005a80 g     F .text	00000128 memset
000002d4 g     F .text	0000006c main
00029444 g     O .bss	00000004 alt_envp
0002941c g     O .bss	00000004 __malloc_max_total_mem
00022718 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00014510 g     F .text	00000018 __swbuf
00025bf0 g     O .rodata	00000100 OSUnMapTbl
00017900 g     F .text	000000c8 .hidden __ltsf2
0000c2f4 g     F .text	0000022c _fread_r
0002785a g     O .rwdata	00000002 OSSemEn
0001debc g     F .text	00000394 OSFlagPost
00006668 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000c038 g     F .text	00000014 fclose
0001beb0 g     F .text	00000110 OS_EventTaskWait
000039dc g     F .text	000001c8 algorithm
00019fcc g     F .text	000001a8 .hidden __truncdfsf2
00006708 g     F .text	00000238 _strtol_r
0001caa8 g     F .text	000000cc OS_TaskStatStkChk
00021568 g     F .text	00000150 OSTaskDelReq
0000a8c0 g     F .text	00001688 _dtoa_r
00005048 g     F .text	0000080c _malloc_r
00016a68 g     F .text	00000030 __ascii_wctomb
00027810 g     O .rwdata	00000004 alt_errno
0001b998 g     F .text	00000070 OSStart
00012b08 g     F .text	000000d4 __submore
0001abd8 g     F .text	00000060 __env_unlock
00004e98 g     F .text	000000c4 _fwalk
00021a04 g     F .text	000001d4 OSTaskResume
0001ec8c g     F .text	000000e8 OSMemQuery
0002786c g     O .rwdata	00000002 OSTaskStatEn
000046b0 g     F .text	0000003c vectorFree
00004998 g     F .text	00000144 _fgets_r
0000d334 g     F .text	0000005c _mbtowc_r
00027846 g     O .rwdata	00000002 OSMemMax
0001f9c4 g     F .text	00000170 OSQPostFront
0000e588 g     F .text	000000c8 putc
00017618 g     F .text	00000084 .hidden __divsi3
00029489 g     O .bss	00000003 OSRdyTbl
00027820 g     O .rwdata	00000002 OSDebugEn
0000c554 g     F .text	00000124 _malloc_trim_r
0002498c g       *ABS*	00000000 __CTOR_END__
00027838 g     O .rwdata	00000002 OSFlagNodeSize
00027880 g     O .rwdata	00000002 OSTmrCfgMax
0000e8c0 g     F .text	000000dc strcmp
0001ef80 g     F .text	000001ac OSQCreate
000216b8 g     F .text	00000198 OSTaskNameGet
0002498c g       *ABS*	00000000 __flash_rodata_start
0001fb34 g     F .text	0000020c OSQPostOpt
0001bab8 g     F .text	00000220 OSTimeTick
00027868 g     O .rwdata	00000002 OSTaskMax
0002498c g       *ABS*	00000000 __DTOR_LIST__
0001fff4 g     F .text	000000d8 OSSemCreate
0002788c g     O .rwdata	00000002 OSTmrWheelSize
000004bc g     F .text	00000204 printBoard
00018b5c g     F .text	00000088 .hidden __nedf2
00027862 g     O .rwdata	00000002 OSTaskDelEn
00020794 g     F .text	00000110 OSSemQuery
0001f12c g     F .text	00000280 OSQDel
0001f6f0 g     F .text	0000016c OSQPendAbort
00022638 g     F .text	00000038 alt_irq_init
0001a8cc g     F .text	00000064 alt_release_fd
0000e854 g     F .text	0000006c sprintf
00025ad4 g     O .rodata	00000100 .hidden __clz_tab
0002942c g     O .bss	00000004 _PathLocale
00010010 g     F .text	00000100 strtof
000245f8 g     F .text	00000014 atexit
00017844 g     F .text	000000bc .hidden __gesf2
0000a4b8 g     F .text	00000060 _write_r
0001b830 g     F .text	0000008c OSSchedLock
0000cf2c g     F .text	00000018 setlocale
000064c8 g     F .text	0000003c scanf
00000280 g     F .text	00000054 taskStartGame
0001d2e0 g     F .text	00000108 OSFlagCreate
0000e7f4 g     F .text	00000008 nanf
000277e0 g     O .rwdata	00000004 _impure_ptr
0002943c g     O .bss	00000004 alt_argc
0000c04c g     F .text	0000021c __sflush_r
0000d16c g     F .text	000000ac _mbrtowc_r
00023670 g     F .text	00000060 _do_dtors
0000cf18 g     F .text	00000008 __locale_cjk_lang
00027832 g     O .rwdata	00000002 OSEventMultiEn
000062a0 g     F .text	000001d4 __srefill_r
0001d3e8 g     F .text	00000248 OSFlagDel
0002948c g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
0000d2f0 g     F .text	00000044 __ascii_mbtowc
0000437c g     F .text	00000028 vectorCount
0000e010 g     F .text	00000064 __ulp
0001d8a4 g     F .text	000005b8 OSFlagPend
0002787e g     O .rwdata	00000002 OSTmrEn
00004e80 g     F .text	00000018 __fp_unlock_all
000277fc g     O .rwdata	00000008 alt_fs_list
0001c8a8 g     F .text	00000074 OS_StrCopy
00000b74 g     F .text	000000bc deleteCaptureVector
000044c4 g     F .text	00000060 vectorSet
00001bb0 g     F .text	00000704 capture
00027848 g     O .rwdata	00000002 OSMemNameSize
000241f4 g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
00027874 g     O .rwdata	00000002 OSTCBPrioTblMax
0000cf44 g     F .text	0000000c localeconv
00001828 g     F .text	00000388 checkIfCanMove
00027870 g     O .rwdata	00000002 OSTaskStatStkChkEn
00023704 g     F .text	00000050 alt_ic_isr_register
00027844 g     O .rwdata	00000002 OSMemEn
00004160 g     F .text	00000118 createBoard
0002784e g     O .rwdata	00000002 OSMutexEn
000278a0 g       *ABS*	00000000 _edata
0002e868 g       *ABS*	00000000 _end
00029490 g     O .bss	00000001 OSIntNesting
000145ec g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000a3e8 g     F .text	00000068 vfscanf
00022d74 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00022374 g     F .text	000001d4 OSTimeDlyResume
0001d758 g     F .text	0000014c OSFlagNameSet
00021bd8 g     F .text	000001c0 OSTaskStkChk
000237dc g     F .text	0000008c alt_ic_irq_disable
00004330 g     F .text	0000004c vectorInit
0002784a g     O .rwdata	00000002 OSMemSize
00006590 g     F .text	0000007c __swrite
000277e8 g     O .rwdata	00000004 __malloc_trim_threshold
0000cf0c g     F .text	0000000c __locale_msgcharset
00029494 g     O .bss	00000004 OSTCBCur
0002460c g     F .text	00000038 exit
0002784c g     O .rwdata	00000002 OSMemTblSize
00004f5c g     F .text	000000c4 _fwalk_reent
0000de14 g     F .text	000001fc __mdiff
0001769c g     F .text	00000074 .hidden __modsi3
000277ec g     O .rwdata	00000004 __ctype_ptr__
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004e5c g     F .text	00000004 __sfp_lock_release
0001b694 g     F .text	00000058 OSInit
00021f7c g     F .text	00000124 OSTaskQuery
0001fe9c g     F .text	000000a8 OS_QInit
0000e724 g     F .text	000000d0 __sccl
0001c91c g     F .text	00000054 OS_StrLen
0001eaa0 g     F .text	00000114 OSMemNameSet
00025550 g     O .rodata	00000101 _ctype_
00027866 g     O .rwdata	00000002 OSTaskProfileEn
00029498 g     O .bss	00000004 OSTime
000277f4 g     O .rwdata	00000004 __mbtowc
0002cec4 g     O .bss	00000800 OSTaskIdleStk
00024958 g     F .text	00000034 _exit
000233e4 g     F .text	0000012c alt_alarm_start
0001d630 g     F .text	00000128 OSFlagNameGet
00022548 g     F .text	0000005c OSTimeGet
00029544 g     O .bss	00002000 taskStartGame_stk
0000cfb0 g     F .text	000001bc __smakebuf_r
00006670 g     F .text	00000098 strlen
00024174 g     F .text	00000020 OSTaskSwHook
00023be4 g     F .text	00000154 open
0002d6c4 g     O .bss	00000b40 OSEventTbl
00018be4 g     F .text	000000dc .hidden __gedf2
0002e204 g     O .bss	00000510 OSTCBTbl
00014950 g     F .text	00000830 __gethex
000208a4 g     F .text	00000100 OSSemSet
000277f8 g     O .rwdata	00000004 __wctomb
00012e84 g     F .text	00000018 __sprint_r
000236d0 g     F .text	00000034 alt_icache_flush_all
00027894 g     O .rwdata	00000004 alt_priority_mask
00002ef8 g     F .text	00000ae4 minimaxAlgorithm
000200cc g     F .text	00000240 OSSemDel
0002949c g     O .bss	00000004 OSFlagFreeList
00023754 g     F .text	00000088 alt_ic_irq_enable
0002782c g     O .rwdata	00000002 OSEventNameSize
00008b54 g     F .text	0000001c __vfprintf_internal
000294a0 g     O .bss	00000001 OSStatRdy
0002e714 g     O .bss	00000054 OSTCBPrioTbl
00016a98 g     F .text	0000005c _wctomb_r
0001ab14 g     F .text	000000c4 __env_lock
00027872 g     O .rwdata	00000002 OSTaskSwHookEn
000194cc g     F .text	000008fc .hidden __subdf3
00002648 g     F .text	000008b0 minimaxAlgorithmRecursive
00000e7c g     F .text	000000e0 addToMoveList
0000d848 g     F .text	000000b0 __lo0bits
00008c2c g     F .text	000017bc __svfscanf_r
000006c0 g     F .text	000004b4 kingCapture
00027898 g     O .rwdata	00000008 alt_alarm_list
00012bdc g     F .text	00000194 _ungetc_r
0002783a g     O .rwdata	00000002 OSFlagWidth
00023610 g     F .text	00000060 _do_ctors
000169a8 g     F .text	000000c0 wcrtomb
00000f5c g     F .text	000000a4 copyBoard
0001a214 g     F .text	000000d0 close
0002944c g     O .bss	00000004 alt_envsem
000294a4 g     O .bss	00000004 OSIdleCtrRun
0001bcd8 g     F .text	00000020 OSVersion
00027884 g     O .rwdata	00000002 OSTmrCfgWheelSize
0001a544 g     F .text	00000084 alt_load
000220a0 g     F .text	00000070 OS_TaskStkClr
0002785e g     O .rwdata	00000002 OSTaskCreateEn
0001c2c8 g     F .text	00000068 OS_EventWaitListInit
00014774 g     F .text	00000080 fputwc
00024214 g     F .text	00000020 OSTaskIdleHook
00005034 g     F .text	00000014 free
00004e60 g     F .text	00000004 __sinit_lock_acquire
0000d5bc g     F .text	00000120 __multadd
00021d98 g     F .text	000001e4 OSTaskSuspend
0000d594 g     F .text	00000028 _Bfree
0001c970 g     F .text	0000005c OS_TaskIdle
0002788a g     O .rwdata	00000002 OSTmrTblSize
0001fd40 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	001b6ec0 	call	1b6ec <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000f4 	movhi	r2,3
 140:	10b9da04 	addi	r2,r2,-6296
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000f4 	movhi	r2,3
 158:	10b9da04 	addi	r2,r2,-6296
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	001b7380 	call	1b738 <OSIntExit>
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a73617 	ldw	r2,-25384(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a73617 	ldw	r2,-25384(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     250:	d6bdf714 	ori	gp,gp,63452
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     258:	10a50714 	ori	r2,r2,37916

    movhi r3, %hi(__bss_end)
     25c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     260:	18fa1a14 	ori	r3,r3,59496

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_data_end+0xfc000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	001a5440 	call	1a544 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	001a6d80 	call	1a6d8 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_data_end+0xfc00027c>

00000280 <taskStartGame>:
void play();
void createBoard();
void createEmptyBoard();

void taskStartGame(void* pdata)
{
     280:	defffc04 	addi	sp,sp,-16
     284:	dfc00315 	stw	ra,12(sp)
     288:	df000215 	stw	fp,8(sp)
     28c:	df000204 	addi	fp,sp,8
     290:	e13fff15 	stw	r4,-4(fp)
	createBoard();
     294:	00041600 	call	4160 <createBoard>
	printBoard((unsigned char **)board,100,100,100,100);
     298:	00801904 	movi	r2,100
     29c:	d8800015 	stw	r2,0(sp)
     2a0:	01c01904 	movi	r7,100
     2a4:	01801904 	movi	r6,100
     2a8:	01401904 	movi	r5,100
     2ac:	010000f4 	movhi	r4,3
     2b0:	21253804 	addi	r4,r4,-27424
     2b4:	00004bc0 	call	4bc <printBoard>
	play();
     2b8:	00040480 	call	4048 <play>
}
     2bc:	0001883a 	nop
     2c0:	e037883a 	mov	sp,fp
     2c4:	dfc00117 	ldw	ra,4(sp)
     2c8:	df000017 	ldw	fp,0(sp)
     2cc:	dec00204 	addi	sp,sp,8
     2d0:	f800283a 	ret

000002d4 <main>:

int main(void)
{
     2d4:	defff904 	addi	sp,sp,-28
     2d8:	dfc00615 	stw	ra,24(sp)
     2dc:	df000515 	stw	fp,20(sp)
     2e0:	df000504 	addi	fp,sp,20
  OSTaskCreateExt(taskStartGame,NULL,(void *)&taskStartGame_stk[TASK_STACKSIZE-1],TASKSTARTGAME_PRIORITY,TASKSTARTGAME_PRIORITY,taskStartGame_stk,TASK_STACKSIZE,NULL,0);
     2e4:	d8000415 	stw	zero,16(sp)
     2e8:	d8000315 	stw	zero,12(sp)
     2ec:	00820004 	movi	r2,2048
     2f0:	d8800215 	stw	r2,8(sp)
     2f4:	008000f4 	movhi	r2,3
     2f8:	10a55104 	addi	r2,r2,-27324
     2fc:	d8800115 	stw	r2,4(sp)
     300:	00800044 	movi	r2,1
     304:	d8800015 	stw	r2,0(sp)
     308:	01c00044 	movi	r7,1
     30c:	018000f4 	movhi	r6,3
     310:	31ad5004 	addi	r6,r6,-19136
     314:	000b883a 	mov	r5,zero
     318:	01000034 	movhi	r4,0
     31c:	2100a004 	addi	r4,r4,640
     320:	00210400 	call	21040 <OSTaskCreateExt>
  OSStart();
     324:	001b9980 	call	1b998 <OSStart>
  return 0;
     328:	0005883a 	mov	r2,zero
}
     32c:	e037883a 	mov	sp,fp
     330:	dfc00117 	ldw	ra,4(sp)
     334:	df000017 	ldw	fp,0(sp)
     338:	dec00204 	addi	sp,sp,8
     33c:	f800283a 	ret

00000340 <printCountPieces>:

/*
Print the amount of pieces each player has on the board
*/
void printCountPieces(){
     340:	defffd04 	addi	sp,sp,-12
     344:	dfc00215 	stw	ra,8(sp)
     348:	df000115 	stw	fp,4(sp)
     34c:	df000104 	addi	fp,sp,4
	//Count vars that will be printed
	unsigned char enemyCount = 0;
     350:	e03fff05 	stb	zero,-4(fp)
	unsigned char friendlyCount = 0;
     354:	e03fff45 	stb	zero,-3(fp)

	//Check every field on the board
	for(unsigned char row = 0; row < 10; row++)
     358:	e03fff85 	stb	zero,-2(fp)
     35c:	00003e06 	br	458 <printCountPieces+0x118>
	{
		for(unsigned char field = 0; field < 10; field++)
     360:	e03fffc5 	stb	zero,-1(fp)
     364:	00003606 	br	440 <printCountPieces+0x100>
		{
			//If the field has a friendly man or king on it, add to the friendly counter
			if(board[row][field] == FRIENDLY || board[row][field] == FRIENDLYKING)
     368:	e13fff83 	ldbu	r4,-2(fp)
     36c:	e0ffffc3 	ldbu	r3,-1(fp)
     370:	008000f4 	movhi	r2,3
     374:	10a53804 	addi	r2,r2,-27424
     378:	210002a4 	muli	r4,r4,10
     37c:	1105883a 	add	r2,r2,r4
     380:	10c5883a 	add	r2,r2,r3
     384:	10800003 	ldbu	r2,0(r2)
     388:	10803fcc 	andi	r2,r2,255
     38c:	108000a0 	cmpeqi	r2,r2,2
     390:	10000b1e 	bne	r2,zero,3c0 <printCountPieces+0x80>
     394:	e13fff83 	ldbu	r4,-2(fp)
     398:	e0ffffc3 	ldbu	r3,-1(fp)
     39c:	008000f4 	movhi	r2,3
     3a0:	10a53804 	addi	r2,r2,-27424
     3a4:	210002a4 	muli	r4,r4,10
     3a8:	1105883a 	add	r2,r2,r4
     3ac:	10c5883a 	add	r2,r2,r3
     3b0:	10800003 	ldbu	r2,0(r2)
     3b4:	10803fcc 	andi	r2,r2,255
     3b8:	108000d8 	cmpnei	r2,r2,3
     3bc:	1000041e 	bne	r2,zero,3d0 <printCountPieces+0x90>
			{
				friendlyCount++;
     3c0:	e0bfff43 	ldbu	r2,-3(fp)
     3c4:	10800044 	addi	r2,r2,1
     3c8:	e0bfff45 	stb	r2,-3(fp)
     3cc:	00001906 	br	434 <printCountPieces+0xf4>
			}

			//If the field has an enemy man or king on it, add to the enemy counter
			else if(board[row][field] == ENEMY || board[row][field] == ENEMYKING)
     3d0:	e13fff83 	ldbu	r4,-2(fp)
     3d4:	e0ffffc3 	ldbu	r3,-1(fp)
     3d8:	008000f4 	movhi	r2,3
     3dc:	10a53804 	addi	r2,r2,-27424
     3e0:	210002a4 	muli	r4,r4,10
     3e4:	1105883a 	add	r2,r2,r4
     3e8:	10c5883a 	add	r2,r2,r3
     3ec:	10800003 	ldbu	r2,0(r2)
     3f0:	10803fcc 	andi	r2,r2,255
     3f4:	10800120 	cmpeqi	r2,r2,4
     3f8:	10000b1e 	bne	r2,zero,428 <printCountPieces+0xe8>
     3fc:	e13fff83 	ldbu	r4,-2(fp)
     400:	e0ffffc3 	ldbu	r3,-1(fp)
     404:	008000f4 	movhi	r2,3
     408:	10a53804 	addi	r2,r2,-27424
     40c:	210002a4 	muli	r4,r4,10
     410:	1105883a 	add	r2,r2,r4
     414:	10c5883a 	add	r2,r2,r3
     418:	10800003 	ldbu	r2,0(r2)
     41c:	10803fcc 	andi	r2,r2,255
     420:	10800158 	cmpnei	r2,r2,5
     424:	1000031e 	bne	r2,zero,434 <printCountPieces+0xf4>
			{
				enemyCount++;
     428:	e0bfff03 	ldbu	r2,-4(fp)
     42c:	10800044 	addi	r2,r2,1
     430:	e0bfff05 	stb	r2,-4(fp)
	unsigned char friendlyCount = 0;

	//Check every field on the board
	for(unsigned char row = 0; row < 10; row++)
	{
		for(unsigned char field = 0; field < 10; field++)
     434:	e0bfffc3 	ldbu	r2,-1(fp)
     438:	10800044 	addi	r2,r2,1
     43c:	e0bfffc5 	stb	r2,-1(fp)
     440:	e0bfffc3 	ldbu	r2,-1(fp)
     444:	108002b0 	cmpltui	r2,r2,10
     448:	103fc71e 	bne	r2,zero,368 <__alt_data_end+0xfc000368>
	//Count vars that will be printed
	unsigned char enemyCount = 0;
	unsigned char friendlyCount = 0;

	//Check every field on the board
	for(unsigned char row = 0; row < 10; row++)
     44c:	e0bfff83 	ldbu	r2,-2(fp)
     450:	10800044 	addi	r2,r2,1
     454:	e0bfff85 	stb	r2,-2(fp)
     458:	e0bfff83 	ldbu	r2,-2(fp)
     45c:	108002b0 	cmpltui	r2,r2,10
     460:	103fbf1e 	bne	r2,zero,360 <__alt_data_end+0xfc000360>
			}
		}
	}

	//Print the amount
	printf("%s %d%c", "Enemy #", enemyCount, '\n');
     464:	e0bfff03 	ldbu	r2,-4(fp)
     468:	01c00284 	movi	r7,10
     46c:	100d883a 	mov	r6,r2
     470:	014000b4 	movhi	r5,2
     474:	29526304 	addi	r5,r5,18828
     478:	010000b4 	movhi	r4,2
     47c:	21126504 	addi	r4,r4,18836
     480:	0005bd80 	call	5bd8 <printf>
	printf("%s %d%c", "Friendly #", friendlyCount, '\n');
     484:	e0bfff43 	ldbu	r2,-3(fp)
     488:	01c00284 	movi	r7,10
     48c:	100d883a 	mov	r6,r2
     490:	014000b4 	movhi	r5,2
     494:	29526704 	addi	r5,r5,18844
     498:	010000b4 	movhi	r4,2
     49c:	21126504 	addi	r4,r4,18836
     4a0:	0005bd80 	call	5bd8 <printf>
}
     4a4:	0001883a 	nop
     4a8:	e037883a 	mov	sp,fp
     4ac:	dfc00117 	ldw	ra,4(sp)
     4b0:	df000017 	ldw	fp,0(sp)
     4b4:	dec00204 	addi	sp,sp,8
     4b8:	f800283a 	ret

000004bc <printBoard>:
changedRow	= The row where the piece has gone
changedField	= The field where the piece has gone
oldRow		= The row where the piece previously was
oldField	= The field where the piece previously was
*/
void printBoard(unsigned char * tempBoard[], unsigned char changedRow, unsigned char changedField, unsigned char oldRow, unsigned char oldField){
     4bc:	deffdf04 	addi	sp,sp,-132
     4c0:	dfc02015 	stw	ra,128(sp)
     4c4:	df001f15 	stw	fp,124(sp)
     4c8:	df001f04 	addi	fp,sp,124
     4cc:	e13ffb15 	stw	r4,-20(fp)
     4d0:	3009883a 	mov	r4,r6
     4d4:	3807883a 	mov	r3,r7
     4d8:	e0800217 	ldw	r2,8(fp)
     4dc:	e17ffc05 	stb	r5,-16(fp)
     4e0:	e13ffd05 	stb	r4,-12(fp)
     4e4:	e0fffe05 	stb	r3,-8(fp)
     4e8:	e0bfff05 	stb	r2,-4(fp)

	unsigned char b[10][10];
	memcpy(b,tempBoard,100);
     4ec:	e0bfe204 	addi	r2,fp,-120
     4f0:	01801904 	movi	r6,100
     4f4:	e17ffb17 	ldw	r5,-20(fp)
     4f8:	1009883a 	mov	r4,r2
     4fc:	00059380 	call	5938 <memcpy>

	if(COLORS_ENABLED) printf("  0  1  2  3  4  5  6  7  8  9");
	else printf("   0   1   2   3   4   5   6   7   8   9\n");
     500:	010000b4 	movhi	r4,2
     504:	21126a04 	addi	r4,r4,18856
     508:	0005cf40 	call	5cf4 <puts>

	for(unsigned char row = 0; row < 10; row++){
     50c:	e03fe105 	stb	zero,-124(fp)
     510:	00005106 	br	658 <printBoard+0x19c>

		if(!COLORS_ENABLED) printf(" |");
     514:	010000b4 	movhi	r4,2
     518:	21127504 	addi	r4,r4,18900
     51c:	0005bd80 	call	5bd8 <printf>

		for(unsigned char o = 0; o < 10; o++){
     520:	e03fe145 	stb	zero,-123(fp)
     524:	00000606 	br	540 <printBoard+0x84>
			if(!COLORS_ENABLED) printf("---|");
     528:	010000b4 	movhi	r4,2
     52c:	21127604 	addi	r4,r4,18904
     530:	0005bd80 	call	5bd8 <printf>

	for(unsigned char row = 0; row < 10; row++){

		if(!COLORS_ENABLED) printf(" |");

		for(unsigned char o = 0; o < 10; o++){
     534:	e0bfe143 	ldbu	r2,-123(fp)
     538:	10800044 	addi	r2,r2,1
     53c:	e0bfe145 	stb	r2,-123(fp)
     540:	e0bfe143 	ldbu	r2,-123(fp)
     544:	108002b0 	cmpltui	r2,r2,10
     548:	103ff71e 	bne	r2,zero,528 <__alt_data_end+0xfc000528>
			if(!COLORS_ENABLED) printf("---|");
		}

		if(COLORS_ENABLED) printf("\n%i",row);
		else printf("\n%i|",row);
     54c:	e0bfe103 	ldbu	r2,-124(fp)
     550:	100b883a 	mov	r5,r2
     554:	010000b4 	movhi	r4,2
     558:	21127804 	addi	r4,r4,18912
     55c:	0005bd80 	call	5bd8 <printf>

		for(unsigned char field = 0; field < 10; field++){
     560:	e03fe185 	stb	zero,-122(fp)
     564:	00003406 	br	638 <printBoard+0x17c>
			}else if(COLORS_ENABLED && row == oldRow && field == oldField){
				printf("\x1b[33m");
			}

			//Draw the item on the board
			switch(b[row][field]){
     568:	e0ffe103 	ldbu	r3,-124(fp)
     56c:	e0bfe183 	ldbu	r2,-122(fp)
     570:	18c002a4 	muli	r3,r3,10
     574:	e13fe104 	addi	r4,fp,-124
     578:	20c7883a 	add	r3,r4,r3
     57c:	1885883a 	add	r2,r3,r2
     580:	10800104 	addi	r2,r2,4
     584:	10800003 	ldbu	r2,0(r2)
     588:	10803fcc 	andi	r2,r2,255
     58c:	10c001a8 	cmpgeui	r3,r2,6
     590:	1800201e 	bne	r3,zero,614 <printBoard+0x158>
     594:	100690ba 	slli	r3,r2,2
     598:	00800034 	movhi	r2,0
     59c:	10816b04 	addi	r2,r2,1452
     5a0:	1885883a 	add	r2,r3,r2
     5a4:	10800017 	ldw	r2,0(r2)
     5a8:	1000683a 	jmp	r2
     5ac:	00000614 	movui	zero,24
     5b0:	000005c4 	movi	zero,23
     5b4:	000005d4 	movui	zero,23
     5b8:	000005e4 	muli	zero,zero,23
     5bc:	000005f4 	movhi	zero,23
     5c0:	00000604 	movi	zero,24
				case BLACK :
					if(COLORS_ENABLED) printf(" ■ ");
					else printf("   ");
     5c4:	010000b4 	movhi	r4,2
     5c8:	21127a04 	addi	r4,r4,18920
     5cc:	0005bd80 	call	5bd8 <printf>
					break;
     5d0:	00001406 	br	624 <printBoard+0x168>
				case FRIENDLY :
					if(UNICODE_ENABLED) printf(" ⛂ ");
					else printf(" F ");
     5d4:	010000b4 	movhi	r4,2
     5d8:	21127b04 	addi	r4,r4,18924
     5dc:	0005bd80 	call	5bd8 <printf>
					break;
     5e0:	00001006 	br	624 <printBoard+0x168>
				case FRIENDLYKING :
					if(UNICODE_ENABLED) printf(" ⛃ ");
					else printf("F K");
     5e4:	010000b4 	movhi	r4,2
     5e8:	21127c04 	addi	r4,r4,18928
     5ec:	0005bd80 	call	5bd8 <printf>
					break;
     5f0:	00000c06 	br	624 <printBoard+0x168>
				 case ENEMY :
					if(UNICODE_ENABLED) printf(" ⛀ ");
					else printf(" E ");
     5f4:	010000b4 	movhi	r4,2
     5f8:	21127d04 	addi	r4,r4,18932
     5fc:	0005bd80 	call	5bd8 <printf>
					break;
     600:	00000806 	br	624 <printBoard+0x168>
				case ENEMYKING :
					if(UNICODE_ENABLED) printf(" ⛁ ");
					else printf("E K");
     604:	010000b4 	movhi	r4,2
     608:	21127e04 	addi	r4,r4,18936
     60c:	0005bd80 	call	5bd8 <printf>
					break;
     610:	00000406 	br	624 <printBoard+0x168>
				default :
					printf("   ");
     614:	010000b4 	movhi	r4,2
     618:	21127a04 	addi	r4,r4,18920
     61c:	0005bd80 	call	5bd8 <printf>
					break;
     620:	0001883a 	nop
			}

			//reset color or draw | to the right of the item
			if(COLORS_ENABLED) printf("\x1b[0m");
			else printf("|");
     624:	01001f04 	movi	r4,124
     628:	0005c1c0 	call	5c1c <putchar>
		}

		if(COLORS_ENABLED) printf("\n%i",row);
		else printf("\n%i|",row);

		for(unsigned char field = 0; field < 10; field++){
     62c:	e0bfe183 	ldbu	r2,-122(fp)
     630:	10800044 	addi	r2,r2,1
     634:	e0bfe185 	stb	r2,-122(fp)
     638:	e0bfe183 	ldbu	r2,-122(fp)
     63c:	108002b0 	cmpltui	r2,r2,10
     640:	103fc91e 	bne	r2,zero,568 <__alt_data_end+0xfc000568>
			if(COLORS_ENABLED) printf("\x1b[0m");
			else printf("|");
		}

		//Next row
		if(!COLORS_ENABLED) printf("\n");
     644:	01000284 	movi	r4,10
     648:	0005c1c0 	call	5c1c <putchar>
	memcpy(b,tempBoard,100);

	if(COLORS_ENABLED) printf("  0  1  2  3  4  5  6  7  8  9");
	else printf("   0   1   2   3   4   5   6   7   8   9\n");

	for(unsigned char row = 0; row < 10; row++){
     64c:	e0bfe103 	ldbu	r2,-124(fp)
     650:	10800044 	addi	r2,r2,1
     654:	e0bfe105 	stb	r2,-124(fp)
     658:	e0bfe103 	ldbu	r2,-124(fp)
     65c:	108002b0 	cmpltui	r2,r2,10
     660:	103fac1e 	bne	r2,zero,514 <__alt_data_end+0xfc000514>
		//Next row
		if(!COLORS_ENABLED) printf("\n");
	}

	//Print the last line
	if(!COLORS_ENABLED) printf(" |");
     664:	010000b4 	movhi	r4,2
     668:	21127504 	addi	r4,r4,18900
     66c:	0005bd80 	call	5bd8 <printf>
	for(unsigned char o = 0; o < 10; o++){
     670:	e03fe1c5 	stb	zero,-121(fp)
     674:	00000606 	br	690 <printBoard+0x1d4>
		if(!COLORS_ENABLED) printf("---|");
     678:	010000b4 	movhi	r4,2
     67c:	21127604 	addi	r4,r4,18904
     680:	0005bd80 	call	5bd8 <printf>
		if(!COLORS_ENABLED) printf("\n");
	}

	//Print the last line
	if(!COLORS_ENABLED) printf(" |");
	for(unsigned char o = 0; o < 10; o++){
     684:	e0bfe1c3 	ldbu	r2,-121(fp)
     688:	10800044 	addi	r2,r2,1
     68c:	e0bfe1c5 	stb	r2,-121(fp)
     690:	e0bfe1c3 	ldbu	r2,-121(fp)
     694:	108002b0 	cmpltui	r2,r2,10
     698:	103ff71e 	bne	r2,zero,678 <__alt_data_end+0xfc000678>
		if(!COLORS_ENABLED) printf("---|");
	}

	//done done
	printf("\n\n\n");
     69c:	010000b4 	movhi	r4,2
     6a0:	21127f04 	addi	r4,r4,18940
     6a4:	0005cf40 	call	5cf4 <puts>
}
     6a8:	0001883a 	nop
     6ac:	e037883a 	mov	sp,fp
     6b0:	dfc00117 	ldw	ra,4(sp)
     6b4:	df000017 	ldw	fp,0(sp)
     6b8:	dec00204 	addi	sp,sp,8
     6bc:	f800283a 	ret

000006c0 <kingCapture>:

Vector * kingCapture(Location currentLocation, unsigned char tempBoard [10][10], unsigned char friendly, unsigned char friendlyKing, unsigned char enemy, unsigned char enemyKing){
     6c0:	defff204 	addi	sp,sp,-56
     6c4:	dfc00d15 	stw	ra,52(sp)
     6c8:	df000c15 	stw	fp,48(sp)
     6cc:	df000c04 	addi	fp,sp,48
     6d0:	e13ffa0d 	sth	r4,-24(fp)
     6d4:	e17ffb15 	stw	r5,-20(fp)
     6d8:	300b883a 	mov	r5,r6
     6dc:	3809883a 	mov	r4,r7
     6e0:	e0c00217 	ldw	r3,8(fp)
     6e4:	e0800317 	ldw	r2,12(fp)
     6e8:	e17ffc05 	stb	r5,-16(fp)
     6ec:	e13ffd05 	stb	r4,-12(fp)
     6f0:	e0fffe05 	stb	r3,-8(fp)
     6f4:	e0bfff05 	stb	r2,-4(fp)
	#if DEBUG
		printf("begin king capture\n");
     6f8:	010000b4 	movhi	r4,2
     6fc:	21128004 	addi	r4,r4,18944
     700:	0005cf40 	call	5cf4 <puts>
	#endif
	Vector *captureVector = vectorInit();
     704:	00043300 	call	4330 <vectorInit>
     708:	e0bff715 	stw	r2,-36(fp)
	Location possibleEnemy, possibleLanding;
	for(signed char rowDirection = -1; rowDirection < 2; rowDirection = rowDirection + 2){
     70c:	00bfffc4 	movi	r2,-1
     710:	e0bff605 	stb	r2,-40(fp)
     714:	00010e06 	br	b50 <kingCapture+0x490>
		for(signed char fieldDirection = -1; fieldDirection < 2; fieldDirection = fieldDirection + 2){
     718:	00bfffc4 	movi	r2,-1
     71c:	e0bff645 	stb	r2,-39(fp)
     720:	00010506 	br	b38 <kingCapture+0x478>
			#if DEBUG
				printf("Row direction: %d, Field Direction: %d\n", rowDirection, fieldDirection);
     724:	e0bff607 	ldb	r2,-40(fp)
     728:	e0fff647 	ldb	r3,-39(fp)
     72c:	180d883a 	mov	r6,r3
     730:	100b883a 	mov	r5,r2
     734:	010000b4 	movhi	r4,2
     738:	21128504 	addi	r4,r4,18964
     73c:	0005bd80 	call	5bd8 <printf>
			#endif
			possibleEnemy.row = currentLocation.row;
     740:	e0bffa43 	ldbu	r2,-23(fp)
     744:	e0bff945 	stb	r2,-27(fp)
			possibleEnemy.field = currentLocation.field;
     748:	e0bffa03 	ldbu	r2,-24(fp)
     74c:	e0bff905 	stb	r2,-28(fp)
			while(possibleEnemy.row + rowDirection > 0 && possibleEnemy.row + rowDirection < 9 && possibleEnemy.field + fieldDirection > 0 && possibleEnemy.field + fieldDirection < 9){
     750:	0000de06 	br	acc <kingCapture+0x40c>
				possibleEnemy.row += rowDirection;
     754:	e0fff943 	ldbu	r3,-27(fp)
     758:	e0bff603 	ldbu	r2,-40(fp)
     75c:	1885883a 	add	r2,r3,r2
     760:	e0bff945 	stb	r2,-27(fp)
				possibleEnemy.field += fieldDirection;
     764:	e0fff903 	ldbu	r3,-28(fp)
     768:	e0bff643 	ldbu	r2,-39(fp)
     76c:	1885883a 	add	r2,r3,r2
     770:	e0bff905 	stb	r2,-28(fp)
				#if DEBUG
					printf("possible enemy row: %d, possible enemy field: %d\n", possibleEnemy.row, possibleEnemy.field);
     774:	e0bff943 	ldbu	r2,-27(fp)
     778:	10803fcc 	andi	r2,r2,255
     77c:	e0fff903 	ldbu	r3,-28(fp)
     780:	18c03fcc 	andi	r3,r3,255
     784:	180d883a 	mov	r6,r3
     788:	100b883a 	mov	r5,r2
     78c:	010000b4 	movhi	r4,2
     790:	21128f04 	addi	r4,r4,19004
     794:	0005bd80 	call	5bd8 <printf>
				#endif
				if(tempBoard[possibleEnemy.row][possibleEnemy.field] == enemy || tempBoard[possibleEnemy.row][possibleEnemy.field] == enemyKing){
     798:	e0bff943 	ldbu	r2,-27(fp)
     79c:	10803fcc 	andi	r2,r2,255
     7a0:	108002a4 	muli	r2,r2,10
     7a4:	e0fffb17 	ldw	r3,-20(fp)
     7a8:	1887883a 	add	r3,r3,r2
     7ac:	e0bff903 	ldbu	r2,-28(fp)
     7b0:	10803fcc 	andi	r2,r2,255
     7b4:	1885883a 	add	r2,r3,r2
     7b8:	10800003 	ldbu	r2,0(r2)
     7bc:	10c03fcc 	andi	r3,r2,255
     7c0:	e0bffe03 	ldbu	r2,-8(fp)
     7c4:	18800c26 	beq	r3,r2,7f8 <kingCapture+0x138>
     7c8:	e0bff943 	ldbu	r2,-27(fp)
     7cc:	10803fcc 	andi	r2,r2,255
     7d0:	108002a4 	muli	r2,r2,10
     7d4:	e0fffb17 	ldw	r3,-20(fp)
     7d8:	1887883a 	add	r3,r3,r2
     7dc:	e0bff903 	ldbu	r2,-28(fp)
     7e0:	10803fcc 	andi	r2,r2,255
     7e4:	1885883a 	add	r2,r3,r2
     7e8:	10800003 	ldbu	r2,0(r2)
     7ec:	10c03fcc 	andi	r3,r2,255
     7f0:	e0bfff03 	ldbu	r2,-4(fp)
     7f4:	1880b51e 	bne	r3,r2,acc <kingCapture+0x40c>
					#if DEBUG
						printf("beeb boop enemy detected\n");
     7f8:	010000b4 	movhi	r4,2
     7fc:	21129c04 	addi	r4,r4,19056
     800:	0005cf40 	call	5cf4 <puts>
					#endif
					possibleLanding.row = possibleEnemy.row;
     804:	e0bff943 	ldbu	r2,-27(fp)
     808:	e0bff9c5 	stb	r2,-25(fp)
					possibleLanding.field = possibleEnemy.field;
     80c:	e0bff903 	ldbu	r2,-28(fp)
     810:	e0bff985 	stb	r2,-26(fp)

					unsigned char i = 0;
     814:	e03ff685 	stb	zero,-38(fp)
					while(possibleLanding.row + rowDirection > -1 && possibleLanding.row + rowDirection < 10 && possibleLanding.field + fieldDirection > -1 && possibleLanding.field + fieldDirection < 10){
     818:	00009506 	br	a70 <kingCapture+0x3b0>
						possibleLanding.row += rowDirection;
     81c:	e0fff9c3 	ldbu	r3,-25(fp)
     820:	e0bff603 	ldbu	r2,-40(fp)
     824:	1885883a 	add	r2,r3,r2
     828:	e0bff9c5 	stb	r2,-25(fp)
						possibleLanding.field += fieldDirection;
     82c:	e0fff983 	ldbu	r3,-26(fp)
     830:	e0bff643 	ldbu	r2,-39(fp)
     834:	1885883a 	add	r2,r3,r2
     838:	e0bff985 	stb	r2,-26(fp)
						if(tempBoard[possibleLanding.row][possibleLanding.field] == BLACK){
     83c:	e0bff9c3 	ldbu	r2,-25(fp)
     840:	10803fcc 	andi	r2,r2,255
     844:	108002a4 	muli	r2,r2,10
     848:	e0fffb17 	ldw	r3,-20(fp)
     84c:	1887883a 	add	r3,r3,r2
     850:	e0bff983 	ldbu	r2,-26(fp)
     854:	10803fcc 	andi	r2,r2,255
     858:	1885883a 	add	r2,r3,r2
     85c:	10800003 	ldbu	r2,0(r2)
     860:	10803fcc 	andi	r2,r2,255
     864:	10800058 	cmpnei	r2,r2,1
     868:	1000811e 	bne	r2,zero,a70 <kingCapture+0x3b0>
							#if DEBUG
								printf("LANDINGMAYDAYMAYDAY %d \n", i);
     86c:	e0bff683 	ldbu	r2,-38(fp)
     870:	100b883a 	mov	r5,r2
     874:	010000b4 	movhi	r4,2
     878:	2112a304 	addi	r4,r4,19084
     87c:	0005bd80 	call	5bd8 <printf>
							#endif
							i++;
     880:	e0bff683 	ldbu	r2,-38(fp)
     884:	10800044 	addi	r2,r2,1
     888:	e0bff685 	stb	r2,-38(fp)

							#if DEBUG
								printf("LandROW : %d\n LandField: %d\n\n", possibleLanding.row, possibleLanding.field);
     88c:	e0bff9c3 	ldbu	r2,-25(fp)
     890:	10803fcc 	andi	r2,r2,255
     894:	e0fff983 	ldbu	r3,-26(fp)
     898:	18c03fcc 	andi	r3,r3,255
     89c:	180d883a 	mov	r6,r3
     8a0:	100b883a 	mov	r5,r2
     8a4:	010000b4 	movhi	r4,2
     8a8:	2112aa04 	addi	r4,r4,19112
     8ac:	0005bd80 	call	5bd8 <printf>
							#endif
							VectorCapture *capture = malloc(sizeof(VectorCapture)) ;
     8b0:	01000304 	movi	r4,12
     8b4:	00050200 	call	5020 <malloc>
     8b8:	e0bff815 	stw	r2,-32(fp)
							capture->oldLocation = currentLocation;
     8bc:	e0bff817 	ldw	r2,-32(fp)
     8c0:	e0fffa0b 	ldhu	r3,-24(fp)
     8c4:	10c0010d 	sth	r3,4(r2)
							capture->captureLocation = possibleEnemy;
     8c8:	e0bff817 	ldw	r2,-32(fp)
     8cc:	e0fff90b 	ldhu	r3,-28(fp)
     8d0:	10c0018d 	sth	r3,6(r2)
							capture->newLocation = possibleLanding;
     8d4:	e0bff817 	ldw	r2,-32(fp)
     8d8:	e0fff98b 	ldhu	r3,-26(fp)
     8dc:	10c0020d 	sth	r3,8(r2)
							capture->piece = tempBoard[possibleEnemy.row][possibleEnemy.field];
     8e0:	e0bff943 	ldbu	r2,-27(fp)
     8e4:	10803fcc 	andi	r2,r2,255
     8e8:	108002a4 	muli	r2,r2,10
     8ec:	e0fffb17 	ldw	r3,-20(fp)
     8f0:	1887883a 	add	r3,r3,r2
     8f4:	e0bff903 	ldbu	r2,-28(fp)
     8f8:	10803fcc 	andi	r2,r2,255
     8fc:	1885883a 	add	r2,r3,r2
     900:	10c00003 	ldbu	r3,0(r2)
     904:	e0bff817 	ldw	r2,-32(fp)
     908:	10c00285 	stb	r3,10(r2)
							tempBoard[currentLocation.row][currentLocation.field] = BLACK;
     90c:	e0bffa43 	ldbu	r2,-23(fp)
     910:	10803fcc 	andi	r2,r2,255
     914:	108002a4 	muli	r2,r2,10
     918:	e0fffb17 	ldw	r3,-20(fp)
     91c:	1887883a 	add	r3,r3,r2
     920:	e0bffa03 	ldbu	r2,-24(fp)
     924:	10803fcc 	andi	r2,r2,255
     928:	1885883a 	add	r2,r3,r2
     92c:	00c00044 	movi	r3,1
     930:	10c00005 	stb	r3,0(r2)
							tempBoard[possibleLanding.row][possibleLanding.field] = friendlyKing;
     934:	e0bff9c3 	ldbu	r2,-25(fp)
     938:	10803fcc 	andi	r2,r2,255
     93c:	108002a4 	muli	r2,r2,10
     940:	e0fffb17 	ldw	r3,-20(fp)
     944:	1887883a 	add	r3,r3,r2
     948:	e0bff983 	ldbu	r2,-26(fp)
     94c:	10803fcc 	andi	r2,r2,255
     950:	1885883a 	add	r2,r3,r2
     954:	e0fffd03 	ldbu	r3,-12(fp)
     958:	10c00005 	stb	r3,0(r2)
							tempBoard[possibleEnemy.row][possibleEnemy.field] = BLACK;
     95c:	e0bff943 	ldbu	r2,-27(fp)
     960:	10803fcc 	andi	r2,r2,255
     964:	108002a4 	muli	r2,r2,10
     968:	e0fffb17 	ldw	r3,-20(fp)
     96c:	1887883a 	add	r3,r3,r2
     970:	e0bff903 	ldbu	r2,-28(fp)
     974:	10803fcc 	andi	r2,r2,255
     978:	1885883a 	add	r2,r3,r2
     97c:	00c00044 	movi	r3,1
     980:	10c00005 	stb	r3,0(r2)

							capture->nextCaptures = kingCapture(possibleLanding, tempBoard,friendly, friendlyKing, enemy, enemyKing);
     984:	e13ffc03 	ldbu	r4,-16(fp)
     988:	e17ffd03 	ldbu	r5,-12(fp)
     98c:	e0bffe03 	ldbu	r2,-8(fp)
     990:	e0ffff03 	ldbu	r3,-4(fp)
     994:	d8c00115 	stw	r3,4(sp)
     998:	d8800015 	stw	r2,0(sp)
     99c:	e0fff98b 	ldhu	r3,-26(fp)
     9a0:	0005883a 	mov	r2,zero
     9a4:	18ffffcc 	andi	r3,r3,65535
     9a8:	10bfffec 	andhi	r2,r2,65535
     9ac:	10c4b03a 	or	r2,r2,r3
     9b0:	280f883a 	mov	r7,r5
     9b4:	200d883a 	mov	r6,r4
     9b8:	e17ffb17 	ldw	r5,-20(fp)
     9bc:	1009883a 	mov	r4,r2
     9c0:	00006c00 	call	6c0 <kingCapture>
     9c4:	1007883a 	mov	r3,r2
     9c8:	e0bff817 	ldw	r2,-32(fp)
     9cc:	10c00015 	stw	r3,0(r2)
							#if DEBUG
								printf("add stuff to vector\n");
     9d0:	010000b4 	movhi	r4,2
     9d4:	2112b204 	addi	r4,r4,19144
     9d8:	0005cf40 	call	5cf4 <puts>
							#endif
							vectorAdd(captureVector, (void*)capture);
     9dc:	e17ff817 	ldw	r5,-32(fp)
     9e0:	e13ff717 	ldw	r4,-36(fp)
     9e4:	00043a40 	call	43a4 <vectorAdd>

							#if DEBUG
								printf("restore board\n");
     9e8:	010000b4 	movhi	r4,2
     9ec:	2112b704 	addi	r4,r4,19164
     9f0:	0005cf40 	call	5cf4 <puts>
							#endif
							tempBoard[currentLocation.row][currentLocation.field] = friendlyKing;
     9f4:	e0bffa43 	ldbu	r2,-23(fp)
     9f8:	10803fcc 	andi	r2,r2,255
     9fc:	108002a4 	muli	r2,r2,10
     a00:	e0fffb17 	ldw	r3,-20(fp)
     a04:	1887883a 	add	r3,r3,r2
     a08:	e0bffa03 	ldbu	r2,-24(fp)
     a0c:	10803fcc 	andi	r2,r2,255
     a10:	1885883a 	add	r2,r3,r2
     a14:	e0fffd03 	ldbu	r3,-12(fp)
     a18:	10c00005 	stb	r3,0(r2)
							tempBoard[possibleLanding.row][possibleLanding.field] = BLACK;
     a1c:	e0bff9c3 	ldbu	r2,-25(fp)
     a20:	10803fcc 	andi	r2,r2,255
     a24:	108002a4 	muli	r2,r2,10
     a28:	e0fffb17 	ldw	r3,-20(fp)
     a2c:	1887883a 	add	r3,r3,r2
     a30:	e0bff983 	ldbu	r2,-26(fp)
     a34:	10803fcc 	andi	r2,r2,255
     a38:	1885883a 	add	r2,r3,r2
     a3c:	00c00044 	movi	r3,1
     a40:	10c00005 	stb	r3,0(r2)
							tempBoard[possibleEnemy.row][possibleEnemy.field] = capture->piece;
     a44:	e0bff943 	ldbu	r2,-27(fp)
     a48:	10803fcc 	andi	r2,r2,255
     a4c:	108002a4 	muli	r2,r2,10
     a50:	e0fffb17 	ldw	r3,-20(fp)
     a54:	1889883a 	add	r4,r3,r2
     a58:	e0bff903 	ldbu	r2,-28(fp)
     a5c:	10803fcc 	andi	r2,r2,255
     a60:	e0fff817 	ldw	r3,-32(fp)
     a64:	18c00283 	ldbu	r3,10(r3)
     a68:	2085883a 	add	r2,r4,r2
     a6c:	10c00005 	stb	r3,0(r2)
					#endif
					possibleLanding.row = possibleEnemy.row;
					possibleLanding.field = possibleEnemy.field;

					unsigned char i = 0;
					while(possibleLanding.row + rowDirection > -1 && possibleLanding.row + rowDirection < 10 && possibleLanding.field + fieldDirection > -1 && possibleLanding.field + fieldDirection < 10){
     a70:	e0bff9c3 	ldbu	r2,-25(fp)
     a74:	10c03fcc 	andi	r3,r2,255
     a78:	e0bff607 	ldb	r2,-40(fp)
     a7c:	1885883a 	add	r2,r3,r2
     a80:	10002916 	blt	r2,zero,b28 <kingCapture+0x468>
     a84:	e0bff9c3 	ldbu	r2,-25(fp)
     a88:	10c03fcc 	andi	r3,r2,255
     a8c:	e0bff607 	ldb	r2,-40(fp)
     a90:	1885883a 	add	r2,r3,r2
     a94:	10800288 	cmpgei	r2,r2,10
     a98:	1000231e 	bne	r2,zero,b28 <kingCapture+0x468>
     a9c:	e0bff983 	ldbu	r2,-26(fp)
     aa0:	10c03fcc 	andi	r3,r2,255
     aa4:	e0bff647 	ldb	r2,-39(fp)
     aa8:	1885883a 	add	r2,r3,r2
     aac:	10001e16 	blt	r2,zero,b28 <kingCapture+0x468>
     ab0:	e0bff983 	ldbu	r2,-26(fp)
     ab4:	10c03fcc 	andi	r3,r2,255
     ab8:	e0bff647 	ldb	r2,-39(fp)
     abc:	1885883a 	add	r2,r3,r2
     ac0:	10800290 	cmplti	r2,r2,10
     ac4:	103f551e 	bne	r2,zero,81c <__alt_data_end+0xfc00081c>
							tempBoard[currentLocation.row][currentLocation.field] = friendlyKing;
							tempBoard[possibleLanding.row][possibleLanding.field] = BLACK;
							tempBoard[possibleEnemy.row][possibleEnemy.field] = capture->piece;
						}
					}
					break;
     ac8:	00001706 	br	b28 <kingCapture+0x468>
			#if DEBUG
				printf("Row direction: %d, Field Direction: %d\n", rowDirection, fieldDirection);
			#endif
			possibleEnemy.row = currentLocation.row;
			possibleEnemy.field = currentLocation.field;
			while(possibleEnemy.row + rowDirection > 0 && possibleEnemy.row + rowDirection < 9 && possibleEnemy.field + fieldDirection > 0 && possibleEnemy.field + fieldDirection < 9){
     acc:	e0bff943 	ldbu	r2,-27(fp)
     ad0:	10c03fcc 	andi	r3,r2,255
     ad4:	e0bff607 	ldb	r2,-40(fp)
     ad8:	1885883a 	add	r2,r3,r2
     adc:	0080130e 	bge	zero,r2,b2c <kingCapture+0x46c>
     ae0:	e0bff943 	ldbu	r2,-27(fp)
     ae4:	10c03fcc 	andi	r3,r2,255
     ae8:	e0bff607 	ldb	r2,-40(fp)
     aec:	1885883a 	add	r2,r3,r2
     af0:	10800248 	cmpgei	r2,r2,9
     af4:	10000d1e 	bne	r2,zero,b2c <kingCapture+0x46c>
     af8:	e0bff903 	ldbu	r2,-28(fp)
     afc:	10c03fcc 	andi	r3,r2,255
     b00:	e0bff647 	ldb	r2,-39(fp)
     b04:	1885883a 	add	r2,r3,r2
     b08:	0080080e 	bge	zero,r2,b2c <kingCapture+0x46c>
     b0c:	e0bff903 	ldbu	r2,-28(fp)
     b10:	10c03fcc 	andi	r3,r2,255
     b14:	e0bff647 	ldb	r2,-39(fp)
     b18:	1885883a 	add	r2,r3,r2
     b1c:	10800250 	cmplti	r2,r2,9
     b20:	103f0c1e 	bne	r2,zero,754 <__alt_data_end+0xfc000754>
     b24:	00000106 	br	b2c <kingCapture+0x46c>
							tempBoard[currentLocation.row][currentLocation.field] = friendlyKing;
							tempBoard[possibleLanding.row][possibleLanding.field] = BLACK;
							tempBoard[possibleEnemy.row][possibleEnemy.field] = capture->piece;
						}
					}
					break;
     b28:	0001883a 	nop
		printf("begin king capture\n");
	#endif
	Vector *captureVector = vectorInit();
	Location possibleEnemy, possibleLanding;
	for(signed char rowDirection = -1; rowDirection < 2; rowDirection = rowDirection + 2){
		for(signed char fieldDirection = -1; fieldDirection < 2; fieldDirection = fieldDirection + 2){
     b2c:	e0bff643 	ldbu	r2,-39(fp)
     b30:	10800084 	addi	r2,r2,2
     b34:	e0bff645 	stb	r2,-39(fp)
     b38:	e0bff647 	ldb	r2,-39(fp)
     b3c:	10800090 	cmplti	r2,r2,2
     b40:	103ef81e 	bne	r2,zero,724 <__alt_data_end+0xfc000724>
	#if DEBUG
		printf("begin king capture\n");
	#endif
	Vector *captureVector = vectorInit();
	Location possibleEnemy, possibleLanding;
	for(signed char rowDirection = -1; rowDirection < 2; rowDirection = rowDirection + 2){
     b44:	e0bff603 	ldbu	r2,-40(fp)
     b48:	10800084 	addi	r2,r2,2
     b4c:	e0bff605 	stb	r2,-40(fp)
     b50:	e0bff607 	ldb	r2,-40(fp)
     b54:	10800090 	cmplti	r2,r2,2
     b58:	103eef1e 	bne	r2,zero,718 <__alt_data_end+0xfc000718>
				}
			}

		}
	}
	return captureVector;
     b5c:	e0bff717 	ldw	r2,-36(fp)
}
     b60:	e037883a 	mov	sp,fp
     b64:	dfc00117 	ldw	ra,4(sp)
     b68:	df000017 	ldw	fp,0(sp)
     b6c:	dec00204 	addi	sp,sp,8
     b70:	f800283a 	ret

00000b74 <deleteCaptureVector>:

void deleteCaptureVector(VectorCapture *capture){
     b74:	defffb04 	addi	sp,sp,-20
     b78:	dfc00415 	stw	ra,16(sp)
     b7c:	df000315 	stw	fp,12(sp)
     b80:	df000304 	addi	fp,sp,12
     b84:	e13fff15 	stw	r4,-4(fp)
	if(capture->nextCaptures != NULL){
     b88:	e0bfff17 	ldw	r2,-4(fp)
     b8c:	10800017 	ldw	r2,0(r2)
     b90:	10001f26 	beq	r2,zero,c10 <deleteCaptureVector+0x9c>
		Vector * vector = capture->nextCaptures;
     b94:	e0bfff17 	ldw	r2,-4(fp)
     b98:	10800017 	ldw	r2,0(r2)
     b9c:	e0bffe15 	stw	r2,-8(fp)
		for(unsigned char i = 0; i < vector->count; i++){
     ba0:	e03ffd05 	stb	zero,-12(fp)
     ba4:	00001406 	br	bf8 <deleteCaptureVector+0x84>
			if(vector->data[i] != NULL){
     ba8:	e0bffe17 	ldw	r2,-8(fp)
     bac:	10c00017 	ldw	r3,0(r2)
     bb0:	e0bffd03 	ldbu	r2,-12(fp)
     bb4:	1085883a 	add	r2,r2,r2
     bb8:	1085883a 	add	r2,r2,r2
     bbc:	1885883a 	add	r2,r3,r2
     bc0:	10800017 	ldw	r2,0(r2)
     bc4:	10000926 	beq	r2,zero,bec <deleteCaptureVector+0x78>
				deleteCaptureVector(vector->data[i]);
     bc8:	e0bffe17 	ldw	r2,-8(fp)
     bcc:	10c00017 	ldw	r3,0(r2)
     bd0:	e0bffd03 	ldbu	r2,-12(fp)
     bd4:	1085883a 	add	r2,r2,r2
     bd8:	1085883a 	add	r2,r2,r2
     bdc:	1885883a 	add	r2,r3,r2
     be0:	10800017 	ldw	r2,0(r2)
     be4:	1009883a 	mov	r4,r2
     be8:	0000b740 	call	b74 <deleteCaptureVector>
}

void deleteCaptureVector(VectorCapture *capture){
	if(capture->nextCaptures != NULL){
		Vector * vector = capture->nextCaptures;
		for(unsigned char i = 0; i < vector->count; i++){
     bec:	e0bffd03 	ldbu	r2,-12(fp)
     bf0:	10800044 	addi	r2,r2,1
     bf4:	e0bffd05 	stb	r2,-12(fp)
     bf8:	e0fffd03 	ldbu	r3,-12(fp)
     bfc:	e0bffe17 	ldw	r2,-8(fp)
     c00:	10800217 	ldw	r2,8(r2)
     c04:	18bfe816 	blt	r3,r2,ba8 <__alt_data_end+0xfc000ba8>
			if(vector->data[i] != NULL){
				deleteCaptureVector(vector->data[i]);
			}
		}
		vectorFree(vector);
     c08:	e13ffe17 	ldw	r4,-8(fp)
     c0c:	00046b00 	call	46b0 <vectorFree>
	}
	free(capture);
     c10:	e13fff17 	ldw	r4,-4(fp)
     c14:	00050340 	call	5034 <free>
}
     c18:	0001883a 	nop
     c1c:	e037883a 	mov	sp,fp
     c20:	dfc00117 	ldw	ra,4(sp)
     c24:	df000017 	ldw	fp,0(sp)
     c28:	dec00204 	addi	sp,sp,8
     c2c:	f800283a 	ret

00000c30 <stripCaptureVector>:

unsigned char stripCaptureVector(Vector *vector, unsigned char count){
     c30:	defff904 	addi	sp,sp,-28
     c34:	dfc00615 	stw	ra,24(sp)
     c38:	df000515 	stw	fp,20(sp)
     c3c:	df000504 	addi	fp,sp,20
     c40:	e13ffe15 	stw	r4,-8(fp)
     c44:	2805883a 	mov	r2,r5
     c48:	e0bfff05 	stb	r2,-4(fp)
	unsigned char oldCount = 0;
     c4c:	e03ffb05 	stb	zero,-20(fp)
	count++;
     c50:	e0bfff03 	ldbu	r2,-4(fp)
     c54:	10800044 	addi	r2,r2,1
     c58:	e0bfff05 	stb	r2,-4(fp)
	if(vector->count == 0){
     c5c:	e0bffe17 	ldw	r2,-8(fp)
     c60:	10800217 	ldw	r2,8(r2)
     c64:	1000081e 	bne	r2,zero,c88 <stripCaptureVector+0x58>
		#if DEBUG
			printf("Vector 0\n");
     c68:	010000b4 	movhi	r4,2
     c6c:	2112bb04 	addi	r4,r4,19180
     c70:	0005cf40 	call	5cf4 <puts>
		#endif
		vectorFree(vector);
     c74:	e13ffe17 	ldw	r4,-8(fp)
     c78:	00046b00 	call	46b0 <vectorFree>
		oldCount = count;
     c7c:	e0bfff03 	ldbu	r2,-4(fp)
     c80:	e0bffb05 	stb	r2,-20(fp)
     c84:	00007706 	br	e64 <stripCaptureVector+0x234>
	}else{
		for(unsigned char i = 0; i < vector->count; i++){
     c88:	e03ffb45 	stb	zero,-19(fp)
     c8c:	00007106 	br	e54 <stripCaptureVector+0x224>
			#if DEBUG
				printf("count === %d\n", count);
     c90:	e0bfff03 	ldbu	r2,-4(fp)
     c94:	100b883a 	mov	r5,r2
     c98:	010000b4 	movhi	r4,2
     c9c:	2112be04 	addi	r4,r4,19192
     ca0:	0005bd80 	call	5bd8 <printf>
			#endif
			VectorCapture *capture = ((VectorCapture *)vector->data[i]);
     ca4:	e0bffe17 	ldw	r2,-8(fp)
     ca8:	10c00017 	ldw	r3,0(r2)
     cac:	e0bffb43 	ldbu	r2,-19(fp)
     cb0:	1085883a 	add	r2,r2,r2
     cb4:	1085883a 	add	r2,r2,r2
     cb8:	1885883a 	add	r2,r3,r2
     cbc:	10800017 	ldw	r2,0(r2)
     cc0:	e0bffc15 	stw	r2,-16(fp)
			if(capture->nextCaptures != NULL){
     cc4:	e0bffc17 	ldw	r2,-16(fp)
     cc8:	10800017 	ldw	r2,0(r2)
     ccc:	10005e26 	beq	r2,zero,e48 <stripCaptureVector+0x218>
				#if DEBUG
					printf("Next captures != NULL\n");
     cd0:	010000b4 	movhi	r4,2
     cd4:	2112c204 	addi	r4,r4,19208
     cd8:	0005cf40 	call	5cf4 <puts>
					printf("Vector count != 0\n");
     cdc:	010000b4 	movhi	r4,2
     ce0:	2112c804 	addi	r4,r4,19232
     ce4:	0005cf40 	call	5cf4 <puts>
				#endif
				unsigned char newCount = stripCaptureVector(capture->nextCaptures, count);
     ce8:	e0bffc17 	ldw	r2,-16(fp)
     cec:	10800017 	ldw	r2,0(r2)
     cf0:	e0ffff03 	ldbu	r3,-4(fp)
     cf4:	180b883a 	mov	r5,r3
     cf8:	1009883a 	mov	r4,r2
     cfc:	0000c300 	call	c30 <stripCaptureVector>
     d00:	e0bffd05 	stb	r2,-12(fp)
				#if DEBUG
					printf("Oldcount: %i\n Newcount: %i\n I: %i\n", oldCount ,newCount, i);
     d04:	e0bffb03 	ldbu	r2,-20(fp)
     d08:	e0fffd03 	ldbu	r3,-12(fp)
     d0c:	e13ffb43 	ldbu	r4,-19(fp)
     d10:	200f883a 	mov	r7,r4
     d14:	180d883a 	mov	r6,r3
     d18:	100b883a 	mov	r5,r2
     d1c:	010000b4 	movhi	r4,2
     d20:	2112cd04 	addi	r4,r4,19252
     d24:	0005bd80 	call	5bd8 <printf>
				#endif
				if(oldCount < newCount){
     d28:	e0fffb03 	ldbu	r3,-20(fp)
     d2c:	e0bffd03 	ldbu	r2,-12(fp)
     d30:	1880272e 	bgeu	r3,r2,dd0 <stripCaptureVector+0x1a0>
					for(signed char delI = i-1; delI >= 0; delI--){
     d34:	e0bffb43 	ldbu	r2,-19(fp)
     d38:	10bfffc4 	addi	r2,r2,-1
     d3c:	e0bffb85 	stb	r2,-18(fp)
     d40:	00001e06 	br	dbc <stripCaptureVector+0x18c>
						#if DEBUG
							printf("Deleting prevous items\n");
     d44:	010000b4 	movhi	r4,2
     d48:	2112d604 	addi	r4,r4,19288
     d4c:	0005cf40 	call	5cf4 <puts>
						#endif
						if(vector->data[delI] != NULL){
     d50:	e0bffe17 	ldw	r2,-8(fp)
     d54:	10c00017 	ldw	r3,0(r2)
     d58:	e0bffb87 	ldb	r2,-18(fp)
     d5c:	1085883a 	add	r2,r2,r2
     d60:	1085883a 	add	r2,r2,r2
     d64:	1885883a 	add	r2,r3,r2
     d68:	10800017 	ldw	r2,0(r2)
     d6c:	10001026 	beq	r2,zero,db0 <stripCaptureVector+0x180>
							deleteCaptureVector(vector->data[delI]);
     d70:	e0bffe17 	ldw	r2,-8(fp)
     d74:	10c00017 	ldw	r3,0(r2)
     d78:	e0bffb87 	ldb	r2,-18(fp)
     d7c:	1085883a 	add	r2,r2,r2
     d80:	1085883a 	add	r2,r2,r2
     d84:	1885883a 	add	r2,r3,r2
     d88:	10800017 	ldw	r2,0(r2)
     d8c:	1009883a 	mov	r4,r2
     d90:	0000b740 	call	b74 <deleteCaptureVector>
							vector->data[delI] = NULL;
     d94:	e0bffe17 	ldw	r2,-8(fp)
     d98:	10c00017 	ldw	r3,0(r2)
     d9c:	e0bffb87 	ldb	r2,-18(fp)
     da0:	1085883a 	add	r2,r2,r2
     da4:	1085883a 	add	r2,r2,r2
     da8:	1885883a 	add	r2,r3,r2
     dac:	10000015 	stw	zero,0(r2)
				unsigned char newCount = stripCaptureVector(capture->nextCaptures, count);
				#if DEBUG
					printf("Oldcount: %i\n Newcount: %i\n I: %i\n", oldCount ,newCount, i);
				#endif
				if(oldCount < newCount){
					for(signed char delI = i-1; delI >= 0; delI--){
     db0:	e0bffb83 	ldbu	r2,-18(fp)
     db4:	10bfffc4 	addi	r2,r2,-1
     db8:	e0bffb85 	stb	r2,-18(fp)
     dbc:	e0bffb87 	ldb	r2,-18(fp)
     dc0:	103fe00e 	bge	r2,zero,d44 <__alt_data_end+0xfc000d44>
						if(vector->data[delI] != NULL){
							deleteCaptureVector(vector->data[delI]);
							vector->data[delI] = NULL;
						}
					}
					oldCount = newCount;
     dc4:	e0bffd03 	ldbu	r2,-12(fp)
     dc8:	e0bffb05 	stb	r2,-20(fp)
     dcc:	00001e06 	br	e48 <stripCaptureVector+0x218>
				}else if(oldCount > newCount){
     dd0:	e0bffb03 	ldbu	r2,-20(fp)
     dd4:	e0fffd03 	ldbu	r3,-12(fp)
     dd8:	18801b2e 	bgeu	r3,r2,e48 <stripCaptureVector+0x218>
					if(vector->data[i] != NULL){
     ddc:	e0bffe17 	ldw	r2,-8(fp)
     de0:	10c00017 	ldw	r3,0(r2)
     de4:	e0bffb43 	ldbu	r2,-19(fp)
     de8:	1085883a 	add	r2,r2,r2
     dec:	1085883a 	add	r2,r2,r2
     df0:	1885883a 	add	r2,r3,r2
     df4:	10800017 	ldw	r2,0(r2)
     df8:	10001326 	beq	r2,zero,e48 <stripCaptureVector+0x218>
						#if DEBUG
							printf("deleting current item\n");
     dfc:	010000b4 	movhi	r4,2
     e00:	2112dc04 	addi	r4,r4,19312
     e04:	0005cf40 	call	5cf4 <puts>
						#endif
						// delete recursive
						deleteCaptureVector(vector->data[i]);
     e08:	e0bffe17 	ldw	r2,-8(fp)
     e0c:	10c00017 	ldw	r3,0(r2)
     e10:	e0bffb43 	ldbu	r2,-19(fp)
     e14:	1085883a 	add	r2,r2,r2
     e18:	1085883a 	add	r2,r2,r2
     e1c:	1885883a 	add	r2,r3,r2
     e20:	10800017 	ldw	r2,0(r2)
     e24:	1009883a 	mov	r4,r2
     e28:	0000b740 	call	b74 <deleteCaptureVector>
						vector->data[i] = NULL;
     e2c:	e0bffe17 	ldw	r2,-8(fp)
     e30:	10c00017 	ldw	r3,0(r2)
     e34:	e0bffb43 	ldbu	r2,-19(fp)
     e38:	1085883a 	add	r2,r2,r2
     e3c:	1085883a 	add	r2,r2,r2
     e40:	1885883a 	add	r2,r3,r2
     e44:	10000015 	stw	zero,0(r2)
			printf("Vector 0\n");
		#endif
		vectorFree(vector);
		oldCount = count;
	}else{
		for(unsigned char i = 0; i < vector->count; i++){
     e48:	e0bffb43 	ldbu	r2,-19(fp)
     e4c:	10800044 	addi	r2,r2,1
     e50:	e0bffb45 	stb	r2,-19(fp)
     e54:	e0fffb43 	ldbu	r3,-19(fp)
     e58:	e0bffe17 	ldw	r2,-8(fp)
     e5c:	10800217 	ldw	r2,8(r2)
     e60:	18bf8b16 	blt	r3,r2,c90 <__alt_data_end+0xfc000c90>
				}
			}
		}

	}
	return oldCount;
     e64:	e0bffb03 	ldbu	r2,-20(fp)
}
     e68:	e037883a 	mov	sp,fp
     e6c:	dfc00117 	ldw	ra,4(sp)
     e70:	df000017 	ldw	fp,0(sp)
     e74:	dec00204 	addi	sp,sp,8
     e78:	f800283a 	ret

00000e7c <addToMoveList>:

void addToMoveList(VectorCapture * capture, struct Move * origin){
     e7c:	defffb04 	addi	sp,sp,-20
     e80:	dfc00415 	stw	ra,16(sp)
     e84:	df000315 	stw	fp,12(sp)
     e88:	df000304 	addi	fp,sp,12
     e8c:	e13ffe15 	stw	r4,-8(fp)
     e90:	e17fff15 	stw	r5,-4(fp)
	printf("add move list loop\n");
     e94:	010000b4 	movhi	r4,2
     e98:	2112e204 	addi	r4,r4,19336
     e9c:	0005cf40 	call	5cf4 <puts>
	while(origin->nextMove != NULL){
     ea0:	00000306 	br	eb0 <addToMoveList+0x34>
		origin = origin->nextMove;
     ea4:	e0bfff17 	ldw	r2,-4(fp)
     ea8:	10800217 	ldw	r2,8(r2)
     eac:	e0bfff15 	stw	r2,-4(fp)
	return oldCount;
}

void addToMoveList(VectorCapture * capture, struct Move * origin){
	printf("add move list loop\n");
	while(origin->nextMove != NULL){
     eb0:	e0bfff17 	ldw	r2,-4(fp)
     eb4:	10800217 	ldw	r2,8(r2)
     eb8:	103ffa1e 	bne	r2,zero,ea4 <__alt_data_end+0xfc000ea4>
		origin = origin->nextMove;
	}
	printf("found it\n");
     ebc:	010000b4 	movhi	r4,2
     ec0:	2112e704 	addi	r4,r4,19356
     ec4:	0005cf40 	call	5cf4 <puts>
	printf("%lu\n", sizeof(struct Move));
     ec8:	01400304 	movi	r5,12
     ecc:	010000b4 	movhi	r4,2
     ed0:	2112ea04 	addi	r4,r4,19368
     ed4:	0005bd80 	call	5bd8 <printf>
	struct Move * newMove  = malloc(sizeof(struct Move));
     ed8:	01000304 	movi	r4,12
     edc:	00050200 	call	5020 <malloc>
     ee0:	e0bffd15 	stw	r2,-12(fp)
	printf("summon the evil wizard malloc for the second time\n");
     ee4:	010000b4 	movhi	r4,2
     ee8:	2112ec04 	addi	r4,r4,19376
     eec:	0005cf40 	call	5cf4 <puts>

	newMove->oldLocation = capture->oldLocation;
     ef0:	e0bffd17 	ldw	r2,-12(fp)
     ef4:	e0fffe17 	ldw	r3,-8(fp)
     ef8:	18c0010b 	ldhu	r3,4(r3)
     efc:	10c0000d 	sth	r3,0(r2)
	newMove->newLocation = capture->newLocation;
     f00:	e0bffd17 	ldw	r2,-12(fp)
     f04:	e0fffe17 	ldw	r3,-8(fp)
     f08:	18c0020b 	ldhu	r3,8(r3)
     f0c:	10c0008d 	sth	r3,2(r2)
	newMove->nextMove = NULL;
     f10:	e0bffd17 	ldw	r2,-12(fp)
     f14:	10000215 	stw	zero,8(r2)

	newMove->capture.piece = capture->piece;
     f18:	e0bffe17 	ldw	r2,-8(fp)
     f1c:	10c00283 	ldbu	r3,10(r2)
     f20:	e0bffd17 	ldw	r2,-12(fp)
     f24:	10c00185 	stb	r3,6(r2)
	newMove->capture.captureLocation = capture->captureLocation;
     f28:	e0bffd17 	ldw	r2,-12(fp)
     f2c:	e0fffe17 	ldw	r3,-8(fp)
     f30:	18c0018b 	ldhu	r3,6(r3)
     f34:	10c0010d 	sth	r3,4(r2)

	origin->nextMove = newMove;
     f38:	e0bfff17 	ldw	r2,-4(fp)
     f3c:	e0fffd17 	ldw	r3,-12(fp)
     f40:	10c00215 	stw	r3,8(r2)
}
     f44:	0001883a 	nop
     f48:	e037883a 	mov	sp,fp
     f4c:	dfc00117 	ldw	ra,4(sp)
     f50:	df000017 	ldw	fp,0(sp)
     f54:	dec00204 	addi	sp,sp,8
     f58:	f800283a 	ret

00000f5c <copyBoard>:

void copyBoard(unsigned char oldBoard[10][10], unsigned char newBoard[10][10]){
     f5c:	defffc04 	addi	sp,sp,-16
     f60:	df000315 	stw	fp,12(sp)
     f64:	df000304 	addi	fp,sp,12
     f68:	e13ffe15 	stw	r4,-8(fp)
     f6c:	e17fff15 	stw	r5,-4(fp)
	for(unsigned char rowI = 0; rowI < 10; rowI++){
     f70:	e03ffd05 	stb	zero,-12(fp)
     f74:	00001a06 	br	fe0 <copyBoard+0x84>
		for(unsigned char fieldI = 0; fieldI < 10; fieldI++){
     f78:	e03ffd45 	stb	zero,-11(fp)
     f7c:	00001206 	br	fc8 <copyBoard+0x6c>
			newBoard[rowI][fieldI] = oldBoard[rowI+3][fieldI];
     f80:	e0bffd03 	ldbu	r2,-12(fp)
     f84:	108002a4 	muli	r2,r2,10
     f88:	e0ffff17 	ldw	r3,-4(fp)
     f8c:	1889883a 	add	r4,r3,r2
     f90:	e0bffd43 	ldbu	r2,-11(fp)
     f94:	e0fffd03 	ldbu	r3,-12(fp)
     f98:	18c002a4 	muli	r3,r3,10
     f9c:	18c00784 	addi	r3,r3,30
     fa0:	e17ffe17 	ldw	r5,-8(fp)
     fa4:	28cb883a 	add	r5,r5,r3
     fa8:	e0fffd43 	ldbu	r3,-11(fp)
     fac:	28c7883a 	add	r3,r5,r3
     fb0:	18c00003 	ldbu	r3,0(r3)
     fb4:	2085883a 	add	r2,r4,r2
     fb8:	10c00005 	stb	r3,0(r2)
	origin->nextMove = newMove;
}

void copyBoard(unsigned char oldBoard[10][10], unsigned char newBoard[10][10]){
	for(unsigned char rowI = 0; rowI < 10; rowI++){
		for(unsigned char fieldI = 0; fieldI < 10; fieldI++){
     fbc:	e0bffd43 	ldbu	r2,-11(fp)
     fc0:	10800044 	addi	r2,r2,1
     fc4:	e0bffd45 	stb	r2,-11(fp)
     fc8:	e0bffd43 	ldbu	r2,-11(fp)
     fcc:	108002b0 	cmpltui	r2,r2,10
     fd0:	103feb1e 	bne	r2,zero,f80 <__alt_data_end+0xfc000f80>

	origin->nextMove = newMove;
}

void copyBoard(unsigned char oldBoard[10][10], unsigned char newBoard[10][10]){
	for(unsigned char rowI = 0; rowI < 10; rowI++){
     fd4:	e0bffd03 	ldbu	r2,-12(fp)
     fd8:	10800044 	addi	r2,r2,1
     fdc:	e0bffd05 	stb	r2,-12(fp)
     fe0:	e0bffd03 	ldbu	r2,-12(fp)
     fe4:	108002b0 	cmpltui	r2,r2,10
     fe8:	103fe31e 	bne	r2,zero,f78 <__alt_data_end+0xfc000f78>
		for(unsigned char fieldI = 0; fieldI < 10; fieldI++){
			newBoard[rowI][fieldI] = oldBoard[rowI+3][fieldI];
		}
	}
}
     fec:	0001883a 	nop
     ff0:	e037883a 	mov	sp,fp
     ff4:	df000017 	ldw	fp,0(sp)
     ff8:	dec00104 	addi	sp,sp,4
     ffc:	f800283a 	ret

00001000 <copyMoveList>:

void copyMoveList(struct Move * originalOrigin, struct Move * newOrigin, unsigned char depth){
    1000:	defffb04 	addi	sp,sp,-20
    1004:	dfc00415 	stw	ra,16(sp)
    1008:	df000315 	stw	fp,12(sp)
    100c:	df000304 	addi	fp,sp,12
    1010:	e13ffd15 	stw	r4,-12(fp)
    1014:	e17ffe15 	stw	r5,-8(fp)
    1018:	3005883a 	mov	r2,r6
    101c:	e0bfff05 	stb	r2,-4(fp)
	while(depth > 0){
    1020:	00001706 	br	1080 <copyMoveList+0x80>
		depth--;
    1024:	e0bfff03 	ldbu	r2,-4(fp)
    1028:	10bfffc4 	addi	r2,r2,-1
    102c:	e0bfff05 	stb	r2,-4(fp)
		memcpy(newOrigin, originalOrigin, sizeof(struct Move));
    1030:	01800304 	movi	r6,12
    1034:	e17ffd17 	ldw	r5,-12(fp)
    1038:	e13ffe17 	ldw	r4,-8(fp)
    103c:	00059380 	call	5938 <memcpy>

		if(originalOrigin->nextMove == NULL){
    1040:	e0bffd17 	ldw	r2,-12(fp)
    1044:	10800217 	ldw	r2,8(r2)
    1048:	1000021e 	bne	r2,zero,1054 <copyMoveList+0x54>
			newOrigin->nextMove = NULL;
    104c:	e0bffe17 	ldw	r2,-8(fp)
    1050:	10000215 	stw	zero,8(r2)
		}
		newOrigin->nextMove = malloc(sizeof(struct Move));
    1054:	01000304 	movi	r4,12
    1058:	00050200 	call	5020 <malloc>
    105c:	1007883a 	mov	r3,r2
    1060:	e0bffe17 	ldw	r2,-8(fp)
    1064:	10c00215 	stw	r3,8(r2)
		newOrigin = newOrigin->nextMove;
    1068:	e0bffe17 	ldw	r2,-8(fp)
    106c:	10800217 	ldw	r2,8(r2)
    1070:	e0bffe15 	stw	r2,-8(fp)
		originalOrigin = originalOrigin->nextMove;
    1074:	e0bffd17 	ldw	r2,-12(fp)
    1078:	10800217 	ldw	r2,8(r2)
    107c:	e0bffd15 	stw	r2,-12(fp)
		}
	}
}

void copyMoveList(struct Move * originalOrigin, struct Move * newOrigin, unsigned char depth){
	while(depth > 0){
    1080:	e0bfff03 	ldbu	r2,-4(fp)
    1084:	103fe71e 	bne	r2,zero,1024 <__alt_data_end+0xfc001024>
		newOrigin->nextMove = malloc(sizeof(struct Move));
		newOrigin = newOrigin->nextMove;
		originalOrigin = originalOrigin->nextMove;
	}

}
    1088:	0001883a 	nop
    108c:	e037883a 	mov	sp,fp
    1090:	dfc00117 	ldw	ra,4(sp)
    1094:	df000017 	ldw	fp,0(sp)
    1098:	dec00204 	addi	sp,sp,8
    109c:	f800283a 	ret

000010a0 <generateCaptureList>:

void generateCaptureList(Vector* captureVector, struct Move * moveList, Vector * moveVector, unsigned char tempBoard[10][10], unsigned char depth){
    10a0:	defff404 	addi	sp,sp,-48
    10a4:	dfc00b15 	stw	ra,44(sp)
    10a8:	df000a15 	stw	fp,40(sp)
    10ac:	df000a04 	addi	fp,sp,40
    10b0:	e13ffb15 	stw	r4,-20(fp)
    10b4:	e17ffc15 	stw	r5,-16(fp)
    10b8:	e1bffd15 	stw	r6,-12(fp)
    10bc:	e1fffe15 	stw	r7,-8(fp)
    10c0:	e0800217 	ldw	r2,8(fp)
    10c4:	e0bfff05 	stb	r2,-4(fp)
	depth++;
    10c8:	e0bfff03 	ldbu	r2,-4(fp)
    10cc:	10800044 	addi	r2,r2,1
    10d0:	e0bfff05 	stb	r2,-4(fp)
	for(unsigned char i = 0; i < captureVector->count; i++){
    10d4:	e03ff705 	stb	zero,-36(fp)
    10d8:	00009b06 	br	1348 <generateCaptureList+0x2a8>
		if(captureVector->data[i] != NULL){
    10dc:	e0bffb17 	ldw	r2,-20(fp)
    10e0:	10c00017 	ldw	r3,0(r2)
    10e4:	e0bff703 	ldbu	r2,-36(fp)
    10e8:	1085883a 	add	r2,r2,r2
    10ec:	1085883a 	add	r2,r2,r2
    10f0:	1885883a 	add	r2,r3,r2
    10f4:	10800017 	ldw	r2,0(r2)
    10f8:	10009026 	beq	r2,zero,133c <generateCaptureList+0x29c>
			printf("kaasten\n");
    10fc:	010000b4 	movhi	r4,2
    1100:	2112f904 	addi	r4,r4,19428
    1104:	0005cf40 	call	5cf4 <puts>
			VectorCapture * capture = (VectorCapture *)captureVector->data[i];
    1108:	e0bffb17 	ldw	r2,-20(fp)
    110c:	10c00017 	ldw	r3,0(r2)
    1110:	e0bff703 	ldbu	r2,-36(fp)
    1114:	1085883a 	add	r2,r2,r2
    1118:	1085883a 	add	r2,r2,r2
    111c:	1885883a 	add	r2,r3,r2
    1120:	10800017 	ldw	r2,0(r2)
    1124:	e0bff915 	stw	r2,-28(fp)
			printf("add to move list\n");
    1128:	010000b4 	movhi	r4,2
    112c:	2112fb04 	addi	r4,r4,19436
    1130:	0005cf40 	call	5cf4 <puts>
			addToMoveList(capture, moveList);
    1134:	e17ffc17 	ldw	r5,-16(fp)
    1138:	e13ff917 	ldw	r4,-28(fp)
    113c:	0000e7c0 	call	e7c <addToMoveList>

			printf("change board\n");
    1140:	010000b4 	movhi	r4,2
    1144:	21130004 	addi	r4,r4,19456
    1148:	0005cf40 	call	5cf4 <puts>
			tempBoard[capture->newLocation.row][capture->newLocation.field] = board[capture->oldLocation.row][capture->oldLocation.field];
    114c:	e0bff917 	ldw	r2,-28(fp)
    1150:	10800243 	ldbu	r2,9(r2)
    1154:	10803fcc 	andi	r2,r2,255
    1158:	108002a4 	muli	r2,r2,10
    115c:	e0fffe17 	ldw	r3,-8(fp)
    1160:	188b883a 	add	r5,r3,r2
    1164:	e0bff917 	ldw	r2,-28(fp)
    1168:	10800203 	ldbu	r2,8(r2)
    116c:	11003fcc 	andi	r4,r2,255
    1170:	e0bff917 	ldw	r2,-28(fp)
    1174:	10800143 	ldbu	r2,5(r2)
    1178:	11803fcc 	andi	r6,r2,255
    117c:	e0bff917 	ldw	r2,-28(fp)
    1180:	10800103 	ldbu	r2,4(r2)
    1184:	10c03fcc 	andi	r3,r2,255
    1188:	008000f4 	movhi	r2,3
    118c:	10a53804 	addi	r2,r2,-27424
    1190:	318002a4 	muli	r6,r6,10
    1194:	1185883a 	add	r2,r2,r6
    1198:	10c5883a 	add	r2,r2,r3
    119c:	10c00003 	ldbu	r3,0(r2)
    11a0:	2905883a 	add	r2,r5,r4
    11a4:	10c00005 	stb	r3,0(r2)
			tempBoard[capture->oldLocation.row][capture->oldLocation.field] = BLACK;
    11a8:	e0bff917 	ldw	r2,-28(fp)
    11ac:	10800143 	ldbu	r2,5(r2)
    11b0:	10803fcc 	andi	r2,r2,255
    11b4:	108002a4 	muli	r2,r2,10
    11b8:	e0fffe17 	ldw	r3,-8(fp)
    11bc:	1887883a 	add	r3,r3,r2
    11c0:	e0bff917 	ldw	r2,-28(fp)
    11c4:	10800103 	ldbu	r2,4(r2)
    11c8:	10803fcc 	andi	r2,r2,255
    11cc:	1885883a 	add	r2,r3,r2
    11d0:	00c00044 	movi	r3,1
    11d4:	10c00005 	stb	r3,0(r2)
			tempBoard[capture->captureLocation.row][capture->captureLocation.field] = BLACK;
    11d8:	e0bff917 	ldw	r2,-28(fp)
    11dc:	108001c3 	ldbu	r2,7(r2)
    11e0:	10803fcc 	andi	r2,r2,255
    11e4:	108002a4 	muli	r2,r2,10
    11e8:	e0fffe17 	ldw	r3,-8(fp)
    11ec:	1887883a 	add	r3,r3,r2
    11f0:	e0bff917 	ldw	r2,-28(fp)
    11f4:	10800183 	ldbu	r2,6(r2)
    11f8:	10803fcc 	andi	r2,r2,255
    11fc:	1885883a 	add	r2,r3,r2
    1200:	00c00044 	movi	r3,1
    1204:	10c00005 	stb	r3,0(r2)

			if(capture->nextCaptures == NULL || capture->nextCaptures->count == 0){
    1208:	e0bff917 	ldw	r2,-28(fp)
    120c:	10800017 	ldw	r2,0(r2)
    1210:	10000426 	beq	r2,zero,1224 <generateCaptureList+0x184>
    1214:	e0bff917 	ldw	r2,-28(fp)
    1218:	10800017 	ldw	r2,0(r2)
    121c:	10800217 	ldw	r2,8(r2)
    1220:	1000241e 	bne	r2,zero,12b4 <generateCaptureList+0x214>
				#if DEBUG
					printf("add\n");
    1224:	010000b4 	movhi	r4,2
    1228:	21130404 	addi	r4,r4,19472
    122c:	0005cf40 	call	5cf4 <puts>
					printf("malloccing vectorMove\n");
    1230:	010000b4 	movhi	r4,2
    1234:	21130504 	addi	r4,r4,19476
    1238:	0005cf40 	call	5cf4 <puts>
				#endif
				VectorMove * vectorMove = malloc(sizeof(vectorMove));
    123c:	01000104 	movi	r4,4
    1240:	00050200 	call	5020 <malloc>
    1244:	e0bffa15 	stw	r2,-24(fp)
				#if DEBUG
					printf("mallocced vectorMove\n");
    1248:	010000b4 	movhi	r4,2
    124c:	21130b04 	addi	r4,r4,19500
    1250:	0005cf40 	call	5cf4 <puts>
				#endif
				vectorMove->move = moveList;
    1254:	e0bffa17 	ldw	r2,-24(fp)
    1258:	e0fffc17 	ldw	r3,-16(fp)
    125c:	10c00015 	stw	r3,0(r2)
				printf("starting copy\n");
    1260:	010000b4 	movhi	r4,2
    1264:	21131104 	addi	r4,r4,19524
    1268:	0005cf40 	call	5cf4 <puts>
				copyBoard(tempBoard, vectorMove->board);
    126c:	e0bffa17 	ldw	r2,-24(fp)
    1270:	10800104 	addi	r2,r2,4
    1274:	100b883a 	mov	r5,r2
    1278:	e13ffe17 	ldw	r4,-8(fp)
    127c:	0000f5c0 	call	f5c <copyBoard>
				#if DEBUG
					printf("board copied\n");
    1280:	010000b4 	movhi	r4,2
    1284:	21131504 	addi	r4,r4,19540
    1288:	0005cf40 	call	5cf4 <puts>
					printf("adding moves\n");
    128c:	010000b4 	movhi	r4,2
    1290:	21131904 	addi	r4,r4,19556
    1294:	0005cf40 	call	5cf4 <puts>
				#endif
				vectorAdd(moveVector, (void *)vectorMove);
    1298:	e17ffa17 	ldw	r5,-24(fp)
    129c:	e13ffd17 	ldw	r4,-12(fp)
    12a0:	00043a40 	call	43a4 <vectorAdd>
				#if DEBUG
					printf("moves added\n");
    12a4:	010000b4 	movhi	r4,2
    12a8:	21131d04 	addi	r4,r4,19572
    12ac:	0005cf40 	call	5cf4 <puts>
			printf("change board\n");
			tempBoard[capture->newLocation.row][capture->newLocation.field] = board[capture->oldLocation.row][capture->oldLocation.field];
			tempBoard[capture->oldLocation.row][capture->oldLocation.field] = BLACK;
			tempBoard[capture->captureLocation.row][capture->captureLocation.field] = BLACK;

			if(capture->nextCaptures == NULL || capture->nextCaptures->count == 0){
    12b0:	00002206 	br	133c <generateCaptureList+0x29c>
				#if DEBUG
					printf("moves added\n");
				#endif

			}else{
				printf("Of ANDERS\n");
    12b4:	010000b4 	movhi	r4,2
    12b8:	21132004 	addi	r4,r4,19584
    12bc:	0005cf40 	call	5cf4 <puts>
				struct Move * newMoveList;
				if(i > 0){
    12c0:	e0bff703 	ldbu	r2,-36(fp)
    12c4:	10000f26 	beq	r2,zero,1304 <generateCaptureList+0x264>
					printf("DIT\n");
    12c8:	010000b4 	movhi	r4,2
    12cc:	21132304 	addi	r4,r4,19596
    12d0:	0005cf40 	call	5cf4 <puts>
					newMoveList = malloc(sizeof(struct Move));
    12d4:	01000304 	movi	r4,12
    12d8:	00050200 	call	5020 <malloc>
    12dc:	e0bff815 	stw	r2,-32(fp)
					printf("its the evil wizard again");
    12e0:	010000b4 	movhi	r4,2
    12e4:	21132404 	addi	r4,r4,19600
    12e8:	0005bd80 	call	5bd8 <printf>
					copyMoveList(moveList, newMoveList, depth);
    12ec:	e0bfff03 	ldbu	r2,-4(fp)
    12f0:	100d883a 	mov	r6,r2
    12f4:	e17ff817 	ldw	r5,-32(fp)
    12f8:	e13ffc17 	ldw	r4,-16(fp)
    12fc:	00010000 	call	1000 <copyMoveList>
    1300:	00000506 	br	1318 <generateCaptureList+0x278>
				}else{
					printf("DAT\n");
    1304:	010000b4 	movhi	r4,2
    1308:	21132b04 	addi	r4,r4,19628
    130c:	0005cf40 	call	5cf4 <puts>
					newMoveList = moveList;
    1310:	e0bffc17 	ldw	r2,-16(fp)
    1314:	e0bff815 	stw	r2,-32(fp)
				}
				generateCaptureList(capture->nextCaptures, newMoveList, moveVector, tempBoard, depth);
    1318:	e0bff917 	ldw	r2,-28(fp)
    131c:	10c00017 	ldw	r3,0(r2)
    1320:	e0bfff03 	ldbu	r2,-4(fp)
    1324:	d8800015 	stw	r2,0(sp)
    1328:	e1fffe17 	ldw	r7,-8(fp)
    132c:	e1bffd17 	ldw	r6,-12(fp)
    1330:	e17ff817 	ldw	r5,-32(fp)
    1334:	1809883a 	mov	r4,r3
    1338:	00010a00 	call	10a0 <generateCaptureList>

}

void generateCaptureList(Vector* captureVector, struct Move * moveList, Vector * moveVector, unsigned char tempBoard[10][10], unsigned char depth){
	depth++;
	for(unsigned char i = 0; i < captureVector->count; i++){
    133c:	e0bff703 	ldbu	r2,-36(fp)
    1340:	10800044 	addi	r2,r2,1
    1344:	e0bff705 	stb	r2,-36(fp)
    1348:	e0fff703 	ldbu	r3,-36(fp)
    134c:	e0bffb17 	ldw	r2,-20(fp)
    1350:	10800217 	ldw	r2,8(r2)
    1354:	18bf6116 	blt	r3,r2,10dc <__alt_data_end+0xfc0010dc>
				}
				generateCaptureList(capture->nextCaptures, newMoveList, moveVector, tempBoard, depth);
			}
		}
	}
}
    1358:	0001883a 	nop
    135c:	e037883a 	mov	sp,fp
    1360:	dfc00117 	ldw	ra,4(sp)
    1364:	df000017 	ldw	fp,0(sp)
    1368:	dec00204 	addi	sp,sp,8
    136c:	f800283a 	ret

00001370 <manCapture>:

unsigned char manCapture(unsigned char * tempBoard[], unsigned char row, unsigned char field, unsigned char friendly, unsigned char friendlyKing, unsigned char enemy, unsigned char enemyKing){
    1370:	deffd904 	addi	sp,sp,-156
    1374:	dfc02615 	stw	ra,152(sp)
    1378:	df002515 	stw	fp,148(sp)
    137c:	df002504 	addi	fp,sp,148
    1380:	e13ff915 	stw	r4,-28(fp)
    1384:	2811883a 	mov	r8,r5
    1388:	380b883a 	mov	r5,r7
    138c:	e1000217 	ldw	r4,8(fp)
    1390:	e0c00317 	ldw	r3,12(fp)
    1394:	e0800417 	ldw	r2,16(fp)
    1398:	e23ffa05 	stb	r8,-24(fp)
    139c:	e1bffb05 	stb	r6,-20(fp)
    13a0:	e17ffc05 	stb	r5,-16(fp)
    13a4:	e13ffd05 	stb	r4,-12(fp)
    13a8:	e0fffe05 	stb	r3,-8(fp)
    13ac:	e0bfff05 	stb	r2,-4(fp)

	unsigned char b[10][10];
	memcpy(b,tempBoard,100);
    13b0:	e0bfdf84 	addi	r2,fp,-130
    13b4:	01801904 	movi	r6,100
    13b8:	e17ff917 	ldw	r5,-28(fp)
    13bc:	1009883a 	mov	r4,r2
    13c0:	00059380 	call	5938 <memcpy>

	unsigned char possibleEnemyRow, possibleEnemyField, possibleNewRow, possibleNewField;

	for(signed char rowDirection = -1; rowDirection < 2; rowDirection = rowDirection + 2){
    13c4:	00bfffc4 	movi	r2,-1
    13c8:	e0bfde05 	stb	r2,-136(fp)
    13cc:	0000a106 	br	1654 <manCapture+0x2e4>

		for(signed char fieldDirection = -1; fieldDirection < 2; fieldDirection = fieldDirection + 2){
    13d0:	00bfffc4 	movi	r2,-1
    13d4:	e0bfde45 	stb	r2,-135(fp)
    13d8:	00009806 	br	163c <manCapture+0x2cc>

			possibleEnemyRow = row + rowDirection;
    13dc:	e0bfde03 	ldbu	r2,-136(fp)
    13e0:	e0fffa03 	ldbu	r3,-24(fp)
    13e4:	1885883a 	add	r2,r3,r2
    13e8:	e0bfde85 	stb	r2,-134(fp)
			possibleEnemyField = field + fieldDirection;
    13ec:	e0bfde43 	ldbu	r2,-135(fp)
    13f0:	e0fffb03 	ldbu	r3,-20(fp)
    13f4:	1885883a 	add	r2,r3,r2
    13f8:	e0bfdec5 	stb	r2,-133(fp)

			// Dont check the side for enemies you cant capture them there
			if(possibleEnemyRow > 0 && possibleEnemyRow < 9 && possibleEnemyField > 0 && possibleEnemyField < 9){
    13fc:	e0bfde83 	ldbu	r2,-134(fp)
    1400:	10008b26 	beq	r2,zero,1630 <manCapture+0x2c0>
    1404:	e0bfde83 	ldbu	r2,-134(fp)
    1408:	10800268 	cmpgeui	r2,r2,9
    140c:	1000881e 	bne	r2,zero,1630 <manCapture+0x2c0>
    1410:	e0bfdec3 	ldbu	r2,-133(fp)
    1414:	10008626 	beq	r2,zero,1630 <manCapture+0x2c0>
    1418:	e0bfdec3 	ldbu	r2,-133(fp)
    141c:	10800268 	cmpgeui	r2,r2,9
    1420:	1000831e 	bne	r2,zero,1630 <manCapture+0x2c0>
			//	printf("%s %d%c", "enemy in range?", board[possibleEnemyRow][possibleEnemyField] == enemy || board[possibleEnemyRow][possibleEnemyField] == enemyKing, '\n');
				if(b[possibleEnemyRow][possibleEnemyField] == enemy || b[possibleEnemyRow][possibleEnemyField] == enemyKing){
    1424:	e0ffde83 	ldbu	r3,-134(fp)
    1428:	e0bfdec3 	ldbu	r2,-133(fp)
    142c:	18c002a4 	muli	r3,r3,10
    1430:	e13fde04 	addi	r4,fp,-136
    1434:	20c7883a 	add	r3,r4,r3
    1438:	1885883a 	add	r2,r3,r2
    143c:	10800184 	addi	r2,r2,6
    1440:	10800003 	ldbu	r2,0(r2)
    1444:	10c03fcc 	andi	r3,r2,255
    1448:	e0bffe03 	ldbu	r2,-8(fp)
    144c:	18800b26 	beq	r3,r2,147c <manCapture+0x10c>
    1450:	e0ffde83 	ldbu	r3,-134(fp)
    1454:	e0bfdec3 	ldbu	r2,-133(fp)
    1458:	18c002a4 	muli	r3,r3,10
    145c:	e17fde04 	addi	r5,fp,-136
    1460:	28c7883a 	add	r3,r5,r3
    1464:	1885883a 	add	r2,r3,r2
    1468:	10800184 	addi	r2,r2,6
    146c:	10800003 	ldbu	r2,0(r2)
    1470:	10c03fcc 	andi	r3,r2,255
    1474:	e0bfff03 	ldbu	r2,-4(fp)
    1478:	18806d1e 	bne	r3,r2,1630 <manCapture+0x2c0>

				//	printf("%s %d%c%d%c", "beeb boob enemy detected at",  possibleEnemyRow, '.', possibleEnemyField, '\n');
					possibleNewRow = possibleEnemyRow + rowDirection;
    147c:	e0bfde03 	ldbu	r2,-136(fp)
    1480:	e0ffde83 	ldbu	r3,-134(fp)
    1484:	1885883a 	add	r2,r3,r2
    1488:	e0bfdf05 	stb	r2,-132(fp)
					possibleNewField = possibleEnemyField + fieldDirection;
    148c:	e0bfde43 	ldbu	r2,-135(fp)
    1490:	e0ffdec3 	ldbu	r3,-133(fp)
    1494:	1885883a 	add	r2,r3,r2
    1498:	e0bfdf45 	stb	r2,-131(fp)

					if(b[possibleNewRow][possibleNewField] == BLACK){
    149c:	e0ffdf03 	ldbu	r3,-132(fp)
    14a0:	e0bfdf43 	ldbu	r2,-131(fp)
    14a4:	18c002a4 	muli	r3,r3,10
    14a8:	e13fde04 	addi	r4,fp,-136
    14ac:	20c7883a 	add	r3,r4,r3
    14b0:	1885883a 	add	r2,r3,r2
    14b4:	10800184 	addi	r2,r2,6
    14b8:	10800003 	ldbu	r2,0(r2)
    14bc:	10803fcc 	andi	r2,r2,255
    14c0:	10800058 	cmpnei	r2,r2,1
    14c4:	10005a1e 	bne	r2,zero,1630 <manCapture+0x2c0>

					//	printf("charge!!!!!!!!!\n");
						b[possibleNewRow][possibleNewField] = board[row][field];
    14c8:	e17fdf03 	ldbu	r5,-132(fp)
    14cc:	e13fdf43 	ldbu	r4,-131(fp)
    14d0:	e1bffa03 	ldbu	r6,-24(fp)
    14d4:	e0fffb03 	ldbu	r3,-20(fp)
    14d8:	008000f4 	movhi	r2,3
    14dc:	10a53804 	addi	r2,r2,-27424
    14e0:	318002a4 	muli	r6,r6,10
    14e4:	1185883a 	add	r2,r2,r6
    14e8:	10c5883a 	add	r2,r2,r3
    14ec:	10c00003 	ldbu	r3,0(r2)
    14f0:	288002a4 	muli	r2,r5,10
    14f4:	e17fde04 	addi	r5,fp,-136
    14f8:	2885883a 	add	r2,r5,r2
    14fc:	1105883a 	add	r2,r2,r4
    1500:	10800184 	addi	r2,r2,6
    1504:	10c00005 	stb	r3,0(r2)
						b[row][field] = BLACK;
    1508:	e0fffa03 	ldbu	r3,-24(fp)
    150c:	e0bffb03 	ldbu	r2,-20(fp)
    1510:	18c002a4 	muli	r3,r3,10
    1514:	e13fde04 	addi	r4,fp,-136
    1518:	20c7883a 	add	r3,r4,r3
    151c:	1885883a 	add	r2,r3,r2
    1520:	10800184 	addi	r2,r2,6
    1524:	00c00044 	movi	r3,1
    1528:	10c00005 	stb	r3,0(r2)
						b[possibleEnemyRow][possibleEnemyField] = BLACK;
    152c:	e0ffde83 	ldbu	r3,-134(fp)
    1530:	e0bfdec3 	ldbu	r2,-133(fp)
    1534:	18c002a4 	muli	r3,r3,10
    1538:	e17fde04 	addi	r5,fp,-136
    153c:	28c7883a 	add	r3,r5,r3
    1540:	1885883a 	add	r2,r3,r2
    1544:	10800184 	addi	r2,r2,6
    1548:	00c00044 	movi	r3,1
    154c:	10c00005 	stb	r3,0(r2)
						#if DEBUG
							printBoard((unsigned char **)b,possibleNewRow, possibleNewField, row, field);
    1550:	e13fdf03 	ldbu	r4,-132(fp)
    1554:	e17fdf43 	ldbu	r5,-131(fp)
    1558:	e1bffa03 	ldbu	r6,-24(fp)
    155c:	e0bffb03 	ldbu	r2,-20(fp)
    1560:	e0ffdf84 	addi	r3,fp,-130
    1564:	d8800015 	stw	r2,0(sp)
    1568:	300f883a 	mov	r7,r6
    156c:	280d883a 	mov	r6,r5
    1570:	200b883a 	mov	r5,r4
    1574:	1809883a 	mov	r4,r3
    1578:	00004bc0 	call	4bc <printBoard>
							printf("%s %d %s %d%c", "old row", row, "old field", field,'\n');
    157c:	e13ffa03 	ldbu	r4,-24(fp)
    1580:	e0bffb03 	ldbu	r2,-20(fp)
    1584:	00c00284 	movi	r3,10
    1588:	d8c00115 	stw	r3,4(sp)
    158c:	d8800015 	stw	r2,0(sp)
    1590:	01c000b4 	movhi	r7,2
    1594:	39d32c04 	addi	r7,r7,19632
    1598:	200d883a 	mov	r6,r4
    159c:	014000b4 	movhi	r5,2
    15a0:	29532f04 	addi	r5,r5,19644
    15a4:	010000b4 	movhi	r4,2
    15a8:	21133104 	addi	r4,r4,19652
    15ac:	0005bd80 	call	5bd8 <printf>
							printf("%s %d %s %d%c", "new row", possibleNewRow, "new field", possibleNewField,'\n');
    15b0:	e13fdf03 	ldbu	r4,-132(fp)
    15b4:	e0bfdf43 	ldbu	r2,-131(fp)
    15b8:	00c00284 	movi	r3,10
    15bc:	d8c00115 	stw	r3,4(sp)
    15c0:	d8800015 	stw	r2,0(sp)
    15c4:	01c000b4 	movhi	r7,2
    15c8:	39d33504 	addi	r7,r7,19668
    15cc:	200d883a 	mov	r6,r4
    15d0:	014000b4 	movhi	r5,2
    15d4:	29533804 	addi	r5,r5,19680
    15d8:	010000b4 	movhi	r4,2
    15dc:	21133104 	addi	r4,r4,19652
    15e0:	0005bd80 	call	5bd8 <printf>
						#endif
						//printCountPieces();
						manCapture((unsigned char **)b, possibleNewRow, possibleNewField, friendly, friendlyKing, enemy, enemyKing);
    15e4:	e17fdf03 	ldbu	r5,-132(fp)
    15e8:	e1bfdf43 	ldbu	r6,-131(fp)
    15ec:	e1fffc03 	ldbu	r7,-16(fp)
    15f0:	e0bffd03 	ldbu	r2,-12(fp)
    15f4:	e0fffe03 	ldbu	r3,-8(fp)
    15f8:	e13fff03 	ldbu	r4,-4(fp)
    15fc:	e23fdf84 	addi	r8,fp,-130
    1600:	d9000215 	stw	r4,8(sp)
    1604:	d8c00115 	stw	r3,4(sp)
    1608:	d8800015 	stw	r2,0(sp)
    160c:	4009883a 	mov	r4,r8
    1610:	00013700 	call	1370 <manCapture>
						memcpy(tempBoard,b,100);
    1614:	e0bfdf84 	addi	r2,fp,-130
    1618:	01801904 	movi	r6,100
    161c:	100b883a 	mov	r5,r2
    1620:	e13ff917 	ldw	r4,-28(fp)
    1624:	00059380 	call	5938 <memcpy>
						return 1;
    1628:	00800044 	movi	r2,1
    162c:	00000d06 	br	1664 <manCapture+0x2f4>

	unsigned char possibleEnemyRow, possibleEnemyField, possibleNewRow, possibleNewField;

	for(signed char rowDirection = -1; rowDirection < 2; rowDirection = rowDirection + 2){

		for(signed char fieldDirection = -1; fieldDirection < 2; fieldDirection = fieldDirection + 2){
    1630:	e0bfde43 	ldbu	r2,-135(fp)
    1634:	10800084 	addi	r2,r2,2
    1638:	e0bfde45 	stb	r2,-135(fp)
    163c:	e0bfde47 	ldb	r2,-135(fp)
    1640:	10800090 	cmplti	r2,r2,2
    1644:	103f651e 	bne	r2,zero,13dc <__alt_data_end+0xfc0013dc>
	unsigned char b[10][10];
	memcpy(b,tempBoard,100);

	unsigned char possibleEnemyRow, possibleEnemyField, possibleNewRow, possibleNewField;

	for(signed char rowDirection = -1; rowDirection < 2; rowDirection = rowDirection + 2){
    1648:	e0bfde03 	ldbu	r2,-136(fp)
    164c:	10800084 	addi	r2,r2,2
    1650:	e0bfde05 	stb	r2,-136(fp)
    1654:	e0bfde07 	ldb	r2,-136(fp)
    1658:	10800090 	cmplti	r2,r2,2
    165c:	103f5c1e 	bne	r2,zero,13d0 <__alt_data_end+0xfc0013d0>
					}
				}
			}
		}
	}
	return 0;
    1660:	0005883a 	mov	r2,zero
}
    1664:	e037883a 	mov	sp,fp
    1668:	dfc00117 	ldw	ra,4(sp)
    166c:	df000017 	ldw	fp,0(sp)
    1670:	dec00204 	addi	sp,sp,8
    1674:	f800283a 	ret

00001678 <manMove>:

unsigned char manMove(unsigned char * tempBoard[], unsigned char row, unsigned field, unsigned char friendly, unsigned char friendlyKing, unsigned char enemy, unsigned char enemyKing, signed direction){
    1678:	defff504 	addi	sp,sp,-44
    167c:	dfc00a15 	stw	ra,40(sp)
    1680:	df000915 	stw	fp,36(sp)
    1684:	df000904 	addi	fp,sp,36
    1688:	e13ff915 	stw	r4,-28(fp)
    168c:	2811883a 	mov	r8,r5
    1690:	e1bffb15 	stw	r6,-20(fp)
    1694:	380b883a 	mov	r5,r7
    1698:	e1000217 	ldw	r4,8(fp)
    169c:	e0c00317 	ldw	r3,12(fp)
    16a0:	e0800417 	ldw	r2,16(fp)
    16a4:	e23ffa05 	stb	r8,-24(fp)
    16a8:	e17ffc05 	stb	r5,-16(fp)
    16ac:	e13ffd05 	stb	r4,-12(fp)
    16b0:	e0fffe05 	stb	r3,-8(fp)
    16b4:	e0bfff05 	stb	r2,-4(fp)
	signed char possibleNewField;
	signed char possibleNewRow = row + direction;
    16b8:	e0800517 	ldw	r2,20(fp)
    16bc:	1007883a 	mov	r3,r2
    16c0:	e0bffa03 	ldbu	r2,-24(fp)
    16c4:	1885883a 	add	r2,r3,r2
    16c8:	e0bff845 	stb	r2,-31(fp)

	if(possibleNewRow > -1 && possibleNewRow < 10){
    16cc:	e0bff847 	ldb	r2,-31(fp)
    16d0:	10004f16 	blt	r2,zero,1810 <manMove+0x198>
    16d4:	e0bff847 	ldb	r2,-31(fp)
    16d8:	10800288 	cmpgei	r2,r2,10
    16dc:	10004c1e 	bne	r2,zero,1810 <manMove+0x198>
		for(signed char fieldDirection = -1; fieldDirection < 2; fieldDirection = fieldDirection + 2){
    16e0:	00bfffc4 	movi	r2,-1
    16e4:	e0bff805 	stb	r2,-32(fp)
    16e8:	00004606 	br	1804 <manMove+0x18c>
			possibleNewField = field + fieldDirection;
    16ec:	e0bffb17 	ldw	r2,-20(fp)
    16f0:	1007883a 	mov	r3,r2
    16f4:	e0bff803 	ldbu	r2,-32(fp)
    16f8:	1885883a 	add	r2,r3,r2
    16fc:	e0bff885 	stb	r2,-30(fp)

			if(possibleNewField > -1 && possibleNewField < 10 && board[possibleNewRow][possibleNewField] == BLACK){
    1700:	e0bff887 	ldb	r2,-30(fp)
    1704:	10003c16 	blt	r2,zero,17f8 <manMove+0x180>
    1708:	e0bff887 	ldb	r2,-30(fp)
    170c:	10800288 	cmpgei	r2,r2,10
    1710:	1000391e 	bne	r2,zero,17f8 <manMove+0x180>
    1714:	e13ff847 	ldb	r4,-31(fp)
    1718:	e0fff887 	ldb	r3,-30(fp)
    171c:	008000f4 	movhi	r2,3
    1720:	10a53804 	addi	r2,r2,-27424
    1724:	210002a4 	muli	r4,r4,10
    1728:	1105883a 	add	r2,r2,r4
    172c:	10c5883a 	add	r2,r2,r3
    1730:	10800003 	ldbu	r2,0(r2)
    1734:	10803fcc 	andi	r2,r2,255
    1738:	10800058 	cmpnei	r2,r2,1
    173c:	10002e1e 	bne	r2,zero,17f8 <manMove+0x180>
				tempBoard[possibleNewRow][possibleNewField] = tempBoard[row][field];
    1740:	e0bff847 	ldb	r2,-31(fp)
    1744:	1085883a 	add	r2,r2,r2
    1748:	1085883a 	add	r2,r2,r2
    174c:	1007883a 	mov	r3,r2
    1750:	e0bff917 	ldw	r2,-28(fp)
    1754:	10c5883a 	add	r2,r2,r3
    1758:	10c00017 	ldw	r3,0(r2)
    175c:	e0bff887 	ldb	r2,-30(fp)
    1760:	1887883a 	add	r3,r3,r2
    1764:	e0bffa03 	ldbu	r2,-24(fp)
    1768:	1085883a 	add	r2,r2,r2
    176c:	1085883a 	add	r2,r2,r2
    1770:	1009883a 	mov	r4,r2
    1774:	e0bff917 	ldw	r2,-28(fp)
    1778:	1105883a 	add	r2,r2,r4
    177c:	11000017 	ldw	r4,0(r2)
    1780:	e0bffb17 	ldw	r2,-20(fp)
    1784:	2085883a 	add	r2,r4,r2
    1788:	10800003 	ldbu	r2,0(r2)
    178c:	18800005 	stb	r2,0(r3)
				tempBoard[row][field] = BLACK;
    1790:	e0bffa03 	ldbu	r2,-24(fp)
    1794:	1085883a 	add	r2,r2,r2
    1798:	1085883a 	add	r2,r2,r2
    179c:	1007883a 	mov	r3,r2
    17a0:	e0bff917 	ldw	r2,-28(fp)
    17a4:	10c5883a 	add	r2,r2,r3
    17a8:	10c00017 	ldw	r3,0(r2)
    17ac:	e0bffb17 	ldw	r2,-20(fp)
    17b0:	1885883a 	add	r2,r3,r2
    17b4:	00c00044 	movi	r3,1
    17b8:	10c00005 	stb	r3,0(r2)
				#if DEBUG
					printBoard((unsigned char **)tempBoard,possibleNewRow, possibleNewField, row, field);
    17bc:	e0bff843 	ldbu	r2,-31(fp)
    17c0:	10c03fcc 	andi	r3,r2,255
    17c4:	e0bff883 	ldbu	r2,-30(fp)
    17c8:	11003fcc 	andi	r4,r2,255
    17cc:	e17ffa03 	ldbu	r5,-24(fp)
    17d0:	e0bffb17 	ldw	r2,-20(fp)
    17d4:	10803fcc 	andi	r2,r2,255
    17d8:	d8800015 	stw	r2,0(sp)
    17dc:	280f883a 	mov	r7,r5
    17e0:	200d883a 	mov	r6,r4
    17e4:	180b883a 	mov	r5,r3
    17e8:	e13ff917 	ldw	r4,-28(fp)
    17ec:	00004bc0 	call	4bc <printBoard>
				#endif
				return 1;
    17f0:	00800044 	movi	r2,1
    17f4:	00000706 	br	1814 <manMove+0x19c>
unsigned char manMove(unsigned char * tempBoard[], unsigned char row, unsigned field, unsigned char friendly, unsigned char friendlyKing, unsigned char enemy, unsigned char enemyKing, signed direction){
	signed char possibleNewField;
	signed char possibleNewRow = row + direction;

	if(possibleNewRow > -1 && possibleNewRow < 10){
		for(signed char fieldDirection = -1; fieldDirection < 2; fieldDirection = fieldDirection + 2){
    17f8:	e0bff803 	ldbu	r2,-32(fp)
    17fc:	10800084 	addi	r2,r2,2
    1800:	e0bff805 	stb	r2,-32(fp)
    1804:	e0bff807 	ldb	r2,-32(fp)
    1808:	10800090 	cmplti	r2,r2,2
    180c:	103fb71e 	bne	r2,zero,16ec <__alt_data_end+0xfc0016ec>
				#endif
				return 1;
			}
		}
	}
	return 0;
    1810:	0005883a 	mov	r2,zero
}
    1814:	e037883a 	mov	sp,fp
    1818:	dfc00117 	ldw	ra,4(sp)
    181c:	df000017 	ldw	fp,0(sp)
    1820:	dec00204 	addi	sp,sp,8
    1824:	f800283a 	ret

00001828 <checkIfCanMove>:

int checkIfCanMove(unsigned char * tempBoard[], int row, int field, int dir, unsigned char friendly, unsigned char friendlyKing, unsigned char enemy, unsigned char enemyKing, signed direction){
    1828:	deffdb04 	addi	sp,sp,-148
    182c:	dfc02415 	stw	ra,144(sp)
    1830:	df002315 	stw	fp,140(sp)
    1834:	df002304 	addi	fp,sp,140
    1838:	e13ff815 	stw	r4,-32(fp)
    183c:	e17ff915 	stw	r5,-28(fp)
    1840:	e1bffa15 	stw	r6,-24(fp)
    1844:	e1fffb15 	stw	r7,-20(fp)
    1848:	e1400217 	ldw	r5,8(fp)
    184c:	e1000317 	ldw	r4,12(fp)
    1850:	e0c00417 	ldw	r3,16(fp)
    1854:	e0800517 	ldw	r2,20(fp)
    1858:	e17ffc05 	stb	r5,-16(fp)
    185c:	e13ffd05 	stb	r4,-12(fp)
    1860:	e0fffe05 	stb	r3,-8(fp)
    1864:	e0bfff05 	stb	r2,-4(fp)

	int retVal = 0;
    1868:	e03fdd15 	stw	zero,-140(fp)

	unsigned char b[10][10];
	memcpy(b,tempBoard,100);
    186c:	e0bfdf04 	addi	r2,fp,-132
    1870:	01801904 	movi	r6,100
    1874:	e17ff817 	ldw	r5,-32(fp)
    1878:	1009883a 	mov	r4,r2
    187c:	00059380 	call	5938 <memcpy>

	int stone = b[row][field];
    1880:	e0bff917 	ldw	r2,-28(fp)
    1884:	108002a4 	muli	r2,r2,10
    1888:	e13fdd04 	addi	r4,fp,-140
    188c:	2087883a 	add	r3,r4,r2
    1890:	e0bffa17 	ldw	r2,-24(fp)
    1894:	1885883a 	add	r2,r3,r2
    1898:	10800204 	addi	r2,r2,8
    189c:	10800003 	ldbu	r2,0(r2)
    18a0:	10803fcc 	andi	r2,r2,255
    18a4:	e0bfde15 	stw	r2,-136(fp)

	if(stone == FRIENDLY || stone == ENEMY)
    18a8:	e0bfde17 	ldw	r2,-136(fp)
    18ac:	108000a0 	cmpeqi	r2,r2,2
    18b0:	1000031e 	bne	r2,zero,18c0 <checkIfCanMove+0x98>
    18b4:	e0bfde17 	ldw	r2,-136(fp)
    18b8:	10800118 	cmpnei	r2,r2,4
    18bc:	10005a1e 	bne	r2,zero,1a28 <checkIfCanMove+0x200>
	{
		if(direction == FRIENDLYDIRECTION)
    18c0:	e0800617 	ldw	r2,24(fp)
    18c4:	10bfffd8 	cmpnei	r2,r2,-1
    18c8:	10002a1e 	bne	r2,zero,1974 <checkIfCanMove+0x14c>
		{
			if(dir == 1)
    18cc:	e0bffb17 	ldw	r2,-20(fp)
    18d0:	10800058 	cmpnei	r2,r2,1
    18d4:	1000121e 	bne	r2,zero,1920 <checkIfCanMove+0xf8>
			{
				if(b[row-1][field-1] == BLACK) retVal = 1;
    18d8:	e0bff917 	ldw	r2,-28(fp)
    18dc:	10ffffc4 	addi	r3,r2,-1
    18e0:	e0bffa17 	ldw	r2,-24(fp)
    18e4:	10bfffc4 	addi	r2,r2,-1
    18e8:	18c002a4 	muli	r3,r3,10
    18ec:	e13fdd04 	addi	r4,fp,-140
    18f0:	20c7883a 	add	r3,r4,r3
    18f4:	1885883a 	add	r2,r3,r2
    18f8:	10800204 	addi	r2,r2,8
    18fc:	10800003 	ldbu	r2,0(r2)
    1900:	10803fcc 	andi	r2,r2,255
    1904:	10800058 	cmpnei	r2,r2,1
    1908:	1000031e 	bne	r2,zero,1918 <checkIfCanMove+0xf0>
    190c:	00800044 	movi	r2,1
    1910:	e0bfdd15 	stw	r2,-140(fp)

	int stone = b[row][field];

	if(stone == FRIENDLY || stone == ENEMY)
	{
		if(direction == FRIENDLYDIRECTION)
    1914:	00009706 	br	1b74 <checkIfCanMove+0x34c>
		{
			if(dir == 1)
			{
				if(b[row-1][field-1] == BLACK) retVal = 1;
				else retVal = 0;
    1918:	e03fdd15 	stw	zero,-140(fp)

	int stone = b[row][field];

	if(stone == FRIENDLY || stone == ENEMY)
	{
		if(direction == FRIENDLYDIRECTION)
    191c:	00009506 	br	1b74 <checkIfCanMove+0x34c>
			if(dir == 1)
			{
				if(b[row-1][field-1] == BLACK) retVal = 1;
				else retVal = 0;
			}
			else if(dir == 2)
    1920:	e0bffb17 	ldw	r2,-20(fp)
    1924:	10800098 	cmpnei	r2,r2,2
    1928:	1000921e 	bne	r2,zero,1b74 <checkIfCanMove+0x34c>
			{
				if(b[row-1][field+1] == BLACK) retVal = 1;
    192c:	e0bff917 	ldw	r2,-28(fp)
    1930:	10ffffc4 	addi	r3,r2,-1
    1934:	e0bffa17 	ldw	r2,-24(fp)
    1938:	10800044 	addi	r2,r2,1
    193c:	18c002a4 	muli	r3,r3,10
    1940:	e13fdd04 	addi	r4,fp,-140
    1944:	20c7883a 	add	r3,r4,r3
    1948:	1885883a 	add	r2,r3,r2
    194c:	10800204 	addi	r2,r2,8
    1950:	10800003 	ldbu	r2,0(r2)
    1954:	10803fcc 	andi	r2,r2,255
    1958:	10800058 	cmpnei	r2,r2,1
    195c:	1000031e 	bne	r2,zero,196c <checkIfCanMove+0x144>
    1960:	00800044 	movi	r2,1
    1964:	e0bfdd15 	stw	r2,-140(fp)

	int stone = b[row][field];

	if(stone == FRIENDLY || stone == ENEMY)
	{
		if(direction == FRIENDLYDIRECTION)
    1968:	00008206 	br	1b74 <checkIfCanMove+0x34c>
				else retVal = 0;
			}
			else if(dir == 2)
			{
				if(b[row-1][field+1] == BLACK) retVal = 1;
				else retVal = 0;
    196c:	e03fdd15 	stw	zero,-140(fp)

	int stone = b[row][field];

	if(stone == FRIENDLY || stone == ENEMY)
	{
		if(direction == FRIENDLYDIRECTION)
    1970:	00008006 	br	1b74 <checkIfCanMove+0x34c>
			{
				if(b[row-1][field+1] == BLACK) retVal = 1;
				else retVal = 0;
			}
		}
		else if(direction == ENEMYDIRECTION)
    1974:	e0800617 	ldw	r2,24(fp)
    1978:	10800058 	cmpnei	r2,r2,1
    197c:	10007d1e 	bne	r2,zero,1b74 <checkIfCanMove+0x34c>
		{
			if(dir == 3)
    1980:	e0bffb17 	ldw	r2,-20(fp)
    1984:	108000d8 	cmpnei	r2,r2,3
    1988:	1000121e 	bne	r2,zero,19d4 <checkIfCanMove+0x1ac>
			{
				if(b[row+1][field-1] == BLACK) retVal = 1;
    198c:	e0bff917 	ldw	r2,-28(fp)
    1990:	10c00044 	addi	r3,r2,1
    1994:	e0bffa17 	ldw	r2,-24(fp)
    1998:	10bfffc4 	addi	r2,r2,-1
    199c:	18c002a4 	muli	r3,r3,10
    19a0:	e13fdd04 	addi	r4,fp,-140
    19a4:	20c7883a 	add	r3,r4,r3
    19a8:	1885883a 	add	r2,r3,r2
    19ac:	10800204 	addi	r2,r2,8
    19b0:	10800003 	ldbu	r2,0(r2)
    19b4:	10803fcc 	andi	r2,r2,255
    19b8:	10800058 	cmpnei	r2,r2,1
    19bc:	1000031e 	bne	r2,zero,19cc <checkIfCanMove+0x1a4>
    19c0:	00800044 	movi	r2,1
    19c4:	e0bfdd15 	stw	r2,-140(fp)

	int stone = b[row][field];

	if(stone == FRIENDLY || stone == ENEMY)
	{
		if(direction == FRIENDLYDIRECTION)
    19c8:	00006a06 	br	1b74 <checkIfCanMove+0x34c>
		else if(direction == ENEMYDIRECTION)
		{
			if(dir == 3)
			{
				if(b[row+1][field-1] == BLACK) retVal = 1;
				else retVal = 0;
    19cc:	e03fdd15 	stw	zero,-140(fp)

	int stone = b[row][field];

	if(stone == FRIENDLY || stone == ENEMY)
	{
		if(direction == FRIENDLYDIRECTION)
    19d0:	00006806 	br	1b74 <checkIfCanMove+0x34c>
			if(dir == 3)
			{
				if(b[row+1][field-1] == BLACK) retVal = 1;
				else retVal = 0;
			}
			else if(dir == 4)
    19d4:	e0bffb17 	ldw	r2,-20(fp)
    19d8:	10800118 	cmpnei	r2,r2,4
    19dc:	1000651e 	bne	r2,zero,1b74 <checkIfCanMove+0x34c>
			{
				if(b[row+1][field+1] == BLACK) retVal = 1;
    19e0:	e0bff917 	ldw	r2,-28(fp)
    19e4:	10c00044 	addi	r3,r2,1
    19e8:	e0bffa17 	ldw	r2,-24(fp)
    19ec:	10800044 	addi	r2,r2,1
    19f0:	18c002a4 	muli	r3,r3,10
    19f4:	e13fdd04 	addi	r4,fp,-140
    19f8:	20c7883a 	add	r3,r4,r3
    19fc:	1885883a 	add	r2,r3,r2
    1a00:	10800204 	addi	r2,r2,8
    1a04:	10800003 	ldbu	r2,0(r2)
    1a08:	10803fcc 	andi	r2,r2,255
    1a0c:	10800058 	cmpnei	r2,r2,1
    1a10:	1000031e 	bne	r2,zero,1a20 <checkIfCanMove+0x1f8>
    1a14:	00800044 	movi	r2,1
    1a18:	e0bfdd15 	stw	r2,-140(fp)

	int stone = b[row][field];

	if(stone == FRIENDLY || stone == ENEMY)
	{
		if(direction == FRIENDLYDIRECTION)
    1a1c:	00005506 	br	1b74 <checkIfCanMove+0x34c>
				else retVal = 0;
			}
			else if(dir == 4)
			{
				if(b[row+1][field+1] == BLACK) retVal = 1;
				else retVal = 0;
    1a20:	e03fdd15 	stw	zero,-140(fp)

	int stone = b[row][field];

	if(stone == FRIENDLY || stone == ENEMY)
	{
		if(direction == FRIENDLYDIRECTION)
    1a24:	00005306 	br	1b74 <checkIfCanMove+0x34c>
				if(b[row+1][field+1] == BLACK) retVal = 1;
				else retVal = 0;
			}
		}
	}
	else if(stone == FRIENDLYKING || stone == ENEMYKING)
    1a28:	e0bfde17 	ldw	r2,-136(fp)
    1a2c:	108000e0 	cmpeqi	r2,r2,3
    1a30:	1000031e 	bne	r2,zero,1a40 <checkIfCanMove+0x218>
    1a34:	e0bfde17 	ldw	r2,-136(fp)
    1a38:	10800158 	cmpnei	r2,r2,5
    1a3c:	1000561e 	bne	r2,zero,1b98 <checkIfCanMove+0x370>
	{
		switch(dir)
    1a40:	e0bffb17 	ldw	r2,-20(fp)
    1a44:	10c000a0 	cmpeqi	r3,r2,2
    1a48:	18001a1e 	bne	r3,zero,1ab4 <checkIfCanMove+0x28c>
    1a4c:	10c000c8 	cmpgei	r3,r2,3
    1a50:	1800031e 	bne	r3,zero,1a60 <checkIfCanMove+0x238>
    1a54:	10800060 	cmpeqi	r2,r2,1
    1a58:	1000061e 	bne	r2,zero,1a74 <checkIfCanMove+0x24c>
    1a5c:	00004e06 	br	1b98 <checkIfCanMove+0x370>
    1a60:	10c000e0 	cmpeqi	r3,r2,3
    1a64:	1800231e 	bne	r3,zero,1af4 <checkIfCanMove+0x2cc>
    1a68:	10800120 	cmpeqi	r2,r2,4
    1a6c:	1000311e 	bne	r2,zero,1b34 <checkIfCanMove+0x30c>
    1a70:	00004906 	br	1b98 <checkIfCanMove+0x370>
		{
			case 1:
				if(b[row-1][field-1] == BLACK) retVal = 1;
    1a74:	e0bff917 	ldw	r2,-28(fp)
    1a78:	10ffffc4 	addi	r3,r2,-1
    1a7c:	e0bffa17 	ldw	r2,-24(fp)
    1a80:	10bfffc4 	addi	r2,r2,-1
    1a84:	18c002a4 	muli	r3,r3,10
    1a88:	e13fdd04 	addi	r4,fp,-140
    1a8c:	20c7883a 	add	r3,r4,r3
    1a90:	1885883a 	add	r2,r3,r2
    1a94:	10800204 	addi	r2,r2,8
    1a98:	10800003 	ldbu	r2,0(r2)
    1a9c:	10803fcc 	andi	r2,r2,255
    1aa0:	10800058 	cmpnei	r2,r2,1
    1aa4:	1000351e 	bne	r2,zero,1b7c <checkIfCanMove+0x354>
    1aa8:	00800044 	movi	r2,1
    1aac:	e0bfdd15 	stw	r2,-140(fp)
				break;
    1ab0:	00003206 	br	1b7c <checkIfCanMove+0x354>
			case 2:
				if(b[row-1][field+1] == BLACK) retVal = 1;
    1ab4:	e0bff917 	ldw	r2,-28(fp)
    1ab8:	10ffffc4 	addi	r3,r2,-1
    1abc:	e0bffa17 	ldw	r2,-24(fp)
    1ac0:	10800044 	addi	r2,r2,1
    1ac4:	18c002a4 	muli	r3,r3,10
    1ac8:	e13fdd04 	addi	r4,fp,-140
    1acc:	20c7883a 	add	r3,r4,r3
    1ad0:	1885883a 	add	r2,r3,r2
    1ad4:	10800204 	addi	r2,r2,8
    1ad8:	10800003 	ldbu	r2,0(r2)
    1adc:	10803fcc 	andi	r2,r2,255
    1ae0:	10800058 	cmpnei	r2,r2,1
    1ae4:	1000271e 	bne	r2,zero,1b84 <checkIfCanMove+0x35c>
    1ae8:	00800044 	movi	r2,1
    1aec:	e0bfdd15 	stw	r2,-140(fp)
				break;
    1af0:	00002406 	br	1b84 <checkIfCanMove+0x35c>
			case 3:
				if(b[row+1][field-1] == BLACK) retVal = 1;
    1af4:	e0bff917 	ldw	r2,-28(fp)
    1af8:	10c00044 	addi	r3,r2,1
    1afc:	e0bffa17 	ldw	r2,-24(fp)
    1b00:	10bfffc4 	addi	r2,r2,-1
    1b04:	18c002a4 	muli	r3,r3,10
    1b08:	e13fdd04 	addi	r4,fp,-140
    1b0c:	20c7883a 	add	r3,r4,r3
    1b10:	1885883a 	add	r2,r3,r2
    1b14:	10800204 	addi	r2,r2,8
    1b18:	10800003 	ldbu	r2,0(r2)
    1b1c:	10803fcc 	andi	r2,r2,255
    1b20:	10800058 	cmpnei	r2,r2,1
    1b24:	1000191e 	bne	r2,zero,1b8c <checkIfCanMove+0x364>
    1b28:	00800044 	movi	r2,1
    1b2c:	e0bfdd15 	stw	r2,-140(fp)
				break;
    1b30:	00001606 	br	1b8c <checkIfCanMove+0x364>
			case 4:
				if(b[row+1][field+1] == BLACK) retVal = 1;
    1b34:	e0bff917 	ldw	r2,-28(fp)
    1b38:	10c00044 	addi	r3,r2,1
    1b3c:	e0bffa17 	ldw	r2,-24(fp)
    1b40:	10800044 	addi	r2,r2,1
    1b44:	18c002a4 	muli	r3,r3,10
    1b48:	e13fdd04 	addi	r4,fp,-140
    1b4c:	20c7883a 	add	r3,r4,r3
    1b50:	1885883a 	add	r2,r3,r2
    1b54:	10800204 	addi	r2,r2,8
    1b58:	10800003 	ldbu	r2,0(r2)
    1b5c:	10803fcc 	andi	r2,r2,255
    1b60:	10800058 	cmpnei	r2,r2,1
    1b64:	10000b1e 	bne	r2,zero,1b94 <checkIfCanMove+0x36c>
    1b68:	00800044 	movi	r2,1
    1b6c:	e0bfdd15 	stw	r2,-140(fp)
				break;
    1b70:	00000806 	br	1b94 <checkIfCanMove+0x36c>

	int stone = b[row][field];

	if(stone == FRIENDLY || stone == ENEMY)
	{
		if(direction == FRIENDLYDIRECTION)
    1b74:	0001883a 	nop
    1b78:	00000706 	br	1b98 <checkIfCanMove+0x370>
	{
		switch(dir)
		{
			case 1:
				if(b[row-1][field-1] == BLACK) retVal = 1;
				break;
    1b7c:	0001883a 	nop
    1b80:	00000506 	br	1b98 <checkIfCanMove+0x370>
			case 2:
				if(b[row-1][field+1] == BLACK) retVal = 1;
				break;
    1b84:	0001883a 	nop
    1b88:	00000306 	br	1b98 <checkIfCanMove+0x370>
			case 3:
				if(b[row+1][field-1] == BLACK) retVal = 1;
				break;
    1b8c:	0001883a 	nop
    1b90:	00000106 	br	1b98 <checkIfCanMove+0x370>
			case 4:
				if(b[row+1][field+1] == BLACK) retVal = 1;
				break;
    1b94:	0001883a 	nop
		}
	}

	return retVal;
    1b98:	e0bfdd17 	ldw	r2,-140(fp)
}
    1b9c:	e037883a 	mov	sp,fp
    1ba0:	dfc00117 	ldw	ra,4(sp)
    1ba4:	df000017 	ldw	fp,0(sp)
    1ba8:	dec00204 	addi	sp,sp,8
    1bac:	f800283a 	ret

00001bb0 <capture>:

//TODO: make this obsolete, replace with manCapture
int capture(int row,int field,int king){
    1bb0:	defffa04 	addi	sp,sp,-24
    1bb4:	dfc00515 	stw	ra,20(sp)
    1bb8:	df000415 	stw	fp,16(sp)
    1bbc:	df000404 	addi	fp,sp,16
    1bc0:	e13ffd15 	stw	r4,-12(fp)
    1bc4:	e17ffe15 	stw	r5,-8(fp)
    1bc8:	e1bfff15 	stw	r6,-4(fp)

	if((board[row-1][field-1] == ENEMY || board[row-1][field-1] == ENEMYKING)
    1bcc:	e0bffd17 	ldw	r2,-12(fp)
    1bd0:	113fffc4 	addi	r4,r2,-1
    1bd4:	e0bffe17 	ldw	r2,-8(fp)
    1bd8:	10ffffc4 	addi	r3,r2,-1
    1bdc:	008000f4 	movhi	r2,3
    1be0:	10a53804 	addi	r2,r2,-27424
    1be4:	210002a4 	muli	r4,r4,10
    1be8:	1105883a 	add	r2,r2,r4
    1bec:	10c5883a 	add	r2,r2,r3
    1bf0:	10800003 	ldbu	r2,0(r2)
    1bf4:	10803fcc 	andi	r2,r2,255
    1bf8:	10800120 	cmpeqi	r2,r2,4
    1bfc:	10000d1e 	bne	r2,zero,1c34 <capture+0x84>
    1c00:	e0bffd17 	ldw	r2,-12(fp)
    1c04:	113fffc4 	addi	r4,r2,-1
    1c08:	e0bffe17 	ldw	r2,-8(fp)
    1c0c:	10ffffc4 	addi	r3,r2,-1
    1c10:	008000f4 	movhi	r2,3
    1c14:	10a53804 	addi	r2,r2,-27424
    1c18:	210002a4 	muli	r4,r4,10
    1c1c:	1105883a 	add	r2,r2,r4
    1c20:	10c5883a 	add	r2,r2,r3
    1c24:	10800003 	ldbu	r2,0(r2)
    1c28:	10803fcc 	andi	r2,r2,255
    1c2c:	10800158 	cmpnei	r2,r2,5
    1c30:	1000531e 	bne	r2,zero,1d80 <capture+0x1d0>
	&&
	(board[row-2][field-2] == BLACK || board[row-2][field-2] == BLACK)){
    1c34:	e0bffd17 	ldw	r2,-12(fp)
    1c38:	113fff84 	addi	r4,r2,-2
    1c3c:	e0bffe17 	ldw	r2,-8(fp)
    1c40:	10ffff84 	addi	r3,r2,-2
    1c44:	008000f4 	movhi	r2,3
    1c48:	10a53804 	addi	r2,r2,-27424
    1c4c:	210002a4 	muli	r4,r4,10
    1c50:	1105883a 	add	r2,r2,r4
    1c54:	10c5883a 	add	r2,r2,r3
    1c58:	10800003 	ldbu	r2,0(r2)

//TODO: make this obsolete, replace with manCapture
int capture(int row,int field,int king){

	if((board[row-1][field-1] == ENEMY || board[row-1][field-1] == ENEMYKING)
	&&
    1c5c:	10803fcc 	andi	r2,r2,255
    1c60:	10800060 	cmpeqi	r2,r2,1
    1c64:	10000d1e 	bne	r2,zero,1c9c <capture+0xec>
	(board[row-2][field-2] == BLACK || board[row-2][field-2] == BLACK)){
    1c68:	e0bffd17 	ldw	r2,-12(fp)
    1c6c:	113fff84 	addi	r4,r2,-2
    1c70:	e0bffe17 	ldw	r2,-8(fp)
    1c74:	10ffff84 	addi	r3,r2,-2
    1c78:	008000f4 	movhi	r2,3
    1c7c:	10a53804 	addi	r2,r2,-27424
    1c80:	210002a4 	muli	r4,r4,10
    1c84:	1105883a 	add	r2,r2,r4
    1c88:	10c5883a 	add	r2,r2,r3
    1c8c:	10800003 	ldbu	r2,0(r2)
    1c90:	10803fcc 	andi	r2,r2,255
    1c94:	10800058 	cmpnei	r2,r2,1
    1c98:	1000391e 	bne	r2,zero,1d80 <capture+0x1d0>

		board[row-2][field-2] = board[row][field];
    1c9c:	e0bffd17 	ldw	r2,-12(fp)
    1ca0:	117fff84 	addi	r5,r2,-2
    1ca4:	e0bffe17 	ldw	r2,-8(fp)
    1ca8:	113fff84 	addi	r4,r2,-2
    1cac:	008000f4 	movhi	r2,3
    1cb0:	10a53804 	addi	r2,r2,-27424
    1cb4:	e0fffd17 	ldw	r3,-12(fp)
    1cb8:	18c002a4 	muli	r3,r3,10
    1cbc:	10c7883a 	add	r3,r2,r3
    1cc0:	e0bffe17 	ldw	r2,-8(fp)
    1cc4:	1885883a 	add	r2,r3,r2
    1cc8:	10c00003 	ldbu	r3,0(r2)
    1ccc:	008000f4 	movhi	r2,3
    1cd0:	10a53804 	addi	r2,r2,-27424
    1cd4:	294002a4 	muli	r5,r5,10
    1cd8:	1145883a 	add	r2,r2,r5
    1cdc:	1105883a 	add	r2,r2,r4
    1ce0:	10c00005 	stb	r3,0(r2)
		board[row-1][field-1] = BLACK;
    1ce4:	e0bffd17 	ldw	r2,-12(fp)
    1ce8:	113fffc4 	addi	r4,r2,-1
    1cec:	e0bffe17 	ldw	r2,-8(fp)
    1cf0:	10ffffc4 	addi	r3,r2,-1
    1cf4:	008000f4 	movhi	r2,3
    1cf8:	10a53804 	addi	r2,r2,-27424
    1cfc:	210002a4 	muli	r4,r4,10
    1d00:	1105883a 	add	r2,r2,r4
    1d04:	10c5883a 	add	r2,r2,r3
    1d08:	00c00044 	movi	r3,1
    1d0c:	10c00005 	stb	r3,0(r2)
		board[row][field] = BLACK;
    1d10:	008000f4 	movhi	r2,3
    1d14:	10a53804 	addi	r2,r2,-27424
    1d18:	e0fffd17 	ldw	r3,-12(fp)
    1d1c:	18c002a4 	muli	r3,r3,10
    1d20:	10c7883a 	add	r3,r2,r3
    1d24:	e0bffe17 	ldw	r2,-8(fp)
    1d28:	1885883a 	add	r2,r3,r2
    1d2c:	00c00044 	movi	r3,1
    1d30:	10c00005 	stb	r3,0(r2)
		#if DEBUG
			printBoard((unsigned char **)board,row-2,field-2,row,field);
    1d34:	e0bffd17 	ldw	r2,-12(fp)
    1d38:	10bfff84 	addi	r2,r2,-2
    1d3c:	10c03fcc 	andi	r3,r2,255
    1d40:	e0bffe17 	ldw	r2,-8(fp)
    1d44:	10bfff84 	addi	r2,r2,-2
    1d48:	11003fcc 	andi	r4,r2,255
    1d4c:	e0bffd17 	ldw	r2,-12(fp)
    1d50:	11403fcc 	andi	r5,r2,255
    1d54:	e0bffe17 	ldw	r2,-8(fp)
    1d58:	10803fcc 	andi	r2,r2,255
    1d5c:	d8800015 	stw	r2,0(sp)
    1d60:	280f883a 	mov	r7,r5
    1d64:	200d883a 	mov	r6,r4
    1d68:	180b883a 	mov	r5,r3
    1d6c:	010000f4 	movhi	r4,3
    1d70:	21253804 	addi	r4,r4,-27424
    1d74:	00004bc0 	call	4bc <printBoard>
		#endif
		return 1;
    1d78:	00800044 	movi	r2,1
    1d7c:	00014806 	br	22a0 <capture+0x6f0>
	}

	else if((board[row-1][field+1] == ENEMY || board[row-1][field+1] == ENEMYKING)
    1d80:	e0bffd17 	ldw	r2,-12(fp)
    1d84:	113fffc4 	addi	r4,r2,-1
    1d88:	e0bffe17 	ldw	r2,-8(fp)
    1d8c:	10c00044 	addi	r3,r2,1
    1d90:	008000f4 	movhi	r2,3
    1d94:	10a53804 	addi	r2,r2,-27424
    1d98:	210002a4 	muli	r4,r4,10
    1d9c:	1105883a 	add	r2,r2,r4
    1da0:	10c5883a 	add	r2,r2,r3
    1da4:	10800003 	ldbu	r2,0(r2)
    1da8:	10803fcc 	andi	r2,r2,255
    1dac:	10800120 	cmpeqi	r2,r2,4
    1db0:	10000d1e 	bne	r2,zero,1de8 <capture+0x238>
    1db4:	e0bffd17 	ldw	r2,-12(fp)
    1db8:	113fffc4 	addi	r4,r2,-1
    1dbc:	e0bffe17 	ldw	r2,-8(fp)
    1dc0:	10c00044 	addi	r3,r2,1
    1dc4:	008000f4 	movhi	r2,3
    1dc8:	10a53804 	addi	r2,r2,-27424
    1dcc:	210002a4 	muli	r4,r4,10
    1dd0:	1105883a 	add	r2,r2,r4
    1dd4:	10c5883a 	add	r2,r2,r3
    1dd8:	10800003 	ldbu	r2,0(r2)
    1ddc:	10803fcc 	andi	r2,r2,255
    1de0:	10800158 	cmpnei	r2,r2,5
    1de4:	1000531e 	bne	r2,zero,1f34 <capture+0x384>
	&&
	(board[row-2][field+2] == BLACK || board[row-2][field+2] == BLACK)){
    1de8:	e0bffd17 	ldw	r2,-12(fp)
    1dec:	113fff84 	addi	r4,r2,-2
    1df0:	e0bffe17 	ldw	r2,-8(fp)
    1df4:	10c00084 	addi	r3,r2,2
    1df8:	008000f4 	movhi	r2,3
    1dfc:	10a53804 	addi	r2,r2,-27424
    1e00:	210002a4 	muli	r4,r4,10
    1e04:	1105883a 	add	r2,r2,r4
    1e08:	10c5883a 	add	r2,r2,r3
    1e0c:	10800003 	ldbu	r2,0(r2)
		#endif
		return 1;
	}

	else if((board[row-1][field+1] == ENEMY || board[row-1][field+1] == ENEMYKING)
	&&
    1e10:	10803fcc 	andi	r2,r2,255
    1e14:	10800060 	cmpeqi	r2,r2,1
    1e18:	10000d1e 	bne	r2,zero,1e50 <capture+0x2a0>
	(board[row-2][field+2] == BLACK || board[row-2][field+2] == BLACK)){
    1e1c:	e0bffd17 	ldw	r2,-12(fp)
    1e20:	113fff84 	addi	r4,r2,-2
    1e24:	e0bffe17 	ldw	r2,-8(fp)
    1e28:	10c00084 	addi	r3,r2,2
    1e2c:	008000f4 	movhi	r2,3
    1e30:	10a53804 	addi	r2,r2,-27424
    1e34:	210002a4 	muli	r4,r4,10
    1e38:	1105883a 	add	r2,r2,r4
    1e3c:	10c5883a 	add	r2,r2,r3
    1e40:	10800003 	ldbu	r2,0(r2)
    1e44:	10803fcc 	andi	r2,r2,255
    1e48:	10800058 	cmpnei	r2,r2,1
    1e4c:	1000391e 	bne	r2,zero,1f34 <capture+0x384>

		board[row-2][field+2] = board[row][field];
    1e50:	e0bffd17 	ldw	r2,-12(fp)
    1e54:	117fff84 	addi	r5,r2,-2
    1e58:	e0bffe17 	ldw	r2,-8(fp)
    1e5c:	11000084 	addi	r4,r2,2
    1e60:	008000f4 	movhi	r2,3
    1e64:	10a53804 	addi	r2,r2,-27424
    1e68:	e0fffd17 	ldw	r3,-12(fp)
    1e6c:	18c002a4 	muli	r3,r3,10
    1e70:	10c7883a 	add	r3,r2,r3
    1e74:	e0bffe17 	ldw	r2,-8(fp)
    1e78:	1885883a 	add	r2,r3,r2
    1e7c:	10c00003 	ldbu	r3,0(r2)
    1e80:	008000f4 	movhi	r2,3
    1e84:	10a53804 	addi	r2,r2,-27424
    1e88:	294002a4 	muli	r5,r5,10
    1e8c:	1145883a 	add	r2,r2,r5
    1e90:	1105883a 	add	r2,r2,r4
    1e94:	10c00005 	stb	r3,0(r2)
		board[row-1][field+1] = BLACK;
    1e98:	e0bffd17 	ldw	r2,-12(fp)
    1e9c:	113fffc4 	addi	r4,r2,-1
    1ea0:	e0bffe17 	ldw	r2,-8(fp)
    1ea4:	10c00044 	addi	r3,r2,1
    1ea8:	008000f4 	movhi	r2,3
    1eac:	10a53804 	addi	r2,r2,-27424
    1eb0:	210002a4 	muli	r4,r4,10
    1eb4:	1105883a 	add	r2,r2,r4
    1eb8:	10c5883a 	add	r2,r2,r3
    1ebc:	00c00044 	movi	r3,1
    1ec0:	10c00005 	stb	r3,0(r2)
		board[row][field] = BLACK;
    1ec4:	008000f4 	movhi	r2,3
    1ec8:	10a53804 	addi	r2,r2,-27424
    1ecc:	e0fffd17 	ldw	r3,-12(fp)
    1ed0:	18c002a4 	muli	r3,r3,10
    1ed4:	10c7883a 	add	r3,r2,r3
    1ed8:	e0bffe17 	ldw	r2,-8(fp)
    1edc:	1885883a 	add	r2,r3,r2
    1ee0:	00c00044 	movi	r3,1
    1ee4:	10c00005 	stb	r3,0(r2)
		#if DEBUG
			printBoard((unsigned char **)board,row-2,field+2,row,field);
    1ee8:	e0bffd17 	ldw	r2,-12(fp)
    1eec:	10bfff84 	addi	r2,r2,-2
    1ef0:	10c03fcc 	andi	r3,r2,255
    1ef4:	e0bffe17 	ldw	r2,-8(fp)
    1ef8:	10800084 	addi	r2,r2,2
    1efc:	11003fcc 	andi	r4,r2,255
    1f00:	e0bffd17 	ldw	r2,-12(fp)
    1f04:	11403fcc 	andi	r5,r2,255
    1f08:	e0bffe17 	ldw	r2,-8(fp)
    1f0c:	10803fcc 	andi	r2,r2,255
    1f10:	d8800015 	stw	r2,0(sp)
    1f14:	280f883a 	mov	r7,r5
    1f18:	200d883a 	mov	r6,r4
    1f1c:	180b883a 	mov	r5,r3
    1f20:	010000f4 	movhi	r4,3
    1f24:	21253804 	addi	r4,r4,-27424
    1f28:	00004bc0 	call	4bc <printBoard>
		#endif
		return 1;
    1f2c:	00800044 	movi	r2,1
    1f30:	0000db06 	br	22a0 <capture+0x6f0>
	}

	else if((board[row+1][field-1] == ENEMY || board[row+1][field-1] == ENEMYKING)
    1f34:	e0bffd17 	ldw	r2,-12(fp)
    1f38:	11000044 	addi	r4,r2,1
    1f3c:	e0bffe17 	ldw	r2,-8(fp)
    1f40:	10ffffc4 	addi	r3,r2,-1
    1f44:	008000f4 	movhi	r2,3
    1f48:	10a53804 	addi	r2,r2,-27424
    1f4c:	210002a4 	muli	r4,r4,10
    1f50:	1105883a 	add	r2,r2,r4
    1f54:	10c5883a 	add	r2,r2,r3
    1f58:	10800003 	ldbu	r2,0(r2)
    1f5c:	10803fcc 	andi	r2,r2,255
    1f60:	10800120 	cmpeqi	r2,r2,4
    1f64:	10000d1e 	bne	r2,zero,1f9c <capture+0x3ec>
    1f68:	e0bffd17 	ldw	r2,-12(fp)
    1f6c:	11000044 	addi	r4,r2,1
    1f70:	e0bffe17 	ldw	r2,-8(fp)
    1f74:	10ffffc4 	addi	r3,r2,-1
    1f78:	008000f4 	movhi	r2,3
    1f7c:	10a53804 	addi	r2,r2,-27424
    1f80:	210002a4 	muli	r4,r4,10
    1f84:	1105883a 	add	r2,r2,r4
    1f88:	10c5883a 	add	r2,r2,r3
    1f8c:	10800003 	ldbu	r2,0(r2)
    1f90:	10803fcc 	andi	r2,r2,255
    1f94:	10800158 	cmpnei	r2,r2,5
    1f98:	1000531e 	bne	r2,zero,20e8 <capture+0x538>
	&&
	(board[row+2][field-2] == BLACK || board[row+2][field-2] == BLACK)){
    1f9c:	e0bffd17 	ldw	r2,-12(fp)
    1fa0:	11000084 	addi	r4,r2,2
    1fa4:	e0bffe17 	ldw	r2,-8(fp)
    1fa8:	10ffff84 	addi	r3,r2,-2
    1fac:	008000f4 	movhi	r2,3
    1fb0:	10a53804 	addi	r2,r2,-27424
    1fb4:	210002a4 	muli	r4,r4,10
    1fb8:	1105883a 	add	r2,r2,r4
    1fbc:	10c5883a 	add	r2,r2,r3
    1fc0:	10800003 	ldbu	r2,0(r2)
		#endif
		return 1;
	}

	else if((board[row+1][field-1] == ENEMY || board[row+1][field-1] == ENEMYKING)
	&&
    1fc4:	10803fcc 	andi	r2,r2,255
    1fc8:	10800060 	cmpeqi	r2,r2,1
    1fcc:	10000d1e 	bne	r2,zero,2004 <capture+0x454>
	(board[row+2][field-2] == BLACK || board[row+2][field-2] == BLACK)){
    1fd0:	e0bffd17 	ldw	r2,-12(fp)
    1fd4:	11000084 	addi	r4,r2,2
    1fd8:	e0bffe17 	ldw	r2,-8(fp)
    1fdc:	10ffff84 	addi	r3,r2,-2
    1fe0:	008000f4 	movhi	r2,3
    1fe4:	10a53804 	addi	r2,r2,-27424
    1fe8:	210002a4 	muli	r4,r4,10
    1fec:	1105883a 	add	r2,r2,r4
    1ff0:	10c5883a 	add	r2,r2,r3
    1ff4:	10800003 	ldbu	r2,0(r2)
    1ff8:	10803fcc 	andi	r2,r2,255
    1ffc:	10800058 	cmpnei	r2,r2,1
    2000:	1000391e 	bne	r2,zero,20e8 <capture+0x538>

		board[row+2][field-2] = board[row][field];
    2004:	e0bffd17 	ldw	r2,-12(fp)
    2008:	11400084 	addi	r5,r2,2
    200c:	e0bffe17 	ldw	r2,-8(fp)
    2010:	113fff84 	addi	r4,r2,-2
    2014:	008000f4 	movhi	r2,3
    2018:	10a53804 	addi	r2,r2,-27424
    201c:	e0fffd17 	ldw	r3,-12(fp)
    2020:	18c002a4 	muli	r3,r3,10
    2024:	10c7883a 	add	r3,r2,r3
    2028:	e0bffe17 	ldw	r2,-8(fp)
    202c:	1885883a 	add	r2,r3,r2
    2030:	10c00003 	ldbu	r3,0(r2)
    2034:	008000f4 	movhi	r2,3
    2038:	10a53804 	addi	r2,r2,-27424
    203c:	294002a4 	muli	r5,r5,10
    2040:	1145883a 	add	r2,r2,r5
    2044:	1105883a 	add	r2,r2,r4
    2048:	10c00005 	stb	r3,0(r2)
		board[row+1][field-1] = BLACK;
    204c:	e0bffd17 	ldw	r2,-12(fp)
    2050:	11000044 	addi	r4,r2,1
    2054:	e0bffe17 	ldw	r2,-8(fp)
    2058:	10ffffc4 	addi	r3,r2,-1
    205c:	008000f4 	movhi	r2,3
    2060:	10a53804 	addi	r2,r2,-27424
    2064:	210002a4 	muli	r4,r4,10
    2068:	1105883a 	add	r2,r2,r4
    206c:	10c5883a 	add	r2,r2,r3
    2070:	00c00044 	movi	r3,1
    2074:	10c00005 	stb	r3,0(r2)
		board[row][field] = BLACK;
    2078:	008000f4 	movhi	r2,3
    207c:	10a53804 	addi	r2,r2,-27424
    2080:	e0fffd17 	ldw	r3,-12(fp)
    2084:	18c002a4 	muli	r3,r3,10
    2088:	10c7883a 	add	r3,r2,r3
    208c:	e0bffe17 	ldw	r2,-8(fp)
    2090:	1885883a 	add	r2,r3,r2
    2094:	00c00044 	movi	r3,1
    2098:	10c00005 	stb	r3,0(r2)
		#if DEBUG
			printBoard((unsigned char **)board,row+2,field-2,row,field);
    209c:	e0bffd17 	ldw	r2,-12(fp)
    20a0:	10800084 	addi	r2,r2,2
    20a4:	10c03fcc 	andi	r3,r2,255
    20a8:	e0bffe17 	ldw	r2,-8(fp)
    20ac:	10bfff84 	addi	r2,r2,-2
    20b0:	11003fcc 	andi	r4,r2,255
    20b4:	e0bffd17 	ldw	r2,-12(fp)
    20b8:	11403fcc 	andi	r5,r2,255
    20bc:	e0bffe17 	ldw	r2,-8(fp)
    20c0:	10803fcc 	andi	r2,r2,255
    20c4:	d8800015 	stw	r2,0(sp)
    20c8:	280f883a 	mov	r7,r5
    20cc:	200d883a 	mov	r6,r4
    20d0:	180b883a 	mov	r5,r3
    20d4:	010000f4 	movhi	r4,3
    20d8:	21253804 	addi	r4,r4,-27424
    20dc:	00004bc0 	call	4bc <printBoard>
		#endif
		return 1;
    20e0:	00800044 	movi	r2,1
    20e4:	00006e06 	br	22a0 <capture+0x6f0>
	}

	else if((board[row+1][field+1] == ENEMY || board[row+1][field+1] == ENEMYKING)
    20e8:	e0bffd17 	ldw	r2,-12(fp)
    20ec:	11000044 	addi	r4,r2,1
    20f0:	e0bffe17 	ldw	r2,-8(fp)
    20f4:	10c00044 	addi	r3,r2,1
    20f8:	008000f4 	movhi	r2,3
    20fc:	10a53804 	addi	r2,r2,-27424
    2100:	210002a4 	muli	r4,r4,10
    2104:	1105883a 	add	r2,r2,r4
    2108:	10c5883a 	add	r2,r2,r3
    210c:	10800003 	ldbu	r2,0(r2)
    2110:	10803fcc 	andi	r2,r2,255
    2114:	10800120 	cmpeqi	r2,r2,4
    2118:	10000d1e 	bne	r2,zero,2150 <capture+0x5a0>
    211c:	e0bffd17 	ldw	r2,-12(fp)
    2120:	11000044 	addi	r4,r2,1
    2124:	e0bffe17 	ldw	r2,-8(fp)
    2128:	10c00044 	addi	r3,r2,1
    212c:	008000f4 	movhi	r2,3
    2130:	10a53804 	addi	r2,r2,-27424
    2134:	210002a4 	muli	r4,r4,10
    2138:	1105883a 	add	r2,r2,r4
    213c:	10c5883a 	add	r2,r2,r3
    2140:	10800003 	ldbu	r2,0(r2)
    2144:	10803fcc 	andi	r2,r2,255
    2148:	10800158 	cmpnei	r2,r2,5
    214c:	1000531e 	bne	r2,zero,229c <capture+0x6ec>
	&&
	(board[row+2][field+2] == BLACK || board[row+2][field+2] == BLACK)){
    2150:	e0bffd17 	ldw	r2,-12(fp)
    2154:	11000084 	addi	r4,r2,2
    2158:	e0bffe17 	ldw	r2,-8(fp)
    215c:	10c00084 	addi	r3,r2,2
    2160:	008000f4 	movhi	r2,3
    2164:	10a53804 	addi	r2,r2,-27424
    2168:	210002a4 	muli	r4,r4,10
    216c:	1105883a 	add	r2,r2,r4
    2170:	10c5883a 	add	r2,r2,r3
    2174:	10800003 	ldbu	r2,0(r2)
		#endif
		return 1;
	}

	else if((board[row+1][field+1] == ENEMY || board[row+1][field+1] == ENEMYKING)
	&&
    2178:	10803fcc 	andi	r2,r2,255
    217c:	10800060 	cmpeqi	r2,r2,1
    2180:	10000d1e 	bne	r2,zero,21b8 <capture+0x608>
	(board[row+2][field+2] == BLACK || board[row+2][field+2] == BLACK)){
    2184:	e0bffd17 	ldw	r2,-12(fp)
    2188:	11000084 	addi	r4,r2,2
    218c:	e0bffe17 	ldw	r2,-8(fp)
    2190:	10c00084 	addi	r3,r2,2
    2194:	008000f4 	movhi	r2,3
    2198:	10a53804 	addi	r2,r2,-27424
    219c:	210002a4 	muli	r4,r4,10
    21a0:	1105883a 	add	r2,r2,r4
    21a4:	10c5883a 	add	r2,r2,r3
    21a8:	10800003 	ldbu	r2,0(r2)
    21ac:	10803fcc 	andi	r2,r2,255
    21b0:	10800058 	cmpnei	r2,r2,1
    21b4:	1000391e 	bne	r2,zero,229c <capture+0x6ec>

		board[row+2][field+2] = board[row][field];
    21b8:	e0bffd17 	ldw	r2,-12(fp)
    21bc:	11400084 	addi	r5,r2,2
    21c0:	e0bffe17 	ldw	r2,-8(fp)
    21c4:	11000084 	addi	r4,r2,2
    21c8:	008000f4 	movhi	r2,3
    21cc:	10a53804 	addi	r2,r2,-27424
    21d0:	e0fffd17 	ldw	r3,-12(fp)
    21d4:	18c002a4 	muli	r3,r3,10
    21d8:	10c7883a 	add	r3,r2,r3
    21dc:	e0bffe17 	ldw	r2,-8(fp)
    21e0:	1885883a 	add	r2,r3,r2
    21e4:	10c00003 	ldbu	r3,0(r2)
    21e8:	008000f4 	movhi	r2,3
    21ec:	10a53804 	addi	r2,r2,-27424
    21f0:	294002a4 	muli	r5,r5,10
    21f4:	1145883a 	add	r2,r2,r5
    21f8:	1105883a 	add	r2,r2,r4
    21fc:	10c00005 	stb	r3,0(r2)
		board[row+1][field+1] = BLACK;
    2200:	e0bffd17 	ldw	r2,-12(fp)
    2204:	11000044 	addi	r4,r2,1
    2208:	e0bffe17 	ldw	r2,-8(fp)
    220c:	10c00044 	addi	r3,r2,1
    2210:	008000f4 	movhi	r2,3
    2214:	10a53804 	addi	r2,r2,-27424
    2218:	210002a4 	muli	r4,r4,10
    221c:	1105883a 	add	r2,r2,r4
    2220:	10c5883a 	add	r2,r2,r3
    2224:	00c00044 	movi	r3,1
    2228:	10c00005 	stb	r3,0(r2)
		board[row][field] = BLACK;
    222c:	008000f4 	movhi	r2,3
    2230:	10a53804 	addi	r2,r2,-27424
    2234:	e0fffd17 	ldw	r3,-12(fp)
    2238:	18c002a4 	muli	r3,r3,10
    223c:	10c7883a 	add	r3,r2,r3
    2240:	e0bffe17 	ldw	r2,-8(fp)
    2244:	1885883a 	add	r2,r3,r2
    2248:	00c00044 	movi	r3,1
    224c:	10c00005 	stb	r3,0(r2)
		#if DEBUG
			printBoard((unsigned char **)board,row+2,field+2,row,field);
    2250:	e0bffd17 	ldw	r2,-12(fp)
    2254:	10800084 	addi	r2,r2,2
    2258:	10c03fcc 	andi	r3,r2,255
    225c:	e0bffe17 	ldw	r2,-8(fp)
    2260:	10800084 	addi	r2,r2,2
    2264:	11003fcc 	andi	r4,r2,255
    2268:	e0bffd17 	ldw	r2,-12(fp)
    226c:	11403fcc 	andi	r5,r2,255
    2270:	e0bffe17 	ldw	r2,-8(fp)
    2274:	10803fcc 	andi	r2,r2,255
    2278:	d8800015 	stw	r2,0(sp)
    227c:	280f883a 	mov	r7,r5
    2280:	200d883a 	mov	r6,r4
    2284:	180b883a 	mov	r5,r3
    2288:	010000f4 	movhi	r4,3
    228c:	21253804 	addi	r4,r4,-27424
    2290:	00004bc0 	call	4bc <printBoard>
		#endif
		return 1;
    2294:	00800044 	movi	r2,1
    2298:	00000106 	br	22a0 <capture+0x6f0>
	}

	else return 0;
    229c:	0005883a 	mov	r2,zero
}
    22a0:	e037883a 	mov	sp,fp
    22a4:	dfc00117 	ldw	ra,4(sp)
    22a8:	df000017 	ldw	fp,0(sp)
    22ac:	dec00204 	addi	sp,sp,8
    22b0:	f800283a 	ret

000022b4 <move>:

//TODO: make this obsolete, replace with manMove
void move(unsigned char * tempBoard[], unsigned char row, unsigned char field, unsigned char dir, unsigned char friendly, unsigned char friendlyKing, unsigned char enemy, unsigned char enemyKing, signed char direction){
    22b4:	deffda04 	addi	sp,sp,-152
    22b8:	dfc02515 	stw	ra,148(sp)
    22bc:	df002415 	stw	fp,144(sp)
    22c0:	df002404 	addi	fp,sp,144
    22c4:	e13ff715 	stw	r4,-36(fp)
    22c8:	2813883a 	mov	r9,r5
    22cc:	3011883a 	mov	r8,r6
    22d0:	e1800217 	ldw	r6,8(fp)
    22d4:	e1400317 	ldw	r5,12(fp)
    22d8:	e1000417 	ldw	r4,16(fp)
    22dc:	e0c00517 	ldw	r3,20(fp)
    22e0:	e0800617 	ldw	r2,24(fp)
    22e4:	e27ff805 	stb	r9,-32(fp)
    22e8:	e23ff905 	stb	r8,-28(fp)
    22ec:	e1fffa05 	stb	r7,-24(fp)
    22f0:	e1bffb05 	stb	r6,-20(fp)
    22f4:	e17ffc05 	stb	r5,-16(fp)
    22f8:	e13ffd05 	stb	r4,-12(fp)
    22fc:	e0fffe05 	stb	r3,-8(fp)
    2300:	e0bfff05 	stb	r2,-4(fp)

	unsigned char b[10][10];
	memcpy(b,tempBoard,100);
    2304:	e0bfde04 	addi	r2,fp,-136
    2308:	01801904 	movi	r6,100
    230c:	e17ff717 	ldw	r5,-36(fp)
    2310:	1009883a 	mov	r4,r2
    2314:	00059380 	call	5938 <memcpy>

	int stone = b[row][field];
    2318:	e0fff803 	ldbu	r3,-32(fp)
    231c:	e0bff903 	ldbu	r2,-28(fp)
    2320:	18c002a4 	muli	r3,r3,10
    2324:	e13fdd04 	addi	r4,fp,-140
    2328:	20c7883a 	add	r3,r4,r3
    232c:	1885883a 	add	r2,r3,r2
    2330:	10800104 	addi	r2,r2,4
    2334:	10800003 	ldbu	r2,0(r2)
    2338:	10803fcc 	andi	r2,r2,255
    233c:	e0bfdd15 	stw	r2,-140(fp)

	b[row][field] = BLACK;
    2340:	e0fff803 	ldbu	r3,-32(fp)
    2344:	e0bff903 	ldbu	r2,-28(fp)
    2348:	18c002a4 	muli	r3,r3,10
    234c:	e17fdd04 	addi	r5,fp,-140
    2350:	28c7883a 	add	r3,r5,r3
    2354:	1885883a 	add	r2,r3,r2
    2358:	10800104 	addi	r2,r2,4
    235c:	00c00044 	movi	r3,1
    2360:	10c00005 	stb	r3,0(r2)

	switch(dir){
    2364:	e0bffa03 	ldbu	r2,-24(fp)
    2368:	10c000a0 	cmpeqi	r3,r2,2
    236c:	1800251e 	bne	r3,zero,2404 <move+0x150>
    2370:	10c000c8 	cmpgei	r3,r2,3
    2374:	1800031e 	bne	r3,zero,2384 <move+0xd0>
    2378:	10800060 	cmpeqi	r2,r2,1
    237c:	1000061e 	bne	r2,zero,2398 <move+0xe4>
    2380:	00007106 	br	2548 <move+0x294>
    2384:	10c000e0 	cmpeqi	r3,r2,3
    2388:	1800391e 	bne	r3,zero,2470 <move+0x1bc>
    238c:	10800120 	cmpeqi	r2,r2,4
    2390:	1000521e 	bne	r2,zero,24dc <move+0x228>
    2394:	00006c06 	br	2548 <move+0x294>
		case 1:
			b[row-1][field-1] = stone;
    2398:	e0bff803 	ldbu	r2,-32(fp)
    239c:	10ffffc4 	addi	r3,r2,-1
    23a0:	e0bff903 	ldbu	r2,-28(fp)
    23a4:	10bfffc4 	addi	r2,r2,-1
    23a8:	e13fdd17 	ldw	r4,-140(fp)
    23ac:	18c002a4 	muli	r3,r3,10
    23b0:	e17fdd04 	addi	r5,fp,-140
    23b4:	28c7883a 	add	r3,r5,r3
    23b8:	1885883a 	add	r2,r3,r2
    23bc:	10800104 	addi	r2,r2,4
    23c0:	11000005 	stb	r4,0(r2)
			#if DEBUG
				printBoard((unsigned char **)b,row-1,field-1,row,field);
    23c4:	e0bff803 	ldbu	r2,-32(fp)
    23c8:	10bfffc4 	addi	r2,r2,-1
    23cc:	11003fcc 	andi	r4,r2,255
    23d0:	e0bff903 	ldbu	r2,-28(fp)
    23d4:	10bfffc4 	addi	r2,r2,-1
    23d8:	11403fcc 	andi	r5,r2,255
    23dc:	e1bff803 	ldbu	r6,-32(fp)
    23e0:	e0bff903 	ldbu	r2,-28(fp)
    23e4:	e0ffde04 	addi	r3,fp,-136
    23e8:	d8800015 	stw	r2,0(sp)
    23ec:	300f883a 	mov	r7,r6
    23f0:	280d883a 	mov	r6,r5
    23f4:	200b883a 	mov	r5,r4
    23f8:	1809883a 	mov	r4,r3
    23fc:	00004bc0 	call	4bc <printBoard>
			#endif
			break;
    2400:	00005106 	br	2548 <move+0x294>
		case 2:
			b[row-1][field+1] = stone;
    2404:	e0bff803 	ldbu	r2,-32(fp)
    2408:	10ffffc4 	addi	r3,r2,-1
    240c:	e0bff903 	ldbu	r2,-28(fp)
    2410:	10800044 	addi	r2,r2,1
    2414:	e13fdd17 	ldw	r4,-140(fp)
    2418:	18c002a4 	muli	r3,r3,10
    241c:	e17fdd04 	addi	r5,fp,-140
    2420:	28c7883a 	add	r3,r5,r3
    2424:	1885883a 	add	r2,r3,r2
    2428:	10800104 	addi	r2,r2,4
    242c:	11000005 	stb	r4,0(r2)
			#if DEBUG
				printBoard((unsigned char **)b,row-1,field+1,row,field);
    2430:	e0bff803 	ldbu	r2,-32(fp)
    2434:	10bfffc4 	addi	r2,r2,-1
    2438:	11003fcc 	andi	r4,r2,255
    243c:	e0bff903 	ldbu	r2,-28(fp)
    2440:	10800044 	addi	r2,r2,1
    2444:	11403fcc 	andi	r5,r2,255
    2448:	e1bff803 	ldbu	r6,-32(fp)
    244c:	e0bff903 	ldbu	r2,-28(fp)
    2450:	e0ffde04 	addi	r3,fp,-136
    2454:	d8800015 	stw	r2,0(sp)
    2458:	300f883a 	mov	r7,r6
    245c:	280d883a 	mov	r6,r5
    2460:	200b883a 	mov	r5,r4
    2464:	1809883a 	mov	r4,r3
    2468:	00004bc0 	call	4bc <printBoard>
			#endif
			break;
    246c:	00003606 	br	2548 <move+0x294>
		case 3:
			b[row+1][field-1] = stone;
    2470:	e0bff803 	ldbu	r2,-32(fp)
    2474:	10c00044 	addi	r3,r2,1
    2478:	e0bff903 	ldbu	r2,-28(fp)
    247c:	10bfffc4 	addi	r2,r2,-1
    2480:	e13fdd17 	ldw	r4,-140(fp)
    2484:	18c002a4 	muli	r3,r3,10
    2488:	e17fdd04 	addi	r5,fp,-140
    248c:	28c7883a 	add	r3,r5,r3
    2490:	1885883a 	add	r2,r3,r2
    2494:	10800104 	addi	r2,r2,4
    2498:	11000005 	stb	r4,0(r2)
			#if DEBUG
				printBoard((unsigned char **)b,row+1,field-1,row,field);
    249c:	e0bff803 	ldbu	r2,-32(fp)
    24a0:	10800044 	addi	r2,r2,1
    24a4:	11003fcc 	andi	r4,r2,255
    24a8:	e0bff903 	ldbu	r2,-28(fp)
    24ac:	10bfffc4 	addi	r2,r2,-1
    24b0:	11403fcc 	andi	r5,r2,255
    24b4:	e1bff803 	ldbu	r6,-32(fp)
    24b8:	e0bff903 	ldbu	r2,-28(fp)
    24bc:	e0ffde04 	addi	r3,fp,-136
    24c0:	d8800015 	stw	r2,0(sp)
    24c4:	300f883a 	mov	r7,r6
    24c8:	280d883a 	mov	r6,r5
    24cc:	200b883a 	mov	r5,r4
    24d0:	1809883a 	mov	r4,r3
    24d4:	00004bc0 	call	4bc <printBoard>
			#endif
			break;
    24d8:	00001b06 	br	2548 <move+0x294>
		case 4:
			b[row+1][field+1] = stone;
    24dc:	e0bff803 	ldbu	r2,-32(fp)
    24e0:	10c00044 	addi	r3,r2,1
    24e4:	e0bff903 	ldbu	r2,-28(fp)
    24e8:	10800044 	addi	r2,r2,1
    24ec:	e13fdd17 	ldw	r4,-140(fp)
    24f0:	18c002a4 	muli	r3,r3,10
    24f4:	e17fdd04 	addi	r5,fp,-140
    24f8:	28c7883a 	add	r3,r5,r3
    24fc:	1885883a 	add	r2,r3,r2
    2500:	10800104 	addi	r2,r2,4
    2504:	11000005 	stb	r4,0(r2)
			#if DEBUG
				printBoard((unsigned char **)b,row+1,field+1,row,field);
    2508:	e0bff803 	ldbu	r2,-32(fp)
    250c:	10800044 	addi	r2,r2,1
    2510:	11003fcc 	andi	r4,r2,255
    2514:	e0bff903 	ldbu	r2,-28(fp)
    2518:	10800044 	addi	r2,r2,1
    251c:	11403fcc 	andi	r5,r2,255
    2520:	e1bff803 	ldbu	r6,-32(fp)
    2524:	e0bff903 	ldbu	r2,-28(fp)
    2528:	e0ffde04 	addi	r3,fp,-136
    252c:	d8800015 	stw	r2,0(sp)
    2530:	300f883a 	mov	r7,r6
    2534:	280d883a 	mov	r6,r5
    2538:	200b883a 	mov	r5,r4
    253c:	1809883a 	mov	r4,r3
    2540:	00004bc0 	call	4bc <printBoard>
			#endif
			break;
    2544:	0001883a 	nop
	}
	memcpy(tempBoard,b,100);
    2548:	e0bfde04 	addi	r2,fp,-136
    254c:	01801904 	movi	r6,100
    2550:	100b883a 	mov	r5,r2
    2554:	e13ff717 	ldw	r4,-36(fp)
    2558:	00059380 	call	5938 <memcpy>
}
    255c:	0001883a 	nop
    2560:	e037883a 	mov	sp,fp
    2564:	dfc00117 	ldw	ra,4(sp)
    2568:	df000017 	ldw	fp,0(sp)
    256c:	dec00204 	addi	sp,sp,8
    2570:	f800283a 	ret

00002574 <createKing>:

void createKing(unsigned char * tempBoard[])
{
    2574:	deffe304 	addi	sp,sp,-116
    2578:	dfc01c15 	stw	ra,112(sp)
    257c:	df001b15 	stw	fp,108(sp)
    2580:	df001b04 	addi	fp,sp,108
    2584:	e13fff15 	stw	r4,-4(fp)
	unsigned char b[10][10];
	memcpy(b,tempBoard,100);
    2588:	e0bfe544 	addi	r2,fp,-107
    258c:	01801904 	movi	r6,100
    2590:	e17fff17 	ldw	r5,-4(fp)
    2594:	1009883a 	mov	r4,r2
    2598:	00059380 	call	5938 <memcpy>

	for(unsigned char field = 0; field <= 9; field++)
    259c:	e03fe505 	stb	zero,-108(fp)
    25a0:	00001b06 	br	2610 <createKing+0x9c>
	{
		if(b[0][field] == FRIENDLY)
    25a4:	e0bfe503 	ldbu	r2,-108(fp)
    25a8:	e0ffe544 	addi	r3,fp,-107
    25ac:	1885883a 	add	r2,r3,r2
    25b0:	10800003 	ldbu	r2,0(r2)
    25b4:	10803fcc 	andi	r2,r2,255
    25b8:	10800098 	cmpnei	r2,r2,2
    25bc:	1000051e 	bne	r2,zero,25d4 <createKing+0x60>
		{
			b[0][field] = FRIENDLYKING;
    25c0:	e0bfe503 	ldbu	r2,-108(fp)
    25c4:	e0ffe544 	addi	r3,fp,-107
    25c8:	1885883a 	add	r2,r3,r2
    25cc:	00c000c4 	movi	r3,3
    25d0:	10c00005 	stb	r3,0(r2)
		}

		if(b[9][field] == ENEMY)
    25d4:	e0bfe503 	ldbu	r2,-108(fp)
    25d8:	e0fffbc4 	addi	r3,fp,-17
    25dc:	1885883a 	add	r2,r3,r2
    25e0:	10800003 	ldbu	r2,0(r2)
    25e4:	10803fcc 	andi	r2,r2,255
    25e8:	10800118 	cmpnei	r2,r2,4
    25ec:	1000051e 	bne	r2,zero,2604 <createKing+0x90>
		{
			b[9][field] = ENEMYKING;
    25f0:	e0bfe503 	ldbu	r2,-108(fp)
    25f4:	e0fffbc4 	addi	r3,fp,-17
    25f8:	1885883a 	add	r2,r3,r2
    25fc:	00c00144 	movi	r3,5
    2600:	10c00005 	stb	r3,0(r2)
void createKing(unsigned char * tempBoard[])
{
	unsigned char b[10][10];
	memcpy(b,tempBoard,100);

	for(unsigned char field = 0; field <= 9; field++)
    2604:	e0bfe503 	ldbu	r2,-108(fp)
    2608:	10800044 	addi	r2,r2,1
    260c:	e0bfe505 	stb	r2,-108(fp)
    2610:	e0bfe503 	ldbu	r2,-108(fp)
    2614:	108002b0 	cmpltui	r2,r2,10
    2618:	103fe21e 	bne	r2,zero,25a4 <__alt_data_end+0xfc0025a4>
		{
			b[9][field] = ENEMYKING;
		}
	}

	memcpy(tempBoard,b,100);
    261c:	e0bfe544 	addi	r2,fp,-107
    2620:	01801904 	movi	r6,100
    2624:	100b883a 	mov	r5,r2
    2628:	e13fff17 	ldw	r4,-4(fp)
    262c:	00059380 	call	5938 <memcpy>
}
    2630:	0001883a 	nop
    2634:	e037883a 	mov	sp,fp
    2638:	dfc00117 	ldw	ra,4(sp)
    263c:	df000017 	ldw	fp,0(sp)
    2640:	dec00204 	addi	sp,sp,8
    2644:	f800283a 	ret

00002648 <minimaxAlgorithmRecursive>:


int minimaxAlgorithmRecursive(unsigned char * tempBoard[], unsigned char friendly, unsigned char friendlyKing, unsigned char enemy, unsigned char enemyKing, signed char direction, int depth)
{
    2648:	deff9b04 	addi	sp,sp,-404
    264c:	dfc06415 	stw	ra,400(sp)
    2650:	df006315 	stw	fp,396(sp)
    2654:	df006304 	addi	fp,sp,396
    2658:	e13ffa15 	stw	r4,-24(fp)
    265c:	2811883a 	mov	r8,r5
    2660:	300b883a 	mov	r5,r6
    2664:	3809883a 	mov	r4,r7
    2668:	e0c00217 	ldw	r3,8(fp)
    266c:	e0800317 	ldw	r2,12(fp)
    2670:	e23ffb05 	stb	r8,-20(fp)
    2674:	e17ffc05 	stb	r5,-16(fp)
    2678:	e13ffd05 	stb	r4,-12(fp)
    267c:	e0fffe05 	stb	r3,-8(fp)
    2680:	e0bfff05 	stb	r2,-4(fp)
	int bestScore;

	createKing((unsigned char **)tempBoard);
    2684:	e13ffa17 	ldw	r4,-24(fp)
    2688:	00025740 	call	2574 <createKing>

	unsigned char b[10][10];
	memcpy(b,tempBoard,100);
    268c:	e0bfaf04 	addi	r2,fp,-324
    2690:	01801904 	movi	r6,100
    2694:	e17ffa17 	ldw	r5,-24(fp)
    2698:	1009883a 	mov	r4,r2
    269c:	00059380 	call	5938 <memcpy>

	if(depth > 0)
    26a0:	e0800417 	ldw	r2,16(fp)
    26a4:	0081b90e 	bge	zero,r2,2d8c <minimaxAlgorithmRecursive+0x744>
	{
		node_t * head = NULL;
    26a8:	e03fac15 	stw	zero,-336(fp)
		head = malloc(sizeof(node_t));
    26ac:	01000204 	movi	r4,8
    26b0:	00050200 	call	5020 <malloc>
    26b4:	e0bfac15 	stw	r2,-336(fp)

		node_t * current = head;
    26b8:	e0bfac17 	ldw	r2,-336(fp)
    26bc:	e0bfa315 	stw	r2,-372(fp)

		for(unsigned char row = 0; row < 10; row++)
    26c0:	e03fa405 	stb	zero,-368(fp)
    26c4:	00014606 	br	2be0 <minimaxAlgorithmRecursive+0x598>
		{
			for(unsigned char field = 0; field < 10; field++)
    26c8:	e03fa445 	stb	zero,-367(fp)
    26cc:	00013e06 	br	2bc8 <minimaxAlgorithmRecursive+0x580>
			{
				if(b[row][field] == friendly)
    26d0:	e0ffa403 	ldbu	r3,-368(fp)
    26d4:	e0bfa443 	ldbu	r2,-367(fp)
    26d8:	18c002a4 	muli	r3,r3,10
    26dc:	e13fa204 	addi	r4,fp,-376
    26e0:	20c7883a 	add	r3,r4,r3
    26e4:	1885883a 	add	r2,r3,r2
    26e8:	10800d04 	addi	r2,r2,52
    26ec:	10800003 	ldbu	r2,0(r2)
    26f0:	10c03fcc 	andi	r3,r2,255
    26f4:	e0bffb03 	ldbu	r2,-20(fp)
    26f8:	1881301e 	bne	r3,r2,2bbc <minimaxAlgorithmRecursive+0x574>
				{
					#if DEBUG
						printf("R%i: [%i][%i] is friendly\n",depth,row,field);
    26fc:	e0bfa403 	ldbu	r2,-368(fp)
    2700:	e0ffa443 	ldbu	r3,-367(fp)
    2704:	180f883a 	mov	r7,r3
    2708:	100d883a 	mov	r6,r2
    270c:	e1400417 	ldw	r5,16(fp)
    2710:	010000b4 	movhi	r4,2
    2714:	21133a04 	addi	r4,r4,19688
    2718:	0005bd80 	call	5bd8 <printf>
					#endif
					int nextDirection;
					if(direction == -1) nextDirection = 1;
    271c:	e0bfff07 	ldb	r2,-4(fp)
    2720:	10bfffd8 	cmpnei	r2,r2,-1
    2724:	1000021e 	bne	r2,zero,2730 <minimaxAlgorithmRecursive+0xe8>
    2728:	00800044 	movi	r2,1
    272c:	e0bfa515 	stw	r2,-364(fp)
					if(direction == 1) nextDirection = -1;
    2730:	e0bfff07 	ldb	r2,-4(fp)
    2734:	10800058 	cmpnei	r2,r2,1
    2738:	1000021e 	bne	r2,zero,2744 <minimaxAlgorithmRecursive+0xfc>
    273c:	00bfffc4 	movi	r2,-1
    2740:	e0bfa515 	stw	r2,-364(fp)

					unsigned char newBoard[10][10];
					memcpy(newBoard,b,100);
    2744:	e0bfe104 	addi	r2,fp,-124
    2748:	e0ffaf04 	addi	r3,fp,-324
    274c:	01001904 	movi	r4,100
    2750:	200d883a 	mov	r6,r4
    2754:	180b883a 	mov	r5,r3
    2758:	1009883a 	mov	r4,r2
    275c:	00059380 	call	5938 <memcpy>

					int captured = manCapture((unsigned char **)newBoard, row, field, friendly, friendlyKing, enemy, enemyKing);
    2760:	e17fa403 	ldbu	r5,-368(fp)
    2764:	e1bfa443 	ldbu	r6,-367(fp)
    2768:	e1fffb03 	ldbu	r7,-20(fp)
    276c:	e0bffc03 	ldbu	r2,-16(fp)
    2770:	e0fffd03 	ldbu	r3,-12(fp)
    2774:	e13ffe03 	ldbu	r4,-8(fp)
    2778:	e23fe104 	addi	r8,fp,-124
    277c:	d9000215 	stw	r4,8(sp)
    2780:	d8c00115 	stw	r3,4(sp)
    2784:	d8800015 	stw	r2,0(sp)
    2788:	4009883a 	mov	r4,r8
    278c:	00013700 	call	1370 <manCapture>
    2790:	10803fcc 	andi	r2,r2,255
    2794:	e0bfad15 	stw	r2,-332(fp)
					if(captured)
    2798:	e0bfad17 	ldw	r2,-332(fp)
    279c:	10009726 	beq	r2,zero,29fc <minimaxAlgorithmRecursive+0x3b4>
					{
						#if DEBUG
							printf("R%i: [%i][%i] can capture\n",depth,row,field);
    27a0:	e0bfa403 	ldbu	r2,-368(fp)
    27a4:	e0ffa443 	ldbu	r3,-367(fp)
    27a8:	180f883a 	mov	r7,r3
    27ac:	100d883a 	mov	r6,r2
    27b0:	e1400417 	ldw	r5,16(fp)
    27b4:	010000b4 	movhi	r4,2
    27b8:	21134104 	addi	r4,r4,19716
    27bc:	0005bd80 	call	5bd8 <printf>
						#endif
						int enemiesLeft = 0;
    27c0:	e03fa615 	stw	zero,-360(fp)
						for(unsigned char r = 0; r < 10; r++)
    27c4:	e03fa705 	stb	zero,-356(fp)
    27c8:	00002306 	br	2858 <minimaxAlgorithmRecursive+0x210>
						{
							for(unsigned char f = 0; f < 10; f++)
    27cc:	e03fa745 	stb	zero,-355(fp)
    27d0:	00001b06 	br	2840 <minimaxAlgorithmRecursive+0x1f8>
							{
								if(b[row][field] == enemy || b[row][field] == enemyKing)
    27d4:	e0ffa403 	ldbu	r3,-368(fp)
    27d8:	e0bfa443 	ldbu	r2,-367(fp)
    27dc:	18c002a4 	muli	r3,r3,10
    27e0:	e13fa204 	addi	r4,fp,-376
    27e4:	20c7883a 	add	r3,r4,r3
    27e8:	1885883a 	add	r2,r3,r2
    27ec:	10800d04 	addi	r2,r2,52
    27f0:	10800003 	ldbu	r2,0(r2)
    27f4:	10c03fcc 	andi	r3,r2,255
    27f8:	e0bffd03 	ldbu	r2,-12(fp)
    27fc:	18800b26 	beq	r3,r2,282c <minimaxAlgorithmRecursive+0x1e4>
    2800:	e0ffa403 	ldbu	r3,-368(fp)
    2804:	e0bfa443 	ldbu	r2,-367(fp)
    2808:	18c002a4 	muli	r3,r3,10
    280c:	e13fa204 	addi	r4,fp,-376
    2810:	20c7883a 	add	r3,r4,r3
    2814:	1885883a 	add	r2,r3,r2
    2818:	10800d04 	addi	r2,r2,52
    281c:	10800003 	ldbu	r2,0(r2)
    2820:	10c03fcc 	andi	r3,r2,255
    2824:	e0bffe03 	ldbu	r2,-8(fp)
    2828:	1880021e 	bne	r3,r2,2834 <minimaxAlgorithmRecursive+0x1ec>
									enemiesLeft = 1;
    282c:	00800044 	movi	r2,1
    2830:	e0bfa615 	stw	r2,-360(fp)
							printf("R%i: [%i][%i] can capture\n",depth,row,field);
						#endif
						int enemiesLeft = 0;
						for(unsigned char r = 0; r < 10; r++)
						{
							for(unsigned char f = 0; f < 10; f++)
    2834:	e0bfa743 	ldbu	r2,-355(fp)
    2838:	10800044 	addi	r2,r2,1
    283c:	e0bfa745 	stb	r2,-355(fp)
    2840:	e0bfa743 	ldbu	r2,-355(fp)
    2844:	108002b0 	cmpltui	r2,r2,10
    2848:	103fe21e 	bne	r2,zero,27d4 <__alt_data_end+0xfc0027d4>
					{
						#if DEBUG
							printf("R%i: [%i][%i] can capture\n",depth,row,field);
						#endif
						int enemiesLeft = 0;
						for(unsigned char r = 0; r < 10; r++)
    284c:	e0bfa703 	ldbu	r2,-356(fp)
    2850:	10800044 	addi	r2,r2,1
    2854:	e0bfa705 	stb	r2,-356(fp)
    2858:	e0bfa703 	ldbu	r2,-356(fp)
    285c:	108002b0 	cmpltui	r2,r2,10
    2860:	103fda1e 	bne	r2,zero,27cc <__alt_data_end+0xfc0027cc>
								if(b[row][field] == enemy || b[row][field] == enemyKing)
									enemiesLeft = 1;
							}
						}
						int score;
						if(enemiesLeft == 1)
    2864:	e0bfa617 	ldw	r2,-360(fp)
    2868:	10800058 	cmpnei	r2,r2,1
    286c:	10001d1e 	bne	r2,zero,28e4 <minimaxAlgorithmRecursive+0x29c>
						{
							#if DEBUG
								printf("R%i: there are enemies left after the capture\n",depth);
    2870:	e1400417 	ldw	r5,16(fp)
    2874:	010000b4 	movhi	r4,2
    2878:	21134804 	addi	r4,r4,19744
    287c:	0005bd80 	call	5bd8 <printf>
								printf("R%i: calling minimaxAlgorithmRecursive with depth %i\n",depth,depth-1);
    2880:	e0800417 	ldw	r2,16(fp)
    2884:	10bfffc4 	addi	r2,r2,-1
    2888:	100d883a 	mov	r6,r2
    288c:	e1400417 	ldw	r5,16(fp)
    2890:	010000b4 	movhi	r4,2
    2894:	21135404 	addi	r4,r4,19792
    2898:	0005bd80 	call	5bd8 <printf>
							#endif
							score = minimaxAlgorithmRecursive((unsigned char **)newBoard, enemy, enemyKing, friendly, friendlyKing, nextDirection, depth-1);
    289c:	e17ffd03 	ldbu	r5,-12(fp)
    28a0:	e1bffe03 	ldbu	r6,-8(fp)
    28a4:	e1fffb03 	ldbu	r7,-20(fp)
    28a8:	e0bffc03 	ldbu	r2,-16(fp)
    28ac:	e0ffa517 	ldw	r3,-364(fp)
    28b0:	18c03fcc 	andi	r3,r3,255
    28b4:	18c0201c 	xori	r3,r3,128
    28b8:	18ffe004 	addi	r3,r3,-128
    28bc:	e1000417 	ldw	r4,16(fp)
    28c0:	213fffc4 	addi	r4,r4,-1
    28c4:	e23fe104 	addi	r8,fp,-124
    28c8:	d9000215 	stw	r4,8(sp)
    28cc:	d8c00115 	stw	r3,4(sp)
    28d0:	d8800015 	stw	r2,0(sp)
    28d4:	4009883a 	mov	r4,r8
    28d8:	00026480 	call	2648 <minimaxAlgorithmRecursive>
    28dc:	e0bfa815 	stw	r2,-352(fp)
    28e0:	00001806 	br	2944 <minimaxAlgorithmRecursive+0x2fc>
						}
						else if(enemiesLeft == 0)
    28e4:	e0bfa617 	ldw	r2,-360(fp)
    28e8:	1000161e 	bne	r2,zero,2944 <minimaxAlgorithmRecursive+0x2fc>
						{
							#if DEBUG
								printf("R%i: there are no enemies left after the capture\n",depth);
    28ec:	e1400417 	ldw	r5,16(fp)
    28f0:	010000b4 	movhi	r4,2
    28f4:	21136204 	addi	r4,r4,19848
    28f8:	0005bd80 	call	5bd8 <printf>
								printf("R%i: calling minimaxAlgorithmRecursive with depth 0\n",depth);
    28fc:	e1400417 	ldw	r5,16(fp)
    2900:	010000b4 	movhi	r4,2
    2904:	21136f04 	addi	r4,r4,19900
    2908:	0005bd80 	call	5bd8 <printf>
							#endif
							//TODO should i do this? this is a dirty fix for when after a capture, the same stone is used twice.
							score = minimaxAlgorithmRecursive((unsigned char **)newBoard, enemy, enemyKing, friendly, friendlyKing, nextDirection, 0);
    290c:	e17ffd03 	ldbu	r5,-12(fp)
    2910:	e1bffe03 	ldbu	r6,-8(fp)
    2914:	e1fffb03 	ldbu	r7,-20(fp)
    2918:	e0bffc03 	ldbu	r2,-16(fp)
    291c:	e0ffa517 	ldw	r3,-364(fp)
    2920:	18c03fcc 	andi	r3,r3,255
    2924:	18c0201c 	xori	r3,r3,128
    2928:	18ffe004 	addi	r3,r3,-128
    292c:	e13fe104 	addi	r4,fp,-124
    2930:	d8000215 	stw	zero,8(sp)
    2934:	d8c00115 	stw	r3,4(sp)
    2938:	d8800015 	stw	r2,0(sp)
    293c:	00026480 	call	2648 <minimaxAlgorithmRecursive>
    2940:	e0bfa815 	stw	r2,-352(fp)
						}
						#if DEBUG
							printf("R%i: manCapture: adding score %i to linked list\n",depth,score);
    2944:	e1bfa817 	ldw	r6,-352(fp)
    2948:	e1400417 	ldw	r5,16(fp)
    294c:	010000b4 	movhi	r4,2
    2950:	21137d04 	addi	r4,r4,19956
    2954:	0005bd80 	call	5bd8 <printf>
						#endif

						current = head;
    2958:	e0bfac17 	ldw	r2,-336(fp)
    295c:	e0bfa315 	stw	r2,-372(fp)
						#if DEBUG
							printf("R%i: manCapture: looping through linked list\n",depth);
    2960:	e1400417 	ldw	r5,16(fp)
    2964:	010000b4 	movhi	r4,2
    2968:	21138a04 	addi	r4,r4,20008
    296c:	0005bd80 	call	5bd8 <printf>
						#endif
						for(int i = 0; current->next != NULL; i++)
    2970:	e03fa915 	stw	zero,-348(fp)
    2974:	00000c06 	br	29a8 <minimaxAlgorithmRecursive+0x360>
						{
							printf("current->score: %i\n",current->score);
    2978:	e0bfa317 	ldw	r2,-372(fp)
    297c:	10800117 	ldw	r2,4(r2)
    2980:	100b883a 	mov	r5,r2
    2984:	010000b4 	movhi	r4,2
    2988:	21139604 	addi	r4,r4,20056
    298c:	0005bd80 	call	5bd8 <printf>
							current = current->next;
    2990:	e0bfa317 	ldw	r2,-372(fp)
    2994:	10800017 	ldw	r2,0(r2)
    2998:	e0bfa315 	stw	r2,-372(fp)

						current = head;
						#if DEBUG
							printf("R%i: manCapture: looping through linked list\n",depth);
						#endif
						for(int i = 0; current->next != NULL; i++)
    299c:	e0bfa917 	ldw	r2,-348(fp)
    29a0:	10800044 	addi	r2,r2,1
    29a4:	e0bfa915 	stw	r2,-348(fp)
    29a8:	e0bfa317 	ldw	r2,-372(fp)
    29ac:	10800017 	ldw	r2,0(r2)
    29b0:	103ff11e 	bne	r2,zero,2978 <__alt_data_end+0xfc002978>
						{
							printf("current->score: %i\n",current->score);
							current = current->next;
						}
						while (current->next != NULL)
    29b4:	00000606 	br	29d0 <minimaxAlgorithmRecursive+0x388>
						{
							printf("heyo\n");
    29b8:	010000b4 	movhi	r4,2
    29bc:	21139b04 	addi	r4,r4,20076
    29c0:	0005cf40 	call	5cf4 <puts>
							current = current->next;
    29c4:	e0bfa317 	ldw	r2,-372(fp)
    29c8:	10800017 	ldw	r2,0(r2)
    29cc:	e0bfa315 	stw	r2,-372(fp)
						for(int i = 0; current->next != NULL; i++)
						{
							printf("current->score: %i\n",current->score);
							current = current->next;
						}
						while (current->next != NULL)
    29d0:	e0bfa317 	ldw	r2,-372(fp)
    29d4:	10800017 	ldw	r2,0(r2)
    29d8:	103ff71e 	bne	r2,zero,29b8 <__alt_data_end+0xfc0029b8>
						{
							printf("heyo\n");
							current = current->next;
						}
						current->next = malloc(sizeof(node_t));
    29dc:	01000204 	movi	r4,8
    29e0:	00050200 	call	5020 <malloc>
    29e4:	1007883a 	mov	r3,r2
    29e8:	e0bfa317 	ldw	r2,-372(fp)
    29ec:	10c00015 	stw	r3,0(r2)
						current->score = score;
    29f0:	e0bfa317 	ldw	r2,-372(fp)
    29f4:	e0ffa817 	ldw	r3,-352(fp)
    29f8:	10c00115 	stw	r3,4(r2)
					}

					#if DEBUG
						printf("R%i: checking if [%i][%i] can move\n",depth,row,field);
    29fc:	e0bfa403 	ldbu	r2,-368(fp)
    2a00:	e0ffa443 	ldbu	r3,-367(fp)
    2a04:	180f883a 	mov	r7,r3
    2a08:	100d883a 	mov	r6,r2
    2a0c:	e1400417 	ldw	r5,16(fp)
    2a10:	010000b4 	movhi	r4,2
    2a14:	21139d04 	addi	r4,r4,20084
    2a18:	0005bd80 	call	5bd8 <printf>
					#endif
					for(int d = 1;d<=4;d++)
    2a1c:	00800044 	movi	r2,1
    2a20:	e0bfaa15 	stw	r2,-344(fp)
    2a24:	00006206 	br	2bb0 <minimaxAlgorithmRecursive+0x568>
					{
						if(checkIfCanMove((unsigned char **)b, row, field, d, friendly, friendlyKing, enemy, enemyKing, direction) == 1)
    2a28:	e27fa403 	ldbu	r9,-368(fp)
    2a2c:	e2bfa443 	ldbu	r10,-367(fp)
    2a30:	e0bffb03 	ldbu	r2,-20(fp)
    2a34:	e0fffc03 	ldbu	r3,-16(fp)
    2a38:	e13ffd03 	ldbu	r4,-12(fp)
    2a3c:	e17ffe03 	ldbu	r5,-8(fp)
    2a40:	e1bfff07 	ldb	r6,-4(fp)
    2a44:	e23faf04 	addi	r8,fp,-324
    2a48:	d9800415 	stw	r6,16(sp)
    2a4c:	d9400315 	stw	r5,12(sp)
    2a50:	d9000215 	stw	r4,8(sp)
    2a54:	d8c00115 	stw	r3,4(sp)
    2a58:	d8800015 	stw	r2,0(sp)
    2a5c:	e1ffaa17 	ldw	r7,-344(fp)
    2a60:	500d883a 	mov	r6,r10
    2a64:	480b883a 	mov	r5,r9
    2a68:	4009883a 	mov	r4,r8
    2a6c:	00018280 	call	1828 <checkIfCanMove>
    2a70:	10800058 	cmpnei	r2,r2,1
    2a74:	10004b1e 	bne	r2,zero,2ba4 <minimaxAlgorithmRecursive+0x55c>
						{
							#if DEBUG
								printf("R%i: [%i][%i] can move with dir %i\n",depth,row,field,d);
    2a78:	e0ffa403 	ldbu	r3,-368(fp)
    2a7c:	e13fa443 	ldbu	r4,-367(fp)
    2a80:	e0bfaa17 	ldw	r2,-344(fp)
    2a84:	d8800015 	stw	r2,0(sp)
    2a88:	200f883a 	mov	r7,r4
    2a8c:	180d883a 	mov	r6,r3
    2a90:	e1400417 	ldw	r5,16(fp)
    2a94:	010000b4 	movhi	r4,2
    2a98:	2113a604 	addi	r4,r4,20120
    2a9c:	0005bd80 	call	5bd8 <printf>
							#endif
							unsigned char newBoard[10][10];
							memcpy(newBoard,b,100);
    2aa0:	e0bfc804 	addi	r2,fp,-224
    2aa4:	e0ffaf04 	addi	r3,fp,-324
    2aa8:	01001904 	movi	r4,100
    2aac:	200d883a 	mov	r6,r4
    2ab0:	180b883a 	mov	r5,r3
    2ab4:	1009883a 	mov	r4,r2
    2ab8:	00059380 	call	5938 <memcpy>
							move((unsigned char **)newBoard, row, field, d, friendly, friendlyKing, enemy, enemyKing, direction);
    2abc:	e27fa403 	ldbu	r9,-368(fp)
    2ac0:	e2bfa443 	ldbu	r10,-367(fp)
    2ac4:	e0bfaa17 	ldw	r2,-344(fp)
    2ac8:	11c03fcc 	andi	r7,r2,255
    2acc:	e0bffb03 	ldbu	r2,-20(fp)
    2ad0:	e0fffc03 	ldbu	r3,-16(fp)
    2ad4:	e13ffd03 	ldbu	r4,-12(fp)
    2ad8:	e17ffe03 	ldbu	r5,-8(fp)
    2adc:	e1bfff07 	ldb	r6,-4(fp)
    2ae0:	e23fc804 	addi	r8,fp,-224
    2ae4:	d9800415 	stw	r6,16(sp)
    2ae8:	d9400315 	stw	r5,12(sp)
    2aec:	d9000215 	stw	r4,8(sp)
    2af0:	d8c00115 	stw	r3,4(sp)
    2af4:	d8800015 	stw	r2,0(sp)
    2af8:	500d883a 	mov	r6,r10
    2afc:	480b883a 	mov	r5,r9
    2b00:	4009883a 	mov	r4,r8
    2b04:	00022b40 	call	22b4 <move>
							int score = minimaxAlgorithmRecursive((unsigned char **)newBoard, enemy, enemyKing, friendly, friendlyKing, nextDirection, depth-1);
    2b08:	e17ffd03 	ldbu	r5,-12(fp)
    2b0c:	e1bffe03 	ldbu	r6,-8(fp)
    2b10:	e1fffb03 	ldbu	r7,-20(fp)
    2b14:	e0bffc03 	ldbu	r2,-16(fp)
    2b18:	e0ffa517 	ldw	r3,-364(fp)
    2b1c:	18c03fcc 	andi	r3,r3,255
    2b20:	18c0201c 	xori	r3,r3,128
    2b24:	18ffe004 	addi	r3,r3,-128
    2b28:	e1000417 	ldw	r4,16(fp)
    2b2c:	213fffc4 	addi	r4,r4,-1
    2b30:	e23fc804 	addi	r8,fp,-224
    2b34:	d9000215 	stw	r4,8(sp)
    2b38:	d8c00115 	stw	r3,4(sp)
    2b3c:	d8800015 	stw	r2,0(sp)
    2b40:	4009883a 	mov	r4,r8
    2b44:	00026480 	call	2648 <minimaxAlgorithmRecursive>
    2b48:	e0bfae15 	stw	r2,-328(fp)
							#if DEBUG
								printf("R%i: manMove: adding score %i to linked list\n",depth,score);
    2b4c:	e1bfae17 	ldw	r6,-328(fp)
    2b50:	e1400417 	ldw	r5,16(fp)
    2b54:	010000b4 	movhi	r4,2
    2b58:	2113af04 	addi	r4,r4,20156
    2b5c:	0005bd80 	call	5bd8 <printf>
							#endif
							current = head;
    2b60:	e0bfac17 	ldw	r2,-336(fp)
    2b64:	e0bfa315 	stw	r2,-372(fp)
							while (current->next != NULL) current = current->next;
    2b68:	00000306 	br	2b78 <minimaxAlgorithmRecursive+0x530>
    2b6c:	e0bfa317 	ldw	r2,-372(fp)
    2b70:	10800017 	ldw	r2,0(r2)
    2b74:	e0bfa315 	stw	r2,-372(fp)
    2b78:	e0bfa317 	ldw	r2,-372(fp)
    2b7c:	10800017 	ldw	r2,0(r2)
    2b80:	103ffa1e 	bne	r2,zero,2b6c <__alt_data_end+0xfc002b6c>
							current->next = malloc(sizeof(node_t));
    2b84:	01000204 	movi	r4,8
    2b88:	00050200 	call	5020 <malloc>
    2b8c:	1007883a 	mov	r3,r2
    2b90:	e0bfa317 	ldw	r2,-372(fp)
    2b94:	10c00015 	stw	r3,0(r2)
							current->score = score;
    2b98:	e0bfa317 	ldw	r2,-372(fp)
    2b9c:	e0ffae17 	ldw	r3,-328(fp)
    2ba0:	10c00115 	stw	r3,4(r2)
					}

					#if DEBUG
						printf("R%i: checking if [%i][%i] can move\n",depth,row,field);
					#endif
					for(int d = 1;d<=4;d++)
    2ba4:	e0bfaa17 	ldw	r2,-344(fp)
    2ba8:	10800044 	addi	r2,r2,1
    2bac:	e0bfaa15 	stw	r2,-344(fp)
    2bb0:	e0bfaa17 	ldw	r2,-344(fp)
    2bb4:	10800150 	cmplti	r2,r2,5
    2bb8:	103f9b1e 	bne	r2,zero,2a28 <__alt_data_end+0xfc002a28>

		node_t * current = head;

		for(unsigned char row = 0; row < 10; row++)
		{
			for(unsigned char field = 0; field < 10; field++)
    2bbc:	e0bfa443 	ldbu	r2,-367(fp)
    2bc0:	10800044 	addi	r2,r2,1
    2bc4:	e0bfa445 	stb	r2,-367(fp)
    2bc8:	e0bfa443 	ldbu	r2,-367(fp)
    2bcc:	108002b0 	cmpltui	r2,r2,10
    2bd0:	103ebf1e 	bne	r2,zero,26d0 <__alt_data_end+0xfc0026d0>
		node_t * head = NULL;
		head = malloc(sizeof(node_t));

		node_t * current = head;

		for(unsigned char row = 0; row < 10; row++)
    2bd4:	e0bfa403 	ldbu	r2,-368(fp)
    2bd8:	10800044 	addi	r2,r2,1
    2bdc:	e0bfa405 	stb	r2,-368(fp)
    2be0:	e0bfa403 	ldbu	r2,-368(fp)
    2be4:	108002b0 	cmpltui	r2,r2,10
    2be8:	103eb71e 	bne	r2,zero,26c8 <__alt_data_end+0xfc0026c8>
					*/
				}
			}
		}

		if(direction == FRIENDLYDIRECTION) bestScore = -1000;
    2bec:	e0bfff07 	ldb	r2,-4(fp)
    2bf0:	10bfffd8 	cmpnei	r2,r2,-1
    2bf4:	1000031e 	bne	r2,zero,2c04 <minimaxAlgorithmRecursive+0x5bc>
    2bf8:	00bf0604 	movi	r2,-1000
    2bfc:	e0bfa215 	stw	r2,-376(fp)
    2c00:	00000206 	br	2c0c <minimaxAlgorithmRecursive+0x5c4>
		else bestScore = 1000;
    2c04:	0080fa04 	movi	r2,1000
    2c08:	e0bfa215 	stw	r2,-376(fp)

		//remove last item in the list
		//if there is only one item in the list, remove it
		if (head->next == NULL) free(head);
    2c0c:	e0bfac17 	ldw	r2,-336(fp)
    2c10:	10800017 	ldw	r2,0(r2)
    2c14:	1000021e 	bne	r2,zero,2c20 <minimaxAlgorithmRecursive+0x5d8>
    2c18:	e13fac17 	ldw	r4,-336(fp)
    2c1c:	00050340 	call	5034 <free>
		//get to the second to last node in the list
		current = head;
    2c20:	e0bfac17 	ldw	r2,-336(fp)
    2c24:	e0bfa315 	stw	r2,-372(fp)
		while (current->next->next != NULL) current = current->next;
    2c28:	00000306 	br	2c38 <minimaxAlgorithmRecursive+0x5f0>
    2c2c:	e0bfa317 	ldw	r2,-372(fp)
    2c30:	10800017 	ldw	r2,0(r2)
    2c34:	e0bfa315 	stw	r2,-372(fp)
    2c38:	e0bfa317 	ldw	r2,-372(fp)
    2c3c:	10800017 	ldw	r2,0(r2)
    2c40:	10800017 	ldw	r2,0(r2)
    2c44:	103ff91e 	bne	r2,zero,2c2c <__alt_data_end+0xfc002c2c>
		//now current points to the second to last item of the list, so let's remove current->next
		free(current->next);
    2c48:	e0bfa317 	ldw	r2,-372(fp)
    2c4c:	10800017 	ldw	r2,0(r2)
    2c50:	1009883a 	mov	r4,r2
    2c54:	00050340 	call	5034 <free>
		current->next = NULL;
    2c58:	e0bfa317 	ldw	r2,-372(fp)
    2c5c:	10000015 	stw	zero,0(r2)

		#if DEBUG
			printf("R%i list: \n",depth);
    2c60:	e1400417 	ldw	r5,16(fp)
    2c64:	010000b4 	movhi	r4,2
    2c68:	2113bb04 	addi	r4,r4,20204
    2c6c:	0005bd80 	call	5bd8 <printf>
			current = head;
    2c70:	e0bfac17 	ldw	r2,-336(fp)
    2c74:	e0bfa315 	stw	r2,-372(fp)
			while(current != NULL)
    2c78:	00000906 	br	2ca0 <minimaxAlgorithmRecursive+0x658>
			{
				printf("score: %i\n",current->score);
    2c7c:	e0bfa317 	ldw	r2,-372(fp)
    2c80:	10800117 	ldw	r2,4(r2)
    2c84:	100b883a 	mov	r5,r2
    2c88:	010000b4 	movhi	r4,2
    2c8c:	2113be04 	addi	r4,r4,20216
    2c90:	0005bd80 	call	5bd8 <printf>
				current = current->next;
    2c94:	e0bfa317 	ldw	r2,-372(fp)
    2c98:	10800017 	ldw	r2,0(r2)
    2c9c:	e0bfa315 	stw	r2,-372(fp)
		current->next = NULL;

		#if DEBUG
			printf("R%i list: \n",depth);
			current = head;
			while(current != NULL)
    2ca0:	e0bfa317 	ldw	r2,-372(fp)
    2ca4:	103ff51e 	bne	r2,zero,2c7c <__alt_data_end+0xfc002c7c>
				printf("score: %i\n",current->score);
				current = current->next;
			}
		#endif

		current = head;
    2ca8:	e0bfac17 	ldw	r2,-336(fp)
    2cac:	e0bfa315 	stw	r2,-372(fp)
		while (current != NULL)
    2cb0:	00002e06 	br	2d6c <minimaxAlgorithmRecursive+0x724>
		{
			if(direction == FRIENDLYDIRECTION && current->score > bestScore)
    2cb4:	e0bfff07 	ldb	r2,-4(fp)
    2cb8:	10bfffd8 	cmpnei	r2,r2,-1
    2cbc:	10000f1e 	bne	r2,zero,2cfc <minimaxAlgorithmRecursive+0x6b4>
    2cc0:	e0bfa317 	ldw	r2,-372(fp)
    2cc4:	10800117 	ldw	r2,4(r2)
    2cc8:	e0ffa217 	ldw	r3,-376(fp)
    2ccc:	18800b0e 	bge	r3,r2,2cfc <minimaxAlgorithmRecursive+0x6b4>
			{
				#if DEBUG
					printf("score %i is bigger than best score %i, overwriting\n",current->score,bestScore);
    2cd0:	e0bfa317 	ldw	r2,-372(fp)
    2cd4:	10800117 	ldw	r2,4(r2)
    2cd8:	e1bfa217 	ldw	r6,-376(fp)
    2cdc:	100b883a 	mov	r5,r2
    2ce0:	010000b4 	movhi	r4,2
    2ce4:	2113c104 	addi	r4,r4,20228
    2ce8:	0005bd80 	call	5bd8 <printf>
				#endif
				bestScore = current->score;
    2cec:	e0bfa317 	ldw	r2,-372(fp)
    2cf0:	10800117 	ldw	r2,4(r2)
    2cf4:	e0bfa215 	stw	r2,-376(fp)
    2cf8:	00001906 	br	2d60 <minimaxAlgorithmRecursive+0x718>
			}
			else if(direction == ENEMYDIRECTION && current->score < bestScore)
    2cfc:	e0bfff07 	ldb	r2,-4(fp)
    2d00:	10800058 	cmpnei	r2,r2,1
    2d04:	10000f1e 	bne	r2,zero,2d44 <minimaxAlgorithmRecursive+0x6fc>
    2d08:	e0bfa317 	ldw	r2,-372(fp)
    2d0c:	10c00117 	ldw	r3,4(r2)
    2d10:	e0bfa217 	ldw	r2,-376(fp)
    2d14:	18800b0e 	bge	r3,r2,2d44 <minimaxAlgorithmRecursive+0x6fc>
			{
				#if DEBUG
					printf("score %i is smaller than best score %i, overwriting\n",current->score,bestScore);
    2d18:	e0bfa317 	ldw	r2,-372(fp)
    2d1c:	10800117 	ldw	r2,4(r2)
    2d20:	e1bfa217 	ldw	r6,-376(fp)
    2d24:	100b883a 	mov	r5,r2
    2d28:	010000b4 	movhi	r4,2
    2d2c:	2113ce04 	addi	r4,r4,20280
    2d30:	0005bd80 	call	5bd8 <printf>
				#endif
				bestScore = current->score;
    2d34:	e0bfa317 	ldw	r2,-372(fp)
    2d38:	10800117 	ldw	r2,4(r2)
    2d3c:	e0bfa215 	stw	r2,-376(fp)
    2d40:	00000706 	br	2d60 <minimaxAlgorithmRecursive+0x718>
			}
			#if DEBUG
				else
				{
					printf("score %i is not better than best score %i, not overwriting\n",current->score,bestScore);
    2d44:	e0bfa317 	ldw	r2,-372(fp)
    2d48:	10800117 	ldw	r2,4(r2)
    2d4c:	e1bfa217 	ldw	r6,-376(fp)
    2d50:	100b883a 	mov	r5,r2
    2d54:	010000b4 	movhi	r4,2
    2d58:	2113dc04 	addi	r4,r4,20336
    2d5c:	0005bd80 	call	5bd8 <printf>
				}
			#endif
			current = current->next;
    2d60:	e0bfa317 	ldw	r2,-372(fp)
    2d64:	10800017 	ldw	r2,0(r2)
    2d68:	e0bfa315 	stw	r2,-372(fp)
				current = current->next;
			}
		#endif

		current = head;
		while (current != NULL)
    2d6c:	e0bfa317 	ldw	r2,-372(fp)
    2d70:	103fd01e 	bne	r2,zero,2cb4 <__alt_data_end+0xfc002cb4>
				}
			#endif
			current = current->next;
		}
		#if DEBUG
			printf("R%i: iterated, bestScore is %i\n",depth,bestScore);
    2d74:	e1bfa217 	ldw	r6,-376(fp)
    2d78:	e1400417 	ldw	r5,16(fp)
    2d7c:	010000b4 	movhi	r4,2
    2d80:	2113eb04 	addi	r4,r4,20396
    2d84:	0005bd80 	call	5bd8 <printf>
    2d88:	00005506 	br	2ee0 <minimaxAlgorithmRecursive+0x898>
		#endif
		*/
	}
	else
	{
		bestScore = 0;
    2d8c:	e03fa215 	stw	zero,-376(fp)
		//calculate score to return
		for(unsigned char row = 0;row<10;row++)
    2d90:	e03fab05 	stb	zero,-340(fp)
    2d94:	00004a06 	br	2ec0 <minimaxAlgorithmRecursive+0x878>
		{
			for(unsigned char field = 0;field<10;field++)
    2d98:	e03fab45 	stb	zero,-339(fp)
    2d9c:	00004206 	br	2ea8 <minimaxAlgorithmRecursive+0x860>
			{
				if(b[row][field] == FRIENDLY)		bestScore = bestScore + (9-row);
    2da0:	e0ffab03 	ldbu	r3,-340(fp)
    2da4:	e0bfab43 	ldbu	r2,-339(fp)
    2da8:	18c002a4 	muli	r3,r3,10
    2dac:	e13fa204 	addi	r4,fp,-376
    2db0:	20c7883a 	add	r3,r4,r3
    2db4:	1885883a 	add	r2,r3,r2
    2db8:	10800d04 	addi	r2,r2,52
    2dbc:	10800003 	ldbu	r2,0(r2)
    2dc0:	10803fcc 	andi	r2,r2,255
    2dc4:	10800098 	cmpnei	r2,r2,2
    2dc8:	1000071e 	bne	r2,zero,2de8 <minimaxAlgorithmRecursive+0x7a0>
    2dcc:	e0bfab03 	ldbu	r2,-340(fp)
    2dd0:	00c00244 	movi	r3,9
    2dd4:	1885c83a 	sub	r2,r3,r2
    2dd8:	e0ffa217 	ldw	r3,-376(fp)
    2ddc:	1885883a 	add	r2,r3,r2
    2de0:	e0bfa215 	stw	r2,-376(fp)
    2de4:	00002d06 	br	2e9c <minimaxAlgorithmRecursive+0x854>
				else if(b[row][field] == FRIENDLYKING)	bestScore = bestScore + 9;
    2de8:	e0ffab03 	ldbu	r3,-340(fp)
    2dec:	e0bfab43 	ldbu	r2,-339(fp)
    2df0:	18c002a4 	muli	r3,r3,10
    2df4:	e13fa204 	addi	r4,fp,-376
    2df8:	20c7883a 	add	r3,r4,r3
    2dfc:	1885883a 	add	r2,r3,r2
    2e00:	10800d04 	addi	r2,r2,52
    2e04:	10800003 	ldbu	r2,0(r2)
    2e08:	10803fcc 	andi	r2,r2,255
    2e0c:	108000d8 	cmpnei	r2,r2,3
    2e10:	1000041e 	bne	r2,zero,2e24 <minimaxAlgorithmRecursive+0x7dc>
    2e14:	e0bfa217 	ldw	r2,-376(fp)
    2e18:	10800244 	addi	r2,r2,9
    2e1c:	e0bfa215 	stw	r2,-376(fp)
    2e20:	00001e06 	br	2e9c <minimaxAlgorithmRecursive+0x854>
				else if(b[row][field] == ENEMY)		bestScore = bestScore - row;
    2e24:	e0ffab03 	ldbu	r3,-340(fp)
    2e28:	e0bfab43 	ldbu	r2,-339(fp)
    2e2c:	18c002a4 	muli	r3,r3,10
    2e30:	e13fa204 	addi	r4,fp,-376
    2e34:	20c7883a 	add	r3,r4,r3
    2e38:	1885883a 	add	r2,r3,r2
    2e3c:	10800d04 	addi	r2,r2,52
    2e40:	10800003 	ldbu	r2,0(r2)
    2e44:	10803fcc 	andi	r2,r2,255
    2e48:	10800118 	cmpnei	r2,r2,4
    2e4c:	1000051e 	bne	r2,zero,2e64 <minimaxAlgorithmRecursive+0x81c>
    2e50:	e0bfab03 	ldbu	r2,-340(fp)
    2e54:	e0ffa217 	ldw	r3,-376(fp)
    2e58:	1885c83a 	sub	r2,r3,r2
    2e5c:	e0bfa215 	stw	r2,-376(fp)
    2e60:	00000e06 	br	2e9c <minimaxAlgorithmRecursive+0x854>
				else if(b[row][field] == ENEMYKING)	bestScore = bestScore - 9;
    2e64:	e0ffab03 	ldbu	r3,-340(fp)
    2e68:	e0bfab43 	ldbu	r2,-339(fp)
    2e6c:	18c002a4 	muli	r3,r3,10
    2e70:	e13fa204 	addi	r4,fp,-376
    2e74:	20c7883a 	add	r3,r4,r3
    2e78:	1885883a 	add	r2,r3,r2
    2e7c:	10800d04 	addi	r2,r2,52
    2e80:	10800003 	ldbu	r2,0(r2)
    2e84:	10803fcc 	andi	r2,r2,255
    2e88:	10800158 	cmpnei	r2,r2,5
    2e8c:	1000031e 	bne	r2,zero,2e9c <minimaxAlgorithmRecursive+0x854>
    2e90:	e0bfa217 	ldw	r2,-376(fp)
    2e94:	10bffdc4 	addi	r2,r2,-9
    2e98:	e0bfa215 	stw	r2,-376(fp)
	{
		bestScore = 0;
		//calculate score to return
		for(unsigned char row = 0;row<10;row++)
		{
			for(unsigned char field = 0;field<10;field++)
    2e9c:	e0bfab43 	ldbu	r2,-339(fp)
    2ea0:	10800044 	addi	r2,r2,1
    2ea4:	e0bfab45 	stb	r2,-339(fp)
    2ea8:	e0bfab43 	ldbu	r2,-339(fp)
    2eac:	108002b0 	cmpltui	r2,r2,10
    2eb0:	103fbb1e 	bne	r2,zero,2da0 <__alt_data_end+0xfc002da0>
	}
	else
	{
		bestScore = 0;
		//calculate score to return
		for(unsigned char row = 0;row<10;row++)
    2eb4:	e0bfab03 	ldbu	r2,-340(fp)
    2eb8:	10800044 	addi	r2,r2,1
    2ebc:	e0bfab05 	stb	r2,-340(fp)
    2ec0:	e0bfab03 	ldbu	r2,-340(fp)
    2ec4:	108002b0 	cmpltui	r2,r2,10
    2ec8:	103fb31e 	bne	r2,zero,2d98 <__alt_data_end+0xfc002d98>
				else if(b[row][field] == ENEMY)		bestScore = bestScore - row;
				else if(b[row][field] == ENEMYKING)	bestScore = bestScore - 9;
			}
		}
		#if DEBUG
			printf("R%i: calculated score: %i\n",depth,bestScore);
    2ecc:	e1bfa217 	ldw	r6,-376(fp)
    2ed0:	e1400417 	ldw	r5,16(fp)
    2ed4:	010000b4 	movhi	r4,2
    2ed8:	2113f304 	addi	r4,r4,20428
    2edc:	0005bd80 	call	5bd8 <printf>
		#endif
	}

	return bestScore;
    2ee0:	e0bfa217 	ldw	r2,-376(fp)
}
    2ee4:	e037883a 	mov	sp,fp
    2ee8:	dfc00117 	ldw	ra,4(sp)
    2eec:	df000017 	ldw	fp,0(sp)
    2ef0:	dec00204 	addi	sp,sp,8
    2ef4:	f800283a 	ret

00002ef8 <minimaxAlgorithm>:

int minimaxAlgorithm(unsigned char * tempBoard[], unsigned char friendly, unsigned char friendlyKing, unsigned char enemy, unsigned char enemyKing, signed char direction, int depth)
{
    2ef8:	deff9804 	addi	sp,sp,-416
    2efc:	dfc06715 	stw	ra,412(sp)
    2f00:	df006615 	stw	fp,408(sp)
    2f04:	df006604 	addi	fp,sp,408
    2f08:	e13ffa15 	stw	r4,-24(fp)
    2f0c:	2811883a 	mov	r8,r5
    2f10:	300b883a 	mov	r5,r6
    2f14:	3809883a 	mov	r4,r7
    2f18:	e0c00217 	ldw	r3,8(fp)
    2f1c:	e0800317 	ldw	r2,12(fp)
    2f20:	e23ffb05 	stb	r8,-20(fp)
    2f24:	e17ffc05 	stb	r5,-16(fp)
    2f28:	e13ffd05 	stb	r4,-12(fp)
    2f2c:	e0fffe05 	stb	r3,-8(fp)
    2f30:	e0bfff05 	stb	r2,-4(fp)
	createKing((unsigned char **)tempBoard);
    2f34:	e13ffa17 	ldw	r4,-24(fp)
    2f38:	00025740 	call	2574 <createKing>

	unsigned char b[10][10];
	memcpy(b,tempBoard,100);
    2f3c:	e0bfaf04 	addi	r2,fp,-324
    2f40:	01801904 	movi	r6,100
    2f44:	e17ffa17 	ldw	r5,-24(fp)
    2f48:	1009883a 	mov	r4,r2
    2f4c:	00059380 	call	5938 <memcpy>

	//if(direction == FRIENDLYDIRECTION) best->score = -1000;
	//else best->score = 1000;
	//printf("S: made best score %i\n",best->score);

	nodemove_t * head = NULL;
    2f50:	e03f9f15 	stw	zero,-388(fp)
	head = malloc(sizeof(nodemove_t));
    2f54:	01000404 	movi	r4,16
    2f58:	00050200 	call	5020 <malloc>
    2f5c:	e0bf9f15 	stw	r2,-388(fp)
	nodemove_t * current = head;
    2f60:	e0bf9f17 	ldw	r2,-388(fp)
    2f64:	e0bfa015 	stw	r2,-384(fp)

	int thereAreFriendliesLeft = 0;
    2f68:	e03fa115 	stw	zero,-380(fp)

	for(unsigned char row = 0; row < 10; row++)
    2f6c:	e03fa205 	stb	zero,-376(fp)
    2f70:	00012706 	br	3410 <minimaxAlgorithm+0x518>
	{
		for(unsigned char field = 0; field < 10; field++)
    2f74:	e03fa245 	stb	zero,-375(fp)
    2f78:	00011f06 	br	33f8 <minimaxAlgorithm+0x500>
		{
			if(b[row][field] == friendly)
    2f7c:	e0ffa203 	ldbu	r3,-376(fp)
    2f80:	e0bfa243 	ldbu	r2,-375(fp)
    2f84:	18c002a4 	muli	r3,r3,10
    2f88:	e13f9f04 	addi	r4,fp,-388
    2f8c:	20c7883a 	add	r3,r4,r3
    2f90:	1885883a 	add	r2,r3,r2
    2f94:	10801004 	addi	r2,r2,64
    2f98:	10800003 	ldbu	r2,0(r2)
    2f9c:	10c03fcc 	andi	r3,r2,255
    2fa0:	e0bffb03 	ldbu	r2,-20(fp)
    2fa4:	1881111e 	bne	r3,r2,33ec <minimaxAlgorithm+0x4f4>
			{
				thereAreFriendliesLeft = 1;
    2fa8:	00800044 	movi	r2,1
    2fac:	e0bfa115 	stw	r2,-380(fp)
				int nextDirection;
				if(direction == FRIENDLYDIRECTION) nextDirection = ENEMYDIRECTION;
    2fb0:	e0bfff07 	ldb	r2,-4(fp)
    2fb4:	10bfffd8 	cmpnei	r2,r2,-1
    2fb8:	1000021e 	bne	r2,zero,2fc4 <minimaxAlgorithm+0xcc>
    2fbc:	00800044 	movi	r2,1
    2fc0:	e0bfa315 	stw	r2,-372(fp)
				if(direction == ENEMYDIRECTION) nextDirection = FRIENDLYDIRECTION;
    2fc4:	e0bfff07 	ldb	r2,-4(fp)
    2fc8:	10800058 	cmpnei	r2,r2,1
    2fcc:	1000021e 	bne	r2,zero,2fd8 <minimaxAlgorithm+0xe0>
    2fd0:	00bfffc4 	movi	r2,-1
    2fd4:	e0bfa315 	stw	r2,-372(fp)

				unsigned char newBoard[10][10];
				memcpy(newBoard,b,100);
    2fd8:	e0bfe104 	addi	r2,fp,-124
    2fdc:	e0ffaf04 	addi	r3,fp,-324
    2fe0:	01001904 	movi	r4,100
    2fe4:	200d883a 	mov	r6,r4
    2fe8:	180b883a 	mov	r5,r3
    2fec:	1009883a 	mov	r4,r2
    2ff0:	00059380 	call	5938 <memcpy>

				int captured = manCapture((unsigned char **)newBoard, row, field, friendly, friendlyKing, enemy, enemyKing);
    2ff4:	e17fa203 	ldbu	r5,-376(fp)
    2ff8:	e1bfa243 	ldbu	r6,-375(fp)
    2ffc:	e1fffb03 	ldbu	r7,-20(fp)
    3000:	e0bffc03 	ldbu	r2,-16(fp)
    3004:	e0fffd03 	ldbu	r3,-12(fp)
    3008:	e13ffe03 	ldbu	r4,-8(fp)
    300c:	e23fe104 	addi	r8,fp,-124
    3010:	d9000215 	stw	r4,8(sp)
    3014:	d8c00115 	stw	r3,4(sp)
    3018:	d8800015 	stw	r2,0(sp)
    301c:	4009883a 	mov	r4,r8
    3020:	00013700 	call	1370 <manCapture>
    3024:	10803fcc 	andi	r2,r2,255
    3028:	e0bfab15 	stw	r2,-340(fp)
				if(captured)
    302c:	e0bfab17 	ldw	r2,-340(fp)
    3030:	10007d26 	beq	r2,zero,3228 <minimaxAlgorithm+0x330>
				{
					#if DEBUG
						printf("S : [%i][%i] can capture\n",row,field);
    3034:	e0bfa203 	ldbu	r2,-376(fp)
    3038:	e0ffa243 	ldbu	r3,-375(fp)
    303c:	180d883a 	mov	r6,r3
    3040:	100b883a 	mov	r5,r2
    3044:	010000b4 	movhi	r4,2
    3048:	2113fa04 	addi	r4,r4,20456
    304c:	0005bd80 	call	5bd8 <printf>
					#endif
					int enemiesLeft = 0;
    3050:	e03fa415 	stw	zero,-368(fp)
					for(unsigned char r = 0; r < 10; r++)
    3054:	e03fa505 	stb	zero,-364(fp)
    3058:	00002306 	br	30e8 <minimaxAlgorithm+0x1f0>
					{
						for(unsigned char f = 0; f < 10; f++)
    305c:	e03fa545 	stb	zero,-363(fp)
    3060:	00001b06 	br	30d0 <minimaxAlgorithm+0x1d8>
						{
							if(newBoard[row][field] == enemy || newBoard[row][field] == enemyKing)
    3064:	e0ffa203 	ldbu	r3,-376(fp)
    3068:	e0bfa243 	ldbu	r2,-375(fp)
    306c:	18c002a4 	muli	r3,r3,10
    3070:	e13f9f04 	addi	r4,fp,-388
    3074:	20c7883a 	add	r3,r4,r3
    3078:	1885883a 	add	r2,r3,r2
    307c:	10804204 	addi	r2,r2,264
    3080:	10800003 	ldbu	r2,0(r2)
    3084:	10c03fcc 	andi	r3,r2,255
    3088:	e0bffd03 	ldbu	r2,-12(fp)
    308c:	18800b26 	beq	r3,r2,30bc <minimaxAlgorithm+0x1c4>
    3090:	e0ffa203 	ldbu	r3,-376(fp)
    3094:	e0bfa243 	ldbu	r2,-375(fp)
    3098:	18c002a4 	muli	r3,r3,10
    309c:	e13f9f04 	addi	r4,fp,-388
    30a0:	20c7883a 	add	r3,r4,r3
    30a4:	1885883a 	add	r2,r3,r2
    30a8:	10804204 	addi	r2,r2,264
    30ac:	10800003 	ldbu	r2,0(r2)
    30b0:	10c03fcc 	andi	r3,r2,255
    30b4:	e0bffe03 	ldbu	r2,-8(fp)
    30b8:	1880021e 	bne	r3,r2,30c4 <minimaxAlgorithm+0x1cc>
							{
								enemiesLeft = 1;
    30bc:	00800044 	movi	r2,1
    30c0:	e0bfa415 	stw	r2,-368(fp)
						printf("S : [%i][%i] can capture\n",row,field);
					#endif
					int enemiesLeft = 0;
					for(unsigned char r = 0; r < 10; r++)
					{
						for(unsigned char f = 0; f < 10; f++)
    30c4:	e0bfa543 	ldbu	r2,-363(fp)
    30c8:	10800044 	addi	r2,r2,1
    30cc:	e0bfa545 	stb	r2,-363(fp)
    30d0:	e0bfa543 	ldbu	r2,-363(fp)
    30d4:	108002b0 	cmpltui	r2,r2,10
    30d8:	103fe21e 	bne	r2,zero,3064 <__alt_data_end+0xfc003064>
				{
					#if DEBUG
						printf("S : [%i][%i] can capture\n",row,field);
					#endif
					int enemiesLeft = 0;
					for(unsigned char r = 0; r < 10; r++)
    30dc:	e0bfa503 	ldbu	r2,-364(fp)
    30e0:	10800044 	addi	r2,r2,1
    30e4:	e0bfa505 	stb	r2,-364(fp)
    30e8:	e0bfa503 	ldbu	r2,-364(fp)
    30ec:	108002b0 	cmpltui	r2,r2,10
    30f0:	103fda1e 	bne	r2,zero,305c <__alt_data_end+0xfc00305c>
								enemiesLeft = 1;
							}
						}
					}
					#if DEBUG
						printf("enemiesLeft: %i\n",enemiesLeft);
    30f4:	e17fa417 	ldw	r5,-368(fp)
    30f8:	010000b4 	movhi	r4,2
    30fc:	21140104 	addi	r4,r4,20484
    3100:	0005bd80 	call	5bd8 <printf>
					#endif
					int score;
					if(enemiesLeft == 1)
    3104:	e0bfa417 	ldw	r2,-368(fp)
    3108:	10800058 	cmpnei	r2,r2,1
    310c:	1000151e 	bne	r2,zero,3164 <minimaxAlgorithm+0x26c>
					{
						#if DEBUG
							printf("S : there are enemies left");
    3110:	010000b4 	movhi	r4,2
    3114:	21140604 	addi	r4,r4,20504
    3118:	0005bd80 	call	5bd8 <printf>
						#endif
						score = minimaxAlgorithmRecursive((unsigned char **)newBoard, enemy, enemyKing, friendly, friendlyKing, nextDirection, depth-1);
    311c:	e17ffd03 	ldbu	r5,-12(fp)
    3120:	e1bffe03 	ldbu	r6,-8(fp)
    3124:	e1fffb03 	ldbu	r7,-20(fp)
    3128:	e0bffc03 	ldbu	r2,-16(fp)
    312c:	e0ffa317 	ldw	r3,-372(fp)
    3130:	18c03fcc 	andi	r3,r3,255
    3134:	18c0201c 	xori	r3,r3,128
    3138:	18ffe004 	addi	r3,r3,-128
    313c:	e1000417 	ldw	r4,16(fp)
    3140:	213fffc4 	addi	r4,r4,-1
    3144:	e23fe104 	addi	r8,fp,-124
    3148:	d9000215 	stw	r4,8(sp)
    314c:	d8c00115 	stw	r3,4(sp)
    3150:	d8800015 	stw	r2,0(sp)
    3154:	4009883a 	mov	r4,r8
    3158:	00026480 	call	2648 <minimaxAlgorithmRecursive>
    315c:	e0bfa615 	stw	r2,-360(fp)
    3160:	00001106 	br	31a8 <minimaxAlgorithm+0x2b0>
					}
					else
					{
						#if DEBUG
							printf("S : manCapture: there are no enemies left\n");
    3164:	010000b4 	movhi	r4,2
    3168:	21140d04 	addi	r4,r4,20532
    316c:	0005cf40 	call	5cf4 <puts>
						#endif
						// if there are no enemies left
						score = minimaxAlgorithmRecursive((unsigned char **)newBoard, enemy, enemyKing, friendly, friendlyKing, nextDirection, 0);
    3170:	e17ffd03 	ldbu	r5,-12(fp)
    3174:	e1bffe03 	ldbu	r6,-8(fp)
    3178:	e1fffb03 	ldbu	r7,-20(fp)
    317c:	e0bffc03 	ldbu	r2,-16(fp)
    3180:	e0ffa317 	ldw	r3,-372(fp)
    3184:	18c03fcc 	andi	r3,r3,255
    3188:	18c0201c 	xori	r3,r3,128
    318c:	18ffe004 	addi	r3,r3,-128
    3190:	e13fe104 	addi	r4,fp,-124
    3194:	d8000215 	stw	zero,8(sp)
    3198:	d8c00115 	stw	r3,4(sp)
    319c:	d8800015 	stw	r2,0(sp)
    31a0:	00026480 	call	2648 <minimaxAlgorithmRecursive>
    31a4:	e0bfa615 	stw	r2,-360(fp)
					}
					#if DEBUG
						printf("S : adding score %i to list\n",score);
    31a8:	e17fa617 	ldw	r5,-360(fp)
    31ac:	010000b4 	movhi	r4,2
    31b0:	21141804 	addi	r4,r4,20576
    31b4:	0005bd80 	call	5bd8 <printf>
					#endif
					current = head;
    31b8:	e0bf9f17 	ldw	r2,-388(fp)
    31bc:	e0bfa015 	stw	r2,-384(fp)
					while (current->next != NULL) current = current->next;
    31c0:	00000306 	br	31d0 <minimaxAlgorithm+0x2d8>
    31c4:	e0bfa017 	ldw	r2,-384(fp)
    31c8:	10800017 	ldw	r2,0(r2)
    31cc:	e0bfa015 	stw	r2,-384(fp)
    31d0:	e0bfa017 	ldw	r2,-384(fp)
    31d4:	10800017 	ldw	r2,0(r2)
    31d8:	103ffa1e 	bne	r2,zero,31c4 <__alt_data_end+0xfc0031c4>
					current->next = malloc(sizeof(nodemove_t));
    31dc:	01000404 	movi	r4,16
    31e0:	00050200 	call	5020 <malloc>
    31e4:	1007883a 	mov	r3,r2
    31e8:	e0bfa017 	ldw	r2,-384(fp)
    31ec:	10c00015 	stw	r3,0(r2)
					current->score = score;
    31f0:	e0bfa017 	ldw	r2,-384(fp)
    31f4:	e0ffa617 	ldw	r3,-360(fp)
    31f8:	10c00115 	stw	r3,4(r2)
					current->row = row;
    31fc:	e0bfa017 	ldw	r2,-384(fp)
    3200:	e0ffa203 	ldbu	r3,-376(fp)
    3204:	10c00205 	stb	r3,8(r2)
					current->field = field;
    3208:	e0bfa017 	ldw	r2,-384(fp)
    320c:	e0ffa243 	ldbu	r3,-375(fp)
    3210:	10c00245 	stb	r3,9(r2)
					current->dir = 0;
    3214:	e0bfa017 	ldw	r2,-384(fp)
    3218:	10000285 	stb	zero,10(r2)
					current->isCapture = 1;
    321c:	e0bfa017 	ldw	r2,-384(fp)
    3220:	00c00044 	movi	r3,1
    3224:	10c002c5 	stb	r3,11(r2)
				}

				for(int d = 1;d<=4;d++)
    3228:	00800044 	movi	r2,1
    322c:	e0bfa715 	stw	r2,-356(fp)
    3230:	00006b06 	br	33e0 <minimaxAlgorithm+0x4e8>
				{
					if(checkIfCanMove((unsigned char **)b, row, field, d, friendly, friendlyKing, enemy, enemyKing, direction) == 1)
    3234:	e27fa203 	ldbu	r9,-376(fp)
    3238:	e2bfa243 	ldbu	r10,-375(fp)
    323c:	e0bffb03 	ldbu	r2,-20(fp)
    3240:	e0fffc03 	ldbu	r3,-16(fp)
    3244:	e13ffd03 	ldbu	r4,-12(fp)
    3248:	e17ffe03 	ldbu	r5,-8(fp)
    324c:	e1bfff07 	ldb	r6,-4(fp)
    3250:	e23faf04 	addi	r8,fp,-324
    3254:	d9800415 	stw	r6,16(sp)
    3258:	d9400315 	stw	r5,12(sp)
    325c:	d9000215 	stw	r4,8(sp)
    3260:	d8c00115 	stw	r3,4(sp)
    3264:	d8800015 	stw	r2,0(sp)
    3268:	e1ffa717 	ldw	r7,-356(fp)
    326c:	500d883a 	mov	r6,r10
    3270:	480b883a 	mov	r5,r9
    3274:	4009883a 	mov	r4,r8
    3278:	00018280 	call	1828 <checkIfCanMove>
    327c:	10800058 	cmpnei	r2,r2,1
    3280:	1000541e 	bne	r2,zero,33d4 <minimaxAlgorithm+0x4dc>
					{
						#if DEBUG
							printf("S : [%i][%i] dir %i can move\n",row,field,d);
    3284:	e0bfa203 	ldbu	r2,-376(fp)
    3288:	e0ffa243 	ldbu	r3,-375(fp)
    328c:	e1ffa717 	ldw	r7,-356(fp)
    3290:	180d883a 	mov	r6,r3
    3294:	100b883a 	mov	r5,r2
    3298:	010000b4 	movhi	r4,2
    329c:	21142004 	addi	r4,r4,20608
    32a0:	0005bd80 	call	5bd8 <printf>
						#endif
						unsigned char newBoard[10][10];
						memcpy(newBoard,b,100);
    32a4:	e0bfc804 	addi	r2,fp,-224
    32a8:	e0ffaf04 	addi	r3,fp,-324
    32ac:	01001904 	movi	r4,100
    32b0:	200d883a 	mov	r6,r4
    32b4:	180b883a 	mov	r5,r3
    32b8:	1009883a 	mov	r4,r2
    32bc:	00059380 	call	5938 <memcpy>
						move((unsigned char **)newBoard, row, field, d, friendly, friendlyKing, enemy, enemyKing, direction);
    32c0:	e27fa203 	ldbu	r9,-376(fp)
    32c4:	e2bfa243 	ldbu	r10,-375(fp)
    32c8:	e0bfa717 	ldw	r2,-356(fp)
    32cc:	11c03fcc 	andi	r7,r2,255
    32d0:	e0bffb03 	ldbu	r2,-20(fp)
    32d4:	e0fffc03 	ldbu	r3,-16(fp)
    32d8:	e13ffd03 	ldbu	r4,-12(fp)
    32dc:	e17ffe03 	ldbu	r5,-8(fp)
    32e0:	e1bfff07 	ldb	r6,-4(fp)
    32e4:	e23fc804 	addi	r8,fp,-224
    32e8:	d9800415 	stw	r6,16(sp)
    32ec:	d9400315 	stw	r5,12(sp)
    32f0:	d9000215 	stw	r4,8(sp)
    32f4:	d8c00115 	stw	r3,4(sp)
    32f8:	d8800015 	stw	r2,0(sp)
    32fc:	500d883a 	mov	r6,r10
    3300:	480b883a 	mov	r5,r9
    3304:	4009883a 	mov	r4,r8
    3308:	00022b40 	call	22b4 <move>
						int score = minimaxAlgorithmRecursive((unsigned char **)newBoard, enemy, enemyKing, friendly, friendlyKing, nextDirection, depth-1);
    330c:	e17ffd03 	ldbu	r5,-12(fp)
    3310:	e1bffe03 	ldbu	r6,-8(fp)
    3314:	e1fffb03 	ldbu	r7,-20(fp)
    3318:	e0bffc03 	ldbu	r2,-16(fp)
    331c:	e0ffa317 	ldw	r3,-372(fp)
    3320:	18c03fcc 	andi	r3,r3,255
    3324:	18c0201c 	xori	r3,r3,128
    3328:	18ffe004 	addi	r3,r3,-128
    332c:	e1000417 	ldw	r4,16(fp)
    3330:	213fffc4 	addi	r4,r4,-1
    3334:	e23fc804 	addi	r8,fp,-224
    3338:	d9000215 	stw	r4,8(sp)
    333c:	d8c00115 	stw	r3,4(sp)
    3340:	d8800015 	stw	r2,0(sp)
    3344:	4009883a 	mov	r4,r8
    3348:	00026480 	call	2648 <minimaxAlgorithmRecursive>
    334c:	e0bfac15 	stw	r2,-336(fp)
						#if DEBUG
							printf("S : adding score %i to linked list\n",score);
    3350:	e17fac17 	ldw	r5,-336(fp)
    3354:	010000b4 	movhi	r4,2
    3358:	21142804 	addi	r4,r4,20640
    335c:	0005bd80 	call	5bd8 <printf>
						#endif
						current = head;
    3360:	e0bf9f17 	ldw	r2,-388(fp)
    3364:	e0bfa015 	stw	r2,-384(fp)
						while (current->next != NULL) current = current->next;
    3368:	00000306 	br	3378 <minimaxAlgorithm+0x480>
    336c:	e0bfa017 	ldw	r2,-384(fp)
    3370:	10800017 	ldw	r2,0(r2)
    3374:	e0bfa015 	stw	r2,-384(fp)
    3378:	e0bfa017 	ldw	r2,-384(fp)
    337c:	10800017 	ldw	r2,0(r2)
    3380:	103ffa1e 	bne	r2,zero,336c <__alt_data_end+0xfc00336c>
						current->next = malloc(sizeof(nodemove_t));
    3384:	01000404 	movi	r4,16
    3388:	00050200 	call	5020 <malloc>
    338c:	1007883a 	mov	r3,r2
    3390:	e0bfa017 	ldw	r2,-384(fp)
    3394:	10c00015 	stw	r3,0(r2)
						current->score = score;
    3398:	e0bfa017 	ldw	r2,-384(fp)
    339c:	e0ffac17 	ldw	r3,-336(fp)
    33a0:	10c00115 	stw	r3,4(r2)
						current->row = row;
    33a4:	e0bfa017 	ldw	r2,-384(fp)
    33a8:	e0ffa203 	ldbu	r3,-376(fp)
    33ac:	10c00205 	stb	r3,8(r2)
						current->field = field;
    33b0:	e0bfa017 	ldw	r2,-384(fp)
    33b4:	e0ffa243 	ldbu	r3,-375(fp)
    33b8:	10c00245 	stb	r3,9(r2)
						current->dir = d;
    33bc:	e0bfa717 	ldw	r2,-356(fp)
    33c0:	1007883a 	mov	r3,r2
    33c4:	e0bfa017 	ldw	r2,-384(fp)
    33c8:	10c00285 	stb	r3,10(r2)
						current->isCapture = 0;
    33cc:	e0bfa017 	ldw	r2,-384(fp)
    33d0:	100002c5 	stb	zero,11(r2)
					current->field = field;
					current->dir = 0;
					current->isCapture = 1;
				}

				for(int d = 1;d<=4;d++)
    33d4:	e0bfa717 	ldw	r2,-356(fp)
    33d8:	10800044 	addi	r2,r2,1
    33dc:	e0bfa715 	stw	r2,-356(fp)
    33e0:	e0bfa717 	ldw	r2,-356(fp)
    33e4:	10800150 	cmplti	r2,r2,5
    33e8:	103f921e 	bne	r2,zero,3234 <__alt_data_end+0xfc003234>

	int thereAreFriendliesLeft = 0;

	for(unsigned char row = 0; row < 10; row++)
	{
		for(unsigned char field = 0; field < 10; field++)
    33ec:	e0bfa243 	ldbu	r2,-375(fp)
    33f0:	10800044 	addi	r2,r2,1
    33f4:	e0bfa245 	stb	r2,-375(fp)
    33f8:	e0bfa243 	ldbu	r2,-375(fp)
    33fc:	108002b0 	cmpltui	r2,r2,10
    3400:	103ede1e 	bne	r2,zero,2f7c <__alt_data_end+0xfc002f7c>
	head = malloc(sizeof(nodemove_t));
	nodemove_t * current = head;

	int thereAreFriendliesLeft = 0;

	for(unsigned char row = 0; row < 10; row++)
    3404:	e0bfa203 	ldbu	r2,-376(fp)
    3408:	10800044 	addi	r2,r2,1
    340c:	e0bfa205 	stb	r2,-376(fp)
    3410:	e0bfa203 	ldbu	r2,-376(fp)
    3414:	108002b0 	cmpltui	r2,r2,10
    3418:	103ed61e 	bne	r2,zero,2f74 <__alt_data_end+0xfc002f74>
				*/
			}
		}
	}

	if(!thereAreFriendliesLeft)
    341c:	e0bfa117 	ldw	r2,-380(fp)
    3420:	1000051e 	bne	r2,zero,3438 <minimaxAlgorithm+0x540>
	{
		#if DEBUG
			printf("there are no friendlies left to move, returning 0\n");
    3424:	010000b4 	movhi	r4,2
    3428:	21143104 	addi	r4,r4,20676
    342c:	0005cf40 	call	5cf4 <puts>
		#endif
		return 0;
    3430:	0005883a 	mov	r2,zero
    3434:	00016406 	br	39c8 <minimaxAlgorithm+0xad0>
	}

	#if DEBUG
		printf("S : final list:\n");
    3438:	010000b4 	movhi	r4,2
    343c:	21143e04 	addi	r4,r4,20728
    3440:	0005cf40 	call	5cf4 <puts>
		current = head;
    3444:	e0bf9f17 	ldw	r2,-388(fp)
    3448:	e0bfa015 	stw	r2,-384(fp)
		while(current != NULL)
    344c:	00001906 	br	34b4 <minimaxAlgorithm+0x5bc>
		{
			printf("score: %i\nrow: %i\nfield: %i\ndir: %i\nisCapture: %i\n\n",current->score,current->row,current->field,current->dir,current->isCapture);
    3450:	e0bfa017 	ldw	r2,-384(fp)
    3454:	11000117 	ldw	r4,4(r2)
    3458:	e0bfa017 	ldw	r2,-384(fp)
    345c:	10800203 	ldbu	r2,8(r2)
    3460:	11403fcc 	andi	r5,r2,255
    3464:	e0bfa017 	ldw	r2,-384(fp)
    3468:	10800243 	ldbu	r2,9(r2)
    346c:	11803fcc 	andi	r6,r2,255
    3470:	e0bfa017 	ldw	r2,-384(fp)
    3474:	10800283 	ldbu	r2,10(r2)
    3478:	10803fcc 	andi	r2,r2,255
    347c:	e0ffa017 	ldw	r3,-384(fp)
    3480:	18c002c3 	ldbu	r3,11(r3)
    3484:	18c03fcc 	andi	r3,r3,255
    3488:	d8c00115 	stw	r3,4(sp)
    348c:	d8800015 	stw	r2,0(sp)
    3490:	300f883a 	mov	r7,r6
    3494:	280d883a 	mov	r6,r5
    3498:	200b883a 	mov	r5,r4
    349c:	010000b4 	movhi	r4,2
    34a0:	21144204 	addi	r4,r4,20744
    34a4:	0005bd80 	call	5bd8 <printf>
			current = current->next;
    34a8:	e0bfa017 	ldw	r2,-384(fp)
    34ac:	10800017 	ldw	r2,0(r2)
    34b0:	e0bfa015 	stw	r2,-384(fp)
	}

	#if DEBUG
		printf("S : final list:\n");
		current = head;
		while(current != NULL)
    34b4:	e0bfa017 	ldw	r2,-384(fp)
    34b8:	103fe51e 	bne	r2,zero,3450 <__alt_data_end+0xfc003450>
		}
	#endif

	//remove last item in the list
	//if there is only one item in the list, remove it
	if (head->next == NULL)
    34bc:	e0bf9f17 	ldw	r2,-388(fp)
    34c0:	10800017 	ldw	r2,0(r2)
    34c4:	1000071e 	bne	r2,zero,34e4 <minimaxAlgorithm+0x5ec>
	{
		#if DEBUG
			printf("S : the list is empty, free head and return 0\n");
    34c8:	010000b4 	movhi	r4,2
    34cc:	21144f04 	addi	r4,r4,20796
    34d0:	0005cf40 	call	5cf4 <puts>
		#endif
		free(head);
    34d4:	e13f9f17 	ldw	r4,-388(fp)
    34d8:	00050340 	call	5034 <free>
		return 0;
    34dc:	0005883a 	mov	r2,zero
    34e0:	00013906 	br	39c8 <minimaxAlgorithm+0xad0>
	}
	//get to the second to last node in the list
	current = head;
    34e4:	e0bf9f17 	ldw	r2,-388(fp)
    34e8:	e0bfa015 	stw	r2,-384(fp)
	while (current->next->next != NULL) current = current->next;
    34ec:	00000306 	br	34fc <minimaxAlgorithm+0x604>
    34f0:	e0bfa017 	ldw	r2,-384(fp)
    34f4:	10800017 	ldw	r2,0(r2)
    34f8:	e0bfa015 	stw	r2,-384(fp)
    34fc:	e0bfa017 	ldw	r2,-384(fp)
    3500:	10800017 	ldw	r2,0(r2)
    3504:	10800017 	ldw	r2,0(r2)
    3508:	103ff91e 	bne	r2,zero,34f0 <__alt_data_end+0xfc0034f0>
	//now current points to the second to last item of the list, so let's remove current->next
	free(current->next);
    350c:	e0bfa017 	ldw	r2,-384(fp)
    3510:	10800017 	ldw	r2,0(r2)
    3514:	1009883a 	mov	r4,r2
    3518:	00050340 	call	5034 <free>
	current->next = NULL;
    351c:	e0bfa017 	ldw	r2,-384(fp)
    3520:	10000015 	stw	zero,0(r2)

	#if DEBUG
		printf("S : final list:\n");
    3524:	010000b4 	movhi	r4,2
    3528:	21143e04 	addi	r4,r4,20728
    352c:	0005cf40 	call	5cf4 <puts>
		current = head;
    3530:	e0bf9f17 	ldw	r2,-388(fp)
    3534:	e0bfa015 	stw	r2,-384(fp)
		while(current != NULL)
    3538:	00001906 	br	35a0 <minimaxAlgorithm+0x6a8>
		{
			printf("score: %i\nrow: %i\nfield: %i\ndir: %i\nisCapture: %i\n\n",current->score,current->row,current->field,current->dir,current->isCapture);
    353c:	e0bfa017 	ldw	r2,-384(fp)
    3540:	11000117 	ldw	r4,4(r2)
    3544:	e0bfa017 	ldw	r2,-384(fp)
    3548:	10800203 	ldbu	r2,8(r2)
    354c:	11403fcc 	andi	r5,r2,255
    3550:	e0bfa017 	ldw	r2,-384(fp)
    3554:	10800243 	ldbu	r2,9(r2)
    3558:	11803fcc 	andi	r6,r2,255
    355c:	e0bfa017 	ldw	r2,-384(fp)
    3560:	10800283 	ldbu	r2,10(r2)
    3564:	10803fcc 	andi	r2,r2,255
    3568:	e0ffa017 	ldw	r3,-384(fp)
    356c:	18c002c3 	ldbu	r3,11(r3)
    3570:	18c03fcc 	andi	r3,r3,255
    3574:	d8c00115 	stw	r3,4(sp)
    3578:	d8800015 	stw	r2,0(sp)
    357c:	300f883a 	mov	r7,r6
    3580:	280d883a 	mov	r6,r5
    3584:	200b883a 	mov	r5,r4
    3588:	010000b4 	movhi	r4,2
    358c:	21144204 	addi	r4,r4,20744
    3590:	0005bd80 	call	5bd8 <printf>
			current = current->next;
    3594:	e0bfa017 	ldw	r2,-384(fp)
    3598:	10800017 	ldw	r2,0(r2)
    359c:	e0bfa015 	stw	r2,-384(fp)
	current->next = NULL;

	#if DEBUG
		printf("S : final list:\n");
		current = head;
		while(current != NULL)
    35a0:	e0bfa017 	ldw	r2,-384(fp)
    35a4:	103fe51e 	bne	r2,zero,353c <__alt_data_end+0xfc00353c>
			printf("score: %i\nrow: %i\nfield: %i\ndir: %i\nisCapture: %i\n\n",current->score,current->row,current->field,current->dir,current->isCapture);
			current = current->next;
		}
	#endif

	nodemove_t * bestMove = malloc(sizeof(nodemove_t));
    35a8:	01000404 	movi	r4,16
    35ac:	00050200 	call	5020 <malloc>
    35b0:	e0bfa815 	stw	r2,-352(fp)

	if(direction == FRIENDLYDIRECTION) bestMove->score = -1000;
    35b4:	e0bfff07 	ldb	r2,-4(fp)
    35b8:	10bfffd8 	cmpnei	r2,r2,-1
    35bc:	1000041e 	bne	r2,zero,35d0 <minimaxAlgorithm+0x6d8>
    35c0:	e0bfa817 	ldw	r2,-352(fp)
    35c4:	00ff0604 	movi	r3,-1000
    35c8:	10c00115 	stw	r3,4(r2)
    35cc:	00000306 	br	35dc <minimaxAlgorithm+0x6e4>
	else bestMove->score = 1000;
    35d0:	e0bfa817 	ldw	r2,-352(fp)
    35d4:	00c0fa04 	movi	r3,1000
    35d8:	10c00115 	stw	r3,4(r2)

	//if there are captures in the list, remove all non-captures
	int thereAreCaptures = 0;
    35dc:	e03fa915 	stw	zero,-348(fp)
	current = head;
    35e0:	e0bf9f17 	ldw	r2,-388(fp)
    35e4:	e0bfa015 	stw	r2,-384(fp)
	while(current != NULL)
    35e8:	00000a06 	br	3614 <minimaxAlgorithm+0x71c>
	{
		if(current->isCapture == 1) thereAreCaptures = 1;
    35ec:	e0bfa017 	ldw	r2,-384(fp)
    35f0:	108002c3 	ldbu	r2,11(r2)
    35f4:	10803fcc 	andi	r2,r2,255
    35f8:	10800058 	cmpnei	r2,r2,1
    35fc:	1000021e 	bne	r2,zero,3608 <minimaxAlgorithm+0x710>
    3600:	00800044 	movi	r2,1
    3604:	e0bfa915 	stw	r2,-348(fp)
		current = current->next;
    3608:	e0bfa017 	ldw	r2,-384(fp)
    360c:	10800017 	ldw	r2,0(r2)
    3610:	e0bfa015 	stw	r2,-384(fp)
	else bestMove->score = 1000;

	//if there are captures in the list, remove all non-captures
	int thereAreCaptures = 0;
	current = head;
	while(current != NULL)
    3614:	e0bfa017 	ldw	r2,-384(fp)
    3618:	103ff41e 	bne	r2,zero,35ec <__alt_data_end+0xfc0035ec>
		if(current->isCapture == 1) thereAreCaptures = 1;
		current = current->next;
	}

	//stuff to do if there are in fact captures in the list
	if(thereAreCaptures)
    361c:	e0bfa917 	ldw	r2,-348(fp)
    3620:	10004d26 	beq	r2,zero,3758 <minimaxAlgorithm+0x860>
	{
		#if DEBUG
			printf("S : it seems like there are captures in this list\n");
    3624:	010000b4 	movhi	r4,2
    3628:	21145b04 	addi	r4,r4,20844
    362c:	0005cf40 	call	5cf4 <puts>
		#endif

		//create captures linked list
		nodemove_t * capturesHead = malloc(sizeof(nodemove_t));
    3630:	01000404 	movi	r4,16
    3634:	00050200 	call	5020 <malloc>
    3638:	e0bfad15 	stw	r2,-332(fp)
		nodemove_t * capturesCurrent = malloc(sizeof(nodemove_t));
    363c:	01000404 	movi	r4,16
    3640:	00050200 	call	5020 <malloc>
    3644:	e0bfaa15 	stw	r2,-344(fp)
		capturesCurrent = capturesHead;
    3648:	e0bfad17 	ldw	r2,-332(fp)
    364c:	e0bfaa15 	stw	r2,-344(fp)

		//add all captures in the move list to the capture list
		current = head;
    3650:	e0bf9f17 	ldw	r2,-388(fp)
    3654:	e0bfa015 	stw	r2,-384(fp)
		while(current != NULL)
    3658:	00001006 	br	369c <minimaxAlgorithm+0x7a4>
		{
			if(current->isCapture)
    365c:	e0bfa017 	ldw	r2,-384(fp)
    3660:	108002c3 	ldbu	r2,11(r2)
    3664:	10803fcc 	andi	r2,r2,255
    3668:	10000926 	beq	r2,zero,3690 <minimaxAlgorithm+0x798>
			{
				capturesCurrent->next = current;
    366c:	e0bfaa17 	ldw	r2,-344(fp)
    3670:	e0ffa017 	ldw	r3,-384(fp)
    3674:	10c00015 	stw	r3,0(r2)
				capturesCurrent->next->next = NULL;
    3678:	e0bfaa17 	ldw	r2,-344(fp)
    367c:	10800017 	ldw	r2,0(r2)
    3680:	10000015 	stw	zero,0(r2)
				capturesCurrent = capturesCurrent->next;
    3684:	e0bfaa17 	ldw	r2,-344(fp)
    3688:	10800017 	ldw	r2,0(r2)
    368c:	e0bfaa15 	stw	r2,-344(fp)
			}
			current = current->next;
    3690:	e0bfa017 	ldw	r2,-384(fp)
    3694:	10800017 	ldw	r2,0(r2)
    3698:	e0bfa015 	stw	r2,-384(fp)
		nodemove_t * capturesCurrent = malloc(sizeof(nodemove_t));
		capturesCurrent = capturesHead;

		//add all captures in the move list to the capture list
		current = head;
		while(current != NULL)
    369c:	e0bfa017 	ldw	r2,-384(fp)
    36a0:	103fee1e 	bne	r2,zero,365c <__alt_data_end+0xfc00365c>
			}
			current = current->next;
		}

		//pop the first item and make the second one head
		nodemove_t * newHead = NULL;
    36a4:	e03fae15 	stw	zero,-328(fp)
		newHead = capturesHead->next;
    36a8:	e0bfad17 	ldw	r2,-332(fp)
    36ac:	10800017 	ldw	r2,0(r2)
    36b0:	e0bfae15 	stw	r2,-328(fp)
		free(capturesHead);
    36b4:	e13fad17 	ldw	r4,-332(fp)
    36b8:	00050340 	call	5034 <free>
		capturesHead = newHead;
    36bc:	e0bfae17 	ldw	r2,-328(fp)
    36c0:	e0bfad15 	stw	r2,-332(fp)

		//print the captures list
		#if DEBUG
			printf("S : captures list:\n");
    36c4:	010000b4 	movhi	r4,2
    36c8:	21146804 	addi	r4,r4,20896
    36cc:	0005cf40 	call	5cf4 <puts>
			capturesCurrent = capturesHead;
    36d0:	e0bfad17 	ldw	r2,-332(fp)
    36d4:	e0bfaa15 	stw	r2,-344(fp)
			while(capturesCurrent != NULL)
    36d8:	00001906 	br	3740 <minimaxAlgorithm+0x848>
			{
				printf("score: %i\nrow: %i\nfield: %i\ndir: %i\nisCapture: %i\n\n",capturesCurrent->score,capturesCurrent->row,capturesCurrent->field,capturesCurrent->dir,capturesCurrent->isCapture);
    36dc:	e0bfaa17 	ldw	r2,-344(fp)
    36e0:	11000117 	ldw	r4,4(r2)
    36e4:	e0bfaa17 	ldw	r2,-344(fp)
    36e8:	10800203 	ldbu	r2,8(r2)
    36ec:	11403fcc 	andi	r5,r2,255
    36f0:	e0bfaa17 	ldw	r2,-344(fp)
    36f4:	10800243 	ldbu	r2,9(r2)
    36f8:	11803fcc 	andi	r6,r2,255
    36fc:	e0bfaa17 	ldw	r2,-344(fp)
    3700:	10800283 	ldbu	r2,10(r2)
    3704:	10803fcc 	andi	r2,r2,255
    3708:	e0ffaa17 	ldw	r3,-344(fp)
    370c:	18c002c3 	ldbu	r3,11(r3)
    3710:	18c03fcc 	andi	r3,r3,255
    3714:	d8c00115 	stw	r3,4(sp)
    3718:	d8800015 	stw	r2,0(sp)
    371c:	300f883a 	mov	r7,r6
    3720:	280d883a 	mov	r6,r5
    3724:	200b883a 	mov	r5,r4
    3728:	010000b4 	movhi	r4,2
    372c:	21144204 	addi	r4,r4,20744
    3730:	0005bd80 	call	5bd8 <printf>
				capturesCurrent = capturesCurrent->next;
    3734:	e0bfaa17 	ldw	r2,-344(fp)
    3738:	10800017 	ldw	r2,0(r2)
    373c:	e0bfaa15 	stw	r2,-344(fp)

		//print the captures list
		#if DEBUG
			printf("S : captures list:\n");
			capturesCurrent = capturesHead;
			while(capturesCurrent != NULL)
    3740:	e0bfaa17 	ldw	r2,-344(fp)
    3744:	103fe51e 	bne	r2,zero,36dc <__alt_data_end+0xfc0036dc>
				capturesCurrent = capturesCurrent->next;
			}
		#endif

		//capture list becomes the normal list
		head = capturesHead;
    3748:	e0bfad17 	ldw	r2,-332(fp)
    374c:	e0bf9f15 	stw	r2,-388(fp)
		current = capturesCurrent;
    3750:	e0bfaa17 	ldw	r2,-344(fp)
    3754:	e0bfa015 	stw	r2,-384(fp)
			printf("S : done freeing\n");
		#endif
		*/
	}

	current = head;
    3758:	e0bf9f17 	ldw	r2,-388(fp)
    375c:	e0bfa015 	stw	r2,-384(fp)
	while(current != NULL)
    3760:	00004406 	br	3874 <minimaxAlgorithm+0x97c>
	{
		if(direction == FRIENDLYDIRECTION && current->score > bestMove->score && !(current->row == 0 && current->field == 0))
    3764:	e0bfff07 	ldb	r2,-4(fp)
    3768:	10bfffd8 	cmpnei	r2,r2,-1
    376c:	1000191e 	bne	r2,zero,37d4 <minimaxAlgorithm+0x8dc>
    3770:	e0bfa017 	ldw	r2,-384(fp)
    3774:	10800117 	ldw	r2,4(r2)
    3778:	e0ffa817 	ldw	r3,-352(fp)
    377c:	18c00117 	ldw	r3,4(r3)
    3780:	1880140e 	bge	r3,r2,37d4 <minimaxAlgorithm+0x8dc>
    3784:	e0bfa017 	ldw	r2,-384(fp)
    3788:	10800203 	ldbu	r2,8(r2)
    378c:	10803fcc 	andi	r2,r2,255
    3790:	1000041e 	bne	r2,zero,37a4 <minimaxAlgorithm+0x8ac>
    3794:	e0bfa017 	ldw	r2,-384(fp)
    3798:	10800243 	ldbu	r2,9(r2)
    379c:	10803fcc 	andi	r2,r2,255
    37a0:	10000c26 	beq	r2,zero,37d4 <minimaxAlgorithm+0x8dc>
		{
			#if DEBUG
				printf("S : score %i is bigger than best score %i, overwriting\n",current->score,bestMove->score);
    37a4:	e0bfa017 	ldw	r2,-384(fp)
    37a8:	10c00117 	ldw	r3,4(r2)
    37ac:	e0bfa817 	ldw	r2,-352(fp)
    37b0:	10800117 	ldw	r2,4(r2)
    37b4:	100d883a 	mov	r6,r2
    37b8:	180b883a 	mov	r5,r3
    37bc:	010000b4 	movhi	r4,2
    37c0:	21146d04 	addi	r4,r4,20916
    37c4:	0005bd80 	call	5bd8 <printf>
			#endif
			bestMove = current;
    37c8:	e0bfa017 	ldw	r2,-384(fp)
    37cc:	e0bfa815 	stw	r2,-352(fp)
    37d0:	00002506 	br	3868 <minimaxAlgorithm+0x970>
		}
		else if(direction == ENEMYDIRECTION && current->score < bestMove->score && !(current->row == 0 && current->field == 0))
    37d4:	e0bfff07 	ldb	r2,-4(fp)
    37d8:	10800058 	cmpnei	r2,r2,1
    37dc:	1000191e 	bne	r2,zero,3844 <minimaxAlgorithm+0x94c>
    37e0:	e0bfa017 	ldw	r2,-384(fp)
    37e4:	10c00117 	ldw	r3,4(r2)
    37e8:	e0bfa817 	ldw	r2,-352(fp)
    37ec:	10800117 	ldw	r2,4(r2)
    37f0:	1880140e 	bge	r3,r2,3844 <minimaxAlgorithm+0x94c>
    37f4:	e0bfa017 	ldw	r2,-384(fp)
    37f8:	10800203 	ldbu	r2,8(r2)
    37fc:	10803fcc 	andi	r2,r2,255
    3800:	1000041e 	bne	r2,zero,3814 <minimaxAlgorithm+0x91c>
    3804:	e0bfa017 	ldw	r2,-384(fp)
    3808:	10800243 	ldbu	r2,9(r2)
    380c:	10803fcc 	andi	r2,r2,255
    3810:	10000c26 	beq	r2,zero,3844 <minimaxAlgorithm+0x94c>
		{
			#if DEBUG
				printf("S : score %i is smaller than best score %i, overwriting\n",current->score,bestMove->score);
    3814:	e0bfa017 	ldw	r2,-384(fp)
    3818:	10c00117 	ldw	r3,4(r2)
    381c:	e0bfa817 	ldw	r2,-352(fp)
    3820:	10800117 	ldw	r2,4(r2)
    3824:	100d883a 	mov	r6,r2
    3828:	180b883a 	mov	r5,r3
    382c:	010000b4 	movhi	r4,2
    3830:	21147b04 	addi	r4,r4,20972
    3834:	0005bd80 	call	5bd8 <printf>
			#endif
			bestMove = current;
    3838:	e0bfa017 	ldw	r2,-384(fp)
    383c:	e0bfa815 	stw	r2,-352(fp)
    3840:	00000906 	br	3868 <minimaxAlgorithm+0x970>
		}
		#if DEBUG
			else printf("S : score %i is not better than best score %i, not overwriting\n",current->score,bestMove->score);
    3844:	e0bfa017 	ldw	r2,-384(fp)
    3848:	10c00117 	ldw	r3,4(r2)
    384c:	e0bfa817 	ldw	r2,-352(fp)
    3850:	10800117 	ldw	r2,4(r2)
    3854:	100d883a 	mov	r6,r2
    3858:	180b883a 	mov	r5,r3
    385c:	010000b4 	movhi	r4,2
    3860:	21148a04 	addi	r4,r4,21032
    3864:	0005bd80 	call	5bd8 <printf>
		#endif

		current = current->next;
    3868:	e0bfa017 	ldw	r2,-384(fp)
    386c:	10800017 	ldw	r2,0(r2)
    3870:	e0bfa015 	stw	r2,-384(fp)
		#endif
		*/
	}

	current = head;
	while(current != NULL)
    3874:	e0bfa017 	ldw	r2,-384(fp)
    3878:	103fba1e 	bne	r2,zero,3764 <__alt_data_end+0xfc003764>

		current = current->next;
	}

	#if DEBUG
		printf("S : bestMove\nscore: %i\nrow: %i\nfield: %i\ndir: %i\nisCapture: %i\n\n",bestMove->score,bestMove->row,bestMove->field,bestMove->dir,bestMove->isCapture);
    387c:	e0bfa817 	ldw	r2,-352(fp)
    3880:	11000117 	ldw	r4,4(r2)
    3884:	e0bfa817 	ldw	r2,-352(fp)
    3888:	10800203 	ldbu	r2,8(r2)
    388c:	11403fcc 	andi	r5,r2,255
    3890:	e0bfa817 	ldw	r2,-352(fp)
    3894:	10800243 	ldbu	r2,9(r2)
    3898:	11803fcc 	andi	r6,r2,255
    389c:	e0bfa817 	ldw	r2,-352(fp)
    38a0:	10800283 	ldbu	r2,10(r2)
    38a4:	10803fcc 	andi	r2,r2,255
    38a8:	e0ffa817 	ldw	r3,-352(fp)
    38ac:	18c002c3 	ldbu	r3,11(r3)
    38b0:	18c03fcc 	andi	r3,r3,255
    38b4:	d8c00115 	stw	r3,4(sp)
    38b8:	d8800015 	stw	r2,0(sp)
    38bc:	300f883a 	mov	r7,r6
    38c0:	280d883a 	mov	r6,r5
    38c4:	200b883a 	mov	r5,r4
    38c8:	010000b4 	movhi	r4,2
    38cc:	21149a04 	addi	r4,r4,21096
    38d0:	0005bd80 	call	5bd8 <printf>
	#endif

	if(bestMove->isCapture == 1)
    38d4:	e0bfa817 	ldw	r2,-352(fp)
    38d8:	108002c3 	ldbu	r2,11(r2)
    38dc:	10803fcc 	andi	r2,r2,255
    38e0:	10800058 	cmpnei	r2,r2,1
    38e4:	1000111e 	bne	r2,zero,392c <minimaxAlgorithm+0xa34>
	{
		//if(board[bestMove->row][bestMove->field] == friendly)
			manCapture((unsigned char **)board, bestMove->row, bestMove->field, friendly, friendlyKing, enemy, enemyKing);
    38e8:	e0bfa817 	ldw	r2,-352(fp)
    38ec:	10800203 	ldbu	r2,8(r2)
    38f0:	11403fcc 	andi	r5,r2,255
    38f4:	e0bfa817 	ldw	r2,-352(fp)
    38f8:	10800243 	ldbu	r2,9(r2)
    38fc:	11803fcc 	andi	r6,r2,255
    3900:	e1fffb03 	ldbu	r7,-20(fp)
    3904:	e0bffc03 	ldbu	r2,-16(fp)
    3908:	e0fffd03 	ldbu	r3,-12(fp)
    390c:	e13ffe03 	ldbu	r4,-8(fp)
    3910:	d9000215 	stw	r4,8(sp)
    3914:	d8c00115 	stw	r3,4(sp)
    3918:	d8800015 	stw	r2,0(sp)
    391c:	010000f4 	movhi	r4,3
    3920:	21253804 	addi	r4,r4,-27424
    3924:	00013700 	call	1370 <manCapture>
    3928:	00001806 	br	398c <minimaxAlgorithm+0xa94>
		}
		*/
	}
	else
	{
		move((unsigned char **)board, bestMove->row, bestMove->field, bestMove->dir, friendly, friendlyKing, enemy, enemyKing, direction);
    392c:	e0bfa817 	ldw	r2,-352(fp)
    3930:	10800203 	ldbu	r2,8(r2)
    3934:	12003fcc 	andi	r8,r2,255
    3938:	e0bfa817 	ldw	r2,-352(fp)
    393c:	10800243 	ldbu	r2,9(r2)
    3940:	12403fcc 	andi	r9,r2,255
    3944:	e0bfa817 	ldw	r2,-352(fp)
    3948:	10800283 	ldbu	r2,10(r2)
    394c:	11c03fcc 	andi	r7,r2,255
    3950:	e0bffb03 	ldbu	r2,-20(fp)
    3954:	e0fffc03 	ldbu	r3,-16(fp)
    3958:	e13ffd03 	ldbu	r4,-12(fp)
    395c:	e17ffe03 	ldbu	r5,-8(fp)
    3960:	e1bfff07 	ldb	r6,-4(fp)
    3964:	d9800415 	stw	r6,16(sp)
    3968:	d9400315 	stw	r5,12(sp)
    396c:	d9000215 	stw	r4,8(sp)
    3970:	d8c00115 	stw	r3,4(sp)
    3974:	d8800015 	stw	r2,0(sp)
    3978:	480d883a 	mov	r6,r9
    397c:	400b883a 	mov	r5,r8
    3980:	010000f4 	movhi	r4,3
    3984:	21253804 	addi	r4,r4,-27424
    3988:	00022b40 	call	22b4 <move>
	}

	//TODO: make this look prettier?
	printBoard((unsigned char **)board, bestMove->row, bestMove->field,100,100);
    398c:	e0bfa817 	ldw	r2,-352(fp)
    3990:	10800203 	ldbu	r2,8(r2)
    3994:	10c03fcc 	andi	r3,r2,255
    3998:	e0bfa817 	ldw	r2,-352(fp)
    399c:	10800243 	ldbu	r2,9(r2)
    39a0:	11003fcc 	andi	r4,r2,255
    39a4:	00801904 	movi	r2,100
    39a8:	d8800015 	stw	r2,0(sp)
    39ac:	01c01904 	movi	r7,100
    39b0:	200d883a 	mov	r6,r4
    39b4:	180b883a 	mov	r5,r3
    39b8:	010000f4 	movhi	r4,3
    39bc:	21253804 	addi	r4,r4,-27424
    39c0:	00004bc0 	call	4bc <printBoard>
	#if DEBUG
		printf("S : done freeing\n");
	#endif
	*/

	return 1;
    39c4:	00800044 	movi	r2,1
}
    39c8:	e037883a 	mov	sp,fp
    39cc:	dfc00117 	ldw	ra,4(sp)
    39d0:	df000017 	ldw	fp,0(sp)
    39d4:	dec00204 	addi	sp,sp,8
    39d8:	f800283a 	ret

000039dc <algorithm>:

//Oude algoritme. Plan B als minimax aan het eind helemaal ontploft
unsigned char algorithm(unsigned char friendly, unsigned char friendlyKing, unsigned char enemy, unsigned char enemyKing, signed char direction){
    39dc:	defff304 	addi	sp,sp,-52
    39e0:	dfc00c15 	stw	ra,48(sp)
    39e4:	df000b15 	stw	fp,44(sp)
    39e8:	df000b04 	addi	fp,sp,44
    39ec:	2011883a 	mov	r8,r4
    39f0:	3009883a 	mov	r4,r6
    39f4:	3807883a 	mov	r3,r7
    39f8:	e0800217 	ldw	r2,8(fp)
    39fc:	e23ffb05 	stb	r8,-20(fp)
    3a00:	e17ffc05 	stb	r5,-16(fp)
    3a04:	e13ffd05 	stb	r4,-12(fp)
    3a08:	e0fffe05 	stb	r3,-8(fp)
    3a0c:	e0bfff05 	stb	r2,-4(fp)
	unsigned char captured = 0;
    3a10:	e03ff905 	stb	zero,-28(fp)
	unsigned char moved = 0;
    3a14:	e03ff945 	stb	zero,-27(fp)
	unsigned char couldNotCapture = 0;
    3a18:	e03ff985 	stb	zero,-26(fp)
	unsigned char couldNotMove = 0;
    3a1c:	e03ff9c5 	stb	zero,-25(fp)

	while(couldNotMove == 0){
    3a20:	00005806 	br	3b84 <algorithm+0x1a8>
		for(unsigned char row = 0; row < 10; row++){
    3a24:	e03ffa05 	stb	zero,-24(fp)
    3a28:	00004106 	br	3b30 <algorithm+0x154>
		//	printf("friest for\n");
			for(unsigned char field = 0; field < 10; field++){
    3a2c:	e03ffa45 	stb	zero,-23(fp)
    3a30:	00003906 	br	3b18 <algorithm+0x13c>
			//	printf("friendly check\n");
				// piece check if a piece can capture
				if(board[row][field] == friendly){
    3a34:	e13ffa03 	ldbu	r4,-24(fp)
    3a38:	e0fffa43 	ldbu	r3,-23(fp)
    3a3c:	008000f4 	movhi	r2,3
    3a40:	10a53804 	addi	r2,r2,-27424
    3a44:	210002a4 	muli	r4,r4,10
    3a48:	1105883a 	add	r2,r2,r4
    3a4c:	10c5883a 	add	r2,r2,r3
    3a50:	10800003 	ldbu	r2,0(r2)
    3a54:	10c03fcc 	andi	r3,r2,255
    3a58:	e0bffb03 	ldbu	r2,-20(fp)
    3a5c:	18802b1e 	bne	r3,r2,3b0c <algorithm+0x130>
				//	printf("friendly\n");
					if(couldNotCapture == 0){
    3a60:	e0bff983 	ldbu	r2,-26(fp)
    3a64:	10000e1e 	bne	r2,zero,3aa0 <algorithm+0xc4>
						captured = manCapture((unsigned char **)board, row, field, friendly, friendlyKing, enemy, enemyKing);
    3a68:	e17ffa03 	ldbu	r5,-24(fp)
    3a6c:	e1bffa43 	ldbu	r6,-23(fp)
    3a70:	e1fffb03 	ldbu	r7,-20(fp)
    3a74:	e0bffc03 	ldbu	r2,-16(fp)
    3a78:	e0fffd03 	ldbu	r3,-12(fp)
    3a7c:	e13ffe03 	ldbu	r4,-8(fp)
    3a80:	d9000215 	stw	r4,8(sp)
    3a84:	d8c00115 	stw	r3,4(sp)
    3a88:	d8800015 	stw	r2,0(sp)
    3a8c:	010000f4 	movhi	r4,3
    3a90:	21253804 	addi	r4,r4,-27424
    3a94:	00013700 	call	1370 <manCapture>
    3a98:	e0bff905 	stb	r2,-28(fp)
    3a9c:	00001006 	br	3ae0 <algorithm+0x104>
					}else{
						moved = manMove((unsigned char **)board, row, field, friendly, friendlyKing, enemy, enemyKing, direction);
    3aa0:	e23ffa03 	ldbu	r8,-24(fp)
    3aa4:	e1bffa43 	ldbu	r6,-23(fp)
    3aa8:	e1fffb03 	ldbu	r7,-20(fp)
    3aac:	e0bffc03 	ldbu	r2,-16(fp)
    3ab0:	e0fffd03 	ldbu	r3,-12(fp)
    3ab4:	e13ffe03 	ldbu	r4,-8(fp)
    3ab8:	e17fff07 	ldb	r5,-4(fp)
    3abc:	d9400315 	stw	r5,12(sp)
    3ac0:	d9000215 	stw	r4,8(sp)
    3ac4:	d8c00115 	stw	r3,4(sp)
    3ac8:	d8800015 	stw	r2,0(sp)
    3acc:	400b883a 	mov	r5,r8
    3ad0:	010000f4 	movhi	r4,3
    3ad4:	21253804 	addi	r4,r4,-27424
    3ad8:	00016780 	call	1678 <manMove>
    3adc:	e0bff945 	stb	r2,-27(fp)
					}

					if(moved == 1 || captured == 1){
    3ae0:	e0bff943 	ldbu	r2,-27(fp)
    3ae4:	10800060 	cmpeqi	r2,r2,1
    3ae8:	1000031e 	bne	r2,zero,3af8 <algorithm+0x11c>
    3aec:	e0bff903 	ldbu	r2,-28(fp)
    3af0:	10800058 	cmpnei	r2,r2,1
    3af4:	1000051e 	bne	r2,zero,3b0c <algorithm+0x130>
						#if DEBUG
							printf("moved or captured\n");
    3af8:	010000b4 	movhi	r4,2
    3afc:	2114ab04 	addi	r4,r4,21164
    3b00:	0005cf40 	call	5cf4 <puts>
						#endif
						return 1;
    3b04:	00800044 	movi	r2,1
    3b08:	00002106 	br	3b90 <algorithm+0x1b4>
	unsigned char couldNotMove = 0;

	while(couldNotMove == 0){
		for(unsigned char row = 0; row < 10; row++){
		//	printf("friest for\n");
			for(unsigned char field = 0; field < 10; field++){
    3b0c:	e0bffa43 	ldbu	r2,-23(fp)
    3b10:	10800044 	addi	r2,r2,1
    3b14:	e0bffa45 	stb	r2,-23(fp)
    3b18:	e0bffa43 	ldbu	r2,-23(fp)
    3b1c:	108002b0 	cmpltui	r2,r2,10
    3b20:	103fc41e 	bne	r2,zero,3a34 <__alt_data_end+0xfc003a34>
	unsigned char moved = 0;
	unsigned char couldNotCapture = 0;
	unsigned char couldNotMove = 0;

	while(couldNotMove == 0){
		for(unsigned char row = 0; row < 10; row++){
    3b24:	e0bffa03 	ldbu	r2,-24(fp)
    3b28:	10800044 	addi	r2,r2,1
    3b2c:	e0bffa05 	stb	r2,-24(fp)
    3b30:	e0bffa03 	ldbu	r2,-24(fp)
    3b34:	108002b0 	cmpltui	r2,r2,10
    3b38:	103fbc1e 	bne	r2,zero,3a2c <__alt_data_end+0xfc003a2c>
						return 1;
					}
				}
			}
		}
		if(couldNotCapture == 1 && moved == 0){
    3b3c:	e0bff983 	ldbu	r2,-26(fp)
    3b40:	10800058 	cmpnei	r2,r2,1
    3b44:	1000081e 	bne	r2,zero,3b68 <algorithm+0x18c>
    3b48:	e0bff943 	ldbu	r2,-27(fp)
    3b4c:	1000061e 	bne	r2,zero,3b68 <algorithm+0x18c>
			couldNotMove = 1;
    3b50:	00800044 	movi	r2,1
    3b54:	e0bff9c5 	stb	r2,-25(fp)
			#if DEBUG
				printf("could not move\n");
    3b58:	010000b4 	movhi	r4,2
    3b5c:	2114b004 	addi	r4,r4,21184
    3b60:	0005cf40 	call	5cf4 <puts>
    3b64:	00000706 	br	3b84 <algorithm+0x1a8>
			#endif
		}else if(captured == 0){
    3b68:	e0bff903 	ldbu	r2,-28(fp)
    3b6c:	1000051e 	bne	r2,zero,3b84 <algorithm+0x1a8>
			couldNotCapture = 1;
    3b70:	00800044 	movi	r2,1
    3b74:	e0bff985 	stb	r2,-26(fp)
			#if DEBUG
				printf("could not capture\n");
    3b78:	010000b4 	movhi	r4,2
    3b7c:	2114b404 	addi	r4,r4,21200
    3b80:	0005cf40 	call	5cf4 <puts>
	unsigned char captured = 0;
	unsigned char moved = 0;
	unsigned char couldNotCapture = 0;
	unsigned char couldNotMove = 0;

	while(couldNotMove == 0){
    3b84:	e0bff9c3 	ldbu	r2,-25(fp)
    3b88:	103fa626 	beq	r2,zero,3a24 <__alt_data_end+0xfc003a24>
			#if DEBUG
				printf("could not capture\n");
			#endif
		}
	}
	return 0;
    3b8c:	0005883a 	mov	r2,zero
}
    3b90:	e037883a 	mov	sp,fp
    3b94:	dfc00117 	ldw	ra,4(sp)
    3b98:	df000017 	ldw	fp,0(sp)
    3b9c:	dec00204 	addi	sp,sp,8
    3ba0:	f800283a 	ret

00003ba4 <playerInput>:

unsigned char playerInput()
{
    3ba4:	deffd704 	addi	sp,sp,-164
    3ba8:	dfc02815 	stw	ra,160(sp)
    3bac:	df002715 	stw	fp,156(sp)
    3bb0:	df002704 	addi	fp,sp,156
	int stuffToDo = 0;
    3bb4:	e03fde15 	stw	zero,-136(fp)

	//Check if we can capture, capture and check if we can still make moves all in one loop :)
	for(int row = 0; row < 10; row++)
    3bb8:	e03fdf15 	stw	zero,-132(fp)
    3bbc:	00004006 	br	3cc0 <playerInput+0x11c>
	{
		for(int field = 0; field < 10; field++)
    3bc0:	e03fe015 	stw	zero,-128(fp)
    3bc4:	00003806 	br	3ca8 <playerInput+0x104>
		{
			if(board[row][field] == FRIENDLY)
    3bc8:	008000f4 	movhi	r2,3
    3bcc:	10a53804 	addi	r2,r2,-27424
    3bd0:	e0ffdf17 	ldw	r3,-132(fp)
    3bd4:	18c002a4 	muli	r3,r3,10
    3bd8:	10c7883a 	add	r3,r2,r3
    3bdc:	e0bfe017 	ldw	r2,-128(fp)
    3be0:	1885883a 	add	r2,r3,r2
    3be4:	10800003 	ldbu	r2,0(r2)
    3be8:	10803fcc 	andi	r2,r2,255
    3bec:	10800098 	cmpnei	r2,r2,2
    3bf0:	1000161e 	bne	r2,zero,3c4c <playerInput+0xa8>
			{
				stuffToDo = 1;
    3bf4:	00800044 	movi	r2,1
    3bf8:	e0bfde15 	stw	r2,-136(fp)
				if(manCapture((unsigned char **)board, row, field, FRIENDLY, FRIENDLYKING, ENEMY, ENEMYKING)) return 1;
    3bfc:	e0bfdf17 	ldw	r2,-132(fp)
    3c00:	10c03fcc 	andi	r3,r2,255
    3c04:	e0bfe017 	ldw	r2,-128(fp)
    3c08:	11003fcc 	andi	r4,r2,255
    3c0c:	00800144 	movi	r2,5
    3c10:	d8800215 	stw	r2,8(sp)
    3c14:	00800104 	movi	r2,4
    3c18:	d8800115 	stw	r2,4(sp)
    3c1c:	008000c4 	movi	r2,3
    3c20:	d8800015 	stw	r2,0(sp)
    3c24:	01c00084 	movi	r7,2
    3c28:	200d883a 	mov	r6,r4
    3c2c:	180b883a 	mov	r5,r3
    3c30:	010000f4 	movhi	r4,3
    3c34:	21253804 	addi	r4,r4,-27424
    3c38:	00013700 	call	1370 <manCapture>
    3c3c:	10803fcc 	andi	r2,r2,255
    3c40:	10001626 	beq	r2,zero,3c9c <playerInput+0xf8>
    3c44:	00800044 	movi	r2,1
    3c48:	0000fa06 	br	4034 <playerInput+0x490>
			}
			else if(board[row][field] == FRIENDLYKING)
    3c4c:	008000f4 	movhi	r2,3
    3c50:	10a53804 	addi	r2,r2,-27424
    3c54:	e0ffdf17 	ldw	r3,-132(fp)
    3c58:	18c002a4 	muli	r3,r3,10
    3c5c:	10c7883a 	add	r3,r2,r3
    3c60:	e0bfe017 	ldw	r2,-128(fp)
    3c64:	1885883a 	add	r2,r3,r2
    3c68:	10800003 	ldbu	r2,0(r2)
    3c6c:	10803fcc 	andi	r2,r2,255
    3c70:	108000d8 	cmpnei	r2,r2,3
    3c74:	1000091e 	bne	r2,zero,3c9c <playerInput+0xf8>
			{
				stuffToDo = 1;
    3c78:	00800044 	movi	r2,1
    3c7c:	e0bfde15 	stw	r2,-136(fp)
				if(capture(row, field, 1)) return 1;
    3c80:	01800044 	movi	r6,1
    3c84:	e17fe017 	ldw	r5,-128(fp)
    3c88:	e13fdf17 	ldw	r4,-132(fp)
    3c8c:	0001bb00 	call	1bb0 <capture>
    3c90:	10000226 	beq	r2,zero,3c9c <playerInput+0xf8>
    3c94:	00800044 	movi	r2,1
    3c98:	0000e606 	br	4034 <playerInput+0x490>
	int stuffToDo = 0;

	//Check if we can capture, capture and check if we can still make moves all in one loop :)
	for(int row = 0; row < 10; row++)
	{
		for(int field = 0; field < 10; field++)
    3c9c:	e0bfe017 	ldw	r2,-128(fp)
    3ca0:	10800044 	addi	r2,r2,1
    3ca4:	e0bfe015 	stw	r2,-128(fp)
    3ca8:	e0bfe017 	ldw	r2,-128(fp)
    3cac:	10800290 	cmplti	r2,r2,10
    3cb0:	103fc51e 	bne	r2,zero,3bc8 <__alt_data_end+0xfc003bc8>
unsigned char playerInput()
{
	int stuffToDo = 0;

	//Check if we can capture, capture and check if we can still make moves all in one loop :)
	for(int row = 0; row < 10; row++)
    3cb4:	e0bfdf17 	ldw	r2,-132(fp)
    3cb8:	10800044 	addi	r2,r2,1
    3cbc:	e0bfdf15 	stw	r2,-132(fp)
    3cc0:	e0bfdf17 	ldw	r2,-132(fp)
    3cc4:	10800290 	cmplti	r2,r2,10
    3cc8:	103fbd1e 	bne	r2,zero,3bc0 <__alt_data_end+0xfc003bc0>
				if(capture(row, field, 1)) return 1;
			}
		}
	}

	createKing((unsigned char **)board);
    3ccc:	010000f4 	movhi	r4,3
    3cd0:	21253804 	addi	r4,r4,-27424
    3cd4:	00025740 	call	2574 <createKing>

	//If there are no friendly units on the board, return 0, which will end the game.
	if(!stuffToDo) return 0;
    3cd8:	e0bfde17 	ldw	r2,-136(fp)
    3cdc:	1000021e 	bne	r2,zero,3ce8 <playerInput+0x144>
    3ce0:	0005883a 	mov	r2,zero
    3ce4:	0000d306 	br	4034 <playerInput+0x490>

	int pRow = -1;
    3ce8:	00bfffc4 	movi	r2,-1
    3cec:	e0bfe115 	stw	r2,-124(fp)
	int pField = -1;
    3cf0:	00bfffc4 	movi	r2,-1
    3cf4:	e0bfe215 	stw	r2,-120(fp)

	printf("Row to select: ");
    3cf8:	010000b4 	movhi	r4,2
    3cfc:	2114b904 	addi	r4,r4,21220
    3d00:	0005bd80 	call	5bd8 <printf>

	char *p, s[100];
    	while (fgets(s, sizeof(s), stdin)) {
    3d04:	00001406 	br	3d58 <playerInput+0x1b4>
    	    pRow = strtol(s, &p, 10);
    3d08:	e0ffe504 	addi	r3,fp,-108
    3d0c:	e0bfe604 	addi	r2,fp,-104
    3d10:	01800284 	movi	r6,10
    3d14:	180b883a 	mov	r5,r3
    3d18:	1009883a 	mov	r4,r2
    3d1c:	00069400 	call	6940 <strtol>
    3d20:	e0bfe115 	stw	r2,-124(fp)
    	    if (p == s || *p != '\n') {
    3d24:	e0ffe517 	ldw	r3,-108(fp)
    3d28:	e0bfe604 	addi	r2,fp,-104
    3d2c:	18800726 	beq	r3,r2,3d4c <playerInput+0x1a8>
    3d30:	e0bfe517 	ldw	r2,-108(fp)
    3d34:	10800003 	ldbu	r2,0(r2)
    3d38:	10803fcc 	andi	r2,r2,255
    3d3c:	1080201c 	xori	r2,r2,128
    3d40:	10bfe004 	addi	r2,r2,-128
    3d44:	108002a0 	cmpeqi	r2,r2,10
    3d48:	10000b1e 	bne	r2,zero,3d78 <playerInput+0x1d4>
    	        printf("Please enter a number: ");
    3d4c:	010000b4 	movhi	r4,2
    3d50:	2114bd04 	addi	r4,r4,21236
    3d54:	0005bd80 	call	5bd8 <printf>
	int pField = -1;

	printf("Row to select: ");

	char *p, s[100];
    	while (fgets(s, sizeof(s), stdin)) {
    3d58:	d0a00117 	ldw	r2,-32764(gp)
    3d5c:	10c00117 	ldw	r3,4(r2)
    3d60:	e0bfe604 	addi	r2,fp,-104
    3d64:	180d883a 	mov	r6,r3
    3d68:	01401904 	movi	r5,100
    3d6c:	1009883a 	mov	r4,r2
    3d70:	0004adc0 	call	4adc <fgets>
    3d74:	103fe41e 	bne	r2,zero,3d08 <__alt_data_end+0xfc003d08>
    	    if (p == s || *p != '\n') {
    	        printf("Please enter a number: ");
    	    } else break;
    	}

    	if(pRow < 0 || pRow > 9){
    3d78:	e0bfe117 	ldw	r2,-124(fp)
    3d7c:	10000316 	blt	r2,zero,3d8c <playerInput+0x1e8>
    3d80:	e0bfe117 	ldw	r2,-124(fp)
    3d84:	10800290 	cmplti	r2,r2,10
    3d88:	1000051e 	bne	r2,zero,3da0 <playerInput+0x1fc>

    		printf("Invalid number, try again\n");
    3d8c:	010000b4 	movhi	r4,2
    3d90:	2114c304 	addi	r4,r4,21260
    3d94:	0005cf40 	call	5cf4 <puts>
    		return playerInput();
    3d98:	0003ba40 	call	3ba4 <playerInput>
    3d9c:	0000a506 	br	4034 <playerInput+0x490>
    	}

	printf("Field to select: ");
    3da0:	010000b4 	movhi	r4,2
    3da4:	2114ca04 	addi	r4,r4,21288
    3da8:	0005bd80 	call	5bd8 <printf>

    	while (fgets(s, sizeof(s), stdin)) {
    3dac:	00001406 	br	3e00 <playerInput+0x25c>
    	    pField = strtol(s, &p, 10);
    3db0:	e0ffe504 	addi	r3,fp,-108
    3db4:	e0bfe604 	addi	r2,fp,-104
    3db8:	01800284 	movi	r6,10
    3dbc:	180b883a 	mov	r5,r3
    3dc0:	1009883a 	mov	r4,r2
    3dc4:	00069400 	call	6940 <strtol>
    3dc8:	e0bfe215 	stw	r2,-120(fp)
    	    if (p == s || *p != '\n') {
    3dcc:	e0ffe517 	ldw	r3,-108(fp)
    3dd0:	e0bfe604 	addi	r2,fp,-104
    3dd4:	18800726 	beq	r3,r2,3df4 <playerInput+0x250>
    3dd8:	e0bfe517 	ldw	r2,-108(fp)
    3ddc:	10800003 	ldbu	r2,0(r2)
    3de0:	10803fcc 	andi	r2,r2,255
    3de4:	1080201c 	xori	r2,r2,128
    3de8:	10bfe004 	addi	r2,r2,-128
    3dec:	108002a0 	cmpeqi	r2,r2,10
    3df0:	10000b1e 	bne	r2,zero,3e20 <playerInput+0x27c>
    	        printf("Please enter a number: ");
    3df4:	010000b4 	movhi	r4,2
    3df8:	2114bd04 	addi	r4,r4,21236
    3dfc:	0005bd80 	call	5bd8 <printf>
    		return playerInput();
    	}

	printf("Field to select: ");

    	while (fgets(s, sizeof(s), stdin)) {
    3e00:	d0a00117 	ldw	r2,-32764(gp)
    3e04:	10c00117 	ldw	r3,4(r2)
    3e08:	e0bfe604 	addi	r2,fp,-104
    3e0c:	180d883a 	mov	r6,r3
    3e10:	01401904 	movi	r5,100
    3e14:	1009883a 	mov	r4,r2
    3e18:	0004adc0 	call	4adc <fgets>
    3e1c:	103fe41e 	bne	r2,zero,3db0 <__alt_data_end+0xfc003db0>
    	    if (p == s || *p != '\n') {
    	        printf("Please enter a number: ");
    	    } else break;
    	}

    	if(pField < 0 || pField > 9){
    3e20:	e0bfe217 	ldw	r2,-120(fp)
    3e24:	10000316 	blt	r2,zero,3e34 <playerInput+0x290>
    3e28:	e0bfe217 	ldw	r2,-120(fp)
    3e2c:	10800290 	cmplti	r2,r2,10
    3e30:	1000051e 	bne	r2,zero,3e48 <playerInput+0x2a4>

    		printf("Invalid number, try again\n");
    3e34:	010000b4 	movhi	r4,2
    3e38:	2114c304 	addi	r4,r4,21260
    3e3c:	0005cf40 	call	5cf4 <puts>
    		return playerInput();
    3e40:	0003ba40 	call	3ba4 <playerInput>
    3e44:	00007b06 	br	4034 <playerInput+0x490>
    	}

	int stone = board[pRow][pField];
    3e48:	008000f4 	movhi	r2,3
    3e4c:	10a53804 	addi	r2,r2,-27424
    3e50:	e0ffe117 	ldw	r3,-124(fp)
    3e54:	18c002a4 	muli	r3,r3,10
    3e58:	10c7883a 	add	r3,r2,r3
    3e5c:	e0bfe217 	ldw	r2,-120(fp)
    3e60:	1885883a 	add	r2,r3,r2
    3e64:	10800003 	ldbu	r2,0(r2)
    3e68:	10803fcc 	andi	r2,r2,255
    3e6c:	e0bfe315 	stw	r2,-116(fp)

	if(stone == FRIENDLY || stone == FRIENDLYKING){
    3e70:	e0bfe317 	ldw	r2,-116(fp)
    3e74:	108000a0 	cmpeqi	r2,r2,2
    3e78:	1000031e 	bne	r2,zero,3e88 <playerInput+0x2e4>
    3e7c:	e0bfe317 	ldw	r2,-116(fp)
    3e80:	108000d8 	cmpnei	r2,r2,3
    3e84:	1000671e 	bne	r2,zero,4024 <playerInput+0x480>

		int isKing;
		if(stone == FRIENDLYKING) isKing = 1;
    3e88:	e0bfe317 	ldw	r2,-116(fp)
    3e8c:	108000d8 	cmpnei	r2,r2,3
    3e90:	1000031e 	bne	r2,zero,3ea0 <playerInput+0x2fc>
    3e94:	00800044 	movi	r2,1
    3e98:	e0bfe415 	stw	r2,-112(fp)
    3e9c:	00000106 	br	3ea4 <playerInput+0x300>
		else isKing = 0;
    3ea0:	e03fe415 	stw	zero,-112(fp)

		printf("\n1   2\n");
    3ea4:	010000b4 	movhi	r4,2
    3ea8:	2114cf04 	addi	r4,r4,21308
    3eac:	0005cf40 	call	5cf4 <puts>
		printf(" \\ /\n");
    3eb0:	010000b4 	movhi	r4,2
    3eb4:	2114d104 	addi	r4,r4,21316
    3eb8:	0005cf40 	call	5cf4 <puts>
		printf("  x\n");
    3ebc:	010000b4 	movhi	r4,2
    3ec0:	2114d304 	addi	r4,r4,21324
    3ec4:	0005cf40 	call	5cf4 <puts>
		printf(" / \\ \n");
    3ec8:	010000b4 	movhi	r4,2
    3ecc:	2114d404 	addi	r4,r4,21328
    3ed0:	0005cf40 	call	5cf4 <puts>
		printf("3   4\n\n");
    3ed4:	010000b4 	movhi	r4,2
    3ed8:	2114d604 	addi	r4,r4,21336
    3edc:	0005cf40 	call	5cf4 <puts>

		printf("Select a direction: ");
    3ee0:	010000b4 	movhi	r4,2
    3ee4:	2114d804 	addi	r4,r4,21344
    3ee8:	0005bd80 	call	5bd8 <printf>
		int pDir = -1;
    3eec:	00bfffc4 	movi	r2,-1
    3ef0:	e0bfff15 	stw	r2,-4(fp)
		scanf("%i", &pDir);
    3ef4:	e0bfff04 	addi	r2,fp,-4
    3ef8:	100b883a 	mov	r5,r2
    3efc:	010000b4 	movhi	r4,2
    3f00:	2114de04 	addi	r4,r4,21368
    3f04:	00064c80 	call	64c8 <scanf>
		printf("\n");
    3f08:	01000284 	movi	r4,10
    3f0c:	0005c1c0 	call	5c1c <putchar>

		printf("\npRow: %d\npField: %d\npDir: %d\n\n",pRow,pField,pDir);
    3f10:	e0bfff17 	ldw	r2,-4(fp)
    3f14:	100f883a 	mov	r7,r2
    3f18:	e1bfe217 	ldw	r6,-120(fp)
    3f1c:	e17fe117 	ldw	r5,-124(fp)
    3f20:	010000b4 	movhi	r4,2
    3f24:	2114df04 	addi	r4,r4,21372
    3f28:	0005bd80 	call	5bd8 <printf>

		if(checkIfCanMove((unsigned char **)board,pRow,pField,pDir, FRIENDLY, FRIENDLYKING, ENEMY, ENEMYKING, FRIENDLYDIRECTION)){
    3f2c:	e0ffff17 	ldw	r3,-4(fp)
    3f30:	00bfffc4 	movi	r2,-1
    3f34:	d8800415 	stw	r2,16(sp)
    3f38:	00800144 	movi	r2,5
    3f3c:	d8800315 	stw	r2,12(sp)
    3f40:	00800104 	movi	r2,4
    3f44:	d8800215 	stw	r2,8(sp)
    3f48:	008000c4 	movi	r2,3
    3f4c:	d8800115 	stw	r2,4(sp)
    3f50:	00800084 	movi	r2,2
    3f54:	d8800015 	stw	r2,0(sp)
    3f58:	180f883a 	mov	r7,r3
    3f5c:	e1bfe217 	ldw	r6,-120(fp)
    3f60:	e17fe117 	ldw	r5,-124(fp)
    3f64:	010000f4 	movhi	r4,3
    3f68:	21253804 	addi	r4,r4,-27424
    3f6c:	00018280 	call	1828 <checkIfCanMove>
    3f70:	10002726 	beq	r2,zero,4010 <playerInput+0x46c>
			move((unsigned char **)board,pRow,pField,pDir, FRIENDLY, FRIENDLYKING, ENEMY, ENEMYKING, FRIENDLYDIRECTION);
    3f74:	e0bfe117 	ldw	r2,-124(fp)
    3f78:	10c03fcc 	andi	r3,r2,255
    3f7c:	e0bfe217 	ldw	r2,-120(fp)
    3f80:	11003fcc 	andi	r4,r2,255
    3f84:	e0bfff17 	ldw	r2,-4(fp)
    3f88:	11403fcc 	andi	r5,r2,255
    3f8c:	00bfffc4 	movi	r2,-1
    3f90:	d8800415 	stw	r2,16(sp)
    3f94:	00800144 	movi	r2,5
    3f98:	d8800315 	stw	r2,12(sp)
    3f9c:	00800104 	movi	r2,4
    3fa0:	d8800215 	stw	r2,8(sp)
    3fa4:	008000c4 	movi	r2,3
    3fa8:	d8800115 	stw	r2,4(sp)
    3fac:	00800084 	movi	r2,2
    3fb0:	d8800015 	stw	r2,0(sp)
    3fb4:	280f883a 	mov	r7,r5
    3fb8:	200d883a 	mov	r6,r4
    3fbc:	180b883a 	mov	r5,r3
    3fc0:	010000f4 	movhi	r4,3
    3fc4:	21253804 	addi	r4,r4,-27424
    3fc8:	00022b40 	call	22b4 <move>
			createKing((unsigned char **)board);
    3fcc:	010000f4 	movhi	r4,3
    3fd0:	21253804 	addi	r4,r4,-27424
    3fd4:	00025740 	call	2574 <createKing>
			printBoard((unsigned char **)board,pRow,pField,100,100);
    3fd8:	e0bfe117 	ldw	r2,-124(fp)
    3fdc:	10c03fcc 	andi	r3,r2,255
    3fe0:	e0bfe217 	ldw	r2,-120(fp)
    3fe4:	11003fcc 	andi	r4,r2,255
    3fe8:	00801904 	movi	r2,100
    3fec:	d8800015 	stw	r2,0(sp)
    3ff0:	01c01904 	movi	r7,100
    3ff4:	200d883a 	mov	r6,r4
    3ff8:	180b883a 	mov	r5,r3
    3ffc:	010000f4 	movhi	r4,3
    4000:	21253804 	addi	r4,r4,-27424
    4004:	00004bc0 	call	4bc <printBoard>
			return 1;
    4008:	00800044 	movi	r2,1
    400c:	00000906 	br	4034 <playerInput+0x490>
		}else{
			printf("Can't move to that field! Try again.\n");
    4010:	010000b4 	movhi	r4,2
    4014:	2114e704 	addi	r4,r4,21404
    4018:	0005cf40 	call	5cf4 <puts>
			return playerInput();
    401c:	0003ba40 	call	3ba4 <playerInput>
    4020:	00000406 	br	4034 <playerInput+0x490>
		}
	}else{
		printf("Wrong piece selected, try again\n");
    4024:	010000b4 	movhi	r4,2
    4028:	2114f104 	addi	r4,r4,21444
    402c:	0005cf40 	call	5cf4 <puts>
		return playerInput();
    4030:	0003ba40 	call	3ba4 <playerInput>
	}
}
    4034:	e037883a 	mov	sp,fp
    4038:	dfc00117 	ldw	ra,4(sp)
    403c:	df000017 	ldw	fp,0(sp)
    4040:	dec00204 	addi	sp,sp,8
    4044:	f800283a 	ret

00004048 <play>:

void play(){
    4048:	defffa04 	addi	sp,sp,-24
    404c:	dfc00515 	stw	ra,20(sp)
    4050:	df000415 	stw	fp,16(sp)
    4054:	df000404 	addi	fp,sp,16
	unsigned char friendlyMoved = 1;
    4058:	00800044 	movi	r2,1
    405c:	e0bfff05 	stb	r2,-4(fp)
	unsigned char enemyMoved = 1;
    4060:	00800044 	movi	r2,1
    4064:	e0bfff45 	stb	r2,-3(fp)
	unsigned char turn = 0;
    4068:	e03fff85 	stb	zero,-2(fp)
	unsigned char turnCounter = 0;
    406c:	e03fffc5 	stb	zero,-1(fp)

	while(friendlyMoved == 1 && enemyMoved == 1){
    4070:	00001e06 	br	40ec <play+0xa4>
		if(turn == 0){
    4074:	e0bfff83 	ldbu	r2,-2(fp)
    4078:	1000081e 	bne	r2,zero,409c <play+0x54>
			printf("FRIENDLY TURN\n");
    407c:	010000b4 	movhi	r4,2
    4080:	2114f904 	addi	r4,r4,21476
    4084:	0005cf40 	call	5cf4 <puts>
			if(PLAYER_INPUT){
				friendlyMoved = playerInput();
    4088:	0003ba40 	call	3ba4 <playerInput>
    408c:	e0bfff05 	stb	r2,-4(fp)
				//friendlyMoved = bfAlgorithm(FRIENDLY, FRIENDLYKING, ENEMY, ENEMYKING, FRIENDLYDIRECTION);
				friendlyMoved = minimaxAlgorithm((unsigned char **)board,FRIENDLY, FRIENDLYKING, ENEMY, ENEMYKING, FRIENDLYDIRECTION,2);
				//friendlyMoved = 1;
				//friendlyMoved = algorithm(FRIENDLY, FRIENDLYKING, ENEMY, ENEMYKING, FRIENDLYDIRECTION);
			}
			turn = 1;
    4090:	00800044 	movi	r2,1
    4094:	e0bfff85 	stb	r2,-2(fp)
    4098:	00001106 	br	40e0 <play+0x98>
		}else{
			printf("ENEMY TURN\n");
    409c:	010000b4 	movhi	r4,2
    40a0:	2114fd04 	addi	r4,r4,21492
    40a4:	0005cf40 	call	5cf4 <puts>
			//enemyMoved = bfAlgorithm(ENEMY, ENEMYKING, FRIENDLY, FRIENDLYKING, ENEMYDIRECTION);
			enemyMoved = minimaxAlgorithm((unsigned char **)board,ENEMY, ENEMYKING, FRIENDLY, FRIENDLYKING, ENEMYDIRECTION,2);
    40a8:	00800084 	movi	r2,2
    40ac:	d8800215 	stw	r2,8(sp)
    40b0:	00800044 	movi	r2,1
    40b4:	d8800115 	stw	r2,4(sp)
    40b8:	008000c4 	movi	r2,3
    40bc:	d8800015 	stw	r2,0(sp)
    40c0:	01c00084 	movi	r7,2
    40c4:	01800144 	movi	r6,5
    40c8:	01400104 	movi	r5,4
    40cc:	010000f4 	movhi	r4,3
    40d0:	21253804 	addi	r4,r4,-27424
    40d4:	0002ef80 	call	2ef8 <minimaxAlgorithm>
    40d8:	e0bfff45 	stb	r2,-3(fp)
			//enemyMoved = 1;
			//enemyMoved = algorithm(ENEMY, ENEMYKING, FRIENDLY, FRIENDLYKING, ENEMYDIRECTION);
			turn = 0;
    40dc:	e03fff85 	stb	zero,-2(fp)
		}
		turnCounter++;
    40e0:	e0bfffc3 	ldbu	r2,-1(fp)
    40e4:	10800044 	addi	r2,r2,1
    40e8:	e0bfffc5 	stb	r2,-1(fp)
	unsigned char friendlyMoved = 1;
	unsigned char enemyMoved = 1;
	unsigned char turn = 0;
	unsigned char turnCounter = 0;

	while(friendlyMoved == 1 && enemyMoved == 1){
    40ec:	e0bfff03 	ldbu	r2,-4(fp)
    40f0:	10800058 	cmpnei	r2,r2,1
    40f4:	1000031e 	bne	r2,zero,4104 <play+0xbc>
    40f8:	e0bfff43 	ldbu	r2,-3(fp)
    40fc:	10800060 	cmpeqi	r2,r2,1
    4100:	103fdc1e 	bne	r2,zero,4074 <__alt_data_end+0xfc004074>
			turn = 0;
		}
		turnCounter++;
	}

	if(friendlyMoved == 0){
    4104:	e0bfff03 	ldbu	r2,-4(fp)
    4108:	1000041e 	bne	r2,zero,411c <play+0xd4>
		printf("YOU LOST\n");
    410c:	010000b4 	movhi	r4,2
    4110:	21150004 	addi	r4,r4,21504
    4114:	0005cf40 	call	5cf4 <puts>
    4118:	00000306 	br	4128 <play+0xe0>
	}else{
		printf("YOU WON\n");
    411c:	010000b4 	movhi	r4,2
    4120:	21150304 	addi	r4,r4,21516
    4124:	0005cf40 	call	5cf4 <puts>
	}
	turnCounter--;
    4128:	e0bfffc3 	ldbu	r2,-1(fp)
    412c:	10bfffc4 	addi	r2,r2,-1
    4130:	e0bfffc5 	stb	r2,-1(fp)
	printf("the game lasted for %i turns\n",turnCounter);
    4134:	e0bfffc3 	ldbu	r2,-1(fp)
    4138:	100b883a 	mov	r5,r2
    413c:	010000b4 	movhi	r4,2
    4140:	21150504 	addi	r4,r4,21524
    4144:	0005bd80 	call	5bd8 <printf>
}
    4148:	0001883a 	nop
    414c:	e037883a 	mov	sp,fp
    4150:	dfc00117 	ldw	ra,4(sp)
    4154:	df000017 	ldw	fp,0(sp)
    4158:	dec00204 	addi	sp,sp,8
    415c:	f800283a 	ret

00004160 <createBoard>:

void createBoard(){
    4160:	defffe04 	addi	sp,sp,-8
    4164:	df000115 	stw	fp,4(sp)
    4168:	df000104 	addi	fp,sp,4
	unsigned char x = 1;
    416c:	00800044 	movi	r2,1
    4170:	e0bfff05 	stb	r2,-4(fp)
	unsigned char y = 0;
    4174:	e03fff45 	stb	zero,-3(fp)
	unsigned char even = 1;
    4178:	00800044 	movi	r2,1
    417c:	e0bfff85 	stb	r2,-2(fp)

	while(y < 10){
    4180:	00003506 	br	4258 <createBoard+0xf8>
		board[y][x] = BLACK;
    4184:	e13fff43 	ldbu	r4,-3(fp)
    4188:	e0ffff03 	ldbu	r3,-4(fp)
    418c:	008000f4 	movhi	r2,3
    4190:	10a53804 	addi	r2,r2,-27424
    4194:	210002a4 	muli	r4,r4,10
    4198:	1105883a 	add	r2,r2,r4
    419c:	10c5883a 	add	r2,r2,r3
    41a0:	00c00044 	movi	r3,1
    41a4:	10c00005 	stb	r3,0(r2)
		if(y < 4){
    41a8:	e0bfff43 	ldbu	r2,-3(fp)
    41ac:	10800128 	cmpgeui	r2,r2,4
    41b0:	1000091e 	bne	r2,zero,41d8 <createBoard+0x78>
			board[y][x] = ENEMY;
    41b4:	e13fff43 	ldbu	r4,-3(fp)
    41b8:	e0ffff03 	ldbu	r3,-4(fp)
    41bc:	008000f4 	movhi	r2,3
    41c0:	10a53804 	addi	r2,r2,-27424
    41c4:	210002a4 	muli	r4,r4,10
    41c8:	1105883a 	add	r2,r2,r4
    41cc:	10c5883a 	add	r2,r2,r3
    41d0:	00c00104 	movi	r3,4
    41d4:	10c00005 	stb	r3,0(r2)

		}
		if(y > 5){
    41d8:	e0bfff43 	ldbu	r2,-3(fp)
    41dc:	108001b0 	cmpltui	r2,r2,6
    41e0:	1000091e 	bne	r2,zero,4208 <createBoard+0xa8>
			board[y][x] = FRIENDLY;
    41e4:	e13fff43 	ldbu	r4,-3(fp)
    41e8:	e0ffff03 	ldbu	r3,-4(fp)
    41ec:	008000f4 	movhi	r2,3
    41f0:	10a53804 	addi	r2,r2,-27424
    41f4:	210002a4 	muli	r4,r4,10
    41f8:	1105883a 	add	r2,r2,r4
    41fc:	10c5883a 	add	r2,r2,r3
    4200:	00c00084 	movi	r3,2
    4204:	10c00005 	stb	r3,0(r2)
		}

		if(x + 2 < 10 ){
    4208:	e0bfff03 	ldbu	r2,-4(fp)
    420c:	10800084 	addi	r2,r2,2
    4210:	10800288 	cmpgei	r2,r2,10
    4214:	1000041e 	bne	r2,zero,4228 <createBoard+0xc8>
			x = x + 2;
    4218:	e0bfff03 	ldbu	r2,-4(fp)
    421c:	10800084 	addi	r2,r2,2
    4220:	e0bfff05 	stb	r2,-4(fp)
    4224:	00000c06 	br	4258 <createBoard+0xf8>
		}else{
			y++;
    4228:	e0bfff43 	ldbu	r2,-3(fp)
    422c:	10800044 	addi	r2,r2,1
    4230:	e0bfff45 	stb	r2,-3(fp)
			x = 0;
    4234:	e03fff05 	stb	zero,-4(fp)
			even = !even;
    4238:	e0bfff83 	ldbu	r2,-2(fp)
    423c:	1005003a 	cmpeq	r2,r2,zero
    4240:	e0bfff85 	stb	r2,-2(fp)
			if(even > 0){
    4244:	e0bfff83 	ldbu	r2,-2(fp)
    4248:	10000326 	beq	r2,zero,4258 <createBoard+0xf8>
				x++;
    424c:	e0bfff03 	ldbu	r2,-4(fp)
    4250:	10800044 	addi	r2,r2,1
    4254:	e0bfff05 	stb	r2,-4(fp)
void createBoard(){
	unsigned char x = 1;
	unsigned char y = 0;
	unsigned char even = 1;

	while(y < 10){
    4258:	e0bfff43 	ldbu	r2,-3(fp)
    425c:	108002b0 	cmpltui	r2,r2,10
    4260:	103fc81e 	bne	r2,zero,4184 <__alt_data_end+0xfc004184>
			if(even > 0){
				x++;
			}
		}
	}
}
    4264:	0001883a 	nop
    4268:	e037883a 	mov	sp,fp
    426c:	df000017 	ldw	fp,0(sp)
    4270:	dec00104 	addi	sp,sp,4
    4274:	f800283a 	ret

00004278 <createEmptyBoard>:

void createEmptyBoard()
{
    4278:	defffe04 	addi	sp,sp,-8
    427c:	df000115 	stw	fp,4(sp)
    4280:	df000104 	addi	fp,sp,4
	unsigned char x = 1;
    4284:	00800044 	movi	r2,1
    4288:	e0bfff05 	stb	r2,-4(fp)
	unsigned char y = 0;
    428c:	e03fff45 	stb	zero,-3(fp)
	unsigned char even = 1;
    4290:	00800044 	movi	r2,1
    4294:	e0bfff85 	stb	r2,-2(fp)

	while(y < 10){
    4298:	00001d06 	br	4310 <createEmptyBoard+0x98>
		board[y][x] = BLACK;
    429c:	e13fff43 	ldbu	r4,-3(fp)
    42a0:	e0ffff03 	ldbu	r3,-4(fp)
    42a4:	008000f4 	movhi	r2,3
    42a8:	10a53804 	addi	r2,r2,-27424
    42ac:	210002a4 	muli	r4,r4,10
    42b0:	1105883a 	add	r2,r2,r4
    42b4:	10c5883a 	add	r2,r2,r3
    42b8:	00c00044 	movi	r3,1
    42bc:	10c00005 	stb	r3,0(r2)

		if(x + 2 < 10 ){
    42c0:	e0bfff03 	ldbu	r2,-4(fp)
    42c4:	10800084 	addi	r2,r2,2
    42c8:	10800288 	cmpgei	r2,r2,10
    42cc:	1000041e 	bne	r2,zero,42e0 <createEmptyBoard+0x68>
			x = x + 2;
    42d0:	e0bfff03 	ldbu	r2,-4(fp)
    42d4:	10800084 	addi	r2,r2,2
    42d8:	e0bfff05 	stb	r2,-4(fp)
    42dc:	00000c06 	br	4310 <createEmptyBoard+0x98>
		}else{
			y++;
    42e0:	e0bfff43 	ldbu	r2,-3(fp)
    42e4:	10800044 	addi	r2,r2,1
    42e8:	e0bfff45 	stb	r2,-3(fp)
			x = 0;
    42ec:	e03fff05 	stb	zero,-4(fp)
			even = !even;
    42f0:	e0bfff83 	ldbu	r2,-2(fp)
    42f4:	1005003a 	cmpeq	r2,r2,zero
    42f8:	e0bfff85 	stb	r2,-2(fp)
			if(even > 0){
    42fc:	e0bfff83 	ldbu	r2,-2(fp)
    4300:	10000326 	beq	r2,zero,4310 <createEmptyBoard+0x98>
				x++;
    4304:	e0bfff03 	ldbu	r2,-4(fp)
    4308:	10800044 	addi	r2,r2,1
    430c:	e0bfff05 	stb	r2,-4(fp)
{
	unsigned char x = 1;
	unsigned char y = 0;
	unsigned char even = 1;

	while(y < 10){
    4310:	e0bfff43 	ldbu	r2,-3(fp)
    4314:	108002b0 	cmpltui	r2,r2,10
    4318:	103fe01e 	bne	r2,zero,429c <__alt_data_end+0xfc00429c>
			if(even > 0){
				x++;
			}
		}
	}
}
    431c:	0001883a 	nop
    4320:	e037883a 	mov	sp,fp
    4324:	df000017 	ldw	fp,0(sp)
    4328:	dec00104 	addi	sp,sp,4
    432c:	f800283a 	ret

00004330 <vectorInit>:
#include <string.h>

#include "vector.h"

Vector * vectorInit()
{
    4330:	defffd04 	addi	sp,sp,-12
    4334:	dfc00215 	stw	ra,8(sp)
    4338:	df000115 	stw	fp,4(sp)
    433c:	df000104 	addi	fp,sp,4
	Vector *v = malloc(sizeof(Vector));
    4340:	01000304 	movi	r4,12
    4344:	00050200 	call	5020 <malloc>
    4348:	e0bfff15 	stw	r2,-4(fp)
	v->data = NULL;
    434c:	e0bfff17 	ldw	r2,-4(fp)
    4350:	10000015 	stw	zero,0(r2)
	v->size = 0;
    4354:	e0bfff17 	ldw	r2,-4(fp)
    4358:	10000115 	stw	zero,4(r2)
	v->count = 0;
    435c:	e0bfff17 	ldw	r2,-4(fp)
    4360:	10000215 	stw	zero,8(r2)
	return v;
    4364:	e0bfff17 	ldw	r2,-4(fp)
}
    4368:	e037883a 	mov	sp,fp
    436c:	dfc00117 	ldw	ra,4(sp)
    4370:	df000017 	ldw	fp,0(sp)
    4374:	dec00204 	addi	sp,sp,8
    4378:	f800283a 	ret

0000437c <vectorCount>:

int vectorCount(Vector * v)
{
    437c:	defffe04 	addi	sp,sp,-8
    4380:	df000115 	stw	fp,4(sp)
    4384:	df000104 	addi	fp,sp,4
    4388:	e13fff15 	stw	r4,-4(fp)
	return v->count;
    438c:	e0bfff17 	ldw	r2,-4(fp)
    4390:	10800217 	ldw	r2,8(r2)
}
    4394:	e037883a 	mov	sp,fp
    4398:	df000017 	ldw	fp,0(sp)
    439c:	dec00104 	addi	sp,sp,4
    43a0:	f800283a 	ret

000043a4 <vectorAdd>:

void vectorAdd(Vector * v, void * e)
{
    43a4:	defffc04 	addi	sp,sp,-16
    43a8:	dfc00315 	stw	ra,12(sp)
    43ac:	df000215 	stw	fp,8(sp)
    43b0:	df000204 	addi	fp,sp,8
    43b4:	e13ffe15 	stw	r4,-8(fp)
    43b8:	e17fff15 	stw	r5,-4(fp)
	if (v->size == 0) {
    43bc:	e0bffe17 	ldw	r2,-8(fp)
    43c0:	10800117 	ldw	r2,4(r2)
    43c4:	1000141e 	bne	r2,zero,4418 <vectorAdd+0x74>
		v->size = 10;
    43c8:	e0bffe17 	ldw	r2,-8(fp)
    43cc:	00c00284 	movi	r3,10
    43d0:	10c00115 	stw	r3,4(r2)
		v->data = malloc(sizeof(void*) * v->size);
    43d4:	e0bffe17 	ldw	r2,-8(fp)
    43d8:	10800117 	ldw	r2,4(r2)
    43dc:	1085883a 	add	r2,r2,r2
    43e0:	1085883a 	add	r2,r2,r2
    43e4:	1009883a 	mov	r4,r2
    43e8:	00050200 	call	5020 <malloc>
    43ec:	1007883a 	mov	r3,r2
    43f0:	e0bffe17 	ldw	r2,-8(fp)
    43f4:	10c00015 	stw	r3,0(r2)
		memset(v->data, '\0', sizeof(void) * v->size);
    43f8:	e0bffe17 	ldw	r2,-8(fp)
    43fc:	10c00017 	ldw	r3,0(r2)
    4400:	e0bffe17 	ldw	r2,-8(fp)
    4404:	10800117 	ldw	r2,4(r2)
    4408:	100d883a 	mov	r6,r2
    440c:	000b883a 	mov	r5,zero
    4410:	1809883a 	mov	r4,r3
    4414:	0005a800 	call	5a80 <memset>
	}

	// condition to increase v->data:
	// last slot exhausted
	if (v->size == v->count) {
    4418:	e0bffe17 	ldw	r2,-8(fp)
    441c:	10c00117 	ldw	r3,4(r2)
    4420:	e0bffe17 	ldw	r2,-8(fp)
    4424:	10800217 	ldw	r2,8(r2)
    4428:	1880121e 	bne	r3,r2,4474 <vectorAdd+0xd0>
		v->size *= 2;
    442c:	e0bffe17 	ldw	r2,-8(fp)
    4430:	10800117 	ldw	r2,4(r2)
    4434:	1085883a 	add	r2,r2,r2
    4438:	1007883a 	mov	r3,r2
    443c:	e0bffe17 	ldw	r2,-8(fp)
    4440:	10c00115 	stw	r3,4(r2)
		v->data = realloc(v->data, sizeof(void*) * v->size);
    4444:	e0bffe17 	ldw	r2,-8(fp)
    4448:	10c00017 	ldw	r3,0(r2)
    444c:	e0bffe17 	ldw	r2,-8(fp)
    4450:	10800117 	ldw	r2,4(r2)
    4454:	1085883a 	add	r2,r2,r2
    4458:	1085883a 	add	r2,r2,r2
    445c:	100b883a 	mov	r5,r2
    4460:	1809883a 	mov	r4,r3
    4464:	0005d080 	call	5d08 <realloc>
    4468:	1007883a 	mov	r3,r2
    446c:	e0bffe17 	ldw	r2,-8(fp)
    4470:	10c00015 	stw	r3,0(r2)
	}

	v->data[v->count] = e;
    4474:	e0bffe17 	ldw	r2,-8(fp)
    4478:	10c00017 	ldw	r3,0(r2)
    447c:	e0bffe17 	ldw	r2,-8(fp)
    4480:	10800217 	ldw	r2,8(r2)
    4484:	1085883a 	add	r2,r2,r2
    4488:	1085883a 	add	r2,r2,r2
    448c:	1885883a 	add	r2,r3,r2
    4490:	e0ffff17 	ldw	r3,-4(fp)
    4494:	10c00015 	stw	r3,0(r2)
	v->count++;
    4498:	e0bffe17 	ldw	r2,-8(fp)
    449c:	10800217 	ldw	r2,8(r2)
    44a0:	10c00044 	addi	r3,r2,1
    44a4:	e0bffe17 	ldw	r2,-8(fp)
    44a8:	10c00215 	stw	r3,8(r2)
}
    44ac:	0001883a 	nop
    44b0:	e037883a 	mov	sp,fp
    44b4:	dfc00117 	ldw	ra,4(sp)
    44b8:	df000017 	ldw	fp,0(sp)
    44bc:	dec00204 	addi	sp,sp,8
    44c0:	f800283a 	ret

000044c4 <vectorSet>:

void vectorSet(Vector *v, int index, void *e)
{
    44c4:	defffc04 	addi	sp,sp,-16
    44c8:	df000315 	stw	fp,12(sp)
    44cc:	df000304 	addi	fp,sp,12
    44d0:	e13ffd15 	stw	r4,-12(fp)
    44d4:	e17ffe15 	stw	r5,-8(fp)
    44d8:	e1bfff15 	stw	r6,-4(fp)
	if (index >= v->count) {
    44dc:	e0bffd17 	ldw	r2,-12(fp)
    44e0:	10800217 	ldw	r2,8(r2)
    44e4:	e0fffe17 	ldw	r3,-8(fp)
    44e8:	1880090e 	bge	r3,r2,4510 <vectorSet+0x4c>
		return;
	}

	v->data[index] = e;
    44ec:	e0bffd17 	ldw	r2,-12(fp)
    44f0:	10c00017 	ldw	r3,0(r2)
    44f4:	e0bffe17 	ldw	r2,-8(fp)
    44f8:	1085883a 	add	r2,r2,r2
    44fc:	1085883a 	add	r2,r2,r2
    4500:	1885883a 	add	r2,r3,r2
    4504:	e0ffff17 	ldw	r3,-4(fp)
    4508:	10c00015 	stw	r3,0(r2)
    450c:	00000106 	br	4514 <vectorSet+0x50>
}

void vectorSet(Vector *v, int index, void *e)
{
	if (index >= v->count) {
		return;
    4510:	0001883a 	nop
	}

	v->data[index] = e;
}
    4514:	e037883a 	mov	sp,fp
    4518:	df000017 	ldw	fp,0(sp)
    451c:	dec00104 	addi	sp,sp,4
    4520:	f800283a 	ret

00004524 <vectorGet>:

void * vectorGet(Vector *v, int index)
{
    4524:	defffd04 	addi	sp,sp,-12
    4528:	df000215 	stw	fp,8(sp)
    452c:	df000204 	addi	fp,sp,8
    4530:	e13ffe15 	stw	r4,-8(fp)
    4534:	e17fff15 	stw	r5,-4(fp)
	if (index >= v->count) {
    4538:	e0bffe17 	ldw	r2,-8(fp)
    453c:	10800217 	ldw	r2,8(r2)
    4540:	e0ffff17 	ldw	r3,-4(fp)
    4544:	18800216 	blt	r3,r2,4550 <vectorGet+0x2c>
		return NULL;
    4548:	0005883a 	mov	r2,zero
    454c:	00000706 	br	456c <vectorGet+0x48>
	}

	return v->data[index];
    4550:	e0bffe17 	ldw	r2,-8(fp)
    4554:	10c00017 	ldw	r3,0(r2)
    4558:	e0bfff17 	ldw	r2,-4(fp)
    455c:	1085883a 	add	r2,r2,r2
    4560:	1085883a 	add	r2,r2,r2
    4564:	1885883a 	add	r2,r3,r2
    4568:	10800017 	ldw	r2,0(r2)
}
    456c:	e037883a 	mov	sp,fp
    4570:	df000017 	ldw	fp,0(sp)
    4574:	dec00104 	addi	sp,sp,4
    4578:	f800283a 	ret

0000457c <vectorDelete>:

void vectorDelete(Vector *v, int index)
{
    457c:	defff904 	addi	sp,sp,-28
    4580:	dfc00615 	stw	ra,24(sp)
    4584:	df000515 	stw	fp,20(sp)
    4588:	df000504 	addi	fp,sp,20
    458c:	e13ffe15 	stw	r4,-8(fp)
    4590:	e17fff15 	stw	r5,-4(fp)
	if (index >= v->count) {
    4594:	e0bffe17 	ldw	r2,-8(fp)
    4598:	10800217 	ldw	r2,8(r2)
    459c:	e0ffff17 	ldw	r3,-4(fp)
    45a0:	18803d0e 	bge	r3,r2,4698 <vectorDelete+0x11c>
		return;
	}

	v->data[index] = NULL;
    45a4:	e0bffe17 	ldw	r2,-8(fp)
    45a8:	10c00017 	ldw	r3,0(r2)
    45ac:	e0bfff17 	ldw	r2,-4(fp)
    45b0:	1085883a 	add	r2,r2,r2
    45b4:	1085883a 	add	r2,r2,r2
    45b8:	1885883a 	add	r2,r3,r2
    45bc:	10000015 	stw	zero,0(r2)

	int i, j;
	void **newarr = (void**)malloc(sizeof(void*) * v->count * 2);
    45c0:	e0bffe17 	ldw	r2,-8(fp)
    45c4:	10800217 	ldw	r2,8(r2)
    45c8:	100490fa 	slli	r2,r2,3
    45cc:	1009883a 	mov	r4,r2
    45d0:	00050200 	call	5020 <malloc>
    45d4:	e0bffd15 	stw	r2,-12(fp)
	for (i = 0, j = 0; i < v->count; i++) {
    45d8:	e03ffb15 	stw	zero,-20(fp)
    45dc:	e03ffc15 	stw	zero,-16(fp)
    45e0:	00001c06 	br	4654 <vectorDelete+0xd8>
		if (v->data[i] != NULL) {
    45e4:	e0bffe17 	ldw	r2,-8(fp)
    45e8:	10c00017 	ldw	r3,0(r2)
    45ec:	e0bffb17 	ldw	r2,-20(fp)
    45f0:	1085883a 	add	r2,r2,r2
    45f4:	1085883a 	add	r2,r2,r2
    45f8:	1885883a 	add	r2,r3,r2
    45fc:	10800017 	ldw	r2,0(r2)
    4600:	10001126 	beq	r2,zero,4648 <vectorDelete+0xcc>
			newarr[j] = v->data[i];
    4604:	e0bffc17 	ldw	r2,-16(fp)
    4608:	1085883a 	add	r2,r2,r2
    460c:	1085883a 	add	r2,r2,r2
    4610:	1007883a 	mov	r3,r2
    4614:	e0bffd17 	ldw	r2,-12(fp)
    4618:	10c7883a 	add	r3,r2,r3
    461c:	e0bffe17 	ldw	r2,-8(fp)
    4620:	11000017 	ldw	r4,0(r2)
    4624:	e0bffb17 	ldw	r2,-20(fp)
    4628:	1085883a 	add	r2,r2,r2
    462c:	1085883a 	add	r2,r2,r2
    4630:	2085883a 	add	r2,r4,r2
    4634:	10800017 	ldw	r2,0(r2)
    4638:	18800015 	stw	r2,0(r3)
			j++;
    463c:	e0bffc17 	ldw	r2,-16(fp)
    4640:	10800044 	addi	r2,r2,1
    4644:	e0bffc15 	stw	r2,-16(fp)

	v->data[index] = NULL;

	int i, j;
	void **newarr = (void**)malloc(sizeof(void*) * v->count * 2);
	for (i = 0, j = 0; i < v->count; i++) {
    4648:	e0bffb17 	ldw	r2,-20(fp)
    464c:	10800044 	addi	r2,r2,1
    4650:	e0bffb15 	stw	r2,-20(fp)
    4654:	e0bffe17 	ldw	r2,-8(fp)
    4658:	10800217 	ldw	r2,8(r2)
    465c:	e0fffb17 	ldw	r3,-20(fp)
    4660:	18bfe016 	blt	r3,r2,45e4 <__alt_data_end+0xfc0045e4>
			newarr[j] = v->data[i];
			j++;
		}
	}

	free(v->data);
    4664:	e0bffe17 	ldw	r2,-8(fp)
    4668:	10800017 	ldw	r2,0(r2)
    466c:	1009883a 	mov	r4,r2
    4670:	00050340 	call	5034 <free>

	v->data = newarr;
    4674:	e0bffe17 	ldw	r2,-8(fp)
    4678:	e0fffd17 	ldw	r3,-12(fp)
    467c:	10c00015 	stw	r3,0(r2)
	v->count--;
    4680:	e0bffe17 	ldw	r2,-8(fp)
    4684:	10800217 	ldw	r2,8(r2)
    4688:	10ffffc4 	addi	r3,r2,-1
    468c:	e0bffe17 	ldw	r2,-8(fp)
    4690:	10c00215 	stw	r3,8(r2)
    4694:	00000106 	br	469c <vectorDelete+0x120>
}

void vectorDelete(Vector *v, int index)
{
	if (index >= v->count) {
		return;
    4698:	0001883a 	nop

	free(v->data);

	v->data = newarr;
	v->count--;
}
    469c:	e037883a 	mov	sp,fp
    46a0:	dfc00117 	ldw	ra,4(sp)
    46a4:	df000017 	ldw	fp,0(sp)
    46a8:	dec00204 	addi	sp,sp,8
    46ac:	f800283a 	ret

000046b0 <vectorFree>:

void vectorFree(Vector *v)
{
    46b0:	defffd04 	addi	sp,sp,-12
    46b4:	dfc00215 	stw	ra,8(sp)
    46b8:	df000115 	stw	fp,4(sp)
    46bc:	df000104 	addi	fp,sp,4
    46c0:	e13fff15 	stw	r4,-4(fp)
	free(v->data);
    46c4:	e0bfff17 	ldw	r2,-4(fp)
    46c8:	10800017 	ldw	r2,0(r2)
    46cc:	1009883a 	mov	r4,r2
    46d0:	00050340 	call	5034 <free>
}
    46d4:	0001883a 	nop
    46d8:	e037883a 	mov	sp,fp
    46dc:	dfc00117 	ldw	ra,4(sp)
    46e0:	df000017 	ldw	fp,0(sp)
    46e4:	dec00204 	addi	sp,sp,8
    46e8:	f800283a 	ret

000046ec <printLocation>:

void vectorFree(Vector *vector) {
	free(vector->captures);
}*/

void printLocation(Location *location){
    46ec:	defffd04 	addi	sp,sp,-12
    46f0:	dfc00215 	stw	ra,8(sp)
    46f4:	df000115 	stw	fp,4(sp)
    46f8:	df000104 	addi	fp,sp,4
    46fc:	e13fff15 	stw	r4,-4(fp)
	printf("Row: %d Field: %d\n", location->row, location->field);
    4700:	e0bfff17 	ldw	r2,-4(fp)
    4704:	10800043 	ldbu	r2,1(r2)
    4708:	10c03fcc 	andi	r3,r2,255
    470c:	e0bfff17 	ldw	r2,-4(fp)
    4710:	10800003 	ldbu	r2,0(r2)
    4714:	10803fcc 	andi	r2,r2,255
    4718:	100d883a 	mov	r6,r2
    471c:	180b883a 	mov	r5,r3
    4720:	010000b4 	movhi	r4,2
    4724:	21150d04 	addi	r4,r4,21556
    4728:	0005bd80 	call	5bd8 <printf>
}
    472c:	0001883a 	nop
    4730:	e037883a 	mov	sp,fp
    4734:	dfc00117 	ldw	ra,4(sp)
    4738:	df000017 	ldw	fp,0(sp)
    473c:	dec00204 	addi	sp,sp,8
    4740:	f800283a 	ret

00004744 <printCapture>:

void printCapture(VectorCapture *capture){
    4744:	defffd04 	addi	sp,sp,-12
    4748:	dfc00215 	stw	ra,8(sp)
    474c:	df000115 	stw	fp,4(sp)
    4750:	df000104 	addi	fp,sp,4
    4754:	e13fff15 	stw	r4,-4(fp)
	printf("Old ");
    4758:	010000b4 	movhi	r4,2
    475c:	21151204 	addi	r4,r4,21576
    4760:	0005bd80 	call	5bd8 <printf>
	printLocation(&capture->oldLocation);
    4764:	e0bfff17 	ldw	r2,-4(fp)
    4768:	10800104 	addi	r2,r2,4
    476c:	1009883a 	mov	r4,r2
    4770:	00046ec0 	call	46ec <printLocation>
	printf("Capture ");
    4774:	010000b4 	movhi	r4,2
    4778:	21151404 	addi	r4,r4,21584
    477c:	0005bd80 	call	5bd8 <printf>
	printLocation(&capture->captureLocation);
    4780:	e0bfff17 	ldw	r2,-4(fp)
    4784:	10800184 	addi	r2,r2,6
    4788:	1009883a 	mov	r4,r2
    478c:	00046ec0 	call	46ec <printLocation>
	printf("New ");
    4790:	010000b4 	movhi	r4,2
    4794:	21151704 	addi	r4,r4,21596
    4798:	0005bd80 	call	5bd8 <printf>
	printLocation(&capture->newLocation);
    479c:	e0bfff17 	ldw	r2,-4(fp)
    47a0:	10800204 	addi	r2,r2,8
    47a4:	1009883a 	mov	r4,r2
    47a8:	00046ec0 	call	46ec <printLocation>
	printf("Piece: ");
    47ac:	010000b4 	movhi	r4,2
    47b0:	21151904 	addi	r4,r4,21604
    47b4:	0005bd80 	call	5bd8 <printf>
	switch(capture->piece){
    47b8:	e0bfff17 	ldw	r2,-4(fp)
    47bc:	10800283 	ldbu	r2,10(r2)
    47c0:	10803fcc 	andi	r2,r2,255
    47c4:	10c000e0 	cmpeqi	r3,r2,3
    47c8:	1800141e 	bne	r3,zero,481c <printCapture+0xd8>
    47cc:	10c00108 	cmpgei	r3,r2,4
    47d0:	1800031e 	bne	r3,zero,47e0 <printCapture+0x9c>
    47d4:	108000a0 	cmpeqi	r2,r2,2
    47d8:	10000d1e 	bne	r2,zero,4810 <printCapture+0xcc>
    47dc:	00001306 	br	482c <printCapture+0xe8>
    47e0:	10c00120 	cmpeqi	r3,r2,4
    47e4:	1800031e 	bne	r3,zero,47f4 <printCapture+0xb0>
    47e8:	10800160 	cmpeqi	r2,r2,5
    47ec:	1000041e 	bne	r2,zero,4800 <printCapture+0xbc>
    47f0:	00000e06 	br	482c <printCapture+0xe8>
		case ENEMY :
			printf("E");
    47f4:	01001144 	movi	r4,69
    47f8:	0005c1c0 	call	5c1c <putchar>
			break;
    47fc:	00000b06 	br	482c <printCapture+0xe8>
		case ENEMYKING :
			printf("EK");
    4800:	010000b4 	movhi	r4,2
    4804:	21151b04 	addi	r4,r4,21612
    4808:	0005bd80 	call	5bd8 <printf>
			break;
    480c:	00000706 	br	482c <printCapture+0xe8>
		case FRIENDLY :
			printf("F");
    4810:	01001184 	movi	r4,70
    4814:	0005c1c0 	call	5c1c <putchar>
			break;
    4818:	00000406 	br	482c <printCapture+0xe8>
		case FRIENDLYKING :
			printf("FK");
    481c:	010000b4 	movhi	r4,2
    4820:	21151c04 	addi	r4,r4,21616
    4824:	0005bd80 	call	5bd8 <printf>
			break;
    4828:	0001883a 	nop
	}
	printf("\n\n");
    482c:	010000b4 	movhi	r4,2
    4830:	21151d04 	addi	r4,r4,21620
    4834:	0005cf40 	call	5cf4 <puts>
}
    4838:	0001883a 	nop
    483c:	e037883a 	mov	sp,fp
    4840:	dfc00117 	ldw	ra,4(sp)
    4844:	df000017 	ldw	fp,0(sp)
    4848:	dec00204 	addi	sp,sp,8
    484c:	f800283a 	ret

00004850 <printVector>:

void printVector(Vector *vector, unsigned char depth){
    4850:	defffa04 	addi	sp,sp,-24
    4854:	dfc00515 	stw	ra,20(sp)
    4858:	df000415 	stw	fp,16(sp)
    485c:	df000404 	addi	fp,sp,16
    4860:	e13ffe15 	stw	r4,-8(fp)
    4864:	2805883a 	mov	r2,r5
    4868:	e0bfff05 	stb	r2,-4(fp)
	depth++;
    486c:	e0bfff03 	ldbu	r2,-4(fp)
    4870:	10800044 	addi	r2,r2,1
    4874:	e0bfff05 	stb	r2,-4(fp)
	printf("Count: %d\n Capacity: %d\n", vector->count, vector->size);
    4878:	e0bffe17 	ldw	r2,-8(fp)
    487c:	10c00217 	ldw	r3,8(r2)
    4880:	e0bffe17 	ldw	r2,-8(fp)
    4884:	10800117 	ldw	r2,4(r2)
    4888:	100d883a 	mov	r6,r2
    488c:	180b883a 	mov	r5,r3
    4890:	010000b4 	movhi	r4,2
    4894:	21151e04 	addi	r4,r4,21624
    4898:	0005bd80 	call	5bd8 <printf>
	for(unsigned char i = 0; i < vector->count; i++){
    489c:	e03ffc05 	stb	zero,-16(fp)
    48a0:	00003006 	br	4964 <printVector+0x114>
		if(vector->data[i] != NULL){
    48a4:	e0bffe17 	ldw	r2,-8(fp)
    48a8:	10c00017 	ldw	r3,0(r2)
    48ac:	e0bffc03 	ldbu	r2,-16(fp)
    48b0:	1085883a 	add	r2,r2,r2
    48b4:	1085883a 	add	r2,r2,r2
    48b8:	1885883a 	add	r2,r3,r2
    48bc:	10800017 	ldw	r2,0(r2)
    48c0:	10002226 	beq	r2,zero,494c <printVector+0xfc>
			printf("Depth: %d\n", depth);
    48c4:	e0bfff03 	ldbu	r2,-4(fp)
    48c8:	100b883a 	mov	r5,r2
    48cc:	010000b4 	movhi	r4,2
    48d0:	21152504 	addi	r4,r4,21652
    48d4:	0005bd80 	call	5bd8 <printf>
			printf("Current Count: %d\n", i);
    48d8:	e0bffc03 	ldbu	r2,-16(fp)
    48dc:	100b883a 	mov	r5,r2
    48e0:	010000b4 	movhi	r4,2
    48e4:	21152804 	addi	r4,r4,21664
    48e8:	0005bd80 	call	5bd8 <printf>
			VectorCapture * capture = (VectorCapture *)vector->data[i];
    48ec:	e0bffe17 	ldw	r2,-8(fp)
    48f0:	10c00017 	ldw	r3,0(r2)
    48f4:	e0bffc03 	ldbu	r2,-16(fp)
    48f8:	1085883a 	add	r2,r2,r2
    48fc:	1085883a 	add	r2,r2,r2
    4900:	1885883a 	add	r2,r3,r2
    4904:	10800017 	ldw	r2,0(r2)
    4908:	e0bffd15 	stw	r2,-12(fp)
			printCapture(capture);
    490c:	e13ffd17 	ldw	r4,-12(fp)
    4910:	00047440 	call	4744 <printCapture>
			if(capture->nextCaptures != NULL){
    4914:	e0bffd17 	ldw	r2,-12(fp)
    4918:	10800017 	ldw	r2,0(r2)
    491c:	10000726 	beq	r2,zero,493c <printVector+0xec>
				printVector(capture->nextCaptures, depth);
    4920:	e0bffd17 	ldw	r2,-12(fp)
    4924:	10800017 	ldw	r2,0(r2)
    4928:	e0ffff03 	ldbu	r3,-4(fp)
    492c:	180b883a 	mov	r5,r3
    4930:	1009883a 	mov	r4,r2
    4934:	00048500 	call	4850 <printVector>
    4938:	00000706 	br	4958 <printVector+0x108>
			}else{
				printf("\nNULL\n");
    493c:	010000b4 	movhi	r4,2
    4940:	21152d04 	addi	r4,r4,21684
    4944:	0005cf40 	call	5cf4 <puts>
    4948:	00000306 	br	4958 <printVector+0x108>
			}
		}else{
			printf("\nNULL\n");
    494c:	010000b4 	movhi	r4,2
    4950:	21152d04 	addi	r4,r4,21684
    4954:	0005cf40 	call	5cf4 <puts>
}

void printVector(Vector *vector, unsigned char depth){
	depth++;
	printf("Count: %d\n Capacity: %d\n", vector->count, vector->size);
	for(unsigned char i = 0; i < vector->count; i++){
    4958:	e0bffc03 	ldbu	r2,-16(fp)
    495c:	10800044 	addi	r2,r2,1
    4960:	e0bffc05 	stb	r2,-16(fp)
    4964:	e0fffc03 	ldbu	r3,-16(fp)
    4968:	e0bffe17 	ldw	r2,-8(fp)
    496c:	10800217 	ldw	r2,8(r2)
    4970:	18bfcc16 	blt	r3,r2,48a4 <__alt_data_end+0xfc0048a4>
			}
		}else{
			printf("\nNULL\n");
		}
	}
	printf("\n\n");
    4974:	010000b4 	movhi	r4,2
    4978:	21151d04 	addi	r4,r4,21620
    497c:	0005cf40 	call	5cf4 <puts>
}
    4980:	0001883a 	nop
    4984:	e037883a 	mov	sp,fp
    4988:	dfc00117 	ldw	ra,4(sp)
    498c:	df000017 	ldw	fp,0(sp)
    4990:	dec00204 	addi	sp,sp,8
    4994:	f800283a 	ret

00004998 <_fgets_r>:
    4998:	00c00044 	movi	r3,1
    499c:	19804d0e 	bge	r3,r6,4ad4 <_fgets_r+0x13c>
    49a0:	defff804 	addi	sp,sp,-32
    49a4:	dd000415 	stw	r20,16(sp)
    49a8:	dcc00315 	stw	r19,12(sp)
    49ac:	dc800215 	stw	r18,8(sp)
    49b0:	dc400115 	stw	r17,4(sp)
    49b4:	dfc00715 	stw	ra,28(sp)
    49b8:	dd800615 	stw	r22,24(sp)
    49bc:	dd400515 	stw	r21,20(sp)
    49c0:	dc000015 	stw	r16,0(sp)
    49c4:	2027883a 	mov	r19,r4
    49c8:	3823883a 	mov	r17,r7
    49cc:	2829883a 	mov	r20,r5
    49d0:	3025883a 	mov	r18,r6
    49d4:	20000226 	beq	r4,zero,49e0 <_fgets_r+0x48>
    49d8:	20800e17 	ldw	r2,56(r4)
    49dc:	10003926 	beq	r2,zero,4ac4 <_fgets_r+0x12c>
    49e0:	94bfffc4 	addi	r18,r18,-1
    49e4:	a02b883a 	mov	r21,r20
    49e8:	00001506 	br	4a40 <_fgets_r+0xa8>
    49ec:	01400284 	movi	r5,10
    49f0:	8d800017 	ldw	r22,0(r17)
    49f4:	9400012e 	bgeu	r18,r16,49fc <_fgets_r+0x64>
    49f8:	9021883a 	mov	r16,r18
    49fc:	800d883a 	mov	r6,r16
    4a00:	b009883a 	mov	r4,r22
    4a04:	00058540 	call	5854 <memchr>
    4a08:	a809883a 	mov	r4,r21
    4a0c:	800d883a 	mov	r6,r16
    4a10:	b00b883a 	mov	r5,r22
    4a14:	9425c83a 	sub	r18,r18,r16
    4a18:	10001e1e 	bne	r2,zero,4a94 <_fgets_r+0xfc>
    4a1c:	88800117 	ldw	r2,4(r17)
    4a20:	88c00017 	ldw	r3,0(r17)
    4a24:	ac2b883a 	add	r21,r21,r16
    4a28:	1405c83a 	sub	r2,r2,r16
    4a2c:	1c21883a 	add	r16,r3,r16
    4a30:	88800115 	stw	r2,4(r17)
    4a34:	8c000015 	stw	r16,0(r17)
    4a38:	00059380 	call	5938 <memcpy>
    4a3c:	90000926 	beq	r18,zero,4a64 <_fgets_r+0xcc>
    4a40:	8c000117 	ldw	r16,4(r17)
    4a44:	803fe91e 	bne	r16,zero,49ec <__alt_data_end+0xfc0049ec>
    4a48:	880b883a 	mov	r5,r17
    4a4c:	9809883a 	mov	r4,r19
    4a50:	00062a00 	call	62a0 <__srefill_r>
    4a54:	1000021e 	bne	r2,zero,4a60 <_fgets_r+0xc8>
    4a58:	8c000117 	ldw	r16,4(r17)
    4a5c:	003fe306 	br	49ec <__alt_data_end+0xfc0049ec>
    4a60:	ad001a26 	beq	r21,r20,4acc <_fgets_r+0x134>
    4a64:	a8000005 	stb	zero,0(r21)
    4a68:	a005883a 	mov	r2,r20
    4a6c:	dfc00717 	ldw	ra,28(sp)
    4a70:	dd800617 	ldw	r22,24(sp)
    4a74:	dd400517 	ldw	r21,20(sp)
    4a78:	dd000417 	ldw	r20,16(sp)
    4a7c:	dcc00317 	ldw	r19,12(sp)
    4a80:	dc800217 	ldw	r18,8(sp)
    4a84:	dc400117 	ldw	r17,4(sp)
    4a88:	dc000017 	ldw	r16,0(sp)
    4a8c:	dec00804 	addi	sp,sp,32
    4a90:	f800283a 	ret
    4a94:	88c00117 	ldw	r3,4(r17)
    4a98:	10800044 	addi	r2,r2,1
    4a9c:	15a1c83a 	sub	r16,r2,r22
    4aa0:	1c07c83a 	sub	r3,r3,r16
    4aa4:	88c00115 	stw	r3,4(r17)
    4aa8:	88800015 	stw	r2,0(r17)
    4aac:	800d883a 	mov	r6,r16
    4ab0:	00059380 	call	5938 <memcpy>
    4ab4:	ac2b883a 	add	r21,r21,r16
    4ab8:	a8000005 	stb	zero,0(r21)
    4abc:	a005883a 	mov	r2,r20
    4ac0:	003fea06 	br	4a6c <__alt_data_end+0xfc004a6c>
    4ac4:	0004e480 	call	4e48 <__sinit>
    4ac8:	003fc506 	br	49e0 <__alt_data_end+0xfc0049e0>
    4acc:	0005883a 	mov	r2,zero
    4ad0:	003fe606 	br	4a6c <__alt_data_end+0xfc004a6c>
    4ad4:	0005883a 	mov	r2,zero
    4ad8:	f800283a 	ret

00004adc <fgets>:
    4adc:	008000b4 	movhi	r2,2
    4ae0:	109df804 	addi	r2,r2,30688
    4ae4:	300f883a 	mov	r7,r6
    4ae8:	280d883a 	mov	r6,r5
    4aec:	200b883a 	mov	r5,r4
    4af0:	11000017 	ldw	r4,0(r2)
    4af4:	00049981 	jmpi	4998 <_fgets_r>

00004af8 <__fp_unlock>:
    4af8:	0005883a 	mov	r2,zero
    4afc:	f800283a 	ret

00004b00 <_cleanup_r>:
    4b00:	01400074 	movhi	r5,1
    4b04:	296fd204 	addi	r5,r5,-16568
    4b08:	0004f5c1 	jmpi	4f5c <_fwalk_reent>

00004b0c <__sinit.part.1>:
    4b0c:	defff704 	addi	sp,sp,-36
    4b10:	00c00034 	movhi	r3,0
    4b14:	dfc00815 	stw	ra,32(sp)
    4b18:	ddc00715 	stw	r23,28(sp)
    4b1c:	dd800615 	stw	r22,24(sp)
    4b20:	dd400515 	stw	r21,20(sp)
    4b24:	dd000415 	stw	r20,16(sp)
    4b28:	dcc00315 	stw	r19,12(sp)
    4b2c:	dc800215 	stw	r18,8(sp)
    4b30:	dc400115 	stw	r17,4(sp)
    4b34:	dc000015 	stw	r16,0(sp)
    4b38:	18d2c004 	addi	r3,r3,19200
    4b3c:	24000117 	ldw	r16,4(r4)
    4b40:	20c00f15 	stw	r3,60(r4)
    4b44:	2080bb04 	addi	r2,r4,748
    4b48:	00c000c4 	movi	r3,3
    4b4c:	20c0b915 	stw	r3,740(r4)
    4b50:	2080ba15 	stw	r2,744(r4)
    4b54:	2000b815 	stw	zero,736(r4)
    4b58:	05c00204 	movi	r23,8
    4b5c:	00800104 	movi	r2,4
    4b60:	2025883a 	mov	r18,r4
    4b64:	b80d883a 	mov	r6,r23
    4b68:	81001704 	addi	r4,r16,92
    4b6c:	000b883a 	mov	r5,zero
    4b70:	80000015 	stw	zero,0(r16)
    4b74:	80000115 	stw	zero,4(r16)
    4b78:	80000215 	stw	zero,8(r16)
    4b7c:	8080030d 	sth	r2,12(r16)
    4b80:	80001915 	stw	zero,100(r16)
    4b84:	8000038d 	sth	zero,14(r16)
    4b88:	80000415 	stw	zero,16(r16)
    4b8c:	80000515 	stw	zero,20(r16)
    4b90:	80000615 	stw	zero,24(r16)
    4b94:	0005a800 	call	5a80 <memset>
    4b98:	05800034 	movhi	r22,0
    4b9c:	94400217 	ldw	r17,8(r18)
    4ba0:	05400034 	movhi	r21,0
    4ba4:	05000034 	movhi	r20,0
    4ba8:	04c00034 	movhi	r19,0
    4bac:	b5994d04 	addi	r22,r22,25908
    4bb0:	ad596404 	addi	r21,r21,26000
    4bb4:	a5198304 	addi	r20,r20,26124
    4bb8:	9cd99a04 	addi	r19,r19,26216
    4bbc:	85800815 	stw	r22,32(r16)
    4bc0:	85400915 	stw	r21,36(r16)
    4bc4:	85000a15 	stw	r20,40(r16)
    4bc8:	84c00b15 	stw	r19,44(r16)
    4bcc:	84000715 	stw	r16,28(r16)
    4bd0:	00800284 	movi	r2,10
    4bd4:	8880030d 	sth	r2,12(r17)
    4bd8:	00800044 	movi	r2,1
    4bdc:	b80d883a 	mov	r6,r23
    4be0:	89001704 	addi	r4,r17,92
    4be4:	000b883a 	mov	r5,zero
    4be8:	88000015 	stw	zero,0(r17)
    4bec:	88000115 	stw	zero,4(r17)
    4bf0:	88000215 	stw	zero,8(r17)
    4bf4:	88001915 	stw	zero,100(r17)
    4bf8:	8880038d 	sth	r2,14(r17)
    4bfc:	88000415 	stw	zero,16(r17)
    4c00:	88000515 	stw	zero,20(r17)
    4c04:	88000615 	stw	zero,24(r17)
    4c08:	0005a800 	call	5a80 <memset>
    4c0c:	94000317 	ldw	r16,12(r18)
    4c10:	00800484 	movi	r2,18
    4c14:	8c400715 	stw	r17,28(r17)
    4c18:	8d800815 	stw	r22,32(r17)
    4c1c:	8d400915 	stw	r21,36(r17)
    4c20:	8d000a15 	stw	r20,40(r17)
    4c24:	8cc00b15 	stw	r19,44(r17)
    4c28:	8080030d 	sth	r2,12(r16)
    4c2c:	00800084 	movi	r2,2
    4c30:	80000015 	stw	zero,0(r16)
    4c34:	80000115 	stw	zero,4(r16)
    4c38:	80000215 	stw	zero,8(r16)
    4c3c:	80001915 	stw	zero,100(r16)
    4c40:	8080038d 	sth	r2,14(r16)
    4c44:	80000415 	stw	zero,16(r16)
    4c48:	80000515 	stw	zero,20(r16)
    4c4c:	80000615 	stw	zero,24(r16)
    4c50:	b80d883a 	mov	r6,r23
    4c54:	000b883a 	mov	r5,zero
    4c58:	81001704 	addi	r4,r16,92
    4c5c:	0005a800 	call	5a80 <memset>
    4c60:	00800044 	movi	r2,1
    4c64:	84000715 	stw	r16,28(r16)
    4c68:	85800815 	stw	r22,32(r16)
    4c6c:	85400915 	stw	r21,36(r16)
    4c70:	85000a15 	stw	r20,40(r16)
    4c74:	84c00b15 	stw	r19,44(r16)
    4c78:	90800e15 	stw	r2,56(r18)
    4c7c:	dfc00817 	ldw	ra,32(sp)
    4c80:	ddc00717 	ldw	r23,28(sp)
    4c84:	dd800617 	ldw	r22,24(sp)
    4c88:	dd400517 	ldw	r21,20(sp)
    4c8c:	dd000417 	ldw	r20,16(sp)
    4c90:	dcc00317 	ldw	r19,12(sp)
    4c94:	dc800217 	ldw	r18,8(sp)
    4c98:	dc400117 	ldw	r17,4(sp)
    4c9c:	dc000017 	ldw	r16,0(sp)
    4ca0:	dec00904 	addi	sp,sp,36
    4ca4:	f800283a 	ret

00004ca8 <__fp_lock>:
    4ca8:	0005883a 	mov	r2,zero
    4cac:	f800283a 	ret

00004cb0 <__sfmoreglue>:
    4cb0:	defffc04 	addi	sp,sp,-16
    4cb4:	dc400115 	stw	r17,4(sp)
    4cb8:	2c7fffc4 	addi	r17,r5,-1
    4cbc:	8c401a24 	muli	r17,r17,104
    4cc0:	dc800215 	stw	r18,8(sp)
    4cc4:	2825883a 	mov	r18,r5
    4cc8:	89401d04 	addi	r5,r17,116
    4ccc:	dc000015 	stw	r16,0(sp)
    4cd0:	dfc00315 	stw	ra,12(sp)
    4cd4:	00050480 	call	5048 <_malloc_r>
    4cd8:	1021883a 	mov	r16,r2
    4cdc:	10000726 	beq	r2,zero,4cfc <__sfmoreglue+0x4c>
    4ce0:	11000304 	addi	r4,r2,12
    4ce4:	10000015 	stw	zero,0(r2)
    4ce8:	14800115 	stw	r18,4(r2)
    4cec:	11000215 	stw	r4,8(r2)
    4cf0:	89801a04 	addi	r6,r17,104
    4cf4:	000b883a 	mov	r5,zero
    4cf8:	0005a800 	call	5a80 <memset>
    4cfc:	8005883a 	mov	r2,r16
    4d00:	dfc00317 	ldw	ra,12(sp)
    4d04:	dc800217 	ldw	r18,8(sp)
    4d08:	dc400117 	ldw	r17,4(sp)
    4d0c:	dc000017 	ldw	r16,0(sp)
    4d10:	dec00404 	addi	sp,sp,16
    4d14:	f800283a 	ret

00004d18 <__sfp>:
    4d18:	defffb04 	addi	sp,sp,-20
    4d1c:	dc000015 	stw	r16,0(sp)
    4d20:	040000b4 	movhi	r16,2
    4d24:	841df704 	addi	r16,r16,30684
    4d28:	dcc00315 	stw	r19,12(sp)
    4d2c:	2027883a 	mov	r19,r4
    4d30:	81000017 	ldw	r4,0(r16)
    4d34:	dfc00415 	stw	ra,16(sp)
    4d38:	dc800215 	stw	r18,8(sp)
    4d3c:	20800e17 	ldw	r2,56(r4)
    4d40:	dc400115 	stw	r17,4(sp)
    4d44:	1000021e 	bne	r2,zero,4d50 <__sfp+0x38>
    4d48:	0004b0c0 	call	4b0c <__sinit.part.1>
    4d4c:	81000017 	ldw	r4,0(r16)
    4d50:	2480b804 	addi	r18,r4,736
    4d54:	047fffc4 	movi	r17,-1
    4d58:	91000117 	ldw	r4,4(r18)
    4d5c:	94000217 	ldw	r16,8(r18)
    4d60:	213fffc4 	addi	r4,r4,-1
    4d64:	20000a16 	blt	r4,zero,4d90 <__sfp+0x78>
    4d68:	8080030f 	ldh	r2,12(r16)
    4d6c:	10000c26 	beq	r2,zero,4da0 <__sfp+0x88>
    4d70:	80c01d04 	addi	r3,r16,116
    4d74:	00000206 	br	4d80 <__sfp+0x68>
    4d78:	18bfe60f 	ldh	r2,-104(r3)
    4d7c:	10000826 	beq	r2,zero,4da0 <__sfp+0x88>
    4d80:	213fffc4 	addi	r4,r4,-1
    4d84:	1c3ffd04 	addi	r16,r3,-12
    4d88:	18c01a04 	addi	r3,r3,104
    4d8c:	247ffa1e 	bne	r4,r17,4d78 <__alt_data_end+0xfc004d78>
    4d90:	90800017 	ldw	r2,0(r18)
    4d94:	10001d26 	beq	r2,zero,4e0c <__sfp+0xf4>
    4d98:	1025883a 	mov	r18,r2
    4d9c:	003fee06 	br	4d58 <__alt_data_end+0xfc004d58>
    4da0:	00bfffc4 	movi	r2,-1
    4da4:	8080038d 	sth	r2,14(r16)
    4da8:	00800044 	movi	r2,1
    4dac:	8080030d 	sth	r2,12(r16)
    4db0:	80001915 	stw	zero,100(r16)
    4db4:	80000015 	stw	zero,0(r16)
    4db8:	80000215 	stw	zero,8(r16)
    4dbc:	80000115 	stw	zero,4(r16)
    4dc0:	80000415 	stw	zero,16(r16)
    4dc4:	80000515 	stw	zero,20(r16)
    4dc8:	80000615 	stw	zero,24(r16)
    4dcc:	01800204 	movi	r6,8
    4dd0:	000b883a 	mov	r5,zero
    4dd4:	81001704 	addi	r4,r16,92
    4dd8:	0005a800 	call	5a80 <memset>
    4ddc:	8005883a 	mov	r2,r16
    4de0:	80000c15 	stw	zero,48(r16)
    4de4:	80000d15 	stw	zero,52(r16)
    4de8:	80001115 	stw	zero,68(r16)
    4dec:	80001215 	stw	zero,72(r16)
    4df0:	dfc00417 	ldw	ra,16(sp)
    4df4:	dcc00317 	ldw	r19,12(sp)
    4df8:	dc800217 	ldw	r18,8(sp)
    4dfc:	dc400117 	ldw	r17,4(sp)
    4e00:	dc000017 	ldw	r16,0(sp)
    4e04:	dec00504 	addi	sp,sp,20
    4e08:	f800283a 	ret
    4e0c:	01400104 	movi	r5,4
    4e10:	9809883a 	mov	r4,r19
    4e14:	0004cb00 	call	4cb0 <__sfmoreglue>
    4e18:	90800015 	stw	r2,0(r18)
    4e1c:	103fde1e 	bne	r2,zero,4d98 <__alt_data_end+0xfc004d98>
    4e20:	00800304 	movi	r2,12
    4e24:	98800015 	stw	r2,0(r19)
    4e28:	0005883a 	mov	r2,zero
    4e2c:	003ff006 	br	4df0 <__alt_data_end+0xfc004df0>

00004e30 <_cleanup>:
    4e30:	008000b4 	movhi	r2,2
    4e34:	109df704 	addi	r2,r2,30684
    4e38:	11000017 	ldw	r4,0(r2)
    4e3c:	01400074 	movhi	r5,1
    4e40:	296fd204 	addi	r5,r5,-16568
    4e44:	0004f5c1 	jmpi	4f5c <_fwalk_reent>

00004e48 <__sinit>:
    4e48:	20800e17 	ldw	r2,56(r4)
    4e4c:	10000126 	beq	r2,zero,4e54 <__sinit+0xc>
    4e50:	f800283a 	ret
    4e54:	0004b0c1 	jmpi	4b0c <__sinit.part.1>

00004e58 <__sfp_lock_acquire>:
    4e58:	f800283a 	ret

00004e5c <__sfp_lock_release>:
    4e5c:	f800283a 	ret

00004e60 <__sinit_lock_acquire>:
    4e60:	f800283a 	ret

00004e64 <__sinit_lock_release>:
    4e64:	f800283a 	ret

00004e68 <__fp_lock_all>:
    4e68:	008000b4 	movhi	r2,2
    4e6c:	109df804 	addi	r2,r2,30688
    4e70:	11000017 	ldw	r4,0(r2)
    4e74:	01400034 	movhi	r5,0
    4e78:	29532a04 	addi	r5,r5,19624
    4e7c:	0004e981 	jmpi	4e98 <_fwalk>

00004e80 <__fp_unlock_all>:
    4e80:	008000b4 	movhi	r2,2
    4e84:	109df804 	addi	r2,r2,30688
    4e88:	11000017 	ldw	r4,0(r2)
    4e8c:	01400034 	movhi	r5,0
    4e90:	2952be04 	addi	r5,r5,19192
    4e94:	0004e981 	jmpi	4e98 <_fwalk>

00004e98 <_fwalk>:
    4e98:	defff704 	addi	sp,sp,-36
    4e9c:	dd000415 	stw	r20,16(sp)
    4ea0:	dfc00815 	stw	ra,32(sp)
    4ea4:	ddc00715 	stw	r23,28(sp)
    4ea8:	dd800615 	stw	r22,24(sp)
    4eac:	dd400515 	stw	r21,20(sp)
    4eb0:	dcc00315 	stw	r19,12(sp)
    4eb4:	dc800215 	stw	r18,8(sp)
    4eb8:	dc400115 	stw	r17,4(sp)
    4ebc:	dc000015 	stw	r16,0(sp)
    4ec0:	2500b804 	addi	r20,r4,736
    4ec4:	a0002326 	beq	r20,zero,4f54 <_fwalk+0xbc>
    4ec8:	282b883a 	mov	r21,r5
    4ecc:	002f883a 	mov	r23,zero
    4ed0:	05800044 	movi	r22,1
    4ed4:	04ffffc4 	movi	r19,-1
    4ed8:	a4400117 	ldw	r17,4(r20)
    4edc:	a4800217 	ldw	r18,8(r20)
    4ee0:	8c7fffc4 	addi	r17,r17,-1
    4ee4:	88000d16 	blt	r17,zero,4f1c <_fwalk+0x84>
    4ee8:	94000304 	addi	r16,r18,12
    4eec:	94800384 	addi	r18,r18,14
    4ef0:	8080000b 	ldhu	r2,0(r16)
    4ef4:	8c7fffc4 	addi	r17,r17,-1
    4ef8:	813ffd04 	addi	r4,r16,-12
    4efc:	b080042e 	bgeu	r22,r2,4f10 <_fwalk+0x78>
    4f00:	9080000f 	ldh	r2,0(r18)
    4f04:	14c00226 	beq	r2,r19,4f10 <_fwalk+0x78>
    4f08:	a83ee83a 	callr	r21
    4f0c:	b8aeb03a 	or	r23,r23,r2
    4f10:	84001a04 	addi	r16,r16,104
    4f14:	94801a04 	addi	r18,r18,104
    4f18:	8cfff51e 	bne	r17,r19,4ef0 <__alt_data_end+0xfc004ef0>
    4f1c:	a5000017 	ldw	r20,0(r20)
    4f20:	a03fed1e 	bne	r20,zero,4ed8 <__alt_data_end+0xfc004ed8>
    4f24:	b805883a 	mov	r2,r23
    4f28:	dfc00817 	ldw	ra,32(sp)
    4f2c:	ddc00717 	ldw	r23,28(sp)
    4f30:	dd800617 	ldw	r22,24(sp)
    4f34:	dd400517 	ldw	r21,20(sp)
    4f38:	dd000417 	ldw	r20,16(sp)
    4f3c:	dcc00317 	ldw	r19,12(sp)
    4f40:	dc800217 	ldw	r18,8(sp)
    4f44:	dc400117 	ldw	r17,4(sp)
    4f48:	dc000017 	ldw	r16,0(sp)
    4f4c:	dec00904 	addi	sp,sp,36
    4f50:	f800283a 	ret
    4f54:	002f883a 	mov	r23,zero
    4f58:	003ff206 	br	4f24 <__alt_data_end+0xfc004f24>

00004f5c <_fwalk_reent>:
    4f5c:	defff704 	addi	sp,sp,-36
    4f60:	dd000415 	stw	r20,16(sp)
    4f64:	dfc00815 	stw	ra,32(sp)
    4f68:	ddc00715 	stw	r23,28(sp)
    4f6c:	dd800615 	stw	r22,24(sp)
    4f70:	dd400515 	stw	r21,20(sp)
    4f74:	dcc00315 	stw	r19,12(sp)
    4f78:	dc800215 	stw	r18,8(sp)
    4f7c:	dc400115 	stw	r17,4(sp)
    4f80:	dc000015 	stw	r16,0(sp)
    4f84:	2500b804 	addi	r20,r4,736
    4f88:	a0002326 	beq	r20,zero,5018 <_fwalk_reent+0xbc>
    4f8c:	282b883a 	mov	r21,r5
    4f90:	2027883a 	mov	r19,r4
    4f94:	002f883a 	mov	r23,zero
    4f98:	05800044 	movi	r22,1
    4f9c:	04bfffc4 	movi	r18,-1
    4fa0:	a4400117 	ldw	r17,4(r20)
    4fa4:	a4000217 	ldw	r16,8(r20)
    4fa8:	8c7fffc4 	addi	r17,r17,-1
    4fac:	88000c16 	blt	r17,zero,4fe0 <_fwalk_reent+0x84>
    4fb0:	84000304 	addi	r16,r16,12
    4fb4:	8080000b 	ldhu	r2,0(r16)
    4fb8:	8c7fffc4 	addi	r17,r17,-1
    4fbc:	817ffd04 	addi	r5,r16,-12
    4fc0:	b080052e 	bgeu	r22,r2,4fd8 <_fwalk_reent+0x7c>
    4fc4:	8080008f 	ldh	r2,2(r16)
    4fc8:	9809883a 	mov	r4,r19
    4fcc:	14800226 	beq	r2,r18,4fd8 <_fwalk_reent+0x7c>
    4fd0:	a83ee83a 	callr	r21
    4fd4:	b8aeb03a 	or	r23,r23,r2
    4fd8:	84001a04 	addi	r16,r16,104
    4fdc:	8cbff51e 	bne	r17,r18,4fb4 <__alt_data_end+0xfc004fb4>
    4fe0:	a5000017 	ldw	r20,0(r20)
    4fe4:	a03fee1e 	bne	r20,zero,4fa0 <__alt_data_end+0xfc004fa0>
    4fe8:	b805883a 	mov	r2,r23
    4fec:	dfc00817 	ldw	ra,32(sp)
    4ff0:	ddc00717 	ldw	r23,28(sp)
    4ff4:	dd800617 	ldw	r22,24(sp)
    4ff8:	dd400517 	ldw	r21,20(sp)
    4ffc:	dd000417 	ldw	r20,16(sp)
    5000:	dcc00317 	ldw	r19,12(sp)
    5004:	dc800217 	ldw	r18,8(sp)
    5008:	dc400117 	ldw	r17,4(sp)
    500c:	dc000017 	ldw	r16,0(sp)
    5010:	dec00904 	addi	sp,sp,36
    5014:	f800283a 	ret
    5018:	002f883a 	mov	r23,zero
    501c:	003ff206 	br	4fe8 <__alt_data_end+0xfc004fe8>

00005020 <malloc>:
    5020:	008000b4 	movhi	r2,2
    5024:	109df804 	addi	r2,r2,30688
    5028:	200b883a 	mov	r5,r4
    502c:	11000017 	ldw	r4,0(r2)
    5030:	00050481 	jmpi	5048 <_malloc_r>

00005034 <free>:
    5034:	008000b4 	movhi	r2,2
    5038:	109df804 	addi	r2,r2,30688
    503c:	200b883a 	mov	r5,r4
    5040:	11000017 	ldw	r4,0(r2)
    5044:	000c6781 	jmpi	c678 <_free_r>

00005048 <_malloc_r>:
    5048:	defff504 	addi	sp,sp,-44
    504c:	dc800315 	stw	r18,12(sp)
    5050:	dfc00a15 	stw	ra,40(sp)
    5054:	df000915 	stw	fp,36(sp)
    5058:	ddc00815 	stw	r23,32(sp)
    505c:	dd800715 	stw	r22,28(sp)
    5060:	dd400615 	stw	r21,24(sp)
    5064:	dd000515 	stw	r20,20(sp)
    5068:	dcc00415 	stw	r19,16(sp)
    506c:	dc400215 	stw	r17,8(sp)
    5070:	dc000115 	stw	r16,4(sp)
    5074:	288002c4 	addi	r2,r5,11
    5078:	00c00584 	movi	r3,22
    507c:	2025883a 	mov	r18,r4
    5080:	18807f2e 	bgeu	r3,r2,5280 <_malloc_r+0x238>
    5084:	047ffe04 	movi	r17,-8
    5088:	1462703a 	and	r17,r2,r17
    508c:	8800a316 	blt	r17,zero,531c <_malloc_r+0x2d4>
    5090:	8940a236 	bltu	r17,r5,531c <_malloc_r+0x2d4>
    5094:	001ac380 	call	1ac38 <__malloc_lock>
    5098:	00807dc4 	movi	r2,503
    509c:	1441e92e 	bgeu	r2,r17,5844 <_malloc_r+0x7fc>
    50a0:	8804d27a 	srli	r2,r17,9
    50a4:	1000a126 	beq	r2,zero,532c <_malloc_r+0x2e4>
    50a8:	00c00104 	movi	r3,4
    50ac:	18811e36 	bltu	r3,r2,5528 <_malloc_r+0x4e0>
    50b0:	8804d1ba 	srli	r2,r17,6
    50b4:	12000e44 	addi	r8,r2,57
    50b8:	11c00e04 	addi	r7,r2,56
    50bc:	4209883a 	add	r4,r8,r8
    50c0:	04c000b4 	movhi	r19,2
    50c4:	2109883a 	add	r4,r4,r4
    50c8:	9cd85204 	addi	r19,r19,24904
    50cc:	2109883a 	add	r4,r4,r4
    50d0:	9909883a 	add	r4,r19,r4
    50d4:	24000117 	ldw	r16,4(r4)
    50d8:	213ffe04 	addi	r4,r4,-8
    50dc:	24009726 	beq	r4,r16,533c <_malloc_r+0x2f4>
    50e0:	80800117 	ldw	r2,4(r16)
    50e4:	01bfff04 	movi	r6,-4
    50e8:	014003c4 	movi	r5,15
    50ec:	1184703a 	and	r2,r2,r6
    50f0:	1447c83a 	sub	r3,r2,r17
    50f4:	28c00716 	blt	r5,r3,5114 <_malloc_r+0xcc>
    50f8:	1800920e 	bge	r3,zero,5344 <_malloc_r+0x2fc>
    50fc:	84000317 	ldw	r16,12(r16)
    5100:	24008e26 	beq	r4,r16,533c <_malloc_r+0x2f4>
    5104:	80800117 	ldw	r2,4(r16)
    5108:	1184703a 	and	r2,r2,r6
    510c:	1447c83a 	sub	r3,r2,r17
    5110:	28fff90e 	bge	r5,r3,50f8 <__alt_data_end+0xfc0050f8>
    5114:	3809883a 	mov	r4,r7
    5118:	018000b4 	movhi	r6,2
    511c:	9c000417 	ldw	r16,16(r19)
    5120:	31985204 	addi	r6,r6,24904
    5124:	32000204 	addi	r8,r6,8
    5128:	82013426 	beq	r16,r8,55fc <_malloc_r+0x5b4>
    512c:	80c00117 	ldw	r3,4(r16)
    5130:	00bfff04 	movi	r2,-4
    5134:	188e703a 	and	r7,r3,r2
    5138:	3c45c83a 	sub	r2,r7,r17
    513c:	00c003c4 	movi	r3,15
    5140:	18811f16 	blt	r3,r2,55c0 <_malloc_r+0x578>
    5144:	32000515 	stw	r8,20(r6)
    5148:	32000415 	stw	r8,16(r6)
    514c:	10007f0e 	bge	r2,zero,534c <_malloc_r+0x304>
    5150:	00807fc4 	movi	r2,511
    5154:	11c0fd36 	bltu	r2,r7,554c <_malloc_r+0x504>
    5158:	3806d0fa 	srli	r3,r7,3
    515c:	01c00044 	movi	r7,1
    5160:	30800117 	ldw	r2,4(r6)
    5164:	19400044 	addi	r5,r3,1
    5168:	294b883a 	add	r5,r5,r5
    516c:	1807d0ba 	srai	r3,r3,2
    5170:	294b883a 	add	r5,r5,r5
    5174:	294b883a 	add	r5,r5,r5
    5178:	298b883a 	add	r5,r5,r6
    517c:	38c6983a 	sll	r3,r7,r3
    5180:	29c00017 	ldw	r7,0(r5)
    5184:	2a7ffe04 	addi	r9,r5,-8
    5188:	1886b03a 	or	r3,r3,r2
    518c:	82400315 	stw	r9,12(r16)
    5190:	81c00215 	stw	r7,8(r16)
    5194:	30c00115 	stw	r3,4(r6)
    5198:	2c000015 	stw	r16,0(r5)
    519c:	3c000315 	stw	r16,12(r7)
    51a0:	2005d0ba 	srai	r2,r4,2
    51a4:	01400044 	movi	r5,1
    51a8:	288a983a 	sll	r5,r5,r2
    51ac:	19406f36 	bltu	r3,r5,536c <_malloc_r+0x324>
    51b0:	28c4703a 	and	r2,r5,r3
    51b4:	10000a1e 	bne	r2,zero,51e0 <_malloc_r+0x198>
    51b8:	00bfff04 	movi	r2,-4
    51bc:	294b883a 	add	r5,r5,r5
    51c0:	2088703a 	and	r4,r4,r2
    51c4:	28c4703a 	and	r2,r5,r3
    51c8:	21000104 	addi	r4,r4,4
    51cc:	1000041e 	bne	r2,zero,51e0 <_malloc_r+0x198>
    51d0:	294b883a 	add	r5,r5,r5
    51d4:	28c4703a 	and	r2,r5,r3
    51d8:	21000104 	addi	r4,r4,4
    51dc:	103ffc26 	beq	r2,zero,51d0 <__alt_data_end+0xfc0051d0>
    51e0:	02bfff04 	movi	r10,-4
    51e4:	024003c4 	movi	r9,15
    51e8:	21800044 	addi	r6,r4,1
    51ec:	318d883a 	add	r6,r6,r6
    51f0:	318d883a 	add	r6,r6,r6
    51f4:	318d883a 	add	r6,r6,r6
    51f8:	998d883a 	add	r6,r19,r6
    51fc:	333ffe04 	addi	r12,r6,-8
    5200:	2017883a 	mov	r11,r4
    5204:	31800104 	addi	r6,r6,4
    5208:	34000017 	ldw	r16,0(r6)
    520c:	31fffd04 	addi	r7,r6,-12
    5210:	81c0041e 	bne	r16,r7,5224 <_malloc_r+0x1dc>
    5214:	0000fb06 	br	5604 <_malloc_r+0x5bc>
    5218:	1801030e 	bge	r3,zero,5628 <_malloc_r+0x5e0>
    521c:	84000317 	ldw	r16,12(r16)
    5220:	81c0f826 	beq	r16,r7,5604 <_malloc_r+0x5bc>
    5224:	80800117 	ldw	r2,4(r16)
    5228:	1284703a 	and	r2,r2,r10
    522c:	1447c83a 	sub	r3,r2,r17
    5230:	48fff90e 	bge	r9,r3,5218 <__alt_data_end+0xfc005218>
    5234:	80800317 	ldw	r2,12(r16)
    5238:	81000217 	ldw	r4,8(r16)
    523c:	89400054 	ori	r5,r17,1
    5240:	81400115 	stw	r5,4(r16)
    5244:	20800315 	stw	r2,12(r4)
    5248:	11000215 	stw	r4,8(r2)
    524c:	8463883a 	add	r17,r16,r17
    5250:	9c400515 	stw	r17,20(r19)
    5254:	9c400415 	stw	r17,16(r19)
    5258:	18800054 	ori	r2,r3,1
    525c:	88800115 	stw	r2,4(r17)
    5260:	8a000315 	stw	r8,12(r17)
    5264:	8a000215 	stw	r8,8(r17)
    5268:	88e3883a 	add	r17,r17,r3
    526c:	88c00015 	stw	r3,0(r17)
    5270:	9009883a 	mov	r4,r18
    5274:	001ad580 	call	1ad58 <__malloc_unlock>
    5278:	80800204 	addi	r2,r16,8
    527c:	00001b06 	br	52ec <_malloc_r+0x2a4>
    5280:	04400404 	movi	r17,16
    5284:	89402536 	bltu	r17,r5,531c <_malloc_r+0x2d4>
    5288:	001ac380 	call	1ac38 <__malloc_lock>
    528c:	00800184 	movi	r2,6
    5290:	01000084 	movi	r4,2
    5294:	04c000b4 	movhi	r19,2
    5298:	1085883a 	add	r2,r2,r2
    529c:	9cd85204 	addi	r19,r19,24904
    52a0:	1085883a 	add	r2,r2,r2
    52a4:	9885883a 	add	r2,r19,r2
    52a8:	14000117 	ldw	r16,4(r2)
    52ac:	10fffe04 	addi	r3,r2,-8
    52b0:	80c0d926 	beq	r16,r3,5618 <_malloc_r+0x5d0>
    52b4:	80c00117 	ldw	r3,4(r16)
    52b8:	81000317 	ldw	r4,12(r16)
    52bc:	00bfff04 	movi	r2,-4
    52c0:	1884703a 	and	r2,r3,r2
    52c4:	81400217 	ldw	r5,8(r16)
    52c8:	8085883a 	add	r2,r16,r2
    52cc:	10c00117 	ldw	r3,4(r2)
    52d0:	29000315 	stw	r4,12(r5)
    52d4:	21400215 	stw	r5,8(r4)
    52d8:	18c00054 	ori	r3,r3,1
    52dc:	10c00115 	stw	r3,4(r2)
    52e0:	9009883a 	mov	r4,r18
    52e4:	001ad580 	call	1ad58 <__malloc_unlock>
    52e8:	80800204 	addi	r2,r16,8
    52ec:	dfc00a17 	ldw	ra,40(sp)
    52f0:	df000917 	ldw	fp,36(sp)
    52f4:	ddc00817 	ldw	r23,32(sp)
    52f8:	dd800717 	ldw	r22,28(sp)
    52fc:	dd400617 	ldw	r21,24(sp)
    5300:	dd000517 	ldw	r20,20(sp)
    5304:	dcc00417 	ldw	r19,16(sp)
    5308:	dc800317 	ldw	r18,12(sp)
    530c:	dc400217 	ldw	r17,8(sp)
    5310:	dc000117 	ldw	r16,4(sp)
    5314:	dec00b04 	addi	sp,sp,44
    5318:	f800283a 	ret
    531c:	00800304 	movi	r2,12
    5320:	90800015 	stw	r2,0(r18)
    5324:	0005883a 	mov	r2,zero
    5328:	003ff006 	br	52ec <__alt_data_end+0xfc0052ec>
    532c:	01002004 	movi	r4,128
    5330:	02001004 	movi	r8,64
    5334:	01c00fc4 	movi	r7,63
    5338:	003f6106 	br	50c0 <__alt_data_end+0xfc0050c0>
    533c:	4009883a 	mov	r4,r8
    5340:	003f7506 	br	5118 <__alt_data_end+0xfc005118>
    5344:	81000317 	ldw	r4,12(r16)
    5348:	003fde06 	br	52c4 <__alt_data_end+0xfc0052c4>
    534c:	81c5883a 	add	r2,r16,r7
    5350:	11400117 	ldw	r5,4(r2)
    5354:	9009883a 	mov	r4,r18
    5358:	29400054 	ori	r5,r5,1
    535c:	11400115 	stw	r5,4(r2)
    5360:	001ad580 	call	1ad58 <__malloc_unlock>
    5364:	80800204 	addi	r2,r16,8
    5368:	003fe006 	br	52ec <__alt_data_end+0xfc0052ec>
    536c:	9c000217 	ldw	r16,8(r19)
    5370:	00bfff04 	movi	r2,-4
    5374:	85800117 	ldw	r22,4(r16)
    5378:	b0ac703a 	and	r22,r22,r2
    537c:	b4400336 	bltu	r22,r17,538c <_malloc_r+0x344>
    5380:	b445c83a 	sub	r2,r22,r17
    5384:	00c003c4 	movi	r3,15
    5388:	18805d16 	blt	r3,r2,5500 <_malloc_r+0x4b8>
    538c:	05c000b4 	movhi	r23,2
    5390:	008000f4 	movhi	r2,3
    5394:	10a50904 	addi	r2,r2,-27612
    5398:	bdddf904 	addi	r23,r23,30692
    539c:	15400017 	ldw	r21,0(r2)
    53a0:	b8c00017 	ldw	r3,0(r23)
    53a4:	00bfffc4 	movi	r2,-1
    53a8:	858d883a 	add	r6,r16,r22
    53ac:	8d6b883a 	add	r21,r17,r21
    53b0:	1880ea26 	beq	r3,r2,575c <_malloc_r+0x714>
    53b4:	ad4403c4 	addi	r21,r21,4111
    53b8:	00bc0004 	movi	r2,-4096
    53bc:	a8aa703a 	and	r21,r21,r2
    53c0:	a80b883a 	mov	r5,r21
    53c4:	9009883a 	mov	r4,r18
    53c8:	d9800015 	stw	r6,0(sp)
    53cc:	00064740 	call	6474 <_sbrk_r>
    53d0:	1029883a 	mov	r20,r2
    53d4:	00bfffc4 	movi	r2,-1
    53d8:	d9800017 	ldw	r6,0(sp)
    53dc:	a080e826 	beq	r20,r2,5780 <_malloc_r+0x738>
    53e0:	a180a636 	bltu	r20,r6,567c <_malloc_r+0x634>
    53e4:	070000f4 	movhi	fp,3
    53e8:	e7252e04 	addi	fp,fp,-27464
    53ec:	e0800017 	ldw	r2,0(fp)
    53f0:	a887883a 	add	r3,r21,r2
    53f4:	e0c00015 	stw	r3,0(fp)
    53f8:	3500e626 	beq	r6,r20,5794 <_malloc_r+0x74c>
    53fc:	b9000017 	ldw	r4,0(r23)
    5400:	00bfffc4 	movi	r2,-1
    5404:	2080ee26 	beq	r4,r2,57c0 <_malloc_r+0x778>
    5408:	a185c83a 	sub	r2,r20,r6
    540c:	10c5883a 	add	r2,r2,r3
    5410:	e0800015 	stw	r2,0(fp)
    5414:	a0c001cc 	andi	r3,r20,7
    5418:	1800bc26 	beq	r3,zero,570c <_malloc_r+0x6c4>
    541c:	a0e9c83a 	sub	r20,r20,r3
    5420:	00840204 	movi	r2,4104
    5424:	a5000204 	addi	r20,r20,8
    5428:	10c7c83a 	sub	r3,r2,r3
    542c:	a545883a 	add	r2,r20,r21
    5430:	1083ffcc 	andi	r2,r2,4095
    5434:	18abc83a 	sub	r21,r3,r2
    5438:	a80b883a 	mov	r5,r21
    543c:	9009883a 	mov	r4,r18
    5440:	00064740 	call	6474 <_sbrk_r>
    5444:	00ffffc4 	movi	r3,-1
    5448:	10c0e126 	beq	r2,r3,57d0 <_malloc_r+0x788>
    544c:	1505c83a 	sub	r2,r2,r20
    5450:	1545883a 	add	r2,r2,r21
    5454:	10800054 	ori	r2,r2,1
    5458:	e0c00017 	ldw	r3,0(fp)
    545c:	9d000215 	stw	r20,8(r19)
    5460:	a0800115 	stw	r2,4(r20)
    5464:	a8c7883a 	add	r3,r21,r3
    5468:	e0c00015 	stw	r3,0(fp)
    546c:	84c00e26 	beq	r16,r19,54a8 <_malloc_r+0x460>
    5470:	018003c4 	movi	r6,15
    5474:	3580a72e 	bgeu	r6,r22,5714 <_malloc_r+0x6cc>
    5478:	81400117 	ldw	r5,4(r16)
    547c:	013ffe04 	movi	r4,-8
    5480:	b0bffd04 	addi	r2,r22,-12
    5484:	1104703a 	and	r2,r2,r4
    5488:	2900004c 	andi	r4,r5,1
    548c:	2088b03a 	or	r4,r4,r2
    5490:	81000115 	stw	r4,4(r16)
    5494:	01400144 	movi	r5,5
    5498:	8089883a 	add	r4,r16,r2
    549c:	21400115 	stw	r5,4(r4)
    54a0:	21400215 	stw	r5,8(r4)
    54a4:	3080cd36 	bltu	r6,r2,57dc <_malloc_r+0x794>
    54a8:	008000f4 	movhi	r2,3
    54ac:	10a50804 	addi	r2,r2,-27616
    54b0:	11000017 	ldw	r4,0(r2)
    54b4:	20c0012e 	bgeu	r4,r3,54bc <_malloc_r+0x474>
    54b8:	10c00015 	stw	r3,0(r2)
    54bc:	008000f4 	movhi	r2,3
    54c0:	10a50704 	addi	r2,r2,-27620
    54c4:	11000017 	ldw	r4,0(r2)
    54c8:	9c000217 	ldw	r16,8(r19)
    54cc:	20c0012e 	bgeu	r4,r3,54d4 <_malloc_r+0x48c>
    54d0:	10c00015 	stw	r3,0(r2)
    54d4:	80c00117 	ldw	r3,4(r16)
    54d8:	00bfff04 	movi	r2,-4
    54dc:	1886703a 	and	r3,r3,r2
    54e0:	1c45c83a 	sub	r2,r3,r17
    54e4:	1c400236 	bltu	r3,r17,54f0 <_malloc_r+0x4a8>
    54e8:	00c003c4 	movi	r3,15
    54ec:	18800416 	blt	r3,r2,5500 <_malloc_r+0x4b8>
    54f0:	9009883a 	mov	r4,r18
    54f4:	001ad580 	call	1ad58 <__malloc_unlock>
    54f8:	0005883a 	mov	r2,zero
    54fc:	003f7b06 	br	52ec <__alt_data_end+0xfc0052ec>
    5500:	88c00054 	ori	r3,r17,1
    5504:	80c00115 	stw	r3,4(r16)
    5508:	8463883a 	add	r17,r16,r17
    550c:	10800054 	ori	r2,r2,1
    5510:	9c400215 	stw	r17,8(r19)
    5514:	88800115 	stw	r2,4(r17)
    5518:	9009883a 	mov	r4,r18
    551c:	001ad580 	call	1ad58 <__malloc_unlock>
    5520:	80800204 	addi	r2,r16,8
    5524:	003f7106 	br	52ec <__alt_data_end+0xfc0052ec>
    5528:	00c00504 	movi	r3,20
    552c:	18804a2e 	bgeu	r3,r2,5658 <_malloc_r+0x610>
    5530:	00c01504 	movi	r3,84
    5534:	18806e36 	bltu	r3,r2,56f0 <_malloc_r+0x6a8>
    5538:	8804d33a 	srli	r2,r17,12
    553c:	12001bc4 	addi	r8,r2,111
    5540:	11c01b84 	addi	r7,r2,110
    5544:	4209883a 	add	r4,r8,r8
    5548:	003edd06 	br	50c0 <__alt_data_end+0xfc0050c0>
    554c:	3804d27a 	srli	r2,r7,9
    5550:	00c00104 	movi	r3,4
    5554:	1880442e 	bgeu	r3,r2,5668 <_malloc_r+0x620>
    5558:	00c00504 	movi	r3,20
    555c:	18808136 	bltu	r3,r2,5764 <_malloc_r+0x71c>
    5560:	11401704 	addi	r5,r2,92
    5564:	10c016c4 	addi	r3,r2,91
    5568:	294b883a 	add	r5,r5,r5
    556c:	294b883a 	add	r5,r5,r5
    5570:	294b883a 	add	r5,r5,r5
    5574:	994b883a 	add	r5,r19,r5
    5578:	28800017 	ldw	r2,0(r5)
    557c:	018000b4 	movhi	r6,2
    5580:	297ffe04 	addi	r5,r5,-8
    5584:	31985204 	addi	r6,r6,24904
    5588:	28806526 	beq	r5,r2,5720 <_malloc_r+0x6d8>
    558c:	01bfff04 	movi	r6,-4
    5590:	10c00117 	ldw	r3,4(r2)
    5594:	1986703a 	and	r3,r3,r6
    5598:	38c0022e 	bgeu	r7,r3,55a4 <_malloc_r+0x55c>
    559c:	10800217 	ldw	r2,8(r2)
    55a0:	28bffb1e 	bne	r5,r2,5590 <__alt_data_end+0xfc005590>
    55a4:	11400317 	ldw	r5,12(r2)
    55a8:	98c00117 	ldw	r3,4(r19)
    55ac:	81400315 	stw	r5,12(r16)
    55b0:	80800215 	stw	r2,8(r16)
    55b4:	2c000215 	stw	r16,8(r5)
    55b8:	14000315 	stw	r16,12(r2)
    55bc:	003ef806 	br	51a0 <__alt_data_end+0xfc0051a0>
    55c0:	88c00054 	ori	r3,r17,1
    55c4:	80c00115 	stw	r3,4(r16)
    55c8:	8463883a 	add	r17,r16,r17
    55cc:	34400515 	stw	r17,20(r6)
    55d0:	34400415 	stw	r17,16(r6)
    55d4:	10c00054 	ori	r3,r2,1
    55d8:	8a000315 	stw	r8,12(r17)
    55dc:	8a000215 	stw	r8,8(r17)
    55e0:	88c00115 	stw	r3,4(r17)
    55e4:	88a3883a 	add	r17,r17,r2
    55e8:	88800015 	stw	r2,0(r17)
    55ec:	9009883a 	mov	r4,r18
    55f0:	001ad580 	call	1ad58 <__malloc_unlock>
    55f4:	80800204 	addi	r2,r16,8
    55f8:	003f3c06 	br	52ec <__alt_data_end+0xfc0052ec>
    55fc:	30c00117 	ldw	r3,4(r6)
    5600:	003ee706 	br	51a0 <__alt_data_end+0xfc0051a0>
    5604:	5ac00044 	addi	r11,r11,1
    5608:	588000cc 	andi	r2,r11,3
    560c:	31800204 	addi	r6,r6,8
    5610:	103efd1e 	bne	r2,zero,5208 <__alt_data_end+0xfc005208>
    5614:	00002406 	br	56a8 <_malloc_r+0x660>
    5618:	14000317 	ldw	r16,12(r2)
    561c:	143f251e 	bne	r2,r16,52b4 <__alt_data_end+0xfc0052b4>
    5620:	21000084 	addi	r4,r4,2
    5624:	003ebc06 	br	5118 <__alt_data_end+0xfc005118>
    5628:	8085883a 	add	r2,r16,r2
    562c:	10c00117 	ldw	r3,4(r2)
    5630:	81000317 	ldw	r4,12(r16)
    5634:	81400217 	ldw	r5,8(r16)
    5638:	18c00054 	ori	r3,r3,1
    563c:	10c00115 	stw	r3,4(r2)
    5640:	29000315 	stw	r4,12(r5)
    5644:	21400215 	stw	r5,8(r4)
    5648:	9009883a 	mov	r4,r18
    564c:	001ad580 	call	1ad58 <__malloc_unlock>
    5650:	80800204 	addi	r2,r16,8
    5654:	003f2506 	br	52ec <__alt_data_end+0xfc0052ec>
    5658:	12001704 	addi	r8,r2,92
    565c:	11c016c4 	addi	r7,r2,91
    5660:	4209883a 	add	r4,r8,r8
    5664:	003e9606 	br	50c0 <__alt_data_end+0xfc0050c0>
    5668:	3804d1ba 	srli	r2,r7,6
    566c:	11400e44 	addi	r5,r2,57
    5670:	10c00e04 	addi	r3,r2,56
    5674:	294b883a 	add	r5,r5,r5
    5678:	003fbc06 	br	556c <__alt_data_end+0xfc00556c>
    567c:	84ff5926 	beq	r16,r19,53e4 <__alt_data_end+0xfc0053e4>
    5680:	008000b4 	movhi	r2,2
    5684:	10985204 	addi	r2,r2,24904
    5688:	14000217 	ldw	r16,8(r2)
    568c:	00bfff04 	movi	r2,-4
    5690:	80c00117 	ldw	r3,4(r16)
    5694:	1886703a 	and	r3,r3,r2
    5698:	003f9106 	br	54e0 <__alt_data_end+0xfc0054e0>
    569c:	60800217 	ldw	r2,8(r12)
    56a0:	213fffc4 	addi	r4,r4,-1
    56a4:	1300651e 	bne	r2,r12,583c <_malloc_r+0x7f4>
    56a8:	208000cc 	andi	r2,r4,3
    56ac:	633ffe04 	addi	r12,r12,-8
    56b0:	103ffa1e 	bne	r2,zero,569c <__alt_data_end+0xfc00569c>
    56b4:	98800117 	ldw	r2,4(r19)
    56b8:	0146303a 	nor	r3,zero,r5
    56bc:	1884703a 	and	r2,r3,r2
    56c0:	98800115 	stw	r2,4(r19)
    56c4:	294b883a 	add	r5,r5,r5
    56c8:	117f2836 	bltu	r2,r5,536c <__alt_data_end+0xfc00536c>
    56cc:	283f2726 	beq	r5,zero,536c <__alt_data_end+0xfc00536c>
    56d0:	2886703a 	and	r3,r5,r2
    56d4:	5809883a 	mov	r4,r11
    56d8:	183ec31e 	bne	r3,zero,51e8 <__alt_data_end+0xfc0051e8>
    56dc:	294b883a 	add	r5,r5,r5
    56e0:	2886703a 	and	r3,r5,r2
    56e4:	21000104 	addi	r4,r4,4
    56e8:	183ffc26 	beq	r3,zero,56dc <__alt_data_end+0xfc0056dc>
    56ec:	003ebe06 	br	51e8 <__alt_data_end+0xfc0051e8>
    56f0:	00c05504 	movi	r3,340
    56f4:	18801236 	bltu	r3,r2,5740 <_malloc_r+0x6f8>
    56f8:	8804d3fa 	srli	r2,r17,15
    56fc:	12001e04 	addi	r8,r2,120
    5700:	11c01dc4 	addi	r7,r2,119
    5704:	4209883a 	add	r4,r8,r8
    5708:	003e6d06 	br	50c0 <__alt_data_end+0xfc0050c0>
    570c:	00c40004 	movi	r3,4096
    5710:	003f4606 	br	542c <__alt_data_end+0xfc00542c>
    5714:	00800044 	movi	r2,1
    5718:	a0800115 	stw	r2,4(r20)
    571c:	003f7406 	br	54f0 <__alt_data_end+0xfc0054f0>
    5720:	1805d0ba 	srai	r2,r3,2
    5724:	01c00044 	movi	r7,1
    5728:	30c00117 	ldw	r3,4(r6)
    572c:	388e983a 	sll	r7,r7,r2
    5730:	2805883a 	mov	r2,r5
    5734:	38c6b03a 	or	r3,r7,r3
    5738:	30c00115 	stw	r3,4(r6)
    573c:	003f9b06 	br	55ac <__alt_data_end+0xfc0055ac>
    5740:	00c15504 	movi	r3,1364
    5744:	18801a36 	bltu	r3,r2,57b0 <_malloc_r+0x768>
    5748:	8804d4ba 	srli	r2,r17,18
    574c:	12001f44 	addi	r8,r2,125
    5750:	11c01f04 	addi	r7,r2,124
    5754:	4209883a 	add	r4,r8,r8
    5758:	003e5906 	br	50c0 <__alt_data_end+0xfc0050c0>
    575c:	ad400404 	addi	r21,r21,16
    5760:	003f1706 	br	53c0 <__alt_data_end+0xfc0053c0>
    5764:	00c01504 	movi	r3,84
    5768:	18802336 	bltu	r3,r2,57f8 <_malloc_r+0x7b0>
    576c:	3804d33a 	srli	r2,r7,12
    5770:	11401bc4 	addi	r5,r2,111
    5774:	10c01b84 	addi	r3,r2,110
    5778:	294b883a 	add	r5,r5,r5
    577c:	003f7b06 	br	556c <__alt_data_end+0xfc00556c>
    5780:	9c000217 	ldw	r16,8(r19)
    5784:	00bfff04 	movi	r2,-4
    5788:	80c00117 	ldw	r3,4(r16)
    578c:	1886703a 	and	r3,r3,r2
    5790:	003f5306 	br	54e0 <__alt_data_end+0xfc0054e0>
    5794:	3083ffcc 	andi	r2,r6,4095
    5798:	103f181e 	bne	r2,zero,53fc <__alt_data_end+0xfc0053fc>
    579c:	99000217 	ldw	r4,8(r19)
    57a0:	b545883a 	add	r2,r22,r21
    57a4:	10800054 	ori	r2,r2,1
    57a8:	20800115 	stw	r2,4(r4)
    57ac:	003f3e06 	br	54a8 <__alt_data_end+0xfc0054a8>
    57b0:	01003f84 	movi	r4,254
    57b4:	02001fc4 	movi	r8,127
    57b8:	01c01f84 	movi	r7,126
    57bc:	003e4006 	br	50c0 <__alt_data_end+0xfc0050c0>
    57c0:	008000b4 	movhi	r2,2
    57c4:	109df904 	addi	r2,r2,30692
    57c8:	15000015 	stw	r20,0(r2)
    57cc:	003f1106 	br	5414 <__alt_data_end+0xfc005414>
    57d0:	00800044 	movi	r2,1
    57d4:	002b883a 	mov	r21,zero
    57d8:	003f1f06 	br	5458 <__alt_data_end+0xfc005458>
    57dc:	81400204 	addi	r5,r16,8
    57e0:	9009883a 	mov	r4,r18
    57e4:	000c6780 	call	c678 <_free_r>
    57e8:	008000f4 	movhi	r2,3
    57ec:	10a52e04 	addi	r2,r2,-27464
    57f0:	10c00017 	ldw	r3,0(r2)
    57f4:	003f2c06 	br	54a8 <__alt_data_end+0xfc0054a8>
    57f8:	00c05504 	movi	r3,340
    57fc:	18800536 	bltu	r3,r2,5814 <_malloc_r+0x7cc>
    5800:	3804d3fa 	srli	r2,r7,15
    5804:	11401e04 	addi	r5,r2,120
    5808:	10c01dc4 	addi	r3,r2,119
    580c:	294b883a 	add	r5,r5,r5
    5810:	003f5606 	br	556c <__alt_data_end+0xfc00556c>
    5814:	00c15504 	movi	r3,1364
    5818:	18800536 	bltu	r3,r2,5830 <_malloc_r+0x7e8>
    581c:	3804d4ba 	srli	r2,r7,18
    5820:	11401f44 	addi	r5,r2,125
    5824:	10c01f04 	addi	r3,r2,124
    5828:	294b883a 	add	r5,r5,r5
    582c:	003f4f06 	br	556c <__alt_data_end+0xfc00556c>
    5830:	01403f84 	movi	r5,254
    5834:	00c01f84 	movi	r3,126
    5838:	003f4c06 	br	556c <__alt_data_end+0xfc00556c>
    583c:	98800117 	ldw	r2,4(r19)
    5840:	003fa006 	br	56c4 <__alt_data_end+0xfc0056c4>
    5844:	8808d0fa 	srli	r4,r17,3
    5848:	20800044 	addi	r2,r4,1
    584c:	1085883a 	add	r2,r2,r2
    5850:	003e9006 	br	5294 <__alt_data_end+0xfc005294>

00005854 <memchr>:
    5854:	208000cc 	andi	r2,r4,3
    5858:	280f883a 	mov	r7,r5
    585c:	10003426 	beq	r2,zero,5930 <memchr+0xdc>
    5860:	30bfffc4 	addi	r2,r6,-1
    5864:	30001a26 	beq	r6,zero,58d0 <memchr+0x7c>
    5868:	20c00003 	ldbu	r3,0(r4)
    586c:	29803fcc 	andi	r6,r5,255
    5870:	30c0051e 	bne	r6,r3,5888 <memchr+0x34>
    5874:	00001806 	br	58d8 <memchr+0x84>
    5878:	10001526 	beq	r2,zero,58d0 <memchr+0x7c>
    587c:	20c00003 	ldbu	r3,0(r4)
    5880:	10bfffc4 	addi	r2,r2,-1
    5884:	30c01426 	beq	r6,r3,58d8 <memchr+0x84>
    5888:	21000044 	addi	r4,r4,1
    588c:	20c000cc 	andi	r3,r4,3
    5890:	183ff91e 	bne	r3,zero,5878 <__alt_data_end+0xfc005878>
    5894:	020000c4 	movi	r8,3
    5898:	40801136 	bltu	r8,r2,58e0 <memchr+0x8c>
    589c:	10000c26 	beq	r2,zero,58d0 <memchr+0x7c>
    58a0:	20c00003 	ldbu	r3,0(r4)
    58a4:	29403fcc 	andi	r5,r5,255
    58a8:	28c00b26 	beq	r5,r3,58d8 <memchr+0x84>
    58ac:	20c00044 	addi	r3,r4,1
    58b0:	39803fcc 	andi	r6,r7,255
    58b4:	2089883a 	add	r4,r4,r2
    58b8:	00000306 	br	58c8 <memchr+0x74>
    58bc:	18c00044 	addi	r3,r3,1
    58c0:	197fffc3 	ldbu	r5,-1(r3)
    58c4:	31400526 	beq	r6,r5,58dc <memchr+0x88>
    58c8:	1805883a 	mov	r2,r3
    58cc:	20fffb1e 	bne	r4,r3,58bc <__alt_data_end+0xfc0058bc>
    58d0:	0005883a 	mov	r2,zero
    58d4:	f800283a 	ret
    58d8:	2005883a 	mov	r2,r4
    58dc:	f800283a 	ret
    58e0:	28c03fcc 	andi	r3,r5,255
    58e4:	1812923a 	slli	r9,r3,8
    58e8:	02ffbff4 	movhi	r11,65279
    58ec:	02a02074 	movhi	r10,32897
    58f0:	48d2b03a 	or	r9,r9,r3
    58f4:	4806943a 	slli	r3,r9,16
    58f8:	5affbfc4 	addi	r11,r11,-257
    58fc:	52a02004 	addi	r10,r10,-32640
    5900:	48d2b03a 	or	r9,r9,r3
    5904:	20c00017 	ldw	r3,0(r4)
    5908:	48c6f03a 	xor	r3,r9,r3
    590c:	1acd883a 	add	r6,r3,r11
    5910:	00c6303a 	nor	r3,zero,r3
    5914:	30c6703a 	and	r3,r6,r3
    5918:	1a86703a 	and	r3,r3,r10
    591c:	183fe01e 	bne	r3,zero,58a0 <__alt_data_end+0xfc0058a0>
    5920:	10bfff04 	addi	r2,r2,-4
    5924:	21000104 	addi	r4,r4,4
    5928:	40bff636 	bltu	r8,r2,5904 <__alt_data_end+0xfc005904>
    592c:	003fdb06 	br	589c <__alt_data_end+0xfc00589c>
    5930:	3005883a 	mov	r2,r6
    5934:	003fd706 	br	5894 <__alt_data_end+0xfc005894>

00005938 <memcpy>:
    5938:	defffd04 	addi	sp,sp,-12
    593c:	dfc00215 	stw	ra,8(sp)
    5940:	dc400115 	stw	r17,4(sp)
    5944:	dc000015 	stw	r16,0(sp)
    5948:	00c003c4 	movi	r3,15
    594c:	2005883a 	mov	r2,r4
    5950:	1980452e 	bgeu	r3,r6,5a68 <memcpy+0x130>
    5954:	2906b03a 	or	r3,r5,r4
    5958:	18c000cc 	andi	r3,r3,3
    595c:	1800441e 	bne	r3,zero,5a70 <memcpy+0x138>
    5960:	347ffc04 	addi	r17,r6,-16
    5964:	8822d13a 	srli	r17,r17,4
    5968:	28c00104 	addi	r3,r5,4
    596c:	23400104 	addi	r13,r4,4
    5970:	8820913a 	slli	r16,r17,4
    5974:	2b000204 	addi	r12,r5,8
    5978:	22c00204 	addi	r11,r4,8
    597c:	84000504 	addi	r16,r16,20
    5980:	2a800304 	addi	r10,r5,12
    5984:	22400304 	addi	r9,r4,12
    5988:	2c21883a 	add	r16,r5,r16
    598c:	2811883a 	mov	r8,r5
    5990:	200f883a 	mov	r7,r4
    5994:	41000017 	ldw	r4,0(r8)
    5998:	1fc00017 	ldw	ra,0(r3)
    599c:	63c00017 	ldw	r15,0(r12)
    59a0:	39000015 	stw	r4,0(r7)
    59a4:	53800017 	ldw	r14,0(r10)
    59a8:	6fc00015 	stw	ra,0(r13)
    59ac:	5bc00015 	stw	r15,0(r11)
    59b0:	4b800015 	stw	r14,0(r9)
    59b4:	18c00404 	addi	r3,r3,16
    59b8:	39c00404 	addi	r7,r7,16
    59bc:	42000404 	addi	r8,r8,16
    59c0:	6b400404 	addi	r13,r13,16
    59c4:	63000404 	addi	r12,r12,16
    59c8:	5ac00404 	addi	r11,r11,16
    59cc:	52800404 	addi	r10,r10,16
    59d0:	4a400404 	addi	r9,r9,16
    59d4:	1c3fef1e 	bne	r3,r16,5994 <__alt_data_end+0xfc005994>
    59d8:	89c00044 	addi	r7,r17,1
    59dc:	380e913a 	slli	r7,r7,4
    59e0:	310003cc 	andi	r4,r6,15
    59e4:	02c000c4 	movi	r11,3
    59e8:	11c7883a 	add	r3,r2,r7
    59ec:	29cb883a 	add	r5,r5,r7
    59f0:	5900212e 	bgeu	r11,r4,5a78 <memcpy+0x140>
    59f4:	1813883a 	mov	r9,r3
    59f8:	2811883a 	mov	r8,r5
    59fc:	200f883a 	mov	r7,r4
    5a00:	42800017 	ldw	r10,0(r8)
    5a04:	4a400104 	addi	r9,r9,4
    5a08:	39ffff04 	addi	r7,r7,-4
    5a0c:	4abfff15 	stw	r10,-4(r9)
    5a10:	42000104 	addi	r8,r8,4
    5a14:	59fffa36 	bltu	r11,r7,5a00 <__alt_data_end+0xfc005a00>
    5a18:	213fff04 	addi	r4,r4,-4
    5a1c:	2008d0ba 	srli	r4,r4,2
    5a20:	318000cc 	andi	r6,r6,3
    5a24:	21000044 	addi	r4,r4,1
    5a28:	2109883a 	add	r4,r4,r4
    5a2c:	2109883a 	add	r4,r4,r4
    5a30:	1907883a 	add	r3,r3,r4
    5a34:	290b883a 	add	r5,r5,r4
    5a38:	30000626 	beq	r6,zero,5a54 <memcpy+0x11c>
    5a3c:	198d883a 	add	r6,r3,r6
    5a40:	29c00003 	ldbu	r7,0(r5)
    5a44:	18c00044 	addi	r3,r3,1
    5a48:	29400044 	addi	r5,r5,1
    5a4c:	19ffffc5 	stb	r7,-1(r3)
    5a50:	19bffb1e 	bne	r3,r6,5a40 <__alt_data_end+0xfc005a40>
    5a54:	dfc00217 	ldw	ra,8(sp)
    5a58:	dc400117 	ldw	r17,4(sp)
    5a5c:	dc000017 	ldw	r16,0(sp)
    5a60:	dec00304 	addi	sp,sp,12
    5a64:	f800283a 	ret
    5a68:	2007883a 	mov	r3,r4
    5a6c:	003ff206 	br	5a38 <__alt_data_end+0xfc005a38>
    5a70:	2007883a 	mov	r3,r4
    5a74:	003ff106 	br	5a3c <__alt_data_end+0xfc005a3c>
    5a78:	200d883a 	mov	r6,r4
    5a7c:	003fee06 	br	5a38 <__alt_data_end+0xfc005a38>

00005a80 <memset>:
    5a80:	20c000cc 	andi	r3,r4,3
    5a84:	2005883a 	mov	r2,r4
    5a88:	18004426 	beq	r3,zero,5b9c <memset+0x11c>
    5a8c:	31ffffc4 	addi	r7,r6,-1
    5a90:	30004026 	beq	r6,zero,5b94 <memset+0x114>
    5a94:	2813883a 	mov	r9,r5
    5a98:	200d883a 	mov	r6,r4
    5a9c:	2007883a 	mov	r3,r4
    5aa0:	00000406 	br	5ab4 <memset+0x34>
    5aa4:	3a3fffc4 	addi	r8,r7,-1
    5aa8:	31800044 	addi	r6,r6,1
    5aac:	38003926 	beq	r7,zero,5b94 <memset+0x114>
    5ab0:	400f883a 	mov	r7,r8
    5ab4:	18c00044 	addi	r3,r3,1
    5ab8:	32400005 	stb	r9,0(r6)
    5abc:	1a0000cc 	andi	r8,r3,3
    5ac0:	403ff81e 	bne	r8,zero,5aa4 <__alt_data_end+0xfc005aa4>
    5ac4:	010000c4 	movi	r4,3
    5ac8:	21c02d2e 	bgeu	r4,r7,5b80 <memset+0x100>
    5acc:	29003fcc 	andi	r4,r5,255
    5ad0:	200c923a 	slli	r6,r4,8
    5ad4:	3108b03a 	or	r4,r6,r4
    5ad8:	200c943a 	slli	r6,r4,16
    5adc:	218cb03a 	or	r6,r4,r6
    5ae0:	010003c4 	movi	r4,15
    5ae4:	21c0182e 	bgeu	r4,r7,5b48 <memset+0xc8>
    5ae8:	3b3ffc04 	addi	r12,r7,-16
    5aec:	6018d13a 	srli	r12,r12,4
    5af0:	1a000104 	addi	r8,r3,4
    5af4:	1ac00204 	addi	r11,r3,8
    5af8:	6008913a 	slli	r4,r12,4
    5afc:	1a800304 	addi	r10,r3,12
    5b00:	1813883a 	mov	r9,r3
    5b04:	21000504 	addi	r4,r4,20
    5b08:	1909883a 	add	r4,r3,r4
    5b0c:	49800015 	stw	r6,0(r9)
    5b10:	41800015 	stw	r6,0(r8)
    5b14:	59800015 	stw	r6,0(r11)
    5b18:	51800015 	stw	r6,0(r10)
    5b1c:	42000404 	addi	r8,r8,16
    5b20:	4a400404 	addi	r9,r9,16
    5b24:	5ac00404 	addi	r11,r11,16
    5b28:	52800404 	addi	r10,r10,16
    5b2c:	413ff71e 	bne	r8,r4,5b0c <__alt_data_end+0xfc005b0c>
    5b30:	63000044 	addi	r12,r12,1
    5b34:	6018913a 	slli	r12,r12,4
    5b38:	39c003cc 	andi	r7,r7,15
    5b3c:	010000c4 	movi	r4,3
    5b40:	1b07883a 	add	r3,r3,r12
    5b44:	21c00e2e 	bgeu	r4,r7,5b80 <memset+0x100>
    5b48:	1813883a 	mov	r9,r3
    5b4c:	3811883a 	mov	r8,r7
    5b50:	010000c4 	movi	r4,3
    5b54:	49800015 	stw	r6,0(r9)
    5b58:	423fff04 	addi	r8,r8,-4
    5b5c:	4a400104 	addi	r9,r9,4
    5b60:	223ffc36 	bltu	r4,r8,5b54 <__alt_data_end+0xfc005b54>
    5b64:	393fff04 	addi	r4,r7,-4
    5b68:	2008d0ba 	srli	r4,r4,2
    5b6c:	39c000cc 	andi	r7,r7,3
    5b70:	21000044 	addi	r4,r4,1
    5b74:	2109883a 	add	r4,r4,r4
    5b78:	2109883a 	add	r4,r4,r4
    5b7c:	1907883a 	add	r3,r3,r4
    5b80:	38000526 	beq	r7,zero,5b98 <memset+0x118>
    5b84:	19cf883a 	add	r7,r3,r7
    5b88:	19400005 	stb	r5,0(r3)
    5b8c:	18c00044 	addi	r3,r3,1
    5b90:	38fffd1e 	bne	r7,r3,5b88 <__alt_data_end+0xfc005b88>
    5b94:	f800283a 	ret
    5b98:	f800283a 	ret
    5b9c:	2007883a 	mov	r3,r4
    5ba0:	300f883a 	mov	r7,r6
    5ba4:	003fc706 	br	5ac4 <__alt_data_end+0xfc005ac4>

00005ba8 <_printf_r>:
    5ba8:	defffd04 	addi	sp,sp,-12
    5bac:	2805883a 	mov	r2,r5
    5bb0:	dfc00015 	stw	ra,0(sp)
    5bb4:	d9800115 	stw	r6,4(sp)
    5bb8:	d9c00215 	stw	r7,8(sp)
    5bbc:	21400217 	ldw	r5,8(r4)
    5bc0:	d9c00104 	addi	r7,sp,4
    5bc4:	100d883a 	mov	r6,r2
    5bc8:	000695c0 	call	695c <___vfprintf_internal_r>
    5bcc:	dfc00017 	ldw	ra,0(sp)
    5bd0:	dec00304 	addi	sp,sp,12
    5bd4:	f800283a 	ret

00005bd8 <printf>:
    5bd8:	defffc04 	addi	sp,sp,-16
    5bdc:	dfc00015 	stw	ra,0(sp)
    5be0:	d9400115 	stw	r5,4(sp)
    5be4:	d9800215 	stw	r6,8(sp)
    5be8:	d9c00315 	stw	r7,12(sp)
    5bec:	008000b4 	movhi	r2,2
    5bf0:	109df804 	addi	r2,r2,30688
    5bf4:	10800017 	ldw	r2,0(r2)
    5bf8:	200b883a 	mov	r5,r4
    5bfc:	d9800104 	addi	r6,sp,4
    5c00:	11000217 	ldw	r4,8(r2)
    5c04:	0008b540 	call	8b54 <__vfprintf_internal>
    5c08:	dfc00017 	ldw	ra,0(sp)
    5c0c:	dec00404 	addi	sp,sp,16
    5c10:	f800283a 	ret

00005c14 <_putchar_r>:
    5c14:	21800217 	ldw	r6,8(r4)
    5c18:	000e4e81 	jmpi	e4e8 <_putc_r>

00005c1c <putchar>:
    5c1c:	008000b4 	movhi	r2,2
    5c20:	109df804 	addi	r2,r2,30688
    5c24:	200b883a 	mov	r5,r4
    5c28:	11000017 	ldw	r4,0(r2)
    5c2c:	21800217 	ldw	r6,8(r4)
    5c30:	000e4e81 	jmpi	e4e8 <_putc_r>

00005c34 <_puts_r>:
    5c34:	defff604 	addi	sp,sp,-40
    5c38:	dc000715 	stw	r16,28(sp)
    5c3c:	2021883a 	mov	r16,r4
    5c40:	2809883a 	mov	r4,r5
    5c44:	dc400815 	stw	r17,32(sp)
    5c48:	dfc00915 	stw	ra,36(sp)
    5c4c:	2823883a 	mov	r17,r5
    5c50:	00066700 	call	6670 <strlen>
    5c54:	10c00044 	addi	r3,r2,1
    5c58:	d8800115 	stw	r2,4(sp)
    5c5c:	008000b4 	movhi	r2,2
    5c60:	10953004 	addi	r2,r2,21696
    5c64:	d8800215 	stw	r2,8(sp)
    5c68:	00800044 	movi	r2,1
    5c6c:	d8800315 	stw	r2,12(sp)
    5c70:	00800084 	movi	r2,2
    5c74:	dc400015 	stw	r17,0(sp)
    5c78:	d8c00615 	stw	r3,24(sp)
    5c7c:	dec00415 	stw	sp,16(sp)
    5c80:	d8800515 	stw	r2,20(sp)
    5c84:	80000226 	beq	r16,zero,5c90 <_puts_r+0x5c>
    5c88:	80800e17 	ldw	r2,56(r16)
    5c8c:	10001426 	beq	r2,zero,5ce0 <_puts_r+0xac>
    5c90:	81400217 	ldw	r5,8(r16)
    5c94:	2880030b 	ldhu	r2,12(r5)
    5c98:	10c8000c 	andi	r3,r2,8192
    5c9c:	1800061e 	bne	r3,zero,5cb8 <_puts_r+0x84>
    5ca0:	29001917 	ldw	r4,100(r5)
    5ca4:	00f7ffc4 	movi	r3,-8193
    5ca8:	10880014 	ori	r2,r2,8192
    5cac:	20c6703a 	and	r3,r4,r3
    5cb0:	2880030d 	sth	r2,12(r5)
    5cb4:	28c01915 	stw	r3,100(r5)
    5cb8:	d9800404 	addi	r6,sp,16
    5cbc:	8009883a 	mov	r4,r16
    5cc0:	000c9880 	call	c988 <__sfvwrite_r>
    5cc4:	1000091e 	bne	r2,zero,5cec <_puts_r+0xb8>
    5cc8:	00800284 	movi	r2,10
    5ccc:	dfc00917 	ldw	ra,36(sp)
    5cd0:	dc400817 	ldw	r17,32(sp)
    5cd4:	dc000717 	ldw	r16,28(sp)
    5cd8:	dec00a04 	addi	sp,sp,40
    5cdc:	f800283a 	ret
    5ce0:	8009883a 	mov	r4,r16
    5ce4:	0004e480 	call	4e48 <__sinit>
    5ce8:	003fe906 	br	5c90 <__alt_data_end+0xfc005c90>
    5cec:	00bfffc4 	movi	r2,-1
    5cf0:	003ff606 	br	5ccc <__alt_data_end+0xfc005ccc>

00005cf4 <puts>:
    5cf4:	008000b4 	movhi	r2,2
    5cf8:	109df804 	addi	r2,r2,30688
    5cfc:	200b883a 	mov	r5,r4
    5d00:	11000017 	ldw	r4,0(r2)
    5d04:	0005c341 	jmpi	5c34 <_puts_r>

00005d08 <realloc>:
    5d08:	008000b4 	movhi	r2,2
    5d0c:	109df804 	addi	r2,r2,30688
    5d10:	280d883a 	mov	r6,r5
    5d14:	200b883a 	mov	r5,r4
    5d18:	11000017 	ldw	r4,0(r2)
    5d1c:	0005d201 	jmpi	5d20 <_realloc_r>

00005d20 <_realloc_r>:
    5d20:	defff604 	addi	sp,sp,-40
    5d24:	dc800215 	stw	r18,8(sp)
    5d28:	dfc00915 	stw	ra,36(sp)
    5d2c:	df000815 	stw	fp,32(sp)
    5d30:	ddc00715 	stw	r23,28(sp)
    5d34:	dd800615 	stw	r22,24(sp)
    5d38:	dd400515 	stw	r21,20(sp)
    5d3c:	dd000415 	stw	r20,16(sp)
    5d40:	dcc00315 	stw	r19,12(sp)
    5d44:	dc400115 	stw	r17,4(sp)
    5d48:	dc000015 	stw	r16,0(sp)
    5d4c:	3025883a 	mov	r18,r6
    5d50:	2800b726 	beq	r5,zero,6030 <_realloc_r+0x310>
    5d54:	282b883a 	mov	r21,r5
    5d58:	2029883a 	mov	r20,r4
    5d5c:	001ac380 	call	1ac38 <__malloc_lock>
    5d60:	a8bfff17 	ldw	r2,-4(r21)
    5d64:	043fff04 	movi	r16,-4
    5d68:	90c002c4 	addi	r3,r18,11
    5d6c:	01000584 	movi	r4,22
    5d70:	acfffe04 	addi	r19,r21,-8
    5d74:	1420703a 	and	r16,r2,r16
    5d78:	20c0332e 	bgeu	r4,r3,5e48 <_realloc_r+0x128>
    5d7c:	047ffe04 	movi	r17,-8
    5d80:	1c62703a 	and	r17,r3,r17
    5d84:	8807883a 	mov	r3,r17
    5d88:	88005816 	blt	r17,zero,5eec <_realloc_r+0x1cc>
    5d8c:	8c805736 	bltu	r17,r18,5eec <_realloc_r+0x1cc>
    5d90:	80c0300e 	bge	r16,r3,5e54 <_realloc_r+0x134>
    5d94:	070000b4 	movhi	fp,2
    5d98:	e7185204 	addi	fp,fp,24904
    5d9c:	e1c00217 	ldw	r7,8(fp)
    5da0:	9c09883a 	add	r4,r19,r16
    5da4:	22000117 	ldw	r8,4(r4)
    5da8:	21c06326 	beq	r4,r7,5f38 <_realloc_r+0x218>
    5dac:	017fff84 	movi	r5,-2
    5db0:	414a703a 	and	r5,r8,r5
    5db4:	214b883a 	add	r5,r4,r5
    5db8:	29800117 	ldw	r6,4(r5)
    5dbc:	3180004c 	andi	r6,r6,1
    5dc0:	30003f26 	beq	r6,zero,5ec0 <_realloc_r+0x1a0>
    5dc4:	1080004c 	andi	r2,r2,1
    5dc8:	10008326 	beq	r2,zero,5fd8 <_realloc_r+0x2b8>
    5dcc:	900b883a 	mov	r5,r18
    5dd0:	a009883a 	mov	r4,r20
    5dd4:	00050480 	call	5048 <_malloc_r>
    5dd8:	1025883a 	mov	r18,r2
    5ddc:	10011e26 	beq	r2,zero,6258 <_realloc_r+0x538>
    5de0:	a93fff17 	ldw	r4,-4(r21)
    5de4:	10fffe04 	addi	r3,r2,-8
    5de8:	00bfff84 	movi	r2,-2
    5dec:	2084703a 	and	r2,r4,r2
    5df0:	9885883a 	add	r2,r19,r2
    5df4:	1880ee26 	beq	r3,r2,61b0 <_realloc_r+0x490>
    5df8:	81bfff04 	addi	r6,r16,-4
    5dfc:	00800904 	movi	r2,36
    5e00:	1180b836 	bltu	r2,r6,60e4 <_realloc_r+0x3c4>
    5e04:	00c004c4 	movi	r3,19
    5e08:	19809636 	bltu	r3,r6,6064 <_realloc_r+0x344>
    5e0c:	9005883a 	mov	r2,r18
    5e10:	a807883a 	mov	r3,r21
    5e14:	19000017 	ldw	r4,0(r3)
    5e18:	11000015 	stw	r4,0(r2)
    5e1c:	19000117 	ldw	r4,4(r3)
    5e20:	11000115 	stw	r4,4(r2)
    5e24:	18c00217 	ldw	r3,8(r3)
    5e28:	10c00215 	stw	r3,8(r2)
    5e2c:	a80b883a 	mov	r5,r21
    5e30:	a009883a 	mov	r4,r20
    5e34:	000c6780 	call	c678 <_free_r>
    5e38:	a009883a 	mov	r4,r20
    5e3c:	001ad580 	call	1ad58 <__malloc_unlock>
    5e40:	9005883a 	mov	r2,r18
    5e44:	00001206 	br	5e90 <_realloc_r+0x170>
    5e48:	00c00404 	movi	r3,16
    5e4c:	1823883a 	mov	r17,r3
    5e50:	003fce06 	br	5d8c <__alt_data_end+0xfc005d8c>
    5e54:	a825883a 	mov	r18,r21
    5e58:	8445c83a 	sub	r2,r16,r17
    5e5c:	00c003c4 	movi	r3,15
    5e60:	18802636 	bltu	r3,r2,5efc <_realloc_r+0x1dc>
    5e64:	99800117 	ldw	r6,4(r19)
    5e68:	9c07883a 	add	r3,r19,r16
    5e6c:	3180004c 	andi	r6,r6,1
    5e70:	3420b03a 	or	r16,r6,r16
    5e74:	9c000115 	stw	r16,4(r19)
    5e78:	18800117 	ldw	r2,4(r3)
    5e7c:	10800054 	ori	r2,r2,1
    5e80:	18800115 	stw	r2,4(r3)
    5e84:	a009883a 	mov	r4,r20
    5e88:	001ad580 	call	1ad58 <__malloc_unlock>
    5e8c:	9005883a 	mov	r2,r18
    5e90:	dfc00917 	ldw	ra,36(sp)
    5e94:	df000817 	ldw	fp,32(sp)
    5e98:	ddc00717 	ldw	r23,28(sp)
    5e9c:	dd800617 	ldw	r22,24(sp)
    5ea0:	dd400517 	ldw	r21,20(sp)
    5ea4:	dd000417 	ldw	r20,16(sp)
    5ea8:	dcc00317 	ldw	r19,12(sp)
    5eac:	dc800217 	ldw	r18,8(sp)
    5eb0:	dc400117 	ldw	r17,4(sp)
    5eb4:	dc000017 	ldw	r16,0(sp)
    5eb8:	dec00a04 	addi	sp,sp,40
    5ebc:	f800283a 	ret
    5ec0:	017fff04 	movi	r5,-4
    5ec4:	414a703a 	and	r5,r8,r5
    5ec8:	814d883a 	add	r6,r16,r5
    5ecc:	30c01f16 	blt	r6,r3,5f4c <_realloc_r+0x22c>
    5ed0:	20800317 	ldw	r2,12(r4)
    5ed4:	20c00217 	ldw	r3,8(r4)
    5ed8:	a825883a 	mov	r18,r21
    5edc:	3021883a 	mov	r16,r6
    5ee0:	18800315 	stw	r2,12(r3)
    5ee4:	10c00215 	stw	r3,8(r2)
    5ee8:	003fdb06 	br	5e58 <__alt_data_end+0xfc005e58>
    5eec:	00800304 	movi	r2,12
    5ef0:	a0800015 	stw	r2,0(r20)
    5ef4:	0005883a 	mov	r2,zero
    5ef8:	003fe506 	br	5e90 <__alt_data_end+0xfc005e90>
    5efc:	98c00117 	ldw	r3,4(r19)
    5f00:	9c4b883a 	add	r5,r19,r17
    5f04:	11000054 	ori	r4,r2,1
    5f08:	18c0004c 	andi	r3,r3,1
    5f0c:	1c62b03a 	or	r17,r3,r17
    5f10:	9c400115 	stw	r17,4(r19)
    5f14:	29000115 	stw	r4,4(r5)
    5f18:	2885883a 	add	r2,r5,r2
    5f1c:	10c00117 	ldw	r3,4(r2)
    5f20:	29400204 	addi	r5,r5,8
    5f24:	a009883a 	mov	r4,r20
    5f28:	18c00054 	ori	r3,r3,1
    5f2c:	10c00115 	stw	r3,4(r2)
    5f30:	000c6780 	call	c678 <_free_r>
    5f34:	003fd306 	br	5e84 <__alt_data_end+0xfc005e84>
    5f38:	017fff04 	movi	r5,-4
    5f3c:	414a703a 	and	r5,r8,r5
    5f40:	89800404 	addi	r6,r17,16
    5f44:	8151883a 	add	r8,r16,r5
    5f48:	4180590e 	bge	r8,r6,60b0 <_realloc_r+0x390>
    5f4c:	1080004c 	andi	r2,r2,1
    5f50:	103f9e1e 	bne	r2,zero,5dcc <__alt_data_end+0xfc005dcc>
    5f54:	adbffe17 	ldw	r22,-8(r21)
    5f58:	00bfff04 	movi	r2,-4
    5f5c:	9dadc83a 	sub	r22,r19,r22
    5f60:	b1800117 	ldw	r6,4(r22)
    5f64:	3084703a 	and	r2,r6,r2
    5f68:	20002026 	beq	r4,zero,5fec <_realloc_r+0x2cc>
    5f6c:	80af883a 	add	r23,r16,r2
    5f70:	b96f883a 	add	r23,r23,r5
    5f74:	21c05f26 	beq	r4,r7,60f4 <_realloc_r+0x3d4>
    5f78:	b8c01c16 	blt	r23,r3,5fec <_realloc_r+0x2cc>
    5f7c:	20800317 	ldw	r2,12(r4)
    5f80:	20c00217 	ldw	r3,8(r4)
    5f84:	81bfff04 	addi	r6,r16,-4
    5f88:	01000904 	movi	r4,36
    5f8c:	18800315 	stw	r2,12(r3)
    5f90:	10c00215 	stw	r3,8(r2)
    5f94:	b0c00217 	ldw	r3,8(r22)
    5f98:	b0800317 	ldw	r2,12(r22)
    5f9c:	b4800204 	addi	r18,r22,8
    5fa0:	18800315 	stw	r2,12(r3)
    5fa4:	10c00215 	stw	r3,8(r2)
    5fa8:	21801b36 	bltu	r4,r6,6018 <_realloc_r+0x2f8>
    5fac:	008004c4 	movi	r2,19
    5fb0:	1180352e 	bgeu	r2,r6,6088 <_realloc_r+0x368>
    5fb4:	a8800017 	ldw	r2,0(r21)
    5fb8:	b0800215 	stw	r2,8(r22)
    5fbc:	a8800117 	ldw	r2,4(r21)
    5fc0:	b0800315 	stw	r2,12(r22)
    5fc4:	008006c4 	movi	r2,27
    5fc8:	11807f36 	bltu	r2,r6,61c8 <_realloc_r+0x4a8>
    5fcc:	b0800404 	addi	r2,r22,16
    5fd0:	ad400204 	addi	r21,r21,8
    5fd4:	00002d06 	br	608c <_realloc_r+0x36c>
    5fd8:	adbffe17 	ldw	r22,-8(r21)
    5fdc:	00bfff04 	movi	r2,-4
    5fe0:	9dadc83a 	sub	r22,r19,r22
    5fe4:	b1000117 	ldw	r4,4(r22)
    5fe8:	2084703a 	and	r2,r4,r2
    5fec:	b03f7726 	beq	r22,zero,5dcc <__alt_data_end+0xfc005dcc>
    5ff0:	80af883a 	add	r23,r16,r2
    5ff4:	b8ff7516 	blt	r23,r3,5dcc <__alt_data_end+0xfc005dcc>
    5ff8:	b0800317 	ldw	r2,12(r22)
    5ffc:	b0c00217 	ldw	r3,8(r22)
    6000:	81bfff04 	addi	r6,r16,-4
    6004:	01000904 	movi	r4,36
    6008:	18800315 	stw	r2,12(r3)
    600c:	10c00215 	stw	r3,8(r2)
    6010:	b4800204 	addi	r18,r22,8
    6014:	21bfe52e 	bgeu	r4,r6,5fac <__alt_data_end+0xfc005fac>
    6018:	a80b883a 	mov	r5,r21
    601c:	9009883a 	mov	r4,r18
    6020:	000d3900 	call	d390 <memmove>
    6024:	b821883a 	mov	r16,r23
    6028:	b027883a 	mov	r19,r22
    602c:	003f8a06 	br	5e58 <__alt_data_end+0xfc005e58>
    6030:	300b883a 	mov	r5,r6
    6034:	dfc00917 	ldw	ra,36(sp)
    6038:	df000817 	ldw	fp,32(sp)
    603c:	ddc00717 	ldw	r23,28(sp)
    6040:	dd800617 	ldw	r22,24(sp)
    6044:	dd400517 	ldw	r21,20(sp)
    6048:	dd000417 	ldw	r20,16(sp)
    604c:	dcc00317 	ldw	r19,12(sp)
    6050:	dc800217 	ldw	r18,8(sp)
    6054:	dc400117 	ldw	r17,4(sp)
    6058:	dc000017 	ldw	r16,0(sp)
    605c:	dec00a04 	addi	sp,sp,40
    6060:	00050481 	jmpi	5048 <_malloc_r>
    6064:	a8c00017 	ldw	r3,0(r21)
    6068:	90c00015 	stw	r3,0(r18)
    606c:	a8c00117 	ldw	r3,4(r21)
    6070:	90c00115 	stw	r3,4(r18)
    6074:	00c006c4 	movi	r3,27
    6078:	19804536 	bltu	r3,r6,6190 <_realloc_r+0x470>
    607c:	90800204 	addi	r2,r18,8
    6080:	a8c00204 	addi	r3,r21,8
    6084:	003f6306 	br	5e14 <__alt_data_end+0xfc005e14>
    6088:	9005883a 	mov	r2,r18
    608c:	a8c00017 	ldw	r3,0(r21)
    6090:	b821883a 	mov	r16,r23
    6094:	b027883a 	mov	r19,r22
    6098:	10c00015 	stw	r3,0(r2)
    609c:	a8c00117 	ldw	r3,4(r21)
    60a0:	10c00115 	stw	r3,4(r2)
    60a4:	a8c00217 	ldw	r3,8(r21)
    60a8:	10c00215 	stw	r3,8(r2)
    60ac:	003f6a06 	br	5e58 <__alt_data_end+0xfc005e58>
    60b0:	9c67883a 	add	r19,r19,r17
    60b4:	4445c83a 	sub	r2,r8,r17
    60b8:	e4c00215 	stw	r19,8(fp)
    60bc:	10800054 	ori	r2,r2,1
    60c0:	98800115 	stw	r2,4(r19)
    60c4:	a8bfff17 	ldw	r2,-4(r21)
    60c8:	a009883a 	mov	r4,r20
    60cc:	1080004c 	andi	r2,r2,1
    60d0:	1462b03a 	or	r17,r2,r17
    60d4:	ac7fff15 	stw	r17,-4(r21)
    60d8:	001ad580 	call	1ad58 <__malloc_unlock>
    60dc:	a805883a 	mov	r2,r21
    60e0:	003f6b06 	br	5e90 <__alt_data_end+0xfc005e90>
    60e4:	a80b883a 	mov	r5,r21
    60e8:	9009883a 	mov	r4,r18
    60ec:	000d3900 	call	d390 <memmove>
    60f0:	003f4e06 	br	5e2c <__alt_data_end+0xfc005e2c>
    60f4:	89000404 	addi	r4,r17,16
    60f8:	b93fbc16 	blt	r23,r4,5fec <__alt_data_end+0xfc005fec>
    60fc:	b0800317 	ldw	r2,12(r22)
    6100:	b0c00217 	ldw	r3,8(r22)
    6104:	81bfff04 	addi	r6,r16,-4
    6108:	01000904 	movi	r4,36
    610c:	18800315 	stw	r2,12(r3)
    6110:	10c00215 	stw	r3,8(r2)
    6114:	b4800204 	addi	r18,r22,8
    6118:	21804336 	bltu	r4,r6,6228 <_realloc_r+0x508>
    611c:	008004c4 	movi	r2,19
    6120:	11803f2e 	bgeu	r2,r6,6220 <_realloc_r+0x500>
    6124:	a8800017 	ldw	r2,0(r21)
    6128:	b0800215 	stw	r2,8(r22)
    612c:	a8800117 	ldw	r2,4(r21)
    6130:	b0800315 	stw	r2,12(r22)
    6134:	008006c4 	movi	r2,27
    6138:	11803f36 	bltu	r2,r6,6238 <_realloc_r+0x518>
    613c:	b0800404 	addi	r2,r22,16
    6140:	ad400204 	addi	r21,r21,8
    6144:	a8c00017 	ldw	r3,0(r21)
    6148:	10c00015 	stw	r3,0(r2)
    614c:	a8c00117 	ldw	r3,4(r21)
    6150:	10c00115 	stw	r3,4(r2)
    6154:	a8c00217 	ldw	r3,8(r21)
    6158:	10c00215 	stw	r3,8(r2)
    615c:	b447883a 	add	r3,r22,r17
    6160:	bc45c83a 	sub	r2,r23,r17
    6164:	e0c00215 	stw	r3,8(fp)
    6168:	10800054 	ori	r2,r2,1
    616c:	18800115 	stw	r2,4(r3)
    6170:	b0800117 	ldw	r2,4(r22)
    6174:	a009883a 	mov	r4,r20
    6178:	1080004c 	andi	r2,r2,1
    617c:	1462b03a 	or	r17,r2,r17
    6180:	b4400115 	stw	r17,4(r22)
    6184:	001ad580 	call	1ad58 <__malloc_unlock>
    6188:	9005883a 	mov	r2,r18
    618c:	003f4006 	br	5e90 <__alt_data_end+0xfc005e90>
    6190:	a8c00217 	ldw	r3,8(r21)
    6194:	90c00215 	stw	r3,8(r18)
    6198:	a8c00317 	ldw	r3,12(r21)
    619c:	90c00315 	stw	r3,12(r18)
    61a0:	30801126 	beq	r6,r2,61e8 <_realloc_r+0x4c8>
    61a4:	90800404 	addi	r2,r18,16
    61a8:	a8c00404 	addi	r3,r21,16
    61ac:	003f1906 	br	5e14 <__alt_data_end+0xfc005e14>
    61b0:	90ffff17 	ldw	r3,-4(r18)
    61b4:	00bfff04 	movi	r2,-4
    61b8:	a825883a 	mov	r18,r21
    61bc:	1884703a 	and	r2,r3,r2
    61c0:	80a1883a 	add	r16,r16,r2
    61c4:	003f2406 	br	5e58 <__alt_data_end+0xfc005e58>
    61c8:	a8800217 	ldw	r2,8(r21)
    61cc:	b0800415 	stw	r2,16(r22)
    61d0:	a8800317 	ldw	r2,12(r21)
    61d4:	b0800515 	stw	r2,20(r22)
    61d8:	31000a26 	beq	r6,r4,6204 <_realloc_r+0x4e4>
    61dc:	b0800604 	addi	r2,r22,24
    61e0:	ad400404 	addi	r21,r21,16
    61e4:	003fa906 	br	608c <__alt_data_end+0xfc00608c>
    61e8:	a9000417 	ldw	r4,16(r21)
    61ec:	90800604 	addi	r2,r18,24
    61f0:	a8c00604 	addi	r3,r21,24
    61f4:	91000415 	stw	r4,16(r18)
    61f8:	a9000517 	ldw	r4,20(r21)
    61fc:	91000515 	stw	r4,20(r18)
    6200:	003f0406 	br	5e14 <__alt_data_end+0xfc005e14>
    6204:	a8c00417 	ldw	r3,16(r21)
    6208:	ad400604 	addi	r21,r21,24
    620c:	b0800804 	addi	r2,r22,32
    6210:	b0c00615 	stw	r3,24(r22)
    6214:	a8ffff17 	ldw	r3,-4(r21)
    6218:	b0c00715 	stw	r3,28(r22)
    621c:	003f9b06 	br	608c <__alt_data_end+0xfc00608c>
    6220:	9005883a 	mov	r2,r18
    6224:	003fc706 	br	6144 <__alt_data_end+0xfc006144>
    6228:	a80b883a 	mov	r5,r21
    622c:	9009883a 	mov	r4,r18
    6230:	000d3900 	call	d390 <memmove>
    6234:	003fc906 	br	615c <__alt_data_end+0xfc00615c>
    6238:	a8800217 	ldw	r2,8(r21)
    623c:	b0800415 	stw	r2,16(r22)
    6240:	a8800317 	ldw	r2,12(r21)
    6244:	b0800515 	stw	r2,20(r22)
    6248:	31000726 	beq	r6,r4,6268 <_realloc_r+0x548>
    624c:	b0800604 	addi	r2,r22,24
    6250:	ad400404 	addi	r21,r21,16
    6254:	003fbb06 	br	6144 <__alt_data_end+0xfc006144>
    6258:	a009883a 	mov	r4,r20
    625c:	001ad580 	call	1ad58 <__malloc_unlock>
    6260:	0005883a 	mov	r2,zero
    6264:	003f0a06 	br	5e90 <__alt_data_end+0xfc005e90>
    6268:	a8c00417 	ldw	r3,16(r21)
    626c:	ad400604 	addi	r21,r21,24
    6270:	b0800804 	addi	r2,r22,32
    6274:	b0c00615 	stw	r3,24(r22)
    6278:	a8ffff17 	ldw	r3,-4(r21)
    627c:	b0c00715 	stw	r3,28(r22)
    6280:	003fb006 	br	6144 <__alt_data_end+0xfc006144>

00006284 <lflush>:
    6284:	2080030b 	ldhu	r2,12(r4)
    6288:	00c00244 	movi	r3,9
    628c:	1080024c 	andi	r2,r2,9
    6290:	10c00226 	beq	r2,r3,629c <lflush+0x18>
    6294:	0005883a 	mov	r2,zero
    6298:	f800283a 	ret
    629c:	000c2c41 	jmpi	c2c4 <fflush>

000062a0 <__srefill_r>:
    62a0:	defffc04 	addi	sp,sp,-16
    62a4:	dc400115 	stw	r17,4(sp)
    62a8:	dc000015 	stw	r16,0(sp)
    62ac:	dfc00315 	stw	ra,12(sp)
    62b0:	dc800215 	stw	r18,8(sp)
    62b4:	2023883a 	mov	r17,r4
    62b8:	2821883a 	mov	r16,r5
    62bc:	20000226 	beq	r4,zero,62c8 <__srefill_r+0x28>
    62c0:	20800e17 	ldw	r2,56(r4)
    62c4:	10003c26 	beq	r2,zero,63b8 <__srefill_r+0x118>
    62c8:	80c0030b 	ldhu	r3,12(r16)
    62cc:	1908000c 	andi	r4,r3,8192
    62d0:	1805883a 	mov	r2,r3
    62d4:	2000071e 	bne	r4,zero,62f4 <__srefill_r+0x54>
    62d8:	81001917 	ldw	r4,100(r16)
    62dc:	18880014 	ori	r2,r3,8192
    62e0:	00f7ffc4 	movi	r3,-8193
    62e4:	20c8703a 	and	r4,r4,r3
    62e8:	8080030d 	sth	r2,12(r16)
    62ec:	1007883a 	mov	r3,r2
    62f0:	81001915 	stw	r4,100(r16)
    62f4:	80000115 	stw	zero,4(r16)
    62f8:	1100080c 	andi	r4,r2,32
    62fc:	2000571e 	bne	r4,zero,645c <__srefill_r+0x1bc>
    6300:	1100010c 	andi	r4,r2,4
    6304:	20001f26 	beq	r4,zero,6384 <__srefill_r+0xe4>
    6308:	81400c17 	ldw	r5,48(r16)
    630c:	28000826 	beq	r5,zero,6330 <__srefill_r+0x90>
    6310:	80801004 	addi	r2,r16,64
    6314:	28800226 	beq	r5,r2,6320 <__srefill_r+0x80>
    6318:	8809883a 	mov	r4,r17
    631c:	000c6780 	call	c678 <_free_r>
    6320:	80800f17 	ldw	r2,60(r16)
    6324:	80000c15 	stw	zero,48(r16)
    6328:	80800115 	stw	r2,4(r16)
    632c:	1000391e 	bne	r2,zero,6414 <__srefill_r+0x174>
    6330:	80800417 	ldw	r2,16(r16)
    6334:	10004b26 	beq	r2,zero,6464 <__srefill_r+0x1c4>
    6338:	8480030b 	ldhu	r18,12(r16)
    633c:	908000cc 	andi	r2,r18,3
    6340:	10001f1e 	bne	r2,zero,63c0 <__srefill_r+0x120>
    6344:	81800417 	ldw	r6,16(r16)
    6348:	80800817 	ldw	r2,32(r16)
    634c:	81c00517 	ldw	r7,20(r16)
    6350:	81400717 	ldw	r5,28(r16)
    6354:	81800015 	stw	r6,0(r16)
    6358:	8809883a 	mov	r4,r17
    635c:	103ee83a 	callr	r2
    6360:	80800115 	stw	r2,4(r16)
    6364:	00800e0e 	bge	zero,r2,63a0 <__srefill_r+0x100>
    6368:	0005883a 	mov	r2,zero
    636c:	dfc00317 	ldw	ra,12(sp)
    6370:	dc800217 	ldw	r18,8(sp)
    6374:	dc400117 	ldw	r17,4(sp)
    6378:	dc000017 	ldw	r16,0(sp)
    637c:	dec00404 	addi	sp,sp,16
    6380:	f800283a 	ret
    6384:	1100040c 	andi	r4,r2,16
    6388:	20003026 	beq	r4,zero,644c <__srefill_r+0x1ac>
    638c:	1080020c 	andi	r2,r2,8
    6390:	1000241e 	bne	r2,zero,6424 <__srefill_r+0x184>
    6394:	18c00114 	ori	r3,r3,4
    6398:	80c0030d 	sth	r3,12(r16)
    639c:	003fe406 	br	6330 <__alt_data_end+0xfc006330>
    63a0:	80c0030b 	ldhu	r3,12(r16)
    63a4:	1000161e 	bne	r2,zero,6400 <__srefill_r+0x160>
    63a8:	18c00814 	ori	r3,r3,32
    63ac:	00bfffc4 	movi	r2,-1
    63b0:	80c0030d 	sth	r3,12(r16)
    63b4:	003fed06 	br	636c <__alt_data_end+0xfc00636c>
    63b8:	0004e480 	call	4e48 <__sinit>
    63bc:	003fc206 	br	62c8 <__alt_data_end+0xfc0062c8>
    63c0:	008000b4 	movhi	r2,2
    63c4:	109df704 	addi	r2,r2,30684
    63c8:	11000017 	ldw	r4,0(r2)
    63cc:	01400034 	movhi	r5,0
    63d0:	00800044 	movi	r2,1
    63d4:	2958a104 	addi	r5,r5,25220
    63d8:	8080030d 	sth	r2,12(r16)
    63dc:	0004e980 	call	4e98 <_fwalk>
    63e0:	00800244 	movi	r2,9
    63e4:	8480030d 	sth	r18,12(r16)
    63e8:	9480024c 	andi	r18,r18,9
    63ec:	90bfd51e 	bne	r18,r2,6344 <__alt_data_end+0xfc006344>
    63f0:	800b883a 	mov	r5,r16
    63f4:	8809883a 	mov	r4,r17
    63f8:	000c04c0 	call	c04c <__sflush_r>
    63fc:	003fd106 	br	6344 <__alt_data_end+0xfc006344>
    6400:	18c01014 	ori	r3,r3,64
    6404:	80000115 	stw	zero,4(r16)
    6408:	00bfffc4 	movi	r2,-1
    640c:	80c0030d 	sth	r3,12(r16)
    6410:	003fd606 	br	636c <__alt_data_end+0xfc00636c>
    6414:	80c00e17 	ldw	r3,56(r16)
    6418:	0005883a 	mov	r2,zero
    641c:	80c00015 	stw	r3,0(r16)
    6420:	003fd206 	br	636c <__alt_data_end+0xfc00636c>
    6424:	800b883a 	mov	r5,r16
    6428:	8809883a 	mov	r4,r17
    642c:	000c2680 	call	c268 <_fflush_r>
    6430:	10000a1e 	bne	r2,zero,645c <__srefill_r+0x1bc>
    6434:	8080030b 	ldhu	r2,12(r16)
    6438:	00fffdc4 	movi	r3,-9
    643c:	80000215 	stw	zero,8(r16)
    6440:	1886703a 	and	r3,r3,r2
    6444:	80000615 	stw	zero,24(r16)
    6448:	003fd206 	br	6394 <__alt_data_end+0xfc006394>
    644c:	00800244 	movi	r2,9
    6450:	88800015 	stw	r2,0(r17)
    6454:	18c01014 	ori	r3,r3,64
    6458:	80c0030d 	sth	r3,12(r16)
    645c:	00bfffc4 	movi	r2,-1
    6460:	003fc206 	br	636c <__alt_data_end+0xfc00636c>
    6464:	800b883a 	mov	r5,r16
    6468:	8809883a 	mov	r4,r17
    646c:	000cfb00 	call	cfb0 <__smakebuf_r>
    6470:	003fb106 	br	6338 <__alt_data_end+0xfc006338>

00006474 <_sbrk_r>:
    6474:	defffd04 	addi	sp,sp,-12
    6478:	dc000015 	stw	r16,0(sp)
    647c:	040000f4 	movhi	r16,3
    6480:	dc400115 	stw	r17,4(sp)
    6484:	84250a04 	addi	r16,r16,-27608
    6488:	2023883a 	mov	r17,r4
    648c:	2809883a 	mov	r4,r5
    6490:	dfc00215 	stw	ra,8(sp)
    6494:	80000015 	stw	zero,0(r16)
    6498:	001a9300 	call	1a930 <sbrk>
    649c:	00ffffc4 	movi	r3,-1
    64a0:	10c00526 	beq	r2,r3,64b8 <_sbrk_r+0x44>
    64a4:	dfc00217 	ldw	ra,8(sp)
    64a8:	dc400117 	ldw	r17,4(sp)
    64ac:	dc000017 	ldw	r16,0(sp)
    64b0:	dec00304 	addi	sp,sp,12
    64b4:	f800283a 	ret
    64b8:	80c00017 	ldw	r3,0(r16)
    64bc:	183ff926 	beq	r3,zero,64a4 <__alt_data_end+0xfc0064a4>
    64c0:	88c00015 	stw	r3,0(r17)
    64c4:	003ff706 	br	64a4 <__alt_data_end+0xfc0064a4>

000064c8 <scanf>:
    64c8:	defffc04 	addi	sp,sp,-16
    64cc:	dfc00015 	stw	ra,0(sp)
    64d0:	d9400115 	stw	r5,4(sp)
    64d4:	d9800215 	stw	r6,8(sp)
    64d8:	d9c00315 	stw	r7,12(sp)
    64dc:	008000b4 	movhi	r2,2
    64e0:	109df804 	addi	r2,r2,30688
    64e4:	200d883a 	mov	r6,r4
    64e8:	11000017 	ldw	r4,0(r2)
    64ec:	d9c00104 	addi	r7,sp,4
    64f0:	21400117 	ldw	r5,4(r4)
    64f4:	000a46c0 	call	a46c <_vfscanf_r>
    64f8:	dfc00017 	ldw	ra,0(sp)
    64fc:	dec00404 	addi	sp,sp,16
    6500:	f800283a 	ret

00006504 <_scanf_r>:
    6504:	defffd04 	addi	sp,sp,-12
    6508:	2805883a 	mov	r2,r5
    650c:	dfc00015 	stw	ra,0(sp)
    6510:	d9800115 	stw	r6,4(sp)
    6514:	d9c00215 	stw	r7,8(sp)
    6518:	21400117 	ldw	r5,4(r4)
    651c:	d9c00104 	addi	r7,sp,4
    6520:	100d883a 	mov	r6,r2
    6524:	000a46c0 	call	a46c <_vfscanf_r>
    6528:	dfc00017 	ldw	ra,0(sp)
    652c:	dec00304 	addi	sp,sp,12
    6530:	f800283a 	ret

00006534 <__sread>:
    6534:	defffe04 	addi	sp,sp,-8
    6538:	dc000015 	stw	r16,0(sp)
    653c:	2821883a 	mov	r16,r5
    6540:	2940038f 	ldh	r5,14(r5)
    6544:	dfc00115 	stw	ra,4(sp)
    6548:	000e6500 	call	e650 <_read_r>
    654c:	10000716 	blt	r2,zero,656c <__sread+0x38>
    6550:	80c01417 	ldw	r3,80(r16)
    6554:	1887883a 	add	r3,r3,r2
    6558:	80c01415 	stw	r3,80(r16)
    655c:	dfc00117 	ldw	ra,4(sp)
    6560:	dc000017 	ldw	r16,0(sp)
    6564:	dec00204 	addi	sp,sp,8
    6568:	f800283a 	ret
    656c:	80c0030b 	ldhu	r3,12(r16)
    6570:	18fbffcc 	andi	r3,r3,61439
    6574:	80c0030d 	sth	r3,12(r16)
    6578:	dfc00117 	ldw	ra,4(sp)
    657c:	dc000017 	ldw	r16,0(sp)
    6580:	dec00204 	addi	sp,sp,8
    6584:	f800283a 	ret

00006588 <__seofread>:
    6588:	0005883a 	mov	r2,zero
    658c:	f800283a 	ret

00006590 <__swrite>:
    6590:	2880030b 	ldhu	r2,12(r5)
    6594:	defffb04 	addi	sp,sp,-20
    6598:	dcc00315 	stw	r19,12(sp)
    659c:	dc800215 	stw	r18,8(sp)
    65a0:	dc400115 	stw	r17,4(sp)
    65a4:	dc000015 	stw	r16,0(sp)
    65a8:	dfc00415 	stw	ra,16(sp)
    65ac:	10c0400c 	andi	r3,r2,256
    65b0:	2821883a 	mov	r16,r5
    65b4:	2023883a 	mov	r17,r4
    65b8:	3025883a 	mov	r18,r6
    65bc:	3827883a 	mov	r19,r7
    65c0:	18000526 	beq	r3,zero,65d8 <__swrite+0x48>
    65c4:	2940038f 	ldh	r5,14(r5)
    65c8:	01c00084 	movi	r7,2
    65cc:	000d883a 	mov	r6,zero
    65d0:	000cf500 	call	cf50 <_lseek_r>
    65d4:	8080030b 	ldhu	r2,12(r16)
    65d8:	8140038f 	ldh	r5,14(r16)
    65dc:	10bbffcc 	andi	r2,r2,61439
    65e0:	980f883a 	mov	r7,r19
    65e4:	900d883a 	mov	r6,r18
    65e8:	8809883a 	mov	r4,r17
    65ec:	8080030d 	sth	r2,12(r16)
    65f0:	dfc00417 	ldw	ra,16(sp)
    65f4:	dcc00317 	ldw	r19,12(sp)
    65f8:	dc800217 	ldw	r18,8(sp)
    65fc:	dc400117 	ldw	r17,4(sp)
    6600:	dc000017 	ldw	r16,0(sp)
    6604:	dec00504 	addi	sp,sp,20
    6608:	000a4b81 	jmpi	a4b8 <_write_r>

0000660c <__sseek>:
    660c:	defffe04 	addi	sp,sp,-8
    6610:	dc000015 	stw	r16,0(sp)
    6614:	2821883a 	mov	r16,r5
    6618:	2940038f 	ldh	r5,14(r5)
    661c:	dfc00115 	stw	ra,4(sp)
    6620:	000cf500 	call	cf50 <_lseek_r>
    6624:	00ffffc4 	movi	r3,-1
    6628:	10c00826 	beq	r2,r3,664c <__sseek+0x40>
    662c:	80c0030b 	ldhu	r3,12(r16)
    6630:	80801415 	stw	r2,80(r16)
    6634:	18c40014 	ori	r3,r3,4096
    6638:	80c0030d 	sth	r3,12(r16)
    663c:	dfc00117 	ldw	ra,4(sp)
    6640:	dc000017 	ldw	r16,0(sp)
    6644:	dec00204 	addi	sp,sp,8
    6648:	f800283a 	ret
    664c:	80c0030b 	ldhu	r3,12(r16)
    6650:	18fbffcc 	andi	r3,r3,61439
    6654:	80c0030d 	sth	r3,12(r16)
    6658:	dfc00117 	ldw	ra,4(sp)
    665c:	dc000017 	ldw	r16,0(sp)
    6660:	dec00204 	addi	sp,sp,8
    6664:	f800283a 	ret

00006668 <__sclose>:
    6668:	2940038f 	ldh	r5,14(r5)
    666c:	000a66c1 	jmpi	a66c <_close_r>

00006670 <strlen>:
    6670:	208000cc 	andi	r2,r4,3
    6674:	10002026 	beq	r2,zero,66f8 <strlen+0x88>
    6678:	20800007 	ldb	r2,0(r4)
    667c:	10002026 	beq	r2,zero,6700 <strlen+0x90>
    6680:	2005883a 	mov	r2,r4
    6684:	00000206 	br	6690 <strlen+0x20>
    6688:	10c00007 	ldb	r3,0(r2)
    668c:	18001826 	beq	r3,zero,66f0 <strlen+0x80>
    6690:	10800044 	addi	r2,r2,1
    6694:	10c000cc 	andi	r3,r2,3
    6698:	183ffb1e 	bne	r3,zero,6688 <__alt_data_end+0xfc006688>
    669c:	10c00017 	ldw	r3,0(r2)
    66a0:	01ffbff4 	movhi	r7,65279
    66a4:	39ffbfc4 	addi	r7,r7,-257
    66a8:	00ca303a 	nor	r5,zero,r3
    66ac:	01a02074 	movhi	r6,32897
    66b0:	19c7883a 	add	r3,r3,r7
    66b4:	31a02004 	addi	r6,r6,-32640
    66b8:	1946703a 	and	r3,r3,r5
    66bc:	1986703a 	and	r3,r3,r6
    66c0:	1800091e 	bne	r3,zero,66e8 <strlen+0x78>
    66c4:	10800104 	addi	r2,r2,4
    66c8:	10c00017 	ldw	r3,0(r2)
    66cc:	19cb883a 	add	r5,r3,r7
    66d0:	00c6303a 	nor	r3,zero,r3
    66d4:	28c6703a 	and	r3,r5,r3
    66d8:	1986703a 	and	r3,r3,r6
    66dc:	183ff926 	beq	r3,zero,66c4 <__alt_data_end+0xfc0066c4>
    66e0:	00000106 	br	66e8 <strlen+0x78>
    66e4:	10800044 	addi	r2,r2,1
    66e8:	10c00007 	ldb	r3,0(r2)
    66ec:	183ffd1e 	bne	r3,zero,66e4 <__alt_data_end+0xfc0066e4>
    66f0:	1105c83a 	sub	r2,r2,r4
    66f4:	f800283a 	ret
    66f8:	2005883a 	mov	r2,r4
    66fc:	003fe706 	br	669c <__alt_data_end+0xfc00669c>
    6700:	0005883a 	mov	r2,zero
    6704:	f800283a 	ret

00006708 <_strtol_r>:
    6708:	008000b4 	movhi	r2,2
    670c:	defff404 	addi	sp,sp,-48
    6710:	109dfb04 	addi	r2,r2,30700
    6714:	dd400715 	stw	r21,28(sp)
    6718:	15400017 	ldw	r21,0(r2)
    671c:	dd800815 	stw	r22,32(sp)
    6720:	dd000615 	stw	r20,24(sp)
    6724:	dcc00515 	stw	r19,20(sp)
    6728:	d9000015 	stw	r4,0(sp)
    672c:	dfc00b15 	stw	ra,44(sp)
    6730:	df000a15 	stw	fp,40(sp)
    6734:	ddc00915 	stw	r23,36(sp)
    6738:	dc800415 	stw	r18,16(sp)
    673c:	dc400315 	stw	r17,12(sp)
    6740:	dc000215 	stw	r16,8(sp)
    6744:	2829883a 	mov	r20,r5
    6748:	3027883a 	mov	r19,r6
    674c:	382d883a 	mov	r22,r7
    6750:	2809883a 	mov	r4,r5
    6754:	24000003 	ldbu	r16,0(r4)
    6758:	24400044 	addi	r17,r4,1
    675c:	2007883a 	mov	r3,r4
    6760:	ac05883a 	add	r2,r21,r16
    6764:	10800043 	ldbu	r2,1(r2)
    6768:	8809883a 	mov	r4,r17
    676c:	1080020c 	andi	r2,r2,8
    6770:	103ff81e 	bne	r2,zero,6754 <__alt_data_end+0xfc006754>
    6774:	00800b44 	movi	r2,45
    6778:	80805826 	beq	r16,r2,68dc <_strtol_r+0x1d4>
    677c:	00800ac4 	movi	r2,43
    6780:	80805a26 	beq	r16,r2,68ec <_strtol_r+0x1e4>
    6784:	0039883a 	mov	fp,zero
    6788:	b0004426 	beq	r22,zero,689c <_strtol_r+0x194>
    678c:	00800404 	movi	r2,16
    6790:	b0806026 	beq	r22,r2,6914 <_strtol_r+0x20c>
    6794:	b02f883a 	mov	r23,r22
    6798:	00a00034 	movhi	r2,32768
    679c:	e025003a 	cmpeq	r18,fp,zero
    67a0:	14a5c83a 	sub	r18,r2,r18
    67a4:	b80b883a 	mov	r5,r23
    67a8:	9009883a 	mov	r4,r18
    67ac:	00177740 	call	17774 <__umodsi3>
    67b0:	b80b883a 	mov	r5,r23
    67b4:	9009883a 	mov	r4,r18
    67b8:	d8800115 	stw	r2,4(sp)
    67bc:	00177100 	call	17710 <__udivsi3>
    67c0:	ac07883a 	add	r3,r21,r16
    67c4:	18c00043 	ldbu	r3,1(r3)
    67c8:	880b883a 	mov	r5,r17
    67cc:	000d883a 	mov	r6,zero
    67d0:	1a00010c 	andi	r8,r3,4
    67d4:	0009883a 	mov	r4,zero
    67d8:	02800044 	movi	r10,1
    67dc:	027fffc4 	movi	r9,-1
    67e0:	d9c00117 	ldw	r7,4(sp)
    67e4:	40000e26 	beq	r8,zero,6820 <_strtol_r+0x118>
    67e8:	843ff404 	addi	r16,r16,-48
    67ec:	8580120e 	bge	r16,r22,6838 <_strtol_r+0x130>
    67f0:	32400526 	beq	r6,r9,6808 <_strtol_r+0x100>
    67f4:	11002536 	bltu	r2,r4,688c <_strtol_r+0x184>
    67f8:	20802326 	beq	r4,r2,6888 <_strtol_r+0x180>
    67fc:	25c9383a 	mul	r4,r4,r23
    6800:	01800044 	movi	r6,1
    6804:	8109883a 	add	r4,r16,r4
    6808:	2c000003 	ldbu	r16,0(r5)
    680c:	29400044 	addi	r5,r5,1
    6810:	ac07883a 	add	r3,r21,r16
    6814:	18c00043 	ldbu	r3,1(r3)
    6818:	1a00010c 	andi	r8,r3,4
    681c:	403ff21e 	bne	r8,zero,67e8 <__alt_data_end+0xfc0067e8>
    6820:	18c000cc 	andi	r3,r3,3
    6824:	18000426 	beq	r3,zero,6838 <_strtol_r+0x130>
    6828:	1a801a26 	beq	r3,r10,6894 <_strtol_r+0x18c>
    682c:	00c015c4 	movi	r3,87
    6830:	80e1c83a 	sub	r16,r16,r3
    6834:	85bfee16 	blt	r16,r22,67f0 <__alt_data_end+0xfc0067f0>
    6838:	00bfffc4 	movi	r2,-1
    683c:	30801e26 	beq	r6,r2,68b8 <_strtol_r+0x1b0>
    6840:	e0001b1e 	bne	fp,zero,68b0 <_strtol_r+0x1a8>
    6844:	2005883a 	mov	r2,r4
    6848:	98000326 	beq	r19,zero,6858 <_strtol_r+0x150>
    684c:	3000211e 	bne	r6,zero,68d4 <_strtol_r+0x1cc>
    6850:	a00b883a 	mov	r5,r20
    6854:	99400015 	stw	r5,0(r19)
    6858:	dfc00b17 	ldw	ra,44(sp)
    685c:	df000a17 	ldw	fp,40(sp)
    6860:	ddc00917 	ldw	r23,36(sp)
    6864:	dd800817 	ldw	r22,32(sp)
    6868:	dd400717 	ldw	r21,28(sp)
    686c:	dd000617 	ldw	r20,24(sp)
    6870:	dcc00517 	ldw	r19,20(sp)
    6874:	dc800417 	ldw	r18,16(sp)
    6878:	dc400317 	ldw	r17,12(sp)
    687c:	dc000217 	ldw	r16,8(sp)
    6880:	dec00c04 	addi	sp,sp,48
    6884:	f800283a 	ret
    6888:	3c3fdc0e 	bge	r7,r16,67fc <__alt_data_end+0xfc0067fc>
    688c:	01bfffc4 	movi	r6,-1
    6890:	003fdd06 	br	6808 <__alt_data_end+0xfc006808>
    6894:	00c00dc4 	movi	r3,55
    6898:	003fe506 	br	6830 <__alt_data_end+0xfc006830>
    689c:	00800c04 	movi	r2,48
    68a0:	80801626 	beq	r16,r2,68fc <_strtol_r+0x1f4>
    68a4:	05800284 	movi	r22,10
    68a8:	b02f883a 	mov	r23,r22
    68ac:	003fba06 	br	6798 <__alt_data_end+0xfc006798>
    68b0:	0109c83a 	sub	r4,zero,r4
    68b4:	003fe306 	br	6844 <__alt_data_end+0xfc006844>
    68b8:	d9000017 	ldw	r4,0(sp)
    68bc:	00c00884 	movi	r3,34
    68c0:	e005003a 	cmpeq	r2,fp,zero
    68c4:	20c00015 	stw	r3,0(r4)
    68c8:	00e00034 	movhi	r3,32768
    68cc:	1885c83a 	sub	r2,r3,r2
    68d0:	983fe126 	beq	r19,zero,6858 <__alt_data_end+0xfc006858>
    68d4:	297fffc4 	addi	r5,r5,-1
    68d8:	003fde06 	br	6854 <__alt_data_end+0xfc006854>
    68dc:	1c400084 	addi	r17,r3,2
    68e0:	1c000043 	ldbu	r16,1(r3)
    68e4:	07000044 	movi	fp,1
    68e8:	003fa706 	br	6788 <__alt_data_end+0xfc006788>
    68ec:	1c400084 	addi	r17,r3,2
    68f0:	1c000043 	ldbu	r16,1(r3)
    68f4:	0039883a 	mov	fp,zero
    68f8:	003fa306 	br	6788 <__alt_data_end+0xfc006788>
    68fc:	88800003 	ldbu	r2,0(r17)
    6900:	00c01604 	movi	r3,88
    6904:	108037cc 	andi	r2,r2,223
    6908:	10c00826 	beq	r2,r3,692c <_strtol_r+0x224>
    690c:	05800204 	movi	r22,8
    6910:	003fa006 	br	6794 <__alt_data_end+0xfc006794>
    6914:	00800c04 	movi	r2,48
    6918:	80bf9e1e 	bne	r16,r2,6794 <__alt_data_end+0xfc006794>
    691c:	88800003 	ldbu	r2,0(r17)
    6920:	00c01604 	movi	r3,88
    6924:	108037cc 	andi	r2,r2,223
    6928:	10ff9a1e 	bne	r2,r3,6794 <__alt_data_end+0xfc006794>
    692c:	05c00404 	movi	r23,16
    6930:	8c000043 	ldbu	r16,1(r17)
    6934:	b82d883a 	mov	r22,r23
    6938:	8c400084 	addi	r17,r17,2
    693c:	003f9606 	br	6798 <__alt_data_end+0xfc006798>

00006940 <strtol>:
    6940:	008000b4 	movhi	r2,2
    6944:	109df804 	addi	r2,r2,30688
    6948:	300f883a 	mov	r7,r6
    694c:	280d883a 	mov	r6,r5
    6950:	200b883a 	mov	r5,r4
    6954:	11000017 	ldw	r4,0(r2)
    6958:	00067081 	jmpi	6708 <_strtol_r>

0000695c <___vfprintf_internal_r>:
    695c:	deffb804 	addi	sp,sp,-288
    6960:	dfc04715 	stw	ra,284(sp)
    6964:	ddc04515 	stw	r23,276(sp)
    6968:	dd404315 	stw	r21,268(sp)
    696c:	d9002c15 	stw	r4,176(sp)
    6970:	282f883a 	mov	r23,r5
    6974:	302b883a 	mov	r21,r6
    6978:	d9c02d15 	stw	r7,180(sp)
    697c:	df004615 	stw	fp,280(sp)
    6980:	dd804415 	stw	r22,272(sp)
    6984:	dd004215 	stw	r20,264(sp)
    6988:	dcc04115 	stw	r19,260(sp)
    698c:	dc804015 	stw	r18,256(sp)
    6990:	dc403f15 	stw	r17,252(sp)
    6994:	dc003e15 	stw	r16,248(sp)
    6998:	000cf200 	call	cf20 <_localeconv_r>
    699c:	10800017 	ldw	r2,0(r2)
    69a0:	1009883a 	mov	r4,r2
    69a4:	d8803415 	stw	r2,208(sp)
    69a8:	00066700 	call	6670 <strlen>
    69ac:	d8803715 	stw	r2,220(sp)
    69b0:	d8802c17 	ldw	r2,176(sp)
    69b4:	10000226 	beq	r2,zero,69c0 <___vfprintf_internal_r+0x64>
    69b8:	10800e17 	ldw	r2,56(r2)
    69bc:	1000f926 	beq	r2,zero,6da4 <___vfprintf_internal_r+0x448>
    69c0:	b880030b 	ldhu	r2,12(r23)
    69c4:	10c8000c 	andi	r3,r2,8192
    69c8:	1800061e 	bne	r3,zero,69e4 <___vfprintf_internal_r+0x88>
    69cc:	b9001917 	ldw	r4,100(r23)
    69d0:	00f7ffc4 	movi	r3,-8193
    69d4:	10880014 	ori	r2,r2,8192
    69d8:	20c6703a 	and	r3,r4,r3
    69dc:	b880030d 	sth	r2,12(r23)
    69e0:	b8c01915 	stw	r3,100(r23)
    69e4:	10c0020c 	andi	r3,r2,8
    69e8:	1800c126 	beq	r3,zero,6cf0 <___vfprintf_internal_r+0x394>
    69ec:	b8c00417 	ldw	r3,16(r23)
    69f0:	1800bf26 	beq	r3,zero,6cf0 <___vfprintf_internal_r+0x394>
    69f4:	1080068c 	andi	r2,r2,26
    69f8:	00c00284 	movi	r3,10
    69fc:	10c0c426 	beq	r2,r3,6d10 <___vfprintf_internal_r+0x3b4>
    6a00:	d8c00404 	addi	r3,sp,16
    6a04:	050000b4 	movhi	r20,2
    6a08:	d9001e04 	addi	r4,sp,120
    6a0c:	a5154184 	addi	r20,r20,21766
    6a10:	d8c01e15 	stw	r3,120(sp)
    6a14:	d8002015 	stw	zero,128(sp)
    6a18:	d8001f15 	stw	zero,124(sp)
    6a1c:	d8003315 	stw	zero,204(sp)
    6a20:	d8003615 	stw	zero,216(sp)
    6a24:	d8003815 	stw	zero,224(sp)
    6a28:	1811883a 	mov	r8,r3
    6a2c:	d8003915 	stw	zero,228(sp)
    6a30:	d8003a15 	stw	zero,232(sp)
    6a34:	d8002f15 	stw	zero,188(sp)
    6a38:	d9002815 	stw	r4,160(sp)
    6a3c:	a8800007 	ldb	r2,0(r21)
    6a40:	10027b26 	beq	r2,zero,7430 <___vfprintf_internal_r+0xad4>
    6a44:	00c00944 	movi	r3,37
    6a48:	a821883a 	mov	r16,r21
    6a4c:	10c0021e 	bne	r2,r3,6a58 <___vfprintf_internal_r+0xfc>
    6a50:	00001406 	br	6aa4 <___vfprintf_internal_r+0x148>
    6a54:	10c00326 	beq	r2,r3,6a64 <___vfprintf_internal_r+0x108>
    6a58:	84000044 	addi	r16,r16,1
    6a5c:	80800007 	ldb	r2,0(r16)
    6a60:	103ffc1e 	bne	r2,zero,6a54 <__alt_data_end+0xfc006a54>
    6a64:	8563c83a 	sub	r17,r16,r21
    6a68:	88000e26 	beq	r17,zero,6aa4 <___vfprintf_internal_r+0x148>
    6a6c:	d8c02017 	ldw	r3,128(sp)
    6a70:	d8801f17 	ldw	r2,124(sp)
    6a74:	45400015 	stw	r21,0(r8)
    6a78:	1c47883a 	add	r3,r3,r17
    6a7c:	10800044 	addi	r2,r2,1
    6a80:	d8c02015 	stw	r3,128(sp)
    6a84:	44400115 	stw	r17,4(r8)
    6a88:	d8801f15 	stw	r2,124(sp)
    6a8c:	00c001c4 	movi	r3,7
    6a90:	1880a716 	blt	r3,r2,6d30 <___vfprintf_internal_r+0x3d4>
    6a94:	42000204 	addi	r8,r8,8
    6a98:	d9402f17 	ldw	r5,188(sp)
    6a9c:	2c4b883a 	add	r5,r5,r17
    6aa0:	d9402f15 	stw	r5,188(sp)
    6aa4:	80800007 	ldb	r2,0(r16)
    6aa8:	1000a826 	beq	r2,zero,6d4c <___vfprintf_internal_r+0x3f0>
    6aac:	84400047 	ldb	r17,1(r16)
    6ab0:	00bfffc4 	movi	r2,-1
    6ab4:	85400044 	addi	r21,r16,1
    6ab8:	d8002785 	stb	zero,158(sp)
    6abc:	0007883a 	mov	r3,zero
    6ac0:	000f883a 	mov	r7,zero
    6ac4:	d8802915 	stw	r2,164(sp)
    6ac8:	d8003115 	stw	zero,196(sp)
    6acc:	0025883a 	mov	r18,zero
    6ad0:	01401604 	movi	r5,88
    6ad4:	01800244 	movi	r6,9
    6ad8:	02800a84 	movi	r10,42
    6adc:	02401b04 	movi	r9,108
    6ae0:	ad400044 	addi	r21,r21,1
    6ae4:	88bff804 	addi	r2,r17,-32
    6ae8:	28830436 	bltu	r5,r2,76fc <___vfprintf_internal_r+0xda0>
    6aec:	100490ba 	slli	r2,r2,2
    6af0:	01000034 	movhi	r4,0
    6af4:	211ac104 	addi	r4,r4,27396
    6af8:	1105883a 	add	r2,r2,r4
    6afc:	10800017 	ldw	r2,0(r2)
    6b00:	1000683a 	jmp	r2
    6b04:	0000761c 	xori	zero,zero,472
    6b08:	000076fc 	xorhi	zero,zero,475
    6b0c:	000076fc 	xorhi	zero,zero,475
    6b10:	0000763c 	xorhi	zero,zero,472
    6b14:	000076fc 	xorhi	zero,zero,475
    6b18:	000076fc 	xorhi	zero,zero,475
    6b1c:	000076fc 	xorhi	zero,zero,475
    6b20:	000076fc 	xorhi	zero,zero,475
    6b24:	000076fc 	xorhi	zero,zero,475
    6b28:	000076fc 	xorhi	zero,zero,475
    6b2c:	00006db0 	cmpltui	zero,zero,438
    6b30:	00007558 	cmpnei	zero,zero,469
    6b34:	000076fc 	xorhi	zero,zero,475
    6b38:	00006c78 	rdprs	zero,zero,433
    6b3c:	00006dd8 	cmpnei	zero,zero,439
    6b40:	000076fc 	xorhi	zero,zero,475
    6b44:	00006e18 	cmpnei	zero,zero,440
    6b48:	00006e24 	muli	zero,zero,440
    6b4c:	00006e24 	muli	zero,zero,440
    6b50:	00006e24 	muli	zero,zero,440
    6b54:	00006e24 	muli	zero,zero,440
    6b58:	00006e24 	muli	zero,zero,440
    6b5c:	00006e24 	muli	zero,zero,440
    6b60:	00006e24 	muli	zero,zero,440
    6b64:	00006e24 	muli	zero,zero,440
    6b68:	00006e24 	muli	zero,zero,440
    6b6c:	000076fc 	xorhi	zero,zero,475
    6b70:	000076fc 	xorhi	zero,zero,475
    6b74:	000076fc 	xorhi	zero,zero,475
    6b78:	000076fc 	xorhi	zero,zero,475
    6b7c:	000076fc 	xorhi	zero,zero,475
    6b80:	000076fc 	xorhi	zero,zero,475
    6b84:	000076fc 	xorhi	zero,zero,475
    6b88:	000076fc 	xorhi	zero,zero,475
    6b8c:	000076fc 	xorhi	zero,zero,475
    6b90:	000076fc 	xorhi	zero,zero,475
    6b94:	00006e58 	cmpnei	zero,zero,441
    6b98:	00006f14 	movui	zero,444
    6b9c:	000076fc 	xorhi	zero,zero,475
    6ba0:	00006f14 	movui	zero,444
    6ba4:	000076fc 	xorhi	zero,zero,475
    6ba8:	000076fc 	xorhi	zero,zero,475
    6bac:	000076fc 	xorhi	zero,zero,475
    6bb0:	000076fc 	xorhi	zero,zero,475
    6bb4:	00006fb4 	movhi	zero,446
    6bb8:	000076fc 	xorhi	zero,zero,475
    6bbc:	000076fc 	xorhi	zero,zero,475
    6bc0:	00006fc0 	call	6fc <kingCapture+0x3c>
    6bc4:	000076fc 	xorhi	zero,zero,475
    6bc8:	000076fc 	xorhi	zero,zero,475
    6bcc:	000076fc 	xorhi	zero,zero,475
    6bd0:	000076fc 	xorhi	zero,zero,475
    6bd4:	000076fc 	xorhi	zero,zero,475
    6bd8:	00007438 	rdprs	zero,zero,464
    6bdc:	000076fc 	xorhi	zero,zero,475
    6be0:	000076fc 	xorhi	zero,zero,475
    6be4:	00007498 	cmpnei	zero,zero,466
    6be8:	000076fc 	xorhi	zero,zero,475
    6bec:	000076fc 	xorhi	zero,zero,475
    6bf0:	000076fc 	xorhi	zero,zero,475
    6bf4:	000076fc 	xorhi	zero,zero,475
    6bf8:	000076fc 	xorhi	zero,zero,475
    6bfc:	000076fc 	xorhi	zero,zero,475
    6c00:	000076fc 	xorhi	zero,zero,475
    6c04:	000076fc 	xorhi	zero,zero,475
    6c08:	000076fc 	xorhi	zero,zero,475
    6c0c:	000076fc 	xorhi	zero,zero,475
    6c10:	000076a8 	cmpgeui	zero,zero,474
    6c14:	00007648 	cmpgei	zero,zero,473
    6c18:	00006f14 	movui	zero,444
    6c1c:	00006f14 	movui	zero,444
    6c20:	00006f14 	movui	zero,444
    6c24:	00007658 	cmpnei	zero,zero,473
    6c28:	00007648 	cmpgei	zero,zero,473
    6c2c:	000076fc 	xorhi	zero,zero,475
    6c30:	000076fc 	xorhi	zero,zero,475
    6c34:	00007664 	muli	zero,zero,473
    6c38:	000076fc 	xorhi	zero,zero,475
    6c3c:	00007674 	movhi	zero,473
    6c40:	00007548 	cmpgei	zero,zero,469
    6c44:	00006c84 	movi	zero,434
    6c48:	00007568 	cmpgeui	zero,zero,469
    6c4c:	000076fc 	xorhi	zero,zero,475
    6c50:	00007574 	movhi	zero,469
    6c54:	000076fc 	xorhi	zero,zero,475
    6c58:	000075d0 	cmplti	zero,zero,471
    6c5c:	000076fc 	xorhi	zero,zero,475
    6c60:	000076fc 	xorhi	zero,zero,475
    6c64:	000075e0 	cmpeqi	zero,zero,471
    6c68:	d9003117 	ldw	r4,196(sp)
    6c6c:	d8802d15 	stw	r2,180(sp)
    6c70:	0109c83a 	sub	r4,zero,r4
    6c74:	d9003115 	stw	r4,196(sp)
    6c78:	94800114 	ori	r18,r18,4
    6c7c:	ac400007 	ldb	r17,0(r21)
    6c80:	003f9706 	br	6ae0 <__alt_data_end+0xfc006ae0>
    6c84:	00800c04 	movi	r2,48
    6c88:	d9002d17 	ldw	r4,180(sp)
    6c8c:	d9402917 	ldw	r5,164(sp)
    6c90:	d8802705 	stb	r2,156(sp)
    6c94:	00801e04 	movi	r2,120
    6c98:	d8802745 	stb	r2,157(sp)
    6c9c:	d8002785 	stb	zero,158(sp)
    6ca0:	20c00104 	addi	r3,r4,4
    6ca4:	24c00017 	ldw	r19,0(r4)
    6ca8:	002d883a 	mov	r22,zero
    6cac:	90800094 	ori	r2,r18,2
    6cb0:	28029a16 	blt	r5,zero,771c <___vfprintf_internal_r+0xdc0>
    6cb4:	00bfdfc4 	movi	r2,-129
    6cb8:	90a4703a 	and	r18,r18,r2
    6cbc:	d8c02d15 	stw	r3,180(sp)
    6cc0:	94800094 	ori	r18,r18,2
    6cc4:	9802871e 	bne	r19,zero,76e4 <___vfprintf_internal_r+0xd88>
    6cc8:	008000b4 	movhi	r2,2
    6ccc:	10953a04 	addi	r2,r2,21736
    6cd0:	d8803915 	stw	r2,228(sp)
    6cd4:	04401e04 	movi	r17,120
    6cd8:	d8802917 	ldw	r2,164(sp)
    6cdc:	0039883a 	mov	fp,zero
    6ce0:	1001e926 	beq	r2,zero,7488 <___vfprintf_internal_r+0xb2c>
    6ce4:	0027883a 	mov	r19,zero
    6ce8:	002d883a 	mov	r22,zero
    6cec:	00020506 	br	7504 <___vfprintf_internal_r+0xba8>
    6cf0:	d9002c17 	ldw	r4,176(sp)
    6cf4:	b80b883a 	mov	r5,r23
    6cf8:	000a5180 	call	a518 <__swsetup_r>
    6cfc:	1005ac1e 	bne	r2,zero,83b0 <___vfprintf_internal_r+0x1a54>
    6d00:	b880030b 	ldhu	r2,12(r23)
    6d04:	00c00284 	movi	r3,10
    6d08:	1080068c 	andi	r2,r2,26
    6d0c:	10ff3c1e 	bne	r2,r3,6a00 <__alt_data_end+0xfc006a00>
    6d10:	b880038f 	ldh	r2,14(r23)
    6d14:	103f3a16 	blt	r2,zero,6a00 <__alt_data_end+0xfc006a00>
    6d18:	d9c02d17 	ldw	r7,180(sp)
    6d1c:	d9002c17 	ldw	r4,176(sp)
    6d20:	a80d883a 	mov	r6,r21
    6d24:	b80b883a 	mov	r5,r23
    6d28:	0008b700 	call	8b70 <__sbprintf>
    6d2c:	00001106 	br	6d74 <___vfprintf_internal_r+0x418>
    6d30:	d9002c17 	ldw	r4,176(sp)
    6d34:	d9801e04 	addi	r6,sp,120
    6d38:	b80b883a 	mov	r5,r23
    6d3c:	0012e840 	call	12e84 <__sprint_r>
    6d40:	1000081e 	bne	r2,zero,6d64 <___vfprintf_internal_r+0x408>
    6d44:	da000404 	addi	r8,sp,16
    6d48:	003f5306 	br	6a98 <__alt_data_end+0xfc006a98>
    6d4c:	d8802017 	ldw	r2,128(sp)
    6d50:	10000426 	beq	r2,zero,6d64 <___vfprintf_internal_r+0x408>
    6d54:	d9002c17 	ldw	r4,176(sp)
    6d58:	d9801e04 	addi	r6,sp,120
    6d5c:	b80b883a 	mov	r5,r23
    6d60:	0012e840 	call	12e84 <__sprint_r>
    6d64:	b880030b 	ldhu	r2,12(r23)
    6d68:	1080100c 	andi	r2,r2,64
    6d6c:	1005901e 	bne	r2,zero,83b0 <___vfprintf_internal_r+0x1a54>
    6d70:	d8802f17 	ldw	r2,188(sp)
    6d74:	dfc04717 	ldw	ra,284(sp)
    6d78:	df004617 	ldw	fp,280(sp)
    6d7c:	ddc04517 	ldw	r23,276(sp)
    6d80:	dd804417 	ldw	r22,272(sp)
    6d84:	dd404317 	ldw	r21,268(sp)
    6d88:	dd004217 	ldw	r20,264(sp)
    6d8c:	dcc04117 	ldw	r19,260(sp)
    6d90:	dc804017 	ldw	r18,256(sp)
    6d94:	dc403f17 	ldw	r17,252(sp)
    6d98:	dc003e17 	ldw	r16,248(sp)
    6d9c:	dec04804 	addi	sp,sp,288
    6da0:	f800283a 	ret
    6da4:	d9002c17 	ldw	r4,176(sp)
    6da8:	0004e480 	call	4e48 <__sinit>
    6dac:	003f0406 	br	69c0 <__alt_data_end+0xfc0069c0>
    6db0:	d8802d17 	ldw	r2,180(sp)
    6db4:	d9002d17 	ldw	r4,180(sp)
    6db8:	10800017 	ldw	r2,0(r2)
    6dbc:	d8803115 	stw	r2,196(sp)
    6dc0:	20800104 	addi	r2,r4,4
    6dc4:	d9003117 	ldw	r4,196(sp)
    6dc8:	203fa716 	blt	r4,zero,6c68 <__alt_data_end+0xfc006c68>
    6dcc:	d8802d15 	stw	r2,180(sp)
    6dd0:	ac400007 	ldb	r17,0(r21)
    6dd4:	003f4206 	br	6ae0 <__alt_data_end+0xfc006ae0>
    6dd8:	ac400007 	ldb	r17,0(r21)
    6ddc:	aac00044 	addi	r11,r21,1
    6de0:	8a872826 	beq	r17,r10,8a84 <___vfprintf_internal_r+0x2128>
    6de4:	88bff404 	addi	r2,r17,-48
    6de8:	0009883a 	mov	r4,zero
    6dec:	30867d36 	bltu	r6,r2,87e4 <___vfprintf_internal_r+0x1e88>
    6df0:	5c400007 	ldb	r17,0(r11)
    6df4:	210002a4 	muli	r4,r4,10
    6df8:	5d400044 	addi	r21,r11,1
    6dfc:	a817883a 	mov	r11,r21
    6e00:	2089883a 	add	r4,r4,r2
    6e04:	88bff404 	addi	r2,r17,-48
    6e08:	30bff92e 	bgeu	r6,r2,6df0 <__alt_data_end+0xfc006df0>
    6e0c:	2005c916 	blt	r4,zero,8534 <___vfprintf_internal_r+0x1bd8>
    6e10:	d9002915 	stw	r4,164(sp)
    6e14:	003f3306 	br	6ae4 <__alt_data_end+0xfc006ae4>
    6e18:	94802014 	ori	r18,r18,128
    6e1c:	ac400007 	ldb	r17,0(r21)
    6e20:	003f2f06 	br	6ae0 <__alt_data_end+0xfc006ae0>
    6e24:	a809883a 	mov	r4,r21
    6e28:	d8003115 	stw	zero,196(sp)
    6e2c:	88bff404 	addi	r2,r17,-48
    6e30:	0017883a 	mov	r11,zero
    6e34:	24400007 	ldb	r17,0(r4)
    6e38:	5ac002a4 	muli	r11,r11,10
    6e3c:	ad400044 	addi	r21,r21,1
    6e40:	a809883a 	mov	r4,r21
    6e44:	12d7883a 	add	r11,r2,r11
    6e48:	88bff404 	addi	r2,r17,-48
    6e4c:	30bff92e 	bgeu	r6,r2,6e34 <__alt_data_end+0xfc006e34>
    6e50:	dac03115 	stw	r11,196(sp)
    6e54:	003f2306 	br	6ae4 <__alt_data_end+0xfc006ae4>
    6e58:	18c03fcc 	andi	r3,r3,255
    6e5c:	18072b1e 	bne	r3,zero,8b0c <___vfprintf_internal_r+0x21b0>
    6e60:	94800414 	ori	r18,r18,16
    6e64:	9080080c 	andi	r2,r18,32
    6e68:	10037b26 	beq	r2,zero,7c58 <___vfprintf_internal_r+0x12fc>
    6e6c:	d9402d17 	ldw	r5,180(sp)
    6e70:	28800117 	ldw	r2,4(r5)
    6e74:	2cc00017 	ldw	r19,0(r5)
    6e78:	29400204 	addi	r5,r5,8
    6e7c:	d9402d15 	stw	r5,180(sp)
    6e80:	102d883a 	mov	r22,r2
    6e84:	10044b16 	blt	r2,zero,7fb4 <___vfprintf_internal_r+0x1658>
    6e88:	d9402917 	ldw	r5,164(sp)
    6e8c:	df002783 	ldbu	fp,158(sp)
    6e90:	2803bc16 	blt	r5,zero,7d84 <___vfprintf_internal_r+0x1428>
    6e94:	00ffdfc4 	movi	r3,-129
    6e98:	9d84b03a 	or	r2,r19,r22
    6e9c:	90e4703a 	and	r18,r18,r3
    6ea0:	10017726 	beq	r2,zero,7480 <___vfprintf_internal_r+0xb24>
    6ea4:	b0038326 	beq	r22,zero,7cb4 <___vfprintf_internal_r+0x1358>
    6ea8:	dc402a15 	stw	r17,168(sp)
    6eac:	dc001e04 	addi	r16,sp,120
    6eb0:	b023883a 	mov	r17,r22
    6eb4:	402d883a 	mov	r22,r8
    6eb8:	9809883a 	mov	r4,r19
    6ebc:	880b883a 	mov	r5,r17
    6ec0:	01800284 	movi	r6,10
    6ec4:	000f883a 	mov	r7,zero
    6ec8:	00170e00 	call	170e0 <__umoddi3>
    6ecc:	10800c04 	addi	r2,r2,48
    6ed0:	843fffc4 	addi	r16,r16,-1
    6ed4:	9809883a 	mov	r4,r19
    6ed8:	880b883a 	mov	r5,r17
    6edc:	80800005 	stb	r2,0(r16)
    6ee0:	01800284 	movi	r6,10
    6ee4:	000f883a 	mov	r7,zero
    6ee8:	0016b680 	call	16b68 <__udivdi3>
    6eec:	1027883a 	mov	r19,r2
    6ef0:	10c4b03a 	or	r2,r2,r3
    6ef4:	1823883a 	mov	r17,r3
    6ef8:	103fef1e 	bne	r2,zero,6eb8 <__alt_data_end+0xfc006eb8>
    6efc:	d8c02817 	ldw	r3,160(sp)
    6f00:	dc402a17 	ldw	r17,168(sp)
    6f04:	b011883a 	mov	r8,r22
    6f08:	1c07c83a 	sub	r3,r3,r16
    6f0c:	d8c02e15 	stw	r3,184(sp)
    6f10:	00005906 	br	7078 <___vfprintf_internal_r+0x71c>
    6f14:	18c03fcc 	andi	r3,r3,255
    6f18:	1806fa1e 	bne	r3,zero,8b04 <___vfprintf_internal_r+0x21a8>
    6f1c:	9080020c 	andi	r2,r18,8
    6f20:	10048a26 	beq	r2,zero,814c <___vfprintf_internal_r+0x17f0>
    6f24:	d8c02d17 	ldw	r3,180(sp)
    6f28:	d9002d17 	ldw	r4,180(sp)
    6f2c:	d9402d17 	ldw	r5,180(sp)
    6f30:	18c00017 	ldw	r3,0(r3)
    6f34:	21000117 	ldw	r4,4(r4)
    6f38:	29400204 	addi	r5,r5,8
    6f3c:	d8c03615 	stw	r3,216(sp)
    6f40:	d9003815 	stw	r4,224(sp)
    6f44:	d9402d15 	stw	r5,180(sp)
    6f48:	d9003617 	ldw	r4,216(sp)
    6f4c:	d9403817 	ldw	r5,224(sp)
    6f50:	da003d15 	stw	r8,244(sp)
    6f54:	04000044 	movi	r16,1
    6f58:	000e6b00 	call	e6b0 <__fpclassifyd>
    6f5c:	da003d17 	ldw	r8,244(sp)
    6f60:	14041f1e 	bne	r2,r16,7fe0 <___vfprintf_internal_r+0x1684>
    6f64:	d9003617 	ldw	r4,216(sp)
    6f68:	d9403817 	ldw	r5,224(sp)
    6f6c:	000d883a 	mov	r6,zero
    6f70:	000f883a 	mov	r7,zero
    6f74:	0018cc00 	call	18cc0 <__ledf2>
    6f78:	da003d17 	ldw	r8,244(sp)
    6f7c:	1005be16 	blt	r2,zero,8678 <___vfprintf_internal_r+0x1d1c>
    6f80:	df002783 	ldbu	fp,158(sp)
    6f84:	008011c4 	movi	r2,71
    6f88:	1445330e 	bge	r2,r17,8458 <___vfprintf_internal_r+0x1afc>
    6f8c:	040000b4 	movhi	r16,2
    6f90:	84153204 	addi	r16,r16,21704
    6f94:	00c000c4 	movi	r3,3
    6f98:	00bfdfc4 	movi	r2,-129
    6f9c:	d8c02a15 	stw	r3,168(sp)
    6fa0:	90a4703a 	and	r18,r18,r2
    6fa4:	d8c02e15 	stw	r3,184(sp)
    6fa8:	d8002915 	stw	zero,164(sp)
    6fac:	d8003215 	stw	zero,200(sp)
    6fb0:	00003706 	br	7090 <___vfprintf_internal_r+0x734>
    6fb4:	94800214 	ori	r18,r18,8
    6fb8:	ac400007 	ldb	r17,0(r21)
    6fbc:	003ec806 	br	6ae0 <__alt_data_end+0xfc006ae0>
    6fc0:	18c03fcc 	andi	r3,r3,255
    6fc4:	1806db1e 	bne	r3,zero,8b34 <___vfprintf_internal_r+0x21d8>
    6fc8:	94800414 	ori	r18,r18,16
    6fcc:	9080080c 	andi	r2,r18,32
    6fd0:	1002d826 	beq	r2,zero,7b34 <___vfprintf_internal_r+0x11d8>
    6fd4:	d9402d17 	ldw	r5,180(sp)
    6fd8:	d8c02917 	ldw	r3,164(sp)
    6fdc:	d8002785 	stb	zero,158(sp)
    6fe0:	28800204 	addi	r2,r5,8
    6fe4:	2cc00017 	ldw	r19,0(r5)
    6fe8:	2d800117 	ldw	r22,4(r5)
    6fec:	18048f16 	blt	r3,zero,822c <___vfprintf_internal_r+0x18d0>
    6ff0:	013fdfc4 	movi	r4,-129
    6ff4:	9d86b03a 	or	r3,r19,r22
    6ff8:	d8802d15 	stw	r2,180(sp)
    6ffc:	9124703a 	and	r18,r18,r4
    7000:	1802d91e 	bne	r3,zero,7b68 <___vfprintf_internal_r+0x120c>
    7004:	d8c02917 	ldw	r3,164(sp)
    7008:	0039883a 	mov	fp,zero
    700c:	1805c326 	beq	r3,zero,871c <___vfprintf_internal_r+0x1dc0>
    7010:	0027883a 	mov	r19,zero
    7014:	002d883a 	mov	r22,zero
    7018:	dc001e04 	addi	r16,sp,120
    701c:	9806d0fa 	srli	r3,r19,3
    7020:	b008977a 	slli	r4,r22,29
    7024:	b02cd0fa 	srli	r22,r22,3
    7028:	9cc001cc 	andi	r19,r19,7
    702c:	98800c04 	addi	r2,r19,48
    7030:	843fffc4 	addi	r16,r16,-1
    7034:	20e6b03a 	or	r19,r4,r3
    7038:	80800005 	stb	r2,0(r16)
    703c:	9d86b03a 	or	r3,r19,r22
    7040:	183ff61e 	bne	r3,zero,701c <__alt_data_end+0xfc00701c>
    7044:	90c0004c 	andi	r3,r18,1
    7048:	18013b26 	beq	r3,zero,7538 <___vfprintf_internal_r+0xbdc>
    704c:	10803fcc 	andi	r2,r2,255
    7050:	1080201c 	xori	r2,r2,128
    7054:	10bfe004 	addi	r2,r2,-128
    7058:	00c00c04 	movi	r3,48
    705c:	10c13626 	beq	r2,r3,7538 <___vfprintf_internal_r+0xbdc>
    7060:	80ffffc5 	stb	r3,-1(r16)
    7064:	d8c02817 	ldw	r3,160(sp)
    7068:	80bfffc4 	addi	r2,r16,-1
    706c:	1021883a 	mov	r16,r2
    7070:	1887c83a 	sub	r3,r3,r2
    7074:	d8c02e15 	stw	r3,184(sp)
    7078:	d8802e17 	ldw	r2,184(sp)
    707c:	d9002917 	ldw	r4,164(sp)
    7080:	1100010e 	bge	r2,r4,7088 <___vfprintf_internal_r+0x72c>
    7084:	2005883a 	mov	r2,r4
    7088:	d8802a15 	stw	r2,168(sp)
    708c:	d8003215 	stw	zero,200(sp)
    7090:	e7003fcc 	andi	fp,fp,255
    7094:	e700201c 	xori	fp,fp,128
    7098:	e73fe004 	addi	fp,fp,-128
    709c:	e0000326 	beq	fp,zero,70ac <___vfprintf_internal_r+0x750>
    70a0:	d8c02a17 	ldw	r3,168(sp)
    70a4:	18c00044 	addi	r3,r3,1
    70a8:	d8c02a15 	stw	r3,168(sp)
    70ac:	90c0008c 	andi	r3,r18,2
    70b0:	d8c02b15 	stw	r3,172(sp)
    70b4:	18000326 	beq	r3,zero,70c4 <___vfprintf_internal_r+0x768>
    70b8:	d8c02a17 	ldw	r3,168(sp)
    70bc:	18c00084 	addi	r3,r3,2
    70c0:	d8c02a15 	stw	r3,168(sp)
    70c4:	90c0210c 	andi	r3,r18,132
    70c8:	d8c03015 	stw	r3,192(sp)
    70cc:	1801a31e 	bne	r3,zero,775c <___vfprintf_internal_r+0xe00>
    70d0:	d9003117 	ldw	r4,196(sp)
    70d4:	d8c02a17 	ldw	r3,168(sp)
    70d8:	20e7c83a 	sub	r19,r4,r3
    70dc:	04c19f0e 	bge	zero,r19,775c <___vfprintf_internal_r+0xe00>
    70e0:	02400404 	movi	r9,16
    70e4:	d8c02017 	ldw	r3,128(sp)
    70e8:	d8801f17 	ldw	r2,124(sp)
    70ec:	4cc50d0e 	bge	r9,r19,8524 <___vfprintf_internal_r+0x1bc8>
    70f0:	014000b4 	movhi	r5,2
    70f4:	29554584 	addi	r5,r5,21782
    70f8:	dc403b15 	stw	r17,236(sp)
    70fc:	d9403515 	stw	r5,212(sp)
    7100:	9823883a 	mov	r17,r19
    7104:	482d883a 	mov	r22,r9
    7108:	9027883a 	mov	r19,r18
    710c:	070001c4 	movi	fp,7
    7110:	8025883a 	mov	r18,r16
    7114:	dc002c17 	ldw	r16,176(sp)
    7118:	00000306 	br	7128 <___vfprintf_internal_r+0x7cc>
    711c:	8c7ffc04 	addi	r17,r17,-16
    7120:	42000204 	addi	r8,r8,8
    7124:	b440130e 	bge	r22,r17,7174 <___vfprintf_internal_r+0x818>
    7128:	010000b4 	movhi	r4,2
    712c:	18c00404 	addi	r3,r3,16
    7130:	10800044 	addi	r2,r2,1
    7134:	21154584 	addi	r4,r4,21782
    7138:	41000015 	stw	r4,0(r8)
    713c:	45800115 	stw	r22,4(r8)
    7140:	d8c02015 	stw	r3,128(sp)
    7144:	d8801f15 	stw	r2,124(sp)
    7148:	e0bff40e 	bge	fp,r2,711c <__alt_data_end+0xfc00711c>
    714c:	d9801e04 	addi	r6,sp,120
    7150:	b80b883a 	mov	r5,r23
    7154:	8009883a 	mov	r4,r16
    7158:	0012e840 	call	12e84 <__sprint_r>
    715c:	103f011e 	bne	r2,zero,6d64 <__alt_data_end+0xfc006d64>
    7160:	8c7ffc04 	addi	r17,r17,-16
    7164:	d8c02017 	ldw	r3,128(sp)
    7168:	d8801f17 	ldw	r2,124(sp)
    716c:	da000404 	addi	r8,sp,16
    7170:	b47fed16 	blt	r22,r17,7128 <__alt_data_end+0xfc007128>
    7174:	9021883a 	mov	r16,r18
    7178:	9825883a 	mov	r18,r19
    717c:	8827883a 	mov	r19,r17
    7180:	dc403b17 	ldw	r17,236(sp)
    7184:	d9403517 	ldw	r5,212(sp)
    7188:	98c7883a 	add	r3,r19,r3
    718c:	10800044 	addi	r2,r2,1
    7190:	41400015 	stw	r5,0(r8)
    7194:	44c00115 	stw	r19,4(r8)
    7198:	d8c02015 	stw	r3,128(sp)
    719c:	d8801f15 	stw	r2,124(sp)
    71a0:	010001c4 	movi	r4,7
    71a4:	2082a316 	blt	r4,r2,7c34 <___vfprintf_internal_r+0x12d8>
    71a8:	df002787 	ldb	fp,158(sp)
    71ac:	42000204 	addi	r8,r8,8
    71b0:	e0000c26 	beq	fp,zero,71e4 <___vfprintf_internal_r+0x888>
    71b4:	d8801f17 	ldw	r2,124(sp)
    71b8:	d9002784 	addi	r4,sp,158
    71bc:	18c00044 	addi	r3,r3,1
    71c0:	10800044 	addi	r2,r2,1
    71c4:	41000015 	stw	r4,0(r8)
    71c8:	01000044 	movi	r4,1
    71cc:	41000115 	stw	r4,4(r8)
    71d0:	d8c02015 	stw	r3,128(sp)
    71d4:	d8801f15 	stw	r2,124(sp)
    71d8:	010001c4 	movi	r4,7
    71dc:	20823c16 	blt	r4,r2,7ad0 <___vfprintf_internal_r+0x1174>
    71e0:	42000204 	addi	r8,r8,8
    71e4:	d8802b17 	ldw	r2,172(sp)
    71e8:	10000c26 	beq	r2,zero,721c <___vfprintf_internal_r+0x8c0>
    71ec:	d8801f17 	ldw	r2,124(sp)
    71f0:	d9002704 	addi	r4,sp,156
    71f4:	18c00084 	addi	r3,r3,2
    71f8:	10800044 	addi	r2,r2,1
    71fc:	41000015 	stw	r4,0(r8)
    7200:	01000084 	movi	r4,2
    7204:	41000115 	stw	r4,4(r8)
    7208:	d8c02015 	stw	r3,128(sp)
    720c:	d8801f15 	stw	r2,124(sp)
    7210:	010001c4 	movi	r4,7
    7214:	20823616 	blt	r4,r2,7af0 <___vfprintf_internal_r+0x1194>
    7218:	42000204 	addi	r8,r8,8
    721c:	d9003017 	ldw	r4,192(sp)
    7220:	00802004 	movi	r2,128
    7224:	20819926 	beq	r4,r2,788c <___vfprintf_internal_r+0xf30>
    7228:	d9402917 	ldw	r5,164(sp)
    722c:	d8802e17 	ldw	r2,184(sp)
    7230:	28adc83a 	sub	r22,r5,r2
    7234:	0580310e 	bge	zero,r22,72fc <___vfprintf_internal_r+0x9a0>
    7238:	07000404 	movi	fp,16
    723c:	d8801f17 	ldw	r2,124(sp)
    7240:	e584140e 	bge	fp,r22,8294 <___vfprintf_internal_r+0x1938>
    7244:	014000b4 	movhi	r5,2
    7248:	29554184 	addi	r5,r5,21766
    724c:	dc402915 	stw	r17,164(sp)
    7250:	d9402b15 	stw	r5,172(sp)
    7254:	b023883a 	mov	r17,r22
    7258:	04c001c4 	movi	r19,7
    725c:	a82d883a 	mov	r22,r21
    7260:	902b883a 	mov	r21,r18
    7264:	8025883a 	mov	r18,r16
    7268:	dc002c17 	ldw	r16,176(sp)
    726c:	00000306 	br	727c <___vfprintf_internal_r+0x920>
    7270:	8c7ffc04 	addi	r17,r17,-16
    7274:	42000204 	addi	r8,r8,8
    7278:	e440110e 	bge	fp,r17,72c0 <___vfprintf_internal_r+0x964>
    727c:	18c00404 	addi	r3,r3,16
    7280:	10800044 	addi	r2,r2,1
    7284:	45000015 	stw	r20,0(r8)
    7288:	47000115 	stw	fp,4(r8)
    728c:	d8c02015 	stw	r3,128(sp)
    7290:	d8801f15 	stw	r2,124(sp)
    7294:	98bff60e 	bge	r19,r2,7270 <__alt_data_end+0xfc007270>
    7298:	d9801e04 	addi	r6,sp,120
    729c:	b80b883a 	mov	r5,r23
    72a0:	8009883a 	mov	r4,r16
    72a4:	0012e840 	call	12e84 <__sprint_r>
    72a8:	103eae1e 	bne	r2,zero,6d64 <__alt_data_end+0xfc006d64>
    72ac:	8c7ffc04 	addi	r17,r17,-16
    72b0:	d8c02017 	ldw	r3,128(sp)
    72b4:	d8801f17 	ldw	r2,124(sp)
    72b8:	da000404 	addi	r8,sp,16
    72bc:	e47fef16 	blt	fp,r17,727c <__alt_data_end+0xfc00727c>
    72c0:	9021883a 	mov	r16,r18
    72c4:	a825883a 	mov	r18,r21
    72c8:	b02b883a 	mov	r21,r22
    72cc:	882d883a 	mov	r22,r17
    72d0:	dc402917 	ldw	r17,164(sp)
    72d4:	d9002b17 	ldw	r4,172(sp)
    72d8:	1d87883a 	add	r3,r3,r22
    72dc:	10800044 	addi	r2,r2,1
    72e0:	41000015 	stw	r4,0(r8)
    72e4:	45800115 	stw	r22,4(r8)
    72e8:	d8c02015 	stw	r3,128(sp)
    72ec:	d8801f15 	stw	r2,124(sp)
    72f0:	010001c4 	movi	r4,7
    72f4:	2081ee16 	blt	r4,r2,7ab0 <___vfprintf_internal_r+0x1154>
    72f8:	42000204 	addi	r8,r8,8
    72fc:	9080400c 	andi	r2,r18,256
    7300:	1001181e 	bne	r2,zero,7764 <___vfprintf_internal_r+0xe08>
    7304:	d9402e17 	ldw	r5,184(sp)
    7308:	d8801f17 	ldw	r2,124(sp)
    730c:	44000015 	stw	r16,0(r8)
    7310:	1947883a 	add	r3,r3,r5
    7314:	10800044 	addi	r2,r2,1
    7318:	41400115 	stw	r5,4(r8)
    731c:	d8c02015 	stw	r3,128(sp)
    7320:	d8801f15 	stw	r2,124(sp)
    7324:	010001c4 	movi	r4,7
    7328:	2081d316 	blt	r4,r2,7a78 <___vfprintf_internal_r+0x111c>
    732c:	42000204 	addi	r8,r8,8
    7330:	9480010c 	andi	r18,r18,4
    7334:	90003226 	beq	r18,zero,7400 <___vfprintf_internal_r+0xaa4>
    7338:	d9403117 	ldw	r5,196(sp)
    733c:	d8802a17 	ldw	r2,168(sp)
    7340:	28a1c83a 	sub	r16,r5,r2
    7344:	04002e0e 	bge	zero,r16,7400 <___vfprintf_internal_r+0xaa4>
    7348:	04400404 	movi	r17,16
    734c:	d8801f17 	ldw	r2,124(sp)
    7350:	8c04a20e 	bge	r17,r16,85dc <___vfprintf_internal_r+0x1c80>
    7354:	014000b4 	movhi	r5,2
    7358:	29554584 	addi	r5,r5,21782
    735c:	d9403515 	stw	r5,212(sp)
    7360:	048001c4 	movi	r18,7
    7364:	dcc02c17 	ldw	r19,176(sp)
    7368:	00000306 	br	7378 <___vfprintf_internal_r+0xa1c>
    736c:	843ffc04 	addi	r16,r16,-16
    7370:	42000204 	addi	r8,r8,8
    7374:	8c00130e 	bge	r17,r16,73c4 <___vfprintf_internal_r+0xa68>
    7378:	010000b4 	movhi	r4,2
    737c:	18c00404 	addi	r3,r3,16
    7380:	10800044 	addi	r2,r2,1
    7384:	21154584 	addi	r4,r4,21782
    7388:	41000015 	stw	r4,0(r8)
    738c:	44400115 	stw	r17,4(r8)
    7390:	d8c02015 	stw	r3,128(sp)
    7394:	d8801f15 	stw	r2,124(sp)
    7398:	90bff40e 	bge	r18,r2,736c <__alt_data_end+0xfc00736c>
    739c:	d9801e04 	addi	r6,sp,120
    73a0:	b80b883a 	mov	r5,r23
    73a4:	9809883a 	mov	r4,r19
    73a8:	0012e840 	call	12e84 <__sprint_r>
    73ac:	103e6d1e 	bne	r2,zero,6d64 <__alt_data_end+0xfc006d64>
    73b0:	843ffc04 	addi	r16,r16,-16
    73b4:	d8c02017 	ldw	r3,128(sp)
    73b8:	d8801f17 	ldw	r2,124(sp)
    73bc:	da000404 	addi	r8,sp,16
    73c0:	8c3fed16 	blt	r17,r16,7378 <__alt_data_end+0xfc007378>
    73c4:	d9403517 	ldw	r5,212(sp)
    73c8:	1c07883a 	add	r3,r3,r16
    73cc:	10800044 	addi	r2,r2,1
    73d0:	41400015 	stw	r5,0(r8)
    73d4:	44000115 	stw	r16,4(r8)
    73d8:	d8c02015 	stw	r3,128(sp)
    73dc:	d8801f15 	stw	r2,124(sp)
    73e0:	010001c4 	movi	r4,7
    73e4:	2080060e 	bge	r4,r2,7400 <___vfprintf_internal_r+0xaa4>
    73e8:	d9002c17 	ldw	r4,176(sp)
    73ec:	d9801e04 	addi	r6,sp,120
    73f0:	b80b883a 	mov	r5,r23
    73f4:	0012e840 	call	12e84 <__sprint_r>
    73f8:	103e5a1e 	bne	r2,zero,6d64 <__alt_data_end+0xfc006d64>
    73fc:	d8c02017 	ldw	r3,128(sp)
    7400:	d8803117 	ldw	r2,196(sp)
    7404:	d9002a17 	ldw	r4,168(sp)
    7408:	1100010e 	bge	r2,r4,7410 <___vfprintf_internal_r+0xab4>
    740c:	2005883a 	mov	r2,r4
    7410:	d9402f17 	ldw	r5,188(sp)
    7414:	288b883a 	add	r5,r5,r2
    7418:	d9402f15 	stw	r5,188(sp)
    741c:	18019e1e 	bne	r3,zero,7a98 <___vfprintf_internal_r+0x113c>
    7420:	a8800007 	ldb	r2,0(r21)
    7424:	d8001f15 	stw	zero,124(sp)
    7428:	da000404 	addi	r8,sp,16
    742c:	103d851e 	bne	r2,zero,6a44 <__alt_data_end+0xfc006a44>
    7430:	a821883a 	mov	r16,r21
    7434:	003d9b06 	br	6aa4 <__alt_data_end+0xfc006aa4>
    7438:	18c03fcc 	andi	r3,r3,255
    743c:	1805c11e 	bne	r3,zero,8b44 <___vfprintf_internal_r+0x21e8>
    7440:	94800414 	ori	r18,r18,16
    7444:	9080080c 	andi	r2,r18,32
    7448:	10020c26 	beq	r2,zero,7c7c <___vfprintf_internal_r+0x1320>
    744c:	d8802d17 	ldw	r2,180(sp)
    7450:	d9002917 	ldw	r4,164(sp)
    7454:	d8002785 	stb	zero,158(sp)
    7458:	10c00204 	addi	r3,r2,8
    745c:	14c00017 	ldw	r19,0(r2)
    7460:	15800117 	ldw	r22,4(r2)
    7464:	20040f16 	blt	r4,zero,84a4 <___vfprintf_internal_r+0x1b48>
    7468:	013fdfc4 	movi	r4,-129
    746c:	9d84b03a 	or	r2,r19,r22
    7470:	d8c02d15 	stw	r3,180(sp)
    7474:	9124703a 	and	r18,r18,r4
    7478:	0039883a 	mov	fp,zero
    747c:	103e891e 	bne	r2,zero,6ea4 <__alt_data_end+0xfc006ea4>
    7480:	d9002917 	ldw	r4,164(sp)
    7484:	2002c11e 	bne	r4,zero,7f8c <___vfprintf_internal_r+0x1630>
    7488:	d8002915 	stw	zero,164(sp)
    748c:	d8002e15 	stw	zero,184(sp)
    7490:	dc001e04 	addi	r16,sp,120
    7494:	003ef806 	br	7078 <__alt_data_end+0xfc007078>
    7498:	18c03fcc 	andi	r3,r3,255
    749c:	18059d1e 	bne	r3,zero,8b14 <___vfprintf_internal_r+0x21b8>
    74a0:	014000b4 	movhi	r5,2
    74a4:	29553504 	addi	r5,r5,21716
    74a8:	d9403915 	stw	r5,228(sp)
    74ac:	9080080c 	andi	r2,r18,32
    74b0:	10005226 	beq	r2,zero,75fc <___vfprintf_internal_r+0xca0>
    74b4:	d8802d17 	ldw	r2,180(sp)
    74b8:	14c00017 	ldw	r19,0(r2)
    74bc:	15800117 	ldw	r22,4(r2)
    74c0:	10800204 	addi	r2,r2,8
    74c4:	d8802d15 	stw	r2,180(sp)
    74c8:	9080004c 	andi	r2,r18,1
    74cc:	10019026 	beq	r2,zero,7b10 <___vfprintf_internal_r+0x11b4>
    74d0:	9d84b03a 	or	r2,r19,r22
    74d4:	10036926 	beq	r2,zero,827c <___vfprintf_internal_r+0x1920>
    74d8:	d8c02917 	ldw	r3,164(sp)
    74dc:	00800c04 	movi	r2,48
    74e0:	d8802705 	stb	r2,156(sp)
    74e4:	dc402745 	stb	r17,157(sp)
    74e8:	d8002785 	stb	zero,158(sp)
    74ec:	90800094 	ori	r2,r18,2
    74f0:	18045d16 	blt	r3,zero,8668 <___vfprintf_internal_r+0x1d0c>
    74f4:	00bfdfc4 	movi	r2,-129
    74f8:	90a4703a 	and	r18,r18,r2
    74fc:	94800094 	ori	r18,r18,2
    7500:	0039883a 	mov	fp,zero
    7504:	d9003917 	ldw	r4,228(sp)
    7508:	dc001e04 	addi	r16,sp,120
    750c:	988003cc 	andi	r2,r19,15
    7510:	b006973a 	slli	r3,r22,28
    7514:	2085883a 	add	r2,r4,r2
    7518:	9826d13a 	srli	r19,r19,4
    751c:	10800003 	ldbu	r2,0(r2)
    7520:	b02cd13a 	srli	r22,r22,4
    7524:	843fffc4 	addi	r16,r16,-1
    7528:	1ce6b03a 	or	r19,r3,r19
    752c:	80800005 	stb	r2,0(r16)
    7530:	9d84b03a 	or	r2,r19,r22
    7534:	103ff51e 	bne	r2,zero,750c <__alt_data_end+0xfc00750c>
    7538:	d8c02817 	ldw	r3,160(sp)
    753c:	1c07c83a 	sub	r3,r3,r16
    7540:	d8c02e15 	stw	r3,184(sp)
    7544:	003ecc06 	br	7078 <__alt_data_end+0xfc007078>
    7548:	18c03fcc 	andi	r3,r3,255
    754c:	183e9f26 	beq	r3,zero,6fcc <__alt_data_end+0xfc006fcc>
    7550:	d9c02785 	stb	r7,158(sp)
    7554:	003e9d06 	br	6fcc <__alt_data_end+0xfc006fcc>
    7558:	00c00044 	movi	r3,1
    755c:	01c00ac4 	movi	r7,43
    7560:	ac400007 	ldb	r17,0(r21)
    7564:	003d5e06 	br	6ae0 <__alt_data_end+0xfc006ae0>
    7568:	94800814 	ori	r18,r18,32
    756c:	ac400007 	ldb	r17,0(r21)
    7570:	003d5b06 	br	6ae0 <__alt_data_end+0xfc006ae0>
    7574:	d8c02d17 	ldw	r3,180(sp)
    7578:	d8002785 	stb	zero,158(sp)
    757c:	1c000017 	ldw	r16,0(r3)
    7580:	1cc00104 	addi	r19,r3,4
    7584:	80041926 	beq	r16,zero,85ec <___vfprintf_internal_r+0x1c90>
    7588:	d9002917 	ldw	r4,164(sp)
    758c:	2003d016 	blt	r4,zero,84d0 <___vfprintf_internal_r+0x1b74>
    7590:	200d883a 	mov	r6,r4
    7594:	000b883a 	mov	r5,zero
    7598:	8009883a 	mov	r4,r16
    759c:	da003d15 	stw	r8,244(sp)
    75a0:	00058540 	call	5854 <memchr>
    75a4:	da003d17 	ldw	r8,244(sp)
    75a8:	10045426 	beq	r2,zero,86fc <___vfprintf_internal_r+0x1da0>
    75ac:	1405c83a 	sub	r2,r2,r16
    75b0:	d8802e15 	stw	r2,184(sp)
    75b4:	1003cc16 	blt	r2,zero,84e8 <___vfprintf_internal_r+0x1b8c>
    75b8:	df002783 	ldbu	fp,158(sp)
    75bc:	d8802a15 	stw	r2,168(sp)
    75c0:	dcc02d15 	stw	r19,180(sp)
    75c4:	d8002915 	stw	zero,164(sp)
    75c8:	d8003215 	stw	zero,200(sp)
    75cc:	003eb006 	br	7090 <__alt_data_end+0xfc007090>
    75d0:	18c03fcc 	andi	r3,r3,255
    75d4:	183f9b26 	beq	r3,zero,7444 <__alt_data_end+0xfc007444>
    75d8:	d9c02785 	stb	r7,158(sp)
    75dc:	003f9906 	br	7444 <__alt_data_end+0xfc007444>
    75e0:	18c03fcc 	andi	r3,r3,255
    75e4:	1805551e 	bne	r3,zero,8b3c <___vfprintf_internal_r+0x21e0>
    75e8:	014000b4 	movhi	r5,2
    75ec:	29553a04 	addi	r5,r5,21736
    75f0:	d9403915 	stw	r5,228(sp)
    75f4:	9080080c 	andi	r2,r18,32
    75f8:	103fae1e 	bne	r2,zero,74b4 <__alt_data_end+0xfc0074b4>
    75fc:	9080040c 	andi	r2,r18,16
    7600:	1002de26 	beq	r2,zero,817c <___vfprintf_internal_r+0x1820>
    7604:	d8c02d17 	ldw	r3,180(sp)
    7608:	002d883a 	mov	r22,zero
    760c:	1cc00017 	ldw	r19,0(r3)
    7610:	18c00104 	addi	r3,r3,4
    7614:	d8c02d15 	stw	r3,180(sp)
    7618:	003fab06 	br	74c8 <__alt_data_end+0xfc0074c8>
    761c:	38803fcc 	andi	r2,r7,255
    7620:	1080201c 	xori	r2,r2,128
    7624:	10bfe004 	addi	r2,r2,-128
    7628:	1002d21e 	bne	r2,zero,8174 <___vfprintf_internal_r+0x1818>
    762c:	00c00044 	movi	r3,1
    7630:	01c00804 	movi	r7,32
    7634:	ac400007 	ldb	r17,0(r21)
    7638:	003d2906 	br	6ae0 <__alt_data_end+0xfc006ae0>
    763c:	94800054 	ori	r18,r18,1
    7640:	ac400007 	ldb	r17,0(r21)
    7644:	003d2606 	br	6ae0 <__alt_data_end+0xfc006ae0>
    7648:	18c03fcc 	andi	r3,r3,255
    764c:	183e0526 	beq	r3,zero,6e64 <__alt_data_end+0xfc006e64>
    7650:	d9c02785 	stb	r7,158(sp)
    7654:	003e0306 	br	6e64 <__alt_data_end+0xfc006e64>
    7658:	94801014 	ori	r18,r18,64
    765c:	ac400007 	ldb	r17,0(r21)
    7660:	003d1f06 	br	6ae0 <__alt_data_end+0xfc006ae0>
    7664:	ac400007 	ldb	r17,0(r21)
    7668:	8a438726 	beq	r17,r9,8488 <___vfprintf_internal_r+0x1b2c>
    766c:	94800414 	ori	r18,r18,16
    7670:	003d1b06 	br	6ae0 <__alt_data_end+0xfc006ae0>
    7674:	18c03fcc 	andi	r3,r3,255
    7678:	1805341e 	bne	r3,zero,8b4c <___vfprintf_internal_r+0x21f0>
    767c:	9080080c 	andi	r2,r18,32
    7680:	1002cd26 	beq	r2,zero,81b8 <___vfprintf_internal_r+0x185c>
    7684:	d9402d17 	ldw	r5,180(sp)
    7688:	d9002f17 	ldw	r4,188(sp)
    768c:	28800017 	ldw	r2,0(r5)
    7690:	2007d7fa 	srai	r3,r4,31
    7694:	29400104 	addi	r5,r5,4
    7698:	d9402d15 	stw	r5,180(sp)
    769c:	11000015 	stw	r4,0(r2)
    76a0:	10c00115 	stw	r3,4(r2)
    76a4:	003ce506 	br	6a3c <__alt_data_end+0xfc006a3c>
    76a8:	d8c02d17 	ldw	r3,180(sp)
    76ac:	d9002d17 	ldw	r4,180(sp)
    76b0:	d8002785 	stb	zero,158(sp)
    76b4:	18800017 	ldw	r2,0(r3)
    76b8:	21000104 	addi	r4,r4,4
    76bc:	00c00044 	movi	r3,1
    76c0:	d8c02a15 	stw	r3,168(sp)
    76c4:	d8801405 	stb	r2,80(sp)
    76c8:	d9002d15 	stw	r4,180(sp)
    76cc:	d8c02e15 	stw	r3,184(sp)
    76d0:	d8002915 	stw	zero,164(sp)
    76d4:	d8003215 	stw	zero,200(sp)
    76d8:	dc001404 	addi	r16,sp,80
    76dc:	0039883a 	mov	fp,zero
    76e0:	003e7206 	br	70ac <__alt_data_end+0xfc0070ac>
    76e4:	010000b4 	movhi	r4,2
    76e8:	21153a04 	addi	r4,r4,21736
    76ec:	0039883a 	mov	fp,zero
    76f0:	d9003915 	stw	r4,228(sp)
    76f4:	04401e04 	movi	r17,120
    76f8:	003f8206 	br	7504 <__alt_data_end+0xfc007504>
    76fc:	18c03fcc 	andi	r3,r3,255
    7700:	1805061e 	bne	r3,zero,8b1c <___vfprintf_internal_r+0x21c0>
    7704:	883d9126 	beq	r17,zero,6d4c <__alt_data_end+0xfc006d4c>
    7708:	00c00044 	movi	r3,1
    770c:	d8c02a15 	stw	r3,168(sp)
    7710:	dc401405 	stb	r17,80(sp)
    7714:	d8002785 	stb	zero,158(sp)
    7718:	003fec06 	br	76cc <__alt_data_end+0xfc0076cc>
    771c:	014000b4 	movhi	r5,2
    7720:	29553a04 	addi	r5,r5,21736
    7724:	d9403915 	stw	r5,228(sp)
    7728:	d8c02d15 	stw	r3,180(sp)
    772c:	1025883a 	mov	r18,r2
    7730:	04401e04 	movi	r17,120
    7734:	9d84b03a 	or	r2,r19,r22
    7738:	1000fc1e 	bne	r2,zero,7b2c <___vfprintf_internal_r+0x11d0>
    773c:	0039883a 	mov	fp,zero
    7740:	00800084 	movi	r2,2
    7744:	10803fcc 	andi	r2,r2,255
    7748:	00c00044 	movi	r3,1
    774c:	10c20f26 	beq	r2,r3,7f8c <___vfprintf_internal_r+0x1630>
    7750:	00c00084 	movi	r3,2
    7754:	10fd6326 	beq	r2,r3,6ce4 <__alt_data_end+0xfc006ce4>
    7758:	003e2d06 	br	7010 <__alt_data_end+0xfc007010>
    775c:	d8c02017 	ldw	r3,128(sp)
    7760:	003e9306 	br	71b0 <__alt_data_end+0xfc0071b0>
    7764:	00801944 	movi	r2,101
    7768:	14407e0e 	bge	r2,r17,7964 <___vfprintf_internal_r+0x1008>
    776c:	d9003617 	ldw	r4,216(sp)
    7770:	d9403817 	ldw	r5,224(sp)
    7774:	000d883a 	mov	r6,zero
    7778:	000f883a 	mov	r7,zero
    777c:	d8c03c15 	stw	r3,240(sp)
    7780:	da003d15 	stw	r8,244(sp)
    7784:	0018b5c0 	call	18b5c <__eqdf2>
    7788:	d8c03c17 	ldw	r3,240(sp)
    778c:	da003d17 	ldw	r8,244(sp)
    7790:	1000f71e 	bne	r2,zero,7b70 <___vfprintf_internal_r+0x1214>
    7794:	d8801f17 	ldw	r2,124(sp)
    7798:	010000b4 	movhi	r4,2
    779c:	21154104 	addi	r4,r4,21764
    77a0:	18c00044 	addi	r3,r3,1
    77a4:	10800044 	addi	r2,r2,1
    77a8:	41000015 	stw	r4,0(r8)
    77ac:	01000044 	movi	r4,1
    77b0:	41000115 	stw	r4,4(r8)
    77b4:	d8c02015 	stw	r3,128(sp)
    77b8:	d8801f15 	stw	r2,124(sp)
    77bc:	010001c4 	movi	r4,7
    77c0:	2082b816 	blt	r4,r2,82a4 <___vfprintf_internal_r+0x1948>
    77c4:	42000204 	addi	r8,r8,8
    77c8:	d8802617 	ldw	r2,152(sp)
    77cc:	d9403317 	ldw	r5,204(sp)
    77d0:	11400216 	blt	r2,r5,77dc <___vfprintf_internal_r+0xe80>
    77d4:	9080004c 	andi	r2,r18,1
    77d8:	103ed526 	beq	r2,zero,7330 <__alt_data_end+0xfc007330>
    77dc:	d8803717 	ldw	r2,220(sp)
    77e0:	d9003417 	ldw	r4,208(sp)
    77e4:	d9403717 	ldw	r5,220(sp)
    77e8:	1887883a 	add	r3,r3,r2
    77ec:	d8801f17 	ldw	r2,124(sp)
    77f0:	41000015 	stw	r4,0(r8)
    77f4:	41400115 	stw	r5,4(r8)
    77f8:	10800044 	addi	r2,r2,1
    77fc:	d8c02015 	stw	r3,128(sp)
    7800:	d8801f15 	stw	r2,124(sp)
    7804:	010001c4 	movi	r4,7
    7808:	20832916 	blt	r4,r2,84b0 <___vfprintf_internal_r+0x1b54>
    780c:	42000204 	addi	r8,r8,8
    7810:	d8803317 	ldw	r2,204(sp)
    7814:	143fffc4 	addi	r16,r2,-1
    7818:	043ec50e 	bge	zero,r16,7330 <__alt_data_end+0xfc007330>
    781c:	04400404 	movi	r17,16
    7820:	d8801f17 	ldw	r2,124(sp)
    7824:	8c00880e 	bge	r17,r16,7a48 <___vfprintf_internal_r+0x10ec>
    7828:	014000b4 	movhi	r5,2
    782c:	29554184 	addi	r5,r5,21766
    7830:	d9402b15 	stw	r5,172(sp)
    7834:	058001c4 	movi	r22,7
    7838:	dcc02c17 	ldw	r19,176(sp)
    783c:	00000306 	br	784c <___vfprintf_internal_r+0xef0>
    7840:	42000204 	addi	r8,r8,8
    7844:	843ffc04 	addi	r16,r16,-16
    7848:	8c00820e 	bge	r17,r16,7a54 <___vfprintf_internal_r+0x10f8>
    784c:	18c00404 	addi	r3,r3,16
    7850:	10800044 	addi	r2,r2,1
    7854:	45000015 	stw	r20,0(r8)
    7858:	44400115 	stw	r17,4(r8)
    785c:	d8c02015 	stw	r3,128(sp)
    7860:	d8801f15 	stw	r2,124(sp)
    7864:	b0bff60e 	bge	r22,r2,7840 <__alt_data_end+0xfc007840>
    7868:	d9801e04 	addi	r6,sp,120
    786c:	b80b883a 	mov	r5,r23
    7870:	9809883a 	mov	r4,r19
    7874:	0012e840 	call	12e84 <__sprint_r>
    7878:	103d3a1e 	bne	r2,zero,6d64 <__alt_data_end+0xfc006d64>
    787c:	d8c02017 	ldw	r3,128(sp)
    7880:	d8801f17 	ldw	r2,124(sp)
    7884:	da000404 	addi	r8,sp,16
    7888:	003fee06 	br	7844 <__alt_data_end+0xfc007844>
    788c:	d9403117 	ldw	r5,196(sp)
    7890:	d8802a17 	ldw	r2,168(sp)
    7894:	28adc83a 	sub	r22,r5,r2
    7898:	05be630e 	bge	zero,r22,7228 <__alt_data_end+0xfc007228>
    789c:	07000404 	movi	fp,16
    78a0:	d8801f17 	ldw	r2,124(sp)
    78a4:	e5838f0e 	bge	fp,r22,86e4 <___vfprintf_internal_r+0x1d88>
    78a8:	014000b4 	movhi	r5,2
    78ac:	29554184 	addi	r5,r5,21766
    78b0:	dc403015 	stw	r17,192(sp)
    78b4:	d9402b15 	stw	r5,172(sp)
    78b8:	b023883a 	mov	r17,r22
    78bc:	04c001c4 	movi	r19,7
    78c0:	a82d883a 	mov	r22,r21
    78c4:	902b883a 	mov	r21,r18
    78c8:	8025883a 	mov	r18,r16
    78cc:	dc002c17 	ldw	r16,176(sp)
    78d0:	00000306 	br	78e0 <___vfprintf_internal_r+0xf84>
    78d4:	8c7ffc04 	addi	r17,r17,-16
    78d8:	42000204 	addi	r8,r8,8
    78dc:	e440110e 	bge	fp,r17,7924 <___vfprintf_internal_r+0xfc8>
    78e0:	18c00404 	addi	r3,r3,16
    78e4:	10800044 	addi	r2,r2,1
    78e8:	45000015 	stw	r20,0(r8)
    78ec:	47000115 	stw	fp,4(r8)
    78f0:	d8c02015 	stw	r3,128(sp)
    78f4:	d8801f15 	stw	r2,124(sp)
    78f8:	98bff60e 	bge	r19,r2,78d4 <__alt_data_end+0xfc0078d4>
    78fc:	d9801e04 	addi	r6,sp,120
    7900:	b80b883a 	mov	r5,r23
    7904:	8009883a 	mov	r4,r16
    7908:	0012e840 	call	12e84 <__sprint_r>
    790c:	103d151e 	bne	r2,zero,6d64 <__alt_data_end+0xfc006d64>
    7910:	8c7ffc04 	addi	r17,r17,-16
    7914:	d8c02017 	ldw	r3,128(sp)
    7918:	d8801f17 	ldw	r2,124(sp)
    791c:	da000404 	addi	r8,sp,16
    7920:	e47fef16 	blt	fp,r17,78e0 <__alt_data_end+0xfc0078e0>
    7924:	9021883a 	mov	r16,r18
    7928:	a825883a 	mov	r18,r21
    792c:	b02b883a 	mov	r21,r22
    7930:	882d883a 	mov	r22,r17
    7934:	dc403017 	ldw	r17,192(sp)
    7938:	d9002b17 	ldw	r4,172(sp)
    793c:	1d87883a 	add	r3,r3,r22
    7940:	10800044 	addi	r2,r2,1
    7944:	41000015 	stw	r4,0(r8)
    7948:	45800115 	stw	r22,4(r8)
    794c:	d8c02015 	stw	r3,128(sp)
    7950:	d8801f15 	stw	r2,124(sp)
    7954:	010001c4 	movi	r4,7
    7958:	20818e16 	blt	r4,r2,7f94 <___vfprintf_internal_r+0x1638>
    795c:	42000204 	addi	r8,r8,8
    7960:	003e3106 	br	7228 <__alt_data_end+0xfc007228>
    7964:	d9403317 	ldw	r5,204(sp)
    7968:	00800044 	movi	r2,1
    796c:	18c00044 	addi	r3,r3,1
    7970:	1141530e 	bge	r2,r5,7ec0 <___vfprintf_internal_r+0x1564>
    7974:	dc401f17 	ldw	r17,124(sp)
    7978:	00800044 	movi	r2,1
    797c:	40800115 	stw	r2,4(r8)
    7980:	8c400044 	addi	r17,r17,1
    7984:	44000015 	stw	r16,0(r8)
    7988:	d8c02015 	stw	r3,128(sp)
    798c:	dc401f15 	stw	r17,124(sp)
    7990:	008001c4 	movi	r2,7
    7994:	14416b16 	blt	r2,r17,7f44 <___vfprintf_internal_r+0x15e8>
    7998:	42000204 	addi	r8,r8,8
    799c:	d8803717 	ldw	r2,220(sp)
    79a0:	d9003417 	ldw	r4,208(sp)
    79a4:	8c400044 	addi	r17,r17,1
    79a8:	10c7883a 	add	r3,r2,r3
    79ac:	40800115 	stw	r2,4(r8)
    79b0:	41000015 	stw	r4,0(r8)
    79b4:	d8c02015 	stw	r3,128(sp)
    79b8:	dc401f15 	stw	r17,124(sp)
    79bc:	008001c4 	movi	r2,7
    79c0:	14416916 	blt	r2,r17,7f68 <___vfprintf_internal_r+0x160c>
    79c4:	45800204 	addi	r22,r8,8
    79c8:	d9003617 	ldw	r4,216(sp)
    79cc:	d9403817 	ldw	r5,224(sp)
    79d0:	000d883a 	mov	r6,zero
    79d4:	000f883a 	mov	r7,zero
    79d8:	d8c03c15 	stw	r3,240(sp)
    79dc:	0018b5c0 	call	18b5c <__eqdf2>
    79e0:	d8c03c17 	ldw	r3,240(sp)
    79e4:	1000bc26 	beq	r2,zero,7cd8 <___vfprintf_internal_r+0x137c>
    79e8:	d9403317 	ldw	r5,204(sp)
    79ec:	84000044 	addi	r16,r16,1
    79f0:	8c400044 	addi	r17,r17,1
    79f4:	28bfffc4 	addi	r2,r5,-1
    79f8:	1887883a 	add	r3,r3,r2
    79fc:	b0800115 	stw	r2,4(r22)
    7a00:	b4000015 	stw	r16,0(r22)
    7a04:	d8c02015 	stw	r3,128(sp)
    7a08:	dc401f15 	stw	r17,124(sp)
    7a0c:	008001c4 	movi	r2,7
    7a10:	14414316 	blt	r2,r17,7f20 <___vfprintf_internal_r+0x15c4>
    7a14:	b5800204 	addi	r22,r22,8
    7a18:	d9003a17 	ldw	r4,232(sp)
    7a1c:	df0022c4 	addi	fp,sp,139
    7a20:	8c400044 	addi	r17,r17,1
    7a24:	20c7883a 	add	r3,r4,r3
    7a28:	b7000015 	stw	fp,0(r22)
    7a2c:	b1000115 	stw	r4,4(r22)
    7a30:	d8c02015 	stw	r3,128(sp)
    7a34:	dc401f15 	stw	r17,124(sp)
    7a38:	008001c4 	movi	r2,7
    7a3c:	14400e16 	blt	r2,r17,7a78 <___vfprintf_internal_r+0x111c>
    7a40:	b2000204 	addi	r8,r22,8
    7a44:	003e3a06 	br	7330 <__alt_data_end+0xfc007330>
    7a48:	010000b4 	movhi	r4,2
    7a4c:	21154184 	addi	r4,r4,21766
    7a50:	d9002b15 	stw	r4,172(sp)
    7a54:	d9002b17 	ldw	r4,172(sp)
    7a58:	1c07883a 	add	r3,r3,r16
    7a5c:	44000115 	stw	r16,4(r8)
    7a60:	41000015 	stw	r4,0(r8)
    7a64:	10800044 	addi	r2,r2,1
    7a68:	d8c02015 	stw	r3,128(sp)
    7a6c:	d8801f15 	stw	r2,124(sp)
    7a70:	010001c4 	movi	r4,7
    7a74:	20be2d0e 	bge	r4,r2,732c <__alt_data_end+0xfc00732c>
    7a78:	d9002c17 	ldw	r4,176(sp)
    7a7c:	d9801e04 	addi	r6,sp,120
    7a80:	b80b883a 	mov	r5,r23
    7a84:	0012e840 	call	12e84 <__sprint_r>
    7a88:	103cb61e 	bne	r2,zero,6d64 <__alt_data_end+0xfc006d64>
    7a8c:	d8c02017 	ldw	r3,128(sp)
    7a90:	da000404 	addi	r8,sp,16
    7a94:	003e2606 	br	7330 <__alt_data_end+0xfc007330>
    7a98:	d9002c17 	ldw	r4,176(sp)
    7a9c:	d9801e04 	addi	r6,sp,120
    7aa0:	b80b883a 	mov	r5,r23
    7aa4:	0012e840 	call	12e84 <__sprint_r>
    7aa8:	103e5d26 	beq	r2,zero,7420 <__alt_data_end+0xfc007420>
    7aac:	003cad06 	br	6d64 <__alt_data_end+0xfc006d64>
    7ab0:	d9002c17 	ldw	r4,176(sp)
    7ab4:	d9801e04 	addi	r6,sp,120
    7ab8:	b80b883a 	mov	r5,r23
    7abc:	0012e840 	call	12e84 <__sprint_r>
    7ac0:	103ca81e 	bne	r2,zero,6d64 <__alt_data_end+0xfc006d64>
    7ac4:	d8c02017 	ldw	r3,128(sp)
    7ac8:	da000404 	addi	r8,sp,16
    7acc:	003e0b06 	br	72fc <__alt_data_end+0xfc0072fc>
    7ad0:	d9002c17 	ldw	r4,176(sp)
    7ad4:	d9801e04 	addi	r6,sp,120
    7ad8:	b80b883a 	mov	r5,r23
    7adc:	0012e840 	call	12e84 <__sprint_r>
    7ae0:	103ca01e 	bne	r2,zero,6d64 <__alt_data_end+0xfc006d64>
    7ae4:	d8c02017 	ldw	r3,128(sp)
    7ae8:	da000404 	addi	r8,sp,16
    7aec:	003dbd06 	br	71e4 <__alt_data_end+0xfc0071e4>
    7af0:	d9002c17 	ldw	r4,176(sp)
    7af4:	d9801e04 	addi	r6,sp,120
    7af8:	b80b883a 	mov	r5,r23
    7afc:	0012e840 	call	12e84 <__sprint_r>
    7b00:	103c981e 	bne	r2,zero,6d64 <__alt_data_end+0xfc006d64>
    7b04:	d8c02017 	ldw	r3,128(sp)
    7b08:	da000404 	addi	r8,sp,16
    7b0c:	003dc306 	br	721c <__alt_data_end+0xfc00721c>
    7b10:	d8802917 	ldw	r2,164(sp)
    7b14:	d8002785 	stb	zero,158(sp)
    7b18:	103f0616 	blt	r2,zero,7734 <__alt_data_end+0xfc007734>
    7b1c:	00ffdfc4 	movi	r3,-129
    7b20:	9d84b03a 	or	r2,r19,r22
    7b24:	90e4703a 	and	r18,r18,r3
    7b28:	103c6b26 	beq	r2,zero,6cd8 <__alt_data_end+0xfc006cd8>
    7b2c:	0039883a 	mov	fp,zero
    7b30:	003e7406 	br	7504 <__alt_data_end+0xfc007504>
    7b34:	9080040c 	andi	r2,r18,16
    7b38:	1001b326 	beq	r2,zero,8208 <___vfprintf_internal_r+0x18ac>
    7b3c:	d9002d17 	ldw	r4,180(sp)
    7b40:	d9402917 	ldw	r5,164(sp)
    7b44:	d8002785 	stb	zero,158(sp)
    7b48:	20800104 	addi	r2,r4,4
    7b4c:	24c00017 	ldw	r19,0(r4)
    7b50:	002d883a 	mov	r22,zero
    7b54:	2801b516 	blt	r5,zero,822c <___vfprintf_internal_r+0x18d0>
    7b58:	00ffdfc4 	movi	r3,-129
    7b5c:	d8802d15 	stw	r2,180(sp)
    7b60:	90e4703a 	and	r18,r18,r3
    7b64:	983d2726 	beq	r19,zero,7004 <__alt_data_end+0xfc007004>
    7b68:	0039883a 	mov	fp,zero
    7b6c:	003d2a06 	br	7018 <__alt_data_end+0xfc007018>
    7b70:	dc402617 	ldw	r17,152(sp)
    7b74:	0441d30e 	bge	zero,r17,82c4 <___vfprintf_internal_r+0x1968>
    7b78:	dc403217 	ldw	r17,200(sp)
    7b7c:	d8803317 	ldw	r2,204(sp)
    7b80:	1440010e 	bge	r2,r17,7b88 <___vfprintf_internal_r+0x122c>
    7b84:	1023883a 	mov	r17,r2
    7b88:	04400a0e 	bge	zero,r17,7bb4 <___vfprintf_internal_r+0x1258>
    7b8c:	d8801f17 	ldw	r2,124(sp)
    7b90:	1c47883a 	add	r3,r3,r17
    7b94:	44000015 	stw	r16,0(r8)
    7b98:	10800044 	addi	r2,r2,1
    7b9c:	44400115 	stw	r17,4(r8)
    7ba0:	d8c02015 	stw	r3,128(sp)
    7ba4:	d8801f15 	stw	r2,124(sp)
    7ba8:	010001c4 	movi	r4,7
    7bac:	20826516 	blt	r4,r2,8544 <___vfprintf_internal_r+0x1be8>
    7bb0:	42000204 	addi	r8,r8,8
    7bb4:	88026116 	blt	r17,zero,853c <___vfprintf_internal_r+0x1be0>
    7bb8:	d9003217 	ldw	r4,200(sp)
    7bbc:	2463c83a 	sub	r17,r4,r17
    7bc0:	04407b0e 	bge	zero,r17,7db0 <___vfprintf_internal_r+0x1454>
    7bc4:	05800404 	movi	r22,16
    7bc8:	d8801f17 	ldw	r2,124(sp)
    7bcc:	b4419d0e 	bge	r22,r17,8244 <___vfprintf_internal_r+0x18e8>
    7bd0:	010000b4 	movhi	r4,2
    7bd4:	21154184 	addi	r4,r4,21766
    7bd8:	d9002b15 	stw	r4,172(sp)
    7bdc:	070001c4 	movi	fp,7
    7be0:	dcc02c17 	ldw	r19,176(sp)
    7be4:	00000306 	br	7bf4 <___vfprintf_internal_r+0x1298>
    7be8:	42000204 	addi	r8,r8,8
    7bec:	8c7ffc04 	addi	r17,r17,-16
    7bf0:	b441970e 	bge	r22,r17,8250 <___vfprintf_internal_r+0x18f4>
    7bf4:	18c00404 	addi	r3,r3,16
    7bf8:	10800044 	addi	r2,r2,1
    7bfc:	45000015 	stw	r20,0(r8)
    7c00:	45800115 	stw	r22,4(r8)
    7c04:	d8c02015 	stw	r3,128(sp)
    7c08:	d8801f15 	stw	r2,124(sp)
    7c0c:	e0bff60e 	bge	fp,r2,7be8 <__alt_data_end+0xfc007be8>
    7c10:	d9801e04 	addi	r6,sp,120
    7c14:	b80b883a 	mov	r5,r23
    7c18:	9809883a 	mov	r4,r19
    7c1c:	0012e840 	call	12e84 <__sprint_r>
    7c20:	103c501e 	bne	r2,zero,6d64 <__alt_data_end+0xfc006d64>
    7c24:	d8c02017 	ldw	r3,128(sp)
    7c28:	d8801f17 	ldw	r2,124(sp)
    7c2c:	da000404 	addi	r8,sp,16
    7c30:	003fee06 	br	7bec <__alt_data_end+0xfc007bec>
    7c34:	d9002c17 	ldw	r4,176(sp)
    7c38:	d9801e04 	addi	r6,sp,120
    7c3c:	b80b883a 	mov	r5,r23
    7c40:	0012e840 	call	12e84 <__sprint_r>
    7c44:	103c471e 	bne	r2,zero,6d64 <__alt_data_end+0xfc006d64>
    7c48:	d8c02017 	ldw	r3,128(sp)
    7c4c:	df002787 	ldb	fp,158(sp)
    7c50:	da000404 	addi	r8,sp,16
    7c54:	003d5606 	br	71b0 <__alt_data_end+0xfc0071b0>
    7c58:	9080040c 	andi	r2,r18,16
    7c5c:	10016126 	beq	r2,zero,81e4 <___vfprintf_internal_r+0x1888>
    7c60:	d8802d17 	ldw	r2,180(sp)
    7c64:	14c00017 	ldw	r19,0(r2)
    7c68:	10800104 	addi	r2,r2,4
    7c6c:	d8802d15 	stw	r2,180(sp)
    7c70:	982dd7fa 	srai	r22,r19,31
    7c74:	b005883a 	mov	r2,r22
    7c78:	003c8206 	br	6e84 <__alt_data_end+0xfc006e84>
    7c7c:	9080040c 	andi	r2,r18,16
    7c80:	10003526 	beq	r2,zero,7d58 <___vfprintf_internal_r+0x13fc>
    7c84:	d9402d17 	ldw	r5,180(sp)
    7c88:	d8c02917 	ldw	r3,164(sp)
    7c8c:	d8002785 	stb	zero,158(sp)
    7c90:	28800104 	addi	r2,r5,4
    7c94:	2cc00017 	ldw	r19,0(r5)
    7c98:	002d883a 	mov	r22,zero
    7c9c:	18003716 	blt	r3,zero,7d7c <___vfprintf_internal_r+0x1420>
    7ca0:	00ffdfc4 	movi	r3,-129
    7ca4:	d8802d15 	stw	r2,180(sp)
    7ca8:	90e4703a 	and	r18,r18,r3
    7cac:	0039883a 	mov	fp,zero
    7cb0:	983df326 	beq	r19,zero,7480 <__alt_data_end+0xfc007480>
    7cb4:	00800244 	movi	r2,9
    7cb8:	14fc7b36 	bltu	r2,r19,6ea8 <__alt_data_end+0xfc006ea8>
    7cbc:	d8c02817 	ldw	r3,160(sp)
    7cc0:	dc001dc4 	addi	r16,sp,119
    7cc4:	9cc00c04 	addi	r19,r19,48
    7cc8:	1c07c83a 	sub	r3,r3,r16
    7ccc:	dcc01dc5 	stb	r19,119(sp)
    7cd0:	d8c02e15 	stw	r3,184(sp)
    7cd4:	003ce806 	br	7078 <__alt_data_end+0xfc007078>
    7cd8:	d8803317 	ldw	r2,204(sp)
    7cdc:	143fffc4 	addi	r16,r2,-1
    7ce0:	043f4d0e 	bge	zero,r16,7a18 <__alt_data_end+0xfc007a18>
    7ce4:	07000404 	movi	fp,16
    7ce8:	e400810e 	bge	fp,r16,7ef0 <___vfprintf_internal_r+0x1594>
    7cec:	014000b4 	movhi	r5,2
    7cf0:	29554184 	addi	r5,r5,21766
    7cf4:	d9402b15 	stw	r5,172(sp)
    7cf8:	01c001c4 	movi	r7,7
    7cfc:	dcc02c17 	ldw	r19,176(sp)
    7d00:	00000306 	br	7d10 <___vfprintf_internal_r+0x13b4>
    7d04:	b5800204 	addi	r22,r22,8
    7d08:	843ffc04 	addi	r16,r16,-16
    7d0c:	e4007b0e 	bge	fp,r16,7efc <___vfprintf_internal_r+0x15a0>
    7d10:	18c00404 	addi	r3,r3,16
    7d14:	8c400044 	addi	r17,r17,1
    7d18:	b5000015 	stw	r20,0(r22)
    7d1c:	b7000115 	stw	fp,4(r22)
    7d20:	d8c02015 	stw	r3,128(sp)
    7d24:	dc401f15 	stw	r17,124(sp)
    7d28:	3c7ff60e 	bge	r7,r17,7d04 <__alt_data_end+0xfc007d04>
    7d2c:	d9801e04 	addi	r6,sp,120
    7d30:	b80b883a 	mov	r5,r23
    7d34:	9809883a 	mov	r4,r19
    7d38:	d9c03c15 	stw	r7,240(sp)
    7d3c:	0012e840 	call	12e84 <__sprint_r>
    7d40:	d9c03c17 	ldw	r7,240(sp)
    7d44:	103c071e 	bne	r2,zero,6d64 <__alt_data_end+0xfc006d64>
    7d48:	d8c02017 	ldw	r3,128(sp)
    7d4c:	dc401f17 	ldw	r17,124(sp)
    7d50:	dd800404 	addi	r22,sp,16
    7d54:	003fec06 	br	7d08 <__alt_data_end+0xfc007d08>
    7d58:	9080100c 	andi	r2,r18,64
    7d5c:	d8002785 	stb	zero,158(sp)
    7d60:	10010e26 	beq	r2,zero,819c <___vfprintf_internal_r+0x1840>
    7d64:	d9002d17 	ldw	r4,180(sp)
    7d68:	d9402917 	ldw	r5,164(sp)
    7d6c:	002d883a 	mov	r22,zero
    7d70:	20800104 	addi	r2,r4,4
    7d74:	24c0000b 	ldhu	r19,0(r4)
    7d78:	283fc90e 	bge	r5,zero,7ca0 <__alt_data_end+0xfc007ca0>
    7d7c:	d8802d15 	stw	r2,180(sp)
    7d80:	0039883a 	mov	fp,zero
    7d84:	9d84b03a 	or	r2,r19,r22
    7d88:	103c461e 	bne	r2,zero,6ea4 <__alt_data_end+0xfc006ea4>
    7d8c:	00800044 	movi	r2,1
    7d90:	003e6c06 	br	7744 <__alt_data_end+0xfc007744>
    7d94:	d9002c17 	ldw	r4,176(sp)
    7d98:	d9801e04 	addi	r6,sp,120
    7d9c:	b80b883a 	mov	r5,r23
    7da0:	0012e840 	call	12e84 <__sprint_r>
    7da4:	103bef1e 	bne	r2,zero,6d64 <__alt_data_end+0xfc006d64>
    7da8:	d8c02017 	ldw	r3,128(sp)
    7dac:	da000404 	addi	r8,sp,16
    7db0:	d9003217 	ldw	r4,200(sp)
    7db4:	d8802617 	ldw	r2,152(sp)
    7db8:	d9403317 	ldw	r5,204(sp)
    7dbc:	8123883a 	add	r17,r16,r4
    7dc0:	11400216 	blt	r2,r5,7dcc <___vfprintf_internal_r+0x1470>
    7dc4:	9100004c 	andi	r4,r18,1
    7dc8:	20000d26 	beq	r4,zero,7e00 <___vfprintf_internal_r+0x14a4>
    7dcc:	d9003717 	ldw	r4,220(sp)
    7dd0:	d9403417 	ldw	r5,208(sp)
    7dd4:	1907883a 	add	r3,r3,r4
    7dd8:	d9001f17 	ldw	r4,124(sp)
    7ddc:	41400015 	stw	r5,0(r8)
    7de0:	d9403717 	ldw	r5,220(sp)
    7de4:	21000044 	addi	r4,r4,1
    7de8:	d8c02015 	stw	r3,128(sp)
    7dec:	41400115 	stw	r5,4(r8)
    7df0:	d9001f15 	stw	r4,124(sp)
    7df4:	014001c4 	movi	r5,7
    7df8:	2901e816 	blt	r5,r4,859c <___vfprintf_internal_r+0x1c40>
    7dfc:	42000204 	addi	r8,r8,8
    7e00:	d9003317 	ldw	r4,204(sp)
    7e04:	8121883a 	add	r16,r16,r4
    7e08:	2085c83a 	sub	r2,r4,r2
    7e0c:	8461c83a 	sub	r16,r16,r17
    7e10:	1400010e 	bge	r2,r16,7e18 <___vfprintf_internal_r+0x14bc>
    7e14:	1021883a 	mov	r16,r2
    7e18:	04000a0e 	bge	zero,r16,7e44 <___vfprintf_internal_r+0x14e8>
    7e1c:	d9001f17 	ldw	r4,124(sp)
    7e20:	1c07883a 	add	r3,r3,r16
    7e24:	44400015 	stw	r17,0(r8)
    7e28:	21000044 	addi	r4,r4,1
    7e2c:	44000115 	stw	r16,4(r8)
    7e30:	d8c02015 	stw	r3,128(sp)
    7e34:	d9001f15 	stw	r4,124(sp)
    7e38:	014001c4 	movi	r5,7
    7e3c:	2901fb16 	blt	r5,r4,862c <___vfprintf_internal_r+0x1cd0>
    7e40:	42000204 	addi	r8,r8,8
    7e44:	8001f716 	blt	r16,zero,8624 <___vfprintf_internal_r+0x1cc8>
    7e48:	1421c83a 	sub	r16,r2,r16
    7e4c:	043d380e 	bge	zero,r16,7330 <__alt_data_end+0xfc007330>
    7e50:	04400404 	movi	r17,16
    7e54:	d8801f17 	ldw	r2,124(sp)
    7e58:	8c3efb0e 	bge	r17,r16,7a48 <__alt_data_end+0xfc007a48>
    7e5c:	014000b4 	movhi	r5,2
    7e60:	29554184 	addi	r5,r5,21766
    7e64:	d9402b15 	stw	r5,172(sp)
    7e68:	058001c4 	movi	r22,7
    7e6c:	dcc02c17 	ldw	r19,176(sp)
    7e70:	00000306 	br	7e80 <___vfprintf_internal_r+0x1524>
    7e74:	42000204 	addi	r8,r8,8
    7e78:	843ffc04 	addi	r16,r16,-16
    7e7c:	8c3ef50e 	bge	r17,r16,7a54 <__alt_data_end+0xfc007a54>
    7e80:	18c00404 	addi	r3,r3,16
    7e84:	10800044 	addi	r2,r2,1
    7e88:	45000015 	stw	r20,0(r8)
    7e8c:	44400115 	stw	r17,4(r8)
    7e90:	d8c02015 	stw	r3,128(sp)
    7e94:	d8801f15 	stw	r2,124(sp)
    7e98:	b0bff60e 	bge	r22,r2,7e74 <__alt_data_end+0xfc007e74>
    7e9c:	d9801e04 	addi	r6,sp,120
    7ea0:	b80b883a 	mov	r5,r23
    7ea4:	9809883a 	mov	r4,r19
    7ea8:	0012e840 	call	12e84 <__sprint_r>
    7eac:	103bad1e 	bne	r2,zero,6d64 <__alt_data_end+0xfc006d64>
    7eb0:	d8c02017 	ldw	r3,128(sp)
    7eb4:	d8801f17 	ldw	r2,124(sp)
    7eb8:	da000404 	addi	r8,sp,16
    7ebc:	003fee06 	br	7e78 <__alt_data_end+0xfc007e78>
    7ec0:	9088703a 	and	r4,r18,r2
    7ec4:	203eab1e 	bne	r4,zero,7974 <__alt_data_end+0xfc007974>
    7ec8:	dc401f17 	ldw	r17,124(sp)
    7ecc:	40800115 	stw	r2,4(r8)
    7ed0:	44000015 	stw	r16,0(r8)
    7ed4:	8c400044 	addi	r17,r17,1
    7ed8:	d8c02015 	stw	r3,128(sp)
    7edc:	dc401f15 	stw	r17,124(sp)
    7ee0:	008001c4 	movi	r2,7
    7ee4:	14400e16 	blt	r2,r17,7f20 <___vfprintf_internal_r+0x15c4>
    7ee8:	45800204 	addi	r22,r8,8
    7eec:	003eca06 	br	7a18 <__alt_data_end+0xfc007a18>
    7ef0:	010000b4 	movhi	r4,2
    7ef4:	21154184 	addi	r4,r4,21766
    7ef8:	d9002b15 	stw	r4,172(sp)
    7efc:	d8802b17 	ldw	r2,172(sp)
    7f00:	1c07883a 	add	r3,r3,r16
    7f04:	8c400044 	addi	r17,r17,1
    7f08:	b0800015 	stw	r2,0(r22)
    7f0c:	b4000115 	stw	r16,4(r22)
    7f10:	d8c02015 	stw	r3,128(sp)
    7f14:	dc401f15 	stw	r17,124(sp)
    7f18:	008001c4 	movi	r2,7
    7f1c:	147ebd0e 	bge	r2,r17,7a14 <__alt_data_end+0xfc007a14>
    7f20:	d9002c17 	ldw	r4,176(sp)
    7f24:	d9801e04 	addi	r6,sp,120
    7f28:	b80b883a 	mov	r5,r23
    7f2c:	0012e840 	call	12e84 <__sprint_r>
    7f30:	103b8c1e 	bne	r2,zero,6d64 <__alt_data_end+0xfc006d64>
    7f34:	d8c02017 	ldw	r3,128(sp)
    7f38:	dc401f17 	ldw	r17,124(sp)
    7f3c:	dd800404 	addi	r22,sp,16
    7f40:	003eb506 	br	7a18 <__alt_data_end+0xfc007a18>
    7f44:	d9002c17 	ldw	r4,176(sp)
    7f48:	d9801e04 	addi	r6,sp,120
    7f4c:	b80b883a 	mov	r5,r23
    7f50:	0012e840 	call	12e84 <__sprint_r>
    7f54:	103b831e 	bne	r2,zero,6d64 <__alt_data_end+0xfc006d64>
    7f58:	d8c02017 	ldw	r3,128(sp)
    7f5c:	dc401f17 	ldw	r17,124(sp)
    7f60:	da000404 	addi	r8,sp,16
    7f64:	003e8d06 	br	799c <__alt_data_end+0xfc00799c>
    7f68:	d9002c17 	ldw	r4,176(sp)
    7f6c:	d9801e04 	addi	r6,sp,120
    7f70:	b80b883a 	mov	r5,r23
    7f74:	0012e840 	call	12e84 <__sprint_r>
    7f78:	103b7a1e 	bne	r2,zero,6d64 <__alt_data_end+0xfc006d64>
    7f7c:	d8c02017 	ldw	r3,128(sp)
    7f80:	dc401f17 	ldw	r17,124(sp)
    7f84:	dd800404 	addi	r22,sp,16
    7f88:	003e8f06 	br	79c8 <__alt_data_end+0xfc0079c8>
    7f8c:	0027883a 	mov	r19,zero
    7f90:	003f4a06 	br	7cbc <__alt_data_end+0xfc007cbc>
    7f94:	d9002c17 	ldw	r4,176(sp)
    7f98:	d9801e04 	addi	r6,sp,120
    7f9c:	b80b883a 	mov	r5,r23
    7fa0:	0012e840 	call	12e84 <__sprint_r>
    7fa4:	103b6f1e 	bne	r2,zero,6d64 <__alt_data_end+0xfc006d64>
    7fa8:	d8c02017 	ldw	r3,128(sp)
    7fac:	da000404 	addi	r8,sp,16
    7fb0:	003c9d06 	br	7228 <__alt_data_end+0xfc007228>
    7fb4:	04e7c83a 	sub	r19,zero,r19
    7fb8:	9804c03a 	cmpne	r2,r19,zero
    7fbc:	05adc83a 	sub	r22,zero,r22
    7fc0:	b0adc83a 	sub	r22,r22,r2
    7fc4:	d8802917 	ldw	r2,164(sp)
    7fc8:	07000b44 	movi	fp,45
    7fcc:	df002785 	stb	fp,158(sp)
    7fd0:	10017b16 	blt	r2,zero,85c0 <___vfprintf_internal_r+0x1c64>
    7fd4:	00bfdfc4 	movi	r2,-129
    7fd8:	90a4703a 	and	r18,r18,r2
    7fdc:	003bb106 	br	6ea4 <__alt_data_end+0xfc006ea4>
    7fe0:	d9003617 	ldw	r4,216(sp)
    7fe4:	d9403817 	ldw	r5,224(sp)
    7fe8:	da003d15 	stw	r8,244(sp)
    7fec:	000e6b00 	call	e6b0 <__fpclassifyd>
    7ff0:	da003d17 	ldw	r8,244(sp)
    7ff4:	1000f026 	beq	r2,zero,83b8 <___vfprintf_internal_r+0x1a5c>
    7ff8:	d9002917 	ldw	r4,164(sp)
    7ffc:	05bff7c4 	movi	r22,-33
    8000:	00bfffc4 	movi	r2,-1
    8004:	8dac703a 	and	r22,r17,r22
    8008:	20820026 	beq	r4,r2,880c <___vfprintf_internal_r+0x1eb0>
    800c:	008011c4 	movi	r2,71
    8010:	b081f726 	beq	r22,r2,87f0 <___vfprintf_internal_r+0x1e94>
    8014:	d9003817 	ldw	r4,224(sp)
    8018:	90c04014 	ori	r3,r18,256
    801c:	d8c02b15 	stw	r3,172(sp)
    8020:	20021516 	blt	r4,zero,8878 <___vfprintf_internal_r+0x1f1c>
    8024:	dcc03817 	ldw	r19,224(sp)
    8028:	d8002a05 	stb	zero,168(sp)
    802c:	00801984 	movi	r2,102
    8030:	8881f926 	beq	r17,r2,8818 <___vfprintf_internal_r+0x1ebc>
    8034:	00801184 	movi	r2,70
    8038:	88821c26 	beq	r17,r2,88ac <___vfprintf_internal_r+0x1f50>
    803c:	00801144 	movi	r2,69
    8040:	b081ef26 	beq	r22,r2,8800 <___vfprintf_internal_r+0x1ea4>
    8044:	d8c02917 	ldw	r3,164(sp)
    8048:	d8802104 	addi	r2,sp,132
    804c:	d8800315 	stw	r2,12(sp)
    8050:	d9403617 	ldw	r5,216(sp)
    8054:	d8802504 	addi	r2,sp,148
    8058:	d9002c17 	ldw	r4,176(sp)
    805c:	d8800215 	stw	r2,8(sp)
    8060:	d8802604 	addi	r2,sp,152
    8064:	d8c00015 	stw	r3,0(sp)
    8068:	d8800115 	stw	r2,4(sp)
    806c:	01c00084 	movi	r7,2
    8070:	980d883a 	mov	r6,r19
    8074:	d8c03c15 	stw	r3,240(sp)
    8078:	da003d15 	stw	r8,244(sp)
    807c:	000a8c00 	call	a8c0 <_dtoa_r>
    8080:	1021883a 	mov	r16,r2
    8084:	008019c4 	movi	r2,103
    8088:	d8c03c17 	ldw	r3,240(sp)
    808c:	da003d17 	ldw	r8,244(sp)
    8090:	88817126 	beq	r17,r2,8658 <___vfprintf_internal_r+0x1cfc>
    8094:	008011c4 	movi	r2,71
    8098:	88829226 	beq	r17,r2,8ae4 <___vfprintf_internal_r+0x2188>
    809c:	80f9883a 	add	fp,r16,r3
    80a0:	d9003617 	ldw	r4,216(sp)
    80a4:	000d883a 	mov	r6,zero
    80a8:	000f883a 	mov	r7,zero
    80ac:	980b883a 	mov	r5,r19
    80b0:	da003d15 	stw	r8,244(sp)
    80b4:	0018b5c0 	call	18b5c <__eqdf2>
    80b8:	da003d17 	ldw	r8,244(sp)
    80bc:	10018d26 	beq	r2,zero,86f4 <___vfprintf_internal_r+0x1d98>
    80c0:	d8802117 	ldw	r2,132(sp)
    80c4:	1700062e 	bgeu	r2,fp,80e0 <___vfprintf_internal_r+0x1784>
    80c8:	01000c04 	movi	r4,48
    80cc:	10c00044 	addi	r3,r2,1
    80d0:	d8c02115 	stw	r3,132(sp)
    80d4:	11000005 	stb	r4,0(r2)
    80d8:	d8802117 	ldw	r2,132(sp)
    80dc:	173ffb36 	bltu	r2,fp,80cc <__alt_data_end+0xfc0080cc>
    80e0:	1405c83a 	sub	r2,r2,r16
    80e4:	d8803315 	stw	r2,204(sp)
    80e8:	008011c4 	movi	r2,71
    80ec:	b0817626 	beq	r22,r2,86c8 <___vfprintf_internal_r+0x1d6c>
    80f0:	00801944 	movi	r2,101
    80f4:	1442810e 	bge	r2,r17,8afc <___vfprintf_internal_r+0x21a0>
    80f8:	d8c02617 	ldw	r3,152(sp)
    80fc:	00801984 	movi	r2,102
    8100:	d8c03215 	stw	r3,200(sp)
    8104:	8881fe26 	beq	r17,r2,8900 <___vfprintf_internal_r+0x1fa4>
    8108:	d8c03217 	ldw	r3,200(sp)
    810c:	d9003317 	ldw	r4,204(sp)
    8110:	1901dd16 	blt	r3,r4,8888 <___vfprintf_internal_r+0x1f2c>
    8114:	9480004c 	andi	r18,r18,1
    8118:	90022b1e 	bne	r18,zero,89c8 <___vfprintf_internal_r+0x206c>
    811c:	1805883a 	mov	r2,r3
    8120:	18028016 	blt	r3,zero,8b24 <___vfprintf_internal_r+0x21c8>
    8124:	d8c03217 	ldw	r3,200(sp)
    8128:	044019c4 	movi	r17,103
    812c:	d8c02e15 	stw	r3,184(sp)
    8130:	df002a07 	ldb	fp,168(sp)
    8134:	e001531e 	bne	fp,zero,8684 <___vfprintf_internal_r+0x1d28>
    8138:	df002783 	ldbu	fp,158(sp)
    813c:	d8802a15 	stw	r2,168(sp)
    8140:	dc802b17 	ldw	r18,172(sp)
    8144:	d8002915 	stw	zero,164(sp)
    8148:	003bd106 	br	7090 <__alt_data_end+0xfc007090>
    814c:	d8802d17 	ldw	r2,180(sp)
    8150:	d8c02d17 	ldw	r3,180(sp)
    8154:	d9002d17 	ldw	r4,180(sp)
    8158:	10800017 	ldw	r2,0(r2)
    815c:	18c00117 	ldw	r3,4(r3)
    8160:	21000204 	addi	r4,r4,8
    8164:	d8803615 	stw	r2,216(sp)
    8168:	d8c03815 	stw	r3,224(sp)
    816c:	d9002d15 	stw	r4,180(sp)
    8170:	003b7506 	br	6f48 <__alt_data_end+0xfc006f48>
    8174:	ac400007 	ldb	r17,0(r21)
    8178:	003a5906 	br	6ae0 <__alt_data_end+0xfc006ae0>
    817c:	9080100c 	andi	r2,r18,64
    8180:	1000a826 	beq	r2,zero,8424 <___vfprintf_internal_r+0x1ac8>
    8184:	d9002d17 	ldw	r4,180(sp)
    8188:	002d883a 	mov	r22,zero
    818c:	24c0000b 	ldhu	r19,0(r4)
    8190:	21000104 	addi	r4,r4,4
    8194:	d9002d15 	stw	r4,180(sp)
    8198:	003ccb06 	br	74c8 <__alt_data_end+0xfc0074c8>
    819c:	d8c02d17 	ldw	r3,180(sp)
    81a0:	d9002917 	ldw	r4,164(sp)
    81a4:	002d883a 	mov	r22,zero
    81a8:	18800104 	addi	r2,r3,4
    81ac:	1cc00017 	ldw	r19,0(r3)
    81b0:	203ebb0e 	bge	r4,zero,7ca0 <__alt_data_end+0xfc007ca0>
    81b4:	003ef106 	br	7d7c <__alt_data_end+0xfc007d7c>
    81b8:	9080040c 	andi	r2,r18,16
    81bc:	1000921e 	bne	r2,zero,8408 <___vfprintf_internal_r+0x1aac>
    81c0:	9480100c 	andi	r18,r18,64
    81c4:	90013926 	beq	r18,zero,86ac <___vfprintf_internal_r+0x1d50>
    81c8:	d9002d17 	ldw	r4,180(sp)
    81cc:	d9402f17 	ldw	r5,188(sp)
    81d0:	20800017 	ldw	r2,0(r4)
    81d4:	21000104 	addi	r4,r4,4
    81d8:	d9002d15 	stw	r4,180(sp)
    81dc:	1140000d 	sth	r5,0(r2)
    81e0:	003a1606 	br	6a3c <__alt_data_end+0xfc006a3c>
    81e4:	9080100c 	andi	r2,r18,64
    81e8:	10008026 	beq	r2,zero,83ec <___vfprintf_internal_r+0x1a90>
    81ec:	d8c02d17 	ldw	r3,180(sp)
    81f0:	1cc0000f 	ldh	r19,0(r3)
    81f4:	18c00104 	addi	r3,r3,4
    81f8:	d8c02d15 	stw	r3,180(sp)
    81fc:	982dd7fa 	srai	r22,r19,31
    8200:	b005883a 	mov	r2,r22
    8204:	003b1f06 	br	6e84 <__alt_data_end+0xfc006e84>
    8208:	9080100c 	andi	r2,r18,64
    820c:	d8002785 	stb	zero,158(sp)
    8210:	10008a1e 	bne	r2,zero,843c <___vfprintf_internal_r+0x1ae0>
    8214:	d9402d17 	ldw	r5,180(sp)
    8218:	d8c02917 	ldw	r3,164(sp)
    821c:	002d883a 	mov	r22,zero
    8220:	28800104 	addi	r2,r5,4
    8224:	2cc00017 	ldw	r19,0(r5)
    8228:	183e4b0e 	bge	r3,zero,7b58 <__alt_data_end+0xfc007b58>
    822c:	9d86b03a 	or	r3,r19,r22
    8230:	d8802d15 	stw	r2,180(sp)
    8234:	183e4c1e 	bne	r3,zero,7b68 <__alt_data_end+0xfc007b68>
    8238:	0039883a 	mov	fp,zero
    823c:	0005883a 	mov	r2,zero
    8240:	003d4006 	br	7744 <__alt_data_end+0xfc007744>
    8244:	014000b4 	movhi	r5,2
    8248:	29554184 	addi	r5,r5,21766
    824c:	d9402b15 	stw	r5,172(sp)
    8250:	d9402b17 	ldw	r5,172(sp)
    8254:	1c47883a 	add	r3,r3,r17
    8258:	10800044 	addi	r2,r2,1
    825c:	41400015 	stw	r5,0(r8)
    8260:	44400115 	stw	r17,4(r8)
    8264:	d8c02015 	stw	r3,128(sp)
    8268:	d8801f15 	stw	r2,124(sp)
    826c:	010001c4 	movi	r4,7
    8270:	20bec816 	blt	r4,r2,7d94 <__alt_data_end+0xfc007d94>
    8274:	42000204 	addi	r8,r8,8
    8278:	003ecd06 	br	7db0 <__alt_data_end+0xfc007db0>
    827c:	d9002917 	ldw	r4,164(sp)
    8280:	d8002785 	stb	zero,158(sp)
    8284:	203d2d16 	blt	r4,zero,773c <__alt_data_end+0xfc00773c>
    8288:	00bfdfc4 	movi	r2,-129
    828c:	90a4703a 	and	r18,r18,r2
    8290:	003a9106 	br	6cd8 <__alt_data_end+0xfc006cd8>
    8294:	010000b4 	movhi	r4,2
    8298:	21154184 	addi	r4,r4,21766
    829c:	d9002b15 	stw	r4,172(sp)
    82a0:	003c0c06 	br	72d4 <__alt_data_end+0xfc0072d4>
    82a4:	d9002c17 	ldw	r4,176(sp)
    82a8:	d9801e04 	addi	r6,sp,120
    82ac:	b80b883a 	mov	r5,r23
    82b0:	0012e840 	call	12e84 <__sprint_r>
    82b4:	103aab1e 	bne	r2,zero,6d64 <__alt_data_end+0xfc006d64>
    82b8:	d8c02017 	ldw	r3,128(sp)
    82bc:	da000404 	addi	r8,sp,16
    82c0:	003d4106 	br	77c8 <__alt_data_end+0xfc0077c8>
    82c4:	d8801f17 	ldw	r2,124(sp)
    82c8:	014000b4 	movhi	r5,2
    82cc:	01000044 	movi	r4,1
    82d0:	18c00044 	addi	r3,r3,1
    82d4:	10800044 	addi	r2,r2,1
    82d8:	29554104 	addi	r5,r5,21764
    82dc:	41000115 	stw	r4,4(r8)
    82e0:	41400015 	stw	r5,0(r8)
    82e4:	d8c02015 	stw	r3,128(sp)
    82e8:	d8801f15 	stw	r2,124(sp)
    82ec:	010001c4 	movi	r4,7
    82f0:	20805c16 	blt	r4,r2,8464 <___vfprintf_internal_r+0x1b08>
    82f4:	42000204 	addi	r8,r8,8
    82f8:	8800041e 	bne	r17,zero,830c <___vfprintf_internal_r+0x19b0>
    82fc:	d8803317 	ldw	r2,204(sp)
    8300:	1000021e 	bne	r2,zero,830c <___vfprintf_internal_r+0x19b0>
    8304:	9080004c 	andi	r2,r18,1
    8308:	103c0926 	beq	r2,zero,7330 <__alt_data_end+0xfc007330>
    830c:	d9003717 	ldw	r4,220(sp)
    8310:	d8801f17 	ldw	r2,124(sp)
    8314:	d9403417 	ldw	r5,208(sp)
    8318:	20c7883a 	add	r3,r4,r3
    831c:	10800044 	addi	r2,r2,1
    8320:	41000115 	stw	r4,4(r8)
    8324:	41400015 	stw	r5,0(r8)
    8328:	d8c02015 	stw	r3,128(sp)
    832c:	d8801f15 	stw	r2,124(sp)
    8330:	010001c4 	movi	r4,7
    8334:	20812116 	blt	r4,r2,87bc <___vfprintf_internal_r+0x1e60>
    8338:	42000204 	addi	r8,r8,8
    833c:	0463c83a 	sub	r17,zero,r17
    8340:	0440730e 	bge	zero,r17,8510 <___vfprintf_internal_r+0x1bb4>
    8344:	05800404 	movi	r22,16
    8348:	b440860e 	bge	r22,r17,8564 <___vfprintf_internal_r+0x1c08>
    834c:	014000b4 	movhi	r5,2
    8350:	29554184 	addi	r5,r5,21766
    8354:	d9402b15 	stw	r5,172(sp)
    8358:	070001c4 	movi	fp,7
    835c:	dcc02c17 	ldw	r19,176(sp)
    8360:	00000306 	br	8370 <___vfprintf_internal_r+0x1a14>
    8364:	42000204 	addi	r8,r8,8
    8368:	8c7ffc04 	addi	r17,r17,-16
    836c:	b440800e 	bge	r22,r17,8570 <___vfprintf_internal_r+0x1c14>
    8370:	18c00404 	addi	r3,r3,16
    8374:	10800044 	addi	r2,r2,1
    8378:	45000015 	stw	r20,0(r8)
    837c:	45800115 	stw	r22,4(r8)
    8380:	d8c02015 	stw	r3,128(sp)
    8384:	d8801f15 	stw	r2,124(sp)
    8388:	e0bff60e 	bge	fp,r2,8364 <__alt_data_end+0xfc008364>
    838c:	d9801e04 	addi	r6,sp,120
    8390:	b80b883a 	mov	r5,r23
    8394:	9809883a 	mov	r4,r19
    8398:	0012e840 	call	12e84 <__sprint_r>
    839c:	103a711e 	bne	r2,zero,6d64 <__alt_data_end+0xfc006d64>
    83a0:	d8c02017 	ldw	r3,128(sp)
    83a4:	d8801f17 	ldw	r2,124(sp)
    83a8:	da000404 	addi	r8,sp,16
    83ac:	003fee06 	br	8368 <__alt_data_end+0xfc008368>
    83b0:	00bfffc4 	movi	r2,-1
    83b4:	003a6f06 	br	6d74 <__alt_data_end+0xfc006d74>
    83b8:	008011c4 	movi	r2,71
    83bc:	1440b816 	blt	r2,r17,86a0 <___vfprintf_internal_r+0x1d44>
    83c0:	040000b4 	movhi	r16,2
    83c4:	84153304 	addi	r16,r16,21708
    83c8:	00c000c4 	movi	r3,3
    83cc:	00bfdfc4 	movi	r2,-129
    83d0:	d8c02a15 	stw	r3,168(sp)
    83d4:	90a4703a 	and	r18,r18,r2
    83d8:	df002783 	ldbu	fp,158(sp)
    83dc:	d8c02e15 	stw	r3,184(sp)
    83e0:	d8002915 	stw	zero,164(sp)
    83e4:	d8003215 	stw	zero,200(sp)
    83e8:	003b2906 	br	7090 <__alt_data_end+0xfc007090>
    83ec:	d9002d17 	ldw	r4,180(sp)
    83f0:	24c00017 	ldw	r19,0(r4)
    83f4:	21000104 	addi	r4,r4,4
    83f8:	d9002d15 	stw	r4,180(sp)
    83fc:	982dd7fa 	srai	r22,r19,31
    8400:	b005883a 	mov	r2,r22
    8404:	003a9f06 	br	6e84 <__alt_data_end+0xfc006e84>
    8408:	d9402d17 	ldw	r5,180(sp)
    840c:	d8c02f17 	ldw	r3,188(sp)
    8410:	28800017 	ldw	r2,0(r5)
    8414:	29400104 	addi	r5,r5,4
    8418:	d9402d15 	stw	r5,180(sp)
    841c:	10c00015 	stw	r3,0(r2)
    8420:	00398606 	br	6a3c <__alt_data_end+0xfc006a3c>
    8424:	d9402d17 	ldw	r5,180(sp)
    8428:	002d883a 	mov	r22,zero
    842c:	2cc00017 	ldw	r19,0(r5)
    8430:	29400104 	addi	r5,r5,4
    8434:	d9402d15 	stw	r5,180(sp)
    8438:	003c2306 	br	74c8 <__alt_data_end+0xfc0074c8>
    843c:	d8c02d17 	ldw	r3,180(sp)
    8440:	d9002917 	ldw	r4,164(sp)
    8444:	002d883a 	mov	r22,zero
    8448:	18800104 	addi	r2,r3,4
    844c:	1cc0000b 	ldhu	r19,0(r3)
    8450:	203dc10e 	bge	r4,zero,7b58 <__alt_data_end+0xfc007b58>
    8454:	003f7506 	br	822c <__alt_data_end+0xfc00822c>
    8458:	040000b4 	movhi	r16,2
    845c:	84153104 	addi	r16,r16,21700
    8460:	003acc06 	br	6f94 <__alt_data_end+0xfc006f94>
    8464:	d9002c17 	ldw	r4,176(sp)
    8468:	d9801e04 	addi	r6,sp,120
    846c:	b80b883a 	mov	r5,r23
    8470:	0012e840 	call	12e84 <__sprint_r>
    8474:	103a3b1e 	bne	r2,zero,6d64 <__alt_data_end+0xfc006d64>
    8478:	dc402617 	ldw	r17,152(sp)
    847c:	d8c02017 	ldw	r3,128(sp)
    8480:	da000404 	addi	r8,sp,16
    8484:	003f9c06 	br	82f8 <__alt_data_end+0xfc0082f8>
    8488:	ac400043 	ldbu	r17,1(r21)
    848c:	94800814 	ori	r18,r18,32
    8490:	ad400044 	addi	r21,r21,1
    8494:	8c403fcc 	andi	r17,r17,255
    8498:	8c40201c 	xori	r17,r17,128
    849c:	8c7fe004 	addi	r17,r17,-128
    84a0:	00398f06 	br	6ae0 <__alt_data_end+0xfc006ae0>
    84a4:	d8c02d15 	stw	r3,180(sp)
    84a8:	0039883a 	mov	fp,zero
    84ac:	003e3506 	br	7d84 <__alt_data_end+0xfc007d84>
    84b0:	d9002c17 	ldw	r4,176(sp)
    84b4:	d9801e04 	addi	r6,sp,120
    84b8:	b80b883a 	mov	r5,r23
    84bc:	0012e840 	call	12e84 <__sprint_r>
    84c0:	103a281e 	bne	r2,zero,6d64 <__alt_data_end+0xfc006d64>
    84c4:	d8c02017 	ldw	r3,128(sp)
    84c8:	da000404 	addi	r8,sp,16
    84cc:	003cd006 	br	7810 <__alt_data_end+0xfc007810>
    84d0:	8009883a 	mov	r4,r16
    84d4:	da003d15 	stw	r8,244(sp)
    84d8:	00066700 	call	6670 <strlen>
    84dc:	d8802e15 	stw	r2,184(sp)
    84e0:	da003d17 	ldw	r8,244(sp)
    84e4:	103c340e 	bge	r2,zero,75b8 <__alt_data_end+0xfc0075b8>
    84e8:	0005883a 	mov	r2,zero
    84ec:	003c3206 	br	75b8 <__alt_data_end+0xfc0075b8>
    84f0:	d9002c17 	ldw	r4,176(sp)
    84f4:	d9801e04 	addi	r6,sp,120
    84f8:	b80b883a 	mov	r5,r23
    84fc:	0012e840 	call	12e84 <__sprint_r>
    8500:	103a181e 	bne	r2,zero,6d64 <__alt_data_end+0xfc006d64>
    8504:	d8c02017 	ldw	r3,128(sp)
    8508:	d8801f17 	ldw	r2,124(sp)
    850c:	da000404 	addi	r8,sp,16
    8510:	d9403317 	ldw	r5,204(sp)
    8514:	10800044 	addi	r2,r2,1
    8518:	44000015 	stw	r16,0(r8)
    851c:	28c7883a 	add	r3,r5,r3
    8520:	003b7d06 	br	7318 <__alt_data_end+0xfc007318>
    8524:	010000b4 	movhi	r4,2
    8528:	21154584 	addi	r4,r4,21782
    852c:	d9003515 	stw	r4,212(sp)
    8530:	003b1406 	br	7184 <__alt_data_end+0xfc007184>
    8534:	013fffc4 	movi	r4,-1
    8538:	003a3506 	br	6e10 <__alt_data_end+0xfc006e10>
    853c:	0023883a 	mov	r17,zero
    8540:	003d9d06 	br	7bb8 <__alt_data_end+0xfc007bb8>
    8544:	d9002c17 	ldw	r4,176(sp)
    8548:	d9801e04 	addi	r6,sp,120
    854c:	b80b883a 	mov	r5,r23
    8550:	0012e840 	call	12e84 <__sprint_r>
    8554:	103a031e 	bne	r2,zero,6d64 <__alt_data_end+0xfc006d64>
    8558:	d8c02017 	ldw	r3,128(sp)
    855c:	da000404 	addi	r8,sp,16
    8560:	003d9406 	br	7bb4 <__alt_data_end+0xfc007bb4>
    8564:	010000b4 	movhi	r4,2
    8568:	21154184 	addi	r4,r4,21766
    856c:	d9002b15 	stw	r4,172(sp)
    8570:	d9002b17 	ldw	r4,172(sp)
    8574:	1c47883a 	add	r3,r3,r17
    8578:	10800044 	addi	r2,r2,1
    857c:	41000015 	stw	r4,0(r8)
    8580:	44400115 	stw	r17,4(r8)
    8584:	d8c02015 	stw	r3,128(sp)
    8588:	d8801f15 	stw	r2,124(sp)
    858c:	010001c4 	movi	r4,7
    8590:	20bfd716 	blt	r4,r2,84f0 <__alt_data_end+0xfc0084f0>
    8594:	42000204 	addi	r8,r8,8
    8598:	003fdd06 	br	8510 <__alt_data_end+0xfc008510>
    859c:	d9002c17 	ldw	r4,176(sp)
    85a0:	d9801e04 	addi	r6,sp,120
    85a4:	b80b883a 	mov	r5,r23
    85a8:	0012e840 	call	12e84 <__sprint_r>
    85ac:	1039ed1e 	bne	r2,zero,6d64 <__alt_data_end+0xfc006d64>
    85b0:	d8802617 	ldw	r2,152(sp)
    85b4:	d8c02017 	ldw	r3,128(sp)
    85b8:	da000404 	addi	r8,sp,16
    85bc:	003e1006 	br	7e00 <__alt_data_end+0xfc007e00>
    85c0:	00800044 	movi	r2,1
    85c4:	10803fcc 	andi	r2,r2,255
    85c8:	00c00044 	movi	r3,1
    85cc:	10fa3526 	beq	r2,r3,6ea4 <__alt_data_end+0xfc006ea4>
    85d0:	00c00084 	movi	r3,2
    85d4:	10fbcb26 	beq	r2,r3,7504 <__alt_data_end+0xfc007504>
    85d8:	003a8f06 	br	7018 <__alt_data_end+0xfc007018>
    85dc:	010000b4 	movhi	r4,2
    85e0:	21154584 	addi	r4,r4,21782
    85e4:	d9003515 	stw	r4,212(sp)
    85e8:	003b7606 	br	73c4 <__alt_data_end+0xfc0073c4>
    85ec:	d8802917 	ldw	r2,164(sp)
    85f0:	00c00184 	movi	r3,6
    85f4:	1880012e 	bgeu	r3,r2,85fc <___vfprintf_internal_r+0x1ca0>
    85f8:	1805883a 	mov	r2,r3
    85fc:	d8802e15 	stw	r2,184(sp)
    8600:	1000ef16 	blt	r2,zero,89c0 <___vfprintf_internal_r+0x2064>
    8604:	040000b4 	movhi	r16,2
    8608:	d8802a15 	stw	r2,168(sp)
    860c:	dcc02d15 	stw	r19,180(sp)
    8610:	d8002915 	stw	zero,164(sp)
    8614:	d8003215 	stw	zero,200(sp)
    8618:	84153f04 	addi	r16,r16,21756
    861c:	0039883a 	mov	fp,zero
    8620:	003aa206 	br	70ac <__alt_data_end+0xfc0070ac>
    8624:	0021883a 	mov	r16,zero
    8628:	003e0706 	br	7e48 <__alt_data_end+0xfc007e48>
    862c:	d9002c17 	ldw	r4,176(sp)
    8630:	d9801e04 	addi	r6,sp,120
    8634:	b80b883a 	mov	r5,r23
    8638:	0012e840 	call	12e84 <__sprint_r>
    863c:	1039c91e 	bne	r2,zero,6d64 <__alt_data_end+0xfc006d64>
    8640:	d8802617 	ldw	r2,152(sp)
    8644:	d9403317 	ldw	r5,204(sp)
    8648:	d8c02017 	ldw	r3,128(sp)
    864c:	da000404 	addi	r8,sp,16
    8650:	2885c83a 	sub	r2,r5,r2
    8654:	003dfb06 	br	7e44 <__alt_data_end+0xfc007e44>
    8658:	9080004c 	andi	r2,r18,1
    865c:	103e8f1e 	bne	r2,zero,809c <__alt_data_end+0xfc00809c>
    8660:	d8802117 	ldw	r2,132(sp)
    8664:	003e9e06 	br	80e0 <__alt_data_end+0xfc0080e0>
    8668:	1025883a 	mov	r18,r2
    866c:	0039883a 	mov	fp,zero
    8670:	00800084 	movi	r2,2
    8674:	003fd306 	br	85c4 <__alt_data_end+0xfc0085c4>
    8678:	07000b44 	movi	fp,45
    867c:	df002785 	stb	fp,158(sp)
    8680:	003a4006 	br	6f84 <__alt_data_end+0xfc006f84>
    8684:	00c00b44 	movi	r3,45
    8688:	d8c02785 	stb	r3,158(sp)
    868c:	d8802a15 	stw	r2,168(sp)
    8690:	dc802b17 	ldw	r18,172(sp)
    8694:	d8002915 	stw	zero,164(sp)
    8698:	07000b44 	movi	fp,45
    869c:	003a8006 	br	70a0 <__alt_data_end+0xfc0070a0>
    86a0:	040000b4 	movhi	r16,2
    86a4:	84153404 	addi	r16,r16,21712
    86a8:	003f4706 	br	83c8 <__alt_data_end+0xfc0083c8>
    86ac:	d8c02d17 	ldw	r3,180(sp)
    86b0:	d9002f17 	ldw	r4,188(sp)
    86b4:	18800017 	ldw	r2,0(r3)
    86b8:	18c00104 	addi	r3,r3,4
    86bc:	d8c02d15 	stw	r3,180(sp)
    86c0:	11000015 	stw	r4,0(r2)
    86c4:	0038dd06 	br	6a3c <__alt_data_end+0xfc006a3c>
    86c8:	dd802617 	ldw	r22,152(sp)
    86cc:	00bfff44 	movi	r2,-3
    86d0:	b0801c16 	blt	r22,r2,8744 <___vfprintf_internal_r+0x1de8>
    86d4:	d9402917 	ldw	r5,164(sp)
    86d8:	2d801a16 	blt	r5,r22,8744 <___vfprintf_internal_r+0x1de8>
    86dc:	dd803215 	stw	r22,200(sp)
    86e0:	003e8906 	br	8108 <__alt_data_end+0xfc008108>
    86e4:	010000b4 	movhi	r4,2
    86e8:	21154184 	addi	r4,r4,21766
    86ec:	d9002b15 	stw	r4,172(sp)
    86f0:	003c9106 	br	7938 <__alt_data_end+0xfc007938>
    86f4:	e005883a 	mov	r2,fp
    86f8:	003e7906 	br	80e0 <__alt_data_end+0xfc0080e0>
    86fc:	d9402917 	ldw	r5,164(sp)
    8700:	df002783 	ldbu	fp,158(sp)
    8704:	dcc02d15 	stw	r19,180(sp)
    8708:	d9402a15 	stw	r5,168(sp)
    870c:	d9402e15 	stw	r5,184(sp)
    8710:	d8002915 	stw	zero,164(sp)
    8714:	d8003215 	stw	zero,200(sp)
    8718:	003a5d06 	br	7090 <__alt_data_end+0xfc007090>
    871c:	9080004c 	andi	r2,r18,1
    8720:	0039883a 	mov	fp,zero
    8724:	10000426 	beq	r2,zero,8738 <___vfprintf_internal_r+0x1ddc>
    8728:	00800c04 	movi	r2,48
    872c:	dc001dc4 	addi	r16,sp,119
    8730:	d8801dc5 	stb	r2,119(sp)
    8734:	003b8006 	br	7538 <__alt_data_end+0xfc007538>
    8738:	d8002e15 	stw	zero,184(sp)
    873c:	dc001e04 	addi	r16,sp,120
    8740:	003a4d06 	br	7078 <__alt_data_end+0xfc007078>
    8744:	8c7fff84 	addi	r17,r17,-2
    8748:	b5bfffc4 	addi	r22,r22,-1
    874c:	dd802615 	stw	r22,152(sp)
    8750:	dc4022c5 	stb	r17,139(sp)
    8754:	b000bf16 	blt	r22,zero,8a54 <___vfprintf_internal_r+0x20f8>
    8758:	00800ac4 	movi	r2,43
    875c:	d8802305 	stb	r2,140(sp)
    8760:	00800244 	movi	r2,9
    8764:	15807016 	blt	r2,r22,8928 <___vfprintf_internal_r+0x1fcc>
    8768:	00800c04 	movi	r2,48
    876c:	b5800c04 	addi	r22,r22,48
    8770:	d8802345 	stb	r2,141(sp)
    8774:	dd802385 	stb	r22,142(sp)
    8778:	d88023c4 	addi	r2,sp,143
    877c:	df0022c4 	addi	fp,sp,139
    8780:	d8c03317 	ldw	r3,204(sp)
    8784:	1739c83a 	sub	fp,r2,fp
    8788:	d9003317 	ldw	r4,204(sp)
    878c:	e0c7883a 	add	r3,fp,r3
    8790:	df003a15 	stw	fp,232(sp)
    8794:	d8c02e15 	stw	r3,184(sp)
    8798:	00800044 	movi	r2,1
    879c:	1100b30e 	bge	r2,r4,8a6c <___vfprintf_internal_r+0x2110>
    87a0:	d8c02e17 	ldw	r3,184(sp)
    87a4:	18c00044 	addi	r3,r3,1
    87a8:	d8c02e15 	stw	r3,184(sp)
    87ac:	1805883a 	mov	r2,r3
    87b0:	1800ac16 	blt	r3,zero,8a64 <___vfprintf_internal_r+0x2108>
    87b4:	d8003215 	stw	zero,200(sp)
    87b8:	003e5d06 	br	8130 <__alt_data_end+0xfc008130>
    87bc:	d9002c17 	ldw	r4,176(sp)
    87c0:	d9801e04 	addi	r6,sp,120
    87c4:	b80b883a 	mov	r5,r23
    87c8:	0012e840 	call	12e84 <__sprint_r>
    87cc:	1039651e 	bne	r2,zero,6d64 <__alt_data_end+0xfc006d64>
    87d0:	dc402617 	ldw	r17,152(sp)
    87d4:	d8c02017 	ldw	r3,128(sp)
    87d8:	d8801f17 	ldw	r2,124(sp)
    87dc:	da000404 	addi	r8,sp,16
    87e0:	003ed606 	br	833c <__alt_data_end+0xfc00833c>
    87e4:	582b883a 	mov	r21,r11
    87e8:	d8002915 	stw	zero,164(sp)
    87ec:	0038bd06 	br	6ae4 <__alt_data_end+0xfc006ae4>
    87f0:	d8802917 	ldw	r2,164(sp)
    87f4:	103e071e 	bne	r2,zero,8014 <__alt_data_end+0xfc008014>
    87f8:	dc002915 	stw	r16,164(sp)
    87fc:	003e0506 	br	8014 <__alt_data_end+0xfc008014>
    8800:	d9002917 	ldw	r4,164(sp)
    8804:	20c00044 	addi	r3,r4,1
    8808:	003e0f06 	br	8048 <__alt_data_end+0xfc008048>
    880c:	01400184 	movi	r5,6
    8810:	d9402915 	stw	r5,164(sp)
    8814:	003dff06 	br	8014 <__alt_data_end+0xfc008014>
    8818:	d8802104 	addi	r2,sp,132
    881c:	d8800315 	stw	r2,12(sp)
    8820:	d8802504 	addi	r2,sp,148
    8824:	d8800215 	stw	r2,8(sp)
    8828:	d8802604 	addi	r2,sp,152
    882c:	d8800115 	stw	r2,4(sp)
    8830:	d8802917 	ldw	r2,164(sp)
    8834:	d9403617 	ldw	r5,216(sp)
    8838:	d9002c17 	ldw	r4,176(sp)
    883c:	d8800015 	stw	r2,0(sp)
    8840:	01c000c4 	movi	r7,3
    8844:	980d883a 	mov	r6,r19
    8848:	da003d15 	stw	r8,244(sp)
    884c:	000a8c00 	call	a8c0 <_dtoa_r>
    8850:	d8c02917 	ldw	r3,164(sp)
    8854:	da003d17 	ldw	r8,244(sp)
    8858:	1021883a 	mov	r16,r2
    885c:	10f9883a 	add	fp,r2,r3
    8860:	81000007 	ldb	r4,0(r16)
    8864:	00800c04 	movi	r2,48
    8868:	20805e26 	beq	r4,r2,89e4 <___vfprintf_internal_r+0x2088>
    886c:	d8c02617 	ldw	r3,152(sp)
    8870:	e0f9883a 	add	fp,fp,r3
    8874:	003e0a06 	br	80a0 <__alt_data_end+0xfc0080a0>
    8878:	00c00b44 	movi	r3,45
    887c:	24e0003c 	xorhi	r19,r4,32768
    8880:	d8c02a05 	stb	r3,168(sp)
    8884:	003de906 	br	802c <__alt_data_end+0xfc00802c>
    8888:	d8c03217 	ldw	r3,200(sp)
    888c:	00c07a0e 	bge	zero,r3,8a78 <___vfprintf_internal_r+0x211c>
    8890:	00800044 	movi	r2,1
    8894:	d9003317 	ldw	r4,204(sp)
    8898:	1105883a 	add	r2,r2,r4
    889c:	d8802e15 	stw	r2,184(sp)
    88a0:	10004e16 	blt	r2,zero,89dc <___vfprintf_internal_r+0x2080>
    88a4:	044019c4 	movi	r17,103
    88a8:	003e2106 	br	8130 <__alt_data_end+0xfc008130>
    88ac:	d9002917 	ldw	r4,164(sp)
    88b0:	d8802104 	addi	r2,sp,132
    88b4:	d8800315 	stw	r2,12(sp)
    88b8:	d9000015 	stw	r4,0(sp)
    88bc:	d8802504 	addi	r2,sp,148
    88c0:	d9403617 	ldw	r5,216(sp)
    88c4:	d9002c17 	ldw	r4,176(sp)
    88c8:	d8800215 	stw	r2,8(sp)
    88cc:	d8802604 	addi	r2,sp,152
    88d0:	d8800115 	stw	r2,4(sp)
    88d4:	01c000c4 	movi	r7,3
    88d8:	980d883a 	mov	r6,r19
    88dc:	da003d15 	stw	r8,244(sp)
    88e0:	000a8c00 	call	a8c0 <_dtoa_r>
    88e4:	d8c02917 	ldw	r3,164(sp)
    88e8:	da003d17 	ldw	r8,244(sp)
    88ec:	1021883a 	mov	r16,r2
    88f0:	00801184 	movi	r2,70
    88f4:	80f9883a 	add	fp,r16,r3
    88f8:	88bfd926 	beq	r17,r2,8860 <__alt_data_end+0xfc008860>
    88fc:	003de806 	br	80a0 <__alt_data_end+0xfc0080a0>
    8900:	d9002917 	ldw	r4,164(sp)
    8904:	00c04d0e 	bge	zero,r3,8a3c <___vfprintf_internal_r+0x20e0>
    8908:	2000441e 	bne	r4,zero,8a1c <___vfprintf_internal_r+0x20c0>
    890c:	9480004c 	andi	r18,r18,1
    8910:	9000421e 	bne	r18,zero,8a1c <___vfprintf_internal_r+0x20c0>
    8914:	1805883a 	mov	r2,r3
    8918:	18007016 	blt	r3,zero,8adc <___vfprintf_internal_r+0x2180>
    891c:	d8c03217 	ldw	r3,200(sp)
    8920:	d8c02e15 	stw	r3,184(sp)
    8924:	003e0206 	br	8130 <__alt_data_end+0xfc008130>
    8928:	df0022c4 	addi	fp,sp,139
    892c:	dc002915 	stw	r16,164(sp)
    8930:	4027883a 	mov	r19,r8
    8934:	e021883a 	mov	r16,fp
    8938:	b009883a 	mov	r4,r22
    893c:	01400284 	movi	r5,10
    8940:	001769c0 	call	1769c <__modsi3>
    8944:	10800c04 	addi	r2,r2,48
    8948:	843fffc4 	addi	r16,r16,-1
    894c:	b009883a 	mov	r4,r22
    8950:	01400284 	movi	r5,10
    8954:	80800005 	stb	r2,0(r16)
    8958:	00176180 	call	17618 <__divsi3>
    895c:	102d883a 	mov	r22,r2
    8960:	00800244 	movi	r2,9
    8964:	15bff416 	blt	r2,r22,8938 <__alt_data_end+0xfc008938>
    8968:	9811883a 	mov	r8,r19
    896c:	b0800c04 	addi	r2,r22,48
    8970:	8027883a 	mov	r19,r16
    8974:	997fffc4 	addi	r5,r19,-1
    8978:	98bfffc5 	stb	r2,-1(r19)
    897c:	dc002917 	ldw	r16,164(sp)
    8980:	2f006a2e 	bgeu	r5,fp,8b2c <___vfprintf_internal_r+0x21d0>
    8984:	d9c02384 	addi	r7,sp,142
    8988:	3ccfc83a 	sub	r7,r7,r19
    898c:	d9002344 	addi	r4,sp,141
    8990:	e1cf883a 	add	r7,fp,r7
    8994:	00000106 	br	899c <___vfprintf_internal_r+0x2040>
    8998:	28800003 	ldbu	r2,0(r5)
    899c:	20800005 	stb	r2,0(r4)
    89a0:	21000044 	addi	r4,r4,1
    89a4:	29400044 	addi	r5,r5,1
    89a8:	393ffb1e 	bne	r7,r4,8998 <__alt_data_end+0xfc008998>
    89ac:	d8802304 	addi	r2,sp,140
    89b0:	14c5c83a 	sub	r2,r2,r19
    89b4:	d8c02344 	addi	r3,sp,141
    89b8:	1885883a 	add	r2,r3,r2
    89bc:	003f7006 	br	8780 <__alt_data_end+0xfc008780>
    89c0:	0005883a 	mov	r2,zero
    89c4:	003f0f06 	br	8604 <__alt_data_end+0xfc008604>
    89c8:	d8c03217 	ldw	r3,200(sp)
    89cc:	18c00044 	addi	r3,r3,1
    89d0:	d8c02e15 	stw	r3,184(sp)
    89d4:	1805883a 	mov	r2,r3
    89d8:	183fb20e 	bge	r3,zero,88a4 <__alt_data_end+0xfc0088a4>
    89dc:	0005883a 	mov	r2,zero
    89e0:	003fb006 	br	88a4 <__alt_data_end+0xfc0088a4>
    89e4:	d9003617 	ldw	r4,216(sp)
    89e8:	000d883a 	mov	r6,zero
    89ec:	000f883a 	mov	r7,zero
    89f0:	980b883a 	mov	r5,r19
    89f4:	d8c03c15 	stw	r3,240(sp)
    89f8:	da003d15 	stw	r8,244(sp)
    89fc:	0018b5c0 	call	18b5c <__eqdf2>
    8a00:	d8c03c17 	ldw	r3,240(sp)
    8a04:	da003d17 	ldw	r8,244(sp)
    8a08:	103f9826 	beq	r2,zero,886c <__alt_data_end+0xfc00886c>
    8a0c:	00800044 	movi	r2,1
    8a10:	10c7c83a 	sub	r3,r2,r3
    8a14:	d8c02615 	stw	r3,152(sp)
    8a18:	003f9506 	br	8870 <__alt_data_end+0xfc008870>
    8a1c:	d9002917 	ldw	r4,164(sp)
    8a20:	d8c03217 	ldw	r3,200(sp)
    8a24:	20800044 	addi	r2,r4,1
    8a28:	1885883a 	add	r2,r3,r2
    8a2c:	d8802e15 	stw	r2,184(sp)
    8a30:	103dbf0e 	bge	r2,zero,8130 <__alt_data_end+0xfc008130>
    8a34:	0005883a 	mov	r2,zero
    8a38:	003dbd06 	br	8130 <__alt_data_end+0xfc008130>
    8a3c:	2000211e 	bne	r4,zero,8ac4 <___vfprintf_internal_r+0x2168>
    8a40:	9480004c 	andi	r18,r18,1
    8a44:	90001f1e 	bne	r18,zero,8ac4 <___vfprintf_internal_r+0x2168>
    8a48:	00800044 	movi	r2,1
    8a4c:	d8802e15 	stw	r2,184(sp)
    8a50:	003db706 	br	8130 <__alt_data_end+0xfc008130>
    8a54:	00800b44 	movi	r2,45
    8a58:	05adc83a 	sub	r22,zero,r22
    8a5c:	d8802305 	stb	r2,140(sp)
    8a60:	003f3f06 	br	8760 <__alt_data_end+0xfc008760>
    8a64:	0005883a 	mov	r2,zero
    8a68:	003f5206 	br	87b4 <__alt_data_end+0xfc0087b4>
    8a6c:	90a4703a 	and	r18,r18,r2
    8a70:	903f4e26 	beq	r18,zero,87ac <__alt_data_end+0xfc0087ac>
    8a74:	003f4a06 	br	87a0 <__alt_data_end+0xfc0087a0>
    8a78:	00800084 	movi	r2,2
    8a7c:	10c5c83a 	sub	r2,r2,r3
    8a80:	003f8406 	br	8894 <__alt_data_end+0xfc008894>
    8a84:	d8802d17 	ldw	r2,180(sp)
    8a88:	d9002d17 	ldw	r4,180(sp)
    8a8c:	ac400043 	ldbu	r17,1(r21)
    8a90:	10800017 	ldw	r2,0(r2)
    8a94:	582b883a 	mov	r21,r11
    8a98:	d8802915 	stw	r2,164(sp)
    8a9c:	20800104 	addi	r2,r4,4
    8aa0:	d9002917 	ldw	r4,164(sp)
    8aa4:	d8802d15 	stw	r2,180(sp)
    8aa8:	203e7a0e 	bge	r4,zero,8494 <__alt_data_end+0xfc008494>
    8aac:	8c403fcc 	andi	r17,r17,255
    8ab0:	00bfffc4 	movi	r2,-1
    8ab4:	8c40201c 	xori	r17,r17,128
    8ab8:	d8802915 	stw	r2,164(sp)
    8abc:	8c7fe004 	addi	r17,r17,-128
    8ac0:	00380706 	br	6ae0 <__alt_data_end+0xfc006ae0>
    8ac4:	d8c02917 	ldw	r3,164(sp)
    8ac8:	18c00084 	addi	r3,r3,2
    8acc:	d8c02e15 	stw	r3,184(sp)
    8ad0:	1805883a 	mov	r2,r3
    8ad4:	183d960e 	bge	r3,zero,8130 <__alt_data_end+0xfc008130>
    8ad8:	003fd606 	br	8a34 <__alt_data_end+0xfc008a34>
    8adc:	0005883a 	mov	r2,zero
    8ae0:	003f8e06 	br	891c <__alt_data_end+0xfc00891c>
    8ae4:	9080004c 	andi	r2,r18,1
    8ae8:	103f811e 	bne	r2,zero,88f0 <__alt_data_end+0xfc0088f0>
    8aec:	d8802117 	ldw	r2,132(sp)
    8af0:	1405c83a 	sub	r2,r2,r16
    8af4:	d8803315 	stw	r2,204(sp)
    8af8:	b47ef326 	beq	r22,r17,86c8 <__alt_data_end+0xfc0086c8>
    8afc:	dd802617 	ldw	r22,152(sp)
    8b00:	003f1106 	br	8748 <__alt_data_end+0xfc008748>
    8b04:	d9c02785 	stb	r7,158(sp)
    8b08:	00390406 	br	6f1c <__alt_data_end+0xfc006f1c>
    8b0c:	d9c02785 	stb	r7,158(sp)
    8b10:	0038d306 	br	6e60 <__alt_data_end+0xfc006e60>
    8b14:	d9c02785 	stb	r7,158(sp)
    8b18:	003a6106 	br	74a0 <__alt_data_end+0xfc0074a0>
    8b1c:	d9c02785 	stb	r7,158(sp)
    8b20:	003af806 	br	7704 <__alt_data_end+0xfc007704>
    8b24:	0005883a 	mov	r2,zero
    8b28:	003d7e06 	br	8124 <__alt_data_end+0xfc008124>
    8b2c:	d8802344 	addi	r2,sp,141
    8b30:	003f1306 	br	8780 <__alt_data_end+0xfc008780>
    8b34:	d9c02785 	stb	r7,158(sp)
    8b38:	00392306 	br	6fc8 <__alt_data_end+0xfc006fc8>
    8b3c:	d9c02785 	stb	r7,158(sp)
    8b40:	003aa906 	br	75e8 <__alt_data_end+0xfc0075e8>
    8b44:	d9c02785 	stb	r7,158(sp)
    8b48:	003a3d06 	br	7440 <__alt_data_end+0xfc007440>
    8b4c:	d9c02785 	stb	r7,158(sp)
    8b50:	003aca06 	br	767c <__alt_data_end+0xfc00767c>

00008b54 <__vfprintf_internal>:
    8b54:	008000b4 	movhi	r2,2
    8b58:	109df804 	addi	r2,r2,30688
    8b5c:	300f883a 	mov	r7,r6
    8b60:	280d883a 	mov	r6,r5
    8b64:	200b883a 	mov	r5,r4
    8b68:	11000017 	ldw	r4,0(r2)
    8b6c:	000695c1 	jmpi	695c <___vfprintf_internal_r>

00008b70 <__sbprintf>:
    8b70:	2880030b 	ldhu	r2,12(r5)
    8b74:	2ac01917 	ldw	r11,100(r5)
    8b78:	2a80038b 	ldhu	r10,14(r5)
    8b7c:	2a400717 	ldw	r9,28(r5)
    8b80:	2a000917 	ldw	r8,36(r5)
    8b84:	defee204 	addi	sp,sp,-1144
    8b88:	00c10004 	movi	r3,1024
    8b8c:	dc011a15 	stw	r16,1128(sp)
    8b90:	10bfff4c 	andi	r2,r2,65533
    8b94:	2821883a 	mov	r16,r5
    8b98:	d8cb883a 	add	r5,sp,r3
    8b9c:	dc811c15 	stw	r18,1136(sp)
    8ba0:	dc411b15 	stw	r17,1132(sp)
    8ba4:	dfc11d15 	stw	ra,1140(sp)
    8ba8:	2025883a 	mov	r18,r4
    8bac:	d881030d 	sth	r2,1036(sp)
    8bb0:	dac11915 	stw	r11,1124(sp)
    8bb4:	da81038d 	sth	r10,1038(sp)
    8bb8:	da410715 	stw	r9,1052(sp)
    8bbc:	da010915 	stw	r8,1060(sp)
    8bc0:	dec10015 	stw	sp,1024(sp)
    8bc4:	dec10415 	stw	sp,1040(sp)
    8bc8:	d8c10215 	stw	r3,1032(sp)
    8bcc:	d8c10515 	stw	r3,1044(sp)
    8bd0:	d8010615 	stw	zero,1048(sp)
    8bd4:	000695c0 	call	695c <___vfprintf_internal_r>
    8bd8:	1023883a 	mov	r17,r2
    8bdc:	10000416 	blt	r2,zero,8bf0 <__sbprintf+0x80>
    8be0:	d9410004 	addi	r5,sp,1024
    8be4:	9009883a 	mov	r4,r18
    8be8:	000c2680 	call	c268 <_fflush_r>
    8bec:	10000d1e 	bne	r2,zero,8c24 <__sbprintf+0xb4>
    8bf0:	d881030b 	ldhu	r2,1036(sp)
    8bf4:	1080100c 	andi	r2,r2,64
    8bf8:	10000326 	beq	r2,zero,8c08 <__sbprintf+0x98>
    8bfc:	8080030b 	ldhu	r2,12(r16)
    8c00:	10801014 	ori	r2,r2,64
    8c04:	8080030d 	sth	r2,12(r16)
    8c08:	8805883a 	mov	r2,r17
    8c0c:	dfc11d17 	ldw	ra,1140(sp)
    8c10:	dc811c17 	ldw	r18,1136(sp)
    8c14:	dc411b17 	ldw	r17,1132(sp)
    8c18:	dc011a17 	ldw	r16,1128(sp)
    8c1c:	dec11e04 	addi	sp,sp,1144
    8c20:	f800283a 	ret
    8c24:	047fffc4 	movi	r17,-1
    8c28:	003ff106 	br	8bf0 <__alt_data_end+0xfc008bf0>

00008c2c <__svfscanf_r>:
    8c2c:	2880030b 	ldhu	r2,12(r5)
    8c30:	deff4b04 	addi	sp,sp,-724
    8c34:	df00b315 	stw	fp,716(sp)
    8c38:	dd80b115 	stw	r22,708(sp)
    8c3c:	dfc0b415 	stw	ra,720(sp)
    8c40:	ddc0b215 	stw	r23,712(sp)
    8c44:	dd40b015 	stw	r21,704(sp)
    8c48:	dd00af15 	stw	r20,700(sp)
    8c4c:	dcc0ae15 	stw	r19,696(sp)
    8c50:	dc80ad15 	stw	r18,692(sp)
    8c54:	dc40ac15 	stw	r17,688(sp)
    8c58:	dc00ab15 	stw	r16,684(sp)
    8c5c:	10c8000c 	andi	r3,r2,8192
    8c60:	d9c09c15 	stw	r7,624(sp)
    8c64:	2839883a 	mov	fp,r5
    8c68:	202d883a 	mov	r22,r4
    8c6c:	1800061e 	bne	r3,zero,8c88 <__svfscanf_r+0x5c>
    8c70:	29001917 	ldw	r4,100(r5)
    8c74:	00f7ffc4 	movi	r3,-8193
    8c78:	10880014 	ori	r2,r2,8192
    8c7c:	20c6703a 	and	r3,r4,r3
    8c80:	2880030d 	sth	r2,12(r5)
    8c84:	28c01915 	stw	r3,100(r5)
    8c88:	30800003 	ldbu	r2,0(r6)
    8c8c:	0021883a 	mov	r16,zero
    8c90:	05c000b4 	movhi	r23,2
    8c94:	d800a115 	stw	zero,644(sp)
    8c98:	d8009e15 	stw	zero,632(sp)
    8c9c:	d800a015 	stw	zero,640(sp)
    8ca0:	d8809b15 	stw	r2,620(sp)
    8ca4:	bdddfb04 	addi	r23,r23,30700
    8ca8:	8025883a 	mov	r18,r16
    8cac:	35000044 	addi	r20,r6,1
    8cb0:	10001e26 	beq	r2,zero,8d2c <__svfscanf_r+0x100>
    8cb4:	b9c00017 	ldw	r7,0(r23)
    8cb8:	3887883a 	add	r3,r7,r2
    8cbc:	18c00043 	ldbu	r3,1(r3)
    8cc0:	18c0020c 	andi	r3,r3,8
    8cc4:	18001b26 	beq	r3,zero,8d34 <__svfscanf_r+0x108>
    8cc8:	e0800117 	ldw	r2,4(fp)
    8ccc:	00800e0e 	bge	zero,r2,8d08 <__svfscanf_r+0xdc>
    8cd0:	e0c00017 	ldw	r3,0(fp)
    8cd4:	b9000017 	ldw	r4,0(r23)
    8cd8:	18800003 	ldbu	r2,0(r3)
    8cdc:	2085883a 	add	r2,r4,r2
    8ce0:	10800043 	ldbu	r2,1(r2)
    8ce4:	1080020c 	andi	r2,r2,8
    8ce8:	10000b26 	beq	r2,zero,8d18 <__svfscanf_r+0xec>
    8cec:	e0800117 	ldw	r2,4(fp)
    8cf0:	18c00044 	addi	r3,r3,1
    8cf4:	e0c00015 	stw	r3,0(fp)
    8cf8:	10bfffc4 	addi	r2,r2,-1
    8cfc:	e0800115 	stw	r2,4(fp)
    8d00:	94800044 	addi	r18,r18,1
    8d04:	00bff216 	blt	zero,r2,8cd0 <__alt_data_end+0xfc008cd0>
    8d08:	e00b883a 	mov	r5,fp
    8d0c:	b009883a 	mov	r4,r22
    8d10:	00062a00 	call	62a0 <__srefill_r>
    8d14:	103fee26 	beq	r2,zero,8cd0 <__alt_data_end+0xfc008cd0>
    8d18:	a00d883a 	mov	r6,r20
    8d1c:	30800003 	ldbu	r2,0(r6)
    8d20:	35000044 	addi	r20,r6,1
    8d24:	d8809b15 	stw	r2,620(sp)
    8d28:	103fe21e 	bne	r2,zero,8cb4 <__alt_data_end+0xfc008cb4>
    8d2c:	d880a017 	ldw	r2,640(sp)
    8d30:	00009906 	br	8f98 <__svfscanf_r+0x36c>
    8d34:	00c00944 	movi	r3,37
    8d38:	10c0881e 	bne	r2,r3,8f5c <__svfscanf_r+0x330>
    8d3c:	30c00043 	ldbu	r3,1(r6)
    8d40:	0023883a 	mov	r17,zero
    8d44:	0027883a 	mov	r19,zero
    8d48:	01001e04 	movi	r4,120
    8d4c:	01401b04 	movi	r5,108
    8d50:	a1800044 	addi	r6,r20,1
    8d54:	20c0a236 	bltu	r4,r3,8fe0 <__svfscanf_r+0x3b4>
    8d58:	180490ba 	slli	r2,r3,2
    8d5c:	02000074 	movhi	r8,1
    8d60:	42235c04 	addi	r8,r8,-29328
    8d64:	1205883a 	add	r2,r2,r8
    8d68:	10800017 	ldw	r2,0(r2)
    8d6c:	1000683a 	jmp	r2
    8d70:	00008f94 	movui	zero,574
    8d74:	00008fe0 	cmpeqi	zero,zero,575
    8d78:	00008fe0 	cmpeqi	zero,zero,575
    8d7c:	00008fe0 	cmpeqi	zero,zero,575
    8d80:	00008fe0 	cmpeqi	zero,zero,575
    8d84:	00008fe0 	cmpeqi	zero,zero,575
    8d88:	00008fe0 	cmpeqi	zero,zero,575
    8d8c:	00008fe0 	cmpeqi	zero,zero,575
    8d90:	00008fe0 	cmpeqi	zero,zero,575
    8d94:	00008fe0 	cmpeqi	zero,zero,575
    8d98:	00008fe0 	cmpeqi	zero,zero,575
    8d9c:	00008fe0 	cmpeqi	zero,zero,575
    8da0:	00008fe0 	cmpeqi	zero,zero,575
    8da4:	00008fe0 	cmpeqi	zero,zero,575
    8da8:	00008fe0 	cmpeqi	zero,zero,575
    8dac:	00008fe0 	cmpeqi	zero,zero,575
    8db0:	00008fe0 	cmpeqi	zero,zero,575
    8db4:	00008fe0 	cmpeqi	zero,zero,575
    8db8:	00008fe0 	cmpeqi	zero,zero,575
    8dbc:	00008fe0 	cmpeqi	zero,zero,575
    8dc0:	00008fe0 	cmpeqi	zero,zero,575
    8dc4:	00008fe0 	cmpeqi	zero,zero,575
    8dc8:	00008fe0 	cmpeqi	zero,zero,575
    8dcc:	00008fe0 	cmpeqi	zero,zero,575
    8dd0:	00008fe0 	cmpeqi	zero,zero,575
    8dd4:	00008fe0 	cmpeqi	zero,zero,575
    8dd8:	00008fe0 	cmpeqi	zero,zero,575
    8ddc:	00008fe0 	cmpeqi	zero,zero,575
    8de0:	00008fe0 	cmpeqi	zero,zero,575
    8de4:	00008fe0 	cmpeqi	zero,zero,575
    8de8:	00008fe0 	cmpeqi	zero,zero,575
    8dec:	00008fe0 	cmpeqi	zero,zero,575
    8df0:	00008fe0 	cmpeqi	zero,zero,575
    8df4:	00008fe0 	cmpeqi	zero,zero,575
    8df8:	00008fe0 	cmpeqi	zero,zero,575
    8dfc:	00008fe0 	cmpeqi	zero,zero,575
    8e00:	00008fe0 	cmpeqi	zero,zero,575
    8e04:	00008f54 	movui	zero,573
    8e08:	00008fe0 	cmpeqi	zero,zero,575
    8e0c:	00008fe0 	cmpeqi	zero,zero,575
    8e10:	00008fe0 	cmpeqi	zero,zero,575
    8e14:	00008fe0 	cmpeqi	zero,zero,575
    8e18:	00008fc8 	cmpgei	zero,zero,575
    8e1c:	00008fe0 	cmpeqi	zero,zero,575
    8e20:	00008fe0 	cmpeqi	zero,zero,575
    8e24:	00008fe0 	cmpeqi	zero,zero,575
    8e28:	00008fe0 	cmpeqi	zero,zero,575
    8e2c:	00008fe0 	cmpeqi	zero,zero,575
    8e30:	000090fc 	xorhi	zero,zero,579
    8e34:	000090fc 	xorhi	zero,zero,579
    8e38:	000090fc 	xorhi	zero,zero,579
    8e3c:	000090fc 	xorhi	zero,zero,579
    8e40:	000090fc 	xorhi	zero,zero,579
    8e44:	000090fc 	xorhi	zero,zero,579
    8e48:	000090fc 	xorhi	zero,zero,579
    8e4c:	000090fc 	xorhi	zero,zero,579
    8e50:	000090fc 	xorhi	zero,zero,579
    8e54:	000090fc 	xorhi	zero,zero,579
    8e58:	00008fe0 	cmpeqi	zero,zero,575
    8e5c:	00008fe0 	cmpeqi	zero,zero,575
    8e60:	00008fe0 	cmpeqi	zero,zero,575
    8e64:	00008fe0 	cmpeqi	zero,zero,575
    8e68:	00008fe0 	cmpeqi	zero,zero,575
    8e6c:	00008fe0 	cmpeqi	zero,zero,575
    8e70:	00008fe0 	cmpeqi	zero,zero,575
    8e74:	00008fe0 	cmpeqi	zero,zero,575
    8e78:	00008fe0 	cmpeqi	zero,zero,575
    8e7c:	00008fe0 	cmpeqi	zero,zero,575
    8e80:	000090d0 	cmplti	zero,zero,579
    8e84:	00009180 	call	918 <kingCapture+0x258>
    8e88:	00008fe0 	cmpeqi	zero,zero,575
    8e8c:	00009180 	call	918 <kingCapture+0x258>
    8e90:	00008fe0 	cmpeqi	zero,zero,575
    8e94:	00008fe0 	cmpeqi	zero,zero,575
    8e98:	00008fe0 	cmpeqi	zero,zero,575
    8e9c:	00008fe0 	cmpeqi	zero,zero,575
    8ea0:	0000916c 	andhi	zero,zero,581
    8ea4:	00008fe0 	cmpeqi	zero,zero,575
    8ea8:	00008fe0 	cmpeqi	zero,zero,575
    8eac:	00009140 	call	914 <kingCapture+0x254>
    8eb0:	00008fe0 	cmpeqi	zero,zero,575
    8eb4:	00008fe0 	cmpeqi	zero,zero,575
    8eb8:	00008fe0 	cmpeqi	zero,zero,575
    8ebc:	00008fe0 	cmpeqi	zero,zero,575
    8ec0:	00008fe0 	cmpeqi	zero,zero,575
    8ec4:	00008fe0 	cmpeqi	zero,zero,575
    8ec8:	00008fe0 	cmpeqi	zero,zero,575
    8ecc:	00008fe0 	cmpeqi	zero,zero,575
    8ed0:	00009118 	cmpnei	zero,zero,580
    8ed4:	00008fe0 	cmpeqi	zero,zero,575
    8ed8:	00008fe0 	cmpeqi	zero,zero,575
    8edc:	000092b4 	movhi	zero,586
    8ee0:	00008fe0 	cmpeqi	zero,zero,575
    8ee4:	00008fe0 	cmpeqi	zero,zero,575
    8ee8:	00008fe0 	cmpeqi	zero,zero,575
    8eec:	00008fe0 	cmpeqi	zero,zero,575
    8ef0:	00008fe0 	cmpeqi	zero,zero,575
    8ef4:	00008fe0 	cmpeqi	zero,zero,575
    8ef8:	00008fe0 	cmpeqi	zero,zero,575
    8efc:	00009238 	rdprs	zero,zero,584
    8f00:	00009210 	cmplti	zero,zero,584
    8f04:	00009180 	call	918 <kingCapture+0x258>
    8f08:	00009180 	call	918 <kingCapture+0x258>
    8f0c:	00009180 	call	918 <kingCapture+0x258>
    8f10:	000091fc 	xorhi	zero,zero,583
    8f14:	00009340 	call	934 <kingCapture+0x274>
    8f18:	00008fe0 	cmpeqi	zero,zero,575
    8f1c:	00008fe0 	cmpeqi	zero,zero,575
    8f20:	000091e8 	cmpgeui	zero,zero,583
    8f24:	00008fe0 	cmpeqi	zero,zero,575
    8f28:	000091b8 	rdprs	zero,zero,582
    8f2c:	00009194 	movui	zero,582
    8f30:	000090a4 	muli	zero,zero,578
    8f34:	00008fe0 	cmpeqi	zero,zero,575
    8f38:	00008fe0 	cmpeqi	zero,zero,575
    8f3c:	00009090 	cmplti	zero,zero,578
    8f40:	00008fe0 	cmpeqi	zero,zero,575
    8f44:	00009018 	cmpnei	zero,zero,576
    8f48:	00008fe0 	cmpeqi	zero,zero,575
    8f4c:	00008fe0 	cmpeqi	zero,zero,575
    8f50:	00009118 	cmpnei	zero,zero,580
    8f54:	d9809d15 	stw	r6,628(sp)
    8f58:	3029883a 	mov	r20,r6
    8f5c:	e0800117 	ldw	r2,4(fp)
    8f60:	0081aa0e 	bge	zero,r2,960c <__svfscanf_r+0x9e0>
    8f64:	e0800017 	ldw	r2,0(fp)
    8f68:	a0ffffc3 	ldbu	r3,-1(r20)
    8f6c:	11000003 	ldbu	r4,0(r2)
    8f70:	20ff6e1e 	bne	r4,r3,8d2c <__alt_data_end+0xfc008d2c>
    8f74:	e0c00117 	ldw	r3,4(fp)
    8f78:	10800044 	addi	r2,r2,1
    8f7c:	e0800015 	stw	r2,0(fp)
    8f80:	18bfffc4 	addi	r2,r3,-1
    8f84:	e0800115 	stw	r2,4(fp)
    8f88:	94800044 	addi	r18,r18,1
    8f8c:	a00d883a 	mov	r6,r20
    8f90:	003f6206 	br	8d1c <__alt_data_end+0xfc008d1c>
    8f94:	00bfffc4 	movi	r2,-1
    8f98:	dfc0b417 	ldw	ra,720(sp)
    8f9c:	df00b317 	ldw	fp,716(sp)
    8fa0:	ddc0b217 	ldw	r23,712(sp)
    8fa4:	dd80b117 	ldw	r22,708(sp)
    8fa8:	dd40b017 	ldw	r21,704(sp)
    8fac:	dd00af17 	ldw	r20,700(sp)
    8fb0:	dcc0ae17 	ldw	r19,696(sp)
    8fb4:	dc80ad17 	ldw	r18,692(sp)
    8fb8:	dc40ac17 	ldw	r17,688(sp)
    8fbc:	dc00ab17 	ldw	r16,684(sp)
    8fc0:	dec0b504 	addi	sp,sp,724
    8fc4:	f800283a 	ret
    8fc8:	a0800043 	ldbu	r2,1(r20)
    8fcc:	3029883a 	mov	r20,r6
    8fd0:	8c400414 	ori	r17,r17,16
    8fd4:	10c03fcc 	andi	r3,r2,255
    8fd8:	a1800044 	addi	r6,r20,1
    8fdc:	20ff5e2e 	bgeu	r4,r3,8d58 <__alt_data_end+0xfc008d58>
    8fe0:	38c7883a 	add	r3,r7,r3
    8fe4:	18800043 	ldbu	r2,1(r3)
    8fe8:	d9809d15 	stw	r6,628(sp)
    8fec:	00c00044 	movi	r3,1
    8ff0:	108000cc 	andi	r2,r2,3
    8ff4:	10c18f26 	beq	r2,r3,9634 <__svfscanf_r+0xa08>
    8ff8:	e0800117 	ldw	r2,4(fp)
    8ffc:	00808716 	blt	zero,r2,921c <__svfscanf_r+0x5f0>
    9000:	e00b883a 	mov	r5,fp
    9004:	b009883a 	mov	r4,r22
    9008:	00062a00 	call	62a0 <__srefill_r>
    900c:	1001431e 	bne	r2,zero,951c <__svfscanf_r+0x8f0>
    9010:	b9c00017 	ldw	r7,0(r23)
    9014:	00008106 	br	921c <__svfscanf_r+0x5f0>
    9018:	e0800117 	ldw	r2,4(fp)
    901c:	d9809d15 	stw	r6,628(sp)
    9020:	0081a30e 	bge	zero,r2,96b0 <__svfscanf_r+0xa84>
    9024:	00800074 	movhi	r2,1
    9028:	1080fc04 	addi	r2,r2,1008
    902c:	02000284 	movi	r8,10
    9030:	d880a115 	stw	r2,644(sp)
    9034:	da009e15 	stw	r8,632(sp)
    9038:	050000c4 	movi	r20,3
    903c:	e0c00017 	ldw	r3,0(fp)
    9040:	00000206 	br	904c <__svfscanf_r+0x420>
    9044:	18c00044 	addi	r3,r3,1
    9048:	e0c00015 	stw	r3,0(fp)
    904c:	19000003 	ldbu	r4,0(r3)
    9050:	20803fcc 	andi	r2,r4,255
    9054:	3885883a 	add	r2,r7,r2
    9058:	10800043 	ldbu	r2,1(r2)
    905c:	1140020c 	andi	r5,r2,8
    9060:	2801ab26 	beq	r5,zero,9710 <__svfscanf_r+0xae4>
    9064:	e0800117 	ldw	r2,4(fp)
    9068:	94800044 	addi	r18,r18,1
    906c:	10bfffc4 	addi	r2,r2,-1
    9070:	e0800115 	stw	r2,4(fp)
    9074:	00bff316 	blt	zero,r2,9044 <__alt_data_end+0xfc009044>
    9078:	e00b883a 	mov	r5,fp
    907c:	b009883a 	mov	r4,r22
    9080:	00062a00 	call	62a0 <__srefill_r>
    9084:	1001251e 	bne	r2,zero,951c <__svfscanf_r+0x8f0>
    9088:	b9c00017 	ldw	r7,0(r23)
    908c:	003feb06 	br	903c <__alt_data_end+0xfc00903c>
    9090:	e0800117 	ldw	r2,4(fp)
    9094:	d9809d15 	stw	r6,628(sp)
    9098:	00818b0e 	bge	zero,r2,96c8 <__svfscanf_r+0xa9c>
    909c:	05000084 	movi	r20,2
    90a0:	003fe606 	br	903c <__alt_data_end+0xfc00903c>
    90a4:	e0800117 	ldw	r2,4(fp)
    90a8:	d9809d15 	stw	r6,628(sp)
    90ac:	8c408814 	ori	r17,r17,544
    90b0:	00801d0e 	bge	zero,r2,9128 <__svfscanf_r+0x4fc>
    90b4:	00800074 	movhi	r2,1
    90b8:	1080fc04 	addi	r2,r2,1008
    90bc:	02000404 	movi	r8,16
    90c0:	d880a115 	stw	r2,644(sp)
    90c4:	da009e15 	stw	r8,632(sp)
    90c8:	050000c4 	movi	r20,3
    90cc:	003fdb06 	br	903c <__alt_data_end+0xfc00903c>
    90d0:	e0800117 	ldw	r2,4(fp)
    90d4:	d9809d15 	stw	r6,628(sp)
    90d8:	8c400054 	ori	r17,r17,1
    90dc:	00bfc80e 	bge	zero,r2,9000 <__alt_data_end+0xfc009000>
    90e0:	00c00034 	movhi	r3,0
    90e4:	18d9c204 	addi	r3,r3,26376
    90e8:	02000284 	movi	r8,10
    90ec:	d8c0a115 	stw	r3,644(sp)
    90f0:	da009e15 	stw	r8,632(sp)
    90f4:	050000c4 	movi	r20,3
    90f8:	003fd006 	br	903c <__alt_data_end+0xfc00903c>
    90fc:	9cc002a4 	muli	r19,r19,10
    9100:	a0800043 	ldbu	r2,1(r20)
    9104:	3029883a 	mov	r20,r6
    9108:	98e7883a 	add	r19,r19,r3
    910c:	9cfff404 	addi	r19,r19,-48
    9110:	10c03fcc 	andi	r3,r2,255
    9114:	003f0e06 	br	8d50 <__alt_data_end+0xfc008d50>
    9118:	e0800117 	ldw	r2,4(fp)
    911c:	d9809d15 	stw	r6,628(sp)
    9120:	8c408014 	ori	r17,r17,512
    9124:	00bfe316 	blt	zero,r2,90b4 <__alt_data_end+0xfc0090b4>
    9128:	e00b883a 	mov	r5,fp
    912c:	b009883a 	mov	r4,r22
    9130:	00062a00 	call	62a0 <__srefill_r>
    9134:	1000f91e 	bne	r2,zero,951c <__svfscanf_r+0x8f0>
    9138:	b9c00017 	ldw	r7,0(r23)
    913c:	003fdd06 	br	90b4 <__alt_data_end+0xfc0090b4>
    9140:	e0800117 	ldw	r2,4(fp)
    9144:	d9809d15 	stw	r6,628(sp)
    9148:	8c400054 	ori	r17,r17,1
    914c:	0080140e 	bge	zero,r2,91a0 <__svfscanf_r+0x574>
    9150:	00800074 	movhi	r2,1
    9154:	1080fc04 	addi	r2,r2,1008
    9158:	02000204 	movi	r8,8
    915c:	d880a115 	stw	r2,644(sp)
    9160:	da009e15 	stw	r8,632(sp)
    9164:	050000c4 	movi	r20,3
    9168:	003fb406 	br	903c <__alt_data_end+0xfc00903c>
    916c:	a0800043 	ldbu	r2,1(r20)
    9170:	8c400094 	ori	r17,r17,2
    9174:	3029883a 	mov	r20,r6
    9178:	10c03fcc 	andi	r3,r2,255
    917c:	003ef406 	br	8d50 <__alt_data_end+0xfc008d50>
    9180:	e0800117 	ldw	r2,4(fp)
    9184:	d9809d15 	stw	r6,628(sp)
    9188:	0081420e 	bge	zero,r2,9694 <__svfscanf_r+0xa68>
    918c:	05000104 	movi	r20,4
    9190:	003faa06 	br	903c <__alt_data_end+0xfc00903c>
    9194:	e0800117 	ldw	r2,4(fp)
    9198:	d9809d15 	stw	r6,628(sp)
    919c:	00bfec16 	blt	zero,r2,9150 <__alt_data_end+0xfc009150>
    91a0:	e00b883a 	mov	r5,fp
    91a4:	b009883a 	mov	r4,r22
    91a8:	00062a00 	call	62a0 <__srefill_r>
    91ac:	1000db1e 	bne	r2,zero,951c <__svfscanf_r+0x8f0>
    91b0:	b9c00017 	ldw	r7,0(r23)
    91b4:	003fe606 	br	9150 <__alt_data_end+0xfc009150>
    91b8:	d9809d15 	stw	r6,628(sp)
    91bc:	8880040c 	andi	r2,r17,16
    91c0:	10009c1e 	bne	r2,zero,9434 <__svfscanf_r+0x808>
    91c4:	8880010c 	andi	r2,r17,4
    91c8:	10011e26 	beq	r2,zero,9644 <__svfscanf_r+0xa18>
    91cc:	da009c17 	ldw	r8,624(sp)
    91d0:	3029883a 	mov	r20,r6
    91d4:	40800017 	ldw	r2,0(r8)
    91d8:	42000104 	addi	r8,r8,4
    91dc:	da009c15 	stw	r8,624(sp)
    91e0:	1480000d 	sth	r18,0(r2)
    91e4:	003ecc06 	br	8d18 <__alt_data_end+0xfc008d18>
    91e8:	a0c00043 	ldbu	r3,1(r20)
    91ec:	19410c26 	beq	r3,r5,9620 <__svfscanf_r+0x9f4>
    91f0:	8c400054 	ori	r17,r17,1
    91f4:	3029883a 	mov	r20,r6
    91f8:	003ed506 	br	8d50 <__alt_data_end+0xfc008d50>
    91fc:	a0800043 	ldbu	r2,1(r20)
    9200:	8c400114 	ori	r17,r17,4
    9204:	3029883a 	mov	r20,r6
    9208:	10c03fcc 	andi	r3,r2,255
    920c:	003ed006 	br	8d50 <__alt_data_end+0xfc008d50>
    9210:	e0800117 	ldw	r2,4(fp)
    9214:	d9809d15 	stw	r6,628(sp)
    9218:	00bf790e 	bge	zero,r2,9000 <__alt_data_end+0xfc009000>
    921c:	00800034 	movhi	r2,0
    9220:	1099c204 	addi	r2,r2,26376
    9224:	02000284 	movi	r8,10
    9228:	d880a115 	stw	r2,644(sp)
    922c:	da009e15 	stw	r8,632(sp)
    9230:	050000c4 	movi	r20,3
    9234:	003f8106 	br	903c <__alt_data_end+0xfc00903c>
    9238:	e0800117 	ldw	r2,4(fp)
    923c:	d9809d15 	stw	r6,628(sp)
    9240:	0080c40e 	bge	zero,r2,9554 <__svfscanf_r+0x928>
    9244:	9800011e 	bne	r19,zero,924c <__svfscanf_r+0x620>
    9248:	04c00044 	movi	r19,1
    924c:	8880004c 	andi	r2,r17,1
    9250:	1000441e 	bne	r2,zero,9364 <__svfscanf_r+0x738>
    9254:	8c40040c 	andi	r17,r17,16
    9258:	8800da26 	beq	r17,zero,95c4 <__svfscanf_r+0x998>
    925c:	0021883a 	mov	r16,zero
    9260:	00000806 	br	9284 <__svfscanf_r+0x658>
    9264:	1887883a 	add	r3,r3,r2
    9268:	e00b883a 	mov	r5,fp
    926c:	b009883a 	mov	r4,r22
    9270:	e0c00015 	stw	r3,0(fp)
    9274:	80a1883a 	add	r16,r16,r2
    9278:	98a7c83a 	sub	r19,r19,r2
    927c:	00062a00 	call	62a0 <__srefill_r>
    9280:	1000ca1e 	bne	r2,zero,95ac <__svfscanf_r+0x980>
    9284:	e0800117 	ldw	r2,4(fp)
    9288:	e0c00017 	ldw	r3,0(fp)
    928c:	14fff516 	blt	r2,r19,9264 <__alt_data_end+0xfc009264>
    9290:	14c5c83a 	sub	r2,r2,r19
    9294:	1cd5883a 	add	r10,r3,r19
    9298:	84e1883a 	add	r16,r16,r19
    929c:	e0800115 	stw	r2,4(fp)
    92a0:	e2800015 	stw	r10,0(fp)
    92a4:	dd009d17 	ldw	r20,628(sp)
    92a8:	9425883a 	add	r18,r18,r16
    92ac:	a00d883a 	mov	r6,r20
    92b0:	003e9a06 	br	8d1c <__alt_data_end+0xfc008d1c>
    92b4:	300b883a 	mov	r5,r6
    92b8:	d9005884 	addi	r4,sp,354
    92bc:	d9809d15 	stw	r6,628(sp)
    92c0:	000e7240 	call	e724 <__sccl>
    92c4:	1029883a 	mov	r20,r2
    92c8:	e0800117 	ldw	r2,4(fp)
    92cc:	0081050e 	bge	zero,r2,96e4 <__svfscanf_r+0xab8>
    92d0:	e1000017 	ldw	r4,0(fp)
    92d4:	20800003 	ldbu	r2,0(r4)
    92d8:	98005926 	beq	r19,zero,9440 <__svfscanf_r+0x814>
    92dc:	8c40040c 	andi	r17,r17,16
    92e0:	88005a26 	beq	r17,zero,944c <__svfscanf_r+0x820>
    92e4:	9823883a 	mov	r17,r19
    92e8:	0021883a 	mov	r16,zero
    92ec:	00000106 	br	92f4 <__svfscanf_r+0x6c8>
    92f0:	20800003 	ldbu	r2,0(r4)
    92f4:	10803fcc 	andi	r2,r2,255
    92f8:	d8c05884 	addi	r3,sp,354
    92fc:	1885883a 	add	r2,r3,r2
    9300:	10800007 	ldb	r2,0(r2)
    9304:	1000ad26 	beq	r2,zero,95bc <__svfscanf_r+0x990>
    9308:	e0800117 	ldw	r2,4(fp)
    930c:	21000044 	addi	r4,r4,1
    9310:	84000044 	addi	r16,r16,1
    9314:	10bfffc4 	addi	r2,r2,-1
    9318:	e0800115 	stw	r2,4(fp)
    931c:	e1000015 	stw	r4,0(fp)
    9320:	84c0a026 	beq	r16,r19,95a4 <__svfscanf_r+0x978>
    9324:	00bff216 	blt	zero,r2,92f0 <__alt_data_end+0xfc0092f0>
    9328:	e00b883a 	mov	r5,fp
    932c:	b009883a 	mov	r4,r22
    9330:	00062a00 	call	62a0 <__srefill_r>
    9334:	10009a1e 	bne	r2,zero,95a0 <__svfscanf_r+0x974>
    9338:	e1000017 	ldw	r4,0(fp)
    933c:	003fec06 	br	92f0 <__alt_data_end+0xfc0092f0>
    9340:	e0800117 	ldw	r2,4(fp)
    9344:	d9809d15 	stw	r6,628(sp)
    9348:	0080eb0e 	bge	zero,r2,96f8 <__svfscanf_r+0xacc>
    934c:	00800034 	movhi	r2,0
    9350:	1099c204 	addi	r2,r2,26376
    9354:	d880a115 	stw	r2,644(sp)
    9358:	d8009e15 	stw	zero,632(sp)
    935c:	050000c4 	movi	r20,3
    9360:	003f3606 	br	903c <__alt_data_end+0xfc00903c>
    9364:	dd409904 	addi	r21,sp,612
    9368:	8c40040c 	andi	r17,r17,16
    936c:	01800204 	movi	r6,8
    9370:	000b883a 	mov	r5,zero
    9374:	a809883a 	mov	r4,r21
    9378:	dc409f15 	stw	r17,636(sp)
    937c:	0005a800 	call	5a80 <memset>
    9380:	dc409f17 	ldw	r17,636(sp)
    9384:	88006e26 	beq	r17,zero,9540 <__svfscanf_r+0x914>
    9388:	0029883a 	mov	r20,zero
    938c:	0023883a 	mov	r17,zero
    9390:	000cefc0 	call	cefc <__locale_mb_cur_max>
    9394:	14406126 	beq	r2,r17,951c <__svfscanf_r+0x8f0>
    9398:	e0800017 	ldw	r2,0(fp)
    939c:	e0c00117 	ldw	r3,4(fp)
    93a0:	d9000104 	addi	r4,sp,4
    93a4:	12000003 	ldbu	r8,0(r2)
    93a8:	18ffffc4 	addi	r3,r3,-1
    93ac:	10800044 	addi	r2,r2,1
    93b0:	e0c00115 	stw	r3,4(fp)
    93b4:	e0800015 	stw	r2,0(fp)
    93b8:	8c000044 	addi	r16,r17,1
    93bc:	dd400015 	stw	r21,0(sp)
    93c0:	2463883a 	add	r17,r4,r17
    93c4:	200d883a 	mov	r6,r4
    93c8:	a00b883a 	mov	r5,r20
    93cc:	800f883a 	mov	r7,r16
    93d0:	b009883a 	mov	r4,r22
    93d4:	8a000005 	stb	r8,0(r17)
    93d8:	000d16c0 	call	d16c <_mbrtowc_r>
    93dc:	017fffc4 	movi	r5,-1
    93e0:	11404e26 	beq	r2,r5,951c <__svfscanf_r+0x8f0>
    93e4:	1000601e 	bne	r2,zero,9568 <__svfscanf_r+0x93c>
    93e8:	da009f17 	ldw	r8,636(sp)
    93ec:	4000641e 	bne	r8,zero,9580 <__svfscanf_r+0x954>
    93f0:	a0000015 	stw	zero,0(r20)
    93f4:	9425883a 	add	r18,r18,r16
    93f8:	9967883a 	add	r19,r19,r5
    93fc:	a5000104 	addi	r20,r20,4
    9400:	e0800117 	ldw	r2,4(fp)
    9404:	0023883a 	mov	r17,zero
    9408:	00804b16 	blt	zero,r2,9538 <__svfscanf_r+0x90c>
    940c:	e00b883a 	mov	r5,fp
    9410:	b009883a 	mov	r4,r22
    9414:	00062a00 	call	62a0 <__srefill_r>
    9418:	10004726 	beq	r2,zero,9538 <__svfscanf_r+0x90c>
    941c:	88003f1e 	bne	r17,zero,951c <__svfscanf_r+0x8f0>
    9420:	d8c09f17 	ldw	r3,636(sp)
    9424:	1800031e 	bne	r3,zero,9434 <__svfscanf_r+0x808>
    9428:	da00a017 	ldw	r8,640(sp)
    942c:	42000044 	addi	r8,r8,1
    9430:	da00a015 	stw	r8,640(sp)
    9434:	dd009d17 	ldw	r20,628(sp)
    9438:	a00d883a 	mov	r6,r20
    943c:	003e3706 	br	8d1c <__alt_data_end+0xfc008d1c>
    9440:	8c40040c 	andi	r17,r17,16
    9444:	04ffffc4 	movi	r19,-1
    9448:	883fa61e 	bne	r17,zero,92e4 <__alt_data_end+0xfc0092e4>
    944c:	da009c17 	ldw	r8,624(sp)
    9450:	9abfffc4 	addi	r10,r19,-1
    9454:	44000017 	ldw	r16,0(r8)
    9458:	44400104 	addi	r17,r8,4
    945c:	8007883a 	mov	r3,r16
    9460:	82ab883a 	add	r21,r16,r10
    9464:	00000306 	br	9474 <__svfscanf_r+0x848>
    9468:	e1000017 	ldw	r4,0(fp)
    946c:	9807883a 	mov	r3,r19
    9470:	20800003 	ldbu	r2,0(r4)
    9474:	10803fcc 	andi	r2,r2,255
    9478:	d9405884 	addi	r5,sp,354
    947c:	2885883a 	add	r2,r5,r2
    9480:	10800007 	ldb	r2,0(r2)
    9484:	10004b26 	beq	r2,zero,95b4 <__svfscanf_r+0x988>
    9488:	e0800117 	ldw	r2,4(fp)
    948c:	21400044 	addi	r5,r4,1
    9490:	e1400015 	stw	r5,0(fp)
    9494:	10bfffc4 	addi	r2,r2,-1
    9498:	e0800115 	stw	r2,4(fp)
    949c:	20800003 	ldbu	r2,0(r4)
    94a0:	1cc00044 	addi	r19,r3,1
    94a4:	18800005 	stb	r2,0(r3)
    94a8:	1d400726 	beq	r3,r21,94c8 <__svfscanf_r+0x89c>
    94ac:	e0800117 	ldw	r2,4(fp)
    94b0:	00bfed16 	blt	zero,r2,9468 <__alt_data_end+0xfc009468>
    94b4:	e00b883a 	mov	r5,fp
    94b8:	b009883a 	mov	r4,r22
    94bc:	00062a00 	call	62a0 <__srefill_r>
    94c0:	103fe926 	beq	r2,zero,9468 <__alt_data_end+0xfc009468>
    94c4:	84c01526 	beq	r16,r19,951c <__svfscanf_r+0x8f0>
    94c8:	9c21c83a 	sub	r16,r19,r16
    94cc:	803e1726 	beq	r16,zero,8d2c <__alt_data_end+0xfc008d2c>
    94d0:	da00a017 	ldw	r8,640(sp)
    94d4:	98000005 	stb	zero,0(r19)
    94d8:	dc409c15 	stw	r17,624(sp)
    94dc:	42000044 	addi	r8,r8,1
    94e0:	da00a015 	stw	r8,640(sp)
    94e4:	9425883a 	add	r18,r18,r16
    94e8:	a00d883a 	mov	r6,r20
    94ec:	003e0b06 	br	8d1c <__alt_data_end+0xfc008d1c>
    94f0:	017fff84 	movi	r5,-2
    94f4:	11439b1e 	bne	r2,r5,a364 <__svfscanf_r+0x1738>
    94f8:	8821883a 	mov	r16,r17
    94fc:	e0800117 	ldw	r2,4(fp)
    9500:	0082e516 	blt	zero,r2,a098 <__svfscanf_r+0x146c>
    9504:	e00b883a 	mov	r5,fp
    9508:	b009883a 	mov	r4,r22
    950c:	00062a00 	call	62a0 <__srefill_r>
    9510:	1002e126 	beq	r2,zero,a098 <__svfscanf_r+0x146c>
    9514:	dc409f17 	ldw	r17,636(sp)
    9518:	8002e826 	beq	r16,zero,a0bc <__svfscanf_r+0x1490>
    951c:	da00a017 	ldw	r8,640(sp)
    9520:	403e9c26 	beq	r8,zero,8f94 <__alt_data_end+0xfc008f94>
    9524:	e080030b 	ldhu	r2,12(fp)
    9528:	1080100c 	andi	r2,r2,64
    952c:	103e991e 	bne	r2,zero,8f94 <__alt_data_end+0xfc008f94>
    9530:	4005883a 	mov	r2,r8
    9534:	003e9806 	br	8f98 <__alt_data_end+0xfc008f98>
    9538:	983f951e 	bne	r19,zero,9390 <__alt_data_end+0xfc009390>
    953c:	003fb806 	br	9420 <__alt_data_end+0xfc009420>
    9540:	da009c17 	ldw	r8,624(sp)
    9544:	45000017 	ldw	r20,0(r8)
    9548:	42000104 	addi	r8,r8,4
    954c:	da009c15 	stw	r8,624(sp)
    9550:	003f8e06 	br	938c <__alt_data_end+0xfc00938c>
    9554:	e00b883a 	mov	r5,fp
    9558:	b009883a 	mov	r4,r22
    955c:	00062a00 	call	62a0 <__srefill_r>
    9560:	103f3826 	beq	r2,zero,9244 <__alt_data_end+0xfc009244>
    9564:	003fed06 	br	951c <__alt_data_end+0xfc00951c>
    9568:	00ffff84 	movi	r3,-2
    956c:	10c0071e 	bne	r2,r3,958c <__svfscanf_r+0x960>
    9570:	e0800117 	ldw	r2,4(fp)
    9574:	8023883a 	mov	r17,r16
    9578:	00bf8516 	blt	zero,r2,9390 <__alt_data_end+0xfc009390>
    957c:	003fa306 	br	940c <__alt_data_end+0xfc00940c>
    9580:	9425883a 	add	r18,r18,r16
    9584:	9cffffc4 	addi	r19,r19,-1
    9588:	003f9d06 	br	9400 <__alt_data_end+0xfc009400>
    958c:	da009f17 	ldw	r8,636(sp)
    9590:	9425883a 	add	r18,r18,r16
    9594:	9cffffc4 	addi	r19,r19,-1
    9598:	403f9826 	beq	r8,zero,93fc <__alt_data_end+0xfc0093fc>
    959c:	003f9806 	br	9400 <__alt_data_end+0xfc009400>
    95a0:	8023883a 	mov	r17,r16
    95a4:	8821883a 	mov	r16,r17
    95a8:	003fce06 	br	94e4 <__alt_data_end+0xfc0094e4>
    95ac:	803f3d1e 	bne	r16,zero,92a4 <__alt_data_end+0xfc0092a4>
    95b0:	003fda06 	br	951c <__alt_data_end+0xfc00951c>
    95b4:	1827883a 	mov	r19,r3
    95b8:	003fc306 	br	94c8 <__alt_data_end+0xfc0094c8>
    95bc:	803fc91e 	bne	r16,zero,94e4 <__alt_data_end+0xfc0094e4>
    95c0:	003dda06 	br	8d2c <__alt_data_end+0xfc008d2c>
    95c4:	da009c17 	ldw	r8,624(sp)
    95c8:	df000015 	stw	fp,0(sp)
    95cc:	980f883a 	mov	r7,r19
    95d0:	41400017 	ldw	r5,0(r8)
    95d4:	01800044 	movi	r6,1
    95d8:	b009883a 	mov	r4,r22
    95dc:	000c2f40 	call	c2f4 <_fread_r>
    95e0:	da009c17 	ldw	r8,624(sp)
    95e4:	40c00104 	addi	r3,r8,4
    95e8:	103fcc26 	beq	r2,zero,951c <__alt_data_end+0xfc00951c>
    95ec:	da00a017 	ldw	r8,640(sp)
    95f0:	dd009d17 	ldw	r20,628(sp)
    95f4:	90a5883a 	add	r18,r18,r2
    95f8:	42000044 	addi	r8,r8,1
    95fc:	da00a015 	stw	r8,640(sp)
    9600:	d8c09c15 	stw	r3,624(sp)
    9604:	a00d883a 	mov	r6,r20
    9608:	003dc406 	br	8d1c <__alt_data_end+0xfc008d1c>
    960c:	e00b883a 	mov	r5,fp
    9610:	b009883a 	mov	r4,r22
    9614:	00062a00 	call	62a0 <__srefill_r>
    9618:	103e5226 	beq	r2,zero,8f64 <__alt_data_end+0xfc008f64>
    961c:	003fbf06 	br	951c <__alt_data_end+0xfc00951c>
    9620:	a0800083 	ldbu	r2,2(r20)
    9624:	8c400094 	ori	r17,r17,2
    9628:	a5000084 	addi	r20,r20,2
    962c:	10c03fcc 	andi	r3,r2,255
    9630:	003dc706 	br	8d50 <__alt_data_end+0xfc008d50>
    9634:	e0800117 	ldw	r2,4(fp)
    9638:	88e2b03a 	or	r17,r17,r3
    963c:	00bef716 	blt	zero,r2,921c <__alt_data_end+0xfc00921c>
    9640:	003e6f06 	br	9000 <__alt_data_end+0xfc009000>
    9644:	8880004c 	andi	r2,r17,1
    9648:	10000b1e 	bne	r2,zero,9678 <__svfscanf_r+0xa4c>
    964c:	8c40008c 	andi	r17,r17,2
    9650:	88000926 	beq	r17,zero,9678 <__svfscanf_r+0xa4c>
    9654:	da009c17 	ldw	r8,624(sp)
    9658:	9007d7fa 	srai	r3,r18,31
    965c:	dd009d17 	ldw	r20,628(sp)
    9660:	40800017 	ldw	r2,0(r8)
    9664:	42000104 	addi	r8,r8,4
    9668:	da009c15 	stw	r8,624(sp)
    966c:	14800015 	stw	r18,0(r2)
    9670:	10c00115 	stw	r3,4(r2)
    9674:	003da806 	br	8d18 <__alt_data_end+0xfc008d18>
    9678:	da009c17 	ldw	r8,624(sp)
    967c:	dd009d17 	ldw	r20,628(sp)
    9680:	40800017 	ldw	r2,0(r8)
    9684:	42000104 	addi	r8,r8,4
    9688:	da009c15 	stw	r8,624(sp)
    968c:	14800015 	stw	r18,0(r2)
    9690:	003da106 	br	8d18 <__alt_data_end+0xfc008d18>
    9694:	e00b883a 	mov	r5,fp
    9698:	b009883a 	mov	r4,r22
    969c:	00062a00 	call	62a0 <__srefill_r>
    96a0:	103f9e1e 	bne	r2,zero,951c <__alt_data_end+0xfc00951c>
    96a4:	b9c00017 	ldw	r7,0(r23)
    96a8:	05000104 	movi	r20,4
    96ac:	003e6306 	br	903c <__alt_data_end+0xfc00903c>
    96b0:	e00b883a 	mov	r5,fp
    96b4:	b009883a 	mov	r4,r22
    96b8:	00062a00 	call	62a0 <__srefill_r>
    96bc:	103f971e 	bne	r2,zero,951c <__alt_data_end+0xfc00951c>
    96c0:	b9c00017 	ldw	r7,0(r23)
    96c4:	003e5706 	br	9024 <__alt_data_end+0xfc009024>
    96c8:	e00b883a 	mov	r5,fp
    96cc:	b009883a 	mov	r4,r22
    96d0:	00062a00 	call	62a0 <__srefill_r>
    96d4:	103f911e 	bne	r2,zero,951c <__alt_data_end+0xfc00951c>
    96d8:	b9c00017 	ldw	r7,0(r23)
    96dc:	05000084 	movi	r20,2
    96e0:	003e5606 	br	903c <__alt_data_end+0xfc00903c>
    96e4:	e00b883a 	mov	r5,fp
    96e8:	b009883a 	mov	r4,r22
    96ec:	00062a00 	call	62a0 <__srefill_r>
    96f0:	103ef726 	beq	r2,zero,92d0 <__alt_data_end+0xfc0092d0>
    96f4:	003f8906 	br	951c <__alt_data_end+0xfc00951c>
    96f8:	e00b883a 	mov	r5,fp
    96fc:	b009883a 	mov	r4,r22
    9700:	00062a00 	call	62a0 <__srefill_r>
    9704:	103f851e 	bne	r2,zero,951c <__alt_data_end+0xfc00951c>
    9708:	b9c00017 	ldw	r7,0(r23)
    970c:	003f0f06 	br	934c <__alt_data_end+0xfc00934c>
    9710:	014000c4 	movi	r5,3
    9714:	a1414a26 	beq	r20,r5,9c40 <__svfscanf_r+0x1014>
    9718:	01000104 	movi	r4,4
    971c:	a101f11e 	bne	r20,r4,9ee4 <__svfscanf_r+0x12b8>
    9720:	b009883a 	mov	r4,r22
    9724:	000cf200 	call	cf20 <_localeconv_r>
    9728:	10800017 	ldw	r2,0(r2)
    972c:	98ffffc4 	addi	r3,r19,-1
    9730:	d880a315 	stw	r2,652(sp)
    9734:	00805704 	movi	r2,348
    9738:	10c21e2e 	bgeu	r2,r3,9fb4 <__svfscanf_r+0x1388>
    973c:	9cffa8c4 	addi	r19,r19,-349
    9740:	dcc0a215 	stw	r19,648(sp)
    9744:	04c05744 	movi	r19,349
    9748:	8d01e014 	ori	r20,r17,1920
    974c:	0023883a 	mov	r17,zero
    9750:	dc000104 	addi	r16,sp,4
    9754:	8805883a 	mov	r2,r17
    9758:	0019883a 	mov	r12,zero
    975c:	8023883a 	mov	r17,r16
    9760:	b007883a 	mov	r3,r22
    9764:	9821883a 	mov	r16,r19
    9768:	002b883a 	mov	r21,zero
    976c:	d800a515 	stw	zero,660(sp)
    9770:	d800a415 	stw	zero,656(sp)
    9774:	d8009f15 	stw	zero,636(sp)
    9778:	01c01384 	movi	r7,78
    977c:	602d883a 	mov	r22,r12
    9780:	1027883a 	mov	r19,r2
    9784:	e1000017 	ldw	r4,0(fp)
    9788:	21400003 	ldbu	r5,0(r4)
    978c:	28bff544 	addi	r2,r5,-43
    9790:	10803fcc 	andi	r2,r2,255
    9794:	38810e36 	bltu	r7,r2,9bd0 <__svfscanf_r+0xfa4>
    9798:	100490ba 	slli	r2,r2,2
    979c:	01800074 	movhi	r6,1
    97a0:	31a5ec04 	addi	r6,r6,-26704
    97a4:	1185883a 	add	r2,r2,r6
    97a8:	10800017 	ldw	r2,0(r2)
    97ac:	1000683a 	jmp	r2
    97b0:	00009aa8 	cmpgeui	zero,zero,618
    97b4:	00009bd0 	cmplti	zero,zero,623
    97b8:	00009aa8 	cmpgeui	zero,zero,618
    97bc:	00009bd0 	cmplti	zero,zero,623
    97c0:	00009bd0 	cmplti	zero,zero,623
    97c4:	00009a7c 	xorhi	zero,zero,617
    97c8:	000098ec 	andhi	zero,zero,611
    97cc:	000098ec 	andhi	zero,zero,611
    97d0:	000098ec 	andhi	zero,zero,611
    97d4:	000098ec 	andhi	zero,zero,611
    97d8:	000098ec 	andhi	zero,zero,611
    97dc:	000098ec 	andhi	zero,zero,611
    97e0:	000098ec 	andhi	zero,zero,611
    97e4:	000098ec 	andhi	zero,zero,611
    97e8:	000098ec 	andhi	zero,zero,611
    97ec:	00009bd0 	cmplti	zero,zero,623
    97f0:	00009bd0 	cmplti	zero,zero,623
    97f4:	00009bd0 	cmplti	zero,zero,623
    97f8:	00009bd0 	cmplti	zero,zero,623
    97fc:	00009bd0 	cmplti	zero,zero,623
    9800:	00009bd0 	cmplti	zero,zero,623
    9804:	00009bd0 	cmplti	zero,zero,623
    9808:	00009bc0 	call	9bc <kingCapture+0x2fc>
    980c:	00009bd0 	cmplti	zero,zero,623
    9810:	00009bd0 	cmplti	zero,zero,623
    9814:	00009bd0 	cmplti	zero,zero,623
    9818:	00009b7c 	xorhi	zero,zero,621
    981c:	00009b60 	cmpeqi	zero,zero,621
    9820:	00009bd0 	cmplti	zero,zero,623
    9824:	00009bd0 	cmplti	zero,zero,623
    9828:	00009b2c 	andhi	zero,zero,620
    982c:	00009bd0 	cmplti	zero,zero,623
    9830:	00009bd0 	cmplti	zero,zero,623
    9834:	00009bd0 	cmplti	zero,zero,623
    9838:	00009bd0 	cmplti	zero,zero,623
    983c:	00009af4 	movhi	zero,619
    9840:	00009bd0 	cmplti	zero,zero,623
    9844:	00009bd0 	cmplti	zero,zero,623
    9848:	00009bd0 	cmplti	zero,zero,623
    984c:	00009bd0 	cmplti	zero,zero,623
    9850:	00009bd0 	cmplti	zero,zero,623
    9854:	00009ad8 	cmpnei	zero,zero,619
    9858:	00009bd0 	cmplti	zero,zero,623
    985c:	00009bd0 	cmplti	zero,zero,623
    9860:	00009bd0 	cmplti	zero,zero,623
    9864:	00009bd0 	cmplti	zero,zero,623
    9868:	00009abc 	xorhi	zero,zero,618
    986c:	00009bd0 	cmplti	zero,zero,623
    9870:	00009bd0 	cmplti	zero,zero,623
    9874:	00009bd0 	cmplti	zero,zero,623
    9878:	00009bd0 	cmplti	zero,zero,623
    987c:	00009bd0 	cmplti	zero,zero,623
    9880:	00009bd0 	cmplti	zero,zero,623
    9884:	00009bd0 	cmplti	zero,zero,623
    9888:	00009bc0 	call	9bc <kingCapture+0x2fc>
    988c:	00009bd0 	cmplti	zero,zero,623
    9890:	00009bd0 	cmplti	zero,zero,623
    9894:	00009bd0 	cmplti	zero,zero,623
    9898:	00009b7c 	xorhi	zero,zero,621
    989c:	00009b60 	cmpeqi	zero,zero,621
    98a0:	00009bd0 	cmplti	zero,zero,623
    98a4:	00009bd0 	cmplti	zero,zero,623
    98a8:	00009b2c 	andhi	zero,zero,620
    98ac:	00009bd0 	cmplti	zero,zero,623
    98b0:	00009bd0 	cmplti	zero,zero,623
    98b4:	00009bd0 	cmplti	zero,zero,623
    98b8:	00009bd0 	cmplti	zero,zero,623
    98bc:	00009af4 	movhi	zero,619
    98c0:	00009bd0 	cmplti	zero,zero,623
    98c4:	00009bd0 	cmplti	zero,zero,623
    98c8:	00009bd0 	cmplti	zero,zero,623
    98cc:	00009bd0 	cmplti	zero,zero,623
    98d0:	00009bd0 	cmplti	zero,zero,623
    98d4:	00009ad8 	cmpnei	zero,zero,619
    98d8:	00009bd0 	cmplti	zero,zero,623
    98dc:	00009bd0 	cmplti	zero,zero,623
    98e0:	00009bd0 	cmplti	zero,zero,623
    98e4:	00009bd0 	cmplti	zero,zero,623
    98e8:	00009abc 	xorhi	zero,zero,618
    98ec:	a8803fcc 	andi	r2,r21,255
    98f0:	1080201c 	xori	r2,r2,128
    98f4:	10bfe004 	addi	r2,r2,-128
    98f8:	b085883a 	add	r2,r22,r2
    98fc:	10000d1e 	bne	r2,zero,9934 <__svfscanf_r+0xd08>
    9900:	00bf9fc4 	movi	r2,-385
    9904:	a0a8703a 	and	r20,r20,r2
    9908:	89400005 	stb	r5,0(r17)
    990c:	8c400044 	addi	r17,r17,1
    9910:	e0800117 	ldw	r2,4(fp)
    9914:	843fffc4 	addi	r16,r16,-1
    9918:	94800044 	addi	r18,r18,1
    991c:	10bfffc4 	addi	r2,r2,-1
    9920:	e0800115 	stw	r2,4(fp)
    9924:	0080b40e 	bge	zero,r2,9bf8 <__svfscanf_r+0xfcc>
    9928:	21000044 	addi	r4,r4,1
    992c:	e1000015 	stw	r4,0(fp)
    9930:	803f941e 	bne	r16,zero,9784 <__alt_data_end+0xfc009784>
    9934:	8821883a 	mov	r16,r17
    9938:	b019883a 	mov	r12,r22
    993c:	9823883a 	mov	r17,r19
    9940:	182d883a 	mov	r22,r3
    9944:	9801961e 	bne	r19,zero,9fa0 <__svfscanf_r+0x1374>
    9948:	633fffc4 	addi	r12,r12,-1
    994c:	00800044 	movi	r2,1
    9950:	1302882e 	bgeu	r2,r12,a374 <__svfscanf_r+0x1748>
    9954:	a8803fcc 	andi	r2,r21,255
    9958:	1080201c 	xori	r2,r2,128
    995c:	10bfe004 	addi	r2,r2,-128
    9960:	113fffc4 	addi	r4,r2,-1
    9964:	01400184 	movi	r5,6
    9968:	29001136 	bltu	r5,r4,99b0 <__svfscanf_r+0xd84>
    996c:	01000084 	movi	r4,2
    9970:	2082900e 	bge	r4,r2,a3b4 <__svfscanf_r+0x1788>
    9974:	00c000c4 	movi	r3,3
    9978:	10c00d26 	beq	r2,r3,99b0 <__svfscanf_r+0xd84>
    997c:	9425c83a 	sub	r18,r18,r16
    9980:	1827883a 	mov	r19,r3
    9984:	843fffc4 	addi	r16,r16,-1
    9988:	81400007 	ldb	r5,0(r16)
    998c:	e00d883a 	mov	r6,fp
    9990:	b009883a 	mov	r4,r22
    9994:	0012bdc0 	call	12bdc <_ungetc_r>
    9998:	a8bfffc4 	addi	r2,r21,-1
    999c:	10c03fcc 	andi	r3,r2,255
    99a0:	8493883a 	add	r9,r16,r18
    99a4:	102b883a 	mov	r21,r2
    99a8:	98fff636 	bltu	r19,r3,9984 <__alt_data_end+0xfc009984>
    99ac:	4825883a 	mov	r18,r9
    99b0:	a080400c 	andi	r2,r20,256
    99b4:	10001426 	beq	r2,zero,9a08 <__svfscanf_r+0xddc>
    99b8:	a081000c 	andi	r2,r20,1024
    99bc:	1002571e 	bne	r2,zero,a31c <__svfscanf_r+0x16f0>
    99c0:	817fffc7 	ldb	r5,-1(r16)
    99c4:	00801944 	movi	r2,101
    99c8:	84ffffc4 	addi	r19,r16,-1
    99cc:	957fffc4 	addi	r21,r18,-1
    99d0:	28800826 	beq	r5,r2,99f4 <__svfscanf_r+0xdc8>
    99d4:	00801144 	movi	r2,69
    99d8:	28800626 	beq	r5,r2,99f4 <__svfscanf_r+0xdc8>
    99dc:	e00d883a 	mov	r6,fp
    99e0:	b009883a 	mov	r4,r22
    99e4:	0012bdc0 	call	12bdc <_ungetc_r>
    99e8:	817fff87 	ldb	r5,-2(r16)
    99ec:	84ffff84 	addi	r19,r16,-2
    99f0:	957fff84 	addi	r21,r18,-2
    99f4:	e00d883a 	mov	r6,fp
    99f8:	b009883a 	mov	r4,r22
    99fc:	0012bdc0 	call	12bdc <_ungetc_r>
    9a00:	a825883a 	mov	r18,r21
    9a04:	9821883a 	mov	r16,r19
    9a08:	a080040c 	andi	r2,r20,16
    9a0c:	103e891e 	bne	r2,zero,9434 <__alt_data_end+0xfc009434>
    9a10:	80000005 	stb	zero,0(r16)
    9a14:	a081800c 	andi	r2,r20,1536
    9a18:	01010004 	movi	r4,1024
    9a1c:	1101dd26 	beq	r2,r4,a194 <__svfscanf_r+0x1568>
    9a20:	da00a417 	ldw	r8,656(sp)
    9a24:	4001e71e 	bne	r8,zero,a1c4 <__svfscanf_r+0x1598>
    9a28:	000d883a 	mov	r6,zero
    9a2c:	d9400104 	addi	r5,sp,4
    9a30:	b009883a 	mov	r4,r22
    9a34:	000ea000 	call	ea00 <_strtod_r>
    9a38:	1021883a 	mov	r16,r2
    9a3c:	a080004c 	andi	r2,r20,1
    9a40:	1000021e 	bne	r2,zero,9a4c <__svfscanf_r+0xe20>
    9a44:	a2c0008c 	andi	r11,r20,2
    9a48:	5801e826 	beq	r11,zero,a1ec <__svfscanf_r+0x15c0>
    9a4c:	da009c17 	ldw	r8,624(sp)
    9a50:	40800017 	ldw	r2,0(r8)
    9a54:	42000104 	addi	r8,r8,4
    9a58:	da009c15 	stw	r8,624(sp)
    9a5c:	14000015 	stw	r16,0(r2)
    9a60:	10c00115 	stw	r3,4(r2)
    9a64:	da00a017 	ldw	r8,640(sp)
    9a68:	dd009d17 	ldw	r20,628(sp)
    9a6c:	42000044 	addi	r8,r8,1
    9a70:	da00a015 	stw	r8,640(sp)
    9a74:	a00d883a 	mov	r6,r20
    9a78:	003ca806 	br	8d1c <__alt_data_end+0xfc008d1c>
    9a7c:	a080400c 	andi	r2,r20,256
    9a80:	103f9a26 	beq	r2,zero,98ec <__alt_data_end+0xfc0098ec>
    9a84:	da00a217 	ldw	r8,648(sp)
    9a88:	00bfdfc4 	movi	r2,-129
    9a8c:	a0a8703a 	and	r20,r20,r2
    9a90:	9cc00044 	addi	r19,r19,1
    9a94:	403f9e26 	beq	r8,zero,9910 <__alt_data_end+0xfc009910>
    9a98:	423fffc4 	addi	r8,r8,-1
    9a9c:	da00a215 	stw	r8,648(sp)
    9aa0:	84000044 	addi	r16,r16,1
    9aa4:	003f9a06 	br	9910 <__alt_data_end+0xfc009910>
    9aa8:	a080200c 	andi	r2,r20,128
    9aac:	103fa126 	beq	r2,zero,9934 <__alt_data_end+0xfc009934>
    9ab0:	00bfdfc4 	movi	r2,-129
    9ab4:	a0a8703a 	and	r20,r20,r2
    9ab8:	003f9306 	br	9908 <__alt_data_end+0xfc009908>
    9abc:	a8803fcc 	andi	r2,r21,255
    9ac0:	1080201c 	xori	r2,r2,128
    9ac4:	10bfe004 	addi	r2,r2,-128
    9ac8:	020001c4 	movi	r8,7
    9acc:	123f991e 	bne	r2,r8,9934 <__alt_data_end+0xfc009934>
    9ad0:	05400204 	movi	r21,8
    9ad4:	003f8c06 	br	9908 <__alt_data_end+0xfc009908>
    9ad8:	a8803fcc 	andi	r2,r21,255
    9adc:	1080201c 	xori	r2,r2,128
    9ae0:	10bfe004 	addi	r2,r2,-128
    9ae4:	01800184 	movi	r6,6
    9ae8:	11bf921e 	bne	r2,r6,9934 <__alt_data_end+0xfc009934>
    9aec:	054001c4 	movi	r21,7
    9af0:	003f8506 	br	9908 <__alt_data_end+0xfc009908>
    9af4:	b000491e 	bne	r22,zero,9c1c <__svfscanf_r+0xff0>
    9af8:	9800031e 	bne	r19,zero,9b08 <__svfscanf_r+0xedc>
    9afc:	a081c00c 	andi	r2,r20,1792
    9b00:	0181c004 	movi	r6,1792
    9b04:	11819f26 	beq	r2,r6,a184 <__svfscanf_r+0x1558>
    9b08:	a8803fcc 	andi	r2,r21,255
    9b0c:	1080201c 	xori	r2,r2,128
    9b10:	10bfe004 	addi	r2,r2,-128
    9b14:	01800044 	movi	r6,1
    9b18:	11800226 	beq	r2,r6,9b24 <__svfscanf_r+0xef8>
    9b1c:	01800104 	movi	r6,4
    9b20:	11bf841e 	bne	r2,r6,9934 <__alt_data_end+0xfc009934>
    9b24:	ad400044 	addi	r21,r21,1
    9b28:	003f7706 	br	9908 <__alt_data_end+0xfc009908>
    9b2c:	a8803fcc 	andi	r2,r21,255
    9b30:	1080201c 	xori	r2,r2,128
    9b34:	10bfe004 	addi	r2,r2,-128
    9b38:	10003c1e 	bne	r2,zero,9c2c <__svfscanf_r+0x1000>
    9b3c:	9801141e 	bne	r19,zero,9f90 <__svfscanf_r+0x1364>
    9b40:	a081c00c 	andi	r2,r20,1792
    9b44:	0181c004 	movi	r6,1792
    9b48:	11818226 	beq	r2,r6,a154 <__svfscanf_r+0x1528>
    9b4c:	8821883a 	mov	r16,r17
    9b50:	b019883a 	mov	r12,r22
    9b54:	9823883a 	mov	r17,r19
    9b58:	182d883a 	mov	r22,r3
    9b5c:	003f7a06 	br	9948 <__alt_data_end+0xfc009948>
    9b60:	a8803fcc 	andi	r2,r21,255
    9b64:	1080201c 	xori	r2,r2,128
    9b68:	10bfe004 	addi	r2,r2,-128
    9b6c:	01800084 	movi	r6,2
    9b70:	11bf701e 	bne	r2,r6,9934 <__alt_data_end+0xfc009934>
    9b74:	054000c4 	movi	r21,3
    9b78:	003f6306 	br	9908 <__alt_data_end+0xfc009908>
    9b7c:	a081400c 	andi	r2,r20,1280
    9b80:	01810004 	movi	r6,1024
    9b84:	11800326 	beq	r2,r6,9b94 <__svfscanf_r+0xf68>
    9b88:	a184703a 	and	r2,r20,r6
    9b8c:	103f6926 	beq	r2,zero,9934 <__alt_data_end+0xfc009934>
    9b90:	983fee26 	beq	r19,zero,9b4c <__alt_data_end+0xfc009b4c>
    9b94:	a080800c 	andi	r2,r20,512
    9b98:	1000041e 	bne	r2,zero,9bac <__svfscanf_r+0xf80>
    9b9c:	da009f17 	ldw	r8,636(sp)
    9ba0:	dc40a515 	stw	r17,660(sp)
    9ba4:	9a27c83a 	sub	r19,r19,r8
    9ba8:	dcc0a415 	stw	r19,656(sp)
    9bac:	00be1fc4 	movi	r2,-1921
    9bb0:	a0a8703a 	and	r20,r20,r2
    9bb4:	a5006014 	ori	r20,r20,384
    9bb8:	0027883a 	mov	r19,zero
    9bbc:	003f5206 	br	9908 <__alt_data_end+0xfc009908>
    9bc0:	00800044 	movi	r2,1
    9bc4:	b0bf5b1e 	bne	r22,r2,9934 <__alt_data_end+0xfc009934>
    9bc8:	05800084 	movi	r22,2
    9bcc:	003f4e06 	br	9908 <__alt_data_end+0xfc009908>
    9bd0:	d980a317 	ldw	r6,652(sp)
    9bd4:	30800003 	ldbu	r2,0(r6)
    9bd8:	29803fcc 	andi	r6,r5,255
    9bdc:	30bf551e 	bne	r6,r2,9934 <__alt_data_end+0xfc009934>
    9be0:	a080800c 	andi	r2,r20,512
    9be4:	103f5326 	beq	r2,zero,9934 <__alt_data_end+0xfc009934>
    9be8:	023f5fc4 	movi	r8,-641
    9bec:	a228703a 	and	r20,r20,r8
    9bf0:	dcc09f15 	stw	r19,636(sp)
    9bf4:	003f4406 	br	9908 <__alt_data_end+0xfc009908>
    9bf8:	1809883a 	mov	r4,r3
    9bfc:	e00b883a 	mov	r5,fp
    9c00:	d8c0a615 	stw	r3,664(sp)
    9c04:	d9c0aa15 	stw	r7,680(sp)
    9c08:	00062a00 	call	62a0 <__srefill_r>
    9c0c:	d8c0a617 	ldw	r3,664(sp)
    9c10:	d9c0aa17 	ldw	r7,680(sp)
    9c14:	103f4626 	beq	r2,zero,9930 <__alt_data_end+0xfc009930>
    9c18:	003f4606 	br	9934 <__alt_data_end+0xfc009934>
    9c1c:	00800084 	movi	r2,2
    9c20:	b0bfb91e 	bne	r22,r2,9b08 <__alt_data_end+0xfc009b08>
    9c24:	058000c4 	movi	r22,3
    9c28:	003f3706 	br	9908 <__alt_data_end+0xfc009908>
    9c2c:	018000c4 	movi	r6,3
    9c30:	11bfbc26 	beq	r2,r6,9b24 <__alt_data_end+0xfc009b24>
    9c34:	01800144 	movi	r6,5
    9c38:	11bfba26 	beq	r2,r6,9b24 <__alt_data_end+0xfc009b24>
    9c3c:	003f3d06 	br	9934 <__alt_data_end+0xfc009934>
    9c40:	98bfffc4 	addi	r2,r19,-1
    9c44:	01405704 	movi	r5,348
    9c48:	2880d82e 	bgeu	r5,r2,9fac <__svfscanf_r+0x1380>
    9c4c:	99ffa8c4 	addi	r7,r19,-349
    9c50:	04c05744 	movi	r19,349
    9c54:	8c436014 	ori	r17,r17,3456
    9c58:	9013883a 	mov	r9,r18
    9c5c:	8825883a 	mov	r18,r17
    9c60:	dc409e17 	ldw	r17,632(sp)
    9c64:	0029883a 	mov	r20,zero
    9c68:	dc000104 	addi	r16,sp,4
    9c6c:	05401344 	movi	r21,77
    9c70:	02c08004 	movi	r11,512
    9c74:	01bf7fc4 	movi	r6,-513
    9c78:	023fdfc4 	movi	r8,-129
    9c7c:	20bff544 	addi	r2,r4,-43
    9c80:	10803fcc 	andi	r2,r2,255
    9c84:	a8807236 	bltu	r21,r2,9e50 <__svfscanf_r+0x1224>
    9c88:	100490ba 	slli	r2,r2,2
    9c8c:	01400074 	movhi	r5,1
    9c90:	29672804 	addi	r5,r5,-25440
    9c94:	1145883a 	add	r2,r2,r5
    9c98:	10800017 	ldw	r2,0(r2)
    9c9c:	1000683a 	jmp	r2
    9ca0:	00009ed4 	movui	zero,635
    9ca4:	00009e50 	cmplti	zero,zero,633
    9ca8:	00009ed4 	movui	zero,635
    9cac:	00009e50 	cmplti	zero,zero,633
    9cb0:	00009e50 	cmplti	zero,zero,633
    9cb4:	00009eac 	andhi	zero,zero,634
    9cb8:	00009e8c 	andi	zero,zero,634
    9cbc:	00009e8c 	andi	zero,zero,634
    9cc0:	00009e8c 	andi	zero,zero,634
    9cc4:	00009e8c 	andi	zero,zero,634
    9cc8:	00009e8c 	andi	zero,zero,634
    9ccc:	00009e8c 	andi	zero,zero,634
    9cd0:	00009e8c 	andi	zero,zero,634
    9cd4:	00009e34 	movhi	zero,632
    9cd8:	00009e34 	movhi	zero,632
    9cdc:	00009e50 	cmplti	zero,zero,633
    9ce0:	00009e50 	cmplti	zero,zero,633
    9ce4:	00009e50 	cmplti	zero,zero,633
    9ce8:	00009e50 	cmplti	zero,zero,633
    9cec:	00009e50 	cmplti	zero,zero,633
    9cf0:	00009e50 	cmplti	zero,zero,633
    9cf4:	00009e50 	cmplti	zero,zero,633
    9cf8:	00009e20 	cmpeqi	zero,zero,632
    9cfc:	00009e20 	cmpeqi	zero,zero,632
    9d00:	00009e20 	cmpeqi	zero,zero,632
    9d04:	00009e20 	cmpeqi	zero,zero,632
    9d08:	00009e20 	cmpeqi	zero,zero,632
    9d0c:	00009e20 	cmpeqi	zero,zero,632
    9d10:	00009e50 	cmplti	zero,zero,633
    9d14:	00009e50 	cmplti	zero,zero,633
    9d18:	00009e50 	cmplti	zero,zero,633
    9d1c:	00009e50 	cmplti	zero,zero,633
    9d20:	00009e50 	cmplti	zero,zero,633
    9d24:	00009e50 	cmplti	zero,zero,633
    9d28:	00009e50 	cmplti	zero,zero,633
    9d2c:	00009e50 	cmplti	zero,zero,633
    9d30:	00009e50 	cmplti	zero,zero,633
    9d34:	00009e50 	cmplti	zero,zero,633
    9d38:	00009e50 	cmplti	zero,zero,633
    9d3c:	00009e50 	cmplti	zero,zero,633
    9d40:	00009e50 	cmplti	zero,zero,633
    9d44:	00009e50 	cmplti	zero,zero,633
    9d48:	00009e50 	cmplti	zero,zero,633
    9d4c:	00009e50 	cmplti	zero,zero,633
    9d50:	00009e50 	cmplti	zero,zero,633
    9d54:	00009dd8 	cmpnei	zero,zero,631
    9d58:	00009e50 	cmplti	zero,zero,633
    9d5c:	00009e50 	cmplti	zero,zero,633
    9d60:	00009e50 	cmplti	zero,zero,633
    9d64:	00009e50 	cmplti	zero,zero,633
    9d68:	00009e50 	cmplti	zero,zero,633
    9d6c:	00009e50 	cmplti	zero,zero,633
    9d70:	00009e50 	cmplti	zero,zero,633
    9d74:	00009e50 	cmplti	zero,zero,633
    9d78:	00009e20 	cmpeqi	zero,zero,632
    9d7c:	00009e20 	cmpeqi	zero,zero,632
    9d80:	00009e20 	cmpeqi	zero,zero,632
    9d84:	00009e20 	cmpeqi	zero,zero,632
    9d88:	00009e20 	cmpeqi	zero,zero,632
    9d8c:	00009e20 	cmpeqi	zero,zero,632
    9d90:	00009e50 	cmplti	zero,zero,633
    9d94:	00009e50 	cmplti	zero,zero,633
    9d98:	00009e50 	cmplti	zero,zero,633
    9d9c:	00009e50 	cmplti	zero,zero,633
    9da0:	00009e50 	cmplti	zero,zero,633
    9da4:	00009e50 	cmplti	zero,zero,633
    9da8:	00009e50 	cmplti	zero,zero,633
    9dac:	00009e50 	cmplti	zero,zero,633
    9db0:	00009e50 	cmplti	zero,zero,633
    9db4:	00009e50 	cmplti	zero,zero,633
    9db8:	00009e50 	cmplti	zero,zero,633
    9dbc:	00009e50 	cmplti	zero,zero,633
    9dc0:	00009e50 	cmplti	zero,zero,633
    9dc4:	00009e50 	cmplti	zero,zero,633
    9dc8:	00009e50 	cmplti	zero,zero,633
    9dcc:	00009e50 	cmplti	zero,zero,633
    9dd0:	00009e50 	cmplti	zero,zero,633
    9dd4:	00009dd8 	cmpnei	zero,zero,631
    9dd8:	9081800c 	andi	r2,r18,1536
    9ddc:	12c01c1e 	bne	r2,r11,9e50 <__svfscanf_r+0x1224>
    9de0:	91a4703a 	and	r18,r18,r6
    9de4:	94814014 	ori	r18,r18,1280
    9de8:	04400404 	movi	r17,16
    9dec:	81000005 	stb	r4,0(r16)
    9df0:	84000044 	addi	r16,r16,1
    9df4:	e0800117 	ldw	r2,4(fp)
    9df8:	10bfffc4 	addi	r2,r2,-1
    9dfc:	e0800115 	stw	r2,4(fp)
    9e00:	0080540e 	bge	zero,r2,9f54 <__svfscanf_r+0x1328>
    9e04:	18c00044 	addi	r3,r3,1
    9e08:	e0c00015 	stw	r3,0(fp)
    9e0c:	9cffffc4 	addi	r19,r19,-1
    9e10:	98000f26 	beq	r19,zero,9e50 <__svfscanf_r+0x1224>
    9e14:	e0c00017 	ldw	r3,0(fp)
    9e18:	19000003 	ldbu	r4,0(r3)
    9e1c:	003f9706 	br	9c7c <__alt_data_end+0xfc009c7c>
    9e20:	00800284 	movi	r2,10
    9e24:	14400a0e 	bge	r2,r17,9e50 <__svfscanf_r+0x1224>
    9e28:	00bd1fc4 	movi	r2,-2945
    9e2c:	90a4703a 	and	r18,r18,r2
    9e30:	003fee06 	br	9dec <__alt_data_end+0xfc009dec>
    9e34:	014000b4 	movhi	r5,2
    9e38:	8c63883a 	add	r17,r17,r17
    9e3c:	29554b84 	addi	r5,r5,21806
    9e40:	2c45883a 	add	r2,r5,r17
    9e44:	1440000f 	ldh	r17,0(r2)
    9e48:	00800204 	movi	r2,8
    9e4c:	147ff616 	blt	r2,r17,9e28 <__alt_data_end+0xfc009e28>
    9e50:	dc409e15 	stw	r17,632(sp)
    9e54:	9023883a 	mov	r17,r18
    9e58:	8880400c 	andi	r2,r17,256
    9e5c:	4825883a 	mov	r18,r9
    9e60:	10000426 	beq	r2,zero,9e74 <__svfscanf_r+0x1248>
    9e64:	d9800104 	addi	r6,sp,4
    9e68:	3400be36 	bltu	r6,r16,a164 <__svfscanf_r+0x1538>
    9e6c:	da000104 	addi	r8,sp,4
    9e70:	443bae26 	beq	r8,r16,8d2c <__alt_data_end+0xfc008d2c>
    9e74:	8880040c 	andi	r2,r17,16
    9e78:	10009326 	beq	r2,zero,a0c8 <__svfscanf_r+0x149c>
    9e7c:	d8800104 	addi	r2,sp,4
    9e80:	80a1c83a 	sub	r16,r16,r2
    9e84:	8521883a 	add	r16,r16,r20
    9e88:	003d0606 	br	92a4 <__alt_data_end+0xfc0092a4>
    9e8c:	014000b4 	movhi	r5,2
    9e90:	8c63883a 	add	r17,r17,r17
    9e94:	29554b84 	addi	r5,r5,21806
    9e98:	2c45883a 	add	r2,r5,r17
    9e9c:	1440000f 	ldh	r17,0(r2)
    9ea0:	00bd1fc4 	movi	r2,-2945
    9ea4:	90a4703a 	and	r18,r18,r2
    9ea8:	003fd006 	br	9dec <__alt_data_end+0xfc009dec>
    9eac:	9082000c 	andi	r2,r18,2048
    9eb0:	103fce26 	beq	r2,zero,9dec <__alt_data_end+0xfc009dec>
    9eb4:	8800021e 	bne	r17,zero,9ec0 <__svfscanf_r+0x1294>
    9eb8:	94808014 	ori	r18,r18,512
    9ebc:	04400204 	movi	r17,8
    9ec0:	9081000c 	andi	r2,r18,1024
    9ec4:	10009426 	beq	r2,zero,a118 <__svfscanf_r+0x14ec>
    9ec8:	00be9fc4 	movi	r2,-1409
    9ecc:	90a4703a 	and	r18,r18,r2
    9ed0:	003fc606 	br	9dec <__alt_data_end+0xfc009dec>
    9ed4:	9080200c 	andi	r2,r18,128
    9ed8:	103fdd26 	beq	r2,zero,9e50 <__alt_data_end+0xfc009e50>
    9edc:	9224703a 	and	r18,r18,r8
    9ee0:	003fc206 	br	9dec <__alt_data_end+0xfc009dec>
    9ee4:	9800011e 	bne	r19,zero,9eec <__svfscanf_r+0x12c0>
    9ee8:	04ffffc4 	movi	r19,-1
    9eec:	8900004c 	andi	r4,r17,1
    9ef0:	20005b1e 	bne	r4,zero,a060 <__svfscanf_r+0x1434>
    9ef4:	8c40040c 	andi	r17,r17,16
    9ef8:	88003026 	beq	r17,zero,9fbc <__svfscanf_r+0x1390>
    9efc:	0021883a 	mov	r16,zero
    9f00:	00000306 	br	9f10 <__svfscanf_r+0x12e4>
    9f04:	18800003 	ldbu	r2,0(r3)
    9f08:	3885883a 	add	r2,r7,r2
    9f0c:	10800043 	ldbu	r2,1(r2)
    9f10:	1080020c 	andi	r2,r2,8
    9f14:	103ce31e 	bne	r2,zero,92a4 <__alt_data_end+0xfc0092a4>
    9f18:	e0800117 	ldw	r2,4(fp)
    9f1c:	18c00044 	addi	r3,r3,1
    9f20:	84000044 	addi	r16,r16,1
    9f24:	10bfffc4 	addi	r2,r2,-1
    9f28:	e0800115 	stw	r2,4(fp)
    9f2c:	e0c00015 	stw	r3,0(fp)
    9f30:	84fcdc26 	beq	r16,r19,92a4 <__alt_data_end+0xfc0092a4>
    9f34:	00bff316 	blt	zero,r2,9f04 <__alt_data_end+0xfc009f04>
    9f38:	e00b883a 	mov	r5,fp
    9f3c:	b009883a 	mov	r4,r22
    9f40:	00062a00 	call	62a0 <__srefill_r>
    9f44:	103cd71e 	bne	r2,zero,92a4 <__alt_data_end+0xfc0092a4>
    9f48:	b9c00017 	ldw	r7,0(r23)
    9f4c:	e0c00017 	ldw	r3,0(fp)
    9f50:	003fec06 	br	9f04 <__alt_data_end+0xfc009f04>
    9f54:	e00b883a 	mov	r5,fp
    9f58:	b009883a 	mov	r4,r22
    9f5c:	d980a715 	stw	r6,668(sp)
    9f60:	d9c0aa15 	stw	r7,680(sp)
    9f64:	da00a815 	stw	r8,672(sp)
    9f68:	da40a915 	stw	r9,676(sp)
    9f6c:	dac0a615 	stw	r11,664(sp)
    9f70:	00062a00 	call	62a0 <__srefill_r>
    9f74:	d980a717 	ldw	r6,668(sp)
    9f78:	d9c0aa17 	ldw	r7,680(sp)
    9f7c:	da00a817 	ldw	r8,672(sp)
    9f80:	da40a917 	ldw	r9,676(sp)
    9f84:	dac0a617 	ldw	r11,664(sp)
    9f88:	103fa026 	beq	r2,zero,9e0c <__alt_data_end+0xfc009e0c>
    9f8c:	003fb006 	br	9e50 <__alt_data_end+0xfc009e50>
    9f90:	8821883a 	mov	r16,r17
    9f94:	b019883a 	mov	r12,r22
    9f98:	9823883a 	mov	r17,r19
    9f9c:	182d883a 	mov	r22,r3
    9fa0:	00bfbfc4 	movi	r2,-257
    9fa4:	a0a8703a 	and	r20,r20,r2
    9fa8:	003e6706 	br	9948 <__alt_data_end+0xfc009948>
    9fac:	000f883a 	mov	r7,zero
    9fb0:	003f2806 	br	9c54 <__alt_data_end+0xfc009c54>
    9fb4:	d800a215 	stw	zero,648(sp)
    9fb8:	003de306 	br	9748 <__alt_data_end+0xfc009748>
    9fbc:	da009c17 	ldw	r8,624(sp)
    9fc0:	9abfffc4 	addi	r10,r19,-1
    9fc4:	44400017 	ldw	r17,0(r8)
    9fc8:	44000104 	addi	r16,r8,4
    9fcc:	880b883a 	mov	r5,r17
    9fd0:	8aa9883a 	add	r20,r17,r10
    9fd4:	00000606 	br	9ff0 <__svfscanf_r+0x13c4>
    9fd8:	e0c00017 	ldw	r3,0(fp)
    9fdc:	b9000017 	ldw	r4,0(r23)
    9fe0:	a80b883a 	mov	r5,r21
    9fe4:	18800003 	ldbu	r2,0(r3)
    9fe8:	2085883a 	add	r2,r4,r2
    9fec:	10800043 	ldbu	r2,1(r2)
    9ff0:	1080020c 	andi	r2,r2,8
    9ff4:	1000551e 	bne	r2,zero,a14c <__svfscanf_r+0x1520>
    9ff8:	e0800117 	ldw	r2,4(fp)
    9ffc:	19000044 	addi	r4,r3,1
    a000:	e1000015 	stw	r4,0(fp)
    a004:	10bfffc4 	addi	r2,r2,-1
    a008:	e0800115 	stw	r2,4(fp)
    a00c:	18800003 	ldbu	r2,0(r3)
    a010:	2d400044 	addi	r21,r5,1
    a014:	a827883a 	mov	r19,r21
    a018:	28800005 	stb	r2,0(r5)
    a01c:	2d000626 	beq	r5,r20,a038 <__svfscanf_r+0x140c>
    a020:	e0800117 	ldw	r2,4(fp)
    a024:	00bfec16 	blt	zero,r2,9fd8 <__alt_data_end+0xfc009fd8>
    a028:	e00b883a 	mov	r5,fp
    a02c:	b009883a 	mov	r4,r22
    a030:	00062a00 	call	62a0 <__srefill_r>
    a034:	103fe826 	beq	r2,zero,9fd8 <__alt_data_end+0xfc009fd8>
    a038:	da00a017 	ldw	r8,640(sp)
    a03c:	dd009d17 	ldw	r20,628(sp)
    a040:	9c63c83a 	sub	r17,r19,r17
    a044:	42000044 	addi	r8,r8,1
    a048:	98000005 	stb	zero,0(r19)
    a04c:	9465883a 	add	r18,r18,r17
    a050:	da00a015 	stw	r8,640(sp)
    a054:	dc009c15 	stw	r16,624(sp)
    a058:	a00d883a 	mov	r6,r20
    a05c:	003b2f06 	br	8d1c <__alt_data_end+0xfc008d1c>
    a060:	dd409904 	addi	r21,sp,612
    a064:	8c40040c 	andi	r17,r17,16
    a068:	01800204 	movi	r6,8
    a06c:	000b883a 	mov	r5,zero
    a070:	a809883a 	mov	r4,r21
    a074:	0005a800 	call	5a80 <memset>
    a078:	8800401e 	bne	r17,zero,a17c <__svfscanf_r+0x1550>
    a07c:	da009c17 	ldw	r8,624(sp)
    a080:	45000017 	ldw	r20,0(r8)
    a084:	42000104 	addi	r8,r8,4
    a088:	da009c15 	stw	r8,624(sp)
    a08c:	000d883a 	mov	r6,zero
    a090:	3021883a 	mov	r16,r6
    a094:	dc409f15 	stw	r17,636(sp)
    a098:	e0800017 	ldw	r2,0(fp)
    a09c:	b8c00017 	ldw	r3,0(r23)
    a0a0:	10800003 	ldbu	r2,0(r2)
    a0a4:	1885883a 	add	r2,r3,r2
    a0a8:	10800043 	ldbu	r2,1(r2)
    a0ac:	1080020c 	andi	r2,r2,8
    a0b0:	1000011e 	bne	r2,zero,a0b8 <__svfscanf_r+0x148c>
    a0b4:	9800701e 	bne	r19,zero,a278 <__svfscanf_r+0x164c>
    a0b8:	dc409f17 	ldw	r17,636(sp)
    a0bc:	883cdd1e 	bne	r17,zero,9434 <__alt_data_end+0xfc009434>
    a0c0:	a0000015 	stw	zero,0(r20)
    a0c4:	003cd806 	br	9428 <__alt_data_end+0xfc009428>
    a0c8:	d9c09e17 	ldw	r7,632(sp)
    a0cc:	da00a117 	ldw	r8,644(sp)
    a0d0:	000d883a 	mov	r6,zero
    a0d4:	d9400104 	addi	r5,sp,4
    a0d8:	b009883a 	mov	r4,r22
    a0dc:	80000005 	stb	zero,0(r16)
    a0e0:	403ee83a 	callr	r8
    a0e4:	88c0080c 	andi	r3,r17,32
    a0e8:	1800121e 	bne	r3,zero,a134 <__svfscanf_r+0x1508>
    a0ec:	88c0010c 	andi	r3,r17,4
    a0f0:	18004d26 	beq	r3,zero,a228 <__svfscanf_r+0x15fc>
    a0f4:	da009c17 	ldw	r8,624(sp)
    a0f8:	40c00017 	ldw	r3,0(r8)
    a0fc:	42000104 	addi	r8,r8,4
    a100:	da009c15 	stw	r8,624(sp)
    a104:	1880000d 	sth	r2,0(r3)
    a108:	da00a017 	ldw	r8,640(sp)
    a10c:	42000044 	addi	r8,r8,1
    a110:	da00a015 	stw	r8,640(sp)
    a114:	003f5906 	br	9e7c <__alt_data_end+0xfc009e7c>
    a118:	00bf1fc4 	movi	r2,-897
    a11c:	90a4703a 	and	r18,r18,r2
    a120:	38000226 	beq	r7,zero,a12c <__svfscanf_r+0x1500>
    a124:	39ffffc4 	addi	r7,r7,-1
    a128:	9cc00044 	addi	r19,r19,1
    a12c:	a5000044 	addi	r20,r20,1
    a130:	003f3006 	br	9df4 <__alt_data_end+0xfc009df4>
    a134:	da009c17 	ldw	r8,624(sp)
    a138:	40c00017 	ldw	r3,0(r8)
    a13c:	42000104 	addi	r8,r8,4
    a140:	da009c15 	stw	r8,624(sp)
    a144:	18800015 	stw	r2,0(r3)
    a148:	003fef06 	br	a108 <__alt_data_end+0xfc00a108>
    a14c:	2827883a 	mov	r19,r5
    a150:	003fb906 	br	a038 <__alt_data_end+0xfc00a038>
    a154:	01be1fc4 	movi	r6,-1921
    a158:	a1a8703a 	and	r20,r20,r6
    a15c:	05400044 	movi	r21,1
    a160:	003de906 	br	9908 <__alt_data_end+0xfc009908>
    a164:	817fffc7 	ldb	r5,-1(r16)
    a168:	e00d883a 	mov	r6,fp
    a16c:	b009883a 	mov	r4,r22
    a170:	843fffc4 	addi	r16,r16,-1
    a174:	0012bdc0 	call	12bdc <_ungetc_r>
    a178:	003f3c06 	br	9e6c <__alt_data_end+0xfc009e6c>
    a17c:	dd009b04 	addi	r20,sp,620
    a180:	003fc206 	br	a08c <__alt_data_end+0xfc00a08c>
    a184:	00be1fc4 	movi	r2,-1921
    a188:	a0a8703a 	and	r20,r20,r2
    a18c:	05800044 	movi	r22,1
    a190:	003ddd06 	br	9908 <__alt_data_end+0xfc009908>
    a194:	d8c09f17 	ldw	r3,636(sp)
    a198:	88e3c83a 	sub	r17,r17,r3
    a19c:	044dc83a 	sub	r6,zero,r17
    a1a0:	883e2126 	beq	r17,zero,9a28 <__alt_data_end+0xfc009a28>
    a1a4:	d88055c4 	addi	r2,sp,343
    a1a8:	80800136 	bltu	r16,r2,a1b0 <__svfscanf_r+0x1584>
    a1ac:	dc005584 	addi	r16,sp,342
    a1b0:	014000b4 	movhi	r5,2
    a1b4:	29554a04 	addi	r5,r5,21800
    a1b8:	8009883a 	mov	r4,r16
    a1bc:	000e8540 	call	e854 <sprintf>
    a1c0:	003e1906 	br	9a28 <__alt_data_end+0xfc009a28>
    a1c4:	d8c0a517 	ldw	r3,660(sp)
    a1c8:	000d883a 	mov	r6,zero
    a1cc:	01c00284 	movi	r7,10
    a1d0:	19400044 	addi	r5,r3,1
    a1d4:	b009883a 	mov	r4,r22
    a1d8:	00067080 	call	6708 <_strtol_r>
    a1dc:	da00a417 	ldw	r8,656(sp)
    a1e0:	dc00a517 	ldw	r16,660(sp)
    a1e4:	120dc83a 	sub	r6,r2,r8
    a1e8:	003fee06 	br	a1a4 <__alt_data_end+0xfc00a1a4>
    a1ec:	da009c17 	ldw	r8,624(sp)
    a1f0:	180b883a 	mov	r5,r3
    a1f4:	8009883a 	mov	r4,r16
    a1f8:	45000017 	ldw	r20,0(r8)
    a1fc:	44400104 	addi	r17,r8,4
    a200:	d8c0a615 	stw	r3,664(sp)
    a204:	000e6b00 	call	e6b0 <__fpclassifyd>
    a208:	d8c0a617 	ldw	r3,664(sp)
    a20c:	10006426 	beq	r2,zero,a3a0 <__svfscanf_r+0x1774>
    a210:	8009883a 	mov	r4,r16
    a214:	180b883a 	mov	r5,r3
    a218:	0019fcc0 	call	19fcc <__truncdfsf2>
    a21c:	a0800015 	stw	r2,0(r20)
    a220:	dc409c15 	stw	r17,624(sp)
    a224:	003e0f06 	br	9a64 <__alt_data_end+0xfc009a64>
    a228:	88c0004c 	andi	r3,r17,1
    a22c:	183fc11e 	bne	r3,zero,a134 <__alt_data_end+0xfc00a134>
    a230:	8c40008c 	andi	r17,r17,2
    a234:	883fbf26 	beq	r17,zero,a134 <__alt_data_end+0xfc00a134>
    a238:	da00a117 	ldw	r8,644(sp)
    a23c:	00800074 	movhi	r2,1
    a240:	1080fc04 	addi	r2,r2,1008
    a244:	d9c09e17 	ldw	r7,632(sp)
    a248:	000d883a 	mov	r6,zero
    a24c:	d9400104 	addi	r5,sp,4
    a250:	b009883a 	mov	r4,r22
    a254:	40806226 	beq	r8,r2,a3e0 <__svfscanf_r+0x17b4>
    a258:	00101100 	call	10110 <_strtoll_r>
    a25c:	da009c17 	ldw	r8,624(sp)
    a260:	41000017 	ldw	r4,0(r8)
    a264:	42000104 	addi	r8,r8,4
    a268:	da009c15 	stw	r8,624(sp)
    a26c:	20800015 	stw	r2,0(r4)
    a270:	20c00115 	stw	r3,4(r4)
    a274:	003fa406 	br	a108 <__alt_data_end+0xfc00a108>
    a278:	000cefc0 	call	cefc <__locale_mb_cur_max>
    a27c:	80bca726 	beq	r16,r2,951c <__alt_data_end+0xfc00951c>
    a280:	e0800017 	ldw	r2,0(fp)
    a284:	e1000117 	ldw	r4,4(fp)
    a288:	d8c00104 	addi	r3,sp,4
    a28c:	12000003 	ldbu	r8,0(r2)
    a290:	213fffc4 	addi	r4,r4,-1
    a294:	10800044 	addi	r2,r2,1
    a298:	e1000115 	stw	r4,4(fp)
    a29c:	e0800015 	stw	r2,0(fp)
    a2a0:	84400044 	addi	r17,r16,1
    a2a4:	dd400015 	stw	r21,0(sp)
    a2a8:	1c21883a 	add	r16,r3,r16
    a2ac:	b009883a 	mov	r4,r22
    a2b0:	880f883a 	mov	r7,r17
    a2b4:	180d883a 	mov	r6,r3
    a2b8:	a00b883a 	mov	r5,r20
    a2bc:	82000005 	stb	r8,0(r16)
    a2c0:	000d16c0 	call	d16c <_mbrtowc_r>
    a2c4:	013fffc4 	movi	r4,-1
    a2c8:	113c9426 	beq	r2,r4,951c <__alt_data_end+0xfc00951c>
    a2cc:	103c881e 	bne	r2,zero,94f0 <__alt_data_end+0xfc0094f0>
    a2d0:	a0000015 	stw	zero,0(r20)
    a2d4:	0009883a 	mov	r4,zero
    a2d8:	000ce440 	call	ce44 <iswspace>
    a2dc:	10001a26 	beq	r2,zero,a348 <__svfscanf_r+0x171c>
    a2e0:	8821883a 	mov	r16,r17
    a2e4:	dc409f17 	ldw	r17,636(sp)
    a2e8:	803f7426 	beq	r16,zero,a0bc <__alt_data_end+0xfc00a0bc>
    a2ec:	843fffc4 	addi	r16,r16,-1
    a2f0:	d9800104 	addi	r6,sp,4
    a2f4:	342b883a 	add	r21,r6,r16
    a2f8:	00000106 	br	a300 <__svfscanf_r+0x16d4>
    a2fc:	843fffc4 	addi	r16,r16,-1
    a300:	a9400003 	ldbu	r5,0(r21)
    a304:	e00d883a 	mov	r6,fp
    a308:	b009883a 	mov	r4,r22
    a30c:	0012bdc0 	call	12bdc <_ungetc_r>
    a310:	ad7fffc4 	addi	r21,r21,-1
    a314:	803ff91e 	bne	r16,zero,a2fc <__alt_data_end+0xfc00a2fc>
    a318:	003f6806 	br	a0bc <__alt_data_end+0xfc00a0bc>
    a31c:	d9800104 	addi	r6,sp,4
    a320:	802b883a 	mov	r21,r16
    a324:	343a812e 	bgeu	r6,r16,8d2c <__alt_data_end+0xfc008d2c>
    a328:	ad7fffc4 	addi	r21,r21,-1
    a32c:	a9400007 	ldb	r5,0(r21)
    a330:	e00d883a 	mov	r6,fp
    a334:	b009883a 	mov	r4,r22
    a338:	0012bdc0 	call	12bdc <_ungetc_r>
    a33c:	da000104 	addi	r8,sp,4
    a340:	457ff91e 	bne	r8,r21,a328 <__alt_data_end+0xfc00a328>
    a344:	003a7906 	br	8d2c <__alt_data_end+0xfc008d2c>
    a348:	da009f17 	ldw	r8,636(sp)
    a34c:	9465883a 	add	r18,r18,r17
    a350:	9cffffc4 	addi	r19,r19,-1
    a354:	4000051e 	bne	r8,zero,a36c <__svfscanf_r+0x1740>
    a358:	a5000104 	addi	r20,r20,4
    a35c:	0021883a 	mov	r16,zero
    a360:	003c6606 	br	94fc <__alt_data_end+0xfc0094fc>
    a364:	a1000017 	ldw	r4,0(r20)
    a368:	003fdb06 	br	a2d8 <__alt_data_end+0xfc00a2d8>
    a36c:	0021883a 	mov	r16,zero
    a370:	003c6206 	br	94fc <__alt_data_end+0xfc0094fc>
    a374:	d8800104 	addi	r2,sp,4
    a378:	802b883a 	mov	r21,r16
    a37c:	143a6b2e 	bgeu	r2,r16,8d2c <__alt_data_end+0xfc008d2c>
    a380:	ad7fffc4 	addi	r21,r21,-1
    a384:	a9400007 	ldb	r5,0(r21)
    a388:	e00d883a 	mov	r6,fp
    a38c:	b009883a 	mov	r4,r22
    a390:	0012bdc0 	call	12bdc <_ungetc_r>
    a394:	d8c00104 	addi	r3,sp,4
    a398:	1d7ff91e 	bne	r3,r21,a380 <__alt_data_end+0xfc00a380>
    a39c:	003a6306 	br	8d2c <__alt_data_end+0xfc008d2c>
    a3a0:	0009883a 	mov	r4,zero
    a3a4:	000e7f40 	call	e7f4 <nanf>
    a3a8:	a0800015 	stw	r2,0(r20)
    a3ac:	dc409c15 	stw	r17,624(sp)
    a3b0:	003dac06 	br	9a64 <__alt_data_end+0xfc009a64>
    a3b4:	d9000104 	addi	r4,sp,4
    a3b8:	802b883a 	mov	r21,r16
    a3bc:	243a5b2e 	bgeu	r4,r16,8d2c <__alt_data_end+0xfc008d2c>
    a3c0:	ad7fffc4 	addi	r21,r21,-1
    a3c4:	a9400007 	ldb	r5,0(r21)
    a3c8:	e00d883a 	mov	r6,fp
    a3cc:	b009883a 	mov	r4,r22
    a3d0:	0012bdc0 	call	12bdc <_ungetc_r>
    a3d4:	d9400104 	addi	r5,sp,4
    a3d8:	2d7ff91e 	bne	r5,r21,a3c0 <__alt_data_end+0xfc00a3c0>
    a3dc:	003a5306 	br	8d2c <__alt_data_end+0xfc008d2c>
    a3e0:	00106580 	call	10658 <_strtoull_r>
    a3e4:	003f9d06 	br	a25c <__alt_data_end+0xfc00a25c>

0000a3e8 <vfscanf>:
    a3e8:	008000b4 	movhi	r2,2
    a3ec:	defffb04 	addi	sp,sp,-20
    a3f0:	109df804 	addi	r2,r2,30688
    a3f4:	dc000215 	stw	r16,8(sp)
    a3f8:	14000017 	ldw	r16,0(r2)
    a3fc:	dc400315 	stw	r17,12(sp)
    a400:	dfc00415 	stw	ra,16(sp)
    a404:	2023883a 	mov	r17,r4
    a408:	80000826 	beq	r16,zero,a42c <vfscanf+0x44>
    a40c:	80800e17 	ldw	r2,56(r16)
    a410:	1000061e 	bne	r2,zero,a42c <vfscanf+0x44>
    a414:	8009883a 	mov	r4,r16
    a418:	d9400015 	stw	r5,0(sp)
    a41c:	d9800115 	stw	r6,4(sp)
    a420:	0004e480 	call	4e48 <__sinit>
    a424:	d9800117 	ldw	r6,4(sp)
    a428:	d9400017 	ldw	r5,0(sp)
    a42c:	300f883a 	mov	r7,r6
    a430:	8009883a 	mov	r4,r16
    a434:	280d883a 	mov	r6,r5
    a438:	880b883a 	mov	r5,r17
    a43c:	dfc00417 	ldw	ra,16(sp)
    a440:	dc400317 	ldw	r17,12(sp)
    a444:	dc000217 	ldw	r16,8(sp)
    a448:	dec00504 	addi	sp,sp,20
    a44c:	0008c2c1 	jmpi	8c2c <__svfscanf_r>

0000a450 <__svfscanf>:
    a450:	008000b4 	movhi	r2,2
    a454:	109df804 	addi	r2,r2,30688
    a458:	300f883a 	mov	r7,r6
    a45c:	280d883a 	mov	r6,r5
    a460:	200b883a 	mov	r5,r4
    a464:	11000017 	ldw	r4,0(r2)
    a468:	0008c2c1 	jmpi	8c2c <__svfscanf_r>

0000a46c <_vfscanf_r>:
    a46c:	defffb04 	addi	sp,sp,-20
    a470:	dc000315 	stw	r16,12(sp)
    a474:	dfc00415 	stw	ra,16(sp)
    a478:	2021883a 	mov	r16,r4
    a47c:	20000926 	beq	r4,zero,a4a4 <_vfscanf_r+0x38>
    a480:	20800e17 	ldw	r2,56(r4)
    a484:	1000071e 	bne	r2,zero,a4a4 <_vfscanf_r+0x38>
    a488:	d9400015 	stw	r5,0(sp)
    a48c:	d9800115 	stw	r6,4(sp)
    a490:	d9c00215 	stw	r7,8(sp)
    a494:	0004e480 	call	4e48 <__sinit>
    a498:	d9c00217 	ldw	r7,8(sp)
    a49c:	d9800117 	ldw	r6,4(sp)
    a4a0:	d9400017 	ldw	r5,0(sp)
    a4a4:	8009883a 	mov	r4,r16
    a4a8:	dfc00417 	ldw	ra,16(sp)
    a4ac:	dc000317 	ldw	r16,12(sp)
    a4b0:	dec00504 	addi	sp,sp,20
    a4b4:	0008c2c1 	jmpi	8c2c <__svfscanf_r>

0000a4b8 <_write_r>:
    a4b8:	defffd04 	addi	sp,sp,-12
    a4bc:	2805883a 	mov	r2,r5
    a4c0:	dc000015 	stw	r16,0(sp)
    a4c4:	040000f4 	movhi	r16,3
    a4c8:	dc400115 	stw	r17,4(sp)
    a4cc:	300b883a 	mov	r5,r6
    a4d0:	84250a04 	addi	r16,r16,-27608
    a4d4:	2023883a 	mov	r17,r4
    a4d8:	380d883a 	mov	r6,r7
    a4dc:	1009883a 	mov	r4,r2
    a4e0:	dfc00215 	stw	ra,8(sp)
    a4e4:	80000015 	stw	zero,0(r16)
    a4e8:	001aa1c0 	call	1aa1c <write>
    a4ec:	00ffffc4 	movi	r3,-1
    a4f0:	10c00526 	beq	r2,r3,a508 <_write_r+0x50>
    a4f4:	dfc00217 	ldw	ra,8(sp)
    a4f8:	dc400117 	ldw	r17,4(sp)
    a4fc:	dc000017 	ldw	r16,0(sp)
    a500:	dec00304 	addi	sp,sp,12
    a504:	f800283a 	ret
    a508:	80c00017 	ldw	r3,0(r16)
    a50c:	183ff926 	beq	r3,zero,a4f4 <__alt_data_end+0xfc00a4f4>
    a510:	88c00015 	stw	r3,0(r17)
    a514:	003ff706 	br	a4f4 <__alt_data_end+0xfc00a4f4>

0000a518 <__swsetup_r>:
    a518:	008000b4 	movhi	r2,2
    a51c:	defffd04 	addi	sp,sp,-12
    a520:	109df804 	addi	r2,r2,30688
    a524:	dc400115 	stw	r17,4(sp)
    a528:	2023883a 	mov	r17,r4
    a52c:	11000017 	ldw	r4,0(r2)
    a530:	dc000015 	stw	r16,0(sp)
    a534:	dfc00215 	stw	ra,8(sp)
    a538:	2821883a 	mov	r16,r5
    a53c:	20000226 	beq	r4,zero,a548 <__swsetup_r+0x30>
    a540:	20800e17 	ldw	r2,56(r4)
    a544:	10003126 	beq	r2,zero,a60c <__swsetup_r+0xf4>
    a548:	8080030b 	ldhu	r2,12(r16)
    a54c:	10c0020c 	andi	r3,r2,8
    a550:	1009883a 	mov	r4,r2
    a554:	18000f26 	beq	r3,zero,a594 <__swsetup_r+0x7c>
    a558:	80c00417 	ldw	r3,16(r16)
    a55c:	18001526 	beq	r3,zero,a5b4 <__swsetup_r+0x9c>
    a560:	1100004c 	andi	r4,r2,1
    a564:	20001c1e 	bne	r4,zero,a5d8 <__swsetup_r+0xc0>
    a568:	1080008c 	andi	r2,r2,2
    a56c:	1000291e 	bne	r2,zero,a614 <__swsetup_r+0xfc>
    a570:	80800517 	ldw	r2,20(r16)
    a574:	80800215 	stw	r2,8(r16)
    a578:	18001c26 	beq	r3,zero,a5ec <__swsetup_r+0xd4>
    a57c:	0005883a 	mov	r2,zero
    a580:	dfc00217 	ldw	ra,8(sp)
    a584:	dc400117 	ldw	r17,4(sp)
    a588:	dc000017 	ldw	r16,0(sp)
    a58c:	dec00304 	addi	sp,sp,12
    a590:	f800283a 	ret
    a594:	2080040c 	andi	r2,r4,16
    a598:	10002e26 	beq	r2,zero,a654 <__swsetup_r+0x13c>
    a59c:	2080010c 	andi	r2,r4,4
    a5a0:	10001e1e 	bne	r2,zero,a61c <__swsetup_r+0x104>
    a5a4:	80c00417 	ldw	r3,16(r16)
    a5a8:	20800214 	ori	r2,r4,8
    a5ac:	8080030d 	sth	r2,12(r16)
    a5b0:	183feb1e 	bne	r3,zero,a560 <__alt_data_end+0xfc00a560>
    a5b4:	1100a00c 	andi	r4,r2,640
    a5b8:	01408004 	movi	r5,512
    a5bc:	217fe826 	beq	r4,r5,a560 <__alt_data_end+0xfc00a560>
    a5c0:	800b883a 	mov	r5,r16
    a5c4:	8809883a 	mov	r4,r17
    a5c8:	000cfb00 	call	cfb0 <__smakebuf_r>
    a5cc:	8080030b 	ldhu	r2,12(r16)
    a5d0:	80c00417 	ldw	r3,16(r16)
    a5d4:	003fe206 	br	a560 <__alt_data_end+0xfc00a560>
    a5d8:	80800517 	ldw	r2,20(r16)
    a5dc:	80000215 	stw	zero,8(r16)
    a5e0:	0085c83a 	sub	r2,zero,r2
    a5e4:	80800615 	stw	r2,24(r16)
    a5e8:	183fe41e 	bne	r3,zero,a57c <__alt_data_end+0xfc00a57c>
    a5ec:	80c0030b 	ldhu	r3,12(r16)
    a5f0:	0005883a 	mov	r2,zero
    a5f4:	1900200c 	andi	r4,r3,128
    a5f8:	203fe126 	beq	r4,zero,a580 <__alt_data_end+0xfc00a580>
    a5fc:	18c01014 	ori	r3,r3,64
    a600:	80c0030d 	sth	r3,12(r16)
    a604:	00bfffc4 	movi	r2,-1
    a608:	003fdd06 	br	a580 <__alt_data_end+0xfc00a580>
    a60c:	0004e480 	call	4e48 <__sinit>
    a610:	003fcd06 	br	a548 <__alt_data_end+0xfc00a548>
    a614:	0005883a 	mov	r2,zero
    a618:	003fd606 	br	a574 <__alt_data_end+0xfc00a574>
    a61c:	81400c17 	ldw	r5,48(r16)
    a620:	28000626 	beq	r5,zero,a63c <__swsetup_r+0x124>
    a624:	80801004 	addi	r2,r16,64
    a628:	28800326 	beq	r5,r2,a638 <__swsetup_r+0x120>
    a62c:	8809883a 	mov	r4,r17
    a630:	000c6780 	call	c678 <_free_r>
    a634:	8100030b 	ldhu	r4,12(r16)
    a638:	80000c15 	stw	zero,48(r16)
    a63c:	80c00417 	ldw	r3,16(r16)
    a640:	00bff6c4 	movi	r2,-37
    a644:	1108703a 	and	r4,r2,r4
    a648:	80000115 	stw	zero,4(r16)
    a64c:	80c00015 	stw	r3,0(r16)
    a650:	003fd506 	br	a5a8 <__alt_data_end+0xfc00a5a8>
    a654:	00800244 	movi	r2,9
    a658:	88800015 	stw	r2,0(r17)
    a65c:	20801014 	ori	r2,r4,64
    a660:	8080030d 	sth	r2,12(r16)
    a664:	00bfffc4 	movi	r2,-1
    a668:	003fc506 	br	a580 <__alt_data_end+0xfc00a580>

0000a66c <_close_r>:
    a66c:	defffd04 	addi	sp,sp,-12
    a670:	dc000015 	stw	r16,0(sp)
    a674:	040000f4 	movhi	r16,3
    a678:	dc400115 	stw	r17,4(sp)
    a67c:	84250a04 	addi	r16,r16,-27608
    a680:	2023883a 	mov	r17,r4
    a684:	2809883a 	mov	r4,r5
    a688:	dfc00215 	stw	ra,8(sp)
    a68c:	80000015 	stw	zero,0(r16)
    a690:	001a2140 	call	1a214 <close>
    a694:	00ffffc4 	movi	r3,-1
    a698:	10c00526 	beq	r2,r3,a6b0 <_close_r+0x44>
    a69c:	dfc00217 	ldw	ra,8(sp)
    a6a0:	dc400117 	ldw	r17,4(sp)
    a6a4:	dc000017 	ldw	r16,0(sp)
    a6a8:	dec00304 	addi	sp,sp,12
    a6ac:	f800283a 	ret
    a6b0:	80c00017 	ldw	r3,0(r16)
    a6b4:	183ff926 	beq	r3,zero,a69c <__alt_data_end+0xfc00a69c>
    a6b8:	88c00015 	stw	r3,0(r17)
    a6bc:	003ff706 	br	a69c <__alt_data_end+0xfc00a69c>

0000a6c0 <quorem>:
    a6c0:	defff704 	addi	sp,sp,-36
    a6c4:	dc800215 	stw	r18,8(sp)
    a6c8:	20800417 	ldw	r2,16(r4)
    a6cc:	2c800417 	ldw	r18,16(r5)
    a6d0:	dfc00815 	stw	ra,32(sp)
    a6d4:	ddc00715 	stw	r23,28(sp)
    a6d8:	dd800615 	stw	r22,24(sp)
    a6dc:	dd400515 	stw	r21,20(sp)
    a6e0:	dd000415 	stw	r20,16(sp)
    a6e4:	dcc00315 	stw	r19,12(sp)
    a6e8:	dc400115 	stw	r17,4(sp)
    a6ec:	dc000015 	stw	r16,0(sp)
    a6f0:	14807116 	blt	r2,r18,a8b8 <quorem+0x1f8>
    a6f4:	94bfffc4 	addi	r18,r18,-1
    a6f8:	94ad883a 	add	r22,r18,r18
    a6fc:	b5ad883a 	add	r22,r22,r22
    a700:	2c400504 	addi	r17,r5,20
    a704:	8da9883a 	add	r20,r17,r22
    a708:	25400504 	addi	r21,r4,20
    a70c:	282f883a 	mov	r23,r5
    a710:	adad883a 	add	r22,r21,r22
    a714:	a1400017 	ldw	r5,0(r20)
    a718:	2021883a 	mov	r16,r4
    a71c:	b1000017 	ldw	r4,0(r22)
    a720:	29400044 	addi	r5,r5,1
    a724:	00177100 	call	17710 <__udivsi3>
    a728:	1027883a 	mov	r19,r2
    a72c:	10002c26 	beq	r2,zero,a7e0 <quorem+0x120>
    a730:	a813883a 	mov	r9,r21
    a734:	880b883a 	mov	r5,r17
    a738:	0009883a 	mov	r4,zero
    a73c:	000d883a 	mov	r6,zero
    a740:	2a000017 	ldw	r8,0(r5)
    a744:	49c00017 	ldw	r7,0(r9)
    a748:	29400104 	addi	r5,r5,4
    a74c:	40bfffcc 	andi	r2,r8,65535
    a750:	14c5383a 	mul	r2,r2,r19
    a754:	4010d43a 	srli	r8,r8,16
    a758:	38ffffcc 	andi	r3,r7,65535
    a75c:	1105883a 	add	r2,r2,r4
    a760:	1008d43a 	srli	r4,r2,16
    a764:	44d1383a 	mul	r8,r8,r19
    a768:	198d883a 	add	r6,r3,r6
    a76c:	10ffffcc 	andi	r3,r2,65535
    a770:	30c7c83a 	sub	r3,r6,r3
    a774:	380ed43a 	srli	r7,r7,16
    a778:	4105883a 	add	r2,r8,r4
    a77c:	180dd43a 	srai	r6,r3,16
    a780:	113fffcc 	andi	r4,r2,65535
    a784:	390fc83a 	sub	r7,r7,r4
    a788:	398d883a 	add	r6,r7,r6
    a78c:	300e943a 	slli	r7,r6,16
    a790:	18ffffcc 	andi	r3,r3,65535
    a794:	1008d43a 	srli	r4,r2,16
    a798:	38ceb03a 	or	r7,r7,r3
    a79c:	49c00015 	stw	r7,0(r9)
    a7a0:	300dd43a 	srai	r6,r6,16
    a7a4:	4a400104 	addi	r9,r9,4
    a7a8:	a17fe52e 	bgeu	r20,r5,a740 <__alt_data_end+0xfc00a740>
    a7ac:	b0800017 	ldw	r2,0(r22)
    a7b0:	10000b1e 	bne	r2,zero,a7e0 <quorem+0x120>
    a7b4:	b0bfff04 	addi	r2,r22,-4
    a7b8:	a880082e 	bgeu	r21,r2,a7dc <quorem+0x11c>
    a7bc:	b0ffff17 	ldw	r3,-4(r22)
    a7c0:	18000326 	beq	r3,zero,a7d0 <quorem+0x110>
    a7c4:	00000506 	br	a7dc <quorem+0x11c>
    a7c8:	10c00017 	ldw	r3,0(r2)
    a7cc:	1800031e 	bne	r3,zero,a7dc <quorem+0x11c>
    a7d0:	10bfff04 	addi	r2,r2,-4
    a7d4:	94bfffc4 	addi	r18,r18,-1
    a7d8:	a8bffb36 	bltu	r21,r2,a7c8 <__alt_data_end+0xfc00a7c8>
    a7dc:	84800415 	stw	r18,16(r16)
    a7e0:	b80b883a 	mov	r5,r23
    a7e4:	8009883a 	mov	r4,r16
    a7e8:	000ddb40 	call	ddb4 <__mcmp>
    a7ec:	10002616 	blt	r2,zero,a888 <quorem+0x1c8>
    a7f0:	9cc00044 	addi	r19,r19,1
    a7f4:	a805883a 	mov	r2,r21
    a7f8:	000b883a 	mov	r5,zero
    a7fc:	11000017 	ldw	r4,0(r2)
    a800:	89800017 	ldw	r6,0(r17)
    a804:	10800104 	addi	r2,r2,4
    a808:	20ffffcc 	andi	r3,r4,65535
    a80c:	194b883a 	add	r5,r3,r5
    a810:	30ffffcc 	andi	r3,r6,65535
    a814:	28c7c83a 	sub	r3,r5,r3
    a818:	300cd43a 	srli	r6,r6,16
    a81c:	2008d43a 	srli	r4,r4,16
    a820:	180bd43a 	srai	r5,r3,16
    a824:	18ffffcc 	andi	r3,r3,65535
    a828:	2189c83a 	sub	r4,r4,r6
    a82c:	2149883a 	add	r4,r4,r5
    a830:	200c943a 	slli	r6,r4,16
    a834:	8c400104 	addi	r17,r17,4
    a838:	200bd43a 	srai	r5,r4,16
    a83c:	30c6b03a 	or	r3,r6,r3
    a840:	10ffff15 	stw	r3,-4(r2)
    a844:	a47fed2e 	bgeu	r20,r17,a7fc <__alt_data_end+0xfc00a7fc>
    a848:	9485883a 	add	r2,r18,r18
    a84c:	1085883a 	add	r2,r2,r2
    a850:	a887883a 	add	r3,r21,r2
    a854:	18800017 	ldw	r2,0(r3)
    a858:	10000b1e 	bne	r2,zero,a888 <quorem+0x1c8>
    a85c:	18bfff04 	addi	r2,r3,-4
    a860:	a880082e 	bgeu	r21,r2,a884 <quorem+0x1c4>
    a864:	18ffff17 	ldw	r3,-4(r3)
    a868:	18000326 	beq	r3,zero,a878 <quorem+0x1b8>
    a86c:	00000506 	br	a884 <quorem+0x1c4>
    a870:	10c00017 	ldw	r3,0(r2)
    a874:	1800031e 	bne	r3,zero,a884 <quorem+0x1c4>
    a878:	10bfff04 	addi	r2,r2,-4
    a87c:	94bfffc4 	addi	r18,r18,-1
    a880:	a8bffb36 	bltu	r21,r2,a870 <__alt_data_end+0xfc00a870>
    a884:	84800415 	stw	r18,16(r16)
    a888:	9805883a 	mov	r2,r19
    a88c:	dfc00817 	ldw	ra,32(sp)
    a890:	ddc00717 	ldw	r23,28(sp)
    a894:	dd800617 	ldw	r22,24(sp)
    a898:	dd400517 	ldw	r21,20(sp)
    a89c:	dd000417 	ldw	r20,16(sp)
    a8a0:	dcc00317 	ldw	r19,12(sp)
    a8a4:	dc800217 	ldw	r18,8(sp)
    a8a8:	dc400117 	ldw	r17,4(sp)
    a8ac:	dc000017 	ldw	r16,0(sp)
    a8b0:	dec00904 	addi	sp,sp,36
    a8b4:	f800283a 	ret
    a8b8:	0005883a 	mov	r2,zero
    a8bc:	003ff306 	br	a88c <__alt_data_end+0xfc00a88c>

0000a8c0 <_dtoa_r>:
    a8c0:	20801017 	ldw	r2,64(r4)
    a8c4:	deffde04 	addi	sp,sp,-136
    a8c8:	df002015 	stw	fp,128(sp)
    a8cc:	dcc01b15 	stw	r19,108(sp)
    a8d0:	dc801a15 	stw	r18,104(sp)
    a8d4:	dc401915 	stw	r17,100(sp)
    a8d8:	dc001815 	stw	r16,96(sp)
    a8dc:	dfc02115 	stw	ra,132(sp)
    a8e0:	ddc01f15 	stw	r23,124(sp)
    a8e4:	dd801e15 	stw	r22,120(sp)
    a8e8:	dd401d15 	stw	r21,116(sp)
    a8ec:	dd001c15 	stw	r20,112(sp)
    a8f0:	d9c00315 	stw	r7,12(sp)
    a8f4:	2039883a 	mov	fp,r4
    a8f8:	3023883a 	mov	r17,r6
    a8fc:	2825883a 	mov	r18,r5
    a900:	dc002417 	ldw	r16,144(sp)
    a904:	3027883a 	mov	r19,r6
    a908:	10000826 	beq	r2,zero,a92c <_dtoa_r+0x6c>
    a90c:	21801117 	ldw	r6,68(r4)
    a910:	00c00044 	movi	r3,1
    a914:	100b883a 	mov	r5,r2
    a918:	1986983a 	sll	r3,r3,r6
    a91c:	11800115 	stw	r6,4(r2)
    a920:	10c00215 	stw	r3,8(r2)
    a924:	000d5940 	call	d594 <_Bfree>
    a928:	e0001015 	stw	zero,64(fp)
    a92c:	88002e16 	blt	r17,zero,a9e8 <_dtoa_r+0x128>
    a930:	80000015 	stw	zero,0(r16)
    a934:	889ffc2c 	andhi	r2,r17,32752
    a938:	00dffc34 	movhi	r3,32752
    a93c:	10c01c26 	beq	r2,r3,a9b0 <_dtoa_r+0xf0>
    a940:	000d883a 	mov	r6,zero
    a944:	000f883a 	mov	r7,zero
    a948:	9009883a 	mov	r4,r18
    a94c:	980b883a 	mov	r5,r19
    a950:	0018b5c0 	call	18b5c <__eqdf2>
    a954:	10002b1e 	bne	r2,zero,aa04 <_dtoa_r+0x144>
    a958:	d9c02317 	ldw	r7,140(sp)
    a95c:	00800044 	movi	r2,1
    a960:	38800015 	stw	r2,0(r7)
    a964:	d8802517 	ldw	r2,148(sp)
    a968:	10019e26 	beq	r2,zero,afe4 <_dtoa_r+0x724>
    a96c:	d8c02517 	ldw	r3,148(sp)
    a970:	008000b4 	movhi	r2,2
    a974:	10954144 	addi	r2,r2,21765
    a978:	18800015 	stw	r2,0(r3)
    a97c:	10bfffc4 	addi	r2,r2,-1
    a980:	dfc02117 	ldw	ra,132(sp)
    a984:	df002017 	ldw	fp,128(sp)
    a988:	ddc01f17 	ldw	r23,124(sp)
    a98c:	dd801e17 	ldw	r22,120(sp)
    a990:	dd401d17 	ldw	r21,116(sp)
    a994:	dd001c17 	ldw	r20,112(sp)
    a998:	dcc01b17 	ldw	r19,108(sp)
    a99c:	dc801a17 	ldw	r18,104(sp)
    a9a0:	dc401917 	ldw	r17,100(sp)
    a9a4:	dc001817 	ldw	r16,96(sp)
    a9a8:	dec02204 	addi	sp,sp,136
    a9ac:	f800283a 	ret
    a9b0:	d8c02317 	ldw	r3,140(sp)
    a9b4:	0089c3c4 	movi	r2,9999
    a9b8:	18800015 	stw	r2,0(r3)
    a9bc:	90017726 	beq	r18,zero,af9c <_dtoa_r+0x6dc>
    a9c0:	008000b4 	movhi	r2,2
    a9c4:	1095f804 	addi	r2,r2,22496
    a9c8:	d9002517 	ldw	r4,148(sp)
    a9cc:	203fec26 	beq	r4,zero,a980 <__alt_data_end+0xfc00a980>
    a9d0:	10c000c7 	ldb	r3,3(r2)
    a9d4:	1801781e 	bne	r3,zero,afb8 <_dtoa_r+0x6f8>
    a9d8:	10c000c4 	addi	r3,r2,3
    a9dc:	d9802517 	ldw	r6,148(sp)
    a9e0:	30c00015 	stw	r3,0(r6)
    a9e4:	003fe606 	br	a980 <__alt_data_end+0xfc00a980>
    a9e8:	04e00034 	movhi	r19,32768
    a9ec:	9cffffc4 	addi	r19,r19,-1
    a9f0:	00800044 	movi	r2,1
    a9f4:	8ce6703a 	and	r19,r17,r19
    a9f8:	80800015 	stw	r2,0(r16)
    a9fc:	9823883a 	mov	r17,r19
    aa00:	003fcc06 	br	a934 <__alt_data_end+0xfc00a934>
    aa04:	d8800204 	addi	r2,sp,8
    aa08:	d8800015 	stw	r2,0(sp)
    aa0c:	d9c00104 	addi	r7,sp,4
    aa10:	900b883a 	mov	r5,r18
    aa14:	980d883a 	mov	r6,r19
    aa18:	e009883a 	mov	r4,fp
    aa1c:	8820d53a 	srli	r16,r17,20
    aa20:	000e1800 	call	e180 <__d2b>
    aa24:	d8800915 	stw	r2,36(sp)
    aa28:	8001651e 	bne	r16,zero,afc0 <_dtoa_r+0x700>
    aa2c:	dd800217 	ldw	r22,8(sp)
    aa30:	dc000117 	ldw	r16,4(sp)
    aa34:	00800804 	movi	r2,32
    aa38:	b421883a 	add	r16,r22,r16
    aa3c:	80c10c84 	addi	r3,r16,1074
    aa40:	10c2d10e 	bge	r2,r3,b588 <_dtoa_r+0xcc8>
    aa44:	00801004 	movi	r2,64
    aa48:	81010484 	addi	r4,r16,1042
    aa4c:	10c7c83a 	sub	r3,r2,r3
    aa50:	9108d83a 	srl	r4,r18,r4
    aa54:	88e2983a 	sll	r17,r17,r3
    aa58:	2448b03a 	or	r4,r4,r17
    aa5c:	0019f240 	call	19f24 <__floatunsidf>
    aa60:	017f8434 	movhi	r5,65040
    aa64:	01800044 	movi	r6,1
    aa68:	1009883a 	mov	r4,r2
    aa6c:	194b883a 	add	r5,r3,r5
    aa70:	843fffc4 	addi	r16,r16,-1
    aa74:	d9801115 	stw	r6,68(sp)
    aa78:	000d883a 	mov	r6,zero
    aa7c:	01cffe34 	movhi	r7,16376
    aa80:	00194cc0 	call	194cc <__subdf3>
    aa84:	0198dbf4 	movhi	r6,25455
    aa88:	01cff4f4 	movhi	r7,16339
    aa8c:	3190d844 	addi	r6,r6,17249
    aa90:	39e1e9c4 	addi	r7,r7,-30809
    aa94:	1009883a 	mov	r4,r2
    aa98:	180b883a 	mov	r5,r3
    aa9c:	0018db40 	call	18db4 <__muldf3>
    aaa0:	01a2d874 	movhi	r6,35681
    aaa4:	01cff1f4 	movhi	r7,16327
    aaa8:	31b22cc4 	addi	r6,r6,-14157
    aaac:	39e28a04 	addi	r7,r7,-30168
    aab0:	180b883a 	mov	r5,r3
    aab4:	1009883a 	mov	r4,r2
    aab8:	00179c80 	call	179c8 <__adddf3>
    aabc:	8009883a 	mov	r4,r16
    aac0:	1029883a 	mov	r20,r2
    aac4:	1823883a 	mov	r17,r3
    aac8:	0019e480 	call	19e48 <__floatsidf>
    aacc:	019427f4 	movhi	r6,20639
    aad0:	01cff4f4 	movhi	r7,16339
    aad4:	319e7ec4 	addi	r6,r6,31227
    aad8:	39d104c4 	addi	r7,r7,17427
    aadc:	1009883a 	mov	r4,r2
    aae0:	180b883a 	mov	r5,r3
    aae4:	0018db40 	call	18db4 <__muldf3>
    aae8:	100d883a 	mov	r6,r2
    aaec:	180f883a 	mov	r7,r3
    aaf0:	a009883a 	mov	r4,r20
    aaf4:	880b883a 	mov	r5,r17
    aaf8:	00179c80 	call	179c8 <__adddf3>
    aafc:	1009883a 	mov	r4,r2
    ab00:	180b883a 	mov	r5,r3
    ab04:	1029883a 	mov	r20,r2
    ab08:	1823883a 	mov	r17,r3
    ab0c:	0019dc80 	call	19dc8 <__fixdfsi>
    ab10:	000d883a 	mov	r6,zero
    ab14:	000f883a 	mov	r7,zero
    ab18:	a009883a 	mov	r4,r20
    ab1c:	880b883a 	mov	r5,r17
    ab20:	d8800515 	stw	r2,20(sp)
    ab24:	0018cc00 	call	18cc0 <__ledf2>
    ab28:	10028716 	blt	r2,zero,b548 <_dtoa_r+0xc88>
    ab2c:	d8c00517 	ldw	r3,20(sp)
    ab30:	00800584 	movi	r2,22
    ab34:	10c27536 	bltu	r2,r3,b50c <_dtoa_r+0xc4c>
    ab38:	180490fa 	slli	r2,r3,3
    ab3c:	00c000b4 	movhi	r3,2
    ab40:	18d61304 	addi	r3,r3,22604
    ab44:	1885883a 	add	r2,r3,r2
    ab48:	11000017 	ldw	r4,0(r2)
    ab4c:	11400117 	ldw	r5,4(r2)
    ab50:	900d883a 	mov	r6,r18
    ab54:	980f883a 	mov	r7,r19
    ab58:	0018be40 	call	18be4 <__gedf2>
    ab5c:	00828d0e 	bge	zero,r2,b594 <_dtoa_r+0xcd4>
    ab60:	d9000517 	ldw	r4,20(sp)
    ab64:	d8000e15 	stw	zero,56(sp)
    ab68:	213fffc4 	addi	r4,r4,-1
    ab6c:	d9000515 	stw	r4,20(sp)
    ab70:	b42dc83a 	sub	r22,r22,r16
    ab74:	b5bfffc4 	addi	r22,r22,-1
    ab78:	b0026f16 	blt	r22,zero,b538 <_dtoa_r+0xc78>
    ab7c:	d8000815 	stw	zero,32(sp)
    ab80:	d9c00517 	ldw	r7,20(sp)
    ab84:	38026416 	blt	r7,zero,b518 <_dtoa_r+0xc58>
    ab88:	b1ed883a 	add	r22,r22,r7
    ab8c:	d9c00d15 	stw	r7,52(sp)
    ab90:	d8000a15 	stw	zero,40(sp)
    ab94:	d9800317 	ldw	r6,12(sp)
    ab98:	00800244 	movi	r2,9
    ab9c:	11811436 	bltu	r2,r6,aff0 <_dtoa_r+0x730>
    aba0:	00800144 	movi	r2,5
    aba4:	1184e10e 	bge	r2,r6,bf2c <_dtoa_r+0x166c>
    aba8:	31bfff04 	addi	r6,r6,-4
    abac:	d9800315 	stw	r6,12(sp)
    abb0:	0023883a 	mov	r17,zero
    abb4:	d9800317 	ldw	r6,12(sp)
    abb8:	008000c4 	movi	r2,3
    abbc:	30836726 	beq	r6,r2,b95c <_dtoa_r+0x109c>
    abc0:	1183410e 	bge	r2,r6,b8c8 <_dtoa_r+0x1008>
    abc4:	d9c00317 	ldw	r7,12(sp)
    abc8:	00800104 	movi	r2,4
    abcc:	38827c26 	beq	r7,r2,b5c0 <_dtoa_r+0xd00>
    abd0:	00800144 	movi	r2,5
    abd4:	3884c41e 	bne	r7,r2,bee8 <_dtoa_r+0x1628>
    abd8:	00800044 	movi	r2,1
    abdc:	d8800b15 	stw	r2,44(sp)
    abe0:	d8c00517 	ldw	r3,20(sp)
    abe4:	d9002217 	ldw	r4,136(sp)
    abe8:	1907883a 	add	r3,r3,r4
    abec:	19800044 	addi	r6,r3,1
    abf0:	d8c00c15 	stw	r3,48(sp)
    abf4:	d9800615 	stw	r6,24(sp)
    abf8:	0183a40e 	bge	zero,r6,ba8c <_dtoa_r+0x11cc>
    abfc:	d9800617 	ldw	r6,24(sp)
    ac00:	3021883a 	mov	r16,r6
    ac04:	e0001115 	stw	zero,68(fp)
    ac08:	008005c4 	movi	r2,23
    ac0c:	1184c92e 	bgeu	r2,r6,bf34 <_dtoa_r+0x1674>
    ac10:	00c00044 	movi	r3,1
    ac14:	00800104 	movi	r2,4
    ac18:	1085883a 	add	r2,r2,r2
    ac1c:	11000504 	addi	r4,r2,20
    ac20:	180b883a 	mov	r5,r3
    ac24:	18c00044 	addi	r3,r3,1
    ac28:	313ffb2e 	bgeu	r6,r4,ac18 <__alt_data_end+0xfc00ac18>
    ac2c:	e1401115 	stw	r5,68(fp)
    ac30:	e009883a 	mov	r4,fp
    ac34:	000d4ec0 	call	d4ec <_Balloc>
    ac38:	d8800715 	stw	r2,28(sp)
    ac3c:	e0801015 	stw	r2,64(fp)
    ac40:	00800384 	movi	r2,14
    ac44:	1400f736 	bltu	r2,r16,b024 <_dtoa_r+0x764>
    ac48:	8800f626 	beq	r17,zero,b024 <_dtoa_r+0x764>
    ac4c:	d9c00517 	ldw	r7,20(sp)
    ac50:	01c39a0e 	bge	zero,r7,babc <_dtoa_r+0x11fc>
    ac54:	388003cc 	andi	r2,r7,15
    ac58:	100490fa 	slli	r2,r2,3
    ac5c:	382bd13a 	srai	r21,r7,4
    ac60:	00c000b4 	movhi	r3,2
    ac64:	18d61304 	addi	r3,r3,22604
    ac68:	1885883a 	add	r2,r3,r2
    ac6c:	a8c0040c 	andi	r3,r21,16
    ac70:	12400017 	ldw	r9,0(r2)
    ac74:	12000117 	ldw	r8,4(r2)
    ac78:	18037926 	beq	r3,zero,ba60 <_dtoa_r+0x11a0>
    ac7c:	008000b4 	movhi	r2,2
    ac80:	10960904 	addi	r2,r2,22564
    ac84:	11800817 	ldw	r6,32(r2)
    ac88:	11c00917 	ldw	r7,36(r2)
    ac8c:	9009883a 	mov	r4,r18
    ac90:	980b883a 	mov	r5,r19
    ac94:	da001715 	stw	r8,92(sp)
    ac98:	da401615 	stw	r9,88(sp)
    ac9c:	00182740 	call	18274 <__divdf3>
    aca0:	da001717 	ldw	r8,92(sp)
    aca4:	da401617 	ldw	r9,88(sp)
    aca8:	ad4003cc 	andi	r21,r21,15
    acac:	040000c4 	movi	r16,3
    acb0:	1023883a 	mov	r17,r2
    acb4:	1829883a 	mov	r20,r3
    acb8:	a8001126 	beq	r21,zero,ad00 <_dtoa_r+0x440>
    acbc:	05c000b4 	movhi	r23,2
    acc0:	bdd60904 	addi	r23,r23,22564
    acc4:	4805883a 	mov	r2,r9
    acc8:	4007883a 	mov	r3,r8
    accc:	a980004c 	andi	r6,r21,1
    acd0:	1009883a 	mov	r4,r2
    acd4:	a82bd07a 	srai	r21,r21,1
    acd8:	180b883a 	mov	r5,r3
    acdc:	30000426 	beq	r6,zero,acf0 <_dtoa_r+0x430>
    ace0:	b9800017 	ldw	r6,0(r23)
    ace4:	b9c00117 	ldw	r7,4(r23)
    ace8:	84000044 	addi	r16,r16,1
    acec:	0018db40 	call	18db4 <__muldf3>
    acf0:	bdc00204 	addi	r23,r23,8
    acf4:	a83ff51e 	bne	r21,zero,accc <__alt_data_end+0xfc00accc>
    acf8:	1013883a 	mov	r9,r2
    acfc:	1811883a 	mov	r8,r3
    ad00:	480d883a 	mov	r6,r9
    ad04:	400f883a 	mov	r7,r8
    ad08:	8809883a 	mov	r4,r17
    ad0c:	a00b883a 	mov	r5,r20
    ad10:	00182740 	call	18274 <__divdf3>
    ad14:	d8800f15 	stw	r2,60(sp)
    ad18:	d8c01015 	stw	r3,64(sp)
    ad1c:	d8c00e17 	ldw	r3,56(sp)
    ad20:	18000626 	beq	r3,zero,ad3c <_dtoa_r+0x47c>
    ad24:	d9000f17 	ldw	r4,60(sp)
    ad28:	d9401017 	ldw	r5,64(sp)
    ad2c:	000d883a 	mov	r6,zero
    ad30:	01cffc34 	movhi	r7,16368
    ad34:	0018cc00 	call	18cc0 <__ledf2>
    ad38:	10040b16 	blt	r2,zero,bd68 <_dtoa_r+0x14a8>
    ad3c:	8009883a 	mov	r4,r16
    ad40:	0019e480 	call	19e48 <__floatsidf>
    ad44:	d9800f17 	ldw	r6,60(sp)
    ad48:	d9c01017 	ldw	r7,64(sp)
    ad4c:	1009883a 	mov	r4,r2
    ad50:	180b883a 	mov	r5,r3
    ad54:	0018db40 	call	18db4 <__muldf3>
    ad58:	000d883a 	mov	r6,zero
    ad5c:	01d00734 	movhi	r7,16412
    ad60:	1009883a 	mov	r4,r2
    ad64:	180b883a 	mov	r5,r3
    ad68:	00179c80 	call	179c8 <__adddf3>
    ad6c:	1021883a 	mov	r16,r2
    ad70:	d8800617 	ldw	r2,24(sp)
    ad74:	047f3034 	movhi	r17,64704
    ad78:	1c63883a 	add	r17,r3,r17
    ad7c:	10031826 	beq	r2,zero,b9e0 <_dtoa_r+0x1120>
    ad80:	d8c00517 	ldw	r3,20(sp)
    ad84:	db000617 	ldw	r12,24(sp)
    ad88:	d8c01315 	stw	r3,76(sp)
    ad8c:	d9000b17 	ldw	r4,44(sp)
    ad90:	20038f26 	beq	r4,zero,bbd0 <_dtoa_r+0x1310>
    ad94:	60bfffc4 	addi	r2,r12,-1
    ad98:	100490fa 	slli	r2,r2,3
    ad9c:	00c000b4 	movhi	r3,2
    ada0:	18d61304 	addi	r3,r3,22604
    ada4:	1885883a 	add	r2,r3,r2
    ada8:	11800017 	ldw	r6,0(r2)
    adac:	11c00117 	ldw	r7,4(r2)
    adb0:	d8800717 	ldw	r2,28(sp)
    adb4:	0009883a 	mov	r4,zero
    adb8:	014ff834 	movhi	r5,16352
    adbc:	db001615 	stw	r12,88(sp)
    adc0:	15c00044 	addi	r23,r2,1
    adc4:	00182740 	call	18274 <__divdf3>
    adc8:	800d883a 	mov	r6,r16
    adcc:	880f883a 	mov	r7,r17
    add0:	1009883a 	mov	r4,r2
    add4:	180b883a 	mov	r5,r3
    add8:	00194cc0 	call	194cc <__subdf3>
    addc:	d9401017 	ldw	r5,64(sp)
    ade0:	d9000f17 	ldw	r4,60(sp)
    ade4:	102b883a 	mov	r21,r2
    ade8:	d8c01215 	stw	r3,72(sp)
    adec:	0019dc80 	call	19dc8 <__fixdfsi>
    adf0:	1009883a 	mov	r4,r2
    adf4:	1029883a 	mov	r20,r2
    adf8:	0019e480 	call	19e48 <__floatsidf>
    adfc:	d9000f17 	ldw	r4,60(sp)
    ae00:	d9401017 	ldw	r5,64(sp)
    ae04:	100d883a 	mov	r6,r2
    ae08:	180f883a 	mov	r7,r3
    ae0c:	00194cc0 	call	194cc <__subdf3>
    ae10:	1823883a 	mov	r17,r3
    ae14:	d8c00717 	ldw	r3,28(sp)
    ae18:	d9401217 	ldw	r5,72(sp)
    ae1c:	a2000c04 	addi	r8,r20,48
    ae20:	1021883a 	mov	r16,r2
    ae24:	1a000005 	stb	r8,0(r3)
    ae28:	800d883a 	mov	r6,r16
    ae2c:	880f883a 	mov	r7,r17
    ae30:	a809883a 	mov	r4,r21
    ae34:	4029883a 	mov	r20,r8
    ae38:	0018be40 	call	18be4 <__gedf2>
    ae3c:	00841d16 	blt	zero,r2,beb4 <_dtoa_r+0x15f4>
    ae40:	800d883a 	mov	r6,r16
    ae44:	880f883a 	mov	r7,r17
    ae48:	0009883a 	mov	r4,zero
    ae4c:	014ffc34 	movhi	r5,16368
    ae50:	00194cc0 	call	194cc <__subdf3>
    ae54:	d9401217 	ldw	r5,72(sp)
    ae58:	100d883a 	mov	r6,r2
    ae5c:	180f883a 	mov	r7,r3
    ae60:	a809883a 	mov	r4,r21
    ae64:	0018be40 	call	18be4 <__gedf2>
    ae68:	db001617 	ldw	r12,88(sp)
    ae6c:	00840e16 	blt	zero,r2,bea8 <_dtoa_r+0x15e8>
    ae70:	00800044 	movi	r2,1
    ae74:	13006b0e 	bge	r2,r12,b024 <_dtoa_r+0x764>
    ae78:	d9000717 	ldw	r4,28(sp)
    ae7c:	dd800f15 	stw	r22,60(sp)
    ae80:	dcc01015 	stw	r19,64(sp)
    ae84:	2319883a 	add	r12,r4,r12
    ae88:	dcc01217 	ldw	r19,72(sp)
    ae8c:	602d883a 	mov	r22,r12
    ae90:	dc801215 	stw	r18,72(sp)
    ae94:	b825883a 	mov	r18,r23
    ae98:	00000906 	br	aec0 <_dtoa_r+0x600>
    ae9c:	00194cc0 	call	194cc <__subdf3>
    aea0:	a80d883a 	mov	r6,r21
    aea4:	980f883a 	mov	r7,r19
    aea8:	1009883a 	mov	r4,r2
    aeac:	180b883a 	mov	r5,r3
    aeb0:	0018cc00 	call	18cc0 <__ledf2>
    aeb4:	1003e816 	blt	r2,zero,be58 <_dtoa_r+0x1598>
    aeb8:	b825883a 	mov	r18,r23
    aebc:	bd83e926 	beq	r23,r22,be64 <_dtoa_r+0x15a4>
    aec0:	a809883a 	mov	r4,r21
    aec4:	980b883a 	mov	r5,r19
    aec8:	000d883a 	mov	r6,zero
    aecc:	01d00934 	movhi	r7,16420
    aed0:	0018db40 	call	18db4 <__muldf3>
    aed4:	000d883a 	mov	r6,zero
    aed8:	01d00934 	movhi	r7,16420
    aedc:	8009883a 	mov	r4,r16
    aee0:	880b883a 	mov	r5,r17
    aee4:	102b883a 	mov	r21,r2
    aee8:	1827883a 	mov	r19,r3
    aeec:	0018db40 	call	18db4 <__muldf3>
    aef0:	180b883a 	mov	r5,r3
    aef4:	1009883a 	mov	r4,r2
    aef8:	1821883a 	mov	r16,r3
    aefc:	1023883a 	mov	r17,r2
    af00:	0019dc80 	call	19dc8 <__fixdfsi>
    af04:	1009883a 	mov	r4,r2
    af08:	1029883a 	mov	r20,r2
    af0c:	0019e480 	call	19e48 <__floatsidf>
    af10:	8809883a 	mov	r4,r17
    af14:	800b883a 	mov	r5,r16
    af18:	100d883a 	mov	r6,r2
    af1c:	180f883a 	mov	r7,r3
    af20:	00194cc0 	call	194cc <__subdf3>
    af24:	a5000c04 	addi	r20,r20,48
    af28:	a80d883a 	mov	r6,r21
    af2c:	980f883a 	mov	r7,r19
    af30:	1009883a 	mov	r4,r2
    af34:	180b883a 	mov	r5,r3
    af38:	95000005 	stb	r20,0(r18)
    af3c:	1021883a 	mov	r16,r2
    af40:	1823883a 	mov	r17,r3
    af44:	0018cc00 	call	18cc0 <__ledf2>
    af48:	bdc00044 	addi	r23,r23,1
    af4c:	800d883a 	mov	r6,r16
    af50:	880f883a 	mov	r7,r17
    af54:	0009883a 	mov	r4,zero
    af58:	014ffc34 	movhi	r5,16368
    af5c:	103fcf0e 	bge	r2,zero,ae9c <__alt_data_end+0xfc00ae9c>
    af60:	d8c01317 	ldw	r3,76(sp)
    af64:	d8c00515 	stw	r3,20(sp)
    af68:	d9400917 	ldw	r5,36(sp)
    af6c:	e009883a 	mov	r4,fp
    af70:	000d5940 	call	d594 <_Bfree>
    af74:	d9000517 	ldw	r4,20(sp)
    af78:	d9802317 	ldw	r6,140(sp)
    af7c:	d9c02517 	ldw	r7,148(sp)
    af80:	b8000005 	stb	zero,0(r23)
    af84:	20800044 	addi	r2,r4,1
    af88:	30800015 	stw	r2,0(r6)
    af8c:	3802aa26 	beq	r7,zero,ba38 <_dtoa_r+0x1178>
    af90:	3dc00015 	stw	r23,0(r7)
    af94:	d8800717 	ldw	r2,28(sp)
    af98:	003e7906 	br	a980 <__alt_data_end+0xfc00a980>
    af9c:	00800434 	movhi	r2,16
    afa0:	10bfffc4 	addi	r2,r2,-1
    afa4:	88a2703a 	and	r17,r17,r2
    afa8:	883e851e 	bne	r17,zero,a9c0 <__alt_data_end+0xfc00a9c0>
    afac:	008000b4 	movhi	r2,2
    afb0:	1095f504 	addi	r2,r2,22484
    afb4:	003e8406 	br	a9c8 <__alt_data_end+0xfc00a9c8>
    afb8:	10c00204 	addi	r3,r2,8
    afbc:	003e8706 	br	a9dc <__alt_data_end+0xfc00a9dc>
    afc0:	01400434 	movhi	r5,16
    afc4:	297fffc4 	addi	r5,r5,-1
    afc8:	994a703a 	and	r5,r19,r5
    afcc:	9009883a 	mov	r4,r18
    afd0:	843f0044 	addi	r16,r16,-1023
    afd4:	294ffc34 	orhi	r5,r5,16368
    afd8:	dd800217 	ldw	r22,8(sp)
    afdc:	d8001115 	stw	zero,68(sp)
    afe0:	003ea506 	br	aa78 <__alt_data_end+0xfc00aa78>
    afe4:	008000b4 	movhi	r2,2
    afe8:	10954104 	addi	r2,r2,21764
    afec:	003e6406 	br	a980 <__alt_data_end+0xfc00a980>
    aff0:	e0001115 	stw	zero,68(fp)
    aff4:	000b883a 	mov	r5,zero
    aff8:	e009883a 	mov	r4,fp
    affc:	000d4ec0 	call	d4ec <_Balloc>
    b000:	01bfffc4 	movi	r6,-1
    b004:	01c00044 	movi	r7,1
    b008:	d8800715 	stw	r2,28(sp)
    b00c:	d9800c15 	stw	r6,48(sp)
    b010:	e0801015 	stw	r2,64(fp)
    b014:	d8000315 	stw	zero,12(sp)
    b018:	d9c00b15 	stw	r7,44(sp)
    b01c:	d9800615 	stw	r6,24(sp)
    b020:	d8002215 	stw	zero,136(sp)
    b024:	d8800117 	ldw	r2,4(sp)
    b028:	10008916 	blt	r2,zero,b250 <_dtoa_r+0x990>
    b02c:	d9000517 	ldw	r4,20(sp)
    b030:	00c00384 	movi	r3,14
    b034:	19008616 	blt	r3,r4,b250 <_dtoa_r+0x990>
    b038:	200490fa 	slli	r2,r4,3
    b03c:	00c000b4 	movhi	r3,2
    b040:	d9802217 	ldw	r6,136(sp)
    b044:	18d61304 	addi	r3,r3,22604
    b048:	1885883a 	add	r2,r3,r2
    b04c:	14000017 	ldw	r16,0(r2)
    b050:	14400117 	ldw	r17,4(r2)
    b054:	30016316 	blt	r6,zero,b5e4 <_dtoa_r+0xd24>
    b058:	800d883a 	mov	r6,r16
    b05c:	880f883a 	mov	r7,r17
    b060:	9009883a 	mov	r4,r18
    b064:	980b883a 	mov	r5,r19
    b068:	00182740 	call	18274 <__divdf3>
    b06c:	180b883a 	mov	r5,r3
    b070:	1009883a 	mov	r4,r2
    b074:	0019dc80 	call	19dc8 <__fixdfsi>
    b078:	1009883a 	mov	r4,r2
    b07c:	102b883a 	mov	r21,r2
    b080:	0019e480 	call	19e48 <__floatsidf>
    b084:	800d883a 	mov	r6,r16
    b088:	880f883a 	mov	r7,r17
    b08c:	1009883a 	mov	r4,r2
    b090:	180b883a 	mov	r5,r3
    b094:	0018db40 	call	18db4 <__muldf3>
    b098:	100d883a 	mov	r6,r2
    b09c:	180f883a 	mov	r7,r3
    b0a0:	9009883a 	mov	r4,r18
    b0a4:	980b883a 	mov	r5,r19
    b0a8:	00194cc0 	call	194cc <__subdf3>
    b0ac:	d9c00717 	ldw	r7,28(sp)
    b0b0:	1009883a 	mov	r4,r2
    b0b4:	a8800c04 	addi	r2,r21,48
    b0b8:	38800005 	stb	r2,0(r7)
    b0bc:	3dc00044 	addi	r23,r7,1
    b0c0:	d9c00617 	ldw	r7,24(sp)
    b0c4:	01800044 	movi	r6,1
    b0c8:	180b883a 	mov	r5,r3
    b0cc:	2005883a 	mov	r2,r4
    b0d0:	39803826 	beq	r7,r6,b1b4 <_dtoa_r+0x8f4>
    b0d4:	000d883a 	mov	r6,zero
    b0d8:	01d00934 	movhi	r7,16420
    b0dc:	0018db40 	call	18db4 <__muldf3>
    b0e0:	000d883a 	mov	r6,zero
    b0e4:	000f883a 	mov	r7,zero
    b0e8:	1009883a 	mov	r4,r2
    b0ec:	180b883a 	mov	r5,r3
    b0f0:	1025883a 	mov	r18,r2
    b0f4:	1827883a 	mov	r19,r3
    b0f8:	0018b5c0 	call	18b5c <__eqdf2>
    b0fc:	103f9a26 	beq	r2,zero,af68 <__alt_data_end+0xfc00af68>
    b100:	d9c00617 	ldw	r7,24(sp)
    b104:	d8c00717 	ldw	r3,28(sp)
    b108:	b829883a 	mov	r20,r23
    b10c:	38bfffc4 	addi	r2,r7,-1
    b110:	18ad883a 	add	r22,r3,r2
    b114:	00000a06 	br	b140 <_dtoa_r+0x880>
    b118:	0018db40 	call	18db4 <__muldf3>
    b11c:	000d883a 	mov	r6,zero
    b120:	000f883a 	mov	r7,zero
    b124:	1009883a 	mov	r4,r2
    b128:	180b883a 	mov	r5,r3
    b12c:	1025883a 	mov	r18,r2
    b130:	1827883a 	mov	r19,r3
    b134:	b829883a 	mov	r20,r23
    b138:	0018b5c0 	call	18b5c <__eqdf2>
    b13c:	103f8a26 	beq	r2,zero,af68 <__alt_data_end+0xfc00af68>
    b140:	800d883a 	mov	r6,r16
    b144:	880f883a 	mov	r7,r17
    b148:	9009883a 	mov	r4,r18
    b14c:	980b883a 	mov	r5,r19
    b150:	00182740 	call	18274 <__divdf3>
    b154:	180b883a 	mov	r5,r3
    b158:	1009883a 	mov	r4,r2
    b15c:	0019dc80 	call	19dc8 <__fixdfsi>
    b160:	1009883a 	mov	r4,r2
    b164:	102b883a 	mov	r21,r2
    b168:	0019e480 	call	19e48 <__floatsidf>
    b16c:	800d883a 	mov	r6,r16
    b170:	880f883a 	mov	r7,r17
    b174:	1009883a 	mov	r4,r2
    b178:	180b883a 	mov	r5,r3
    b17c:	0018db40 	call	18db4 <__muldf3>
    b180:	100d883a 	mov	r6,r2
    b184:	180f883a 	mov	r7,r3
    b188:	9009883a 	mov	r4,r18
    b18c:	980b883a 	mov	r5,r19
    b190:	00194cc0 	call	194cc <__subdf3>
    b194:	aa000c04 	addi	r8,r21,48
    b198:	a2000005 	stb	r8,0(r20)
    b19c:	000d883a 	mov	r6,zero
    b1a0:	01d00934 	movhi	r7,16420
    b1a4:	1009883a 	mov	r4,r2
    b1a8:	180b883a 	mov	r5,r3
    b1ac:	a5c00044 	addi	r23,r20,1
    b1b0:	b53fd91e 	bne	r22,r20,b118 <__alt_data_end+0xfc00b118>
    b1b4:	100d883a 	mov	r6,r2
    b1b8:	180f883a 	mov	r7,r3
    b1bc:	1009883a 	mov	r4,r2
    b1c0:	180b883a 	mov	r5,r3
    b1c4:	00179c80 	call	179c8 <__adddf3>
    b1c8:	100d883a 	mov	r6,r2
    b1cc:	180f883a 	mov	r7,r3
    b1d0:	8009883a 	mov	r4,r16
    b1d4:	880b883a 	mov	r5,r17
    b1d8:	1027883a 	mov	r19,r2
    b1dc:	1825883a 	mov	r18,r3
    b1e0:	0018cc00 	call	18cc0 <__ledf2>
    b1e4:	10000816 	blt	r2,zero,b208 <_dtoa_r+0x948>
    b1e8:	980d883a 	mov	r6,r19
    b1ec:	900f883a 	mov	r7,r18
    b1f0:	8009883a 	mov	r4,r16
    b1f4:	880b883a 	mov	r5,r17
    b1f8:	0018b5c0 	call	18b5c <__eqdf2>
    b1fc:	103f5a1e 	bne	r2,zero,af68 <__alt_data_end+0xfc00af68>
    b200:	ad40004c 	andi	r21,r21,1
    b204:	a83f5826 	beq	r21,zero,af68 <__alt_data_end+0xfc00af68>
    b208:	bd3fffc3 	ldbu	r20,-1(r23)
    b20c:	b8bfffc4 	addi	r2,r23,-1
    b210:	1007883a 	mov	r3,r2
    b214:	01400e44 	movi	r5,57
    b218:	d9800717 	ldw	r6,28(sp)
    b21c:	00000506 	br	b234 <_dtoa_r+0x974>
    b220:	18ffffc4 	addi	r3,r3,-1
    b224:	11824726 	beq	r2,r6,bb44 <_dtoa_r+0x1284>
    b228:	1d000003 	ldbu	r20,0(r3)
    b22c:	102f883a 	mov	r23,r2
    b230:	10bfffc4 	addi	r2,r2,-1
    b234:	a1003fcc 	andi	r4,r20,255
    b238:	2100201c 	xori	r4,r4,128
    b23c:	213fe004 	addi	r4,r4,-128
    b240:	217ff726 	beq	r4,r5,b220 <__alt_data_end+0xfc00b220>
    b244:	a2000044 	addi	r8,r20,1
    b248:	12000005 	stb	r8,0(r2)
    b24c:	003f4606 	br	af68 <__alt_data_end+0xfc00af68>
    b250:	d9000b17 	ldw	r4,44(sp)
    b254:	2000c826 	beq	r4,zero,b578 <_dtoa_r+0xcb8>
    b258:	d9800317 	ldw	r6,12(sp)
    b25c:	00c00044 	movi	r3,1
    b260:	1980f90e 	bge	r3,r6,b648 <_dtoa_r+0xd88>
    b264:	d8800617 	ldw	r2,24(sp)
    b268:	d8c00a17 	ldw	r3,40(sp)
    b26c:	157fffc4 	addi	r21,r2,-1
    b270:	1d41f316 	blt	r3,r21,ba40 <_dtoa_r+0x1180>
    b274:	1d6bc83a 	sub	r21,r3,r21
    b278:	d9c00617 	ldw	r7,24(sp)
    b27c:	3802aa16 	blt	r7,zero,bd28 <_dtoa_r+0x1468>
    b280:	dd000817 	ldw	r20,32(sp)
    b284:	d8800617 	ldw	r2,24(sp)
    b288:	d8c00817 	ldw	r3,32(sp)
    b28c:	01400044 	movi	r5,1
    b290:	e009883a 	mov	r4,fp
    b294:	1887883a 	add	r3,r3,r2
    b298:	d8c00815 	stw	r3,32(sp)
    b29c:	b0ad883a 	add	r22,r22,r2
    b2a0:	000d8f80 	call	d8f8 <__i2b>
    b2a4:	1023883a 	mov	r17,r2
    b2a8:	a0000826 	beq	r20,zero,b2cc <_dtoa_r+0xa0c>
    b2ac:	0580070e 	bge	zero,r22,b2cc <_dtoa_r+0xa0c>
    b2b0:	a005883a 	mov	r2,r20
    b2b4:	b500b916 	blt	r22,r20,b59c <_dtoa_r+0xcdc>
    b2b8:	d9000817 	ldw	r4,32(sp)
    b2bc:	a0a9c83a 	sub	r20,r20,r2
    b2c0:	b0adc83a 	sub	r22,r22,r2
    b2c4:	2089c83a 	sub	r4,r4,r2
    b2c8:	d9000815 	stw	r4,32(sp)
    b2cc:	d9800a17 	ldw	r6,40(sp)
    b2d0:	0181810e 	bge	zero,r6,b8d8 <_dtoa_r+0x1018>
    b2d4:	d9c00b17 	ldw	r7,44(sp)
    b2d8:	3800b326 	beq	r7,zero,b5a8 <_dtoa_r+0xce8>
    b2dc:	a800b226 	beq	r21,zero,b5a8 <_dtoa_r+0xce8>
    b2e0:	880b883a 	mov	r5,r17
    b2e4:	a80d883a 	mov	r6,r21
    b2e8:	e009883a 	mov	r4,fp
    b2ec:	000db2c0 	call	db2c <__pow5mult>
    b2f0:	d9800917 	ldw	r6,36(sp)
    b2f4:	100b883a 	mov	r5,r2
    b2f8:	e009883a 	mov	r4,fp
    b2fc:	1023883a 	mov	r17,r2
    b300:	000d9340 	call	d934 <__multiply>
    b304:	1021883a 	mov	r16,r2
    b308:	d8800a17 	ldw	r2,40(sp)
    b30c:	d9400917 	ldw	r5,36(sp)
    b310:	e009883a 	mov	r4,fp
    b314:	1545c83a 	sub	r2,r2,r21
    b318:	d8800a15 	stw	r2,40(sp)
    b31c:	000d5940 	call	d594 <_Bfree>
    b320:	d8c00a17 	ldw	r3,40(sp)
    b324:	18009f1e 	bne	r3,zero,b5a4 <_dtoa_r+0xce4>
    b328:	05c00044 	movi	r23,1
    b32c:	e009883a 	mov	r4,fp
    b330:	b80b883a 	mov	r5,r23
    b334:	000d8f80 	call	d8f8 <__i2b>
    b338:	d9000d17 	ldw	r4,52(sp)
    b33c:	102b883a 	mov	r21,r2
    b340:	2000ce26 	beq	r4,zero,b67c <_dtoa_r+0xdbc>
    b344:	200d883a 	mov	r6,r4
    b348:	100b883a 	mov	r5,r2
    b34c:	e009883a 	mov	r4,fp
    b350:	000db2c0 	call	db2c <__pow5mult>
    b354:	d9800317 	ldw	r6,12(sp)
    b358:	102b883a 	mov	r21,r2
    b35c:	b981810e 	bge	r23,r6,b964 <_dtoa_r+0x10a4>
    b360:	0027883a 	mov	r19,zero
    b364:	a8800417 	ldw	r2,16(r21)
    b368:	05c00804 	movi	r23,32
    b36c:	10800104 	addi	r2,r2,4
    b370:	1085883a 	add	r2,r2,r2
    b374:	1085883a 	add	r2,r2,r2
    b378:	a885883a 	add	r2,r21,r2
    b37c:	11000017 	ldw	r4,0(r2)
    b380:	000d7e00 	call	d7e0 <__hi0bits>
    b384:	b885c83a 	sub	r2,r23,r2
    b388:	1585883a 	add	r2,r2,r22
    b38c:	108007cc 	andi	r2,r2,31
    b390:	1000b326 	beq	r2,zero,b660 <_dtoa_r+0xda0>
    b394:	00c00804 	movi	r3,32
    b398:	1887c83a 	sub	r3,r3,r2
    b39c:	01000104 	movi	r4,4
    b3a0:	20c2cd0e 	bge	r4,r3,bed8 <_dtoa_r+0x1618>
    b3a4:	00c00704 	movi	r3,28
    b3a8:	1885c83a 	sub	r2,r3,r2
    b3ac:	d8c00817 	ldw	r3,32(sp)
    b3b0:	a0a9883a 	add	r20,r20,r2
    b3b4:	b0ad883a 	add	r22,r22,r2
    b3b8:	1887883a 	add	r3,r3,r2
    b3bc:	d8c00815 	stw	r3,32(sp)
    b3c0:	d9800817 	ldw	r6,32(sp)
    b3c4:	0180040e 	bge	zero,r6,b3d8 <_dtoa_r+0xb18>
    b3c8:	800b883a 	mov	r5,r16
    b3cc:	e009883a 	mov	r4,fp
    b3d0:	000dc6c0 	call	dc6c <__lshift>
    b3d4:	1021883a 	mov	r16,r2
    b3d8:	0580050e 	bge	zero,r22,b3f0 <_dtoa_r+0xb30>
    b3dc:	a80b883a 	mov	r5,r21
    b3e0:	b00d883a 	mov	r6,r22
    b3e4:	e009883a 	mov	r4,fp
    b3e8:	000dc6c0 	call	dc6c <__lshift>
    b3ec:	102b883a 	mov	r21,r2
    b3f0:	d9c00e17 	ldw	r7,56(sp)
    b3f4:	3801211e 	bne	r7,zero,b87c <_dtoa_r+0xfbc>
    b3f8:	d9800617 	ldw	r6,24(sp)
    b3fc:	0181380e 	bge	zero,r6,b8e0 <_dtoa_r+0x1020>
    b400:	d8c00b17 	ldw	r3,44(sp)
    b404:	1800ab1e 	bne	r3,zero,b6b4 <_dtoa_r+0xdf4>
    b408:	dc800717 	ldw	r18,28(sp)
    b40c:	dcc00617 	ldw	r19,24(sp)
    b410:	9029883a 	mov	r20,r18
    b414:	00000206 	br	b420 <_dtoa_r+0xb60>
    b418:	000d5bc0 	call	d5bc <__multadd>
    b41c:	1021883a 	mov	r16,r2
    b420:	a80b883a 	mov	r5,r21
    b424:	8009883a 	mov	r4,r16
    b428:	000a6c00 	call	a6c0 <quorem>
    b42c:	10800c04 	addi	r2,r2,48
    b430:	90800005 	stb	r2,0(r18)
    b434:	94800044 	addi	r18,r18,1
    b438:	9507c83a 	sub	r3,r18,r20
    b43c:	000f883a 	mov	r7,zero
    b440:	01800284 	movi	r6,10
    b444:	800b883a 	mov	r5,r16
    b448:	e009883a 	mov	r4,fp
    b44c:	1cfff216 	blt	r3,r19,b418 <__alt_data_end+0xfc00b418>
    b450:	1011883a 	mov	r8,r2
    b454:	d8800617 	ldw	r2,24(sp)
    b458:	0082370e 	bge	zero,r2,bd38 <_dtoa_r+0x1478>
    b45c:	d9000717 	ldw	r4,28(sp)
    b460:	0025883a 	mov	r18,zero
    b464:	20af883a 	add	r23,r4,r2
    b468:	01800044 	movi	r6,1
    b46c:	800b883a 	mov	r5,r16
    b470:	e009883a 	mov	r4,fp
    b474:	da001715 	stw	r8,92(sp)
    b478:	000dc6c0 	call	dc6c <__lshift>
    b47c:	a80b883a 	mov	r5,r21
    b480:	1009883a 	mov	r4,r2
    b484:	d8800915 	stw	r2,36(sp)
    b488:	000ddb40 	call	ddb4 <__mcmp>
    b48c:	da001717 	ldw	r8,92(sp)
    b490:	0081800e 	bge	zero,r2,ba94 <_dtoa_r+0x11d4>
    b494:	b93fffc3 	ldbu	r4,-1(r23)
    b498:	b8bfffc4 	addi	r2,r23,-1
    b49c:	1007883a 	mov	r3,r2
    b4a0:	01800e44 	movi	r6,57
    b4a4:	d9c00717 	ldw	r7,28(sp)
    b4a8:	00000506 	br	b4c0 <_dtoa_r+0xc00>
    b4ac:	18ffffc4 	addi	r3,r3,-1
    b4b0:	11c12326 	beq	r2,r7,b940 <_dtoa_r+0x1080>
    b4b4:	19000003 	ldbu	r4,0(r3)
    b4b8:	102f883a 	mov	r23,r2
    b4bc:	10bfffc4 	addi	r2,r2,-1
    b4c0:	21403fcc 	andi	r5,r4,255
    b4c4:	2940201c 	xori	r5,r5,128
    b4c8:	297fe004 	addi	r5,r5,-128
    b4cc:	29bff726 	beq	r5,r6,b4ac <__alt_data_end+0xfc00b4ac>
    b4d0:	21000044 	addi	r4,r4,1
    b4d4:	11000005 	stb	r4,0(r2)
    b4d8:	a80b883a 	mov	r5,r21
    b4dc:	e009883a 	mov	r4,fp
    b4e0:	000d5940 	call	d594 <_Bfree>
    b4e4:	883ea026 	beq	r17,zero,af68 <__alt_data_end+0xfc00af68>
    b4e8:	90000426 	beq	r18,zero,b4fc <_dtoa_r+0xc3c>
    b4ec:	94400326 	beq	r18,r17,b4fc <_dtoa_r+0xc3c>
    b4f0:	900b883a 	mov	r5,r18
    b4f4:	e009883a 	mov	r4,fp
    b4f8:	000d5940 	call	d594 <_Bfree>
    b4fc:	880b883a 	mov	r5,r17
    b500:	e009883a 	mov	r4,fp
    b504:	000d5940 	call	d594 <_Bfree>
    b508:	003e9706 	br	af68 <__alt_data_end+0xfc00af68>
    b50c:	01800044 	movi	r6,1
    b510:	d9800e15 	stw	r6,56(sp)
    b514:	003d9606 	br	ab70 <__alt_data_end+0xfc00ab70>
    b518:	d8800817 	ldw	r2,32(sp)
    b51c:	d8c00517 	ldw	r3,20(sp)
    b520:	d8000d15 	stw	zero,52(sp)
    b524:	10c5c83a 	sub	r2,r2,r3
    b528:	00c9c83a 	sub	r4,zero,r3
    b52c:	d8800815 	stw	r2,32(sp)
    b530:	d9000a15 	stw	r4,40(sp)
    b534:	003d9706 	br	ab94 <__alt_data_end+0xfc00ab94>
    b538:	05adc83a 	sub	r22,zero,r22
    b53c:	dd800815 	stw	r22,32(sp)
    b540:	002d883a 	mov	r22,zero
    b544:	003d8e06 	br	ab80 <__alt_data_end+0xfc00ab80>
    b548:	d9000517 	ldw	r4,20(sp)
    b54c:	0019e480 	call	19e48 <__floatsidf>
    b550:	100d883a 	mov	r6,r2
    b554:	180f883a 	mov	r7,r3
    b558:	a009883a 	mov	r4,r20
    b55c:	880b883a 	mov	r5,r17
    b560:	0018b5c0 	call	18b5c <__eqdf2>
    b564:	103d7126 	beq	r2,zero,ab2c <__alt_data_end+0xfc00ab2c>
    b568:	d9c00517 	ldw	r7,20(sp)
    b56c:	39ffffc4 	addi	r7,r7,-1
    b570:	d9c00515 	stw	r7,20(sp)
    b574:	003d6d06 	br	ab2c <__alt_data_end+0xfc00ab2c>
    b578:	dd400a17 	ldw	r21,40(sp)
    b57c:	dd000817 	ldw	r20,32(sp)
    b580:	0023883a 	mov	r17,zero
    b584:	003f4806 	br	b2a8 <__alt_data_end+0xfc00b2a8>
    b588:	10e3c83a 	sub	r17,r2,r3
    b58c:	9448983a 	sll	r4,r18,r17
    b590:	003d3206 	br	aa5c <__alt_data_end+0xfc00aa5c>
    b594:	d8000e15 	stw	zero,56(sp)
    b598:	003d7506 	br	ab70 <__alt_data_end+0xfc00ab70>
    b59c:	b005883a 	mov	r2,r22
    b5a0:	003f4506 	br	b2b8 <__alt_data_end+0xfc00b2b8>
    b5a4:	dc000915 	stw	r16,36(sp)
    b5a8:	d9800a17 	ldw	r6,40(sp)
    b5ac:	d9400917 	ldw	r5,36(sp)
    b5b0:	e009883a 	mov	r4,fp
    b5b4:	000db2c0 	call	db2c <__pow5mult>
    b5b8:	1021883a 	mov	r16,r2
    b5bc:	003f5a06 	br	b328 <__alt_data_end+0xfc00b328>
    b5c0:	01c00044 	movi	r7,1
    b5c4:	d9c00b15 	stw	r7,44(sp)
    b5c8:	d8802217 	ldw	r2,136(sp)
    b5cc:	0081280e 	bge	zero,r2,ba70 <_dtoa_r+0x11b0>
    b5d0:	100d883a 	mov	r6,r2
    b5d4:	1021883a 	mov	r16,r2
    b5d8:	d8800c15 	stw	r2,48(sp)
    b5dc:	d8800615 	stw	r2,24(sp)
    b5e0:	003d8806 	br	ac04 <__alt_data_end+0xfc00ac04>
    b5e4:	d8800617 	ldw	r2,24(sp)
    b5e8:	00be9b16 	blt	zero,r2,b058 <__alt_data_end+0xfc00b058>
    b5ec:	10010f1e 	bne	r2,zero,ba2c <_dtoa_r+0x116c>
    b5f0:	880b883a 	mov	r5,r17
    b5f4:	000d883a 	mov	r6,zero
    b5f8:	01d00534 	movhi	r7,16404
    b5fc:	8009883a 	mov	r4,r16
    b600:	0018db40 	call	18db4 <__muldf3>
    b604:	900d883a 	mov	r6,r18
    b608:	980f883a 	mov	r7,r19
    b60c:	1009883a 	mov	r4,r2
    b610:	180b883a 	mov	r5,r3
    b614:	0018be40 	call	18be4 <__gedf2>
    b618:	002b883a 	mov	r21,zero
    b61c:	0023883a 	mov	r17,zero
    b620:	1000bf16 	blt	r2,zero,b920 <_dtoa_r+0x1060>
    b624:	d9802217 	ldw	r6,136(sp)
    b628:	ddc00717 	ldw	r23,28(sp)
    b62c:	018c303a 	nor	r6,zero,r6
    b630:	d9800515 	stw	r6,20(sp)
    b634:	a80b883a 	mov	r5,r21
    b638:	e009883a 	mov	r4,fp
    b63c:	000d5940 	call	d594 <_Bfree>
    b640:	883e4926 	beq	r17,zero,af68 <__alt_data_end+0xfc00af68>
    b644:	003fad06 	br	b4fc <__alt_data_end+0xfc00b4fc>
    b648:	d9c01117 	ldw	r7,68(sp)
    b64c:	3801bc26 	beq	r7,zero,bd40 <_dtoa_r+0x1480>
    b650:	10810cc4 	addi	r2,r2,1075
    b654:	dd400a17 	ldw	r21,40(sp)
    b658:	dd000817 	ldw	r20,32(sp)
    b65c:	003f0a06 	br	b288 <__alt_data_end+0xfc00b288>
    b660:	00800704 	movi	r2,28
    b664:	d9000817 	ldw	r4,32(sp)
    b668:	a0a9883a 	add	r20,r20,r2
    b66c:	b0ad883a 	add	r22,r22,r2
    b670:	2089883a 	add	r4,r4,r2
    b674:	d9000815 	stw	r4,32(sp)
    b678:	003f5106 	br	b3c0 <__alt_data_end+0xfc00b3c0>
    b67c:	d8c00317 	ldw	r3,12(sp)
    b680:	b8c1fc0e 	bge	r23,r3,be74 <_dtoa_r+0x15b4>
    b684:	0027883a 	mov	r19,zero
    b688:	b805883a 	mov	r2,r23
    b68c:	003f3e06 	br	b388 <__alt_data_end+0xfc00b388>
    b690:	880b883a 	mov	r5,r17
    b694:	e009883a 	mov	r4,fp
    b698:	000f883a 	mov	r7,zero
    b69c:	01800284 	movi	r6,10
    b6a0:	000d5bc0 	call	d5bc <__multadd>
    b6a4:	d9000c17 	ldw	r4,48(sp)
    b6a8:	1023883a 	mov	r17,r2
    b6ac:	0102040e 	bge	zero,r4,bec0 <_dtoa_r+0x1600>
    b6b0:	d9000615 	stw	r4,24(sp)
    b6b4:	0500050e 	bge	zero,r20,b6cc <_dtoa_r+0xe0c>
    b6b8:	880b883a 	mov	r5,r17
    b6bc:	a00d883a 	mov	r6,r20
    b6c0:	e009883a 	mov	r4,fp
    b6c4:	000dc6c0 	call	dc6c <__lshift>
    b6c8:	1023883a 	mov	r17,r2
    b6cc:	9801241e 	bne	r19,zero,bb60 <_dtoa_r+0x12a0>
    b6d0:	8829883a 	mov	r20,r17
    b6d4:	d9000617 	ldw	r4,24(sp)
    b6d8:	dcc00717 	ldw	r19,28(sp)
    b6dc:	9480004c 	andi	r18,r18,1
    b6e0:	20bfffc4 	addi	r2,r4,-1
    b6e4:	9885883a 	add	r2,r19,r2
    b6e8:	d8800415 	stw	r2,16(sp)
    b6ec:	dc800615 	stw	r18,24(sp)
    b6f0:	a80b883a 	mov	r5,r21
    b6f4:	8009883a 	mov	r4,r16
    b6f8:	000a6c00 	call	a6c0 <quorem>
    b6fc:	880b883a 	mov	r5,r17
    b700:	8009883a 	mov	r4,r16
    b704:	102f883a 	mov	r23,r2
    b708:	000ddb40 	call	ddb4 <__mcmp>
    b70c:	a80b883a 	mov	r5,r21
    b710:	a00d883a 	mov	r6,r20
    b714:	e009883a 	mov	r4,fp
    b718:	102d883a 	mov	r22,r2
    b71c:	000de140 	call	de14 <__mdiff>
    b720:	1007883a 	mov	r3,r2
    b724:	10800317 	ldw	r2,12(r2)
    b728:	bc800c04 	addi	r18,r23,48
    b72c:	180b883a 	mov	r5,r3
    b730:	10004e1e 	bne	r2,zero,b86c <_dtoa_r+0xfac>
    b734:	8009883a 	mov	r4,r16
    b738:	d8c01615 	stw	r3,88(sp)
    b73c:	000ddb40 	call	ddb4 <__mcmp>
    b740:	d8c01617 	ldw	r3,88(sp)
    b744:	e009883a 	mov	r4,fp
    b748:	d8801615 	stw	r2,88(sp)
    b74c:	180b883a 	mov	r5,r3
    b750:	000d5940 	call	d594 <_Bfree>
    b754:	d8801617 	ldw	r2,88(sp)
    b758:	1000041e 	bne	r2,zero,b76c <_dtoa_r+0xeac>
    b75c:	d9800317 	ldw	r6,12(sp)
    b760:	3000021e 	bne	r6,zero,b76c <_dtoa_r+0xeac>
    b764:	d8c00617 	ldw	r3,24(sp)
    b768:	18003726 	beq	r3,zero,b848 <_dtoa_r+0xf88>
    b76c:	b0002016 	blt	r22,zero,b7f0 <_dtoa_r+0xf30>
    b770:	b000041e 	bne	r22,zero,b784 <_dtoa_r+0xec4>
    b774:	d9000317 	ldw	r4,12(sp)
    b778:	2000021e 	bne	r4,zero,b784 <_dtoa_r+0xec4>
    b77c:	d8c00617 	ldw	r3,24(sp)
    b780:	18001b26 	beq	r3,zero,b7f0 <_dtoa_r+0xf30>
    b784:	00810716 	blt	zero,r2,bba4 <_dtoa_r+0x12e4>
    b788:	d8c00417 	ldw	r3,16(sp)
    b78c:	9d800044 	addi	r22,r19,1
    b790:	9c800005 	stb	r18,0(r19)
    b794:	b02f883a 	mov	r23,r22
    b798:	98c10626 	beq	r19,r3,bbb4 <_dtoa_r+0x12f4>
    b79c:	800b883a 	mov	r5,r16
    b7a0:	000f883a 	mov	r7,zero
    b7a4:	01800284 	movi	r6,10
    b7a8:	e009883a 	mov	r4,fp
    b7ac:	000d5bc0 	call	d5bc <__multadd>
    b7b0:	1021883a 	mov	r16,r2
    b7b4:	000f883a 	mov	r7,zero
    b7b8:	01800284 	movi	r6,10
    b7bc:	880b883a 	mov	r5,r17
    b7c0:	e009883a 	mov	r4,fp
    b7c4:	8d002526 	beq	r17,r20,b85c <_dtoa_r+0xf9c>
    b7c8:	000d5bc0 	call	d5bc <__multadd>
    b7cc:	a00b883a 	mov	r5,r20
    b7d0:	000f883a 	mov	r7,zero
    b7d4:	01800284 	movi	r6,10
    b7d8:	e009883a 	mov	r4,fp
    b7dc:	1023883a 	mov	r17,r2
    b7e0:	000d5bc0 	call	d5bc <__multadd>
    b7e4:	1029883a 	mov	r20,r2
    b7e8:	b027883a 	mov	r19,r22
    b7ec:	003fc006 	br	b6f0 <__alt_data_end+0xfc00b6f0>
    b7f0:	9011883a 	mov	r8,r18
    b7f4:	00800e0e 	bge	zero,r2,b830 <_dtoa_r+0xf70>
    b7f8:	800b883a 	mov	r5,r16
    b7fc:	01800044 	movi	r6,1
    b800:	e009883a 	mov	r4,fp
    b804:	da001715 	stw	r8,92(sp)
    b808:	000dc6c0 	call	dc6c <__lshift>
    b80c:	a80b883a 	mov	r5,r21
    b810:	1009883a 	mov	r4,r2
    b814:	1021883a 	mov	r16,r2
    b818:	000ddb40 	call	ddb4 <__mcmp>
    b81c:	da001717 	ldw	r8,92(sp)
    b820:	0081960e 	bge	zero,r2,be7c <_dtoa_r+0x15bc>
    b824:	00800e44 	movi	r2,57
    b828:	40817026 	beq	r8,r2,bdec <_dtoa_r+0x152c>
    b82c:	ba000c44 	addi	r8,r23,49
    b830:	8825883a 	mov	r18,r17
    b834:	9dc00044 	addi	r23,r19,1
    b838:	9a000005 	stb	r8,0(r19)
    b83c:	a023883a 	mov	r17,r20
    b840:	dc000915 	stw	r16,36(sp)
    b844:	003f2406 	br	b4d8 <__alt_data_end+0xfc00b4d8>
    b848:	00800e44 	movi	r2,57
    b84c:	9011883a 	mov	r8,r18
    b850:	90816626 	beq	r18,r2,bdec <_dtoa_r+0x152c>
    b854:	05bff516 	blt	zero,r22,b82c <__alt_data_end+0xfc00b82c>
    b858:	003ff506 	br	b830 <__alt_data_end+0xfc00b830>
    b85c:	000d5bc0 	call	d5bc <__multadd>
    b860:	1023883a 	mov	r17,r2
    b864:	1029883a 	mov	r20,r2
    b868:	003fdf06 	br	b7e8 <__alt_data_end+0xfc00b7e8>
    b86c:	e009883a 	mov	r4,fp
    b870:	000d5940 	call	d594 <_Bfree>
    b874:	00800044 	movi	r2,1
    b878:	003fbc06 	br	b76c <__alt_data_end+0xfc00b76c>
    b87c:	a80b883a 	mov	r5,r21
    b880:	8009883a 	mov	r4,r16
    b884:	000ddb40 	call	ddb4 <__mcmp>
    b888:	103edb0e 	bge	r2,zero,b3f8 <__alt_data_end+0xfc00b3f8>
    b88c:	800b883a 	mov	r5,r16
    b890:	000f883a 	mov	r7,zero
    b894:	01800284 	movi	r6,10
    b898:	e009883a 	mov	r4,fp
    b89c:	000d5bc0 	call	d5bc <__multadd>
    b8a0:	1021883a 	mov	r16,r2
    b8a4:	d8800517 	ldw	r2,20(sp)
    b8a8:	d8c00b17 	ldw	r3,44(sp)
    b8ac:	10bfffc4 	addi	r2,r2,-1
    b8b0:	d8800515 	stw	r2,20(sp)
    b8b4:	183f761e 	bne	r3,zero,b690 <__alt_data_end+0xfc00b690>
    b8b8:	d9000c17 	ldw	r4,48(sp)
    b8bc:	0101730e 	bge	zero,r4,be8c <_dtoa_r+0x15cc>
    b8c0:	d9000615 	stw	r4,24(sp)
    b8c4:	003ed006 	br	b408 <__alt_data_end+0xfc00b408>
    b8c8:	00800084 	movi	r2,2
    b8cc:	3081861e 	bne	r6,r2,bee8 <_dtoa_r+0x1628>
    b8d0:	d8000b15 	stw	zero,44(sp)
    b8d4:	003f3c06 	br	b5c8 <__alt_data_end+0xfc00b5c8>
    b8d8:	dc000917 	ldw	r16,36(sp)
    b8dc:	003e9206 	br	b328 <__alt_data_end+0xfc00b328>
    b8e0:	d9c00317 	ldw	r7,12(sp)
    b8e4:	00800084 	movi	r2,2
    b8e8:	11fec50e 	bge	r2,r7,b400 <__alt_data_end+0xfc00b400>
    b8ec:	d9000617 	ldw	r4,24(sp)
    b8f0:	20013c1e 	bne	r4,zero,bde4 <_dtoa_r+0x1524>
    b8f4:	a80b883a 	mov	r5,r21
    b8f8:	000f883a 	mov	r7,zero
    b8fc:	01800144 	movi	r6,5
    b900:	e009883a 	mov	r4,fp
    b904:	000d5bc0 	call	d5bc <__multadd>
    b908:	100b883a 	mov	r5,r2
    b90c:	8009883a 	mov	r4,r16
    b910:	102b883a 	mov	r21,r2
    b914:	000ddb40 	call	ddb4 <__mcmp>
    b918:	dc000915 	stw	r16,36(sp)
    b91c:	00bf410e 	bge	zero,r2,b624 <__alt_data_end+0xfc00b624>
    b920:	d9c00717 	ldw	r7,28(sp)
    b924:	00800c44 	movi	r2,49
    b928:	38800005 	stb	r2,0(r7)
    b92c:	d8800517 	ldw	r2,20(sp)
    b930:	3dc00044 	addi	r23,r7,1
    b934:	10800044 	addi	r2,r2,1
    b938:	d8800515 	stw	r2,20(sp)
    b93c:	003f3d06 	br	b634 <__alt_data_end+0xfc00b634>
    b940:	d9800517 	ldw	r6,20(sp)
    b944:	d9c00717 	ldw	r7,28(sp)
    b948:	00800c44 	movi	r2,49
    b94c:	31800044 	addi	r6,r6,1
    b950:	d9800515 	stw	r6,20(sp)
    b954:	38800005 	stb	r2,0(r7)
    b958:	003edf06 	br	b4d8 <__alt_data_end+0xfc00b4d8>
    b95c:	d8000b15 	stw	zero,44(sp)
    b960:	003c9f06 	br	abe0 <__alt_data_end+0xfc00abe0>
    b964:	903e7e1e 	bne	r18,zero,b360 <__alt_data_end+0xfc00b360>
    b968:	00800434 	movhi	r2,16
    b96c:	10bfffc4 	addi	r2,r2,-1
    b970:	9884703a 	and	r2,r19,r2
    b974:	1000ea1e 	bne	r2,zero,bd20 <_dtoa_r+0x1460>
    b978:	9cdffc2c 	andhi	r19,r19,32752
    b97c:	9800e826 	beq	r19,zero,bd20 <_dtoa_r+0x1460>
    b980:	d9c00817 	ldw	r7,32(sp)
    b984:	b5800044 	addi	r22,r22,1
    b988:	04c00044 	movi	r19,1
    b98c:	39c00044 	addi	r7,r7,1
    b990:	d9c00815 	stw	r7,32(sp)
    b994:	d8800d17 	ldw	r2,52(sp)
    b998:	103e721e 	bne	r2,zero,b364 <__alt_data_end+0xfc00b364>
    b99c:	00800044 	movi	r2,1
    b9a0:	003e7906 	br	b388 <__alt_data_end+0xfc00b388>
    b9a4:	8009883a 	mov	r4,r16
    b9a8:	0019e480 	call	19e48 <__floatsidf>
    b9ac:	d9800f17 	ldw	r6,60(sp)
    b9b0:	d9c01017 	ldw	r7,64(sp)
    b9b4:	1009883a 	mov	r4,r2
    b9b8:	180b883a 	mov	r5,r3
    b9bc:	0018db40 	call	18db4 <__muldf3>
    b9c0:	000d883a 	mov	r6,zero
    b9c4:	01d00734 	movhi	r7,16412
    b9c8:	1009883a 	mov	r4,r2
    b9cc:	180b883a 	mov	r5,r3
    b9d0:	00179c80 	call	179c8 <__adddf3>
    b9d4:	047f3034 	movhi	r17,64704
    b9d8:	1021883a 	mov	r16,r2
    b9dc:	1c63883a 	add	r17,r3,r17
    b9e0:	d9000f17 	ldw	r4,60(sp)
    b9e4:	d9401017 	ldw	r5,64(sp)
    b9e8:	000d883a 	mov	r6,zero
    b9ec:	01d00534 	movhi	r7,16404
    b9f0:	00194cc0 	call	194cc <__subdf3>
    b9f4:	800d883a 	mov	r6,r16
    b9f8:	880f883a 	mov	r7,r17
    b9fc:	1009883a 	mov	r4,r2
    ba00:	180b883a 	mov	r5,r3
    ba04:	102b883a 	mov	r21,r2
    ba08:	1829883a 	mov	r20,r3
    ba0c:	0018be40 	call	18be4 <__gedf2>
    ba10:	00806c16 	blt	zero,r2,bbc4 <_dtoa_r+0x1304>
    ba14:	89e0003c 	xorhi	r7,r17,32768
    ba18:	800d883a 	mov	r6,r16
    ba1c:	a809883a 	mov	r4,r21
    ba20:	a00b883a 	mov	r5,r20
    ba24:	0018cc00 	call	18cc0 <__ledf2>
    ba28:	103d7e0e 	bge	r2,zero,b024 <__alt_data_end+0xfc00b024>
    ba2c:	002b883a 	mov	r21,zero
    ba30:	0023883a 	mov	r17,zero
    ba34:	003efb06 	br	b624 <__alt_data_end+0xfc00b624>
    ba38:	d8800717 	ldw	r2,28(sp)
    ba3c:	003bd006 	br	a980 <__alt_data_end+0xfc00a980>
    ba40:	d9000a17 	ldw	r4,40(sp)
    ba44:	d9800d17 	ldw	r6,52(sp)
    ba48:	dd400a15 	stw	r21,40(sp)
    ba4c:	a905c83a 	sub	r2,r21,r4
    ba50:	308d883a 	add	r6,r6,r2
    ba54:	d9800d15 	stw	r6,52(sp)
    ba58:	002b883a 	mov	r21,zero
    ba5c:	003e0606 	br	b278 <__alt_data_end+0xfc00b278>
    ba60:	9023883a 	mov	r17,r18
    ba64:	9829883a 	mov	r20,r19
    ba68:	04000084 	movi	r16,2
    ba6c:	003c9206 	br	acb8 <__alt_data_end+0xfc00acb8>
    ba70:	04000044 	movi	r16,1
    ba74:	dc000c15 	stw	r16,48(sp)
    ba78:	dc000615 	stw	r16,24(sp)
    ba7c:	dc002215 	stw	r16,136(sp)
    ba80:	e0001115 	stw	zero,68(fp)
    ba84:	000b883a 	mov	r5,zero
    ba88:	003c6906 	br	ac30 <__alt_data_end+0xfc00ac30>
    ba8c:	3021883a 	mov	r16,r6
    ba90:	003ffb06 	br	ba80 <__alt_data_end+0xfc00ba80>
    ba94:	1000021e 	bne	r2,zero,baa0 <_dtoa_r+0x11e0>
    ba98:	4200004c 	andi	r8,r8,1
    ba9c:	403e7d1e 	bne	r8,zero,b494 <__alt_data_end+0xfc00b494>
    baa0:	01000c04 	movi	r4,48
    baa4:	00000106 	br	baac <_dtoa_r+0x11ec>
    baa8:	102f883a 	mov	r23,r2
    baac:	b8bfffc4 	addi	r2,r23,-1
    bab0:	10c00007 	ldb	r3,0(r2)
    bab4:	193ffc26 	beq	r3,r4,baa8 <__alt_data_end+0xfc00baa8>
    bab8:	003e8706 	br	b4d8 <__alt_data_end+0xfc00b4d8>
    babc:	d8800517 	ldw	r2,20(sp)
    bac0:	00a3c83a 	sub	r17,zero,r2
    bac4:	8800a426 	beq	r17,zero,bd58 <_dtoa_r+0x1498>
    bac8:	888003cc 	andi	r2,r17,15
    bacc:	100490fa 	slli	r2,r2,3
    bad0:	00c000b4 	movhi	r3,2
    bad4:	18d61304 	addi	r3,r3,22604
    bad8:	1885883a 	add	r2,r3,r2
    badc:	11800017 	ldw	r6,0(r2)
    bae0:	11c00117 	ldw	r7,4(r2)
    bae4:	9009883a 	mov	r4,r18
    bae8:	980b883a 	mov	r5,r19
    baec:	8823d13a 	srai	r17,r17,4
    baf0:	0018db40 	call	18db4 <__muldf3>
    baf4:	d8800f15 	stw	r2,60(sp)
    baf8:	d8c01015 	stw	r3,64(sp)
    bafc:	8800e826 	beq	r17,zero,bea0 <_dtoa_r+0x15e0>
    bb00:	050000b4 	movhi	r20,2
    bb04:	a5160904 	addi	r20,r20,22564
    bb08:	04000084 	movi	r16,2
    bb0c:	8980004c 	andi	r6,r17,1
    bb10:	1009883a 	mov	r4,r2
    bb14:	8823d07a 	srai	r17,r17,1
    bb18:	180b883a 	mov	r5,r3
    bb1c:	30000426 	beq	r6,zero,bb30 <_dtoa_r+0x1270>
    bb20:	a1800017 	ldw	r6,0(r20)
    bb24:	a1c00117 	ldw	r7,4(r20)
    bb28:	84000044 	addi	r16,r16,1
    bb2c:	0018db40 	call	18db4 <__muldf3>
    bb30:	a5000204 	addi	r20,r20,8
    bb34:	883ff51e 	bne	r17,zero,bb0c <__alt_data_end+0xfc00bb0c>
    bb38:	d8800f15 	stw	r2,60(sp)
    bb3c:	d8c01015 	stw	r3,64(sp)
    bb40:	003c7606 	br	ad1c <__alt_data_end+0xfc00ad1c>
    bb44:	00c00c04 	movi	r3,48
    bb48:	10c00005 	stb	r3,0(r2)
    bb4c:	d8c00517 	ldw	r3,20(sp)
    bb50:	bd3fffc3 	ldbu	r20,-1(r23)
    bb54:	18c00044 	addi	r3,r3,1
    bb58:	d8c00515 	stw	r3,20(sp)
    bb5c:	003db906 	br	b244 <__alt_data_end+0xfc00b244>
    bb60:	89400117 	ldw	r5,4(r17)
    bb64:	e009883a 	mov	r4,fp
    bb68:	000d4ec0 	call	d4ec <_Balloc>
    bb6c:	89800417 	ldw	r6,16(r17)
    bb70:	89400304 	addi	r5,r17,12
    bb74:	11000304 	addi	r4,r2,12
    bb78:	31800084 	addi	r6,r6,2
    bb7c:	318d883a 	add	r6,r6,r6
    bb80:	318d883a 	add	r6,r6,r6
    bb84:	1027883a 	mov	r19,r2
    bb88:	00059380 	call	5938 <memcpy>
    bb8c:	01800044 	movi	r6,1
    bb90:	980b883a 	mov	r5,r19
    bb94:	e009883a 	mov	r4,fp
    bb98:	000dc6c0 	call	dc6c <__lshift>
    bb9c:	1029883a 	mov	r20,r2
    bba0:	003ecc06 	br	b6d4 <__alt_data_end+0xfc00b6d4>
    bba4:	00800e44 	movi	r2,57
    bba8:	90809026 	beq	r18,r2,bdec <_dtoa_r+0x152c>
    bbac:	92000044 	addi	r8,r18,1
    bbb0:	003f1f06 	br	b830 <__alt_data_end+0xfc00b830>
    bbb4:	9011883a 	mov	r8,r18
    bbb8:	8825883a 	mov	r18,r17
    bbbc:	a023883a 	mov	r17,r20
    bbc0:	003e2906 	br	b468 <__alt_data_end+0xfc00b468>
    bbc4:	002b883a 	mov	r21,zero
    bbc8:	0023883a 	mov	r17,zero
    bbcc:	003f5406 	br	b920 <__alt_data_end+0xfc00b920>
    bbd0:	61bfffc4 	addi	r6,r12,-1
    bbd4:	300490fa 	slli	r2,r6,3
    bbd8:	00c000b4 	movhi	r3,2
    bbdc:	18d61304 	addi	r3,r3,22604
    bbe0:	1885883a 	add	r2,r3,r2
    bbe4:	11000017 	ldw	r4,0(r2)
    bbe8:	11400117 	ldw	r5,4(r2)
    bbec:	d8800717 	ldw	r2,28(sp)
    bbf0:	880f883a 	mov	r7,r17
    bbf4:	d9801215 	stw	r6,72(sp)
    bbf8:	800d883a 	mov	r6,r16
    bbfc:	db001615 	stw	r12,88(sp)
    bc00:	15c00044 	addi	r23,r2,1
    bc04:	0018db40 	call	18db4 <__muldf3>
    bc08:	d9401017 	ldw	r5,64(sp)
    bc0c:	d9000f17 	ldw	r4,60(sp)
    bc10:	d8c01515 	stw	r3,84(sp)
    bc14:	d8801415 	stw	r2,80(sp)
    bc18:	0019dc80 	call	19dc8 <__fixdfsi>
    bc1c:	1009883a 	mov	r4,r2
    bc20:	1021883a 	mov	r16,r2
    bc24:	0019e480 	call	19e48 <__floatsidf>
    bc28:	d9000f17 	ldw	r4,60(sp)
    bc2c:	d9401017 	ldw	r5,64(sp)
    bc30:	100d883a 	mov	r6,r2
    bc34:	180f883a 	mov	r7,r3
    bc38:	00194cc0 	call	194cc <__subdf3>
    bc3c:	1829883a 	mov	r20,r3
    bc40:	d8c00717 	ldw	r3,28(sp)
    bc44:	84000c04 	addi	r16,r16,48
    bc48:	1023883a 	mov	r17,r2
    bc4c:	1c000005 	stb	r16,0(r3)
    bc50:	db001617 	ldw	r12,88(sp)
    bc54:	00800044 	movi	r2,1
    bc58:	60802226 	beq	r12,r2,bce4 <_dtoa_r+0x1424>
    bc5c:	d9c00717 	ldw	r7,28(sp)
    bc60:	8805883a 	mov	r2,r17
    bc64:	b82b883a 	mov	r21,r23
    bc68:	3b19883a 	add	r12,r7,r12
    bc6c:	6023883a 	mov	r17,r12
    bc70:	a007883a 	mov	r3,r20
    bc74:	dc800f15 	stw	r18,60(sp)
    bc78:	000d883a 	mov	r6,zero
    bc7c:	01d00934 	movhi	r7,16420
    bc80:	1009883a 	mov	r4,r2
    bc84:	180b883a 	mov	r5,r3
    bc88:	0018db40 	call	18db4 <__muldf3>
    bc8c:	180b883a 	mov	r5,r3
    bc90:	1009883a 	mov	r4,r2
    bc94:	1829883a 	mov	r20,r3
    bc98:	1025883a 	mov	r18,r2
    bc9c:	0019dc80 	call	19dc8 <__fixdfsi>
    bca0:	1009883a 	mov	r4,r2
    bca4:	1021883a 	mov	r16,r2
    bca8:	0019e480 	call	19e48 <__floatsidf>
    bcac:	100d883a 	mov	r6,r2
    bcb0:	180f883a 	mov	r7,r3
    bcb4:	9009883a 	mov	r4,r18
    bcb8:	a00b883a 	mov	r5,r20
    bcbc:	84000c04 	addi	r16,r16,48
    bcc0:	00194cc0 	call	194cc <__subdf3>
    bcc4:	ad400044 	addi	r21,r21,1
    bcc8:	ac3fffc5 	stb	r16,-1(r21)
    bccc:	ac7fea1e 	bne	r21,r17,bc78 <__alt_data_end+0xfc00bc78>
    bcd0:	1023883a 	mov	r17,r2
    bcd4:	d8801217 	ldw	r2,72(sp)
    bcd8:	dc800f17 	ldw	r18,60(sp)
    bcdc:	1829883a 	mov	r20,r3
    bce0:	b8af883a 	add	r23,r23,r2
    bce4:	d9001417 	ldw	r4,80(sp)
    bce8:	d9401517 	ldw	r5,84(sp)
    bcec:	000d883a 	mov	r6,zero
    bcf0:	01cff834 	movhi	r7,16352
    bcf4:	00179c80 	call	179c8 <__adddf3>
    bcf8:	880d883a 	mov	r6,r17
    bcfc:	a00f883a 	mov	r7,r20
    bd00:	1009883a 	mov	r4,r2
    bd04:	180b883a 	mov	r5,r3
    bd08:	0018cc00 	call	18cc0 <__ledf2>
    bd0c:	10003e0e 	bge	r2,zero,be08 <_dtoa_r+0x1548>
    bd10:	d9001317 	ldw	r4,76(sp)
    bd14:	bd3fffc3 	ldbu	r20,-1(r23)
    bd18:	d9000515 	stw	r4,20(sp)
    bd1c:	003d3b06 	br	b20c <__alt_data_end+0xfc00b20c>
    bd20:	0027883a 	mov	r19,zero
    bd24:	003f1b06 	br	b994 <__alt_data_end+0xfc00b994>
    bd28:	d8800817 	ldw	r2,32(sp)
    bd2c:	11e9c83a 	sub	r20,r2,r7
    bd30:	0005883a 	mov	r2,zero
    bd34:	003d5406 	br	b288 <__alt_data_end+0xfc00b288>
    bd38:	00800044 	movi	r2,1
    bd3c:	003dc706 	br	b45c <__alt_data_end+0xfc00b45c>
    bd40:	d8c00217 	ldw	r3,8(sp)
    bd44:	00800d84 	movi	r2,54
    bd48:	dd400a17 	ldw	r21,40(sp)
    bd4c:	10c5c83a 	sub	r2,r2,r3
    bd50:	dd000817 	ldw	r20,32(sp)
    bd54:	003d4c06 	br	b288 <__alt_data_end+0xfc00b288>
    bd58:	dc800f15 	stw	r18,60(sp)
    bd5c:	dcc01015 	stw	r19,64(sp)
    bd60:	04000084 	movi	r16,2
    bd64:	003bed06 	br	ad1c <__alt_data_end+0xfc00ad1c>
    bd68:	d9000617 	ldw	r4,24(sp)
    bd6c:	203f0d26 	beq	r4,zero,b9a4 <__alt_data_end+0xfc00b9a4>
    bd70:	d9800c17 	ldw	r6,48(sp)
    bd74:	01bcab0e 	bge	zero,r6,b024 <__alt_data_end+0xfc00b024>
    bd78:	d9401017 	ldw	r5,64(sp)
    bd7c:	d9000f17 	ldw	r4,60(sp)
    bd80:	000d883a 	mov	r6,zero
    bd84:	01d00934 	movhi	r7,16420
    bd88:	0018db40 	call	18db4 <__muldf3>
    bd8c:	81000044 	addi	r4,r16,1
    bd90:	d8800f15 	stw	r2,60(sp)
    bd94:	d8c01015 	stw	r3,64(sp)
    bd98:	0019e480 	call	19e48 <__floatsidf>
    bd9c:	d9800f17 	ldw	r6,60(sp)
    bda0:	d9c01017 	ldw	r7,64(sp)
    bda4:	1009883a 	mov	r4,r2
    bda8:	180b883a 	mov	r5,r3
    bdac:	0018db40 	call	18db4 <__muldf3>
    bdb0:	01d00734 	movhi	r7,16412
    bdb4:	000d883a 	mov	r6,zero
    bdb8:	1009883a 	mov	r4,r2
    bdbc:	180b883a 	mov	r5,r3
    bdc0:	00179c80 	call	179c8 <__adddf3>
    bdc4:	d9c00517 	ldw	r7,20(sp)
    bdc8:	047f3034 	movhi	r17,64704
    bdcc:	1021883a 	mov	r16,r2
    bdd0:	39ffffc4 	addi	r7,r7,-1
    bdd4:	d9c01315 	stw	r7,76(sp)
    bdd8:	1c63883a 	add	r17,r3,r17
    bddc:	db000c17 	ldw	r12,48(sp)
    bde0:	003bea06 	br	ad8c <__alt_data_end+0xfc00ad8c>
    bde4:	dc000915 	stw	r16,36(sp)
    bde8:	003e0e06 	br	b624 <__alt_data_end+0xfc00b624>
    bdec:	01000e44 	movi	r4,57
    bdf0:	8825883a 	mov	r18,r17
    bdf4:	9dc00044 	addi	r23,r19,1
    bdf8:	99000005 	stb	r4,0(r19)
    bdfc:	a023883a 	mov	r17,r20
    be00:	dc000915 	stw	r16,36(sp)
    be04:	003da406 	br	b498 <__alt_data_end+0xfc00b498>
    be08:	d9801417 	ldw	r6,80(sp)
    be0c:	d9c01517 	ldw	r7,84(sp)
    be10:	0009883a 	mov	r4,zero
    be14:	014ff834 	movhi	r5,16352
    be18:	00194cc0 	call	194cc <__subdf3>
    be1c:	880d883a 	mov	r6,r17
    be20:	a00f883a 	mov	r7,r20
    be24:	1009883a 	mov	r4,r2
    be28:	180b883a 	mov	r5,r3
    be2c:	0018be40 	call	18be4 <__gedf2>
    be30:	00bc7c0e 	bge	zero,r2,b024 <__alt_data_end+0xfc00b024>
    be34:	01000c04 	movi	r4,48
    be38:	00000106 	br	be40 <_dtoa_r+0x1580>
    be3c:	102f883a 	mov	r23,r2
    be40:	b8bfffc4 	addi	r2,r23,-1
    be44:	10c00007 	ldb	r3,0(r2)
    be48:	193ffc26 	beq	r3,r4,be3c <__alt_data_end+0xfc00be3c>
    be4c:	d9801317 	ldw	r6,76(sp)
    be50:	d9800515 	stw	r6,20(sp)
    be54:	003c4406 	br	af68 <__alt_data_end+0xfc00af68>
    be58:	d9801317 	ldw	r6,76(sp)
    be5c:	d9800515 	stw	r6,20(sp)
    be60:	003cea06 	br	b20c <__alt_data_end+0xfc00b20c>
    be64:	dd800f17 	ldw	r22,60(sp)
    be68:	dcc01017 	ldw	r19,64(sp)
    be6c:	dc801217 	ldw	r18,72(sp)
    be70:	003c6c06 	br	b024 <__alt_data_end+0xfc00b024>
    be74:	903e031e 	bne	r18,zero,b684 <__alt_data_end+0xfc00b684>
    be78:	003ebb06 	br	b968 <__alt_data_end+0xfc00b968>
    be7c:	103e6c1e 	bne	r2,zero,b830 <__alt_data_end+0xfc00b830>
    be80:	4080004c 	andi	r2,r8,1
    be84:	103e6a26 	beq	r2,zero,b830 <__alt_data_end+0xfc00b830>
    be88:	003e6606 	br	b824 <__alt_data_end+0xfc00b824>
    be8c:	d8c00317 	ldw	r3,12(sp)
    be90:	00800084 	movi	r2,2
    be94:	10c02916 	blt	r2,r3,bf3c <_dtoa_r+0x167c>
    be98:	d9000c17 	ldw	r4,48(sp)
    be9c:	003e8806 	br	b8c0 <__alt_data_end+0xfc00b8c0>
    bea0:	04000084 	movi	r16,2
    bea4:	003b9d06 	br	ad1c <__alt_data_end+0xfc00ad1c>
    bea8:	d9001317 	ldw	r4,76(sp)
    beac:	d9000515 	stw	r4,20(sp)
    beb0:	003cd606 	br	b20c <__alt_data_end+0xfc00b20c>
    beb4:	d8801317 	ldw	r2,76(sp)
    beb8:	d8800515 	stw	r2,20(sp)
    bebc:	003c2a06 	br	af68 <__alt_data_end+0xfc00af68>
    bec0:	d9800317 	ldw	r6,12(sp)
    bec4:	00800084 	movi	r2,2
    bec8:	11801516 	blt	r2,r6,bf20 <_dtoa_r+0x1660>
    becc:	d9c00c17 	ldw	r7,48(sp)
    bed0:	d9c00615 	stw	r7,24(sp)
    bed4:	003df706 	br	b6b4 <__alt_data_end+0xfc00b6b4>
    bed8:	193d3926 	beq	r3,r4,b3c0 <__alt_data_end+0xfc00b3c0>
    bedc:	00c00f04 	movi	r3,60
    bee0:	1885c83a 	sub	r2,r3,r2
    bee4:	003ddf06 	br	b664 <__alt_data_end+0xfc00b664>
    bee8:	e009883a 	mov	r4,fp
    beec:	e0001115 	stw	zero,68(fp)
    bef0:	000b883a 	mov	r5,zero
    bef4:	000d4ec0 	call	d4ec <_Balloc>
    bef8:	d8800715 	stw	r2,28(sp)
    befc:	d8c00717 	ldw	r3,28(sp)
    bf00:	00bfffc4 	movi	r2,-1
    bf04:	01000044 	movi	r4,1
    bf08:	d8800c15 	stw	r2,48(sp)
    bf0c:	e0c01015 	stw	r3,64(fp)
    bf10:	d9000b15 	stw	r4,44(sp)
    bf14:	d8800615 	stw	r2,24(sp)
    bf18:	d8002215 	stw	zero,136(sp)
    bf1c:	003c4106 	br	b024 <__alt_data_end+0xfc00b024>
    bf20:	d8c00c17 	ldw	r3,48(sp)
    bf24:	d8c00615 	stw	r3,24(sp)
    bf28:	003e7006 	br	b8ec <__alt_data_end+0xfc00b8ec>
    bf2c:	04400044 	movi	r17,1
    bf30:	003b2006 	br	abb4 <__alt_data_end+0xfc00abb4>
    bf34:	000b883a 	mov	r5,zero
    bf38:	003b3d06 	br	ac30 <__alt_data_end+0xfc00ac30>
    bf3c:	d8800c17 	ldw	r2,48(sp)
    bf40:	d8800615 	stw	r2,24(sp)
    bf44:	003e6906 	br	b8ec <__alt_data_end+0xfc00b8ec>

0000bf48 <_fclose_r>:
    bf48:	28003926 	beq	r5,zero,c030 <_fclose_r+0xe8>
    bf4c:	defffc04 	addi	sp,sp,-16
    bf50:	dc400115 	stw	r17,4(sp)
    bf54:	dc000015 	stw	r16,0(sp)
    bf58:	dfc00315 	stw	ra,12(sp)
    bf5c:	dc800215 	stw	r18,8(sp)
    bf60:	2023883a 	mov	r17,r4
    bf64:	2821883a 	mov	r16,r5
    bf68:	20000226 	beq	r4,zero,bf74 <_fclose_r+0x2c>
    bf6c:	20800e17 	ldw	r2,56(r4)
    bf70:	10002726 	beq	r2,zero,c010 <_fclose_r+0xc8>
    bf74:	8080030f 	ldh	r2,12(r16)
    bf78:	1000071e 	bne	r2,zero,bf98 <_fclose_r+0x50>
    bf7c:	0005883a 	mov	r2,zero
    bf80:	dfc00317 	ldw	ra,12(sp)
    bf84:	dc800217 	ldw	r18,8(sp)
    bf88:	dc400117 	ldw	r17,4(sp)
    bf8c:	dc000017 	ldw	r16,0(sp)
    bf90:	dec00404 	addi	sp,sp,16
    bf94:	f800283a 	ret
    bf98:	800b883a 	mov	r5,r16
    bf9c:	8809883a 	mov	r4,r17
    bfa0:	000c04c0 	call	c04c <__sflush_r>
    bfa4:	1025883a 	mov	r18,r2
    bfa8:	80800b17 	ldw	r2,44(r16)
    bfac:	10000426 	beq	r2,zero,bfc0 <_fclose_r+0x78>
    bfb0:	81400717 	ldw	r5,28(r16)
    bfb4:	8809883a 	mov	r4,r17
    bfb8:	103ee83a 	callr	r2
    bfbc:	10001616 	blt	r2,zero,c018 <_fclose_r+0xd0>
    bfc0:	8080030b 	ldhu	r2,12(r16)
    bfc4:	1080200c 	andi	r2,r2,128
    bfc8:	1000151e 	bne	r2,zero,c020 <_fclose_r+0xd8>
    bfcc:	81400c17 	ldw	r5,48(r16)
    bfd0:	28000526 	beq	r5,zero,bfe8 <_fclose_r+0xa0>
    bfd4:	80801004 	addi	r2,r16,64
    bfd8:	28800226 	beq	r5,r2,bfe4 <_fclose_r+0x9c>
    bfdc:	8809883a 	mov	r4,r17
    bfe0:	000c6780 	call	c678 <_free_r>
    bfe4:	80000c15 	stw	zero,48(r16)
    bfe8:	81401117 	ldw	r5,68(r16)
    bfec:	28000326 	beq	r5,zero,bffc <_fclose_r+0xb4>
    bff0:	8809883a 	mov	r4,r17
    bff4:	000c6780 	call	c678 <_free_r>
    bff8:	80001115 	stw	zero,68(r16)
    bffc:	0004e580 	call	4e58 <__sfp_lock_acquire>
    c000:	8000030d 	sth	zero,12(r16)
    c004:	0004e5c0 	call	4e5c <__sfp_lock_release>
    c008:	9005883a 	mov	r2,r18
    c00c:	003fdc06 	br	bf80 <__alt_data_end+0xfc00bf80>
    c010:	0004e480 	call	4e48 <__sinit>
    c014:	003fd706 	br	bf74 <__alt_data_end+0xfc00bf74>
    c018:	04bfffc4 	movi	r18,-1
    c01c:	003fe806 	br	bfc0 <__alt_data_end+0xfc00bfc0>
    c020:	81400417 	ldw	r5,16(r16)
    c024:	8809883a 	mov	r4,r17
    c028:	000c6780 	call	c678 <_free_r>
    c02c:	003fe706 	br	bfcc <__alt_data_end+0xfc00bfcc>
    c030:	0005883a 	mov	r2,zero
    c034:	f800283a 	ret

0000c038 <fclose>:
    c038:	008000b4 	movhi	r2,2
    c03c:	109df804 	addi	r2,r2,30688
    c040:	200b883a 	mov	r5,r4
    c044:	11000017 	ldw	r4,0(r2)
    c048:	000bf481 	jmpi	bf48 <_fclose_r>

0000c04c <__sflush_r>:
    c04c:	2880030b 	ldhu	r2,12(r5)
    c050:	defffb04 	addi	sp,sp,-20
    c054:	dcc00315 	stw	r19,12(sp)
    c058:	dc400115 	stw	r17,4(sp)
    c05c:	dfc00415 	stw	ra,16(sp)
    c060:	dc800215 	stw	r18,8(sp)
    c064:	dc000015 	stw	r16,0(sp)
    c068:	10c0020c 	andi	r3,r2,8
    c06c:	2823883a 	mov	r17,r5
    c070:	2027883a 	mov	r19,r4
    c074:	1800311e 	bne	r3,zero,c13c <__sflush_r+0xf0>
    c078:	28c00117 	ldw	r3,4(r5)
    c07c:	10820014 	ori	r2,r2,2048
    c080:	2880030d 	sth	r2,12(r5)
    c084:	00c04b0e 	bge	zero,r3,c1b4 <__sflush_r+0x168>
    c088:	8a000a17 	ldw	r8,40(r17)
    c08c:	40002326 	beq	r8,zero,c11c <__sflush_r+0xd0>
    c090:	9c000017 	ldw	r16,0(r19)
    c094:	10c4000c 	andi	r3,r2,4096
    c098:	98000015 	stw	zero,0(r19)
    c09c:	18004826 	beq	r3,zero,c1c0 <__sflush_r+0x174>
    c0a0:	89801417 	ldw	r6,80(r17)
    c0a4:	10c0010c 	andi	r3,r2,4
    c0a8:	18000626 	beq	r3,zero,c0c4 <__sflush_r+0x78>
    c0ac:	88c00117 	ldw	r3,4(r17)
    c0b0:	88800c17 	ldw	r2,48(r17)
    c0b4:	30cdc83a 	sub	r6,r6,r3
    c0b8:	10000226 	beq	r2,zero,c0c4 <__sflush_r+0x78>
    c0bc:	88800f17 	ldw	r2,60(r17)
    c0c0:	308dc83a 	sub	r6,r6,r2
    c0c4:	89400717 	ldw	r5,28(r17)
    c0c8:	000f883a 	mov	r7,zero
    c0cc:	9809883a 	mov	r4,r19
    c0d0:	403ee83a 	callr	r8
    c0d4:	00ffffc4 	movi	r3,-1
    c0d8:	10c04426 	beq	r2,r3,c1ec <__sflush_r+0x1a0>
    c0dc:	88c0030b 	ldhu	r3,12(r17)
    c0e0:	89000417 	ldw	r4,16(r17)
    c0e4:	88000115 	stw	zero,4(r17)
    c0e8:	197dffcc 	andi	r5,r3,63487
    c0ec:	8940030d 	sth	r5,12(r17)
    c0f0:	89000015 	stw	r4,0(r17)
    c0f4:	18c4000c 	andi	r3,r3,4096
    c0f8:	18002c1e 	bne	r3,zero,c1ac <__sflush_r+0x160>
    c0fc:	89400c17 	ldw	r5,48(r17)
    c100:	9c000015 	stw	r16,0(r19)
    c104:	28000526 	beq	r5,zero,c11c <__sflush_r+0xd0>
    c108:	88801004 	addi	r2,r17,64
    c10c:	28800226 	beq	r5,r2,c118 <__sflush_r+0xcc>
    c110:	9809883a 	mov	r4,r19
    c114:	000c6780 	call	c678 <_free_r>
    c118:	88000c15 	stw	zero,48(r17)
    c11c:	0005883a 	mov	r2,zero
    c120:	dfc00417 	ldw	ra,16(sp)
    c124:	dcc00317 	ldw	r19,12(sp)
    c128:	dc800217 	ldw	r18,8(sp)
    c12c:	dc400117 	ldw	r17,4(sp)
    c130:	dc000017 	ldw	r16,0(sp)
    c134:	dec00504 	addi	sp,sp,20
    c138:	f800283a 	ret
    c13c:	2c800417 	ldw	r18,16(r5)
    c140:	903ff626 	beq	r18,zero,c11c <__alt_data_end+0xfc00c11c>
    c144:	2c000017 	ldw	r16,0(r5)
    c148:	108000cc 	andi	r2,r2,3
    c14c:	2c800015 	stw	r18,0(r5)
    c150:	84a1c83a 	sub	r16,r16,r18
    c154:	1000131e 	bne	r2,zero,c1a4 <__sflush_r+0x158>
    c158:	28800517 	ldw	r2,20(r5)
    c15c:	88800215 	stw	r2,8(r17)
    c160:	04000316 	blt	zero,r16,c170 <__sflush_r+0x124>
    c164:	003fed06 	br	c11c <__alt_data_end+0xfc00c11c>
    c168:	90a5883a 	add	r18,r18,r2
    c16c:	043feb0e 	bge	zero,r16,c11c <__alt_data_end+0xfc00c11c>
    c170:	88800917 	ldw	r2,36(r17)
    c174:	89400717 	ldw	r5,28(r17)
    c178:	800f883a 	mov	r7,r16
    c17c:	900d883a 	mov	r6,r18
    c180:	9809883a 	mov	r4,r19
    c184:	103ee83a 	callr	r2
    c188:	80a1c83a 	sub	r16,r16,r2
    c18c:	00bff616 	blt	zero,r2,c168 <__alt_data_end+0xfc00c168>
    c190:	88c0030b 	ldhu	r3,12(r17)
    c194:	00bfffc4 	movi	r2,-1
    c198:	18c01014 	ori	r3,r3,64
    c19c:	88c0030d 	sth	r3,12(r17)
    c1a0:	003fdf06 	br	c120 <__alt_data_end+0xfc00c120>
    c1a4:	0005883a 	mov	r2,zero
    c1a8:	003fec06 	br	c15c <__alt_data_end+0xfc00c15c>
    c1ac:	88801415 	stw	r2,80(r17)
    c1b0:	003fd206 	br	c0fc <__alt_data_end+0xfc00c0fc>
    c1b4:	28c00f17 	ldw	r3,60(r5)
    c1b8:	00ffb316 	blt	zero,r3,c088 <__alt_data_end+0xfc00c088>
    c1bc:	003fd706 	br	c11c <__alt_data_end+0xfc00c11c>
    c1c0:	89400717 	ldw	r5,28(r17)
    c1c4:	000d883a 	mov	r6,zero
    c1c8:	01c00044 	movi	r7,1
    c1cc:	9809883a 	mov	r4,r19
    c1d0:	403ee83a 	callr	r8
    c1d4:	100d883a 	mov	r6,r2
    c1d8:	00bfffc4 	movi	r2,-1
    c1dc:	30801426 	beq	r6,r2,c230 <__sflush_r+0x1e4>
    c1e0:	8880030b 	ldhu	r2,12(r17)
    c1e4:	8a000a17 	ldw	r8,40(r17)
    c1e8:	003fae06 	br	c0a4 <__alt_data_end+0xfc00c0a4>
    c1ec:	98c00017 	ldw	r3,0(r19)
    c1f0:	183fba26 	beq	r3,zero,c0dc <__alt_data_end+0xfc00c0dc>
    c1f4:	01000744 	movi	r4,29
    c1f8:	19000626 	beq	r3,r4,c214 <__sflush_r+0x1c8>
    c1fc:	01000584 	movi	r4,22
    c200:	19000426 	beq	r3,r4,c214 <__sflush_r+0x1c8>
    c204:	88c0030b 	ldhu	r3,12(r17)
    c208:	18c01014 	ori	r3,r3,64
    c20c:	88c0030d 	sth	r3,12(r17)
    c210:	003fc306 	br	c120 <__alt_data_end+0xfc00c120>
    c214:	8880030b 	ldhu	r2,12(r17)
    c218:	88c00417 	ldw	r3,16(r17)
    c21c:	88000115 	stw	zero,4(r17)
    c220:	10bdffcc 	andi	r2,r2,63487
    c224:	8880030d 	sth	r2,12(r17)
    c228:	88c00015 	stw	r3,0(r17)
    c22c:	003fb306 	br	c0fc <__alt_data_end+0xfc00c0fc>
    c230:	98800017 	ldw	r2,0(r19)
    c234:	103fea26 	beq	r2,zero,c1e0 <__alt_data_end+0xfc00c1e0>
    c238:	00c00744 	movi	r3,29
    c23c:	10c00226 	beq	r2,r3,c248 <__sflush_r+0x1fc>
    c240:	00c00584 	movi	r3,22
    c244:	10c0031e 	bne	r2,r3,c254 <__sflush_r+0x208>
    c248:	9c000015 	stw	r16,0(r19)
    c24c:	0005883a 	mov	r2,zero
    c250:	003fb306 	br	c120 <__alt_data_end+0xfc00c120>
    c254:	88c0030b 	ldhu	r3,12(r17)
    c258:	3005883a 	mov	r2,r6
    c25c:	18c01014 	ori	r3,r3,64
    c260:	88c0030d 	sth	r3,12(r17)
    c264:	003fae06 	br	c120 <__alt_data_end+0xfc00c120>

0000c268 <_fflush_r>:
    c268:	defffd04 	addi	sp,sp,-12
    c26c:	dc000115 	stw	r16,4(sp)
    c270:	dfc00215 	stw	ra,8(sp)
    c274:	2021883a 	mov	r16,r4
    c278:	20000226 	beq	r4,zero,c284 <_fflush_r+0x1c>
    c27c:	20800e17 	ldw	r2,56(r4)
    c280:	10000c26 	beq	r2,zero,c2b4 <_fflush_r+0x4c>
    c284:	2880030f 	ldh	r2,12(r5)
    c288:	1000051e 	bne	r2,zero,c2a0 <_fflush_r+0x38>
    c28c:	0005883a 	mov	r2,zero
    c290:	dfc00217 	ldw	ra,8(sp)
    c294:	dc000117 	ldw	r16,4(sp)
    c298:	dec00304 	addi	sp,sp,12
    c29c:	f800283a 	ret
    c2a0:	8009883a 	mov	r4,r16
    c2a4:	dfc00217 	ldw	ra,8(sp)
    c2a8:	dc000117 	ldw	r16,4(sp)
    c2ac:	dec00304 	addi	sp,sp,12
    c2b0:	000c04c1 	jmpi	c04c <__sflush_r>
    c2b4:	d9400015 	stw	r5,0(sp)
    c2b8:	0004e480 	call	4e48 <__sinit>
    c2bc:	d9400017 	ldw	r5,0(sp)
    c2c0:	003ff006 	br	c284 <__alt_data_end+0xfc00c284>

0000c2c4 <fflush>:
    c2c4:	20000526 	beq	r4,zero,c2dc <fflush+0x18>
    c2c8:	008000b4 	movhi	r2,2
    c2cc:	109df804 	addi	r2,r2,30688
    c2d0:	200b883a 	mov	r5,r4
    c2d4:	11000017 	ldw	r4,0(r2)
    c2d8:	000c2681 	jmpi	c268 <_fflush_r>
    c2dc:	008000b4 	movhi	r2,2
    c2e0:	109df704 	addi	r2,r2,30684
    c2e4:	11000017 	ldw	r4,0(r2)
    c2e8:	01400074 	movhi	r5,1
    c2ec:	29709a04 	addi	r5,r5,-15768
    c2f0:	0004f5c1 	jmpi	4f5c <_fwalk_reent>

0000c2f4 <_fread_r>:
    c2f4:	defff404 	addi	sp,sp,-48
    c2f8:	dd800815 	stw	r22,32(sp)
    c2fc:	39ad383a 	mul	r22,r7,r6
    c300:	dc000215 	stw	r16,8(sp)
    c304:	dfc00b15 	stw	ra,44(sp)
    c308:	df000a15 	stw	fp,40(sp)
    c30c:	ddc00915 	stw	r23,36(sp)
    c310:	dd400715 	stw	r21,28(sp)
    c314:	dd000615 	stw	r20,24(sp)
    c318:	dcc00515 	stw	r19,20(sp)
    c31c:	dc800415 	stw	r18,16(sp)
    c320:	dc400315 	stw	r17,12(sp)
    c324:	dc000c17 	ldw	r16,48(sp)
    c328:	b0003b26 	beq	r22,zero,c418 <_fread_r+0x124>
    c32c:	302f883a 	mov	r23,r6
    c330:	382b883a 	mov	r21,r7
    c334:	2029883a 	mov	r20,r4
    c338:	2827883a 	mov	r19,r5
    c33c:	20000226 	beq	r4,zero,c348 <_fread_r+0x54>
    c340:	20800e17 	ldw	r2,56(r4)
    c344:	10006e26 	beq	r2,zero,c500 <_fread_r+0x20c>
    c348:	8080030b 	ldhu	r2,12(r16)
    c34c:	10c8000c 	andi	r3,r2,8192
    c350:	1800061e 	bne	r3,zero,c36c <_fread_r+0x78>
    c354:	81001917 	ldw	r4,100(r16)
    c358:	00f7ffc4 	movi	r3,-8193
    c35c:	10880014 	ori	r2,r2,8192
    c360:	20c6703a 	and	r3,r4,r3
    c364:	8080030d 	sth	r2,12(r16)
    c368:	80c01915 	stw	r3,100(r16)
    c36c:	84400117 	ldw	r17,4(r16)
    c370:	88005f16 	blt	r17,zero,c4f0 <_fread_r+0x1fc>
    c374:	8809883a 	mov	r4,r17
    c378:	1080008c 	andi	r2,r2,2
    c37c:	1000281e 	bne	r2,zero,c420 <_fread_r+0x12c>
    c380:	b025883a 	mov	r18,r22
    c384:	00000b06 	br	c3b4 <_fread_r+0xc0>
    c388:	00059380 	call	5938 <memcpy>
    c38c:	80800017 	ldw	r2,0(r16)
    c390:	9c67883a 	add	r19,r19,r17
    c394:	9465c83a 	sub	r18,r18,r17
    c398:	1463883a 	add	r17,r2,r17
    c39c:	800b883a 	mov	r5,r16
    c3a0:	a009883a 	mov	r4,r20
    c3a4:	84400015 	stw	r17,0(r16)
    c3a8:	00062a00 	call	62a0 <__srefill_r>
    c3ac:	10004c1e 	bne	r2,zero,c4e0 <_fread_r+0x1ec>
    c3b0:	84400117 	ldw	r17,4(r16)
    c3b4:	880d883a 	mov	r6,r17
    c3b8:	9809883a 	mov	r4,r19
    c3bc:	81400017 	ldw	r5,0(r16)
    c3c0:	8cbff136 	bltu	r17,r18,c388 <__alt_data_end+0xfc00c388>
    c3c4:	900d883a 	mov	r6,r18
    c3c8:	00059380 	call	5938 <memcpy>
    c3cc:	80c00117 	ldw	r3,4(r16)
    c3d0:	81000017 	ldw	r4,0(r16)
    c3d4:	a805883a 	mov	r2,r21
    c3d8:	1c87c83a 	sub	r3,r3,r18
    c3dc:	24a5883a 	add	r18,r4,r18
    c3e0:	80c00115 	stw	r3,4(r16)
    c3e4:	84800015 	stw	r18,0(r16)
    c3e8:	dfc00b17 	ldw	ra,44(sp)
    c3ec:	df000a17 	ldw	fp,40(sp)
    c3f0:	ddc00917 	ldw	r23,36(sp)
    c3f4:	dd800817 	ldw	r22,32(sp)
    c3f8:	dd400717 	ldw	r21,28(sp)
    c3fc:	dd000617 	ldw	r20,24(sp)
    c400:	dcc00517 	ldw	r19,20(sp)
    c404:	dc800417 	ldw	r18,16(sp)
    c408:	dc400317 	ldw	r17,12(sp)
    c40c:	dc000217 	ldw	r16,8(sp)
    c410:	dec00c04 	addi	sp,sp,48
    c414:	f800283a 	ret
    c418:	0005883a 	mov	r2,zero
    c41c:	003ff206 	br	c3e8 <__alt_data_end+0xfc00c3e8>
    c420:	b007883a 	mov	r3,r22
    c424:	2580012e 	bgeu	r4,r22,c42c <_fread_r+0x138>
    c428:	2007883a 	mov	r3,r4
    c42c:	81400017 	ldw	r5,0(r16)
    c430:	180d883a 	mov	r6,r3
    c434:	9809883a 	mov	r4,r19
    c438:	d8c00115 	stw	r3,4(sp)
    c43c:	00059380 	call	5938 <memcpy>
    c440:	d8c00117 	ldw	r3,4(sp)
    c444:	84400017 	ldw	r17,0(r16)
    c448:	80800117 	ldw	r2,4(r16)
    c44c:	81400c17 	ldw	r5,48(r16)
    c450:	88e3883a 	add	r17,r17,r3
    c454:	10c5c83a 	sub	r2,r2,r3
    c458:	84400015 	stw	r17,0(r16)
    c45c:	80800115 	stw	r2,4(r16)
    c460:	b0e5c83a 	sub	r18,r22,r3
    c464:	28002b26 	beq	r5,zero,c514 <_fread_r+0x220>
    c468:	90002b26 	beq	r18,zero,c518 <_fread_r+0x224>
    c46c:	80801004 	addi	r2,r16,64
    c470:	28800526 	beq	r5,r2,c488 <_fread_r+0x194>
    c474:	a009883a 	mov	r4,r20
    c478:	d8c00115 	stw	r3,4(sp)
    c47c:	000c6780 	call	c678 <_free_r>
    c480:	d8c00117 	ldw	r3,4(sp)
    c484:	84400017 	ldw	r17,0(r16)
    c488:	80000c15 	stw	zero,48(r16)
    c48c:	80800517 	ldw	r2,20(r16)
    c490:	87000417 	ldw	fp,16(r16)
    c494:	98e7883a 	add	r19,r19,r3
    c498:	d8800015 	stw	r2,0(sp)
    c49c:	00000106 	br	c4a4 <_fread_r+0x1b0>
    c4a0:	90001d26 	beq	r18,zero,c518 <_fread_r+0x224>
    c4a4:	84c00415 	stw	r19,16(r16)
    c4a8:	84800515 	stw	r18,20(r16)
    c4ac:	84c00015 	stw	r19,0(r16)
    c4b0:	a009883a 	mov	r4,r20
    c4b4:	800b883a 	mov	r5,r16
    c4b8:	00062a00 	call	62a0 <__srefill_r>
    c4bc:	d9000017 	ldw	r4,0(sp)
    c4c0:	80c00117 	ldw	r3,4(r16)
    c4c4:	87000415 	stw	fp,16(r16)
    c4c8:	81000515 	stw	r4,20(r16)
    c4cc:	84400015 	stw	r17,0(r16)
    c4d0:	80000115 	stw	zero,4(r16)
    c4d4:	90e5c83a 	sub	r18,r18,r3
    c4d8:	98e7883a 	add	r19,r19,r3
    c4dc:	103ff026 	beq	r2,zero,c4a0 <__alt_data_end+0xfc00c4a0>
    c4e0:	b80b883a 	mov	r5,r23
    c4e4:	b489c83a 	sub	r4,r22,r18
    c4e8:	00177100 	call	17710 <__udivsi3>
    c4ec:	003fbe06 	br	c3e8 <__alt_data_end+0xfc00c3e8>
    c4f0:	80000115 	stw	zero,4(r16)
    c4f4:	0009883a 	mov	r4,zero
    c4f8:	0023883a 	mov	r17,zero
    c4fc:	003f9e06 	br	c378 <__alt_data_end+0xfc00c378>
    c500:	0004e480 	call	4e48 <__sinit>
    c504:	8080030b 	ldhu	r2,12(r16)
    c508:	10c8000c 	andi	r3,r2,8192
    c50c:	183f971e 	bne	r3,zero,c36c <__alt_data_end+0xfc00c36c>
    c510:	003f9006 	br	c354 <__alt_data_end+0xfc00c354>
    c514:	903fdd1e 	bne	r18,zero,c48c <__alt_data_end+0xfc00c48c>
    c518:	a805883a 	mov	r2,r21
    c51c:	003fb206 	br	c3e8 <__alt_data_end+0xfc00c3e8>

0000c520 <fread>:
    c520:	defffe04 	addi	sp,sp,-8
    c524:	008000b4 	movhi	r2,2
    c528:	d9c00015 	stw	r7,0(sp)
    c52c:	109df804 	addi	r2,r2,30688
    c530:	300f883a 	mov	r7,r6
    c534:	280d883a 	mov	r6,r5
    c538:	200b883a 	mov	r5,r4
    c53c:	11000017 	ldw	r4,0(r2)
    c540:	dfc00115 	stw	ra,4(sp)
    c544:	000c2f40 	call	c2f4 <_fread_r>
    c548:	dfc00117 	ldw	ra,4(sp)
    c54c:	dec00204 	addi	sp,sp,8
    c550:	f800283a 	ret

0000c554 <_malloc_trim_r>:
    c554:	defffb04 	addi	sp,sp,-20
    c558:	dcc00315 	stw	r19,12(sp)
    c55c:	04c000b4 	movhi	r19,2
    c560:	dc800215 	stw	r18,8(sp)
    c564:	dc400115 	stw	r17,4(sp)
    c568:	dc000015 	stw	r16,0(sp)
    c56c:	dfc00415 	stw	ra,16(sp)
    c570:	2821883a 	mov	r16,r5
    c574:	9cd85204 	addi	r19,r19,24904
    c578:	2025883a 	mov	r18,r4
    c57c:	001ac380 	call	1ac38 <__malloc_lock>
    c580:	98800217 	ldw	r2,8(r19)
    c584:	14400117 	ldw	r17,4(r2)
    c588:	00bfff04 	movi	r2,-4
    c58c:	88a2703a 	and	r17,r17,r2
    c590:	8c21c83a 	sub	r16,r17,r16
    c594:	8403fbc4 	addi	r16,r16,4079
    c598:	8020d33a 	srli	r16,r16,12
    c59c:	0083ffc4 	movi	r2,4095
    c5a0:	843fffc4 	addi	r16,r16,-1
    c5a4:	8020933a 	slli	r16,r16,12
    c5a8:	1400060e 	bge	r2,r16,c5c4 <_malloc_trim_r+0x70>
    c5ac:	000b883a 	mov	r5,zero
    c5b0:	9009883a 	mov	r4,r18
    c5b4:	00064740 	call	6474 <_sbrk_r>
    c5b8:	98c00217 	ldw	r3,8(r19)
    c5bc:	1c47883a 	add	r3,r3,r17
    c5c0:	10c00a26 	beq	r2,r3,c5ec <_malloc_trim_r+0x98>
    c5c4:	9009883a 	mov	r4,r18
    c5c8:	001ad580 	call	1ad58 <__malloc_unlock>
    c5cc:	0005883a 	mov	r2,zero
    c5d0:	dfc00417 	ldw	ra,16(sp)
    c5d4:	dcc00317 	ldw	r19,12(sp)
    c5d8:	dc800217 	ldw	r18,8(sp)
    c5dc:	dc400117 	ldw	r17,4(sp)
    c5e0:	dc000017 	ldw	r16,0(sp)
    c5e4:	dec00504 	addi	sp,sp,20
    c5e8:	f800283a 	ret
    c5ec:	040bc83a 	sub	r5,zero,r16
    c5f0:	9009883a 	mov	r4,r18
    c5f4:	00064740 	call	6474 <_sbrk_r>
    c5f8:	00ffffc4 	movi	r3,-1
    c5fc:	10c00d26 	beq	r2,r3,c634 <_malloc_trim_r+0xe0>
    c600:	00c000f4 	movhi	r3,3
    c604:	18e52e04 	addi	r3,r3,-27464
    c608:	18800017 	ldw	r2,0(r3)
    c60c:	99000217 	ldw	r4,8(r19)
    c610:	8c23c83a 	sub	r17,r17,r16
    c614:	8c400054 	ori	r17,r17,1
    c618:	1421c83a 	sub	r16,r2,r16
    c61c:	24400115 	stw	r17,4(r4)
    c620:	9009883a 	mov	r4,r18
    c624:	1c000015 	stw	r16,0(r3)
    c628:	001ad580 	call	1ad58 <__malloc_unlock>
    c62c:	00800044 	movi	r2,1
    c630:	003fe706 	br	c5d0 <__alt_data_end+0xfc00c5d0>
    c634:	000b883a 	mov	r5,zero
    c638:	9009883a 	mov	r4,r18
    c63c:	00064740 	call	6474 <_sbrk_r>
    c640:	99000217 	ldw	r4,8(r19)
    c644:	014003c4 	movi	r5,15
    c648:	1107c83a 	sub	r3,r2,r4
    c64c:	28ffdd0e 	bge	r5,r3,c5c4 <__alt_data_end+0xfc00c5c4>
    c650:	014000b4 	movhi	r5,2
    c654:	295df904 	addi	r5,r5,30692
    c658:	29400017 	ldw	r5,0(r5)
    c65c:	18c00054 	ori	r3,r3,1
    c660:	20c00115 	stw	r3,4(r4)
    c664:	00c000f4 	movhi	r3,3
    c668:	1145c83a 	sub	r2,r2,r5
    c66c:	18e52e04 	addi	r3,r3,-27464
    c670:	18800015 	stw	r2,0(r3)
    c674:	003fd306 	br	c5c4 <__alt_data_end+0xfc00c5c4>

0000c678 <_free_r>:
    c678:	28004126 	beq	r5,zero,c780 <_free_r+0x108>
    c67c:	defffd04 	addi	sp,sp,-12
    c680:	dc400115 	stw	r17,4(sp)
    c684:	dc000015 	stw	r16,0(sp)
    c688:	2023883a 	mov	r17,r4
    c68c:	2821883a 	mov	r16,r5
    c690:	dfc00215 	stw	ra,8(sp)
    c694:	001ac380 	call	1ac38 <__malloc_lock>
    c698:	81ffff17 	ldw	r7,-4(r16)
    c69c:	00bfff84 	movi	r2,-2
    c6a0:	010000b4 	movhi	r4,2
    c6a4:	81bffe04 	addi	r6,r16,-8
    c6a8:	3884703a 	and	r2,r7,r2
    c6ac:	21185204 	addi	r4,r4,24904
    c6b0:	308b883a 	add	r5,r6,r2
    c6b4:	2a400117 	ldw	r9,4(r5)
    c6b8:	22000217 	ldw	r8,8(r4)
    c6bc:	00ffff04 	movi	r3,-4
    c6c0:	48c6703a 	and	r3,r9,r3
    c6c4:	2a005726 	beq	r5,r8,c824 <_free_r+0x1ac>
    c6c8:	28c00115 	stw	r3,4(r5)
    c6cc:	39c0004c 	andi	r7,r7,1
    c6d0:	3800091e 	bne	r7,zero,c6f8 <_free_r+0x80>
    c6d4:	823ffe17 	ldw	r8,-8(r16)
    c6d8:	22400204 	addi	r9,r4,8
    c6dc:	320dc83a 	sub	r6,r6,r8
    c6e0:	31c00217 	ldw	r7,8(r6)
    c6e4:	1205883a 	add	r2,r2,r8
    c6e8:	3a406526 	beq	r7,r9,c880 <_free_r+0x208>
    c6ec:	32000317 	ldw	r8,12(r6)
    c6f0:	3a000315 	stw	r8,12(r7)
    c6f4:	41c00215 	stw	r7,8(r8)
    c6f8:	28cf883a 	add	r7,r5,r3
    c6fc:	39c00117 	ldw	r7,4(r7)
    c700:	39c0004c 	andi	r7,r7,1
    c704:	38003a26 	beq	r7,zero,c7f0 <_free_r+0x178>
    c708:	10c00054 	ori	r3,r2,1
    c70c:	30c00115 	stw	r3,4(r6)
    c710:	3087883a 	add	r3,r6,r2
    c714:	18800015 	stw	r2,0(r3)
    c718:	00c07fc4 	movi	r3,511
    c71c:	18801936 	bltu	r3,r2,c784 <_free_r+0x10c>
    c720:	1004d0fa 	srli	r2,r2,3
    c724:	01c00044 	movi	r7,1
    c728:	21400117 	ldw	r5,4(r4)
    c72c:	10c00044 	addi	r3,r2,1
    c730:	18c7883a 	add	r3,r3,r3
    c734:	1005d0ba 	srai	r2,r2,2
    c738:	18c7883a 	add	r3,r3,r3
    c73c:	18c7883a 	add	r3,r3,r3
    c740:	1907883a 	add	r3,r3,r4
    c744:	3884983a 	sll	r2,r7,r2
    c748:	19c00017 	ldw	r7,0(r3)
    c74c:	1a3ffe04 	addi	r8,r3,-8
    c750:	1144b03a 	or	r2,r2,r5
    c754:	32000315 	stw	r8,12(r6)
    c758:	31c00215 	stw	r7,8(r6)
    c75c:	20800115 	stw	r2,4(r4)
    c760:	19800015 	stw	r6,0(r3)
    c764:	39800315 	stw	r6,12(r7)
    c768:	8809883a 	mov	r4,r17
    c76c:	dfc00217 	ldw	ra,8(sp)
    c770:	dc400117 	ldw	r17,4(sp)
    c774:	dc000017 	ldw	r16,0(sp)
    c778:	dec00304 	addi	sp,sp,12
    c77c:	001ad581 	jmpi	1ad58 <__malloc_unlock>
    c780:	f800283a 	ret
    c784:	100ad27a 	srli	r5,r2,9
    c788:	00c00104 	movi	r3,4
    c78c:	19404a36 	bltu	r3,r5,c8b8 <_free_r+0x240>
    c790:	100ad1ba 	srli	r5,r2,6
    c794:	28c00e44 	addi	r3,r5,57
    c798:	18c7883a 	add	r3,r3,r3
    c79c:	29400e04 	addi	r5,r5,56
    c7a0:	18c7883a 	add	r3,r3,r3
    c7a4:	18c7883a 	add	r3,r3,r3
    c7a8:	1909883a 	add	r4,r3,r4
    c7ac:	20c00017 	ldw	r3,0(r4)
    c7b0:	01c000b4 	movhi	r7,2
    c7b4:	213ffe04 	addi	r4,r4,-8
    c7b8:	39d85204 	addi	r7,r7,24904
    c7bc:	20c04426 	beq	r4,r3,c8d0 <_free_r+0x258>
    c7c0:	01ffff04 	movi	r7,-4
    c7c4:	19400117 	ldw	r5,4(r3)
    c7c8:	29ca703a 	and	r5,r5,r7
    c7cc:	1140022e 	bgeu	r2,r5,c7d8 <_free_r+0x160>
    c7d0:	18c00217 	ldw	r3,8(r3)
    c7d4:	20fffb1e 	bne	r4,r3,c7c4 <__alt_data_end+0xfc00c7c4>
    c7d8:	19000317 	ldw	r4,12(r3)
    c7dc:	31000315 	stw	r4,12(r6)
    c7e0:	30c00215 	stw	r3,8(r6)
    c7e4:	21800215 	stw	r6,8(r4)
    c7e8:	19800315 	stw	r6,12(r3)
    c7ec:	003fde06 	br	c768 <__alt_data_end+0xfc00c768>
    c7f0:	29c00217 	ldw	r7,8(r5)
    c7f4:	10c5883a 	add	r2,r2,r3
    c7f8:	00c000b4 	movhi	r3,2
    c7fc:	18d85404 	addi	r3,r3,24912
    c800:	38c03b26 	beq	r7,r3,c8f0 <_free_r+0x278>
    c804:	2a000317 	ldw	r8,12(r5)
    c808:	11400054 	ori	r5,r2,1
    c80c:	3087883a 	add	r3,r6,r2
    c810:	3a000315 	stw	r8,12(r7)
    c814:	41c00215 	stw	r7,8(r8)
    c818:	31400115 	stw	r5,4(r6)
    c81c:	18800015 	stw	r2,0(r3)
    c820:	003fbd06 	br	c718 <__alt_data_end+0xfc00c718>
    c824:	39c0004c 	andi	r7,r7,1
    c828:	10c5883a 	add	r2,r2,r3
    c82c:	3800071e 	bne	r7,zero,c84c <_free_r+0x1d4>
    c830:	81fffe17 	ldw	r7,-8(r16)
    c834:	31cdc83a 	sub	r6,r6,r7
    c838:	30c00317 	ldw	r3,12(r6)
    c83c:	31400217 	ldw	r5,8(r6)
    c840:	11c5883a 	add	r2,r2,r7
    c844:	28c00315 	stw	r3,12(r5)
    c848:	19400215 	stw	r5,8(r3)
    c84c:	10c00054 	ori	r3,r2,1
    c850:	30c00115 	stw	r3,4(r6)
    c854:	00c000b4 	movhi	r3,2
    c858:	18ddfa04 	addi	r3,r3,30696
    c85c:	18c00017 	ldw	r3,0(r3)
    c860:	21800215 	stw	r6,8(r4)
    c864:	10ffc036 	bltu	r2,r3,c768 <__alt_data_end+0xfc00c768>
    c868:	008000f4 	movhi	r2,3
    c86c:	10a50904 	addi	r2,r2,-27612
    c870:	11400017 	ldw	r5,0(r2)
    c874:	8809883a 	mov	r4,r17
    c878:	000c5540 	call	c554 <_malloc_trim_r>
    c87c:	003fba06 	br	c768 <__alt_data_end+0xfc00c768>
    c880:	28c9883a 	add	r4,r5,r3
    c884:	21000117 	ldw	r4,4(r4)
    c888:	2100004c 	andi	r4,r4,1
    c88c:	2000391e 	bne	r4,zero,c974 <_free_r+0x2fc>
    c890:	29c00217 	ldw	r7,8(r5)
    c894:	29000317 	ldw	r4,12(r5)
    c898:	1885883a 	add	r2,r3,r2
    c89c:	10c00054 	ori	r3,r2,1
    c8a0:	39000315 	stw	r4,12(r7)
    c8a4:	21c00215 	stw	r7,8(r4)
    c8a8:	30c00115 	stw	r3,4(r6)
    c8ac:	308d883a 	add	r6,r6,r2
    c8b0:	30800015 	stw	r2,0(r6)
    c8b4:	003fac06 	br	c768 <__alt_data_end+0xfc00c768>
    c8b8:	00c00504 	movi	r3,20
    c8bc:	19401536 	bltu	r3,r5,c914 <_free_r+0x29c>
    c8c0:	28c01704 	addi	r3,r5,92
    c8c4:	18c7883a 	add	r3,r3,r3
    c8c8:	294016c4 	addi	r5,r5,91
    c8cc:	003fb406 	br	c7a0 <__alt_data_end+0xfc00c7a0>
    c8d0:	280bd0ba 	srai	r5,r5,2
    c8d4:	00c00044 	movi	r3,1
    c8d8:	38800117 	ldw	r2,4(r7)
    c8dc:	194a983a 	sll	r5,r3,r5
    c8e0:	2007883a 	mov	r3,r4
    c8e4:	2884b03a 	or	r2,r5,r2
    c8e8:	38800115 	stw	r2,4(r7)
    c8ec:	003fbb06 	br	c7dc <__alt_data_end+0xfc00c7dc>
    c8f0:	21800515 	stw	r6,20(r4)
    c8f4:	21800415 	stw	r6,16(r4)
    c8f8:	10c00054 	ori	r3,r2,1
    c8fc:	31c00315 	stw	r7,12(r6)
    c900:	31c00215 	stw	r7,8(r6)
    c904:	30c00115 	stw	r3,4(r6)
    c908:	308d883a 	add	r6,r6,r2
    c90c:	30800015 	stw	r2,0(r6)
    c910:	003f9506 	br	c768 <__alt_data_end+0xfc00c768>
    c914:	00c01504 	movi	r3,84
    c918:	19400536 	bltu	r3,r5,c930 <_free_r+0x2b8>
    c91c:	100ad33a 	srli	r5,r2,12
    c920:	28c01bc4 	addi	r3,r5,111
    c924:	18c7883a 	add	r3,r3,r3
    c928:	29401b84 	addi	r5,r5,110
    c92c:	003f9c06 	br	c7a0 <__alt_data_end+0xfc00c7a0>
    c930:	00c05504 	movi	r3,340
    c934:	19400536 	bltu	r3,r5,c94c <_free_r+0x2d4>
    c938:	100ad3fa 	srli	r5,r2,15
    c93c:	28c01e04 	addi	r3,r5,120
    c940:	18c7883a 	add	r3,r3,r3
    c944:	29401dc4 	addi	r5,r5,119
    c948:	003f9506 	br	c7a0 <__alt_data_end+0xfc00c7a0>
    c94c:	00c15504 	movi	r3,1364
    c950:	19400536 	bltu	r3,r5,c968 <_free_r+0x2f0>
    c954:	100ad4ba 	srli	r5,r2,18
    c958:	28c01f44 	addi	r3,r5,125
    c95c:	18c7883a 	add	r3,r3,r3
    c960:	29401f04 	addi	r5,r5,124
    c964:	003f8e06 	br	c7a0 <__alt_data_end+0xfc00c7a0>
    c968:	00c03f84 	movi	r3,254
    c96c:	01401f84 	movi	r5,126
    c970:	003f8b06 	br	c7a0 <__alt_data_end+0xfc00c7a0>
    c974:	10c00054 	ori	r3,r2,1
    c978:	30c00115 	stw	r3,4(r6)
    c97c:	308d883a 	add	r6,r6,r2
    c980:	30800015 	stw	r2,0(r6)
    c984:	003f7806 	br	c768 <__alt_data_end+0xfc00c768>

0000c988 <__sfvwrite_r>:
    c988:	30800217 	ldw	r2,8(r6)
    c98c:	10006726 	beq	r2,zero,cb2c <__sfvwrite_r+0x1a4>
    c990:	28c0030b 	ldhu	r3,12(r5)
    c994:	defff404 	addi	sp,sp,-48
    c998:	dd400715 	stw	r21,28(sp)
    c99c:	dd000615 	stw	r20,24(sp)
    c9a0:	dc000215 	stw	r16,8(sp)
    c9a4:	dfc00b15 	stw	ra,44(sp)
    c9a8:	df000a15 	stw	fp,40(sp)
    c9ac:	ddc00915 	stw	r23,36(sp)
    c9b0:	dd800815 	stw	r22,32(sp)
    c9b4:	dcc00515 	stw	r19,20(sp)
    c9b8:	dc800415 	stw	r18,16(sp)
    c9bc:	dc400315 	stw	r17,12(sp)
    c9c0:	1880020c 	andi	r2,r3,8
    c9c4:	2821883a 	mov	r16,r5
    c9c8:	202b883a 	mov	r21,r4
    c9cc:	3029883a 	mov	r20,r6
    c9d0:	10002726 	beq	r2,zero,ca70 <__sfvwrite_r+0xe8>
    c9d4:	28800417 	ldw	r2,16(r5)
    c9d8:	10002526 	beq	r2,zero,ca70 <__sfvwrite_r+0xe8>
    c9dc:	1880008c 	andi	r2,r3,2
    c9e0:	a4400017 	ldw	r17,0(r20)
    c9e4:	10002a26 	beq	r2,zero,ca90 <__sfvwrite_r+0x108>
    c9e8:	05a00034 	movhi	r22,32768
    c9ec:	0027883a 	mov	r19,zero
    c9f0:	0025883a 	mov	r18,zero
    c9f4:	b5bf0004 	addi	r22,r22,-1024
    c9f8:	980d883a 	mov	r6,r19
    c9fc:	a809883a 	mov	r4,r21
    ca00:	90004626 	beq	r18,zero,cb1c <__sfvwrite_r+0x194>
    ca04:	900f883a 	mov	r7,r18
    ca08:	b480022e 	bgeu	r22,r18,ca14 <__sfvwrite_r+0x8c>
    ca0c:	01e00034 	movhi	r7,32768
    ca10:	39ff0004 	addi	r7,r7,-1024
    ca14:	80800917 	ldw	r2,36(r16)
    ca18:	81400717 	ldw	r5,28(r16)
    ca1c:	103ee83a 	callr	r2
    ca20:	0080570e 	bge	zero,r2,cb80 <__sfvwrite_r+0x1f8>
    ca24:	a0c00217 	ldw	r3,8(r20)
    ca28:	98a7883a 	add	r19,r19,r2
    ca2c:	90a5c83a 	sub	r18,r18,r2
    ca30:	1885c83a 	sub	r2,r3,r2
    ca34:	a0800215 	stw	r2,8(r20)
    ca38:	103fef1e 	bne	r2,zero,c9f8 <__alt_data_end+0xfc00c9f8>
    ca3c:	0005883a 	mov	r2,zero
    ca40:	dfc00b17 	ldw	ra,44(sp)
    ca44:	df000a17 	ldw	fp,40(sp)
    ca48:	ddc00917 	ldw	r23,36(sp)
    ca4c:	dd800817 	ldw	r22,32(sp)
    ca50:	dd400717 	ldw	r21,28(sp)
    ca54:	dd000617 	ldw	r20,24(sp)
    ca58:	dcc00517 	ldw	r19,20(sp)
    ca5c:	dc800417 	ldw	r18,16(sp)
    ca60:	dc400317 	ldw	r17,12(sp)
    ca64:	dc000217 	ldw	r16,8(sp)
    ca68:	dec00c04 	addi	sp,sp,48
    ca6c:	f800283a 	ret
    ca70:	800b883a 	mov	r5,r16
    ca74:	a809883a 	mov	r4,r21
    ca78:	000a5180 	call	a518 <__swsetup_r>
    ca7c:	1000eb1e 	bne	r2,zero,ce2c <__sfvwrite_r+0x4a4>
    ca80:	80c0030b 	ldhu	r3,12(r16)
    ca84:	a4400017 	ldw	r17,0(r20)
    ca88:	1880008c 	andi	r2,r3,2
    ca8c:	103fd61e 	bne	r2,zero,c9e8 <__alt_data_end+0xfc00c9e8>
    ca90:	1880004c 	andi	r2,r3,1
    ca94:	10003f1e 	bne	r2,zero,cb94 <__sfvwrite_r+0x20c>
    ca98:	0039883a 	mov	fp,zero
    ca9c:	0025883a 	mov	r18,zero
    caa0:	90001a26 	beq	r18,zero,cb0c <__sfvwrite_r+0x184>
    caa4:	1880800c 	andi	r2,r3,512
    caa8:	84c00217 	ldw	r19,8(r16)
    caac:	10002126 	beq	r2,zero,cb34 <__sfvwrite_r+0x1ac>
    cab0:	982f883a 	mov	r23,r19
    cab4:	94c09336 	bltu	r18,r19,cd04 <__sfvwrite_r+0x37c>
    cab8:	1881200c 	andi	r2,r3,1152
    cabc:	10009e1e 	bne	r2,zero,cd38 <__sfvwrite_r+0x3b0>
    cac0:	81000017 	ldw	r4,0(r16)
    cac4:	b80d883a 	mov	r6,r23
    cac8:	e00b883a 	mov	r5,fp
    cacc:	000d3900 	call	d390 <memmove>
    cad0:	80c00217 	ldw	r3,8(r16)
    cad4:	81000017 	ldw	r4,0(r16)
    cad8:	9005883a 	mov	r2,r18
    cadc:	1ce7c83a 	sub	r19,r3,r19
    cae0:	25cf883a 	add	r7,r4,r23
    cae4:	84c00215 	stw	r19,8(r16)
    cae8:	81c00015 	stw	r7,0(r16)
    caec:	a0c00217 	ldw	r3,8(r20)
    caf0:	e0b9883a 	add	fp,fp,r2
    caf4:	90a5c83a 	sub	r18,r18,r2
    caf8:	18a7c83a 	sub	r19,r3,r2
    cafc:	a4c00215 	stw	r19,8(r20)
    cb00:	983fce26 	beq	r19,zero,ca3c <__alt_data_end+0xfc00ca3c>
    cb04:	80c0030b 	ldhu	r3,12(r16)
    cb08:	903fe61e 	bne	r18,zero,caa4 <__alt_data_end+0xfc00caa4>
    cb0c:	8f000017 	ldw	fp,0(r17)
    cb10:	8c800117 	ldw	r18,4(r17)
    cb14:	8c400204 	addi	r17,r17,8
    cb18:	003fe106 	br	caa0 <__alt_data_end+0xfc00caa0>
    cb1c:	8cc00017 	ldw	r19,0(r17)
    cb20:	8c800117 	ldw	r18,4(r17)
    cb24:	8c400204 	addi	r17,r17,8
    cb28:	003fb306 	br	c9f8 <__alt_data_end+0xfc00c9f8>
    cb2c:	0005883a 	mov	r2,zero
    cb30:	f800283a 	ret
    cb34:	81000017 	ldw	r4,0(r16)
    cb38:	80800417 	ldw	r2,16(r16)
    cb3c:	11005736 	bltu	r2,r4,cc9c <__sfvwrite_r+0x314>
    cb40:	85c00517 	ldw	r23,20(r16)
    cb44:	95c05536 	bltu	r18,r23,cc9c <__sfvwrite_r+0x314>
    cb48:	00a00034 	movhi	r2,32768
    cb4c:	10bfffc4 	addi	r2,r2,-1
    cb50:	9009883a 	mov	r4,r18
    cb54:	1480012e 	bgeu	r2,r18,cb5c <__sfvwrite_r+0x1d4>
    cb58:	1009883a 	mov	r4,r2
    cb5c:	b80b883a 	mov	r5,r23
    cb60:	00176180 	call	17618 <__divsi3>
    cb64:	15cf383a 	mul	r7,r2,r23
    cb68:	81400717 	ldw	r5,28(r16)
    cb6c:	80800917 	ldw	r2,36(r16)
    cb70:	e00d883a 	mov	r6,fp
    cb74:	a809883a 	mov	r4,r21
    cb78:	103ee83a 	callr	r2
    cb7c:	00bfdb16 	blt	zero,r2,caec <__alt_data_end+0xfc00caec>
    cb80:	8080030b 	ldhu	r2,12(r16)
    cb84:	10801014 	ori	r2,r2,64
    cb88:	8080030d 	sth	r2,12(r16)
    cb8c:	00bfffc4 	movi	r2,-1
    cb90:	003fab06 	br	ca40 <__alt_data_end+0xfc00ca40>
    cb94:	0027883a 	mov	r19,zero
    cb98:	0011883a 	mov	r8,zero
    cb9c:	0039883a 	mov	fp,zero
    cba0:	0025883a 	mov	r18,zero
    cba4:	90001f26 	beq	r18,zero,cc24 <__sfvwrite_r+0x29c>
    cba8:	40005a26 	beq	r8,zero,cd14 <__sfvwrite_r+0x38c>
    cbac:	982d883a 	mov	r22,r19
    cbb0:	94c0012e 	bgeu	r18,r19,cbb8 <__sfvwrite_r+0x230>
    cbb4:	902d883a 	mov	r22,r18
    cbb8:	81000017 	ldw	r4,0(r16)
    cbbc:	80800417 	ldw	r2,16(r16)
    cbc0:	b02f883a 	mov	r23,r22
    cbc4:	81c00517 	ldw	r7,20(r16)
    cbc8:	1100032e 	bgeu	r2,r4,cbd8 <__sfvwrite_r+0x250>
    cbcc:	80c00217 	ldw	r3,8(r16)
    cbd0:	38c7883a 	add	r3,r7,r3
    cbd4:	1d801816 	blt	r3,r22,cc38 <__sfvwrite_r+0x2b0>
    cbd8:	b1c03e16 	blt	r22,r7,ccd4 <__sfvwrite_r+0x34c>
    cbdc:	80800917 	ldw	r2,36(r16)
    cbe0:	81400717 	ldw	r5,28(r16)
    cbe4:	e00d883a 	mov	r6,fp
    cbe8:	da000115 	stw	r8,4(sp)
    cbec:	a809883a 	mov	r4,r21
    cbf0:	103ee83a 	callr	r2
    cbf4:	102f883a 	mov	r23,r2
    cbf8:	da000117 	ldw	r8,4(sp)
    cbfc:	00bfe00e 	bge	zero,r2,cb80 <__alt_data_end+0xfc00cb80>
    cc00:	9de7c83a 	sub	r19,r19,r23
    cc04:	98001f26 	beq	r19,zero,cc84 <__sfvwrite_r+0x2fc>
    cc08:	a0800217 	ldw	r2,8(r20)
    cc0c:	e5f9883a 	add	fp,fp,r23
    cc10:	95e5c83a 	sub	r18,r18,r23
    cc14:	15efc83a 	sub	r23,r2,r23
    cc18:	a5c00215 	stw	r23,8(r20)
    cc1c:	b83f8726 	beq	r23,zero,ca3c <__alt_data_end+0xfc00ca3c>
    cc20:	903fe11e 	bne	r18,zero,cba8 <__alt_data_end+0xfc00cba8>
    cc24:	8f000017 	ldw	fp,0(r17)
    cc28:	8c800117 	ldw	r18,4(r17)
    cc2c:	0011883a 	mov	r8,zero
    cc30:	8c400204 	addi	r17,r17,8
    cc34:	003fdb06 	br	cba4 <__alt_data_end+0xfc00cba4>
    cc38:	180d883a 	mov	r6,r3
    cc3c:	e00b883a 	mov	r5,fp
    cc40:	da000115 	stw	r8,4(sp)
    cc44:	d8c00015 	stw	r3,0(sp)
    cc48:	000d3900 	call	d390 <memmove>
    cc4c:	d8c00017 	ldw	r3,0(sp)
    cc50:	80800017 	ldw	r2,0(r16)
    cc54:	800b883a 	mov	r5,r16
    cc58:	a809883a 	mov	r4,r21
    cc5c:	10c5883a 	add	r2,r2,r3
    cc60:	80800015 	stw	r2,0(r16)
    cc64:	d8c00015 	stw	r3,0(sp)
    cc68:	000c2680 	call	c268 <_fflush_r>
    cc6c:	d8c00017 	ldw	r3,0(sp)
    cc70:	da000117 	ldw	r8,4(sp)
    cc74:	103fc21e 	bne	r2,zero,cb80 <__alt_data_end+0xfc00cb80>
    cc78:	182f883a 	mov	r23,r3
    cc7c:	9de7c83a 	sub	r19,r19,r23
    cc80:	983fe11e 	bne	r19,zero,cc08 <__alt_data_end+0xfc00cc08>
    cc84:	800b883a 	mov	r5,r16
    cc88:	a809883a 	mov	r4,r21
    cc8c:	000c2680 	call	c268 <_fflush_r>
    cc90:	103fbb1e 	bne	r2,zero,cb80 <__alt_data_end+0xfc00cb80>
    cc94:	0011883a 	mov	r8,zero
    cc98:	003fdb06 	br	cc08 <__alt_data_end+0xfc00cc08>
    cc9c:	94c0012e 	bgeu	r18,r19,cca4 <__sfvwrite_r+0x31c>
    cca0:	9027883a 	mov	r19,r18
    cca4:	980d883a 	mov	r6,r19
    cca8:	e00b883a 	mov	r5,fp
    ccac:	000d3900 	call	d390 <memmove>
    ccb0:	80800217 	ldw	r2,8(r16)
    ccb4:	80c00017 	ldw	r3,0(r16)
    ccb8:	14c5c83a 	sub	r2,r2,r19
    ccbc:	1cc7883a 	add	r3,r3,r19
    ccc0:	80800215 	stw	r2,8(r16)
    ccc4:	80c00015 	stw	r3,0(r16)
    ccc8:	10004326 	beq	r2,zero,cdd8 <__sfvwrite_r+0x450>
    cccc:	9805883a 	mov	r2,r19
    ccd0:	003f8606 	br	caec <__alt_data_end+0xfc00caec>
    ccd4:	b00d883a 	mov	r6,r22
    ccd8:	e00b883a 	mov	r5,fp
    ccdc:	da000115 	stw	r8,4(sp)
    cce0:	000d3900 	call	d390 <memmove>
    cce4:	80800217 	ldw	r2,8(r16)
    cce8:	80c00017 	ldw	r3,0(r16)
    ccec:	da000117 	ldw	r8,4(sp)
    ccf0:	1585c83a 	sub	r2,r2,r22
    ccf4:	1dad883a 	add	r22,r3,r22
    ccf8:	80800215 	stw	r2,8(r16)
    ccfc:	85800015 	stw	r22,0(r16)
    cd00:	003fbf06 	br	cc00 <__alt_data_end+0xfc00cc00>
    cd04:	81000017 	ldw	r4,0(r16)
    cd08:	9027883a 	mov	r19,r18
    cd0c:	902f883a 	mov	r23,r18
    cd10:	003f6c06 	br	cac4 <__alt_data_end+0xfc00cac4>
    cd14:	900d883a 	mov	r6,r18
    cd18:	01400284 	movi	r5,10
    cd1c:	e009883a 	mov	r4,fp
    cd20:	00058540 	call	5854 <memchr>
    cd24:	10003e26 	beq	r2,zero,ce20 <__sfvwrite_r+0x498>
    cd28:	10800044 	addi	r2,r2,1
    cd2c:	1727c83a 	sub	r19,r2,fp
    cd30:	02000044 	movi	r8,1
    cd34:	003f9d06 	br	cbac <__alt_data_end+0xfc00cbac>
    cd38:	80800517 	ldw	r2,20(r16)
    cd3c:	81400417 	ldw	r5,16(r16)
    cd40:	81c00017 	ldw	r7,0(r16)
    cd44:	10a7883a 	add	r19,r2,r2
    cd48:	9885883a 	add	r2,r19,r2
    cd4c:	1026d7fa 	srli	r19,r2,31
    cd50:	396dc83a 	sub	r22,r7,r5
    cd54:	b1000044 	addi	r4,r22,1
    cd58:	9885883a 	add	r2,r19,r2
    cd5c:	1027d07a 	srai	r19,r2,1
    cd60:	2485883a 	add	r2,r4,r18
    cd64:	980d883a 	mov	r6,r19
    cd68:	9880022e 	bgeu	r19,r2,cd74 <__sfvwrite_r+0x3ec>
    cd6c:	1027883a 	mov	r19,r2
    cd70:	100d883a 	mov	r6,r2
    cd74:	18c1000c 	andi	r3,r3,1024
    cd78:	18001c26 	beq	r3,zero,cdec <__sfvwrite_r+0x464>
    cd7c:	300b883a 	mov	r5,r6
    cd80:	a809883a 	mov	r4,r21
    cd84:	00050480 	call	5048 <_malloc_r>
    cd88:	102f883a 	mov	r23,r2
    cd8c:	10002926 	beq	r2,zero,ce34 <__sfvwrite_r+0x4ac>
    cd90:	81400417 	ldw	r5,16(r16)
    cd94:	b00d883a 	mov	r6,r22
    cd98:	1009883a 	mov	r4,r2
    cd9c:	00059380 	call	5938 <memcpy>
    cda0:	8080030b 	ldhu	r2,12(r16)
    cda4:	00fedfc4 	movi	r3,-1153
    cda8:	10c4703a 	and	r2,r2,r3
    cdac:	10802014 	ori	r2,r2,128
    cdb0:	8080030d 	sth	r2,12(r16)
    cdb4:	bd89883a 	add	r4,r23,r22
    cdb8:	9d8fc83a 	sub	r7,r19,r22
    cdbc:	85c00415 	stw	r23,16(r16)
    cdc0:	84c00515 	stw	r19,20(r16)
    cdc4:	81000015 	stw	r4,0(r16)
    cdc8:	9027883a 	mov	r19,r18
    cdcc:	81c00215 	stw	r7,8(r16)
    cdd0:	902f883a 	mov	r23,r18
    cdd4:	003f3b06 	br	cac4 <__alt_data_end+0xfc00cac4>
    cdd8:	800b883a 	mov	r5,r16
    cddc:	a809883a 	mov	r4,r21
    cde0:	000c2680 	call	c268 <_fflush_r>
    cde4:	103fb926 	beq	r2,zero,cccc <__alt_data_end+0xfc00cccc>
    cde8:	003f6506 	br	cb80 <__alt_data_end+0xfc00cb80>
    cdec:	a809883a 	mov	r4,r21
    cdf0:	0005d200 	call	5d20 <_realloc_r>
    cdf4:	102f883a 	mov	r23,r2
    cdf8:	103fee1e 	bne	r2,zero,cdb4 <__alt_data_end+0xfc00cdb4>
    cdfc:	81400417 	ldw	r5,16(r16)
    ce00:	a809883a 	mov	r4,r21
    ce04:	000c6780 	call	c678 <_free_r>
    ce08:	8080030b 	ldhu	r2,12(r16)
    ce0c:	00ffdfc4 	movi	r3,-129
    ce10:	1884703a 	and	r2,r3,r2
    ce14:	00c00304 	movi	r3,12
    ce18:	a8c00015 	stw	r3,0(r21)
    ce1c:	003f5906 	br	cb84 <__alt_data_end+0xfc00cb84>
    ce20:	94c00044 	addi	r19,r18,1
    ce24:	02000044 	movi	r8,1
    ce28:	003f6006 	br	cbac <__alt_data_end+0xfc00cbac>
    ce2c:	00bfffc4 	movi	r2,-1
    ce30:	003f0306 	br	ca40 <__alt_data_end+0xfc00ca40>
    ce34:	00800304 	movi	r2,12
    ce38:	a8800015 	stw	r2,0(r21)
    ce3c:	8080030b 	ldhu	r2,12(r16)
    ce40:	003f5006 	br	cb84 <__alt_data_end+0xfc00cb84>

0000ce44 <iswspace>:
    ce44:	00803fc4 	movi	r2,255
    ce48:	11000836 	bltu	r2,r4,ce6c <iswspace+0x28>
    ce4c:	008000b4 	movhi	r2,2
    ce50:	109dfb04 	addi	r2,r2,30700
    ce54:	10800017 	ldw	r2,0(r2)
    ce58:	1109883a 	add	r4,r2,r4
    ce5c:	20800043 	ldbu	r2,1(r4)
    ce60:	1080020c 	andi	r2,r2,8
    ce64:	10803fcc 	andi	r2,r2,255
    ce68:	f800283a 	ret
    ce6c:	0005883a 	mov	r2,zero
    ce70:	f800283a 	ret

0000ce74 <_setlocale_r>:
    ce74:	30001b26 	beq	r6,zero,cee4 <_setlocale_r+0x70>
    ce78:	014000b4 	movhi	r5,2
    ce7c:	defffe04 	addi	sp,sp,-8
    ce80:	2955f904 	addi	r5,r5,22500
    ce84:	3009883a 	mov	r4,r6
    ce88:	dc000015 	stw	r16,0(sp)
    ce8c:	dfc00115 	stw	ra,4(sp)
    ce90:	3021883a 	mov	r16,r6
    ce94:	000e8c00 	call	e8c0 <strcmp>
    ce98:	1000061e 	bne	r2,zero,ceb4 <_setlocale_r+0x40>
    ce9c:	008000b4 	movhi	r2,2
    cea0:	10952f04 	addi	r2,r2,21692
    cea4:	dfc00117 	ldw	ra,4(sp)
    cea8:	dc000017 	ldw	r16,0(sp)
    ceac:	dec00204 	addi	sp,sp,8
    ceb0:	f800283a 	ret
    ceb4:	014000b4 	movhi	r5,2
    ceb8:	29552f04 	addi	r5,r5,21692
    cebc:	8009883a 	mov	r4,r16
    cec0:	000e8c00 	call	e8c0 <strcmp>
    cec4:	103ff526 	beq	r2,zero,ce9c <__alt_data_end+0xfc00ce9c>
    cec8:	014000b4 	movhi	r5,2
    cecc:	29553904 	addi	r5,r5,21732
    ced0:	8009883a 	mov	r4,r16
    ced4:	000e8c00 	call	e8c0 <strcmp>
    ced8:	103ff026 	beq	r2,zero,ce9c <__alt_data_end+0xfc00ce9c>
    cedc:	0005883a 	mov	r2,zero
    cee0:	003ff006 	br	cea4 <__alt_data_end+0xfc00cea4>
    cee4:	008000b4 	movhi	r2,2
    cee8:	10952f04 	addi	r2,r2,21692
    ceec:	f800283a 	ret

0000cef0 <__locale_charset>:
    cef0:	008000b4 	movhi	r2,2
    cef4:	10995c04 	addi	r2,r2,25968
    cef8:	f800283a 	ret

0000cefc <__locale_mb_cur_max>:
    cefc:	008000b4 	movhi	r2,2
    cf00:	109dfc04 	addi	r2,r2,30704
    cf04:	10800017 	ldw	r2,0(r2)
    cf08:	f800283a 	ret

0000cf0c <__locale_msgcharset>:
    cf0c:	008000b4 	movhi	r2,2
    cf10:	10995404 	addi	r2,r2,25936
    cf14:	f800283a 	ret

0000cf18 <__locale_cjk_lang>:
    cf18:	0005883a 	mov	r2,zero
    cf1c:	f800283a 	ret

0000cf20 <_localeconv_r>:
    cf20:	008000b4 	movhi	r2,2
    cf24:	10996404 	addi	r2,r2,26000
    cf28:	f800283a 	ret

0000cf2c <setlocale>:
    cf2c:	008000b4 	movhi	r2,2
    cf30:	109df804 	addi	r2,r2,30688
    cf34:	280d883a 	mov	r6,r5
    cf38:	200b883a 	mov	r5,r4
    cf3c:	11000017 	ldw	r4,0(r2)
    cf40:	000ce741 	jmpi	ce74 <_setlocale_r>

0000cf44 <localeconv>:
    cf44:	008000b4 	movhi	r2,2
    cf48:	10996404 	addi	r2,r2,26000
    cf4c:	f800283a 	ret

0000cf50 <_lseek_r>:
    cf50:	defffd04 	addi	sp,sp,-12
    cf54:	2805883a 	mov	r2,r5
    cf58:	dc000015 	stw	r16,0(sp)
    cf5c:	040000f4 	movhi	r16,3
    cf60:	dc400115 	stw	r17,4(sp)
    cf64:	300b883a 	mov	r5,r6
    cf68:	84250a04 	addi	r16,r16,-27608
    cf6c:	2023883a 	mov	r17,r4
    cf70:	380d883a 	mov	r6,r7
    cf74:	1009883a 	mov	r4,r2
    cf78:	dfc00215 	stw	ra,8(sp)
    cf7c:	80000015 	stw	zero,0(r16)
    cf80:	001a6040 	call	1a604 <lseek>
    cf84:	00ffffc4 	movi	r3,-1
    cf88:	10c00526 	beq	r2,r3,cfa0 <_lseek_r+0x50>
    cf8c:	dfc00217 	ldw	ra,8(sp)
    cf90:	dc400117 	ldw	r17,4(sp)
    cf94:	dc000017 	ldw	r16,0(sp)
    cf98:	dec00304 	addi	sp,sp,12
    cf9c:	f800283a 	ret
    cfa0:	80c00017 	ldw	r3,0(r16)
    cfa4:	183ff926 	beq	r3,zero,cf8c <__alt_data_end+0xfc00cf8c>
    cfa8:	88c00015 	stw	r3,0(r17)
    cfac:	003ff706 	br	cf8c <__alt_data_end+0xfc00cf8c>

0000cfb0 <__smakebuf_r>:
    cfb0:	2880030b 	ldhu	r2,12(r5)
    cfb4:	10c0008c 	andi	r3,r2,2
    cfb8:	1800411e 	bne	r3,zero,d0c0 <__smakebuf_r+0x110>
    cfbc:	deffec04 	addi	sp,sp,-80
    cfc0:	dc000f15 	stw	r16,60(sp)
    cfc4:	2821883a 	mov	r16,r5
    cfc8:	2940038f 	ldh	r5,14(r5)
    cfcc:	dc401015 	stw	r17,64(sp)
    cfd0:	dfc01315 	stw	ra,76(sp)
    cfd4:	dcc01215 	stw	r19,72(sp)
    cfd8:	dc801115 	stw	r18,68(sp)
    cfdc:	2023883a 	mov	r17,r4
    cfe0:	28001c16 	blt	r5,zero,d054 <__smakebuf_r+0xa4>
    cfe4:	d80d883a 	mov	r6,sp
    cfe8:	00147f40 	call	147f4 <_fstat_r>
    cfec:	10001816 	blt	r2,zero,d050 <__smakebuf_r+0xa0>
    cff0:	d8800117 	ldw	r2,4(sp)
    cff4:	00e00014 	movui	r3,32768
    cff8:	10bc000c 	andi	r2,r2,61440
    cffc:	14c80020 	cmpeqi	r19,r2,8192
    d000:	10c03726 	beq	r2,r3,d0e0 <__smakebuf_r+0x130>
    d004:	80c0030b 	ldhu	r3,12(r16)
    d008:	18c20014 	ori	r3,r3,2048
    d00c:	80c0030d 	sth	r3,12(r16)
    d010:	00c80004 	movi	r3,8192
    d014:	10c0521e 	bne	r2,r3,d160 <__smakebuf_r+0x1b0>
    d018:	8140038f 	ldh	r5,14(r16)
    d01c:	8809883a 	mov	r4,r17
    d020:	00153dc0 	call	153dc <_isatty_r>
    d024:	10004c26 	beq	r2,zero,d158 <__smakebuf_r+0x1a8>
    d028:	8080030b 	ldhu	r2,12(r16)
    d02c:	80c010c4 	addi	r3,r16,67
    d030:	80c00015 	stw	r3,0(r16)
    d034:	10800054 	ori	r2,r2,1
    d038:	8080030d 	sth	r2,12(r16)
    d03c:	00800044 	movi	r2,1
    d040:	80c00415 	stw	r3,16(r16)
    d044:	80800515 	stw	r2,20(r16)
    d048:	04810004 	movi	r18,1024
    d04c:	00000706 	br	d06c <__smakebuf_r+0xbc>
    d050:	8080030b 	ldhu	r2,12(r16)
    d054:	10c0200c 	andi	r3,r2,128
    d058:	18001f1e 	bne	r3,zero,d0d8 <__smakebuf_r+0x128>
    d05c:	04810004 	movi	r18,1024
    d060:	10820014 	ori	r2,r2,2048
    d064:	8080030d 	sth	r2,12(r16)
    d068:	0027883a 	mov	r19,zero
    d06c:	900b883a 	mov	r5,r18
    d070:	8809883a 	mov	r4,r17
    d074:	00050480 	call	5048 <_malloc_r>
    d078:	10002c26 	beq	r2,zero,d12c <__smakebuf_r+0x17c>
    d07c:	80c0030b 	ldhu	r3,12(r16)
    d080:	01000034 	movhi	r4,0
    d084:	2112c004 	addi	r4,r4,19200
    d088:	89000f15 	stw	r4,60(r17)
    d08c:	18c02014 	ori	r3,r3,128
    d090:	80c0030d 	sth	r3,12(r16)
    d094:	80800015 	stw	r2,0(r16)
    d098:	80800415 	stw	r2,16(r16)
    d09c:	84800515 	stw	r18,20(r16)
    d0a0:	98001a1e 	bne	r19,zero,d10c <__smakebuf_r+0x15c>
    d0a4:	dfc01317 	ldw	ra,76(sp)
    d0a8:	dcc01217 	ldw	r19,72(sp)
    d0ac:	dc801117 	ldw	r18,68(sp)
    d0b0:	dc401017 	ldw	r17,64(sp)
    d0b4:	dc000f17 	ldw	r16,60(sp)
    d0b8:	dec01404 	addi	sp,sp,80
    d0bc:	f800283a 	ret
    d0c0:	288010c4 	addi	r2,r5,67
    d0c4:	28800015 	stw	r2,0(r5)
    d0c8:	28800415 	stw	r2,16(r5)
    d0cc:	00800044 	movi	r2,1
    d0d0:	28800515 	stw	r2,20(r5)
    d0d4:	f800283a 	ret
    d0d8:	04801004 	movi	r18,64
    d0dc:	003fe006 	br	d060 <__alt_data_end+0xfc00d060>
    d0e0:	81000a17 	ldw	r4,40(r16)
    d0e4:	00c00034 	movhi	r3,0
    d0e8:	18d98304 	addi	r3,r3,26124
    d0ec:	20ffc51e 	bne	r4,r3,d004 <__alt_data_end+0xfc00d004>
    d0f0:	8080030b 	ldhu	r2,12(r16)
    d0f4:	04810004 	movi	r18,1024
    d0f8:	84801315 	stw	r18,76(r16)
    d0fc:	1484b03a 	or	r2,r2,r18
    d100:	8080030d 	sth	r2,12(r16)
    d104:	0027883a 	mov	r19,zero
    d108:	003fd806 	br	d06c <__alt_data_end+0xfc00d06c>
    d10c:	8140038f 	ldh	r5,14(r16)
    d110:	8809883a 	mov	r4,r17
    d114:	00153dc0 	call	153dc <_isatty_r>
    d118:	103fe226 	beq	r2,zero,d0a4 <__alt_data_end+0xfc00d0a4>
    d11c:	8080030b 	ldhu	r2,12(r16)
    d120:	10800054 	ori	r2,r2,1
    d124:	8080030d 	sth	r2,12(r16)
    d128:	003fde06 	br	d0a4 <__alt_data_end+0xfc00d0a4>
    d12c:	8080030b 	ldhu	r2,12(r16)
    d130:	10c0800c 	andi	r3,r2,512
    d134:	183fdb1e 	bne	r3,zero,d0a4 <__alt_data_end+0xfc00d0a4>
    d138:	10800094 	ori	r2,r2,2
    d13c:	80c010c4 	addi	r3,r16,67
    d140:	8080030d 	sth	r2,12(r16)
    d144:	00800044 	movi	r2,1
    d148:	80c00015 	stw	r3,0(r16)
    d14c:	80c00415 	stw	r3,16(r16)
    d150:	80800515 	stw	r2,20(r16)
    d154:	003fd306 	br	d0a4 <__alt_data_end+0xfc00d0a4>
    d158:	04810004 	movi	r18,1024
    d15c:	003fc306 	br	d06c <__alt_data_end+0xfc00d06c>
    d160:	0027883a 	mov	r19,zero
    d164:	04810004 	movi	r18,1024
    d168:	003fc006 	br	d06c <__alt_data_end+0xfc00d06c>

0000d16c <_mbrtowc_r>:
    d16c:	defff704 	addi	sp,sp,-36
    d170:	008000b4 	movhi	r2,2
    d174:	dc800715 	stw	r18,28(sp)
    d178:	dc400615 	stw	r17,24(sp)
    d17c:	dc000515 	stw	r16,20(sp)
    d180:	109dfd04 	addi	r2,r2,30708
    d184:	dfc00815 	stw	ra,32(sp)
    d188:	2021883a 	mov	r16,r4
    d18c:	dc400917 	ldw	r17,36(sp)
    d190:	14800017 	ldw	r18,0(r2)
    d194:	30001626 	beq	r6,zero,d1f0 <_mbrtowc_r+0x84>
    d198:	d9400215 	stw	r5,8(sp)
    d19c:	d9800315 	stw	r6,12(sp)
    d1a0:	d9c00415 	stw	r7,16(sp)
    d1a4:	000cef00 	call	cef0 <__locale_charset>
    d1a8:	d9c00417 	ldw	r7,16(sp)
    d1ac:	d9800317 	ldw	r6,12(sp)
    d1b0:	d9400217 	ldw	r5,8(sp)
    d1b4:	d8800015 	stw	r2,0(sp)
    d1b8:	dc400115 	stw	r17,4(sp)
    d1bc:	8009883a 	mov	r4,r16
    d1c0:	903ee83a 	callr	r18
    d1c4:	00ffffc4 	movi	r3,-1
    d1c8:	10c0031e 	bne	r2,r3,d1d8 <_mbrtowc_r+0x6c>
    d1cc:	88000015 	stw	zero,0(r17)
    d1d0:	00c02284 	movi	r3,138
    d1d4:	80c00015 	stw	r3,0(r16)
    d1d8:	dfc00817 	ldw	ra,32(sp)
    d1dc:	dc800717 	ldw	r18,28(sp)
    d1e0:	dc400617 	ldw	r17,24(sp)
    d1e4:	dc000517 	ldw	r16,20(sp)
    d1e8:	dec00904 	addi	sp,sp,36
    d1ec:	f800283a 	ret
    d1f0:	000cef00 	call	cef0 <__locale_charset>
    d1f4:	018000b4 	movhi	r6,2
    d1f8:	31953904 	addi	r6,r6,21732
    d1fc:	dc400115 	stw	r17,4(sp)
    d200:	d8800015 	stw	r2,0(sp)
    d204:	01c00044 	movi	r7,1
    d208:	000b883a 	mov	r5,zero
    d20c:	8009883a 	mov	r4,r16
    d210:	903ee83a 	callr	r18
    d214:	003feb06 	br	d1c4 <__alt_data_end+0xfc00d1c4>

0000d218 <mbrtowc>:
    d218:	defff704 	addi	sp,sp,-36
    d21c:	008000b4 	movhi	r2,2
    d220:	dc800415 	stw	r18,16(sp)
    d224:	dc400315 	stw	r17,12(sp)
    d228:	109df804 	addi	r2,r2,30688
    d22c:	dfc00815 	stw	ra,32(sp)
    d230:	dd400715 	stw	r21,28(sp)
    d234:	dd000615 	stw	r20,24(sp)
    d238:	dcc00515 	stw	r19,20(sp)
    d23c:	dc000215 	stw	r16,8(sp)
    d240:	3825883a 	mov	r18,r7
    d244:	14400017 	ldw	r17,0(r2)
    d248:	28001c26 	beq	r5,zero,d2bc <mbrtowc+0xa4>
    d24c:	008000b4 	movhi	r2,2
    d250:	109dfd04 	addi	r2,r2,30708
    d254:	15400017 	ldw	r21,0(r2)
    d258:	2821883a 	mov	r16,r5
    d25c:	2027883a 	mov	r19,r4
    d260:	3029883a 	mov	r20,r6
    d264:	000cef00 	call	cef0 <__locale_charset>
    d268:	d8800015 	stw	r2,0(sp)
    d26c:	dc800115 	stw	r18,4(sp)
    d270:	a00f883a 	mov	r7,r20
    d274:	800d883a 	mov	r6,r16
    d278:	980b883a 	mov	r5,r19
    d27c:	8809883a 	mov	r4,r17
    d280:	a83ee83a 	callr	r21
    d284:	00ffffc4 	movi	r3,-1
    d288:	10c0031e 	bne	r2,r3,d298 <mbrtowc+0x80>
    d28c:	90000015 	stw	zero,0(r18)
    d290:	00c02284 	movi	r3,138
    d294:	88c00015 	stw	r3,0(r17)
    d298:	dfc00817 	ldw	ra,32(sp)
    d29c:	dd400717 	ldw	r21,28(sp)
    d2a0:	dd000617 	ldw	r20,24(sp)
    d2a4:	dcc00517 	ldw	r19,20(sp)
    d2a8:	dc800417 	ldw	r18,16(sp)
    d2ac:	dc400317 	ldw	r17,12(sp)
    d2b0:	dc000217 	ldw	r16,8(sp)
    d2b4:	dec00904 	addi	sp,sp,36
    d2b8:	f800283a 	ret
    d2bc:	008000b4 	movhi	r2,2
    d2c0:	109dfd04 	addi	r2,r2,30708
    d2c4:	14000017 	ldw	r16,0(r2)
    d2c8:	000cef00 	call	cef0 <__locale_charset>
    d2cc:	018000b4 	movhi	r6,2
    d2d0:	31953904 	addi	r6,r6,21732
    d2d4:	dc800115 	stw	r18,4(sp)
    d2d8:	d8800015 	stw	r2,0(sp)
    d2dc:	01c00044 	movi	r7,1
    d2e0:	000b883a 	mov	r5,zero
    d2e4:	8809883a 	mov	r4,r17
    d2e8:	803ee83a 	callr	r16
    d2ec:	003fe506 	br	d284 <__alt_data_end+0xfc00d284>

0000d2f0 <__ascii_mbtowc>:
    d2f0:	deffff04 	addi	sp,sp,-4
    d2f4:	28000826 	beq	r5,zero,d318 <__ascii_mbtowc+0x28>
    d2f8:	30000926 	beq	r6,zero,d320 <__ascii_mbtowc+0x30>
    d2fc:	38000b26 	beq	r7,zero,d32c <__ascii_mbtowc+0x3c>
    d300:	30800003 	ldbu	r2,0(r6)
    d304:	28800015 	stw	r2,0(r5)
    d308:	30800003 	ldbu	r2,0(r6)
    d30c:	1004c03a 	cmpne	r2,r2,zero
    d310:	dec00104 	addi	sp,sp,4
    d314:	f800283a 	ret
    d318:	d80b883a 	mov	r5,sp
    d31c:	303ff71e 	bne	r6,zero,d2fc <__alt_data_end+0xfc00d2fc>
    d320:	0005883a 	mov	r2,zero
    d324:	dec00104 	addi	sp,sp,4
    d328:	f800283a 	ret
    d32c:	00bfff84 	movi	r2,-2
    d330:	003ff706 	br	d310 <__alt_data_end+0xfc00d310>

0000d334 <_mbtowc_r>:
    d334:	008000b4 	movhi	r2,2
    d338:	defff804 	addi	sp,sp,-32
    d33c:	109dfd04 	addi	r2,r2,30708
    d340:	dfc00715 	stw	ra,28(sp)
    d344:	dc000615 	stw	r16,24(sp)
    d348:	14000017 	ldw	r16,0(r2)
    d34c:	d9000215 	stw	r4,8(sp)
    d350:	d9400315 	stw	r5,12(sp)
    d354:	d9800415 	stw	r6,16(sp)
    d358:	d9c00515 	stw	r7,20(sp)
    d35c:	000cef00 	call	cef0 <__locale_charset>
    d360:	d8800015 	stw	r2,0(sp)
    d364:	d8800817 	ldw	r2,32(sp)
    d368:	d9c00517 	ldw	r7,20(sp)
    d36c:	d9800417 	ldw	r6,16(sp)
    d370:	d9400317 	ldw	r5,12(sp)
    d374:	d9000217 	ldw	r4,8(sp)
    d378:	d8800115 	stw	r2,4(sp)
    d37c:	803ee83a 	callr	r16
    d380:	dfc00717 	ldw	ra,28(sp)
    d384:	dc000617 	ldw	r16,24(sp)
    d388:	dec00804 	addi	sp,sp,32
    d38c:	f800283a 	ret

0000d390 <memmove>:
    d390:	2005883a 	mov	r2,r4
    d394:	29000b2e 	bgeu	r5,r4,d3c4 <memmove+0x34>
    d398:	298f883a 	add	r7,r5,r6
    d39c:	21c0092e 	bgeu	r4,r7,d3c4 <memmove+0x34>
    d3a0:	2187883a 	add	r3,r4,r6
    d3a4:	198bc83a 	sub	r5,r3,r6
    d3a8:	30004826 	beq	r6,zero,d4cc <memmove+0x13c>
    d3ac:	39ffffc4 	addi	r7,r7,-1
    d3b0:	39000003 	ldbu	r4,0(r7)
    d3b4:	18ffffc4 	addi	r3,r3,-1
    d3b8:	19000005 	stb	r4,0(r3)
    d3bc:	28fffb1e 	bne	r5,r3,d3ac <__alt_data_end+0xfc00d3ac>
    d3c0:	f800283a 	ret
    d3c4:	00c003c4 	movi	r3,15
    d3c8:	1980412e 	bgeu	r3,r6,d4d0 <memmove+0x140>
    d3cc:	2886b03a 	or	r3,r5,r2
    d3d0:	18c000cc 	andi	r3,r3,3
    d3d4:	1800401e 	bne	r3,zero,d4d8 <memmove+0x148>
    d3d8:	33fffc04 	addi	r15,r6,-16
    d3dc:	781ed13a 	srli	r15,r15,4
    d3e0:	28c00104 	addi	r3,r5,4
    d3e4:	13400104 	addi	r13,r2,4
    d3e8:	781c913a 	slli	r14,r15,4
    d3ec:	2b000204 	addi	r12,r5,8
    d3f0:	12c00204 	addi	r11,r2,8
    d3f4:	73800504 	addi	r14,r14,20
    d3f8:	2a800304 	addi	r10,r5,12
    d3fc:	12400304 	addi	r9,r2,12
    d400:	2b9d883a 	add	r14,r5,r14
    d404:	2811883a 	mov	r8,r5
    d408:	100f883a 	mov	r7,r2
    d40c:	41000017 	ldw	r4,0(r8)
    d410:	39c00404 	addi	r7,r7,16
    d414:	18c00404 	addi	r3,r3,16
    d418:	393ffc15 	stw	r4,-16(r7)
    d41c:	193ffc17 	ldw	r4,-16(r3)
    d420:	6b400404 	addi	r13,r13,16
    d424:	5ac00404 	addi	r11,r11,16
    d428:	693ffc15 	stw	r4,-16(r13)
    d42c:	61000017 	ldw	r4,0(r12)
    d430:	4a400404 	addi	r9,r9,16
    d434:	42000404 	addi	r8,r8,16
    d438:	593ffc15 	stw	r4,-16(r11)
    d43c:	51000017 	ldw	r4,0(r10)
    d440:	63000404 	addi	r12,r12,16
    d444:	52800404 	addi	r10,r10,16
    d448:	493ffc15 	stw	r4,-16(r9)
    d44c:	1bbfef1e 	bne	r3,r14,d40c <__alt_data_end+0xfc00d40c>
    d450:	79000044 	addi	r4,r15,1
    d454:	2008913a 	slli	r4,r4,4
    d458:	328003cc 	andi	r10,r6,15
    d45c:	02c000c4 	movi	r11,3
    d460:	1107883a 	add	r3,r2,r4
    d464:	290b883a 	add	r5,r5,r4
    d468:	5a801e2e 	bgeu	r11,r10,d4e4 <memmove+0x154>
    d46c:	1813883a 	mov	r9,r3
    d470:	2811883a 	mov	r8,r5
    d474:	500f883a 	mov	r7,r10
    d478:	41000017 	ldw	r4,0(r8)
    d47c:	4a400104 	addi	r9,r9,4
    d480:	39ffff04 	addi	r7,r7,-4
    d484:	493fff15 	stw	r4,-4(r9)
    d488:	42000104 	addi	r8,r8,4
    d48c:	59fffa36 	bltu	r11,r7,d478 <__alt_data_end+0xfc00d478>
    d490:	513fff04 	addi	r4,r10,-4
    d494:	2008d0ba 	srli	r4,r4,2
    d498:	318000cc 	andi	r6,r6,3
    d49c:	21000044 	addi	r4,r4,1
    d4a0:	2109883a 	add	r4,r4,r4
    d4a4:	2109883a 	add	r4,r4,r4
    d4a8:	1907883a 	add	r3,r3,r4
    d4ac:	290b883a 	add	r5,r5,r4
    d4b0:	30000b26 	beq	r6,zero,d4e0 <memmove+0x150>
    d4b4:	198d883a 	add	r6,r3,r6
    d4b8:	29c00003 	ldbu	r7,0(r5)
    d4bc:	18c00044 	addi	r3,r3,1
    d4c0:	29400044 	addi	r5,r5,1
    d4c4:	19ffffc5 	stb	r7,-1(r3)
    d4c8:	19bffb1e 	bne	r3,r6,d4b8 <__alt_data_end+0xfc00d4b8>
    d4cc:	f800283a 	ret
    d4d0:	1007883a 	mov	r3,r2
    d4d4:	003ff606 	br	d4b0 <__alt_data_end+0xfc00d4b0>
    d4d8:	1007883a 	mov	r3,r2
    d4dc:	003ff506 	br	d4b4 <__alt_data_end+0xfc00d4b4>
    d4e0:	f800283a 	ret
    d4e4:	500d883a 	mov	r6,r10
    d4e8:	003ff106 	br	d4b0 <__alt_data_end+0xfc00d4b0>

0000d4ec <_Balloc>:
    d4ec:	20801317 	ldw	r2,76(r4)
    d4f0:	defffc04 	addi	sp,sp,-16
    d4f4:	dc400115 	stw	r17,4(sp)
    d4f8:	dc000015 	stw	r16,0(sp)
    d4fc:	dfc00315 	stw	ra,12(sp)
    d500:	dc800215 	stw	r18,8(sp)
    d504:	2023883a 	mov	r17,r4
    d508:	2821883a 	mov	r16,r5
    d50c:	10000f26 	beq	r2,zero,d54c <_Balloc+0x60>
    d510:	8407883a 	add	r3,r16,r16
    d514:	18c7883a 	add	r3,r3,r3
    d518:	10c7883a 	add	r3,r2,r3
    d51c:	18800017 	ldw	r2,0(r3)
    d520:	10001126 	beq	r2,zero,d568 <_Balloc+0x7c>
    d524:	11000017 	ldw	r4,0(r2)
    d528:	19000015 	stw	r4,0(r3)
    d52c:	10000415 	stw	zero,16(r2)
    d530:	10000315 	stw	zero,12(r2)
    d534:	dfc00317 	ldw	ra,12(sp)
    d538:	dc800217 	ldw	r18,8(sp)
    d53c:	dc400117 	ldw	r17,4(sp)
    d540:	dc000017 	ldw	r16,0(sp)
    d544:	dec00404 	addi	sp,sp,16
    d548:	f800283a 	ret
    d54c:	01800844 	movi	r6,33
    d550:	01400104 	movi	r5,4
    d554:	00145280 	call	14528 <_calloc_r>
    d558:	88801315 	stw	r2,76(r17)
    d55c:	103fec1e 	bne	r2,zero,d510 <__alt_data_end+0xfc00d510>
    d560:	0005883a 	mov	r2,zero
    d564:	003ff306 	br	d534 <__alt_data_end+0xfc00d534>
    d568:	01400044 	movi	r5,1
    d56c:	2c24983a 	sll	r18,r5,r16
    d570:	8809883a 	mov	r4,r17
    d574:	91800144 	addi	r6,r18,5
    d578:	318d883a 	add	r6,r6,r6
    d57c:	318d883a 	add	r6,r6,r6
    d580:	00145280 	call	14528 <_calloc_r>
    d584:	103ff626 	beq	r2,zero,d560 <__alt_data_end+0xfc00d560>
    d588:	14000115 	stw	r16,4(r2)
    d58c:	14800215 	stw	r18,8(r2)
    d590:	003fe606 	br	d52c <__alt_data_end+0xfc00d52c>

0000d594 <_Bfree>:
    d594:	28000826 	beq	r5,zero,d5b8 <_Bfree+0x24>
    d598:	28c00117 	ldw	r3,4(r5)
    d59c:	20801317 	ldw	r2,76(r4)
    d5a0:	18c7883a 	add	r3,r3,r3
    d5a4:	18c7883a 	add	r3,r3,r3
    d5a8:	10c5883a 	add	r2,r2,r3
    d5ac:	10c00017 	ldw	r3,0(r2)
    d5b0:	28c00015 	stw	r3,0(r5)
    d5b4:	11400015 	stw	r5,0(r2)
    d5b8:	f800283a 	ret

0000d5bc <__multadd>:
    d5bc:	defffa04 	addi	sp,sp,-24
    d5c0:	dc800315 	stw	r18,12(sp)
    d5c4:	dc400215 	stw	r17,8(sp)
    d5c8:	dc000115 	stw	r16,4(sp)
    d5cc:	2823883a 	mov	r17,r5
    d5d0:	2c000417 	ldw	r16,16(r5)
    d5d4:	dfc00515 	stw	ra,20(sp)
    d5d8:	dcc00415 	stw	r19,16(sp)
    d5dc:	2025883a 	mov	r18,r4
    d5e0:	29400504 	addi	r5,r5,20
    d5e4:	0011883a 	mov	r8,zero
    d5e8:	28c00017 	ldw	r3,0(r5)
    d5ec:	29400104 	addi	r5,r5,4
    d5f0:	42000044 	addi	r8,r8,1
    d5f4:	18bfffcc 	andi	r2,r3,65535
    d5f8:	1185383a 	mul	r2,r2,r6
    d5fc:	1806d43a 	srli	r3,r3,16
    d600:	11cf883a 	add	r7,r2,r7
    d604:	3808d43a 	srli	r4,r7,16
    d608:	1987383a 	mul	r3,r3,r6
    d60c:	38bfffcc 	andi	r2,r7,65535
    d610:	1907883a 	add	r3,r3,r4
    d614:	1808943a 	slli	r4,r3,16
    d618:	180ed43a 	srli	r7,r3,16
    d61c:	2085883a 	add	r2,r4,r2
    d620:	28bfff15 	stw	r2,-4(r5)
    d624:	443ff016 	blt	r8,r16,d5e8 <__alt_data_end+0xfc00d5e8>
    d628:	38000926 	beq	r7,zero,d650 <__multadd+0x94>
    d62c:	88800217 	ldw	r2,8(r17)
    d630:	80800f0e 	bge	r16,r2,d670 <__multadd+0xb4>
    d634:	80800144 	addi	r2,r16,5
    d638:	1085883a 	add	r2,r2,r2
    d63c:	1085883a 	add	r2,r2,r2
    d640:	8885883a 	add	r2,r17,r2
    d644:	11c00015 	stw	r7,0(r2)
    d648:	84000044 	addi	r16,r16,1
    d64c:	8c000415 	stw	r16,16(r17)
    d650:	8805883a 	mov	r2,r17
    d654:	dfc00517 	ldw	ra,20(sp)
    d658:	dcc00417 	ldw	r19,16(sp)
    d65c:	dc800317 	ldw	r18,12(sp)
    d660:	dc400217 	ldw	r17,8(sp)
    d664:	dc000117 	ldw	r16,4(sp)
    d668:	dec00604 	addi	sp,sp,24
    d66c:	f800283a 	ret
    d670:	89400117 	ldw	r5,4(r17)
    d674:	9009883a 	mov	r4,r18
    d678:	d9c00015 	stw	r7,0(sp)
    d67c:	29400044 	addi	r5,r5,1
    d680:	000d4ec0 	call	d4ec <_Balloc>
    d684:	89800417 	ldw	r6,16(r17)
    d688:	89400304 	addi	r5,r17,12
    d68c:	11000304 	addi	r4,r2,12
    d690:	31800084 	addi	r6,r6,2
    d694:	318d883a 	add	r6,r6,r6
    d698:	318d883a 	add	r6,r6,r6
    d69c:	1027883a 	mov	r19,r2
    d6a0:	00059380 	call	5938 <memcpy>
    d6a4:	d9c00017 	ldw	r7,0(sp)
    d6a8:	88000a26 	beq	r17,zero,d6d4 <__multadd+0x118>
    d6ac:	88c00117 	ldw	r3,4(r17)
    d6b0:	90801317 	ldw	r2,76(r18)
    d6b4:	18c7883a 	add	r3,r3,r3
    d6b8:	18c7883a 	add	r3,r3,r3
    d6bc:	10c5883a 	add	r2,r2,r3
    d6c0:	10c00017 	ldw	r3,0(r2)
    d6c4:	88c00015 	stw	r3,0(r17)
    d6c8:	14400015 	stw	r17,0(r2)
    d6cc:	9823883a 	mov	r17,r19
    d6d0:	003fd806 	br	d634 <__alt_data_end+0xfc00d634>
    d6d4:	9823883a 	mov	r17,r19
    d6d8:	003fd606 	br	d634 <__alt_data_end+0xfc00d634>

0000d6dc <__s2b>:
    d6dc:	defff904 	addi	sp,sp,-28
    d6e0:	dc400115 	stw	r17,4(sp)
    d6e4:	dc000015 	stw	r16,0(sp)
    d6e8:	2023883a 	mov	r17,r4
    d6ec:	2821883a 	mov	r16,r5
    d6f0:	39000204 	addi	r4,r7,8
    d6f4:	01400244 	movi	r5,9
    d6f8:	dcc00315 	stw	r19,12(sp)
    d6fc:	dc800215 	stw	r18,8(sp)
    d700:	dfc00615 	stw	ra,24(sp)
    d704:	dd400515 	stw	r21,20(sp)
    d708:	dd000415 	stw	r20,16(sp)
    d70c:	3825883a 	mov	r18,r7
    d710:	3027883a 	mov	r19,r6
    d714:	00176180 	call	17618 <__divsi3>
    d718:	00c00044 	movi	r3,1
    d71c:	000b883a 	mov	r5,zero
    d720:	1880030e 	bge	r3,r2,d730 <__s2b+0x54>
    d724:	18c7883a 	add	r3,r3,r3
    d728:	29400044 	addi	r5,r5,1
    d72c:	18bffd16 	blt	r3,r2,d724 <__alt_data_end+0xfc00d724>
    d730:	8809883a 	mov	r4,r17
    d734:	000d4ec0 	call	d4ec <_Balloc>
    d738:	d8c00717 	ldw	r3,28(sp)
    d73c:	10c00515 	stw	r3,20(r2)
    d740:	00c00044 	movi	r3,1
    d744:	10c00415 	stw	r3,16(r2)
    d748:	00c00244 	movi	r3,9
    d74c:	1cc0210e 	bge	r3,r19,d7d4 <__s2b+0xf8>
    d750:	80eb883a 	add	r21,r16,r3
    d754:	a829883a 	mov	r20,r21
    d758:	84e1883a 	add	r16,r16,r19
    d75c:	a1c00007 	ldb	r7,0(r20)
    d760:	01800284 	movi	r6,10
    d764:	a5000044 	addi	r20,r20,1
    d768:	100b883a 	mov	r5,r2
    d76c:	39fff404 	addi	r7,r7,-48
    d770:	8809883a 	mov	r4,r17
    d774:	000d5bc0 	call	d5bc <__multadd>
    d778:	a43ff81e 	bne	r20,r16,d75c <__alt_data_end+0xfc00d75c>
    d77c:	ace1883a 	add	r16,r21,r19
    d780:	843ffe04 	addi	r16,r16,-8
    d784:	9c800a0e 	bge	r19,r18,d7b0 <__s2b+0xd4>
    d788:	94e5c83a 	sub	r18,r18,r19
    d78c:	84a5883a 	add	r18,r16,r18
    d790:	81c00007 	ldb	r7,0(r16)
    d794:	01800284 	movi	r6,10
    d798:	84000044 	addi	r16,r16,1
    d79c:	100b883a 	mov	r5,r2
    d7a0:	39fff404 	addi	r7,r7,-48
    d7a4:	8809883a 	mov	r4,r17
    d7a8:	000d5bc0 	call	d5bc <__multadd>
    d7ac:	84bff81e 	bne	r16,r18,d790 <__alt_data_end+0xfc00d790>
    d7b0:	dfc00617 	ldw	ra,24(sp)
    d7b4:	dd400517 	ldw	r21,20(sp)
    d7b8:	dd000417 	ldw	r20,16(sp)
    d7bc:	dcc00317 	ldw	r19,12(sp)
    d7c0:	dc800217 	ldw	r18,8(sp)
    d7c4:	dc400117 	ldw	r17,4(sp)
    d7c8:	dc000017 	ldw	r16,0(sp)
    d7cc:	dec00704 	addi	sp,sp,28
    d7d0:	f800283a 	ret
    d7d4:	84000284 	addi	r16,r16,10
    d7d8:	1827883a 	mov	r19,r3
    d7dc:	003fe906 	br	d784 <__alt_data_end+0xfc00d784>

0000d7e0 <__hi0bits>:
    d7e0:	20bfffec 	andhi	r2,r4,65535
    d7e4:	1000141e 	bne	r2,zero,d838 <__hi0bits+0x58>
    d7e8:	2008943a 	slli	r4,r4,16
    d7ec:	00800404 	movi	r2,16
    d7f0:	20ffc02c 	andhi	r3,r4,65280
    d7f4:	1800021e 	bne	r3,zero,d800 <__hi0bits+0x20>
    d7f8:	2008923a 	slli	r4,r4,8
    d7fc:	10800204 	addi	r2,r2,8
    d800:	20fc002c 	andhi	r3,r4,61440
    d804:	1800021e 	bne	r3,zero,d810 <__hi0bits+0x30>
    d808:	2008913a 	slli	r4,r4,4
    d80c:	10800104 	addi	r2,r2,4
    d810:	20f0002c 	andhi	r3,r4,49152
    d814:	1800031e 	bne	r3,zero,d824 <__hi0bits+0x44>
    d818:	2109883a 	add	r4,r4,r4
    d81c:	10800084 	addi	r2,r2,2
    d820:	2109883a 	add	r4,r4,r4
    d824:	20000316 	blt	r4,zero,d834 <__hi0bits+0x54>
    d828:	2110002c 	andhi	r4,r4,16384
    d82c:	2000041e 	bne	r4,zero,d840 <__hi0bits+0x60>
    d830:	00800804 	movi	r2,32
    d834:	f800283a 	ret
    d838:	0005883a 	mov	r2,zero
    d83c:	003fec06 	br	d7f0 <__alt_data_end+0xfc00d7f0>
    d840:	10800044 	addi	r2,r2,1
    d844:	f800283a 	ret

0000d848 <__lo0bits>:
    d848:	20c00017 	ldw	r3,0(r4)
    d84c:	188001cc 	andi	r2,r3,7
    d850:	10000826 	beq	r2,zero,d874 <__lo0bits+0x2c>
    d854:	1880004c 	andi	r2,r3,1
    d858:	1000211e 	bne	r2,zero,d8e0 <__lo0bits+0x98>
    d85c:	1880008c 	andi	r2,r3,2
    d860:	1000211e 	bne	r2,zero,d8e8 <__lo0bits+0xa0>
    d864:	1806d0ba 	srli	r3,r3,2
    d868:	00800084 	movi	r2,2
    d86c:	20c00015 	stw	r3,0(r4)
    d870:	f800283a 	ret
    d874:	18bfffcc 	andi	r2,r3,65535
    d878:	10001326 	beq	r2,zero,d8c8 <__lo0bits+0x80>
    d87c:	0005883a 	mov	r2,zero
    d880:	19403fcc 	andi	r5,r3,255
    d884:	2800021e 	bne	r5,zero,d890 <__lo0bits+0x48>
    d888:	1806d23a 	srli	r3,r3,8
    d88c:	10800204 	addi	r2,r2,8
    d890:	194003cc 	andi	r5,r3,15
    d894:	2800021e 	bne	r5,zero,d8a0 <__lo0bits+0x58>
    d898:	1806d13a 	srli	r3,r3,4
    d89c:	10800104 	addi	r2,r2,4
    d8a0:	194000cc 	andi	r5,r3,3
    d8a4:	2800021e 	bne	r5,zero,d8b0 <__lo0bits+0x68>
    d8a8:	1806d0ba 	srli	r3,r3,2
    d8ac:	10800084 	addi	r2,r2,2
    d8b0:	1940004c 	andi	r5,r3,1
    d8b4:	2800081e 	bne	r5,zero,d8d8 <__lo0bits+0x90>
    d8b8:	1806d07a 	srli	r3,r3,1
    d8bc:	1800051e 	bne	r3,zero,d8d4 <__lo0bits+0x8c>
    d8c0:	00800804 	movi	r2,32
    d8c4:	f800283a 	ret
    d8c8:	1806d43a 	srli	r3,r3,16
    d8cc:	00800404 	movi	r2,16
    d8d0:	003feb06 	br	d880 <__alt_data_end+0xfc00d880>
    d8d4:	10800044 	addi	r2,r2,1
    d8d8:	20c00015 	stw	r3,0(r4)
    d8dc:	f800283a 	ret
    d8e0:	0005883a 	mov	r2,zero
    d8e4:	f800283a 	ret
    d8e8:	1806d07a 	srli	r3,r3,1
    d8ec:	00800044 	movi	r2,1
    d8f0:	20c00015 	stw	r3,0(r4)
    d8f4:	f800283a 	ret

0000d8f8 <__i2b>:
    d8f8:	defffd04 	addi	sp,sp,-12
    d8fc:	dc000015 	stw	r16,0(sp)
    d900:	04000044 	movi	r16,1
    d904:	dc400115 	stw	r17,4(sp)
    d908:	2823883a 	mov	r17,r5
    d90c:	800b883a 	mov	r5,r16
    d910:	dfc00215 	stw	ra,8(sp)
    d914:	000d4ec0 	call	d4ec <_Balloc>
    d918:	14400515 	stw	r17,20(r2)
    d91c:	14000415 	stw	r16,16(r2)
    d920:	dfc00217 	ldw	ra,8(sp)
    d924:	dc400117 	ldw	r17,4(sp)
    d928:	dc000017 	ldw	r16,0(sp)
    d92c:	dec00304 	addi	sp,sp,12
    d930:	f800283a 	ret

0000d934 <__multiply>:
    d934:	defffa04 	addi	sp,sp,-24
    d938:	dcc00315 	stw	r19,12(sp)
    d93c:	dc800215 	stw	r18,8(sp)
    d940:	34c00417 	ldw	r19,16(r6)
    d944:	2c800417 	ldw	r18,16(r5)
    d948:	dd000415 	stw	r20,16(sp)
    d94c:	dc400115 	stw	r17,4(sp)
    d950:	dfc00515 	stw	ra,20(sp)
    d954:	dc000015 	stw	r16,0(sp)
    d958:	2829883a 	mov	r20,r5
    d95c:	3023883a 	mov	r17,r6
    d960:	94c0050e 	bge	r18,r19,d978 <__multiply+0x44>
    d964:	9007883a 	mov	r3,r18
    d968:	3029883a 	mov	r20,r6
    d96c:	9825883a 	mov	r18,r19
    d970:	2823883a 	mov	r17,r5
    d974:	1827883a 	mov	r19,r3
    d978:	a0800217 	ldw	r2,8(r20)
    d97c:	94e1883a 	add	r16,r18,r19
    d980:	a1400117 	ldw	r5,4(r20)
    d984:	1400010e 	bge	r2,r16,d98c <__multiply+0x58>
    d988:	29400044 	addi	r5,r5,1
    d98c:	000d4ec0 	call	d4ec <_Balloc>
    d990:	8415883a 	add	r10,r16,r16
    d994:	12c00504 	addi	r11,r2,20
    d998:	5295883a 	add	r10,r10,r10
    d99c:	5a95883a 	add	r10,r11,r10
    d9a0:	5807883a 	mov	r3,r11
    d9a4:	5a80032e 	bgeu	r11,r10,d9b4 <__multiply+0x80>
    d9a8:	18000015 	stw	zero,0(r3)
    d9ac:	18c00104 	addi	r3,r3,4
    d9b0:	1abffd36 	bltu	r3,r10,d9a8 <__alt_data_end+0xfc00d9a8>
    d9b4:	9ce7883a 	add	r19,r19,r19
    d9b8:	94a5883a 	add	r18,r18,r18
    d9bc:	89800504 	addi	r6,r17,20
    d9c0:	9ce7883a 	add	r19,r19,r19
    d9c4:	a3400504 	addi	r13,r20,20
    d9c8:	94a5883a 	add	r18,r18,r18
    d9cc:	34d9883a 	add	r12,r6,r19
    d9d0:	6c93883a 	add	r9,r13,r18
    d9d4:	3300422e 	bgeu	r6,r12,dae0 <__multiply+0x1ac>
    d9d8:	37c00017 	ldw	ra,0(r6)
    d9dc:	fbffffcc 	andi	r15,ra,65535
    d9e0:	78001b26 	beq	r15,zero,da50 <__multiply+0x11c>
    d9e4:	5811883a 	mov	r8,r11
    d9e8:	681d883a 	mov	r14,r13
    d9ec:	000f883a 	mov	r7,zero
    d9f0:	71000017 	ldw	r4,0(r14)
    d9f4:	40c00017 	ldw	r3,0(r8)
    d9f8:	73800104 	addi	r14,r14,4
    d9fc:	217fffcc 	andi	r5,r4,65535
    da00:	2bcb383a 	mul	r5,r5,r15
    da04:	2008d43a 	srli	r4,r4,16
    da08:	1c7fffcc 	andi	r17,r3,65535
    da0c:	2c4b883a 	add	r5,r5,r17
    da10:	29cb883a 	add	r5,r5,r7
    da14:	23c9383a 	mul	r4,r4,r15
    da18:	1806d43a 	srli	r3,r3,16
    da1c:	280ed43a 	srli	r7,r5,16
    da20:	297fffcc 	andi	r5,r5,65535
    da24:	20c7883a 	add	r3,r4,r3
    da28:	19c7883a 	add	r3,r3,r7
    da2c:	1808943a 	slli	r4,r3,16
    da30:	4023883a 	mov	r17,r8
    da34:	180ed43a 	srli	r7,r3,16
    da38:	214ab03a 	or	r5,r4,r5
    da3c:	41400015 	stw	r5,0(r8)
    da40:	42000104 	addi	r8,r8,4
    da44:	727fea36 	bltu	r14,r9,d9f0 <__alt_data_end+0xfc00d9f0>
    da48:	89c00115 	stw	r7,4(r17)
    da4c:	37c00017 	ldw	ra,0(r6)
    da50:	f83ed43a 	srli	ra,ra,16
    da54:	f8001f26 	beq	ra,zero,dad4 <__multiply+0x1a0>
    da58:	58c00017 	ldw	r3,0(r11)
    da5c:	681d883a 	mov	r14,r13
    da60:	581f883a 	mov	r15,r11
    da64:	1811883a 	mov	r8,r3
    da68:	5825883a 	mov	r18,r11
    da6c:	000f883a 	mov	r7,zero
    da70:	00000106 	br	da78 <__multiply+0x144>
    da74:	8825883a 	mov	r18,r17
    da78:	7140000b 	ldhu	r5,0(r14)
    da7c:	4010d43a 	srli	r8,r8,16
    da80:	193fffcc 	andi	r4,r3,65535
    da84:	2fcb383a 	mul	r5,r5,ra
    da88:	7bc00104 	addi	r15,r15,4
    da8c:	73800104 	addi	r14,r14,4
    da90:	2a0b883a 	add	r5,r5,r8
    da94:	29cb883a 	add	r5,r5,r7
    da98:	2806943a 	slli	r3,r5,16
    da9c:	94400104 	addi	r17,r18,4
    daa0:	280ad43a 	srli	r5,r5,16
    daa4:	1908b03a 	or	r4,r3,r4
    daa8:	793fff15 	stw	r4,-4(r15)
    daac:	70ffff17 	ldw	r3,-4(r14)
    dab0:	8a000017 	ldw	r8,0(r17)
    dab4:	1806d43a 	srli	r3,r3,16
    dab8:	413fffcc 	andi	r4,r8,65535
    dabc:	1fc7383a 	mul	r3,r3,ra
    dac0:	1907883a 	add	r3,r3,r4
    dac4:	1947883a 	add	r3,r3,r5
    dac8:	180ed43a 	srli	r7,r3,16
    dacc:	727fe936 	bltu	r14,r9,da74 <__alt_data_end+0xfc00da74>
    dad0:	90c00115 	stw	r3,4(r18)
    dad4:	31800104 	addi	r6,r6,4
    dad8:	5ac00104 	addi	r11,r11,4
    dadc:	333fbe36 	bltu	r6,r12,d9d8 <__alt_data_end+0xfc00d9d8>
    dae0:	0400090e 	bge	zero,r16,db08 <__multiply+0x1d4>
    dae4:	50ffff17 	ldw	r3,-4(r10)
    dae8:	52bfff04 	addi	r10,r10,-4
    daec:	18000326 	beq	r3,zero,dafc <__multiply+0x1c8>
    daf0:	00000506 	br	db08 <__multiply+0x1d4>
    daf4:	50c00017 	ldw	r3,0(r10)
    daf8:	1800031e 	bne	r3,zero,db08 <__multiply+0x1d4>
    dafc:	843fffc4 	addi	r16,r16,-1
    db00:	52bfff04 	addi	r10,r10,-4
    db04:	803ffb1e 	bne	r16,zero,daf4 <__alt_data_end+0xfc00daf4>
    db08:	14000415 	stw	r16,16(r2)
    db0c:	dfc00517 	ldw	ra,20(sp)
    db10:	dd000417 	ldw	r20,16(sp)
    db14:	dcc00317 	ldw	r19,12(sp)
    db18:	dc800217 	ldw	r18,8(sp)
    db1c:	dc400117 	ldw	r17,4(sp)
    db20:	dc000017 	ldw	r16,0(sp)
    db24:	dec00604 	addi	sp,sp,24
    db28:	f800283a 	ret

0000db2c <__pow5mult>:
    db2c:	defffa04 	addi	sp,sp,-24
    db30:	dcc00315 	stw	r19,12(sp)
    db34:	dc000015 	stw	r16,0(sp)
    db38:	dfc00515 	stw	ra,20(sp)
    db3c:	dd000415 	stw	r20,16(sp)
    db40:	dc800215 	stw	r18,8(sp)
    db44:	dc400115 	stw	r17,4(sp)
    db48:	308000cc 	andi	r2,r6,3
    db4c:	3021883a 	mov	r16,r6
    db50:	2027883a 	mov	r19,r4
    db54:	10002f1e 	bne	r2,zero,dc14 <__pow5mult+0xe8>
    db58:	2825883a 	mov	r18,r5
    db5c:	8021d0ba 	srai	r16,r16,2
    db60:	80001a26 	beq	r16,zero,dbcc <__pow5mult+0xa0>
    db64:	9c401217 	ldw	r17,72(r19)
    db68:	8800061e 	bne	r17,zero,db84 <__pow5mult+0x58>
    db6c:	00003406 	br	dc40 <__pow5mult+0x114>
    db70:	8021d07a 	srai	r16,r16,1
    db74:	80001526 	beq	r16,zero,dbcc <__pow5mult+0xa0>
    db78:	88800017 	ldw	r2,0(r17)
    db7c:	10001c26 	beq	r2,zero,dbf0 <__pow5mult+0xc4>
    db80:	1023883a 	mov	r17,r2
    db84:	8080004c 	andi	r2,r16,1
    db88:	103ff926 	beq	r2,zero,db70 <__alt_data_end+0xfc00db70>
    db8c:	880d883a 	mov	r6,r17
    db90:	900b883a 	mov	r5,r18
    db94:	9809883a 	mov	r4,r19
    db98:	000d9340 	call	d934 <__multiply>
    db9c:	90001b26 	beq	r18,zero,dc0c <__pow5mult+0xe0>
    dba0:	91000117 	ldw	r4,4(r18)
    dba4:	98c01317 	ldw	r3,76(r19)
    dba8:	8021d07a 	srai	r16,r16,1
    dbac:	2109883a 	add	r4,r4,r4
    dbb0:	2109883a 	add	r4,r4,r4
    dbb4:	1907883a 	add	r3,r3,r4
    dbb8:	19000017 	ldw	r4,0(r3)
    dbbc:	91000015 	stw	r4,0(r18)
    dbc0:	1c800015 	stw	r18,0(r3)
    dbc4:	1025883a 	mov	r18,r2
    dbc8:	803feb1e 	bne	r16,zero,db78 <__alt_data_end+0xfc00db78>
    dbcc:	9005883a 	mov	r2,r18
    dbd0:	dfc00517 	ldw	ra,20(sp)
    dbd4:	dd000417 	ldw	r20,16(sp)
    dbd8:	dcc00317 	ldw	r19,12(sp)
    dbdc:	dc800217 	ldw	r18,8(sp)
    dbe0:	dc400117 	ldw	r17,4(sp)
    dbe4:	dc000017 	ldw	r16,0(sp)
    dbe8:	dec00604 	addi	sp,sp,24
    dbec:	f800283a 	ret
    dbf0:	880d883a 	mov	r6,r17
    dbf4:	880b883a 	mov	r5,r17
    dbf8:	9809883a 	mov	r4,r19
    dbfc:	000d9340 	call	d934 <__multiply>
    dc00:	88800015 	stw	r2,0(r17)
    dc04:	10000015 	stw	zero,0(r2)
    dc08:	003fdd06 	br	db80 <__alt_data_end+0xfc00db80>
    dc0c:	1025883a 	mov	r18,r2
    dc10:	003fd706 	br	db70 <__alt_data_end+0xfc00db70>
    dc14:	10bfffc4 	addi	r2,r2,-1
    dc18:	1085883a 	add	r2,r2,r2
    dc1c:	00c000b4 	movhi	r3,2
    dc20:	18d5fc04 	addi	r3,r3,22512
    dc24:	1085883a 	add	r2,r2,r2
    dc28:	1885883a 	add	r2,r3,r2
    dc2c:	11800017 	ldw	r6,0(r2)
    dc30:	000f883a 	mov	r7,zero
    dc34:	000d5bc0 	call	d5bc <__multadd>
    dc38:	1025883a 	mov	r18,r2
    dc3c:	003fc706 	br	db5c <__alt_data_end+0xfc00db5c>
    dc40:	05000044 	movi	r20,1
    dc44:	a00b883a 	mov	r5,r20
    dc48:	9809883a 	mov	r4,r19
    dc4c:	000d4ec0 	call	d4ec <_Balloc>
    dc50:	1023883a 	mov	r17,r2
    dc54:	00809c44 	movi	r2,625
    dc58:	88800515 	stw	r2,20(r17)
    dc5c:	8d000415 	stw	r20,16(r17)
    dc60:	9c401215 	stw	r17,72(r19)
    dc64:	88000015 	stw	zero,0(r17)
    dc68:	003fc606 	br	db84 <__alt_data_end+0xfc00db84>

0000dc6c <__lshift>:
    dc6c:	defff904 	addi	sp,sp,-28
    dc70:	dd400515 	stw	r21,20(sp)
    dc74:	dcc00315 	stw	r19,12(sp)
    dc78:	302bd17a 	srai	r21,r6,5
    dc7c:	2cc00417 	ldw	r19,16(r5)
    dc80:	28800217 	ldw	r2,8(r5)
    dc84:	dd000415 	stw	r20,16(sp)
    dc88:	ace7883a 	add	r19,r21,r19
    dc8c:	dc800215 	stw	r18,8(sp)
    dc90:	dc400115 	stw	r17,4(sp)
    dc94:	dc000015 	stw	r16,0(sp)
    dc98:	dfc00615 	stw	ra,24(sp)
    dc9c:	9c000044 	addi	r16,r19,1
    dca0:	2823883a 	mov	r17,r5
    dca4:	3029883a 	mov	r20,r6
    dca8:	2025883a 	mov	r18,r4
    dcac:	29400117 	ldw	r5,4(r5)
    dcb0:	1400030e 	bge	r2,r16,dcc0 <__lshift+0x54>
    dcb4:	1085883a 	add	r2,r2,r2
    dcb8:	29400044 	addi	r5,r5,1
    dcbc:	143ffd16 	blt	r2,r16,dcb4 <__alt_data_end+0xfc00dcb4>
    dcc0:	9009883a 	mov	r4,r18
    dcc4:	000d4ec0 	call	d4ec <_Balloc>
    dcc8:	10c00504 	addi	r3,r2,20
    dccc:	0540070e 	bge	zero,r21,dcec <__lshift+0x80>
    dcd0:	ad6b883a 	add	r21,r21,r21
    dcd4:	ad6b883a 	add	r21,r21,r21
    dcd8:	1809883a 	mov	r4,r3
    dcdc:	1d47883a 	add	r3,r3,r21
    dce0:	20000015 	stw	zero,0(r4)
    dce4:	21000104 	addi	r4,r4,4
    dce8:	193ffd1e 	bne	r3,r4,dce0 <__alt_data_end+0xfc00dce0>
    dcec:	8a000417 	ldw	r8,16(r17)
    dcf0:	89000504 	addi	r4,r17,20
    dcf4:	a18007cc 	andi	r6,r20,31
    dcf8:	4211883a 	add	r8,r8,r8
    dcfc:	4211883a 	add	r8,r8,r8
    dd00:	2211883a 	add	r8,r4,r8
    dd04:	30002326 	beq	r6,zero,dd94 <__lshift+0x128>
    dd08:	02400804 	movi	r9,32
    dd0c:	4993c83a 	sub	r9,r9,r6
    dd10:	000b883a 	mov	r5,zero
    dd14:	21c00017 	ldw	r7,0(r4)
    dd18:	1815883a 	mov	r10,r3
    dd1c:	18c00104 	addi	r3,r3,4
    dd20:	398e983a 	sll	r7,r7,r6
    dd24:	21000104 	addi	r4,r4,4
    dd28:	394ab03a 	or	r5,r7,r5
    dd2c:	197fff15 	stw	r5,-4(r3)
    dd30:	217fff17 	ldw	r5,-4(r4)
    dd34:	2a4ad83a 	srl	r5,r5,r9
    dd38:	223ff636 	bltu	r4,r8,dd14 <__alt_data_end+0xfc00dd14>
    dd3c:	51400115 	stw	r5,4(r10)
    dd40:	28001a1e 	bne	r5,zero,ddac <__lshift+0x140>
    dd44:	843fffc4 	addi	r16,r16,-1
    dd48:	14000415 	stw	r16,16(r2)
    dd4c:	88000826 	beq	r17,zero,dd70 <__lshift+0x104>
    dd50:	89000117 	ldw	r4,4(r17)
    dd54:	90c01317 	ldw	r3,76(r18)
    dd58:	2109883a 	add	r4,r4,r4
    dd5c:	2109883a 	add	r4,r4,r4
    dd60:	1907883a 	add	r3,r3,r4
    dd64:	19000017 	ldw	r4,0(r3)
    dd68:	89000015 	stw	r4,0(r17)
    dd6c:	1c400015 	stw	r17,0(r3)
    dd70:	dfc00617 	ldw	ra,24(sp)
    dd74:	dd400517 	ldw	r21,20(sp)
    dd78:	dd000417 	ldw	r20,16(sp)
    dd7c:	dcc00317 	ldw	r19,12(sp)
    dd80:	dc800217 	ldw	r18,8(sp)
    dd84:	dc400117 	ldw	r17,4(sp)
    dd88:	dc000017 	ldw	r16,0(sp)
    dd8c:	dec00704 	addi	sp,sp,28
    dd90:	f800283a 	ret
    dd94:	21400017 	ldw	r5,0(r4)
    dd98:	18c00104 	addi	r3,r3,4
    dd9c:	21000104 	addi	r4,r4,4
    dda0:	197fff15 	stw	r5,-4(r3)
    dda4:	223ffb36 	bltu	r4,r8,dd94 <__alt_data_end+0xfc00dd94>
    dda8:	003fe606 	br	dd44 <__alt_data_end+0xfc00dd44>
    ddac:	9c000084 	addi	r16,r19,2
    ddb0:	003fe406 	br	dd44 <__alt_data_end+0xfc00dd44>

0000ddb4 <__mcmp>:
    ddb4:	20800417 	ldw	r2,16(r4)
    ddb8:	28c00417 	ldw	r3,16(r5)
    ddbc:	10c5c83a 	sub	r2,r2,r3
    ddc0:	1000111e 	bne	r2,zero,de08 <__mcmp+0x54>
    ddc4:	18c7883a 	add	r3,r3,r3
    ddc8:	18c7883a 	add	r3,r3,r3
    ddcc:	21000504 	addi	r4,r4,20
    ddd0:	29400504 	addi	r5,r5,20
    ddd4:	20c5883a 	add	r2,r4,r3
    ddd8:	28cb883a 	add	r5,r5,r3
    dddc:	00000106 	br	dde4 <__mcmp+0x30>
    dde0:	20800a2e 	bgeu	r4,r2,de0c <__mcmp+0x58>
    dde4:	10bfff04 	addi	r2,r2,-4
    dde8:	297fff04 	addi	r5,r5,-4
    ddec:	11800017 	ldw	r6,0(r2)
    ddf0:	28c00017 	ldw	r3,0(r5)
    ddf4:	30fffa26 	beq	r6,r3,dde0 <__alt_data_end+0xfc00dde0>
    ddf8:	30c00236 	bltu	r6,r3,de04 <__mcmp+0x50>
    ddfc:	00800044 	movi	r2,1
    de00:	f800283a 	ret
    de04:	00bfffc4 	movi	r2,-1
    de08:	f800283a 	ret
    de0c:	0005883a 	mov	r2,zero
    de10:	f800283a 	ret

0000de14 <__mdiff>:
    de14:	28c00417 	ldw	r3,16(r5)
    de18:	30800417 	ldw	r2,16(r6)
    de1c:	defffa04 	addi	sp,sp,-24
    de20:	dcc00315 	stw	r19,12(sp)
    de24:	dc800215 	stw	r18,8(sp)
    de28:	dfc00515 	stw	ra,20(sp)
    de2c:	dd000415 	stw	r20,16(sp)
    de30:	dc400115 	stw	r17,4(sp)
    de34:	dc000015 	stw	r16,0(sp)
    de38:	1887c83a 	sub	r3,r3,r2
    de3c:	2825883a 	mov	r18,r5
    de40:	3027883a 	mov	r19,r6
    de44:	1800141e 	bne	r3,zero,de98 <__mdiff+0x84>
    de48:	1085883a 	add	r2,r2,r2
    de4c:	1085883a 	add	r2,r2,r2
    de50:	2a000504 	addi	r8,r5,20
    de54:	34000504 	addi	r16,r6,20
    de58:	4087883a 	add	r3,r8,r2
    de5c:	8085883a 	add	r2,r16,r2
    de60:	00000106 	br	de68 <__mdiff+0x54>
    de64:	40c0592e 	bgeu	r8,r3,dfcc <__mdiff+0x1b8>
    de68:	18ffff04 	addi	r3,r3,-4
    de6c:	10bfff04 	addi	r2,r2,-4
    de70:	19c00017 	ldw	r7,0(r3)
    de74:	11400017 	ldw	r5,0(r2)
    de78:	397ffa26 	beq	r7,r5,de64 <__alt_data_end+0xfc00de64>
    de7c:	3940592e 	bgeu	r7,r5,dfe4 <__mdiff+0x1d0>
    de80:	9005883a 	mov	r2,r18
    de84:	4023883a 	mov	r17,r8
    de88:	9825883a 	mov	r18,r19
    de8c:	05000044 	movi	r20,1
    de90:	1027883a 	mov	r19,r2
    de94:	00000406 	br	dea8 <__mdiff+0x94>
    de98:	18005616 	blt	r3,zero,dff4 <__mdiff+0x1e0>
    de9c:	34400504 	addi	r17,r6,20
    dea0:	2c000504 	addi	r16,r5,20
    dea4:	0029883a 	mov	r20,zero
    dea8:	91400117 	ldw	r5,4(r18)
    deac:	000d4ec0 	call	d4ec <_Balloc>
    deb0:	92400417 	ldw	r9,16(r18)
    deb4:	9b000417 	ldw	r12,16(r19)
    deb8:	12c00504 	addi	r11,r2,20
    debc:	4a51883a 	add	r8,r9,r9
    dec0:	6319883a 	add	r12,r12,r12
    dec4:	4211883a 	add	r8,r8,r8
    dec8:	6319883a 	add	r12,r12,r12
    decc:	15000315 	stw	r20,12(r2)
    ded0:	8211883a 	add	r8,r16,r8
    ded4:	8b19883a 	add	r12,r17,r12
    ded8:	0007883a 	mov	r3,zero
    dedc:	81400017 	ldw	r5,0(r16)
    dee0:	89c00017 	ldw	r7,0(r17)
    dee4:	59800104 	addi	r6,r11,4
    dee8:	293fffcc 	andi	r4,r5,65535
    deec:	20c7883a 	add	r3,r4,r3
    def0:	393fffcc 	andi	r4,r7,65535
    def4:	1909c83a 	sub	r4,r3,r4
    def8:	280ad43a 	srli	r5,r5,16
    defc:	380ed43a 	srli	r7,r7,16
    df00:	2007d43a 	srai	r3,r4,16
    df04:	213fffcc 	andi	r4,r4,65535
    df08:	29cbc83a 	sub	r5,r5,r7
    df0c:	28c7883a 	add	r3,r5,r3
    df10:	180a943a 	slli	r5,r3,16
    df14:	8c400104 	addi	r17,r17,4
    df18:	84000104 	addi	r16,r16,4
    df1c:	2908b03a 	or	r4,r5,r4
    df20:	59000015 	stw	r4,0(r11)
    df24:	1807d43a 	srai	r3,r3,16
    df28:	3015883a 	mov	r10,r6
    df2c:	3017883a 	mov	r11,r6
    df30:	8b3fea36 	bltu	r17,r12,dedc <__alt_data_end+0xfc00dedc>
    df34:	8200162e 	bgeu	r16,r8,df90 <__mdiff+0x17c>
    df38:	8017883a 	mov	r11,r16
    df3c:	59400017 	ldw	r5,0(r11)
    df40:	31800104 	addi	r6,r6,4
    df44:	5ac00104 	addi	r11,r11,4
    df48:	293fffcc 	andi	r4,r5,65535
    df4c:	20c7883a 	add	r3,r4,r3
    df50:	280ed43a 	srli	r7,r5,16
    df54:	180bd43a 	srai	r5,r3,16
    df58:	193fffcc 	andi	r4,r3,65535
    df5c:	3947883a 	add	r3,r7,r5
    df60:	180a943a 	slli	r5,r3,16
    df64:	1807d43a 	srai	r3,r3,16
    df68:	2908b03a 	or	r4,r5,r4
    df6c:	313fff15 	stw	r4,-4(r6)
    df70:	5a3ff236 	bltu	r11,r8,df3c <__alt_data_end+0xfc00df3c>
    df74:	0406303a 	nor	r3,zero,r16
    df78:	1a07883a 	add	r3,r3,r8
    df7c:	1806d0ba 	srli	r3,r3,2
    df80:	18c00044 	addi	r3,r3,1
    df84:	18c7883a 	add	r3,r3,r3
    df88:	18c7883a 	add	r3,r3,r3
    df8c:	50d5883a 	add	r10,r10,r3
    df90:	50ffff04 	addi	r3,r10,-4
    df94:	2000041e 	bne	r4,zero,dfa8 <__mdiff+0x194>
    df98:	18ffff04 	addi	r3,r3,-4
    df9c:	19000017 	ldw	r4,0(r3)
    dfa0:	4a7fffc4 	addi	r9,r9,-1
    dfa4:	203ffc26 	beq	r4,zero,df98 <__alt_data_end+0xfc00df98>
    dfa8:	12400415 	stw	r9,16(r2)
    dfac:	dfc00517 	ldw	ra,20(sp)
    dfb0:	dd000417 	ldw	r20,16(sp)
    dfb4:	dcc00317 	ldw	r19,12(sp)
    dfb8:	dc800217 	ldw	r18,8(sp)
    dfbc:	dc400117 	ldw	r17,4(sp)
    dfc0:	dc000017 	ldw	r16,0(sp)
    dfc4:	dec00604 	addi	sp,sp,24
    dfc8:	f800283a 	ret
    dfcc:	000b883a 	mov	r5,zero
    dfd0:	000d4ec0 	call	d4ec <_Balloc>
    dfd4:	00c00044 	movi	r3,1
    dfd8:	10c00415 	stw	r3,16(r2)
    dfdc:	10000515 	stw	zero,20(r2)
    dfe0:	003ff206 	br	dfac <__alt_data_end+0xfc00dfac>
    dfe4:	8023883a 	mov	r17,r16
    dfe8:	0029883a 	mov	r20,zero
    dfec:	4021883a 	mov	r16,r8
    dff0:	003fad06 	br	dea8 <__alt_data_end+0xfc00dea8>
    dff4:	9005883a 	mov	r2,r18
    dff8:	94400504 	addi	r17,r18,20
    dffc:	9c000504 	addi	r16,r19,20
    e000:	9825883a 	mov	r18,r19
    e004:	05000044 	movi	r20,1
    e008:	1027883a 	mov	r19,r2
    e00c:	003fa606 	br	dea8 <__alt_data_end+0xfc00dea8>

0000e010 <__ulp>:
    e010:	295ffc2c 	andhi	r5,r5,32752
    e014:	00bf3034 	movhi	r2,64704
    e018:	2887883a 	add	r3,r5,r2
    e01c:	00c0020e 	bge	zero,r3,e028 <__ulp+0x18>
    e020:	0005883a 	mov	r2,zero
    e024:	f800283a 	ret
    e028:	00c7c83a 	sub	r3,zero,r3
    e02c:	1807d53a 	srai	r3,r3,20
    e030:	008004c4 	movi	r2,19
    e034:	10c00b0e 	bge	r2,r3,e064 <__ulp+0x54>
    e038:	18bffb04 	addi	r2,r3,-20
    e03c:	01000784 	movi	r4,30
    e040:	0007883a 	mov	r3,zero
    e044:	20800516 	blt	r4,r2,e05c <__ulp+0x4c>
    e048:	010007c4 	movi	r4,31
    e04c:	2089c83a 	sub	r4,r4,r2
    e050:	00800044 	movi	r2,1
    e054:	1104983a 	sll	r2,r2,r4
    e058:	f800283a 	ret
    e05c:	00800044 	movi	r2,1
    e060:	f800283a 	ret
    e064:	01400234 	movhi	r5,8
    e068:	28c7d83a 	sra	r3,r5,r3
    e06c:	0005883a 	mov	r2,zero
    e070:	f800283a 	ret

0000e074 <__b2d>:
    e074:	defffa04 	addi	sp,sp,-24
    e078:	dc000015 	stw	r16,0(sp)
    e07c:	24000417 	ldw	r16,16(r4)
    e080:	dc400115 	stw	r17,4(sp)
    e084:	24400504 	addi	r17,r4,20
    e088:	8421883a 	add	r16,r16,r16
    e08c:	8421883a 	add	r16,r16,r16
    e090:	8c21883a 	add	r16,r17,r16
    e094:	dc800215 	stw	r18,8(sp)
    e098:	84bfff17 	ldw	r18,-4(r16)
    e09c:	dd000415 	stw	r20,16(sp)
    e0a0:	dcc00315 	stw	r19,12(sp)
    e0a4:	9009883a 	mov	r4,r18
    e0a8:	2829883a 	mov	r20,r5
    e0ac:	dfc00515 	stw	ra,20(sp)
    e0b0:	000d7e00 	call	d7e0 <__hi0bits>
    e0b4:	00c00804 	movi	r3,32
    e0b8:	1889c83a 	sub	r4,r3,r2
    e0bc:	a1000015 	stw	r4,0(r20)
    e0c0:	01000284 	movi	r4,10
    e0c4:	84ffff04 	addi	r19,r16,-4
    e0c8:	20801216 	blt	r4,r2,e114 <__b2d+0xa0>
    e0cc:	018002c4 	movi	r6,11
    e0d0:	308dc83a 	sub	r6,r6,r2
    e0d4:	9186d83a 	srl	r3,r18,r6
    e0d8:	18cffc34 	orhi	r3,r3,16368
    e0dc:	8cc0212e 	bgeu	r17,r19,e164 <__b2d+0xf0>
    e0e0:	813ffe17 	ldw	r4,-8(r16)
    e0e4:	218cd83a 	srl	r6,r4,r6
    e0e8:	10800544 	addi	r2,r2,21
    e0ec:	9084983a 	sll	r2,r18,r2
    e0f0:	1184b03a 	or	r2,r2,r6
    e0f4:	dfc00517 	ldw	ra,20(sp)
    e0f8:	dd000417 	ldw	r20,16(sp)
    e0fc:	dcc00317 	ldw	r19,12(sp)
    e100:	dc800217 	ldw	r18,8(sp)
    e104:	dc400117 	ldw	r17,4(sp)
    e108:	dc000017 	ldw	r16,0(sp)
    e10c:	dec00604 	addi	sp,sp,24
    e110:	f800283a 	ret
    e114:	8cc00f2e 	bgeu	r17,r19,e154 <__b2d+0xe0>
    e118:	117ffd44 	addi	r5,r2,-11
    e11c:	80bffe17 	ldw	r2,-8(r16)
    e120:	28000e26 	beq	r5,zero,e15c <__b2d+0xe8>
    e124:	1949c83a 	sub	r4,r3,r5
    e128:	9164983a 	sll	r18,r18,r5
    e12c:	1106d83a 	srl	r3,r2,r4
    e130:	81bffe04 	addi	r6,r16,-8
    e134:	948ffc34 	orhi	r18,r18,16368
    e138:	90c6b03a 	or	r3,r18,r3
    e13c:	89800e2e 	bgeu	r17,r6,e178 <__b2d+0x104>
    e140:	81bffd17 	ldw	r6,-12(r16)
    e144:	1144983a 	sll	r2,r2,r5
    e148:	310ad83a 	srl	r5,r6,r4
    e14c:	2884b03a 	or	r2,r5,r2
    e150:	003fe806 	br	e0f4 <__alt_data_end+0xfc00e0f4>
    e154:	10bffd44 	addi	r2,r2,-11
    e158:	1000041e 	bne	r2,zero,e16c <__b2d+0xf8>
    e15c:	90cffc34 	orhi	r3,r18,16368
    e160:	003fe406 	br	e0f4 <__alt_data_end+0xfc00e0f4>
    e164:	000d883a 	mov	r6,zero
    e168:	003fdf06 	br	e0e8 <__alt_data_end+0xfc00e0e8>
    e16c:	90a4983a 	sll	r18,r18,r2
    e170:	0005883a 	mov	r2,zero
    e174:	003ff906 	br	e15c <__alt_data_end+0xfc00e15c>
    e178:	1144983a 	sll	r2,r2,r5
    e17c:	003fdd06 	br	e0f4 <__alt_data_end+0xfc00e0f4>

0000e180 <__d2b>:
    e180:	defff804 	addi	sp,sp,-32
    e184:	dc000215 	stw	r16,8(sp)
    e188:	3021883a 	mov	r16,r6
    e18c:	dc400315 	stw	r17,12(sp)
    e190:	8022907a 	slli	r17,r16,1
    e194:	dd000615 	stw	r20,24(sp)
    e198:	2829883a 	mov	r20,r5
    e19c:	01400044 	movi	r5,1
    e1a0:	dcc00515 	stw	r19,20(sp)
    e1a4:	dc800415 	stw	r18,16(sp)
    e1a8:	dfc00715 	stw	ra,28(sp)
    e1ac:	3825883a 	mov	r18,r7
    e1b0:	8822d57a 	srli	r17,r17,21
    e1b4:	000d4ec0 	call	d4ec <_Balloc>
    e1b8:	1027883a 	mov	r19,r2
    e1bc:	00800434 	movhi	r2,16
    e1c0:	10bfffc4 	addi	r2,r2,-1
    e1c4:	808c703a 	and	r6,r16,r2
    e1c8:	88000126 	beq	r17,zero,e1d0 <__d2b+0x50>
    e1cc:	31800434 	orhi	r6,r6,16
    e1d0:	d9800015 	stw	r6,0(sp)
    e1d4:	a0002426 	beq	r20,zero,e268 <__d2b+0xe8>
    e1d8:	d9000104 	addi	r4,sp,4
    e1dc:	dd000115 	stw	r20,4(sp)
    e1e0:	000d8480 	call	d848 <__lo0bits>
    e1e4:	d8c00017 	ldw	r3,0(sp)
    e1e8:	10002f1e 	bne	r2,zero,e2a8 <__d2b+0x128>
    e1ec:	d9000117 	ldw	r4,4(sp)
    e1f0:	99000515 	stw	r4,20(r19)
    e1f4:	1821003a 	cmpeq	r16,r3,zero
    e1f8:	01000084 	movi	r4,2
    e1fc:	2421c83a 	sub	r16,r4,r16
    e200:	98c00615 	stw	r3,24(r19)
    e204:	9c000415 	stw	r16,16(r19)
    e208:	88001f1e 	bne	r17,zero,e288 <__d2b+0x108>
    e20c:	10bef384 	addi	r2,r2,-1074
    e210:	90800015 	stw	r2,0(r18)
    e214:	00900034 	movhi	r2,16384
    e218:	10bfffc4 	addi	r2,r2,-1
    e21c:	8085883a 	add	r2,r16,r2
    e220:	1085883a 	add	r2,r2,r2
    e224:	1085883a 	add	r2,r2,r2
    e228:	9885883a 	add	r2,r19,r2
    e22c:	11000517 	ldw	r4,20(r2)
    e230:	8020917a 	slli	r16,r16,5
    e234:	000d7e00 	call	d7e0 <__hi0bits>
    e238:	d8c00817 	ldw	r3,32(sp)
    e23c:	8085c83a 	sub	r2,r16,r2
    e240:	18800015 	stw	r2,0(r3)
    e244:	9805883a 	mov	r2,r19
    e248:	dfc00717 	ldw	ra,28(sp)
    e24c:	dd000617 	ldw	r20,24(sp)
    e250:	dcc00517 	ldw	r19,20(sp)
    e254:	dc800417 	ldw	r18,16(sp)
    e258:	dc400317 	ldw	r17,12(sp)
    e25c:	dc000217 	ldw	r16,8(sp)
    e260:	dec00804 	addi	sp,sp,32
    e264:	f800283a 	ret
    e268:	d809883a 	mov	r4,sp
    e26c:	000d8480 	call	d848 <__lo0bits>
    e270:	d8c00017 	ldw	r3,0(sp)
    e274:	04000044 	movi	r16,1
    e278:	9c000415 	stw	r16,16(r19)
    e27c:	98c00515 	stw	r3,20(r19)
    e280:	10800804 	addi	r2,r2,32
    e284:	883fe126 	beq	r17,zero,e20c <__alt_data_end+0xfc00e20c>
    e288:	00c00d44 	movi	r3,53
    e28c:	8c7ef344 	addi	r17,r17,-1075
    e290:	88a3883a 	add	r17,r17,r2
    e294:	1885c83a 	sub	r2,r3,r2
    e298:	d8c00817 	ldw	r3,32(sp)
    e29c:	94400015 	stw	r17,0(r18)
    e2a0:	18800015 	stw	r2,0(r3)
    e2a4:	003fe706 	br	e244 <__alt_data_end+0xfc00e244>
    e2a8:	01000804 	movi	r4,32
    e2ac:	2089c83a 	sub	r4,r4,r2
    e2b0:	1908983a 	sll	r4,r3,r4
    e2b4:	d9400117 	ldw	r5,4(sp)
    e2b8:	1886d83a 	srl	r3,r3,r2
    e2bc:	2148b03a 	or	r4,r4,r5
    e2c0:	99000515 	stw	r4,20(r19)
    e2c4:	d8c00015 	stw	r3,0(sp)
    e2c8:	003fca06 	br	e1f4 <__alt_data_end+0xfc00e1f4>

0000e2cc <__ratio>:
    e2cc:	defff904 	addi	sp,sp,-28
    e2d0:	dc400315 	stw	r17,12(sp)
    e2d4:	2823883a 	mov	r17,r5
    e2d8:	d9400104 	addi	r5,sp,4
    e2dc:	dfc00615 	stw	ra,24(sp)
    e2e0:	dcc00515 	stw	r19,20(sp)
    e2e4:	dc800415 	stw	r18,16(sp)
    e2e8:	2027883a 	mov	r19,r4
    e2ec:	dc000215 	stw	r16,8(sp)
    e2f0:	000e0740 	call	e074 <__b2d>
    e2f4:	d80b883a 	mov	r5,sp
    e2f8:	8809883a 	mov	r4,r17
    e2fc:	1025883a 	mov	r18,r2
    e300:	1821883a 	mov	r16,r3
    e304:	000e0740 	call	e074 <__b2d>
    e308:	8a000417 	ldw	r8,16(r17)
    e30c:	99000417 	ldw	r4,16(r19)
    e310:	d9400117 	ldw	r5,4(sp)
    e314:	2209c83a 	sub	r4,r4,r8
    e318:	2010917a 	slli	r8,r4,5
    e31c:	d9000017 	ldw	r4,0(sp)
    e320:	2909c83a 	sub	r4,r5,r4
    e324:	4109883a 	add	r4,r8,r4
    e328:	01000e0e 	bge	zero,r4,e364 <__ratio+0x98>
    e32c:	2008953a 	slli	r4,r4,20
    e330:	2421883a 	add	r16,r4,r16
    e334:	100d883a 	mov	r6,r2
    e338:	180f883a 	mov	r7,r3
    e33c:	9009883a 	mov	r4,r18
    e340:	800b883a 	mov	r5,r16
    e344:	00182740 	call	18274 <__divdf3>
    e348:	dfc00617 	ldw	ra,24(sp)
    e34c:	dcc00517 	ldw	r19,20(sp)
    e350:	dc800417 	ldw	r18,16(sp)
    e354:	dc400317 	ldw	r17,12(sp)
    e358:	dc000217 	ldw	r16,8(sp)
    e35c:	dec00704 	addi	sp,sp,28
    e360:	f800283a 	ret
    e364:	2008953a 	slli	r4,r4,20
    e368:	1907c83a 	sub	r3,r3,r4
    e36c:	003ff106 	br	e334 <__alt_data_end+0xfc00e334>

0000e370 <_mprec_log10>:
    e370:	defffe04 	addi	sp,sp,-8
    e374:	dc000015 	stw	r16,0(sp)
    e378:	dfc00115 	stw	ra,4(sp)
    e37c:	008005c4 	movi	r2,23
    e380:	2021883a 	mov	r16,r4
    e384:	11000d0e 	bge	r2,r4,e3bc <_mprec_log10+0x4c>
    e388:	0005883a 	mov	r2,zero
    e38c:	00cffc34 	movhi	r3,16368
    e390:	843fffc4 	addi	r16,r16,-1
    e394:	000d883a 	mov	r6,zero
    e398:	01d00934 	movhi	r7,16420
    e39c:	1009883a 	mov	r4,r2
    e3a0:	180b883a 	mov	r5,r3
    e3a4:	0018db40 	call	18db4 <__muldf3>
    e3a8:	803ff91e 	bne	r16,zero,e390 <__alt_data_end+0xfc00e390>
    e3ac:	dfc00117 	ldw	ra,4(sp)
    e3b0:	dc000017 	ldw	r16,0(sp)
    e3b4:	dec00204 	addi	sp,sp,8
    e3b8:	f800283a 	ret
    e3bc:	202090fa 	slli	r16,r4,3
    e3c0:	008000b4 	movhi	r2,2
    e3c4:	10961304 	addi	r2,r2,22604
    e3c8:	1421883a 	add	r16,r2,r16
    e3cc:	80800017 	ldw	r2,0(r16)
    e3d0:	80c00117 	ldw	r3,4(r16)
    e3d4:	dfc00117 	ldw	ra,4(sp)
    e3d8:	dc000017 	ldw	r16,0(sp)
    e3dc:	dec00204 	addi	sp,sp,8
    e3e0:	f800283a 	ret

0000e3e4 <__copybits>:
    e3e4:	297fffc4 	addi	r5,r5,-1
    e3e8:	280fd17a 	srai	r7,r5,5
    e3ec:	30c00417 	ldw	r3,16(r6)
    e3f0:	30800504 	addi	r2,r6,20
    e3f4:	39c00044 	addi	r7,r7,1
    e3f8:	18c7883a 	add	r3,r3,r3
    e3fc:	39cf883a 	add	r7,r7,r7
    e400:	18c7883a 	add	r3,r3,r3
    e404:	39cf883a 	add	r7,r7,r7
    e408:	10c7883a 	add	r3,r2,r3
    e40c:	21cf883a 	add	r7,r4,r7
    e410:	10c00d2e 	bgeu	r2,r3,e448 <__copybits+0x64>
    e414:	200b883a 	mov	r5,r4
    e418:	12000017 	ldw	r8,0(r2)
    e41c:	29400104 	addi	r5,r5,4
    e420:	10800104 	addi	r2,r2,4
    e424:	2a3fff15 	stw	r8,-4(r5)
    e428:	10fffb36 	bltu	r2,r3,e418 <__alt_data_end+0xfc00e418>
    e42c:	1985c83a 	sub	r2,r3,r6
    e430:	10bffac4 	addi	r2,r2,-21
    e434:	1004d0ba 	srli	r2,r2,2
    e438:	10800044 	addi	r2,r2,1
    e43c:	1085883a 	add	r2,r2,r2
    e440:	1085883a 	add	r2,r2,r2
    e444:	2089883a 	add	r4,r4,r2
    e448:	21c0032e 	bgeu	r4,r7,e458 <__copybits+0x74>
    e44c:	20000015 	stw	zero,0(r4)
    e450:	21000104 	addi	r4,r4,4
    e454:	21fffd36 	bltu	r4,r7,e44c <__alt_data_end+0xfc00e44c>
    e458:	f800283a 	ret

0000e45c <__any_on>:
    e45c:	20c00417 	ldw	r3,16(r4)
    e460:	2805d17a 	srai	r2,r5,5
    e464:	21000504 	addi	r4,r4,20
    e468:	18800d0e 	bge	r3,r2,e4a0 <__any_on+0x44>
    e46c:	18c7883a 	add	r3,r3,r3
    e470:	18c7883a 	add	r3,r3,r3
    e474:	20c7883a 	add	r3,r4,r3
    e478:	20c0192e 	bgeu	r4,r3,e4e0 <__any_on+0x84>
    e47c:	18bfff17 	ldw	r2,-4(r3)
    e480:	18ffff04 	addi	r3,r3,-4
    e484:	1000041e 	bne	r2,zero,e498 <__any_on+0x3c>
    e488:	20c0142e 	bgeu	r4,r3,e4dc <__any_on+0x80>
    e48c:	18ffff04 	addi	r3,r3,-4
    e490:	19400017 	ldw	r5,0(r3)
    e494:	283ffc26 	beq	r5,zero,e488 <__alt_data_end+0xfc00e488>
    e498:	00800044 	movi	r2,1
    e49c:	f800283a 	ret
    e4a0:	10c00a0e 	bge	r2,r3,e4cc <__any_on+0x70>
    e4a4:	1085883a 	add	r2,r2,r2
    e4a8:	1085883a 	add	r2,r2,r2
    e4ac:	294007cc 	andi	r5,r5,31
    e4b0:	2087883a 	add	r3,r4,r2
    e4b4:	283ff026 	beq	r5,zero,e478 <__alt_data_end+0xfc00e478>
    e4b8:	19800017 	ldw	r6,0(r3)
    e4bc:	3144d83a 	srl	r2,r6,r5
    e4c0:	114a983a 	sll	r5,r2,r5
    e4c4:	317ff41e 	bne	r6,r5,e498 <__alt_data_end+0xfc00e498>
    e4c8:	003feb06 	br	e478 <__alt_data_end+0xfc00e478>
    e4cc:	1085883a 	add	r2,r2,r2
    e4d0:	1085883a 	add	r2,r2,r2
    e4d4:	2087883a 	add	r3,r4,r2
    e4d8:	003fe706 	br	e478 <__alt_data_end+0xfc00e478>
    e4dc:	f800283a 	ret
    e4e0:	0005883a 	mov	r2,zero
    e4e4:	f800283a 	ret

0000e4e8 <_putc_r>:
    e4e8:	defffc04 	addi	sp,sp,-16
    e4ec:	dc000215 	stw	r16,8(sp)
    e4f0:	dfc00315 	stw	ra,12(sp)
    e4f4:	2021883a 	mov	r16,r4
    e4f8:	20000226 	beq	r4,zero,e504 <_putc_r+0x1c>
    e4fc:	20800e17 	ldw	r2,56(r4)
    e500:	10001b26 	beq	r2,zero,e570 <_putc_r+0x88>
    e504:	30800217 	ldw	r2,8(r6)
    e508:	10bfffc4 	addi	r2,r2,-1
    e50c:	30800215 	stw	r2,8(r6)
    e510:	10000a16 	blt	r2,zero,e53c <_putc_r+0x54>
    e514:	30800017 	ldw	r2,0(r6)
    e518:	11400005 	stb	r5,0(r2)
    e51c:	30800017 	ldw	r2,0(r6)
    e520:	10c00044 	addi	r3,r2,1
    e524:	30c00015 	stw	r3,0(r6)
    e528:	10800003 	ldbu	r2,0(r2)
    e52c:	dfc00317 	ldw	ra,12(sp)
    e530:	dc000217 	ldw	r16,8(sp)
    e534:	dec00404 	addi	sp,sp,16
    e538:	f800283a 	ret
    e53c:	30c00617 	ldw	r3,24(r6)
    e540:	10c00616 	blt	r2,r3,e55c <_putc_r+0x74>
    e544:	30800017 	ldw	r2,0(r6)
    e548:	00c00284 	movi	r3,10
    e54c:	11400005 	stb	r5,0(r2)
    e550:	30800017 	ldw	r2,0(r6)
    e554:	11400003 	ldbu	r5,0(r2)
    e558:	28fff11e 	bne	r5,r3,e520 <__alt_data_end+0xfc00e520>
    e55c:	8009883a 	mov	r4,r16
    e560:	dfc00317 	ldw	ra,12(sp)
    e564:	dc000217 	ldw	r16,8(sp)
    e568:	dec00404 	addi	sp,sp,16
    e56c:	00143d01 	jmpi	143d0 <__swbuf_r>
    e570:	d9400015 	stw	r5,0(sp)
    e574:	d9800115 	stw	r6,4(sp)
    e578:	0004e480 	call	4e48 <__sinit>
    e57c:	d9800117 	ldw	r6,4(sp)
    e580:	d9400017 	ldw	r5,0(sp)
    e584:	003fdf06 	br	e504 <__alt_data_end+0xfc00e504>

0000e588 <putc>:
    e588:	008000b4 	movhi	r2,2
    e58c:	defffc04 	addi	sp,sp,-16
    e590:	109df804 	addi	r2,r2,30688
    e594:	dc000115 	stw	r16,4(sp)
    e598:	14000017 	ldw	r16,0(r2)
    e59c:	dc400215 	stw	r17,8(sp)
    e5a0:	dfc00315 	stw	ra,12(sp)
    e5a4:	2023883a 	mov	r17,r4
    e5a8:	80000226 	beq	r16,zero,e5b4 <putc+0x2c>
    e5ac:	80800e17 	ldw	r2,56(r16)
    e5b0:	10001a26 	beq	r2,zero,e61c <putc+0x94>
    e5b4:	28800217 	ldw	r2,8(r5)
    e5b8:	10bfffc4 	addi	r2,r2,-1
    e5bc:	28800215 	stw	r2,8(r5)
    e5c0:	10000b16 	blt	r2,zero,e5f0 <putc+0x68>
    e5c4:	28800017 	ldw	r2,0(r5)
    e5c8:	14400005 	stb	r17,0(r2)
    e5cc:	28800017 	ldw	r2,0(r5)
    e5d0:	10c00044 	addi	r3,r2,1
    e5d4:	28c00015 	stw	r3,0(r5)
    e5d8:	10800003 	ldbu	r2,0(r2)
    e5dc:	dfc00317 	ldw	ra,12(sp)
    e5e0:	dc400217 	ldw	r17,8(sp)
    e5e4:	dc000117 	ldw	r16,4(sp)
    e5e8:	dec00404 	addi	sp,sp,16
    e5ec:	f800283a 	ret
    e5f0:	28c00617 	ldw	r3,24(r5)
    e5f4:	10c00e16 	blt	r2,r3,e630 <putc+0xa8>
    e5f8:	28800017 	ldw	r2,0(r5)
    e5fc:	01000284 	movi	r4,10
    e600:	14400005 	stb	r17,0(r2)
    e604:	28800017 	ldw	r2,0(r5)
    e608:	10c00003 	ldbu	r3,0(r2)
    e60c:	193ff01e 	bne	r3,r4,e5d0 <__alt_data_end+0xfc00e5d0>
    e610:	280d883a 	mov	r6,r5
    e614:	180b883a 	mov	r5,r3
    e618:	00000706 	br	e638 <putc+0xb0>
    e61c:	8009883a 	mov	r4,r16
    e620:	d9400015 	stw	r5,0(sp)
    e624:	0004e480 	call	4e48 <__sinit>
    e628:	d9400017 	ldw	r5,0(sp)
    e62c:	003fe106 	br	e5b4 <__alt_data_end+0xfc00e5b4>
    e630:	280d883a 	mov	r6,r5
    e634:	880b883a 	mov	r5,r17
    e638:	8009883a 	mov	r4,r16
    e63c:	dfc00317 	ldw	ra,12(sp)
    e640:	dc400217 	ldw	r17,8(sp)
    e644:	dc000117 	ldw	r16,4(sp)
    e648:	dec00404 	addi	sp,sp,16
    e64c:	00143d01 	jmpi	143d0 <__swbuf_r>

0000e650 <_read_r>:
    e650:	defffd04 	addi	sp,sp,-12
    e654:	2805883a 	mov	r2,r5
    e658:	dc000015 	stw	r16,0(sp)
    e65c:	040000f4 	movhi	r16,3
    e660:	dc400115 	stw	r17,4(sp)
    e664:	300b883a 	mov	r5,r6
    e668:	84250a04 	addi	r16,r16,-27608
    e66c:	2023883a 	mov	r17,r4
    e670:	380d883a 	mov	r6,r7
    e674:	1009883a 	mov	r4,r2
    e678:	dfc00215 	stw	ra,8(sp)
    e67c:	80000015 	stw	zero,0(r16)
    e680:	001a7d00 	call	1a7d0 <read>
    e684:	00ffffc4 	movi	r3,-1
    e688:	10c00526 	beq	r2,r3,e6a0 <_read_r+0x50>
    e68c:	dfc00217 	ldw	ra,8(sp)
    e690:	dc400117 	ldw	r17,4(sp)
    e694:	dc000017 	ldw	r16,0(sp)
    e698:	dec00304 	addi	sp,sp,12
    e69c:	f800283a 	ret
    e6a0:	80c00017 	ldw	r3,0(r16)
    e6a4:	183ff926 	beq	r3,zero,e68c <__alt_data_end+0xfc00e68c>
    e6a8:	88c00015 	stw	r3,0(r17)
    e6ac:	003ff706 	br	e68c <__alt_data_end+0xfc00e68c>

0000e6b0 <__fpclassifyd>:
    e6b0:	00a00034 	movhi	r2,32768
    e6b4:	10bfffc4 	addi	r2,r2,-1
    e6b8:	2884703a 	and	r2,r5,r2
    e6bc:	10000726 	beq	r2,zero,e6dc <__fpclassifyd+0x2c>
    e6c0:	00fffc34 	movhi	r3,65520
    e6c4:	019ff834 	movhi	r6,32736
    e6c8:	28c7883a 	add	r3,r5,r3
    e6cc:	31bfffc4 	addi	r6,r6,-1
    e6d0:	30c00536 	bltu	r6,r3,e6e8 <__fpclassifyd+0x38>
    e6d4:	00800104 	movi	r2,4
    e6d8:	f800283a 	ret
    e6dc:	2000021e 	bne	r4,zero,e6e8 <__fpclassifyd+0x38>
    e6e0:	00800084 	movi	r2,2
    e6e4:	f800283a 	ret
    e6e8:	00dffc34 	movhi	r3,32752
    e6ec:	019ff834 	movhi	r6,32736
    e6f0:	28cb883a 	add	r5,r5,r3
    e6f4:	31bfffc4 	addi	r6,r6,-1
    e6f8:	317ff62e 	bgeu	r6,r5,e6d4 <__alt_data_end+0xfc00e6d4>
    e6fc:	01400434 	movhi	r5,16
    e700:	297fffc4 	addi	r5,r5,-1
    e704:	28800236 	bltu	r5,r2,e710 <__fpclassifyd+0x60>
    e708:	008000c4 	movi	r2,3
    e70c:	f800283a 	ret
    e710:	10c00226 	beq	r2,r3,e71c <__fpclassifyd+0x6c>
    e714:	0005883a 	mov	r2,zero
    e718:	f800283a 	ret
    e71c:	2005003a 	cmpeq	r2,r4,zero
    e720:	f800283a 	ret

0000e724 <__sccl>:
    e724:	2a000003 	ldbu	r8,0(r5)
    e728:	00801784 	movi	r2,94
    e72c:	40802a26 	beq	r8,r2,e7d8 <__sccl+0xb4>
    e730:	29400044 	addi	r5,r5,1
    e734:	000f883a 	mov	r7,zero
    e738:	0013883a 	mov	r9,zero
    e73c:	2007883a 	mov	r3,r4
    e740:	21804004 	addi	r6,r4,256
    e744:	19c00005 	stb	r7,0(r3)
    e748:	18c00044 	addi	r3,r3,1
    e74c:	19bffd1e 	bne	r3,r6,e744 <__alt_data_end+0xfc00e744>
    e750:	40001126 	beq	r8,zero,e798 <__sccl+0x74>
    e754:	00800044 	movi	r2,1
    e758:	124fc83a 	sub	r7,r2,r9
    e75c:	02800b44 	movi	r10,45
    e760:	02c01744 	movi	r11,93
    e764:	2205883a 	add	r2,r4,r8
    e768:	11c00005 	stb	r7,0(r2)
    e76c:	28800044 	addi	r2,r5,1
    e770:	28c00003 	ldbu	r3,0(r5)
    e774:	1a800a26 	beq	r3,r10,e7a0 <__sccl+0x7c>
    e778:	1ac00426 	beq	r3,r11,e78c <__sccl+0x68>
    e77c:	18000426 	beq	r3,zero,e790 <__sccl+0x6c>
    e780:	1811883a 	mov	r8,r3
    e784:	100b883a 	mov	r5,r2
    e788:	003ff606 	br	e764 <__alt_data_end+0xfc00e764>
    e78c:	f800283a 	ret
    e790:	2805883a 	mov	r2,r5
    e794:	f800283a 	ret
    e798:	28bfffc4 	addi	r2,r5,-1
    e79c:	f800283a 	ret
    e7a0:	12400003 	ldbu	r9,0(r2)
    e7a4:	4ac01126 	beq	r9,r11,e7ec <__sccl+0xc8>
    e7a8:	4a001016 	blt	r9,r8,e7ec <__sccl+0xc8>
    e7ac:	41800044 	addi	r6,r8,1
    e7b0:	29400084 	addi	r5,r5,2
    e7b4:	2187883a 	add	r3,r4,r6
    e7b8:	00000106 	br	e7c0 <__sccl+0x9c>
    e7bc:	31800044 	addi	r6,r6,1
    e7c0:	19c00005 	stb	r7,0(r3)
    e7c4:	3011883a 	mov	r8,r6
    e7c8:	18c00044 	addi	r3,r3,1
    e7cc:	327ffb16 	blt	r6,r9,e7bc <__alt_data_end+0xfc00e7bc>
    e7d0:	10800084 	addi	r2,r2,2
    e7d4:	003fe606 	br	e770 <__alt_data_end+0xfc00e770>
    e7d8:	2a000043 	ldbu	r8,1(r5)
    e7dc:	01c00044 	movi	r7,1
    e7e0:	29400084 	addi	r5,r5,2
    e7e4:	02400044 	movi	r9,1
    e7e8:	003fd406 	br	e73c <__alt_data_end+0xfc00e73c>
    e7ec:	5011883a 	mov	r8,r10
    e7f0:	003fe406 	br	e784 <__alt_data_end+0xfc00e784>

0000e7f4 <nanf>:
    e7f4:	009ff034 	movhi	r2,32704
    e7f8:	f800283a 	ret

0000e7fc <_sprintf_r>:
    e7fc:	deffe404 	addi	sp,sp,-112
    e800:	2807883a 	mov	r3,r5
    e804:	dfc01a15 	stw	ra,104(sp)
    e808:	d9c01b15 	stw	r7,108(sp)
    e80c:	00a00034 	movhi	r2,32768
    e810:	10bfffc4 	addi	r2,r2,-1
    e814:	02008204 	movi	r8,520
    e818:	d8800215 	stw	r2,8(sp)
    e81c:	d8800515 	stw	r2,20(sp)
    e820:	d9c01b04 	addi	r7,sp,108
    e824:	d80b883a 	mov	r5,sp
    e828:	00bfffc4 	movi	r2,-1
    e82c:	d8c00015 	stw	r3,0(sp)
    e830:	d8c00415 	stw	r3,16(sp)
    e834:	da00030d 	sth	r8,12(sp)
    e838:	d880038d 	sth	r2,14(sp)
    e83c:	00109300 	call	10930 <___svfprintf_internal_r>
    e840:	d8c00017 	ldw	r3,0(sp)
    e844:	18000005 	stb	zero,0(r3)
    e848:	dfc01a17 	ldw	ra,104(sp)
    e84c:	dec01c04 	addi	sp,sp,112
    e850:	f800283a 	ret

0000e854 <sprintf>:
    e854:	deffe304 	addi	sp,sp,-116
    e858:	2007883a 	mov	r3,r4
    e85c:	dfc01a15 	stw	ra,104(sp)
    e860:	d9801b15 	stw	r6,108(sp)
    e864:	d9c01c15 	stw	r7,112(sp)
    e868:	010000b4 	movhi	r4,2
    e86c:	211df804 	addi	r4,r4,30688
    e870:	21000017 	ldw	r4,0(r4)
    e874:	00a00034 	movhi	r2,32768
    e878:	10bfffc4 	addi	r2,r2,-1
    e87c:	280d883a 	mov	r6,r5
    e880:	02008204 	movi	r8,520
    e884:	d8800215 	stw	r2,8(sp)
    e888:	d8800515 	stw	r2,20(sp)
    e88c:	d9c01b04 	addi	r7,sp,108
    e890:	d80b883a 	mov	r5,sp
    e894:	00bfffc4 	movi	r2,-1
    e898:	d8c00015 	stw	r3,0(sp)
    e89c:	d8c00415 	stw	r3,16(sp)
    e8a0:	da00030d 	sth	r8,12(sp)
    e8a4:	d880038d 	sth	r2,14(sp)
    e8a8:	00109300 	call	10930 <___svfprintf_internal_r>
    e8ac:	d8c00017 	ldw	r3,0(sp)
    e8b0:	18000005 	stb	zero,0(r3)
    e8b4:	dfc01a17 	ldw	ra,104(sp)
    e8b8:	dec01d04 	addi	sp,sp,116
    e8bc:	f800283a 	ret

0000e8c0 <strcmp>:
    e8c0:	2144b03a 	or	r2,r4,r5
    e8c4:	108000cc 	andi	r2,r2,3
    e8c8:	1000171e 	bne	r2,zero,e928 <strcmp+0x68>
    e8cc:	20800017 	ldw	r2,0(r4)
    e8d0:	28c00017 	ldw	r3,0(r5)
    e8d4:	10c0141e 	bne	r2,r3,e928 <strcmp+0x68>
    e8d8:	027fbff4 	movhi	r9,65279
    e8dc:	4a7fbfc4 	addi	r9,r9,-257
    e8e0:	0086303a 	nor	r3,zero,r2
    e8e4:	02202074 	movhi	r8,32897
    e8e8:	1245883a 	add	r2,r2,r9
    e8ec:	42202004 	addi	r8,r8,-32640
    e8f0:	10c4703a 	and	r2,r2,r3
    e8f4:	1204703a 	and	r2,r2,r8
    e8f8:	10000226 	beq	r2,zero,e904 <strcmp+0x44>
    e8fc:	00002306 	br	e98c <strcmp+0xcc>
    e900:	1000221e 	bne	r2,zero,e98c <strcmp+0xcc>
    e904:	21000104 	addi	r4,r4,4
    e908:	20c00017 	ldw	r3,0(r4)
    e90c:	29400104 	addi	r5,r5,4
    e910:	29800017 	ldw	r6,0(r5)
    e914:	1a4f883a 	add	r7,r3,r9
    e918:	00c4303a 	nor	r2,zero,r3
    e91c:	3884703a 	and	r2,r7,r2
    e920:	1204703a 	and	r2,r2,r8
    e924:	19bff626 	beq	r3,r6,e900 <__alt_data_end+0xfc00e900>
    e928:	20800003 	ldbu	r2,0(r4)
    e92c:	10c03fcc 	andi	r3,r2,255
    e930:	18c0201c 	xori	r3,r3,128
    e934:	18ffe004 	addi	r3,r3,-128
    e938:	18000c26 	beq	r3,zero,e96c <strcmp+0xac>
    e93c:	29800007 	ldb	r6,0(r5)
    e940:	19800326 	beq	r3,r6,e950 <strcmp+0x90>
    e944:	00001306 	br	e994 <strcmp+0xd4>
    e948:	29800007 	ldb	r6,0(r5)
    e94c:	11800b1e 	bne	r2,r6,e97c <strcmp+0xbc>
    e950:	21000044 	addi	r4,r4,1
    e954:	20c00003 	ldbu	r3,0(r4)
    e958:	29400044 	addi	r5,r5,1
    e95c:	18803fcc 	andi	r2,r3,255
    e960:	1080201c 	xori	r2,r2,128
    e964:	10bfe004 	addi	r2,r2,-128
    e968:	103ff71e 	bne	r2,zero,e948 <__alt_data_end+0xfc00e948>
    e96c:	0007883a 	mov	r3,zero
    e970:	28800003 	ldbu	r2,0(r5)
    e974:	1885c83a 	sub	r2,r3,r2
    e978:	f800283a 	ret
    e97c:	28800003 	ldbu	r2,0(r5)
    e980:	18c03fcc 	andi	r3,r3,255
    e984:	1885c83a 	sub	r2,r3,r2
    e988:	f800283a 	ret
    e98c:	0005883a 	mov	r2,zero
    e990:	f800283a 	ret
    e994:	10c03fcc 	andi	r3,r2,255
    e998:	003ff506 	br	e970 <__alt_data_end+0xfc00e970>

0000e99c <sulp>:
    e99c:	defffd04 	addi	sp,sp,-12
    e9a0:	dc400115 	stw	r17,4(sp)
    e9a4:	3023883a 	mov	r17,r6
    e9a8:	dc000015 	stw	r16,0(sp)
    e9ac:	dfc00215 	stw	ra,8(sp)
    e9b0:	2821883a 	mov	r16,r5
    e9b4:	000e0100 	call	e010 <__ulp>
    e9b8:	88000c26 	beq	r17,zero,e9ec <sulp+0x50>
    e9bc:	841ffc2c 	andhi	r16,r16,32752
    e9c0:	8020d53a 	srli	r16,r16,20
    e9c4:	01c01ac4 	movi	r7,107
    e9c8:	3c21c83a 	sub	r16,r7,r16
    e9cc:	0400070e 	bge	zero,r16,e9ec <sulp+0x50>
    e9d0:	8020953a 	slli	r16,r16,20
    e9d4:	01cffc34 	movhi	r7,16368
    e9d8:	000d883a 	mov	r6,zero
    e9dc:	81cf883a 	add	r7,r16,r7
    e9e0:	1009883a 	mov	r4,r2
    e9e4:	180b883a 	mov	r5,r3
    e9e8:	0018db40 	call	18db4 <__muldf3>
    e9ec:	dfc00217 	ldw	ra,8(sp)
    e9f0:	dc400117 	ldw	r17,4(sp)
    e9f4:	dc000017 	ldw	r16,0(sp)
    e9f8:	dec00304 	addi	sp,sp,12
    e9fc:	f800283a 	ret

0000ea00 <_strtod_r>:
    ea00:	deffe204 	addi	sp,sp,-120
    ea04:	ddc01b15 	stw	r23,108(sp)
    ea08:	dd001815 	stw	r20,96(sp)
    ea0c:	dc801615 	stw	r18,88(sp)
    ea10:	dc401515 	stw	r17,84(sp)
    ea14:	dc001415 	stw	r16,80(sp)
    ea18:	d9400615 	stw	r5,24(sp)
    ea1c:	dfc01d15 	stw	ra,116(sp)
    ea20:	df001c15 	stw	fp,112(sp)
    ea24:	dd801a15 	stw	r22,104(sp)
    ea28:	dd401915 	stw	r21,100(sp)
    ea2c:	dcc01715 	stw	r19,92(sp)
    ea30:	2021883a 	mov	r16,r4
    ea34:	d8000515 	stw	zero,20(sp)
    ea38:	2809883a 	mov	r4,r5
    ea3c:	20800003 	ldbu	r2,0(r4)
    ea40:	01c00074 	movhi	r7,1
    ea44:	282f883a 	mov	r23,r5
    ea48:	10c03fcc 	andi	r3,r2,255
    ea4c:	01400b44 	movi	r5,45
    ea50:	39fa9d04 	addi	r7,r7,-5516
    ea54:	3029883a 	mov	r20,r6
    ea58:	0025883a 	mov	r18,zero
    ea5c:	0023883a 	mov	r17,zero
    ea60:	28c0ba36 	bltu	r5,r3,ed4c <_strtod_r+0x34c>
    ea64:	180690ba 	slli	r3,r3,2
    ea68:	19c7883a 	add	r3,r3,r7
    ea6c:	18c00017 	ldw	r3,0(r3)
    ea70:	1800683a 	jmp	r3
    ea74:	0000eb34 	movhi	zero,940
    ea78:	0000ed4c 	andi	zero,zero,949
    ea7c:	0000ed4c 	andi	zero,zero,949
    ea80:	0000ed4c 	andi	zero,zero,949
    ea84:	0000ed4c 	andi	zero,zero,949
    ea88:	0000ed4c 	andi	zero,zero,949
    ea8c:	0000ed4c 	andi	zero,zero,949
    ea90:	0000ed4c 	andi	zero,zero,949
    ea94:	0000ed4c 	andi	zero,zero,949
    ea98:	0000ed38 	rdprs	zero,zero,948
    ea9c:	0000ed38 	rdprs	zero,zero,948
    eaa0:	0000ed38 	rdprs	zero,zero,948
    eaa4:	0000ed38 	rdprs	zero,zero,948
    eaa8:	0000ed38 	rdprs	zero,zero,948
    eaac:	0000ed4c 	andi	zero,zero,949
    eab0:	0000ed4c 	andi	zero,zero,949
    eab4:	0000ed4c 	andi	zero,zero,949
    eab8:	0000ed4c 	andi	zero,zero,949
    eabc:	0000ed4c 	andi	zero,zero,949
    eac0:	0000ed4c 	andi	zero,zero,949
    eac4:	0000ed4c 	andi	zero,zero,949
    eac8:	0000ed4c 	andi	zero,zero,949
    eacc:	0000ed4c 	andi	zero,zero,949
    ead0:	0000ed4c 	andi	zero,zero,949
    ead4:	0000ed4c 	andi	zero,zero,949
    ead8:	0000ed4c 	andi	zero,zero,949
    eadc:	0000ed4c 	andi	zero,zero,949
    eae0:	0000ed4c 	andi	zero,zero,949
    eae4:	0000ed4c 	andi	zero,zero,949
    eae8:	0000ed4c 	andi	zero,zero,949
    eaec:	0000ed4c 	andi	zero,zero,949
    eaf0:	0000ed4c 	andi	zero,zero,949
    eaf4:	0000ed38 	rdprs	zero,zero,948
    eaf8:	0000ed4c 	andi	zero,zero,949
    eafc:	0000ed4c 	andi	zero,zero,949
    eb00:	0000ed4c 	andi	zero,zero,949
    eb04:	0000ed4c 	andi	zero,zero,949
    eb08:	0000ed4c 	andi	zero,zero,949
    eb0c:	0000ed4c 	andi	zero,zero,949
    eb10:	0000ed4c 	andi	zero,zero,949
    eb14:	0000ed4c 	andi	zero,zero,949
    eb18:	0000ed4c 	andi	zero,zero,949
    eb1c:	0000ed4c 	andi	zero,zero,949
    eb20:	0000eb8c 	andi	zero,zero,942
    eb24:	0000ed4c 	andi	zero,zero,949
    eb28:	0000ed2c 	andhi	zero,zero,948
    eb2c:	00801244 	movi	r2,73
    eb30:	88843526 	beq	r17,r2,fc08 <_strtod_r+0x1208>
    eb34:	002b883a 	mov	r21,zero
    eb38:	002d883a 	mov	r22,zero
    eb3c:	a0000526 	beq	r20,zero,eb54 <_strtod_r+0x154>
    eb40:	d8000715 	stw	zero,28(sp)
    eb44:	a5c00015 	stw	r23,0(r20)
    eb48:	d9000717 	ldw	r4,28(sp)
    eb4c:	20000126 	beq	r4,zero,eb54 <_strtod_r+0x154>
    eb50:	b5a0003c 	xorhi	r22,r22,32768
    eb54:	a805883a 	mov	r2,r21
    eb58:	b007883a 	mov	r3,r22
    eb5c:	dfc01d17 	ldw	ra,116(sp)
    eb60:	df001c17 	ldw	fp,112(sp)
    eb64:	ddc01b17 	ldw	r23,108(sp)
    eb68:	dd801a17 	ldw	r22,104(sp)
    eb6c:	dd401917 	ldw	r21,100(sp)
    eb70:	dd001817 	ldw	r20,96(sp)
    eb74:	dcc01717 	ldw	r19,92(sp)
    eb78:	dc801617 	ldw	r18,88(sp)
    eb7c:	dc401517 	ldw	r17,84(sp)
    eb80:	dc001417 	ldw	r16,80(sp)
    eb84:	dec01e04 	addi	sp,sp,120
    eb88:	f800283a 	ret
    eb8c:	d8000715 	stw	zero,28(sp)
    eb90:	24c00044 	addi	r19,r4,1
    eb94:	dcc00615 	stw	r19,24(sp)
    eb98:	20800043 	ldbu	r2,1(r4)
    eb9c:	10c03fcc 	andi	r3,r2,255
    eba0:	18c0201c 	xori	r3,r3,128
    eba4:	18ffe004 	addi	r3,r3,-128
    eba8:	183fe226 	beq	r3,zero,eb34 <__alt_data_end+0xfc00eb34>
    ebac:	11403fcc 	andi	r5,r2,255
    ebb0:	2940201c 	xori	r5,r5,128
    ebb4:	297fe004 	addi	r5,r5,-128
    ebb8:	00c00c04 	movi	r3,48
    ebbc:	28c0e526 	beq	r5,r3,ef54 <_strtod_r+0x554>
    ebc0:	dcc00815 	stw	r19,32(sp)
    ebc4:	0025883a 	mov	r18,zero
    ebc8:	10fff404 	addi	r3,r2,-48
    ebcc:	18c03fcc 	andi	r3,r3,255
    ebd0:	01000244 	movi	r4,9
    ebd4:	20c37536 	bltu	r4,r3,f9ac <_strtod_r+0xfac>
    ebd8:	dd400817 	ldw	r21,32(sp)
    ebdc:	0027883a 	mov	r19,zero
    ebe0:	0039883a 	mov	fp,zero
    ebe4:	002d883a 	mov	r22,zero
    ebe8:	01400204 	movi	r5,8
    ebec:	2d805a16 	blt	r5,r22,ed58 <_strtod_r+0x358>
    ebf0:	e70002a4 	muli	fp,fp,10
    ebf4:	10c03fcc 	andi	r3,r2,255
    ebf8:	18c0201c 	xori	r3,r3,128
    ebfc:	18ffe004 	addi	r3,r3,-128
    ec00:	e0f9883a 	add	fp,fp,r3
    ec04:	e73ff404 	addi	fp,fp,-48
    ec08:	ad400044 	addi	r21,r21,1
    ec0c:	dd400615 	stw	r21,24(sp)
    ec10:	a8800003 	ldbu	r2,0(r21)
    ec14:	b5800044 	addi	r22,r22,1
    ec18:	10fff404 	addi	r3,r2,-48
    ec1c:	18c03fcc 	andi	r3,r3,255
    ec20:	20fff22e 	bgeu	r4,r3,ebec <__alt_data_end+0xfc00ebec>
    ec24:	14403fcc 	andi	r17,r2,255
    ec28:	8c40201c 	xori	r17,r17,128
    ec2c:	8c7fe004 	addi	r17,r17,-128
    ec30:	8009883a 	mov	r4,r16
    ec34:	000cf200 	call	cf20 <_localeconv_r>
    ec38:	11400017 	ldw	r5,0(r2)
    ec3c:	8009883a 	mov	r4,r16
    ec40:	d9401315 	stw	r5,76(sp)
    ec44:	000cf200 	call	cf20 <_localeconv_r>
    ec48:	11000017 	ldw	r4,0(r2)
    ec4c:	00066700 	call	6670 <strlen>
    ec50:	d9401317 	ldw	r5,76(sp)
    ec54:	100d883a 	mov	r6,r2
    ec58:	a809883a 	mov	r4,r21
    ec5c:	00154300 	call	15430 <strncmp>
    ec60:	1000ce26 	beq	r2,zero,ef9c <_strtod_r+0x59c>
    ec64:	b013883a 	mov	r9,r22
    ec68:	000b883a 	mov	r5,zero
    ec6c:	0015883a 	mov	r10,zero
    ec70:	0017883a 	mov	r11,zero
    ec74:	00801944 	movi	r2,101
    ec78:	88807826 	beq	r17,r2,ee5c <_strtod_r+0x45c>
    ec7c:	00801144 	movi	r2,69
    ec80:	88807626 	beq	r17,r2,ee5c <_strtod_r+0x45c>
    ec84:	002b883a 	mov	r21,zero
    ec88:	48003d1e 	bne	r9,zero,ed80 <_strtod_r+0x380>
    ec8c:	2800391e 	bne	r5,zero,ed74 <_strtod_r+0x374>
    ec90:	9000381e 	bne	r18,zero,ed74 <_strtod_r+0x374>
    ec94:	583fa71e 	bne	r11,zero,eb34 <__alt_data_end+0xfc00eb34>
    ec98:	00801384 	movi	r2,78
    ec9c:	88800526 	beq	r17,r2,ecb4 <_strtod_r+0x2b4>
    eca0:	147fa20e 	bge	r2,r17,eb2c <__alt_data_end+0xfc00eb2c>
    eca4:	00801a44 	movi	r2,105
    eca8:	8883d726 	beq	r17,r2,fc08 <_strtod_r+0x1208>
    ecac:	00801b84 	movi	r2,110
    ecb0:	88bfa01e 	bne	r17,r2,eb34 <__alt_data_end+0xfc00eb34>
    ecb4:	014000b4 	movhi	r5,2
    ecb8:	d9000617 	ldw	r4,24(sp)
    ecbc:	29564804 	addi	r5,r5,22816
    ecc0:	01c00644 	movi	r7,25
    ecc4:	00000b06 	br	ecf4 <_strtod_r+0x2f4>
    ecc8:	21000044 	addi	r4,r4,1
    eccc:	20800003 	ldbu	r2,0(r4)
    ecd0:	10ffefc4 	addi	r3,r2,-65
    ecd4:	10803fcc 	andi	r2,r2,255
    ecd8:	1080201c 	xori	r2,r2,128
    ecdc:	18c03fcc 	andi	r3,r3,255
    ece0:	10bfe004 	addi	r2,r2,-128
    ece4:	38c00136 	bltu	r7,r3,ecec <_strtod_r+0x2ec>
    ece8:	10800804 	addi	r2,r2,32
    ecec:	29400044 	addi	r5,r5,1
    ecf0:	11bf901e 	bne	r2,r6,eb34 <__alt_data_end+0xfc00eb34>
    ecf4:	29800007 	ldb	r6,0(r5)
    ecf8:	303ff31e 	bne	r6,zero,ecc8 <__alt_data_end+0xfc00ecc8>
    ecfc:	20800044 	addi	r2,r4,1
    ed00:	d8800615 	stw	r2,24(sp)
    ed04:	20c00047 	ldb	r3,1(r4)
    ed08:	00800a04 	movi	r2,40
    ed0c:	18849d26 	beq	r3,r2,ff84 <_strtod_r+0x1584>
    ed10:	047ffe34 	movhi	r17,65528
    ed14:	0025883a 	mov	r18,zero
    ed18:	902b883a 	mov	r21,r18
    ed1c:	882d883a 	mov	r22,r17
    ed20:	a03f8926 	beq	r20,zero,eb48 <__alt_data_end+0xfc00eb48>
    ed24:	ddc00617 	ldw	r23,24(sp)
    ed28:	003f8606 	br	eb44 <__alt_data_end+0xfc00eb44>
    ed2c:	00800044 	movi	r2,1
    ed30:	d8800715 	stw	r2,28(sp)
    ed34:	003f9606 	br	eb90 <__alt_data_end+0xfc00eb90>
    ed38:	21000044 	addi	r4,r4,1
    ed3c:	d9000615 	stw	r4,24(sp)
    ed40:	20800003 	ldbu	r2,0(r4)
    ed44:	10c03fcc 	andi	r3,r2,255
    ed48:	28ff462e 	bgeu	r5,r3,ea64 <__alt_data_end+0xfc00ea64>
    ed4c:	2027883a 	mov	r19,r4
    ed50:	d8000715 	stw	zero,28(sp)
    ed54:	003f9506 	br	ebac <__alt_data_end+0xfc00ebac>
    ed58:	9cc002a4 	muli	r19,r19,10
    ed5c:	10803fcc 	andi	r2,r2,255
    ed60:	1080201c 	xori	r2,r2,128
    ed64:	10bfe004 	addi	r2,r2,-128
    ed68:	9885883a 	add	r2,r19,r2
    ed6c:	14fff404 	addi	r19,r2,-48
    ed70:	003fa506 	br	ec08 <__alt_data_end+0xfc00ec08>
    ed74:	002b883a 	mov	r21,zero
    ed78:	002d883a 	mov	r22,zero
    ed7c:	003fe806 	br	ed20 <__alt_data_end+0xfc00ed20>
    ed80:	aaabc83a 	sub	r21,r21,r10
    ed84:	b000011e 	bne	r22,zero,ed8c <_strtod_r+0x38c>
    ed88:	482d883a 	mov	r22,r9
    ed8c:	00800404 	movi	r2,16
    ed90:	482f883a 	mov	r23,r9
    ed94:	1240010e 	bge	r2,r9,ed9c <_strtod_r+0x39c>
    ed98:	102f883a 	mov	r23,r2
    ed9c:	e009883a 	mov	r4,fp
    eda0:	da401315 	stw	r9,76(sp)
    eda4:	0019f240 	call	19f24 <__floatunsidf>
    eda8:	1025883a 	mov	r18,r2
    edac:	00800244 	movi	r2,9
    edb0:	1823883a 	mov	r17,r3
    edb4:	da401317 	ldw	r9,76(sp)
    edb8:	15c0160e 	bge	r2,r23,ee14 <_strtod_r+0x414>
    edbc:	b8bffdc4 	addi	r2,r23,-9
    edc0:	100490fa 	slli	r2,r2,3
    edc4:	180b883a 	mov	r5,r3
    edc8:	00c000b4 	movhi	r3,2
    edcc:	18d61304 	addi	r3,r3,22604
    edd0:	1885883a 	add	r2,r3,r2
    edd4:	11800017 	ldw	r6,0(r2)
    edd8:	11c00117 	ldw	r7,4(r2)
    eddc:	9009883a 	mov	r4,r18
    ede0:	0018db40 	call	18db4 <__muldf3>
    ede4:	9809883a 	mov	r4,r19
    ede8:	1025883a 	mov	r18,r2
    edec:	1823883a 	mov	r17,r3
    edf0:	0019f240 	call	19f24 <__floatunsidf>
    edf4:	9009883a 	mov	r4,r18
    edf8:	880b883a 	mov	r5,r17
    edfc:	100d883a 	mov	r6,r2
    ee00:	180f883a 	mov	r7,r3
    ee04:	00179c80 	call	179c8 <__adddf3>
    ee08:	da401317 	ldw	r9,76(sp)
    ee0c:	1025883a 	mov	r18,r2
    ee10:	1823883a 	mov	r17,r3
    ee14:	008003c4 	movi	r2,15
    ee18:	12407b16 	blt	r2,r9,f008 <_strtod_r+0x608>
    ee1c:	a83fbe26 	beq	r21,zero,ed18 <__alt_data_end+0xfc00ed18>
    ee20:	0543670e 	bge	zero,r21,fbc0 <_strtod_r+0x11c0>
    ee24:	00c00584 	movi	r3,22
    ee28:	1d42e816 	blt	r3,r21,f9cc <_strtod_r+0xfcc>
    ee2c:	a82a90fa 	slli	r21,r21,3
    ee30:	008000b4 	movhi	r2,2
    ee34:	10961304 	addi	r2,r2,22604
    ee38:	1545883a 	add	r2,r2,r21
    ee3c:	11000017 	ldw	r4,0(r2)
    ee40:	11400117 	ldw	r5,4(r2)
    ee44:	900d883a 	mov	r6,r18
    ee48:	880f883a 	mov	r7,r17
    ee4c:	0018db40 	call	18db4 <__muldf3>
    ee50:	102b883a 	mov	r21,r2
    ee54:	182d883a 	mov	r22,r3
    ee58:	003fb106 	br	ed20 <__alt_data_end+0xfc00ed20>
    ee5c:	4801b526 	beq	r9,zero,f534 <_strtod_r+0xb34>
    ee60:	ddc00617 	ldw	r23,24(sp)
    ee64:	00c00ac4 	movi	r3,43
    ee68:	b8800044 	addi	r2,r23,1
    ee6c:	d8800615 	stw	r2,24(sp)
    ee70:	b8800047 	ldb	r2,1(r23)
    ee74:	10c1e926 	beq	r2,r3,f61c <_strtod_r+0xc1c>
    ee78:	00c00b44 	movi	r3,45
    ee7c:	10c1ec26 	beq	r2,r3,f630 <_strtod_r+0xc30>
    ee80:	1023883a 	mov	r17,r2
    ee84:	0019883a 	mov	r12,zero
    ee88:	88bff404 	addi	r2,r17,-48
    ee8c:	00c00244 	movi	r3,9
    ee90:	1881b736 	bltu	r3,r2,f570 <_strtod_r+0xb70>
    ee94:	00800c04 	movi	r2,48
    ee98:	8880071e 	bne	r17,r2,eeb8 <_strtod_r+0x4b8>
    ee9c:	d8800617 	ldw	r2,24(sp)
    eea0:	8807883a 	mov	r3,r17
    eea4:	10800044 	addi	r2,r2,1
    eea8:	d8800615 	stw	r2,24(sp)
    eeac:	14400007 	ldb	r17,0(r2)
    eeb0:	10800044 	addi	r2,r2,1
    eeb4:	88fffc26 	beq	r17,r3,eea8 <__alt_data_end+0xfc00eea8>
    eeb8:	88bff3c4 	addi	r2,r17,-49
    eebc:	00c00204 	movi	r3,8
    eec0:	18bf7036 	bltu	r3,r2,ec84 <__alt_data_end+0xfc00ec84>
    eec4:	db800617 	ldw	r14,24(sp)
    eec8:	88bff404 	addi	r2,r17,-48
    eecc:	03400244 	movi	r13,9
    eed0:	71c00044 	addi	r7,r14,1
    eed4:	d9c00615 	stw	r7,24(sp)
    eed8:	74400043 	ldbu	r17,1(r14)
    eedc:	88fff404 	addi	r3,r17,-48
    eee0:	8c403fcc 	andi	r17,r17,255
    eee4:	8c40201c 	xori	r17,r17,128
    eee8:	18c03fcc 	andi	r3,r3,255
    eeec:	8c7fe004 	addi	r17,r17,-128
    eef0:	68c00e36 	bltu	r13,r3,ef2c <_strtod_r+0x52c>
    eef4:	71000084 	addi	r4,r14,2
    eef8:	d9000615 	stw	r4,24(sp)
    eefc:	108002a4 	muli	r2,r2,10
    ef00:	21800003 	ldbu	r6,0(r4)
    ef04:	200f883a 	mov	r7,r4
    ef08:	1463883a 	add	r17,r2,r17
    ef0c:	30fff404 	addi	r3,r6,-48
    ef10:	88bff404 	addi	r2,r17,-48
    ef14:	34403fcc 	andi	r17,r6,255
    ef18:	8c40201c 	xori	r17,r17,128
    ef1c:	18c03fcc 	andi	r3,r3,255
    ef20:	8c7fe004 	addi	r17,r17,-128
    ef24:	21000044 	addi	r4,r4,1
    ef28:	68fff32e 	bgeu	r13,r3,eef8 <__alt_data_end+0xfc00eef8>
    ef2c:	3b8fc83a 	sub	r7,r7,r14
    ef30:	00c00204 	movi	r3,8
    ef34:	19c29716 	blt	r3,r7,f994 <_strtod_r+0xf94>
    ef38:	102b883a 	mov	r21,r2
    ef3c:	009387c4 	movi	r2,19999
    ef40:	1540010e 	bge	r2,r21,ef48 <_strtod_r+0x548>
    ef44:	102b883a 	mov	r21,r2
    ef48:	603f4f26 	beq	r12,zero,ec88 <__alt_data_end+0xfc00ec88>
    ef4c:	056bc83a 	sub	r21,zero,r21
    ef50:	003f4d06 	br	ec88 <__alt_data_end+0xfc00ec88>
    ef54:	98800047 	ldb	r2,1(r19)
    ef58:	00c01604 	movi	r3,88
    ef5c:	10c1de26 	beq	r2,r3,f6d8 <_strtod_r+0xcd8>
    ef60:	00c01e04 	movi	r3,120
    ef64:	10c1dc26 	beq	r2,r3,f6d8 <_strtod_r+0xcd8>
    ef68:	98c00044 	addi	r3,r19,1
    ef6c:	1827883a 	mov	r19,r3
    ef70:	d8c00615 	stw	r3,24(sp)
    ef74:	18c00044 	addi	r3,r3,1
    ef78:	18bfffc3 	ldbu	r2,-1(r3)
    ef7c:	11003fcc 	andi	r4,r2,255
    ef80:	2100201c 	xori	r4,r4,128
    ef84:	213fe004 	addi	r4,r4,-128
    ef88:	217ff826 	beq	r4,r5,ef6c <__alt_data_end+0xfc00ef6c>
    ef8c:	203f7926 	beq	r4,zero,ed74 <__alt_data_end+0xfc00ed74>
    ef90:	dcc00815 	stw	r19,32(sp)
    ef94:	04800044 	movi	r18,1
    ef98:	003f0b06 	br	ebc8 <__alt_data_end+0xfc00ebc8>
    ef9c:	8009883a 	mov	r4,r16
    efa0:	000cf200 	call	cf20 <_localeconv_r>
    efa4:	11000017 	ldw	r4,0(r2)
    efa8:	00066700 	call	6670 <strlen>
    efac:	d8c00617 	ldw	r3,24(sp)
    efb0:	1885883a 	add	r2,r3,r2
    efb4:	d8800615 	stw	r2,24(sp)
    efb8:	14400007 	ldb	r17,0(r2)
    efbc:	b001881e 	bne	r22,zero,f5e0 <_strtod_r+0xbe0>
    efc0:	00c00c04 	movi	r3,48
    efc4:	88c3391e 	bne	r17,r3,fcac <_strtod_r+0x12ac>
    efc8:	10c00044 	addi	r3,r2,1
    efcc:	8809883a 	mov	r4,r17
    efd0:	d8c00615 	stw	r3,24(sp)
    efd4:	1c400007 	ldb	r17,0(r3)
    efd8:	188bc83a 	sub	r5,r3,r2
    efdc:	18c00044 	addi	r3,r3,1
    efe0:	893ffb26 	beq	r17,r4,efd0 <__alt_data_end+0xfc00efd0>
    efe4:	88bff3c4 	addi	r2,r17,-49
    efe8:	00c00204 	movi	r3,8
    efec:	1882e72e 	bgeu	r3,r2,fb8c <_strtod_r+0x118c>
    eff0:	00801944 	movi	r2,101
    eff4:	88814d26 	beq	r17,r2,f52c <_strtod_r+0xb2c>
    eff8:	0013883a 	mov	r9,zero
    effc:	0015883a 	mov	r10,zero
    f000:	02c00044 	movi	r11,1
    f004:	003f1d06 	br	ec7c <__alt_data_end+0xfc00ec7c>
    f008:	4defc83a 	sub	r23,r9,r23
    f00c:	bd6f883a 	add	r23,r23,r21
    f010:	05c21e0e 	bge	zero,r23,f88c <_strtod_r+0xe8c>
    f014:	b88003cc 	andi	r2,r23,15
    f018:	10000d26 	beq	r2,zero,f050 <_strtod_r+0x650>
    f01c:	100490fa 	slli	r2,r2,3
    f020:	00c000b4 	movhi	r3,2
    f024:	18d61304 	addi	r3,r3,22604
    f028:	1885883a 	add	r2,r3,r2
    f02c:	11000017 	ldw	r4,0(r2)
    f030:	11400117 	ldw	r5,4(r2)
    f034:	900d883a 	mov	r6,r18
    f038:	880f883a 	mov	r7,r17
    f03c:	da401315 	stw	r9,76(sp)
    f040:	0018db40 	call	18db4 <__muldf3>
    f044:	da401317 	ldw	r9,76(sp)
    f048:	1025883a 	mov	r18,r2
    f04c:	1823883a 	mov	r17,r3
    f050:	023ffc04 	movi	r8,-16
    f054:	ba10703a 	and	r8,r23,r8
    f058:	40003c26 	beq	r8,zero,f14c <_strtod_r+0x74c>
    f05c:	00804d04 	movi	r2,308
    f060:	1201cd16 	blt	r2,r8,f798 <_strtod_r+0xd98>
    f064:	4011d13a 	srai	r8,r8,4
    f068:	03000044 	movi	r12,1
    f06c:	62037c0e 	bge	r12,r8,fe60 <_strtod_r+0x1460>
    f070:	010000b4 	movhi	r4,2
    f074:	21160904 	addi	r4,r4,22564
    f078:	2015883a 	mov	r10,r4
    f07c:	0027883a 	mov	r19,zero
    f080:	d9000915 	stw	r4,36(sp)
    f084:	9005883a 	mov	r2,r18
    f088:	8807883a 	mov	r3,r17
    f08c:	dc000c15 	stw	r16,48(sp)
    f090:	dc800e15 	stw	r18,56(sp)
    f094:	9821883a 	mov	r16,r19
    f098:	0009883a 	mov	r4,zero
    f09c:	8827883a 	mov	r19,r17
    f0a0:	602f883a 	mov	r23,r12
    f0a4:	da400a15 	stw	r9,40(sp)
    f0a8:	5025883a 	mov	r18,r10
    f0ac:	4023883a 	mov	r17,r8
    f0b0:	8980004c 	andi	r6,r17,1
    f0b4:	30000626 	beq	r6,zero,f0d0 <_strtod_r+0x6d0>
    f0b8:	91800017 	ldw	r6,0(r18)
    f0bc:	91c00117 	ldw	r7,4(r18)
    f0c0:	1009883a 	mov	r4,r2
    f0c4:	180b883a 	mov	r5,r3
    f0c8:	0018db40 	call	18db4 <__muldf3>
    f0cc:	01000044 	movi	r4,1
    f0d0:	8823d07a 	srai	r17,r17,1
    f0d4:	84000044 	addi	r16,r16,1
    f0d8:	94800204 	addi	r18,r18,8
    f0dc:	8dfff41e 	bne	r17,r23,f0b0 <__alt_data_end+0xfc00f0b0>
    f0e0:	21003fcc 	andi	r4,r4,255
    f0e4:	9823883a 	mov	r17,r19
    f0e8:	da400a17 	ldw	r9,40(sp)
    f0ec:	8027883a 	mov	r19,r16
    f0f0:	dc800e17 	ldw	r18,56(sp)
    f0f4:	dc000c17 	ldw	r16,48(sp)
    f0f8:	2003b11e 	bne	r4,zero,ffc0 <_strtod_r+0x15c0>
    f0fc:	981690fa 	slli	r11,r19,3
    f100:	d8800917 	ldw	r2,36(sp)
    f104:	01ff2c34 	movhi	r7,64688
    f108:	900d883a 	mov	r6,r18
    f10c:	12ef883a 	add	r23,r2,r11
    f110:	b9000017 	ldw	r4,0(r23)
    f114:	b9400117 	ldw	r5,4(r23)
    f118:	89cf883a 	add	r7,r17,r7
    f11c:	da401315 	stw	r9,76(sp)
    f120:	0018db40 	call	18db4 <__muldf3>
    f124:	1025883a 	mov	r18,r2
    f128:	011f2834 	movhi	r4,31904
    f12c:	189ffc2c 	andhi	r2,r3,32752
    f130:	da401317 	ldw	r9,76(sp)
    f134:	20819836 	bltu	r4,r2,f798 <_strtod_r+0xd98>
    f138:	011f2434 	movhi	r4,31888
    f13c:	2083382e 	bgeu	r4,r2,fe20 <_strtod_r+0x1420>
    f140:	045ffc34 	movhi	r17,32752
    f144:	8c7fffc4 	addi	r17,r17,-1
    f148:	04bfffc4 	movi	r18,-1
    f14c:	d8000915 	stw	zero,36(sp)
    f150:	d9400817 	ldw	r5,32(sp)
    f154:	df000015 	stw	fp,0(sp)
    f158:	480f883a 	mov	r7,r9
    f15c:	b00d883a 	mov	r6,r22
    f160:	8009883a 	mov	r4,r16
    f164:	000d6dc0 	call	d6dc <__s2b>
    f168:	d8800815 	stw	r2,32(sp)
    f16c:	10018a26 	beq	r2,zero,f798 <_strtod_r+0xd98>
    f170:	a807d7fa 	srai	r3,r21,31
    f174:	0545c83a 	sub	r2,zero,r21
    f178:	dd400a15 	stw	r21,40(sp)
    f17c:	1886703a 	and	r3,r3,r2
    f180:	d8c00c15 	stw	r3,48(sp)
    f184:	a8013516 	blt	r21,zero,f65c <_strtod_r+0xc5c>
    f188:	d9400817 	ldw	r5,32(sp)
    f18c:	0011883a 	mov	r8,zero
    f190:	0027883a 	mov	r19,zero
    f194:	29400304 	addi	r5,r5,12
    f198:	d9400f15 	stw	r5,60(sp)
    f19c:	402b883a 	mov	r21,r8
    f1a0:	dd001215 	stw	r20,72(sp)
    f1a4:	d8800817 	ldw	r2,32(sp)
    f1a8:	8009883a 	mov	r4,r16
    f1ac:	11400117 	ldw	r5,4(r2)
    f1b0:	000d4ec0 	call	d4ec <_Balloc>
    f1b4:	1029883a 	mov	r20,r2
    f1b8:	10012d26 	beq	r2,zero,f670 <_strtod_r+0xc70>
    f1bc:	d8c00817 	ldw	r3,32(sp)
    f1c0:	d9400f17 	ldw	r5,60(sp)
    f1c4:	11000304 	addi	r4,r2,12
    f1c8:	19800417 	ldw	r6,16(r3)
    f1cc:	31800084 	addi	r6,r6,2
    f1d0:	318d883a 	add	r6,r6,r6
    f1d4:	318d883a 	add	r6,r6,r6
    f1d8:	00059380 	call	5938 <memcpy>
    f1dc:	d9000204 	addi	r4,sp,8
    f1e0:	d9000015 	stw	r4,0(sp)
    f1e4:	d9c00404 	addi	r7,sp,16
    f1e8:	900b883a 	mov	r5,r18
    f1ec:	880d883a 	mov	r6,r17
    f1f0:	8009883a 	mov	r4,r16
    f1f4:	000e1800 	call	e180 <__d2b>
    f1f8:	d8800515 	stw	r2,20(sp)
    f1fc:	dc801115 	stw	r18,68(sp)
    f200:	dc401015 	stw	r17,64(sp)
    f204:	10027c26 	beq	r2,zero,fbf8 <_strtod_r+0x11f8>
    f208:	01400044 	movi	r5,1
    f20c:	8009883a 	mov	r4,r16
    f210:	000d8f80 	call	d8f8 <__i2b>
    f214:	1027883a 	mov	r19,r2
    f218:	10011526 	beq	r2,zero,f670 <_strtod_r+0xc70>
    f21c:	d8800417 	ldw	r2,16(sp)
    f220:	1000c816 	blt	r2,zero,f544 <_strtod_r+0xb44>
    f224:	d9400c17 	ldw	r5,48(sp)
    f228:	d9000a17 	ldw	r4,40(sp)
    f22c:	28ad883a 	add	r22,r5,r2
    f230:	d9400917 	ldw	r5,36(sp)
    f234:	df000217 	ldw	fp,8(sp)
    f238:	05ff0084 	movi	r23,-1022
    f23c:	1147c83a 	sub	r3,r2,r5
    f240:	1f07883a 	add	r3,r3,fp
    f244:	00800d84 	movi	r2,54
    f248:	18ffffc4 	addi	r3,r3,-1
    f24c:	1739c83a 	sub	fp,r2,fp
    f250:	1dc0a50e 	bge	r3,r23,f4e8 <_strtod_r+0xae8>
    f254:	b8efc83a 	sub	r23,r23,r3
    f258:	008007c4 	movi	r2,31
    f25c:	e5f9c83a 	sub	fp,fp,r23
    f260:	15c0bc16 	blt	r2,r23,f554 <_strtod_r+0xb54>
    f264:	00800044 	movi	r2,1
    f268:	15c4983a 	sll	r2,r2,r23
    f26c:	d8000b15 	stw	zero,44(sp)
    f270:	d8800d15 	stw	r2,52(sp)
    f274:	2707883a 	add	r3,r4,fp
    f278:	d9000917 	ldw	r4,36(sp)
    f27c:	b739883a 	add	fp,r22,fp
    f280:	20ef883a 	add	r23,r4,r3
    f284:	b009883a 	mov	r4,r22
    f288:	e580010e 	bge	fp,r22,f290 <_strtod_r+0x890>
    f28c:	e009883a 	mov	r4,fp
    f290:	b805883a 	mov	r2,r23
    f294:	25c0010e 	bge	r4,r23,f29c <_strtod_r+0x89c>
    f298:	2005883a 	mov	r2,r4
    f29c:	0080030e 	bge	zero,r2,f2ac <_strtod_r+0x8ac>
    f2a0:	e0b9c83a 	sub	fp,fp,r2
    f2a4:	b8afc83a 	sub	r23,r23,r2
    f2a8:	b0adc83a 	sub	r22,r22,r2
    f2ac:	d9400c17 	ldw	r5,48(sp)
    f2b0:	28001126 	beq	r5,zero,f2f8 <_strtod_r+0x8f8>
    f2b4:	280d883a 	mov	r6,r5
    f2b8:	8009883a 	mov	r4,r16
    f2bc:	980b883a 	mov	r5,r19
    f2c0:	000db2c0 	call	db2c <__pow5mult>
    f2c4:	1027883a 	mov	r19,r2
    f2c8:	1000e926 	beq	r2,zero,f670 <_strtod_r+0xc70>
    f2cc:	d9800517 	ldw	r6,20(sp)
    f2d0:	100b883a 	mov	r5,r2
    f2d4:	8009883a 	mov	r4,r16
    f2d8:	000d9340 	call	d934 <__multiply>
    f2dc:	1000e426 	beq	r2,zero,f670 <_strtod_r+0xc70>
    f2e0:	d9400517 	ldw	r5,20(sp)
    f2e4:	8009883a 	mov	r4,r16
    f2e8:	d8801315 	stw	r2,76(sp)
    f2ec:	000d5940 	call	d594 <_Bfree>
    f2f0:	d8801317 	ldw	r2,76(sp)
    f2f4:	d8800515 	stw	r2,20(sp)
    f2f8:	0700060e 	bge	zero,fp,f314 <_strtod_r+0x914>
    f2fc:	d9400517 	ldw	r5,20(sp)
    f300:	e00d883a 	mov	r6,fp
    f304:	8009883a 	mov	r4,r16
    f308:	000dc6c0 	call	dc6c <__lshift>
    f30c:	d8800515 	stw	r2,20(sp)
    f310:	10023926 	beq	r2,zero,fbf8 <_strtod_r+0x11f8>
    f314:	d8800a17 	ldw	r2,40(sp)
    f318:	10000626 	beq	r2,zero,f334 <_strtod_r+0x934>
    f31c:	d9800a17 	ldw	r6,40(sp)
    f320:	a00b883a 	mov	r5,r20
    f324:	8009883a 	mov	r4,r16
    f328:	000db2c0 	call	db2c <__pow5mult>
    f32c:	1029883a 	mov	r20,r2
    f330:	1000cf26 	beq	r2,zero,f670 <_strtod_r+0xc70>
    f334:	05c0060e 	bge	zero,r23,f350 <_strtod_r+0x950>
    f338:	a00b883a 	mov	r5,r20
    f33c:	b80d883a 	mov	r6,r23
    f340:	8009883a 	mov	r4,r16
    f344:	000dc6c0 	call	dc6c <__lshift>
    f348:	1029883a 	mov	r20,r2
    f34c:	1000c826 	beq	r2,zero,f670 <_strtod_r+0xc70>
    f350:	0580060e 	bge	zero,r22,f36c <_strtod_r+0x96c>
    f354:	980b883a 	mov	r5,r19
    f358:	b00d883a 	mov	r6,r22
    f35c:	8009883a 	mov	r4,r16
    f360:	000dc6c0 	call	dc6c <__lshift>
    f364:	1027883a 	mov	r19,r2
    f368:	1000c126 	beq	r2,zero,f670 <_strtod_r+0xc70>
    f36c:	d9400517 	ldw	r5,20(sp)
    f370:	a00d883a 	mov	r6,r20
    f374:	8009883a 	mov	r4,r16
    f378:	000de140 	call	de14 <__mdiff>
    f37c:	102b883a 	mov	r21,r2
    f380:	1000bb26 	beq	r2,zero,f670 <_strtod_r+0xc70>
    f384:	10c00317 	ldw	r3,12(r2)
    f388:	980b883a 	mov	r5,r19
    f38c:	10000315 	stw	zero,12(r2)
    f390:	1009883a 	mov	r4,r2
    f394:	d8c00e15 	stw	r3,56(sp)
    f398:	000ddb40 	call	ddb4 <__mcmp>
    f39c:	10027616 	blt	r2,zero,fd78 <_strtod_r+0x1378>
    f3a0:	10024426 	beq	r2,zero,fcb4 <_strtod_r+0x12b4>
    f3a4:	980b883a 	mov	r5,r19
    f3a8:	a809883a 	mov	r4,r21
    f3ac:	000e2cc0 	call	e2cc <__ratio>
    f3b0:	000d883a 	mov	r6,zero
    f3b4:	01d00034 	movhi	r7,16384
    f3b8:	1009883a 	mov	r4,r2
    f3bc:	180b883a 	mov	r5,r3
    f3c0:	102f883a 	mov	r23,r2
    f3c4:	182d883a 	mov	r22,r3
    f3c8:	0018cc00 	call	18cc0 <__ledf2>
    f3cc:	00804a16 	blt	zero,r2,f4f8 <_strtod_r+0xaf8>
    f3d0:	d9400e17 	ldw	r5,56(sp)
    f3d4:	28006b26 	beq	r5,zero,f584 <_strtod_r+0xb84>
    f3d8:	058ffc34 	movhi	r22,16368
    f3dc:	d8000b15 	stw	zero,44(sp)
    f3e0:	d8000d15 	stw	zero,52(sp)
    f3e4:	b02f883a 	mov	r23,r22
    f3e8:	8f1ffc2c 	andhi	fp,r17,32752
    f3ec:	009ff834 	movhi	r2,32736
    f3f0:	e080cd26 	beq	fp,r2,f728 <_strtod_r+0xd28>
    f3f4:	d9400917 	ldw	r5,36(sp)
    f3f8:	28001a26 	beq	r5,zero,f464 <_strtod_r+0xa64>
    f3fc:	0081a834 	movhi	r2,1696
    f400:	17001836 	bltu	r2,fp,f464 <_strtod_r+0xa64>
    f404:	d9000d17 	ldw	r4,52(sp)
    f408:	01d07834 	movhi	r7,16864
    f40c:	39ffffc4 	addi	r7,r7,-1
    f410:	01bff034 	movhi	r6,65472
    f414:	b80b883a 	mov	r5,r23
    f418:	0018cc00 	call	18cc0 <__ledf2>
    f41c:	00800e16 	blt	zero,r2,f458 <_strtod_r+0xa58>
    f420:	d9000d17 	ldw	r4,52(sp)
    f424:	b80b883a 	mov	r5,r23
    f428:	0016af40 	call	16af4 <__fixunsdfsi>
    f42c:	10018126 	beq	r2,zero,fa34 <_strtod_r+0x1034>
    f430:	1009883a 	mov	r4,r2
    f434:	0019f240 	call	19f24 <__floatunsidf>
    f438:	d8800d15 	stw	r2,52(sp)
    f43c:	182f883a 	mov	r23,r3
    f440:	d8800e17 	ldw	r2,56(sp)
    f444:	1001791e 	bne	r2,zero,fa2c <_strtod_r+0x102c>
    f448:	ba20003c 	xorhi	r8,r23,32768
    f44c:	d8c00d17 	ldw	r3,52(sp)
    f450:	402d883a 	mov	r22,r8
    f454:	d8c00b15 	stw	r3,44(sp)
    f458:	0081ac34 	movhi	r2,1712
    f45c:	b091883a 	add	r8,r22,r2
    f460:	472dc83a 	sub	r22,r8,fp
    f464:	9009883a 	mov	r4,r18
    f468:	880b883a 	mov	r5,r17
    f46c:	000e0100 	call	e010 <__ulp>
    f470:	d9000b17 	ldw	r4,44(sp)
    f474:	b00b883a 	mov	r5,r22
    f478:	100d883a 	mov	r6,r2
    f47c:	180f883a 	mov	r7,r3
    f480:	0018db40 	call	18db4 <__muldf3>
    f484:	900d883a 	mov	r6,r18
    f488:	880f883a 	mov	r7,r17
    f48c:	1009883a 	mov	r4,r2
    f490:	180b883a 	mov	r5,r3
    f494:	00179c80 	call	179c8 <__adddf3>
    f498:	1025883a 	mov	r18,r2
    f49c:	1823883a 	mov	r17,r3
    f4a0:	182d883a 	mov	r22,r3
    f4a4:	d9000917 	ldw	r4,36(sp)
    f4a8:	2000021e 	bne	r4,zero,f4b4 <_strtod_r+0xab4>
    f4ac:	b09ffc2c 	andhi	r2,r22,32752
    f4b0:	e080be26 	beq	fp,r2,f7ac <_strtod_r+0xdac>
    f4b4:	d9400517 	ldw	r5,20(sp)
    f4b8:	8009883a 	mov	r4,r16
    f4bc:	000d5940 	call	d594 <_Bfree>
    f4c0:	a00b883a 	mov	r5,r20
    f4c4:	8009883a 	mov	r4,r16
    f4c8:	000d5940 	call	d594 <_Bfree>
    f4cc:	980b883a 	mov	r5,r19
    f4d0:	8009883a 	mov	r4,r16
    f4d4:	000d5940 	call	d594 <_Bfree>
    f4d8:	a80b883a 	mov	r5,r21
    f4dc:	8009883a 	mov	r4,r16
    f4e0:	000d5940 	call	d594 <_Bfree>
    f4e4:	003f2f06 	br	f1a4 <__alt_data_end+0xfc00f1a4>
    f4e8:	00c00044 	movi	r3,1
    f4ec:	d8000b15 	stw	zero,44(sp)
    f4f0:	d8c00d15 	stw	r3,52(sp)
    f4f4:	003f5f06 	br	f274 <__alt_data_end+0xfc00f274>
    f4f8:	b809883a 	mov	r4,r23
    f4fc:	000d883a 	mov	r6,zero
    f500:	01cff834 	movhi	r7,16352
    f504:	b00b883a 	mov	r5,r22
    f508:	0018db40 	call	18db4 <__muldf3>
    f50c:	d9000e17 	ldw	r4,56(sp)
    f510:	d8800d15 	stw	r2,52(sp)
    f514:	182f883a 	mov	r23,r3
    f518:	2000181e 	bne	r4,zero,f57c <_strtod_r+0xb7c>
    f51c:	1a20003c 	xorhi	r8,r3,32768
    f520:	d8800b15 	stw	r2,44(sp)
    f524:	402d883a 	mov	r22,r8
    f528:	003faf06 	br	f3e8 <__alt_data_end+0xfc00f3e8>
    f52c:	0015883a 	mov	r10,zero
    f530:	02c00044 	movi	r11,1
    f534:	2800011e 	bne	r5,zero,f53c <_strtod_r+0xb3c>
    f538:	903d7e26 	beq	r18,zero,eb34 <__alt_data_end+0xfc00eb34>
    f53c:	0013883a 	mov	r9,zero
    f540:	003e4706 	br	ee60 <__alt_data_end+0xfc00ee60>
    f544:	d8c00a17 	ldw	r3,40(sp)
    f548:	dd800c17 	ldw	r22,48(sp)
    f54c:	1889c83a 	sub	r4,r3,r2
    f550:	003f3706 	br	f230 <__alt_data_end+0xfc00f230>
    f554:	00bef884 	movi	r2,-1054
    f558:	05c00044 	movi	r23,1
    f55c:	10c5c83a 	sub	r2,r2,r3
    f560:	b884983a 	sll	r2,r23,r2
    f564:	ddc00d15 	stw	r23,52(sp)
    f568:	d8800b15 	stw	r2,44(sp)
    f56c:	003f4106 	br	f274 <__alt_data_end+0xfc00f274>
    f570:	ddc00615 	stw	r23,24(sp)
    f574:	002b883a 	mov	r21,zero
    f578:	003dc306 	br	ec88 <__alt_data_end+0xfc00ec88>
    f57c:	1811883a 	mov	r8,r3
    f580:	003fe706 	br	f520 <__alt_data_end+0xfc00f520>
    f584:	90002e1e 	bne	r18,zero,f640 <_strtod_r+0xc40>
    f588:	00c00434 	movhi	r3,16
    f58c:	18ffffc4 	addi	r3,r3,-1
    f590:	88c4703a 	and	r2,r17,r3
    f594:	10002c1e 	bne	r2,zero,f648 <_strtod_r+0xc48>
    f598:	000d883a 	mov	r6,zero
    f59c:	01cffc34 	movhi	r7,16368
    f5a0:	b809883a 	mov	r4,r23
    f5a4:	b00b883a 	mov	r5,r22
    f5a8:	0018cc00 	call	18cc0 <__ledf2>
    f5ac:	10021716 	blt	r2,zero,fe0c <_strtod_r+0x140c>
    f5b0:	b809883a 	mov	r4,r23
    f5b4:	b00b883a 	mov	r5,r22
    f5b8:	000d883a 	mov	r6,zero
    f5bc:	01cff834 	movhi	r7,16352
    f5c0:	0018db40 	call	18db4 <__muldf3>
    f5c4:	d8800d15 	stw	r2,52(sp)
    f5c8:	182f883a 	mov	r23,r3
    f5cc:	102d883a 	mov	r22,r2
    f5d0:	1a20003c 	xorhi	r8,r3,32768
    f5d4:	dd800b15 	stw	r22,44(sp)
    f5d8:	402d883a 	mov	r22,r8
    f5dc:	003f8206 	br	f3e8 <__alt_data_end+0xfc00f3e8>
    f5e0:	b013883a 	mov	r9,r22
    f5e4:	000b883a 	mov	r5,zero
    f5e8:	0015883a 	mov	r10,zero
    f5ec:	893ff404 	addi	r4,r17,-48
    f5f0:	00800244 	movi	r2,9
    f5f4:	11001036 	bltu	r2,r4,f638 <_strtod_r+0xc38>
    f5f8:	28c00044 	addi	r3,r5,1
    f5fc:	2023883a 	mov	r17,r4
    f600:	20014d1e 	bne	r4,zero,fb38 <_strtod_r+0x1138>
    f604:	d9800617 	ldw	r6,24(sp)
    f608:	180b883a 	mov	r5,r3
    f60c:	30800044 	addi	r2,r6,1
    f610:	d8800615 	stw	r2,24(sp)
    f614:	34400047 	ldb	r17,1(r6)
    f618:	003ff406 	br	f5ec <__alt_data_end+0xfc00f5ec>
    f61c:	0019883a 	mov	r12,zero
    f620:	b8800084 	addi	r2,r23,2
    f624:	d8800615 	stw	r2,24(sp)
    f628:	bc400087 	ldb	r17,2(r23)
    f62c:	003e1606 	br	ee88 <__alt_data_end+0xfc00ee88>
    f630:	03000044 	movi	r12,1
    f634:	003ffa06 	br	f620 <__alt_data_end+0xfc00f620>
    f638:	02c00044 	movi	r11,1
    f63c:	003d8d06 	br	ec74 <__alt_data_end+0xfc00ec74>
    f640:	00800044 	movi	r2,1
    f644:	9080fe26 	beq	r18,r2,fa40 <_strtod_r+0x1040>
    f648:	d8000b15 	stw	zero,44(sp)
    f64c:	05affc34 	movhi	r22,49136
    f650:	d8000d15 	stw	zero,52(sp)
    f654:	05cffc34 	movhi	r23,16368
    f658:	003f6306 	br	f3e8 <__alt_data_end+0xfc00f3e8>
    f65c:	d8000a15 	stw	zero,40(sp)
    f660:	003ec906 	br	f188 <__alt_data_end+0xfc00f188>
    f664:	d9001117 	ldw	r4,68(sp)
    f668:	00bfffc4 	movi	r2,-1
    f66c:	2080461e 	bne	r4,r2,f788 <_strtod_r+0xd88>
    f670:	dd000a15 	stw	r20,40(sp)
    f674:	dd001217 	ldw	r20,72(sp)
    f678:	a811883a 	mov	r8,r21
    f67c:	d8800517 	ldw	r2,20(sp)
    f680:	00c00884 	movi	r3,34
    f684:	80c00015 	stw	r3,0(r16)
    f688:	002b883a 	mov	r21,zero
    f68c:	059ffc34 	movhi	r22,32752
    f690:	100b883a 	mov	r5,r2
    f694:	8009883a 	mov	r4,r16
    f698:	da001315 	stw	r8,76(sp)
    f69c:	000d5940 	call	d594 <_Bfree>
    f6a0:	d9400a17 	ldw	r5,40(sp)
    f6a4:	8009883a 	mov	r4,r16
    f6a8:	000d5940 	call	d594 <_Bfree>
    f6ac:	980b883a 	mov	r5,r19
    f6b0:	8009883a 	mov	r4,r16
    f6b4:	000d5940 	call	d594 <_Bfree>
    f6b8:	d9400817 	ldw	r5,32(sp)
    f6bc:	8009883a 	mov	r4,r16
    f6c0:	000d5940 	call	d594 <_Bfree>
    f6c4:	da001317 	ldw	r8,76(sp)
    f6c8:	8009883a 	mov	r4,r16
    f6cc:	400b883a 	mov	r5,r8
    f6d0:	000d5940 	call	d594 <_Bfree>
    f6d4:	003d9206 	br	ed20 <__alt_data_end+0xfc00ed20>
    f6d8:	d8c00717 	ldw	r3,28(sp)
    f6dc:	d8800504 	addi	r2,sp,20
    f6e0:	018000b4 	movhi	r6,2
    f6e4:	31964e04 	addi	r6,r6,22840
    f6e8:	d8c00115 	stw	r3,4(sp)
    f6ec:	d8800015 	stw	r2,0(sp)
    f6f0:	d9c00404 	addi	r7,sp,16
    f6f4:	d9400604 	addi	r5,sp,24
    f6f8:	8009883a 	mov	r4,r16
    f6fc:	00149500 	call	14950 <__gethex>
    f700:	154001cc 	andi	r21,r2,7
    f704:	a83d9b26 	beq	r21,zero,ed74 <__alt_data_end+0xfc00ed74>
    f708:	00c00184 	movi	r3,6
    f70c:	a8c0d61e 	bne	r21,r3,fa68 <_strtod_r+0x1068>
    f710:	9cc00044 	addi	r19,r19,1
    f714:	dcc00615 	stw	r19,24(sp)
    f718:	002b883a 	mov	r21,zero
    f71c:	002d883a 	mov	r22,zero
    f720:	d8000715 	stw	zero,28(sp)
    f724:	003d7e06 	br	ed20 <__alt_data_end+0xfc00ed20>
    f728:	00bf2c34 	movhi	r2,64688
    f72c:	88a3883a 	add	r17,r17,r2
    f730:	9009883a 	mov	r4,r18
    f734:	880b883a 	mov	r5,r17
    f738:	000e0100 	call	e010 <__ulp>
    f73c:	d9000b17 	ldw	r4,44(sp)
    f740:	100d883a 	mov	r6,r2
    f744:	180f883a 	mov	r7,r3
    f748:	b00b883a 	mov	r5,r22
    f74c:	0018db40 	call	18db4 <__muldf3>
    f750:	900d883a 	mov	r6,r18
    f754:	180b883a 	mov	r5,r3
    f758:	880f883a 	mov	r7,r17
    f75c:	1009883a 	mov	r4,r2
    f760:	00179c80 	call	179c8 <__adddf3>
    f764:	015f2834 	movhi	r5,31904
    f768:	1025883a 	mov	r18,r2
    f76c:	297fffc4 	addi	r5,r5,-1
    f770:	189ffc2c 	andhi	r2,r3,32752
    f774:	2880892e 	bgeu	r5,r2,f99c <_strtod_r+0xf9c>
    f778:	d8801017 	ldw	r2,64(sp)
    f77c:	00dffc34 	movhi	r3,32752
    f780:	18ffffc4 	addi	r3,r3,-1
    f784:	10ffb726 	beq	r2,r3,f664 <__alt_data_end+0xfc00f664>
    f788:	045ffc34 	movhi	r17,32752
    f78c:	8c7fffc4 	addi	r17,r17,-1
    f790:	04bfffc4 	movi	r18,-1
    f794:	003f4706 	br	f4b4 <__alt_data_end+0xfc00f4b4>
    f798:	00800884 	movi	r2,34
    f79c:	80800015 	stw	r2,0(r16)
    f7a0:	002b883a 	mov	r21,zero
    f7a4:	059ffc34 	movhi	r22,32752
    f7a8:	003d5d06 	br	ed20 <__alt_data_end+0xfc00ed20>
    f7ac:	d9000d17 	ldw	r4,52(sp)
    f7b0:	b80b883a 	mov	r5,r23
    f7b4:	0019dc80 	call	19dc8 <__fixdfsi>
    f7b8:	1009883a 	mov	r4,r2
    f7bc:	0019e480 	call	19e48 <__floatsidf>
    f7c0:	d9000d17 	ldw	r4,52(sp)
    f7c4:	b80b883a 	mov	r5,r23
    f7c8:	100d883a 	mov	r6,r2
    f7cc:	180f883a 	mov	r7,r3
    f7d0:	00194cc0 	call	194cc <__subdf3>
    f7d4:	d9400e17 	ldw	r5,56(sp)
    f7d8:	1039883a 	mov	fp,r2
    f7dc:	182f883a 	mov	r23,r3
    f7e0:	2800141e 	bne	r5,zero,f834 <_strtod_r+0xe34>
    f7e4:	9000131e 	bne	r18,zero,f834 <_strtod_r+0xe34>
    f7e8:	00800434 	movhi	r2,16
    f7ec:	10bfffc4 	addi	r2,r2,-1
    f7f0:	b0ac703a 	and	r22,r22,r2
    f7f4:	b0000f1e 	bne	r22,zero,f834 <_strtod_r+0xe34>
    f7f8:	01a52834 	movhi	r6,38048
    f7fc:	01cff434 	movhi	r7,16336
    f800:	318d6544 	addi	r6,r6,13717
    f804:	39ffffc4 	addi	r7,r7,-1
    f808:	e009883a 	mov	r4,fp
    f80c:	180b883a 	mov	r5,r3
    f810:	0018cc00 	call	18cc0 <__ledf2>
    f814:	103f270e 	bge	r2,zero,f4b4 <__alt_data_end+0xfc00f4b4>
    f818:	dd000a15 	stw	r20,40(sp)
    f81c:	a811883a 	mov	r8,r21
    f820:	dd001217 	ldw	r20,72(sp)
    f824:	d8800517 	ldw	r2,20(sp)
    f828:	002b883a 	mov	r21,zero
    f82c:	882d883a 	mov	r22,r17
    f830:	003f9706 	br	f690 <__alt_data_end+0xfc00f690>
    f834:	01a52834 	movhi	r6,38048
    f838:	01cff834 	movhi	r7,16352
    f83c:	318d6544 	addi	r6,r6,13717
    f840:	39ffffc4 	addi	r7,r7,-1
    f844:	e009883a 	mov	r4,fp
    f848:	b80b883a 	mov	r5,r23
    f84c:	0018cc00 	call	18cc0 <__ledf2>
    f850:	10000716 	blt	r2,zero,f870 <_strtod_r+0xe70>
    f854:	018d6c34 	movhi	r6,13744
    f858:	31b94d44 	addi	r6,r6,-6859
    f85c:	01cff834 	movhi	r7,16352
    f860:	e009883a 	mov	r4,fp
    f864:	b80b883a 	mov	r5,r23
    f868:	0018be40 	call	18be4 <__gedf2>
    f86c:	00bf110e 	bge	zero,r2,f4b4 <__alt_data_end+0xfc00f4b4>
    f870:	dd000a15 	stw	r20,40(sp)
    f874:	a811883a 	mov	r8,r21
    f878:	dd001217 	ldw	r20,72(sp)
    f87c:	d8800517 	ldw	r2,20(sp)
    f880:	902b883a 	mov	r21,r18
    f884:	882d883a 	mov	r22,r17
    f888:	003f8106 	br	f690 <__alt_data_end+0xfc00f690>
    f88c:	b83e2f26 	beq	r23,zero,f14c <__alt_data_end+0xfc00f14c>
    f890:	05efc83a 	sub	r23,zero,r23
    f894:	b88003cc 	andi	r2,r23,15
    f898:	10000d26 	beq	r2,zero,f8d0 <_strtod_r+0xed0>
    f89c:	100490fa 	slli	r2,r2,3
    f8a0:	00c000b4 	movhi	r3,2
    f8a4:	18d61304 	addi	r3,r3,22604
    f8a8:	1885883a 	add	r2,r3,r2
    f8ac:	11800017 	ldw	r6,0(r2)
    f8b0:	11c00117 	ldw	r7,4(r2)
    f8b4:	9009883a 	mov	r4,r18
    f8b8:	880b883a 	mov	r5,r17
    f8bc:	da401315 	stw	r9,76(sp)
    f8c0:	00182740 	call	18274 <__divdf3>
    f8c4:	da401317 	ldw	r9,76(sp)
    f8c8:	1025883a 	mov	r18,r2
    f8cc:	1823883a 	mov	r17,r3
    f8d0:	b82fd13a 	srai	r23,r23,4
    f8d4:	b83e1d26 	beq	r23,zero,f14c <__alt_data_end+0xfc00f14c>
    f8d8:	008007c4 	movi	r2,31
    f8dc:	15c02816 	blt	r2,r23,f980 <_strtod_r+0xf80>
    f8e0:	b880040c 	andi	r2,r23,16
    f8e4:	10019726 	beq	r2,zero,ff44 <_strtod_r+0x1544>
    f8e8:	05c1880e 	bge	zero,r23,ff0c <_strtod_r+0x150c>
    f8ec:	00c01a84 	movi	r3,106
    f8f0:	d8c00915 	stw	r3,36(sp)
    f8f4:	04c000b4 	movhi	r19,2
    f8f8:	9cd65304 	addi	r19,r19,22860
    f8fc:	8807883a 	mov	r3,r17
    f900:	9005883a 	mov	r2,r18
    f904:	8023883a 	mov	r17,r16
    f908:	0009883a 	mov	r4,zero
    f90c:	9821883a 	mov	r16,r19
    f910:	da400a15 	stw	r9,40(sp)
    f914:	1827883a 	mov	r19,r3
    f918:	b980004c 	andi	r6,r23,1
    f91c:	30000626 	beq	r6,zero,f938 <_strtod_r+0xf38>
    f920:	81800017 	ldw	r6,0(r16)
    f924:	81c00117 	ldw	r7,4(r16)
    f928:	1009883a 	mov	r4,r2
    f92c:	180b883a 	mov	r5,r3
    f930:	0018db40 	call	18db4 <__muldf3>
    f934:	01000044 	movi	r4,1
    f938:	b82fd07a 	srai	r23,r23,1
    f93c:	84000204 	addi	r16,r16,8
    f940:	b83ff51e 	bne	r23,zero,f918 <__alt_data_end+0xfc00f918>
    f944:	21003fcc 	andi	r4,r4,255
    f948:	8821883a 	mov	r16,r17
    f94c:	da400a17 	ldw	r9,40(sp)
    f950:	9823883a 	mov	r17,r19
    f954:	2001a51e 	bne	r4,zero,ffec <_strtod_r+0x15ec>
    f958:	d9000917 	ldw	r4,36(sp)
    f95c:	20016d1e 	bne	r4,zero,ff14 <_strtod_r+0x1514>
    f960:	000d883a 	mov	r6,zero
    f964:	000f883a 	mov	r7,zero
    f968:	9009883a 	mov	r4,r18
    f96c:	880b883a 	mov	r5,r17
    f970:	da401315 	stw	r9,76(sp)
    f974:	0018b5c0 	call	18b5c <__eqdf2>
    f978:	da401317 	ldw	r9,76(sp)
    f97c:	103df41e 	bne	r2,zero,f150 <__alt_data_end+0xfc00f150>
    f980:	00800884 	movi	r2,34
    f984:	80800015 	stw	r2,0(r16)
    f988:	002b883a 	mov	r21,zero
    f98c:	002d883a 	mov	r22,zero
    f990:	003ce306 	br	ed20 <__alt_data_end+0xfc00ed20>
    f994:	055387c4 	movi	r21,19999
    f998:	003d6b06 	br	ef48 <__alt_data_end+0xfc00ef48>
    f99c:	0440d434 	movhi	r17,848
    f9a0:	1c63883a 	add	r17,r3,r17
    f9a4:	882d883a 	mov	r22,r17
    f9a8:	003ebe06 	br	f4a4 <__alt_data_end+0xfc00f4a4>
    f9ac:	14403fcc 	andi	r17,r2,255
    f9b0:	8c40201c 	xori	r17,r17,128
    f9b4:	8c7fe004 	addi	r17,r17,-128
    f9b8:	dd400817 	ldw	r21,32(sp)
    f9bc:	0027883a 	mov	r19,zero
    f9c0:	0039883a 	mov	fp,zero
    f9c4:	002d883a 	mov	r22,zero
    f9c8:	003c9906 	br	ec30 <__alt_data_end+0xfc00ec30>
    f9cc:	00c00944 	movi	r3,37
    f9d0:	1a47c83a 	sub	r3,r3,r9
    f9d4:	1d7d8c16 	blt	r3,r21,f008 <__alt_data_end+0xfc00f008>
    f9d8:	1261c83a 	sub	r16,r2,r9
    f9dc:	800490fa 	slli	r2,r16,3
    f9e0:	04c000b4 	movhi	r19,2
    f9e4:	9cd61304 	addi	r19,r19,22604
    f9e8:	9885883a 	add	r2,r19,r2
    f9ec:	11000017 	ldw	r4,0(r2)
    f9f0:	11400117 	ldw	r5,4(r2)
    f9f4:	900d883a 	mov	r6,r18
    f9f8:	880f883a 	mov	r7,r17
    f9fc:	0018db40 	call	18db4 <__muldf3>
    fa00:	ac0dc83a 	sub	r6,r21,r16
    fa04:	300c90fa 	slli	r6,r6,3
    fa08:	1009883a 	mov	r4,r2
    fa0c:	180b883a 	mov	r5,r3
    fa10:	9985883a 	add	r2,r19,r6
    fa14:	11800017 	ldw	r6,0(r2)
    fa18:	11c00117 	ldw	r7,4(r2)
    fa1c:	0018db40 	call	18db4 <__muldf3>
    fa20:	102b883a 	mov	r21,r2
    fa24:	182d883a 	mov	r22,r3
    fa28:	003cbd06 	br	ed20 <__alt_data_end+0xfc00ed20>
    fa2c:	b811883a 	mov	r8,r23
    fa30:	003e8606 	br	f44c <__alt_data_end+0xfc00f44c>
    fa34:	d8000d15 	stw	zero,52(sp)
    fa38:	05cffc34 	movhi	r23,16368
    fa3c:	003e8006 	br	f440 <__alt_data_end+0xfc00f440>
    fa40:	883f011e 	bne	r17,zero,f648 <__alt_data_end+0xfc00f648>
    fa44:	dd000a15 	stw	r20,40(sp)
    fa48:	dd001217 	ldw	r20,72(sp)
    fa4c:	a811883a 	mov	r8,r21
    fa50:	00800884 	movi	r2,34
    fa54:	80800015 	stw	r2,0(r16)
    fa58:	002b883a 	mov	r21,zero
    fa5c:	d8800517 	ldw	r2,20(sp)
    fa60:	002d883a 	mov	r22,zero
    fa64:	003f0a06 	br	f690 <__alt_data_end+0xfc00f690>
    fa68:	d9800517 	ldw	r6,20(sp)
    fa6c:	30000826 	beq	r6,zero,fa90 <_strtod_r+0x1090>
    fa70:	01400d44 	movi	r5,53
    fa74:	d9000204 	addi	r4,sp,8
    fa78:	d8801315 	stw	r2,76(sp)
    fa7c:	000e3e40 	call	e3e4 <__copybits>
    fa80:	d9400517 	ldw	r5,20(sp)
    fa84:	8009883a 	mov	r4,r16
    fa88:	000d5940 	call	d594 <_Bfree>
    fa8c:	d8801317 	ldw	r2,76(sp)
    fa90:	00c00184 	movi	r3,6
    fa94:	1d400f36 	bltu	r3,r21,fad4 <_strtod_r+0x10d4>
    fa98:	a82a90ba 	slli	r21,r21,2
    fa9c:	00c00074 	movhi	r3,1
    faa0:	18feac04 	addi	r3,r3,-1360
    faa4:	a8eb883a 	add	r21,r21,r3
    faa8:	a8c00017 	ldw	r3,0(r21)
    faac:	1800683a 	jmp	r3
    fab0:	0000fb2c 	andhi	zero,zero,1004
    fab4:	0000fb04 	movi	zero,1004
    fab8:	0000fae8 	cmpgeui	zero,zero,1003
    fabc:	0000facc 	andi	zero,zero,1003
    fac0:	0000faf4 	movhi	zero,1003
    fac4:	0000fb04 	movi	zero,1004
    fac8:	0000fb2c 	andhi	zero,zero,1004
    facc:	045ffc34 	movhi	r17,32752
    fad0:	0025883a 	mov	r18,zero
    fad4:	1080020c 	andi	r2,r2,8
    fad8:	902b883a 	mov	r21,r18
    fadc:	103c8f26 	beq	r2,zero,ed1c <__alt_data_end+0xfc00ed1c>
    fae0:	8da00034 	orhi	r22,r17,32768
    fae4:	003c8e06 	br	ed20 <__alt_data_end+0xfc00ed20>
    fae8:	dc800217 	ldw	r18,8(sp)
    faec:	dc400317 	ldw	r17,12(sp)
    faf0:	003ff806 	br	fad4 <__alt_data_end+0xfc00fad4>
    faf4:	04600034 	movhi	r17,32768
    faf8:	8c7fffc4 	addi	r17,r17,-1
    fafc:	04bfffc4 	movi	r18,-1
    fb00:	003ff406 	br	fad4 <__alt_data_end+0xfc00fad4>
    fb04:	d8c00417 	ldw	r3,16(sp)
    fb08:	dc400317 	ldw	r17,12(sp)
    fb0c:	013ffc34 	movhi	r4,65520
    fb10:	18c10cc4 	addi	r3,r3,1075
    fb14:	1806953a 	slli	r3,r3,20
    fb18:	213fffc4 	addi	r4,r4,-1
    fb1c:	8922703a 	and	r17,r17,r4
    fb20:	dc800217 	ldw	r18,8(sp)
    fb24:	88e2b03a 	or	r17,r17,r3
    fb28:	003fea06 	br	fad4 <__alt_data_end+0xfc00fad4>
    fb2c:	0023883a 	mov	r17,zero
    fb30:	0025883a 	mov	r18,zero
    fb34:	003fe706 	br	fad4 <__alt_data_end+0xfc00fad4>
    fb38:	01800044 	movi	r6,1
    fb3c:	50d5883a 	add	r10,r10,r3
    fb40:	2a4b883a 	add	r5,r5,r9
    fb44:	19811a26 	beq	r3,r6,ffb0 <_strtod_r+0x15b0>
    fb48:	01800204 	movi	r6,8
    fb4c:	01c00404 	movi	r7,16
    fb50:	4a400044 	addi	r9,r9,1
    fb54:	48bfffc4 	addi	r2,r9,-1
    fb58:	30801616 	blt	r6,r2,fbb4 <_strtod_r+0x11b4>
    fb5c:	e70002a4 	muli	fp,fp,10
    fb60:	497ffb1e 	bne	r9,r5,fb50 <__alt_data_end+0xfc00fb50>
    fb64:	d9800617 	ldw	r6,24(sp)
    fb68:	4a400044 	addi	r9,r9,1
    fb6c:	00c00204 	movi	r3,8
    fb70:	19400c0e 	bge	r3,r5,fba4 <_strtod_r+0x11a4>
    fb74:	00800404 	movi	r2,16
    fb78:	000b883a 	mov	r5,zero
    fb7c:	127ea316 	blt	r2,r9,f60c <__alt_data_end+0xfc00f60c>
    fb80:	988002a4 	muli	r2,r19,10
    fb84:	20a7883a 	add	r19,r4,r2
    fb88:	003ea006 	br	f60c <__alt_data_end+0xfc00f60c>
    fb8c:	d8800617 	ldw	r2,24(sp)
    fb90:	8c7ff404 	addi	r17,r17,-48
    fb94:	2a800044 	addi	r10,r5,1
    fb98:	d8800815 	stw	r2,32(sp)
    fb9c:	100d883a 	mov	r6,r2
    fba0:	02400044 	movi	r9,1
    fba4:	e08002a4 	muli	r2,fp,10
    fba8:	000b883a 	mov	r5,zero
    fbac:	88b9883a 	add	fp,r17,r2
    fbb0:	003e9606 	br	f60c <__alt_data_end+0xfc00f60c>
    fbb4:	3a7fea16 	blt	r7,r9,fb60 <__alt_data_end+0xfc00fb60>
    fbb8:	9cc002a4 	muli	r19,r19,10
    fbbc:	003fe806 	br	fb60 <__alt_data_end+0xfc00fb60>
    fbc0:	00bffa84 	movi	r2,-22
    fbc4:	a8bd1016 	blt	r21,r2,f008 <__alt_data_end+0xfc00f008>
    fbc8:	a82a90fa 	slli	r21,r21,3
    fbcc:	008000b4 	movhi	r2,2
    fbd0:	10961304 	addi	r2,r2,22604
    fbd4:	1545c83a 	sub	r2,r2,r21
    fbd8:	11800017 	ldw	r6,0(r2)
    fbdc:	11c00117 	ldw	r7,4(r2)
    fbe0:	9009883a 	mov	r4,r18
    fbe4:	880b883a 	mov	r5,r17
    fbe8:	00182740 	call	18274 <__divdf3>
    fbec:	102b883a 	mov	r21,r2
    fbf0:	182d883a 	mov	r22,r3
    fbf4:	003c4a06 	br	ed20 <__alt_data_end+0xfc00ed20>
    fbf8:	dd000a15 	stw	r20,40(sp)
    fbfc:	a811883a 	mov	r8,r21
    fc00:	dd001217 	ldw	r20,72(sp)
    fc04:	003e9e06 	br	f680 <__alt_data_end+0xfc00f680>
    fc08:	014000b4 	movhi	r5,2
    fc0c:	d9000617 	ldw	r4,24(sp)
    fc10:	29564504 	addi	r5,r5,22804
    fc14:	01c00644 	movi	r7,25
    fc18:	00000b06 	br	fc48 <_strtod_r+0x1248>
    fc1c:	21000044 	addi	r4,r4,1
    fc20:	20800003 	ldbu	r2,0(r4)
    fc24:	10ffefc4 	addi	r3,r2,-65
    fc28:	10803fcc 	andi	r2,r2,255
    fc2c:	1080201c 	xori	r2,r2,128
    fc30:	18c03fcc 	andi	r3,r3,255
    fc34:	10bfe004 	addi	r2,r2,-128
    fc38:	38c00136 	bltu	r7,r3,fc40 <_strtod_r+0x1240>
    fc3c:	10800804 	addi	r2,r2,32
    fc40:	29400044 	addi	r5,r5,1
    fc44:	11bbbb1e 	bne	r2,r6,eb34 <__alt_data_end+0xfc00eb34>
    fc48:	29800007 	ldb	r6,0(r5)
    fc4c:	303ff31e 	bne	r6,zero,fc1c <__alt_data_end+0xfc00fc1c>
    fc50:	018000b4 	movhi	r6,2
    fc54:	d9000615 	stw	r4,24(sp)
    fc58:	31964604 	addi	r6,r6,22808
    fc5c:	200b883a 	mov	r5,r4
    fc60:	02000644 	movi	r8,25
    fc64:	00000a06 	br	fc90 <_strtod_r+0x1290>
    fc68:	28800003 	ldbu	r2,0(r5)
    fc6c:	10ffefc4 	addi	r3,r2,-65
    fc70:	10803fcc 	andi	r2,r2,255
    fc74:	1080201c 	xori	r2,r2,128
    fc78:	18c03fcc 	andi	r3,r3,255
    fc7c:	10bfe004 	addi	r2,r2,-128
    fc80:	40c00136 	bltu	r8,r3,fc88 <_strtod_r+0x1288>
    fc84:	10800804 	addi	r2,r2,32
    fc88:	31800044 	addi	r6,r6,1
    fc8c:	11c0711e 	bne	r2,r7,fe54 <_strtod_r+0x1454>
    fc90:	31c00007 	ldb	r7,0(r6)
    fc94:	29400044 	addi	r5,r5,1
    fc98:	383ff31e 	bne	r7,zero,fc68 <__alt_data_end+0xfc00fc68>
    fc9c:	d9400615 	stw	r5,24(sp)
    fca0:	045ffc34 	movhi	r17,32752
    fca4:	0025883a 	mov	r18,zero
    fca8:	003c1b06 	br	ed18 <__alt_data_end+0xfc00ed18>
    fcac:	000b883a 	mov	r5,zero
    fcb0:	003ccc06 	br	efe4 <__alt_data_end+0xfc00efe4>
    fcb4:	d9400e17 	ldw	r5,56(sp)
    fcb8:	dd000a15 	stw	r20,40(sp)
    fcbc:	00800434 	movhi	r2,16
    fcc0:	a811883a 	mov	r8,r21
    fcc4:	dd001217 	ldw	r20,72(sp)
    fcc8:	dd401117 	ldw	r21,68(sp)
    fccc:	dd801017 	ldw	r22,64(sp)
    fcd0:	10bfffc4 	addi	r2,r2,-1
    fcd4:	28005626 	beq	r5,zero,fe30 <_strtod_r+0x1430>
    fcd8:	8886703a 	and	r3,r17,r2
    fcdc:	18807826 	beq	r3,r2,fec0 <_strtod_r+0x14c0>
    fce0:	d8c00b17 	ldw	r3,44(sp)
    fce4:	18005726 	beq	r3,zero,fe44 <_strtod_r+0x1444>
    fce8:	1c44703a 	and	r2,r3,r17
    fcec:	10000f26 	beq	r2,zero,fd2c <_strtod_r+0x132c>
    fcf0:	d9000e17 	ldw	r4,56(sp)
    fcf4:	d9800917 	ldw	r6,36(sp)
    fcf8:	20005e26 	beq	r4,zero,fe74 <_strtod_r+0x1474>
    fcfc:	9009883a 	mov	r4,r18
    fd00:	880b883a 	mov	r5,r17
    fd04:	da001315 	stw	r8,76(sp)
    fd08:	000e99c0 	call	e99c <sulp>
    fd0c:	100d883a 	mov	r6,r2
    fd10:	180f883a 	mov	r7,r3
    fd14:	9009883a 	mov	r4,r18
    fd18:	880b883a 	mov	r5,r17
    fd1c:	00179c80 	call	179c8 <__adddf3>
    fd20:	da001317 	ldw	r8,76(sp)
    fd24:	102b883a 	mov	r21,r2
    fd28:	182d883a 	mov	r22,r3
    fd2c:	d8c00917 	ldw	r3,36(sp)
    fd30:	18000f26 	beq	r3,zero,fd70 <_strtod_r+0x1370>
    fd34:	a809883a 	mov	r4,r21
    fd38:	b00b883a 	mov	r5,r22
    fd3c:	000d883a 	mov	r6,zero
    fd40:	01ce5434 	movhi	r7,14672
    fd44:	da001315 	stw	r8,76(sp)
    fd48:	0018db40 	call	18db4 <__muldf3>
    fd4c:	102b883a 	mov	r21,r2
    fd50:	182d883a 	mov	r22,r3
    fd54:	da001317 	ldw	r8,76(sp)
    fd58:	1800051e 	bne	r3,zero,fd70 <_strtod_r+0x1370>
    fd5c:	d8800517 	ldw	r2,20(sp)
    fd60:	a83e4b1e 	bne	r21,zero,f690 <__alt_data_end+0xfc00f690>
    fd64:	00c00884 	movi	r3,34
    fd68:	80c00015 	stw	r3,0(r16)
    fd6c:	003e4806 	br	f690 <__alt_data_end+0xfc00f690>
    fd70:	d8800517 	ldw	r2,20(sp)
    fd74:	003e4606 	br	f690 <__alt_data_end+0xfc00f690>
    fd78:	d9000e17 	ldw	r4,56(sp)
    fd7c:	dd000a15 	stw	r20,40(sp)
    fd80:	a811883a 	mov	r8,r21
    fd84:	dd001217 	ldw	r20,72(sp)
    fd88:	dd401117 	ldw	r21,68(sp)
    fd8c:	dd801017 	ldw	r22,64(sp)
    fd90:	203fe61e 	bne	r4,zero,fd2c <__alt_data_end+0xfc00fd2c>
    fd94:	903fe51e 	bne	r18,zero,fd2c <__alt_data_end+0xfc00fd2c>
    fd98:	00800434 	movhi	r2,16
    fd9c:	10bfffc4 	addi	r2,r2,-1
    fda0:	8884703a 	and	r2,r17,r2
    fda4:	103fe11e 	bne	r2,zero,fd2c <__alt_data_end+0xfc00fd2c>
    fda8:	8ddffc2c 	andhi	r23,r17,32752
    fdac:	0081ac34 	movhi	r2,1712
    fdb0:	15ffde2e 	bgeu	r2,r23,fd2c <__alt_data_end+0xfc00fd2c>
    fdb4:	40800517 	ldw	r2,20(r8)
    fdb8:	1000031e 	bne	r2,zero,fdc8 <_strtod_r+0x13c8>
    fdbc:	40800417 	ldw	r2,16(r8)
    fdc0:	00c00044 	movi	r3,1
    fdc4:	18bfd90e 	bge	r3,r2,fd2c <__alt_data_end+0xfc00fd2c>
    fdc8:	400b883a 	mov	r5,r8
    fdcc:	01800044 	movi	r6,1
    fdd0:	8009883a 	mov	r4,r16
    fdd4:	000dc6c0 	call	dc6c <__lshift>
    fdd8:	980b883a 	mov	r5,r19
    fddc:	1009883a 	mov	r4,r2
    fde0:	d8801315 	stw	r2,76(sp)
    fde4:	000ddb40 	call	ddb4 <__mcmp>
    fde8:	da001317 	ldw	r8,76(sp)
    fdec:	00bfcf0e 	bge	zero,r2,fd2c <__alt_data_end+0xfc00fd2c>
    fdf0:	d8c00917 	ldw	r3,36(sp)
    fdf4:	18005c26 	beq	r3,zero,ff68 <_strtod_r+0x1568>
    fdf8:	0081ac34 	movhi	r2,1712
    fdfc:	15c05a16 	blt	r2,r23,ff68 <_strtod_r+0x1568>
    fe00:	0080dc34 	movhi	r2,880
    fe04:	15ffcb16 	blt	r2,r23,fd34 <__alt_data_end+0xfc00fd34>
    fe08:	003f1106 	br	fa50 <__alt_data_end+0xfc00fa50>
    fe0c:	002d883a 	mov	r22,zero
    fe10:	022ff834 	movhi	r8,49120
    fe14:	d8000d15 	stw	zero,52(sp)
    fe18:	05cff834 	movhi	r23,16352
    fe1c:	003ded06 	br	f5d4 <__alt_data_end+0xfc00f5d4>
    fe20:	0440d434 	movhi	r17,848
    fe24:	1c63883a 	add	r17,r3,r17
    fe28:	d8000915 	stw	zero,36(sp)
    fe2c:	003cc806 	br	f150 <__alt_data_end+0xfc00f150>
    fe30:	8884703a 	and	r2,r17,r2
    fe34:	103faa1e 	bne	r2,zero,fce0 <__alt_data_end+0xfc00fce0>
    fe38:	903fa91e 	bne	r18,zero,fce0 <__alt_data_end+0xfc00fce0>
    fe3c:	8ddffc2c 	andhi	r23,r17,32752
    fe40:	003feb06 	br	fdf0 <__alt_data_end+0xfc00fdf0>
    fe44:	d8c00d17 	ldw	r3,52(sp)
    fe48:	1cae703a 	and	r23,r3,r18
    fe4c:	b83fb726 	beq	r23,zero,fd2c <__alt_data_end+0xfc00fd2c>
    fe50:	003fa706 	br	fcf0 <__alt_data_end+0xfc00fcf0>
    fe54:	21000044 	addi	r4,r4,1
    fe58:	d9000615 	stw	r4,24(sp)
    fe5c:	003f9006 	br	fca0 <__alt_data_end+0xfc00fca0>
    fe60:	014000b4 	movhi	r5,2
    fe64:	29560904 	addi	r5,r5,22564
    fe68:	d9400915 	stw	r5,36(sp)
    fe6c:	0027883a 	mov	r19,zero
    fe70:	003ca206 	br	f0fc <__alt_data_end+0xfc00f0fc>
    fe74:	9009883a 	mov	r4,r18
    fe78:	880b883a 	mov	r5,r17
    fe7c:	da001315 	stw	r8,76(sp)
    fe80:	000e99c0 	call	e99c <sulp>
    fe84:	100d883a 	mov	r6,r2
    fe88:	180f883a 	mov	r7,r3
    fe8c:	9009883a 	mov	r4,r18
    fe90:	880b883a 	mov	r5,r17
    fe94:	00194cc0 	call	194cc <__subdf3>
    fe98:	000d883a 	mov	r6,zero
    fe9c:	000f883a 	mov	r7,zero
    fea0:	1009883a 	mov	r4,r2
    fea4:	180b883a 	mov	r5,r3
    fea8:	102b883a 	mov	r21,r2
    feac:	182d883a 	mov	r22,r3
    feb0:	0018b5c0 	call	18b5c <__eqdf2>
    feb4:	da001317 	ldw	r8,76(sp)
    feb8:	103ee526 	beq	r2,zero,fa50 <__alt_data_end+0xfc00fa50>
    febc:	003f9b06 	br	fd2c <__alt_data_end+0xfc00fd2c>
    fec0:	d8800917 	ldw	r2,36(sp)
    fec4:	10002226 	beq	r2,zero,ff50 <_strtod_r+0x1550>
    fec8:	889ffc2c 	andhi	r2,r17,32752
    fecc:	00c1a834 	movhi	r3,1696
    fed0:	18801f36 	bltu	r3,r2,ff50 <_strtod_r+0x1550>
    fed4:	1004d53a 	srli	r2,r2,20
    fed8:	00c01ac4 	movi	r3,107
    fedc:	1887c83a 	sub	r3,r3,r2
    fee0:	00bfffc4 	movi	r2,-1
    fee4:	10c4983a 	sll	r2,r2,r3
    fee8:	14bf7d1e 	bne	r2,r18,fce0 <__alt_data_end+0xfc00fce0>
    feec:	00dffc34 	movhi	r3,32752
    fef0:	18ffffc4 	addi	r3,r3,-1
    fef4:	88c03526 	beq	r17,r3,ffcc <_strtod_r+0x15cc>
    fef8:	8c5ffc2c 	andhi	r17,r17,32752
    fefc:	00800434 	movhi	r2,16
    ff00:	002b883a 	mov	r21,zero
    ff04:	88ad883a 	add	r22,r17,r2
    ff08:	003f8806 	br	fd2c <__alt_data_end+0xfc00fd2c>
    ff0c:	01401a84 	movi	r5,106
    ff10:	d9400915 	stw	r5,36(sp)
    ff14:	8ddffc2c 	andhi	r23,r17,32752
    ff18:	b82ed53a 	srli	r23,r23,20
    ff1c:	00801ac4 	movi	r2,107
    ff20:	15c5c83a 	sub	r2,r2,r23
    ff24:	00be8e0e 	bge	zero,r2,f960 <__alt_data_end+0xfc00f960>
    ff28:	00c007c4 	movi	r3,31
    ff2c:	18800a0e 	bge	r3,r2,ff58 <_strtod_r+0x1558>
    ff30:	00c00d04 	movi	r3,52
    ff34:	0025883a 	mov	r18,zero
    ff38:	1880270e 	bge	r3,r2,ffd8 <_strtod_r+0x15d8>
    ff3c:	0440dc34 	movhi	r17,880
    ff40:	003e8706 	br	f960 <__alt_data_end+0xfc00f960>
    ff44:	d8000915 	stw	zero,36(sp)
    ff48:	05fe6a16 	blt	zero,r23,f8f4 <__alt_data_end+0xfc00f8f4>
    ff4c:	003e8406 	br	f960 <__alt_data_end+0xfc00f960>
    ff50:	00bfffc4 	movi	r2,-1
    ff54:	003fe406 	br	fee8 <__alt_data_end+0xfc00fee8>
    ff58:	00ffffc4 	movi	r3,-1
    ff5c:	1884983a 	sll	r2,r3,r2
    ff60:	14a4703a 	and	r18,r2,r18
    ff64:	003e7e06 	br	f960 <__alt_data_end+0xfc00f960>
    ff68:	00bffc34 	movhi	r2,65520
    ff6c:	b8af883a 	add	r23,r23,r2
    ff70:	057fffc4 	movi	r21,-1
    ff74:	00800434 	movhi	r2,16
    ff78:	1545883a 	add	r2,r2,r21
    ff7c:	b8acb03a 	or	r22,r23,r2
    ff80:	003f6a06 	br	fd2c <__alt_data_end+0xfc00fd2c>
    ff84:	014000b4 	movhi	r5,2
    ff88:	29564904 	addi	r5,r5,22820
    ff8c:	d9800204 	addi	r6,sp,8
    ff90:	d9000604 	addi	r4,sp,24
    ff94:	00151800 	call	15180 <__hexnan>
    ff98:	00c00144 	movi	r3,5
    ff9c:	10fb5c1e 	bne	r2,r3,ed10 <__alt_data_end+0xfc00ed10>
    ffa0:	dc400317 	ldw	r17,12(sp)
    ffa4:	dc800217 	ldw	r18,8(sp)
    ffa8:	8c5ffc34 	orhi	r17,r17,32752
    ffac:	003b5a06 	br	ed18 <__alt_data_end+0xfc00ed18>
    ffb0:	480b883a 	mov	r5,r9
    ffb4:	d9800617 	ldw	r6,24(sp)
    ffb8:	4a400044 	addi	r9,r9,1
    ffbc:	003eeb06 	br	fb6c <__alt_data_end+0xfc00fb6c>
    ffc0:	1025883a 	mov	r18,r2
    ffc4:	1823883a 	mov	r17,r3
    ffc8:	003c4c06 	br	f0fc <__alt_data_end+0xfc00f0fc>
    ffcc:	00ffffc4 	movi	r3,-1
    ffd0:	10ffc91e 	bne	r2,r3,fef8 <__alt_data_end+0xfc00fef8>
    ffd4:	003da906 	br	f67c <__alt_data_end+0xfc00f67c>
    ffd8:	10bff804 	addi	r2,r2,-32
    ffdc:	00ffffc4 	movi	r3,-1
    ffe0:	1884983a 	sll	r2,r3,r2
    ffe4:	1462703a 	and	r17,r2,r17
    ffe8:	003e5d06 	br	f960 <__alt_data_end+0xfc00f960>
    ffec:	1025883a 	mov	r18,r2
    fff0:	1823883a 	mov	r17,r3
    fff4:	003e5806 	br	f958 <__alt_data_end+0xfc00f958>

0000fff8 <strtod>:
    fff8:	008000b4 	movhi	r2,2
    fffc:	109df804 	addi	r2,r2,30688
   10000:	280d883a 	mov	r6,r5
   10004:	200b883a 	mov	r5,r4
   10008:	11000017 	ldw	r4,0(r2)
   1000c:	000ea001 	jmpi	ea00 <_strtod_r>

00010010 <strtof>:
   10010:	defffb04 	addi	sp,sp,-20
   10014:	dcc00315 	stw	r19,12(sp)
   10018:	04c000b4 	movhi	r19,2
   1001c:	9cddf804 	addi	r19,r19,30688
   10020:	280d883a 	mov	r6,r5
   10024:	200b883a 	mov	r5,r4
   10028:	99000017 	ldw	r4,0(r19)
   1002c:	dfc00415 	stw	ra,16(sp)
   10030:	dc800215 	stw	r18,8(sp)
   10034:	dc400115 	stw	r17,4(sp)
   10038:	dc000015 	stw	r16,0(sp)
   1003c:	000ea000 	call	ea00 <_strtod_r>
   10040:	1009883a 	mov	r4,r2
   10044:	180b883a 	mov	r5,r3
   10048:	1025883a 	mov	r18,r2
   1004c:	1823883a 	mov	r17,r3
   10050:	0019fcc0 	call	19fcc <__truncdfsf2>
   10054:	000b883a 	mov	r5,zero
   10058:	1009883a 	mov	r4,r2
   1005c:	1021883a 	mov	r16,r2
   10060:	00177cc0 	call	177cc <__eqsf2>
   10064:	1000111e 	bne	r2,zero,100ac <strtof+0x9c>
   10068:	000d883a 	mov	r6,zero
   1006c:	000f883a 	mov	r7,zero
   10070:	9009883a 	mov	r4,r18
   10074:	880b883a 	mov	r5,r17
   10078:	0018b5c0 	call	18b5c <__eqdf2>
   1007c:	10000b26 	beq	r2,zero,100ac <strtof+0x9c>
   10080:	98800017 	ldw	r2,0(r19)
   10084:	00c00884 	movi	r3,34
   10088:	10c00015 	stw	r3,0(r2)
   1008c:	8005883a 	mov	r2,r16
   10090:	dfc00417 	ldw	ra,16(sp)
   10094:	dcc00317 	ldw	r19,12(sp)
   10098:	dc800217 	ldw	r18,8(sp)
   1009c:	dc400117 	ldw	r17,4(sp)
   100a0:	dc000017 	ldw	r16,0(sp)
   100a4:	dec00504 	addi	sp,sp,20
   100a8:	f800283a 	ret
   100ac:	015fe034 	movhi	r5,32640
   100b0:	297fffc4 	addi	r5,r5,-1
   100b4:	8009883a 	mov	r4,r16
   100b8:	00178440 	call	17844 <__gesf2>
   100bc:	0080070e 	bge	zero,r2,100dc <strtof+0xcc>
   100c0:	01dffc34 	movhi	r7,32752
   100c4:	39ffffc4 	addi	r7,r7,-1
   100c8:	01bfffc4 	movi	r6,-1
   100cc:	9009883a 	mov	r4,r18
   100d0:	880b883a 	mov	r5,r17
   100d4:	0018be40 	call	18be4 <__gedf2>
   100d8:	00bfe90e 	bge	zero,r2,10080 <__alt_data_end+0xfc010080>
   100dc:	017fe034 	movhi	r5,65408
   100e0:	297fffc4 	addi	r5,r5,-1
   100e4:	8009883a 	mov	r4,r16
   100e8:	00179000 	call	17900 <__lesf2>
   100ec:	103fe70e 	bge	r2,zero,1008c <__alt_data_end+0xfc01008c>
   100f0:	01fffc34 	movhi	r7,65520
   100f4:	39ffffc4 	addi	r7,r7,-1
   100f8:	01bfffc4 	movi	r6,-1
   100fc:	9009883a 	mov	r4,r18
   10100:	880b883a 	mov	r5,r17
   10104:	0018cc00 	call	18cc0 <__ledf2>
   10108:	103fdd0e 	bge	r2,zero,10080 <__alt_data_end+0xfc010080>
   1010c:	003fdf06 	br	1008c <__alt_data_end+0xfc01008c>

00010110 <_strtoll_r>:
   10110:	008000b4 	movhi	r2,2
   10114:	defff304 	addi	sp,sp,-52
   10118:	109dfb04 	addi	r2,r2,30700
   1011c:	dc800515 	stw	r18,20(sp)
   10120:	14800017 	ldw	r18,0(r2)
   10124:	dd800915 	stw	r22,36(sp)
   10128:	dd400815 	stw	r21,32(sp)
   1012c:	dcc00615 	stw	r19,24(sp)
   10130:	d9000015 	stw	r4,0(sp)
   10134:	dfc00c15 	stw	ra,48(sp)
   10138:	df000b15 	stw	fp,44(sp)
   1013c:	ddc00a15 	stw	r23,40(sp)
   10140:	dd000715 	stw	r20,28(sp)
   10144:	dc400415 	stw	r17,16(sp)
   10148:	dc000315 	stw	r16,12(sp)
   1014c:	282d883a 	mov	r22,r5
   10150:	302b883a 	mov	r21,r6
   10154:	3827883a 	mov	r19,r7
   10158:	2809883a 	mov	r4,r5
   1015c:	24000003 	ldbu	r16,0(r4)
   10160:	24400044 	addi	r17,r4,1
   10164:	2007883a 	mov	r3,r4
   10168:	9405883a 	add	r2,r18,r16
   1016c:	10800043 	ldbu	r2,1(r2)
   10170:	8809883a 	mov	r4,r17
   10174:	1080020c 	andi	r2,r2,8
   10178:	103ff81e 	bne	r2,zero,1015c <__alt_data_end+0xfc01015c>
   1017c:	00800b44 	movi	r2,45
   10180:	80807826 	beq	r16,r2,10364 <_strtoll_r+0x254>
   10184:	00800ac4 	movi	r2,43
   10188:	80807a26 	beq	r16,r2,10374 <_strtoll_r+0x264>
   1018c:	0039883a 	mov	fp,zero
   10190:	98004e26 	beq	r19,zero,102cc <_strtoll_r+0x1bc>
   10194:	00800404 	movi	r2,16
   10198:	98808226 	beq	r19,r2,103a4 <_strtoll_r+0x294>
   1019c:	982fd7fa 	srai	r23,r19,31
   101a0:	9829883a 	mov	r20,r19
   101a4:	e0004f26 	beq	fp,zero,102e4 <_strtoll_r+0x1d4>
   101a8:	0017883a 	mov	r11,zero
   101ac:	02a00034 	movhi	r10,32768
   101b0:	5809883a 	mov	r4,r11
   101b4:	500b883a 	mov	r5,r10
   101b8:	a00d883a 	mov	r6,r20
   101bc:	b80f883a 	mov	r7,r23
   101c0:	da800215 	stw	r10,8(sp)
   101c4:	dac00115 	stw	r11,4(sp)
   101c8:	00170e00 	call	170e0 <__umoddi3>
   101cc:	dac00117 	ldw	r11,4(sp)
   101d0:	da800217 	ldw	r10,8(sp)
   101d4:	a00d883a 	mov	r6,r20
   101d8:	5809883a 	mov	r4,r11
   101dc:	500b883a 	mov	r5,r10
   101e0:	b80f883a 	mov	r7,r23
   101e4:	d8800115 	stw	r2,4(sp)
   101e8:	0016b680 	call	16b68 <__udivdi3>
   101ec:	9409883a 	add	r4,r18,r16
   101f0:	21000043 	ldbu	r4,1(r4)
   101f4:	1019883a 	mov	r12,r2
   101f8:	880b883a 	mov	r5,r17
   101fc:	2240010c 	andi	r9,r4,4
   10200:	0015883a 	mov	r10,zero
   10204:	000d883a 	mov	r6,zero
   10208:	000f883a 	mov	r7,zero
   1020c:	03400044 	movi	r13,1
   10210:	02ffffc4 	movi	r11,-1
   10214:	da000117 	ldw	r8,4(sp)
   10218:	48000d26 	beq	r9,zero,10250 <_strtoll_r+0x140>
   1021c:	843ff404 	addi	r16,r16,-48
   10220:	84c0110e 	bge	r16,r19,10268 <_strtoll_r+0x158>
   10224:	52c00426 	beq	r10,r11,10238 <_strtoll_r+0x128>
   10228:	19c00236 	bltu	r3,r7,10234 <_strtoll_r+0x124>
   1022c:	38c0311e 	bne	r7,r3,102f4 <_strtoll_r+0x1e4>
   10230:	6180302e 	bgeu	r12,r6,102f4 <_strtoll_r+0x1e4>
   10234:	02bfffc4 	movi	r10,-1
   10238:	2c000003 	ldbu	r16,0(r5)
   1023c:	29400044 	addi	r5,r5,1
   10240:	9409883a 	add	r4,r18,r16
   10244:	21000043 	ldbu	r4,1(r4)
   10248:	2240010c 	andi	r9,r4,4
   1024c:	483ff31e 	bne	r9,zero,1021c <__alt_data_end+0xfc01021c>
   10250:	210000cc 	andi	r4,r4,3
   10254:	20000426 	beq	r4,zero,10268 <_strtoll_r+0x158>
   10258:	23403426 	beq	r4,r13,1032c <_strtoll_r+0x21c>
   1025c:	008015c4 	movi	r2,87
   10260:	80a1c83a 	sub	r16,r16,r2
   10264:	84ffef16 	blt	r16,r19,10224 <__alt_data_end+0xfc010224>
   10268:	00bfffc4 	movi	r2,-1
   1026c:	50803426 	beq	r10,r2,10340 <_strtoll_r+0x230>
   10270:	e0000426 	beq	fp,zero,10284 <_strtoll_r+0x174>
   10274:	018dc83a 	sub	r6,zero,r6
   10278:	3004c03a 	cmpne	r2,r6,zero
   1027c:	01e1c83a 	sub	r16,zero,r7
   10280:	808fc83a 	sub	r7,r16,r2
   10284:	3005883a 	mov	r2,r6
   10288:	3807883a 	mov	r3,r7
   1028c:	a8000326 	beq	r21,zero,1029c <_strtoll_r+0x18c>
   10290:	5000321e 	bne	r10,zero,1035c <_strtoll_r+0x24c>
   10294:	b00b883a 	mov	r5,r22
   10298:	a9400015 	stw	r5,0(r21)
   1029c:	dfc00c17 	ldw	ra,48(sp)
   102a0:	df000b17 	ldw	fp,44(sp)
   102a4:	ddc00a17 	ldw	r23,40(sp)
   102a8:	dd800917 	ldw	r22,36(sp)
   102ac:	dd400817 	ldw	r21,32(sp)
   102b0:	dd000717 	ldw	r20,28(sp)
   102b4:	dcc00617 	ldw	r19,24(sp)
   102b8:	dc800517 	ldw	r18,20(sp)
   102bc:	dc400417 	ldw	r17,16(sp)
   102c0:	dc000317 	ldw	r16,12(sp)
   102c4:	dec00d04 	addi	sp,sp,52
   102c8:	f800283a 	ret
   102cc:	00800c04 	movi	r2,48
   102d0:	80802c26 	beq	r16,r2,10384 <_strtoll_r+0x274>
   102d4:	05000284 	movi	r20,10
   102d8:	002f883a 	mov	r23,zero
   102dc:	a027883a 	mov	r19,r20
   102e0:	e03fb11e 	bne	fp,zero,101a8 <__alt_data_end+0xfc0101a8>
   102e4:	02a00034 	movhi	r10,32768
   102e8:	52bfffc4 	addi	r10,r10,-1
   102ec:	02ffffc4 	movi	r11,-1
   102f0:	003faf06 	br	101b0 <__alt_data_end+0xfc0101b0>
   102f4:	33000f26 	beq	r6,r12,10334 <_strtoll_r+0x224>
   102f8:	b985383a 	mul	r2,r23,r6
   102fc:	3d0f383a 	mul	r7,r7,r20
   10300:	3508383a 	mulxuu	r4,r6,r20
   10304:	350d383a 	mul	r6,r6,r20
   10308:	8013d7fa 	srai	r9,r16,31
   1030c:	388f883a 	add	r7,r7,r2
   10310:	818d883a 	add	r6,r16,r6
   10314:	390f883a 	add	r7,r7,r4
   10318:	3421803a 	cmpltu	r16,r6,r16
   1031c:	49cf883a 	add	r7,r9,r7
   10320:	81cf883a 	add	r7,r16,r7
   10324:	02800044 	movi	r10,1
   10328:	003fc306 	br	10238 <__alt_data_end+0xfc010238>
   1032c:	00800dc4 	movi	r2,55
   10330:	003fcb06 	br	10260 <__alt_data_end+0xfc010260>
   10334:	38fff01e 	bne	r7,r3,102f8 <__alt_data_end+0xfc0102f8>
   10338:	443fbe16 	blt	r8,r16,10234 <__alt_data_end+0xfc010234>
   1033c:	003fee06 	br	102f8 <__alt_data_end+0xfc0102f8>
   10340:	e0002426 	beq	fp,zero,103d4 <_strtoll_r+0x2c4>
   10344:	0005883a 	mov	r2,zero
   10348:	00e00034 	movhi	r3,32768
   1034c:	d9800017 	ldw	r6,0(sp)
   10350:	01000884 	movi	r4,34
   10354:	31000015 	stw	r4,0(r6)
   10358:	a83fd026 	beq	r21,zero,1029c <__alt_data_end+0xfc01029c>
   1035c:	297fffc4 	addi	r5,r5,-1
   10360:	003fcd06 	br	10298 <__alt_data_end+0xfc010298>
   10364:	1c400084 	addi	r17,r3,2
   10368:	1c000043 	ldbu	r16,1(r3)
   1036c:	07000044 	movi	fp,1
   10370:	003f8706 	br	10190 <__alt_data_end+0xfc010190>
   10374:	1c400084 	addi	r17,r3,2
   10378:	1c000043 	ldbu	r16,1(r3)
   1037c:	0039883a 	mov	fp,zero
   10380:	003f8306 	br	10190 <__alt_data_end+0xfc010190>
   10384:	88800003 	ldbu	r2,0(r17)
   10388:	00c01604 	movi	r3,88
   1038c:	108037cc 	andi	r2,r2,223
   10390:	10c00a26 	beq	r2,r3,103bc <_strtoll_r+0x2ac>
   10394:	05000204 	movi	r20,8
   10398:	002f883a 	mov	r23,zero
   1039c:	a027883a 	mov	r19,r20
   103a0:	003f8006 	br	101a4 <__alt_data_end+0xfc0101a4>
   103a4:	00800c04 	movi	r2,48
   103a8:	80800e1e 	bne	r16,r2,103e4 <_strtoll_r+0x2d4>
   103ac:	88800003 	ldbu	r2,0(r17)
   103b0:	00c01604 	movi	r3,88
   103b4:	108037cc 	andi	r2,r2,223
   103b8:	10c00a1e 	bne	r2,r3,103e4 <_strtoll_r+0x2d4>
   103bc:	05000404 	movi	r20,16
   103c0:	8c000043 	ldbu	r16,1(r17)
   103c4:	002f883a 	mov	r23,zero
   103c8:	8c400084 	addi	r17,r17,2
   103cc:	a027883a 	mov	r19,r20
   103d0:	003f7406 	br	101a4 <__alt_data_end+0xfc0101a4>
   103d4:	00e00034 	movhi	r3,32768
   103d8:	18ffffc4 	addi	r3,r3,-1
   103dc:	5005883a 	mov	r2,r10
   103e0:	003fda06 	br	1034c <__alt_data_end+0xfc01034c>
   103e4:	9829883a 	mov	r20,r19
   103e8:	002f883a 	mov	r23,zero
   103ec:	003f6d06 	br	101a4 <__alt_data_end+0xfc0101a4>

000103f0 <_strtoul_r>:
   103f0:	008000b4 	movhi	r2,2
   103f4:	defff604 	addi	sp,sp,-40
   103f8:	109dfb04 	addi	r2,r2,30700
   103fc:	dc800315 	stw	r18,12(sp)
   10400:	14800017 	ldw	r18,0(r2)
   10404:	dd400615 	stw	r21,24(sp)
   10408:	dd000515 	stw	r20,20(sp)
   1040c:	dcc00415 	stw	r19,16(sp)
   10410:	2029883a 	mov	r20,r4
   10414:	dfc00915 	stw	ra,36(sp)
   10418:	ddc00815 	stw	r23,32(sp)
   1041c:	dd800715 	stw	r22,28(sp)
   10420:	dc400215 	stw	r17,8(sp)
   10424:	dc000115 	stw	r16,4(sp)
   10428:	2827883a 	mov	r19,r5
   1042c:	382b883a 	mov	r21,r7
   10430:	2809883a 	mov	r4,r5
   10434:	24000003 	ldbu	r16,0(r4)
   10438:	24400044 	addi	r17,r4,1
   1043c:	2007883a 	mov	r3,r4
   10440:	9405883a 	add	r2,r18,r16
   10444:	10800043 	ldbu	r2,1(r2)
   10448:	8809883a 	mov	r4,r17
   1044c:	1080020c 	andi	r2,r2,8
   10450:	103ff81e 	bne	r2,zero,10434 <__alt_data_end+0xfc010434>
   10454:	00800b44 	movi	r2,45
   10458:	80805326 	beq	r16,r2,105a8 <_strtoul_r+0x1b8>
   1045c:	00800ac4 	movi	r2,43
   10460:	80805526 	beq	r16,r2,105b8 <_strtoul_r+0x1c8>
   10464:	002f883a 	mov	r23,zero
   10468:	a8000f26 	beq	r21,zero,104a8 <_strtoul_r+0xb8>
   1046c:	00800404 	movi	r2,16
   10470:	a8805f26 	beq	r21,r2,105f0 <_strtoul_r+0x200>
   10474:	013fffc4 	movi	r4,-1
   10478:	a80b883a 	mov	r5,r21
   1047c:	d9800015 	stw	r6,0(sp)
   10480:	00177100 	call	17710 <__udivsi3>
   10484:	a80b883a 	mov	r5,r21
   10488:	013fffc4 	movi	r4,-1
   1048c:	102d883a 	mov	r22,r2
   10490:	00177740 	call	17774 <__umodsi3>
   10494:	d9800017 	ldw	r6,0(sp)
   10498:	1019883a 	mov	r12,r2
   1049c:	a817883a 	mov	r11,r21
   104a0:	b00f883a 	mov	r7,r22
   104a4:	00000706 	br	104c4 <_strtoul_r+0xd4>
   104a8:	00800c04 	movi	r2,48
   104ac:	80804626 	beq	r16,r2,105c8 <_strtoul_r+0x1d8>
   104b0:	05400284 	movi	r21,10
   104b4:	01c666b4 	movhi	r7,6554
   104b8:	03000144 	movi	r12,5
   104bc:	39e66644 	addi	r7,r7,-26215
   104c0:	a817883a 	mov	r11,r21
   104c4:	9407883a 	add	r3,r18,r16
   104c8:	18c00043 	ldbu	r3,1(r3)
   104cc:	8809883a 	mov	r4,r17
   104d0:	0011883a 	mov	r8,zero
   104d4:	1940010c 	andi	r5,r3,4
   104d8:	0005883a 	mov	r2,zero
   104dc:	02800044 	movi	r10,1
   104e0:	027fffc4 	movi	r9,-1
   104e4:	28000e26 	beq	r5,zero,10520 <_strtoul_r+0x130>
   104e8:	843ff404 	addi	r16,r16,-48
   104ec:	8540120e 	bge	r16,r21,10538 <_strtoul_r+0x148>
   104f0:	42400526 	beq	r8,r9,10508 <_strtoul_r+0x118>
   104f4:	38802236 	bltu	r7,r2,10580 <_strtoul_r+0x190>
   104f8:	11c02026 	beq	r2,r7,1057c <_strtoul_r+0x18c>
   104fc:	12c5383a 	mul	r2,r2,r11
   10500:	02000044 	movi	r8,1
   10504:	8085883a 	add	r2,r16,r2
   10508:	24000003 	ldbu	r16,0(r4)
   1050c:	21000044 	addi	r4,r4,1
   10510:	9407883a 	add	r3,r18,r16
   10514:	18c00043 	ldbu	r3,1(r3)
   10518:	1940010c 	andi	r5,r3,4
   1051c:	283ff21e 	bne	r5,zero,104e8 <__alt_data_end+0xfc0104e8>
   10520:	18c000cc 	andi	r3,r3,3
   10524:	18000426 	beq	r3,zero,10538 <_strtoul_r+0x148>
   10528:	1a801726 	beq	r3,r10,10588 <_strtoul_r+0x198>
   1052c:	00c015c4 	movi	r3,87
   10530:	80e1c83a 	sub	r16,r16,r3
   10534:	857fee16 	blt	r16,r21,104f0 <__alt_data_end+0xfc0104f0>
   10538:	40001516 	blt	r8,zero,10590 <_strtoul_r+0x1a0>
   1053c:	b8000126 	beq	r23,zero,10544 <_strtoul_r+0x154>
   10540:	0085c83a 	sub	r2,zero,r2
   10544:	30000226 	beq	r6,zero,10550 <_strtoul_r+0x160>
   10548:	4000151e 	bne	r8,zero,105a0 <_strtoul_r+0x1b0>
   1054c:	34c00015 	stw	r19,0(r6)
   10550:	dfc00917 	ldw	ra,36(sp)
   10554:	ddc00817 	ldw	r23,32(sp)
   10558:	dd800717 	ldw	r22,28(sp)
   1055c:	dd400617 	ldw	r21,24(sp)
   10560:	dd000517 	ldw	r20,20(sp)
   10564:	dcc00417 	ldw	r19,16(sp)
   10568:	dc800317 	ldw	r18,12(sp)
   1056c:	dc400217 	ldw	r17,8(sp)
   10570:	dc000117 	ldw	r16,4(sp)
   10574:	dec00a04 	addi	sp,sp,40
   10578:	f800283a 	ret
   1057c:	643fdf0e 	bge	r12,r16,104fc <__alt_data_end+0xfc0104fc>
   10580:	023fffc4 	movi	r8,-1
   10584:	003fe006 	br	10508 <__alt_data_end+0xfc010508>
   10588:	00c00dc4 	movi	r3,55
   1058c:	003fe806 	br	10530 <__alt_data_end+0xfc010530>
   10590:	00800884 	movi	r2,34
   10594:	a0800015 	stw	r2,0(r20)
   10598:	00bfffc4 	movi	r2,-1
   1059c:	303fec26 	beq	r6,zero,10550 <__alt_data_end+0xfc010550>
   105a0:	24ffffc4 	addi	r19,r4,-1
   105a4:	003fe906 	br	1054c <__alt_data_end+0xfc01054c>
   105a8:	1c400084 	addi	r17,r3,2
   105ac:	1c000043 	ldbu	r16,1(r3)
   105b0:	05c00044 	movi	r23,1
   105b4:	003fac06 	br	10468 <__alt_data_end+0xfc010468>
   105b8:	1c400084 	addi	r17,r3,2
   105bc:	1c000043 	ldbu	r16,1(r3)
   105c0:	002f883a 	mov	r23,zero
   105c4:	003fa806 	br	10468 <__alt_data_end+0xfc010468>
   105c8:	88800003 	ldbu	r2,0(r17)
   105cc:	00c01604 	movi	r3,88
   105d0:	108037cc 	andi	r2,r2,223
   105d4:	10c00c26 	beq	r2,r3,10608 <_strtoul_r+0x218>
   105d8:	05400204 	movi	r21,8
   105dc:	01c80034 	movhi	r7,8192
   105e0:	030001c4 	movi	r12,7
   105e4:	39ffffc4 	addi	r7,r7,-1
   105e8:	a817883a 	mov	r11,r21
   105ec:	003fb506 	br	104c4 <__alt_data_end+0xfc0104c4>
   105f0:	00800c04 	movi	r2,48
   105f4:	80800c1e 	bne	r16,r2,10628 <_strtoul_r+0x238>
   105f8:	88800003 	ldbu	r2,0(r17)
   105fc:	00c01604 	movi	r3,88
   10600:	108037cc 	andi	r2,r2,223
   10604:	10c0081e 	bne	r2,r3,10628 <_strtoul_r+0x238>
   10608:	02c00404 	movi	r11,16
   1060c:	05840034 	movhi	r22,4096
   10610:	8c000043 	ldbu	r16,1(r17)
   10614:	030003c4 	movi	r12,15
   10618:	8c400084 	addi	r17,r17,2
   1061c:	b5bfffc4 	addi	r22,r22,-1
   10620:	582b883a 	mov	r21,r11
   10624:	003f9e06 	br	104a0 <__alt_data_end+0xfc0104a0>
   10628:	01c40034 	movhi	r7,4096
   1062c:	030003c4 	movi	r12,15
   10630:	39ffffc4 	addi	r7,r7,-1
   10634:	a817883a 	mov	r11,r21
   10638:	003fa206 	br	104c4 <__alt_data_end+0xfc0104c4>

0001063c <strtoul>:
   1063c:	008000b4 	movhi	r2,2
   10640:	109df804 	addi	r2,r2,30688
   10644:	300f883a 	mov	r7,r6
   10648:	280d883a 	mov	r6,r5
   1064c:	200b883a 	mov	r5,r4
   10650:	11000017 	ldw	r4,0(r2)
   10654:	00103f01 	jmpi	103f0 <_strtoul_r>

00010658 <_strtoull_r>:
   10658:	008000b4 	movhi	r2,2
   1065c:	defff404 	addi	sp,sp,-48
   10660:	109dfb04 	addi	r2,r2,30700
   10664:	dc400315 	stw	r17,12(sp)
   10668:	14400017 	ldw	r17,0(r2)
   1066c:	dd400715 	stw	r21,28(sp)
   10670:	dd000615 	stw	r20,24(sp)
   10674:	dcc00515 	stw	r19,20(sp)
   10678:	dc800415 	stw	r18,16(sp)
   1067c:	dfc00b15 	stw	ra,44(sp)
   10680:	df000a15 	stw	fp,40(sp)
   10684:	ddc00915 	stw	r23,36(sp)
   10688:	dd800815 	stw	r22,32(sp)
   1068c:	dc000215 	stw	r16,8(sp)
   10690:	2827883a 	mov	r19,r5
   10694:	202b883a 	mov	r21,r4
   10698:	3029883a 	mov	r20,r6
   1069c:	3825883a 	mov	r18,r7
   106a0:	2807883a 	mov	r3,r5
   106a4:	1c000003 	ldbu	r16,0(r3)
   106a8:	1f000044 	addi	fp,r3,1
   106ac:	1809883a 	mov	r4,r3
   106b0:	8c05883a 	add	r2,r17,r16
   106b4:	10800043 	ldbu	r2,1(r2)
   106b8:	e007883a 	mov	r3,fp
   106bc:	1080020c 	andi	r2,r2,8
   106c0:	103ff81e 	bne	r2,zero,106a4 <__alt_data_end+0xfc0106a4>
   106c4:	00800b44 	movi	r2,45
   106c8:	80806e26 	beq	r16,r2,10884 <_strtoull_r+0x22c>
   106cc:	00800ac4 	movi	r2,43
   106d0:	80807026 	beq	r16,r2,10894 <_strtoull_r+0x23c>
   106d4:	002f883a 	mov	r23,zero
   106d8:	90001426 	beq	r18,zero,1072c <_strtoull_r+0xd4>
   106dc:	00800404 	movi	r2,16
   106e0:	90807c26 	beq	r18,r2,108d4 <_strtoull_r+0x27c>
   106e4:	902dd7fa 	srai	r22,r18,31
   106e8:	013fffc4 	movi	r4,-1
   106ec:	200b883a 	mov	r5,r4
   106f0:	900d883a 	mov	r6,r18
   106f4:	b00f883a 	mov	r7,r22
   106f8:	0016b680 	call	16b68 <__udivdi3>
   106fc:	013fffc4 	movi	r4,-1
   10700:	900d883a 	mov	r6,r18
   10704:	b00f883a 	mov	r7,r22
   10708:	200b883a 	mov	r5,r4
   1070c:	d8c00115 	stw	r3,4(sp)
   10710:	d8800015 	stw	r2,0(sp)
   10714:	00170e00 	call	170e0 <__umoddi3>
   10718:	101b883a 	mov	r13,r2
   1071c:	9015883a 	mov	r10,r18
   10720:	dac00017 	ldw	r11,0(sp)
   10724:	da000117 	ldw	r8,4(sp)
   10728:	00000a06 	br	10754 <_strtoull_r+0xfc>
   1072c:	00800c04 	movi	r2,48
   10730:	80805c26 	beq	r16,r2,108a4 <_strtoull_r+0x24c>
   10734:	02800284 	movi	r10,10
   10738:	02e666b4 	movhi	r11,39322
   1073c:	020666b4 	movhi	r8,6554
   10740:	03400144 	movi	r13,5
   10744:	5ae66644 	addi	r11,r11,-26215
   10748:	42266644 	addi	r8,r8,-26215
   1074c:	002d883a 	mov	r22,zero
   10750:	5025883a 	mov	r18,r10
   10754:	8c0b883a 	add	r5,r17,r16
   10758:	29400043 	ldbu	r5,1(r5)
   1075c:	e009883a 	mov	r4,fp
   10760:	000f883a 	mov	r7,zero
   10764:	2980010c 	andi	r6,r5,4
   10768:	0005883a 	mov	r2,zero
   1076c:	0007883a 	mov	r3,zero
   10770:	03000044 	movi	r12,1
   10774:	027fffc4 	movi	r9,-1
   10778:	30000d26 	beq	r6,zero,107b0 <_strtoull_r+0x158>
   1077c:	843ff404 	addi	r16,r16,-48
   10780:	8480110e 	bge	r16,r18,107c8 <_strtoull_r+0x170>
   10784:	3a400426 	beq	r7,r9,10798 <_strtoull_r+0x140>
   10788:	40c00236 	bltu	r8,r3,10794 <_strtoull_r+0x13c>
   1078c:	1a00231e 	bne	r3,r8,1081c <_strtoull_r+0x1c4>
   10790:	5880222e 	bgeu	r11,r2,1081c <_strtoull_r+0x1c4>
   10794:	01ffffc4 	movi	r7,-1
   10798:	24000003 	ldbu	r16,0(r4)
   1079c:	21000044 	addi	r4,r4,1
   107a0:	8c0b883a 	add	r5,r17,r16
   107a4:	29400043 	ldbu	r5,1(r5)
   107a8:	2980010c 	andi	r6,r5,4
   107ac:	303ff31e 	bne	r6,zero,1077c <__alt_data_end+0xfc01077c>
   107b0:	294000cc 	andi	r5,r5,3
   107b4:	28000426 	beq	r5,zero,107c8 <_strtoull_r+0x170>
   107b8:	2b002626 	beq	r5,r12,10854 <_strtoull_r+0x1fc>
   107bc:	014015c4 	movi	r5,87
   107c0:	8161c83a 	sub	r16,r16,r5
   107c4:	84bfef16 	blt	r16,r18,10784 <__alt_data_end+0xfc010784>
   107c8:	38002716 	blt	r7,zero,10868 <_strtoull_r+0x210>
   107cc:	b8000426 	beq	r23,zero,107e0 <_strtoull_r+0x188>
   107d0:	0085c83a 	sub	r2,zero,r2
   107d4:	100ac03a 	cmpne	r5,r2,zero
   107d8:	00e1c83a 	sub	r16,zero,r3
   107dc:	8147c83a 	sub	r3,r16,r5
   107e0:	a0000226 	beq	r20,zero,107ec <_strtoull_r+0x194>
   107e4:	3800251e 	bne	r7,zero,1087c <_strtoull_r+0x224>
   107e8:	a4c00015 	stw	r19,0(r20)
   107ec:	dfc00b17 	ldw	ra,44(sp)
   107f0:	df000a17 	ldw	fp,40(sp)
   107f4:	ddc00917 	ldw	r23,36(sp)
   107f8:	dd800817 	ldw	r22,32(sp)
   107fc:	dd400717 	ldw	r21,28(sp)
   10800:	dd000617 	ldw	r20,24(sp)
   10804:	dcc00517 	ldw	r19,20(sp)
   10808:	dc800417 	ldw	r18,16(sp)
   1080c:	dc400317 	ldw	r17,12(sp)
   10810:	dc000217 	ldw	r16,8(sp)
   10814:	dec00c04 	addi	sp,sp,48
   10818:	f800283a 	ret
   1081c:	12c00f26 	beq	r2,r11,1085c <_strtoull_r+0x204>
   10820:	b08d383a 	mul	r6,r22,r2
   10824:	1a87383a 	mul	r3,r3,r10
   10828:	128a383a 	mulxuu	r5,r2,r10
   1082c:	1285383a 	mul	r2,r2,r10
   10830:	800fd7fa 	srai	r7,r16,31
   10834:	1987883a 	add	r3,r3,r6
   10838:	8085883a 	add	r2,r16,r2
   1083c:	1947883a 	add	r3,r3,r5
   10840:	38c7883a 	add	r3,r7,r3
   10844:	1421803a 	cmpltu	r16,r2,r16
   10848:	80c7883a 	add	r3,r16,r3
   1084c:	01c00044 	movi	r7,1
   10850:	003fd106 	br	10798 <__alt_data_end+0xfc010798>
   10854:	01400dc4 	movi	r5,55
   10858:	003fd906 	br	107c0 <__alt_data_end+0xfc0107c0>
   1085c:	1a3ff01e 	bne	r3,r8,10820 <__alt_data_end+0xfc010820>
   10860:	6c3fcc16 	blt	r13,r16,10794 <__alt_data_end+0xfc010794>
   10864:	003fee06 	br	10820 <__alt_data_end+0xfc010820>
   10868:	00800884 	movi	r2,34
   1086c:	a8800015 	stw	r2,0(r21)
   10870:	00bfffc4 	movi	r2,-1
   10874:	1007883a 	mov	r3,r2
   10878:	a03fdc26 	beq	r20,zero,107ec <__alt_data_end+0xfc0107ec>
   1087c:	24ffffc4 	addi	r19,r4,-1
   10880:	003fd906 	br	107e8 <__alt_data_end+0xfc0107e8>
   10884:	27000084 	addi	fp,r4,2
   10888:	24000043 	ldbu	r16,1(r4)
   1088c:	05c00044 	movi	r23,1
   10890:	003f9106 	br	106d8 <__alt_data_end+0xfc0106d8>
   10894:	27000084 	addi	fp,r4,2
   10898:	24000043 	ldbu	r16,1(r4)
   1089c:	002f883a 	mov	r23,zero
   108a0:	003f8d06 	br	106d8 <__alt_data_end+0xfc0106d8>
   108a4:	e0800003 	ldbu	r2,0(fp)
   108a8:	00c01604 	movi	r3,88
   108ac:	108037cc 	andi	r2,r2,223
   108b0:	10c00e26 	beq	r2,r3,108ec <_strtoull_r+0x294>
   108b4:	02800204 	movi	r10,8
   108b8:	02ffffc4 	movi	r11,-1
   108bc:	02080034 	movhi	r8,8192
   108c0:	034001c4 	movi	r13,7
   108c4:	42d1883a 	add	r8,r8,r11
   108c8:	002d883a 	mov	r22,zero
   108cc:	5025883a 	mov	r18,r10
   108d0:	003fa006 	br	10754 <__alt_data_end+0xfc010754>
   108d4:	00800c04 	movi	r2,48
   108d8:	80800e1e 	bne	r16,r2,10914 <_strtoull_r+0x2bc>
   108dc:	e0800003 	ldbu	r2,0(fp)
   108e0:	00c01604 	movi	r3,88
   108e4:	108037cc 	andi	r2,r2,223
   108e8:	10c00a1e 	bne	r2,r3,10914 <_strtoull_r+0x2bc>
   108ec:	02800404 	movi	r10,16
   108f0:	02ffffc4 	movi	r11,-1
   108f4:	02040034 	movhi	r8,4096
   108f8:	e4000043 	ldbu	r16,1(fp)
   108fc:	034003c4 	movi	r13,15
   10900:	e7000084 	addi	fp,fp,2
   10904:	42d1883a 	add	r8,r8,r11
   10908:	002d883a 	mov	r22,zero
   1090c:	5025883a 	mov	r18,r10
   10910:	003f9006 	br	10754 <__alt_data_end+0xfc010754>
   10914:	02ffffc4 	movi	r11,-1
   10918:	02040034 	movhi	r8,4096
   1091c:	034003c4 	movi	r13,15
   10920:	42d1883a 	add	r8,r8,r11
   10924:	9015883a 	mov	r10,r18
   10928:	002d883a 	mov	r22,zero
   1092c:	003f8906 	br	10754 <__alt_data_end+0xfc010754>

00010930 <___svfprintf_internal_r>:
   10930:	deffb704 	addi	sp,sp,-292
   10934:	dfc04815 	stw	ra,288(sp)
   10938:	ddc04615 	stw	r23,280(sp)
   1093c:	d9402c15 	stw	r5,176(sp)
   10940:	d9003915 	stw	r4,228(sp)
   10944:	302f883a 	mov	r23,r6
   10948:	d9c02d15 	stw	r7,180(sp)
   1094c:	df004715 	stw	fp,284(sp)
   10950:	dd804515 	stw	r22,276(sp)
   10954:	dd404415 	stw	r21,272(sp)
   10958:	dd004315 	stw	r20,268(sp)
   1095c:	dcc04215 	stw	r19,264(sp)
   10960:	dc804115 	stw	r18,260(sp)
   10964:	dc404015 	stw	r17,256(sp)
   10968:	dc003f15 	stw	r16,252(sp)
   1096c:	000cf200 	call	cf20 <_localeconv_r>
   10970:	10800017 	ldw	r2,0(r2)
   10974:	1009883a 	mov	r4,r2
   10978:	d8803415 	stw	r2,208(sp)
   1097c:	00066700 	call	6670 <strlen>
   10980:	d8c02c17 	ldw	r3,176(sp)
   10984:	d8803815 	stw	r2,224(sp)
   10988:	1880030b 	ldhu	r2,12(r3)
   1098c:	1080200c 	andi	r2,r2,128
   10990:	10000226 	beq	r2,zero,1099c <___svfprintf_internal_r+0x6c>
   10994:	18800417 	ldw	r2,16(r3)
   10998:	10067f26 	beq	r2,zero,12398 <___svfprintf_internal_r+0x1a68>
   1099c:	dcc03917 	ldw	r19,228(sp)
   109a0:	d8c00404 	addi	r3,sp,16
   109a4:	054000b4 	movhi	r21,2
   109a8:	d9001e04 	addi	r4,sp,120
   109ac:	ad565d04 	addi	r21,r21,22900
   109b0:	d8c01e15 	stw	r3,120(sp)
   109b4:	d8002015 	stw	zero,128(sp)
   109b8:	d8001f15 	stw	zero,124(sp)
   109bc:	d8003315 	stw	zero,204(sp)
   109c0:	d8003615 	stw	zero,216(sp)
   109c4:	d8003715 	stw	zero,220(sp)
   109c8:	1811883a 	mov	r8,r3
   109cc:	d8003a15 	stw	zero,232(sp)
   109d0:	d8003b15 	stw	zero,236(sp)
   109d4:	d8002f15 	stw	zero,188(sp)
   109d8:	d9002815 	stw	r4,160(sp)
   109dc:	b8800007 	ldb	r2,0(r23)
   109e0:	10026726 	beq	r2,zero,11380 <___svfprintf_internal_r+0xa50>
   109e4:	00c00944 	movi	r3,37
   109e8:	b821883a 	mov	r16,r23
   109ec:	10c0021e 	bne	r2,r3,109f8 <___svfprintf_internal_r+0xc8>
   109f0:	00001406 	br	10a44 <___svfprintf_internal_r+0x114>
   109f4:	10c00326 	beq	r2,r3,10a04 <___svfprintf_internal_r+0xd4>
   109f8:	84000044 	addi	r16,r16,1
   109fc:	80800007 	ldb	r2,0(r16)
   10a00:	103ffc1e 	bne	r2,zero,109f4 <__alt_data_end+0xfc0109f4>
   10a04:	85e3c83a 	sub	r17,r16,r23
   10a08:	88000e26 	beq	r17,zero,10a44 <___svfprintf_internal_r+0x114>
   10a0c:	d8c02017 	ldw	r3,128(sp)
   10a10:	d8801f17 	ldw	r2,124(sp)
   10a14:	45c00015 	stw	r23,0(r8)
   10a18:	1c47883a 	add	r3,r3,r17
   10a1c:	10800044 	addi	r2,r2,1
   10a20:	d8c02015 	stw	r3,128(sp)
   10a24:	44400115 	stw	r17,4(r8)
   10a28:	d8801f15 	stw	r2,124(sp)
   10a2c:	00c001c4 	movi	r3,7
   10a30:	18809716 	blt	r3,r2,10c90 <___svfprintf_internal_r+0x360>
   10a34:	42000204 	addi	r8,r8,8
   10a38:	d9402f17 	ldw	r5,188(sp)
   10a3c:	2c4b883a 	add	r5,r5,r17
   10a40:	d9402f15 	stw	r5,188(sp)
   10a44:	80800007 	ldb	r2,0(r16)
   10a48:	10009826 	beq	r2,zero,10cac <___svfprintf_internal_r+0x37c>
   10a4c:	84400047 	ldb	r17,1(r16)
   10a50:	00bfffc4 	movi	r2,-1
   10a54:	85c00044 	addi	r23,r16,1
   10a58:	d8002785 	stb	zero,158(sp)
   10a5c:	0007883a 	mov	r3,zero
   10a60:	000f883a 	mov	r7,zero
   10a64:	d8802915 	stw	r2,164(sp)
   10a68:	d8003115 	stw	zero,196(sp)
   10a6c:	0025883a 	mov	r18,zero
   10a70:	01401604 	movi	r5,88
   10a74:	01800244 	movi	r6,9
   10a78:	02800a84 	movi	r10,42
   10a7c:	02401b04 	movi	r9,108
   10a80:	bdc00044 	addi	r23,r23,1
   10a84:	88bff804 	addi	r2,r17,-32
   10a88:	2882f036 	bltu	r5,r2,1164c <___svfprintf_internal_r+0xd1c>
   10a8c:	100490ba 	slli	r2,r2,2
   10a90:	01000074 	movhi	r4,1
   10a94:	2102a904 	addi	r4,r4,2724
   10a98:	1105883a 	add	r2,r2,r4
   10a9c:	10800017 	ldw	r2,0(r2)
   10aa0:	1000683a 	jmp	r2
   10aa4:	000115b4 	movhi	zero,1110
   10aa8:	0001164c 	andi	zero,zero,1113
   10aac:	0001164c 	andi	zero,zero,1113
   10ab0:	000115a8 	cmpgeui	zero,zero,1110
   10ab4:	0001164c 	andi	zero,zero,1113
   10ab8:	0001164c 	andi	zero,zero,1113
   10abc:	0001164c 	andi	zero,zero,1113
   10ac0:	0001164c 	andi	zero,zero,1113
   10ac4:	0001164c 	andi	zero,zero,1113
   10ac8:	0001164c 	andi	zero,zero,1113
   10acc:	00010d08 	cmpgei	zero,zero,1076
   10ad0:	000114e4 	muli	zero,zero,1107
   10ad4:	0001164c 	andi	zero,zero,1113
   10ad8:	00010c18 	cmpnei	zero,zero,1072
   10adc:	00010d30 	cmpltui	zero,zero,1076
   10ae0:	0001164c 	andi	zero,zero,1113
   10ae4:	00010da4 	muli	zero,zero,1078
   10ae8:	00010d70 	cmpltui	zero,zero,1077
   10aec:	00010d70 	cmpltui	zero,zero,1077
   10af0:	00010d70 	cmpltui	zero,zero,1077
   10af4:	00010d70 	cmpltui	zero,zero,1077
   10af8:	00010d70 	cmpltui	zero,zero,1077
   10afc:	00010d70 	cmpltui	zero,zero,1077
   10b00:	00010d70 	cmpltui	zero,zero,1077
   10b04:	00010d70 	cmpltui	zero,zero,1077
   10b08:	00010d70 	cmpltui	zero,zero,1077
   10b0c:	0001164c 	andi	zero,zero,1113
   10b10:	0001164c 	andi	zero,zero,1113
   10b14:	0001164c 	andi	zero,zero,1113
   10b18:	0001164c 	andi	zero,zero,1113
   10b1c:	0001164c 	andi	zero,zero,1113
   10b20:	0001164c 	andi	zero,zero,1113
   10b24:	0001164c 	andi	zero,zero,1113
   10b28:	0001164c 	andi	zero,zero,1113
   10b2c:	0001164c 	andi	zero,zero,1113
   10b30:	0001164c 	andi	zero,zero,1113
   10b34:	00010e5c 	xori	zero,zero,1081
   10b38:	00010db0 	cmpltui	zero,zero,1078
   10b3c:	0001164c 	andi	zero,zero,1113
   10b40:	00010db0 	cmpltui	zero,zero,1078
   10b44:	0001164c 	andi	zero,zero,1113
   10b48:	0001164c 	andi	zero,zero,1113
   10b4c:	0001164c 	andi	zero,zero,1113
   10b50:	0001164c 	andi	zero,zero,1113
   10b54:	00010e50 	cmplti	zero,zero,1081
   10b58:	0001164c 	andi	zero,zero,1113
   10b5c:	0001164c 	andi	zero,zero,1113
   10b60:	00010f18 	cmpnei	zero,zero,1084
   10b64:	0001164c 	andi	zero,zero,1113
   10b68:	0001164c 	andi	zero,zero,1113
   10b6c:	0001164c 	andi	zero,zero,1113
   10b70:	0001164c 	andi	zero,zero,1113
   10b74:	0001164c 	andi	zero,zero,1113
   10b78:	00011388 	cmpgei	zero,zero,1102
   10b7c:	0001164c 	andi	zero,zero,1113
   10b80:	0001164c 	andi	zero,zero,1113
   10b84:	000113e8 	cmpgeui	zero,zero,1103
   10b88:	0001164c 	andi	zero,zero,1113
   10b8c:	0001164c 	andi	zero,zero,1113
   10b90:	0001164c 	andi	zero,zero,1113
   10b94:	0001164c 	andi	zero,zero,1113
   10b98:	0001164c 	andi	zero,zero,1113
   10b9c:	0001164c 	andi	zero,zero,1113
   10ba0:	0001164c 	andi	zero,zero,1113
   10ba4:	0001164c 	andi	zero,zero,1113
   10ba8:	0001164c 	andi	zero,zero,1113
   10bac:	0001164c 	andi	zero,zero,1113
   10bb0:	00011498 	cmpnei	zero,zero,1106
   10bb4:	000115d4 	movui	zero,1111
   10bb8:	00010db0 	cmpltui	zero,zero,1078
   10bbc:	00010db0 	cmpltui	zero,zero,1078
   10bc0:	00010db0 	cmpltui	zero,zero,1078
   10bc4:	00011628 	cmpgeui	zero,zero,1112
   10bc8:	000115d4 	movui	zero,1111
   10bcc:	0001164c 	andi	zero,zero,1113
   10bd0:	0001164c 	andi	zero,zero,1113
   10bd4:	000115e4 	muli	zero,zero,1111
   10bd8:	0001164c 	andi	zero,zero,1113
   10bdc:	000115f4 	movhi	zero,1111
   10be0:	000114d4 	movui	zero,1107
   10be4:	00010c24 	muli	zero,zero,1072
   10be8:	000114f4 	movhi	zero,1107
   10bec:	0001164c 	andi	zero,zero,1113
   10bf0:	00011500 	call	1150 <generateCaptureList+0xb0>
   10bf4:	0001164c 	andi	zero,zero,1113
   10bf8:	0001155c 	xori	zero,zero,1109
   10bfc:	0001164c 	andi	zero,zero,1113
   10c00:	0001164c 	andi	zero,zero,1113
   10c04:	0001156c 	andhi	zero,zero,1109
   10c08:	d9003117 	ldw	r4,196(sp)
   10c0c:	d8802d15 	stw	r2,180(sp)
   10c10:	0109c83a 	sub	r4,zero,r4
   10c14:	d9003115 	stw	r4,196(sp)
   10c18:	94800114 	ori	r18,r18,4
   10c1c:	bc400007 	ldb	r17,0(r23)
   10c20:	003f9706 	br	10a80 <__alt_data_end+0xfc010a80>
   10c24:	00800c04 	movi	r2,48
   10c28:	d9002d17 	ldw	r4,180(sp)
   10c2c:	d9402917 	ldw	r5,164(sp)
   10c30:	d8802705 	stb	r2,156(sp)
   10c34:	00801e04 	movi	r2,120
   10c38:	d8802745 	stb	r2,157(sp)
   10c3c:	d8002785 	stb	zero,158(sp)
   10c40:	20c00104 	addi	r3,r4,4
   10c44:	25000017 	ldw	r20,0(r4)
   10c48:	002d883a 	mov	r22,zero
   10c4c:	90800094 	ori	r2,r18,2
   10c50:	28028616 	blt	r5,zero,1166c <___svfprintf_internal_r+0xd3c>
   10c54:	00bfdfc4 	movi	r2,-129
   10c58:	90a4703a 	and	r18,r18,r2
   10c5c:	d8c02d15 	stw	r3,180(sp)
   10c60:	94800094 	ori	r18,r18,2
   10c64:	a002731e 	bne	r20,zero,11634 <___svfprintf_internal_r+0xd04>
   10c68:	008000b4 	movhi	r2,2
   10c6c:	10953a04 	addi	r2,r2,21736
   10c70:	d8803a15 	stw	r2,232(sp)
   10c74:	04401e04 	movi	r17,120
   10c78:	d8c02917 	ldw	r3,164(sp)
   10c7c:	0039883a 	mov	fp,zero
   10c80:	1801d526 	beq	r3,zero,113d8 <___svfprintf_internal_r+0xaa8>
   10c84:	0029883a 	mov	r20,zero
   10c88:	002d883a 	mov	r22,zero
   10c8c:	0001f106 	br	11454 <___svfprintf_internal_r+0xb24>
   10c90:	d9402c17 	ldw	r5,176(sp)
   10c94:	d9801e04 	addi	r6,sp,120
   10c98:	9809883a 	mov	r4,r19
   10c9c:	00155000 	call	15500 <__ssprint_r>
   10ca0:	1000081e 	bne	r2,zero,10cc4 <___svfprintf_internal_r+0x394>
   10ca4:	da000404 	addi	r8,sp,16
   10ca8:	003f6306 	br	10a38 <__alt_data_end+0xfc010a38>
   10cac:	d8802017 	ldw	r2,128(sp)
   10cb0:	10000426 	beq	r2,zero,10cc4 <___svfprintf_internal_r+0x394>
   10cb4:	d9402c17 	ldw	r5,176(sp)
   10cb8:	d9003917 	ldw	r4,228(sp)
   10cbc:	d9801e04 	addi	r6,sp,120
   10cc0:	00155000 	call	15500 <__ssprint_r>
   10cc4:	d8802c17 	ldw	r2,176(sp)
   10cc8:	10c0030b 	ldhu	r3,12(r2)
   10ccc:	d8802f17 	ldw	r2,188(sp)
   10cd0:	18c0100c 	andi	r3,r3,64
   10cd4:	1805f51e 	bne	r3,zero,124ac <___svfprintf_internal_r+0x1b7c>
   10cd8:	dfc04817 	ldw	ra,288(sp)
   10cdc:	df004717 	ldw	fp,284(sp)
   10ce0:	ddc04617 	ldw	r23,280(sp)
   10ce4:	dd804517 	ldw	r22,276(sp)
   10ce8:	dd404417 	ldw	r21,272(sp)
   10cec:	dd004317 	ldw	r20,268(sp)
   10cf0:	dcc04217 	ldw	r19,264(sp)
   10cf4:	dc804117 	ldw	r18,260(sp)
   10cf8:	dc404017 	ldw	r17,256(sp)
   10cfc:	dc003f17 	ldw	r16,252(sp)
   10d00:	dec04904 	addi	sp,sp,292
   10d04:	f800283a 	ret
   10d08:	d8802d17 	ldw	r2,180(sp)
   10d0c:	d9002d17 	ldw	r4,180(sp)
   10d10:	10800017 	ldw	r2,0(r2)
   10d14:	d8803115 	stw	r2,196(sp)
   10d18:	20800104 	addi	r2,r4,4
   10d1c:	d9003117 	ldw	r4,196(sp)
   10d20:	203fb916 	blt	r4,zero,10c08 <__alt_data_end+0xfc010c08>
   10d24:	d8802d15 	stw	r2,180(sp)
   10d28:	bc400007 	ldb	r17,0(r23)
   10d2c:	003f5406 	br	10a80 <__alt_data_end+0xfc010a80>
   10d30:	bc400007 	ldb	r17,0(r23)
   10d34:	bac00044 	addi	r11,r23,1
   10d38:	8a873926 	beq	r17,r10,12a20 <___svfprintf_internal_r+0x20f0>
   10d3c:	88bff404 	addi	r2,r17,-48
   10d40:	0009883a 	mov	r4,zero
   10d44:	30868836 	bltu	r6,r2,12768 <___svfprintf_internal_r+0x1e38>
   10d48:	5c400007 	ldb	r17,0(r11)
   10d4c:	210002a4 	muli	r4,r4,10
   10d50:	5dc00044 	addi	r23,r11,1
   10d54:	b817883a 	mov	r11,r23
   10d58:	2089883a 	add	r4,r4,r2
   10d5c:	88bff404 	addi	r2,r17,-48
   10d60:	30bff92e 	bgeu	r6,r2,10d48 <__alt_data_end+0xfc010d48>
   10d64:	2005d716 	blt	r4,zero,124c4 <___svfprintf_internal_r+0x1b94>
   10d68:	d9002915 	stw	r4,164(sp)
   10d6c:	003f4506 	br	10a84 <__alt_data_end+0xfc010a84>
   10d70:	b809883a 	mov	r4,r23
   10d74:	d8003115 	stw	zero,196(sp)
   10d78:	88bff404 	addi	r2,r17,-48
   10d7c:	0017883a 	mov	r11,zero
   10d80:	24400007 	ldb	r17,0(r4)
   10d84:	5ac002a4 	muli	r11,r11,10
   10d88:	bdc00044 	addi	r23,r23,1
   10d8c:	b809883a 	mov	r4,r23
   10d90:	12d7883a 	add	r11,r2,r11
   10d94:	88bff404 	addi	r2,r17,-48
   10d98:	30bff92e 	bgeu	r6,r2,10d80 <__alt_data_end+0xfc010d80>
   10d9c:	dac03115 	stw	r11,196(sp)
   10da0:	003f3806 	br	10a84 <__alt_data_end+0xfc010a84>
   10da4:	94802014 	ori	r18,r18,128
   10da8:	bc400007 	ldb	r17,0(r23)
   10dac:	003f3406 	br	10a80 <__alt_data_end+0xfc010a80>
   10db0:	18c03fcc 	andi	r3,r3,255
   10db4:	1807471e 	bne	r3,zero,12ad4 <___svfprintf_internal_r+0x21a4>
   10db8:	9080020c 	andi	r2,r18,8
   10dbc:	10047d26 	beq	r2,zero,11fb4 <___svfprintf_internal_r+0x1684>
   10dc0:	d8c02d17 	ldw	r3,180(sp)
   10dc4:	d9002d17 	ldw	r4,180(sp)
   10dc8:	d9402d17 	ldw	r5,180(sp)
   10dcc:	18c00017 	ldw	r3,0(r3)
   10dd0:	21000117 	ldw	r4,4(r4)
   10dd4:	29400204 	addi	r5,r5,8
   10dd8:	d8c03615 	stw	r3,216(sp)
   10ddc:	d9003715 	stw	r4,220(sp)
   10de0:	d9402d15 	stw	r5,180(sp)
   10de4:	d9003617 	ldw	r4,216(sp)
   10de8:	d9403717 	ldw	r5,220(sp)
   10dec:	da003e15 	stw	r8,248(sp)
   10df0:	04000044 	movi	r16,1
   10df4:	000e6b00 	call	e6b0 <__fpclassifyd>
   10df8:	da003e17 	ldw	r8,248(sp)
   10dfc:	14044b1e 	bne	r2,r16,11f2c <___svfprintf_internal_r+0x15fc>
   10e00:	d9003617 	ldw	r4,216(sp)
   10e04:	d9403717 	ldw	r5,220(sp)
   10e08:	000d883a 	mov	r6,zero
   10e0c:	000f883a 	mov	r7,zero
   10e10:	0018cc00 	call	18cc0 <__ledf2>
   10e14:	da003e17 	ldw	r8,248(sp)
   10e18:	1005f316 	blt	r2,zero,125e8 <___svfprintf_internal_r+0x1cb8>
   10e1c:	df002783 	ldbu	fp,158(sp)
   10e20:	008011c4 	movi	r2,71
   10e24:	1445590e 	bge	r2,r17,1238c <___svfprintf_internal_r+0x1a5c>
   10e28:	040000b4 	movhi	r16,2
   10e2c:	84153204 	addi	r16,r16,21704
   10e30:	00c000c4 	movi	r3,3
   10e34:	00bfdfc4 	movi	r2,-129
   10e38:	d8c02a15 	stw	r3,168(sp)
   10e3c:	90a4703a 	and	r18,r18,r2
   10e40:	d8c02e15 	stw	r3,184(sp)
   10e44:	d8002915 	stw	zero,164(sp)
   10e48:	d8003215 	stw	zero,200(sp)
   10e4c:	00006606 	br	10fe8 <___svfprintf_internal_r+0x6b8>
   10e50:	94800214 	ori	r18,r18,8
   10e54:	bc400007 	ldb	r17,0(r23)
   10e58:	003f0906 	br	10a80 <__alt_data_end+0xfc010a80>
   10e5c:	18c03fcc 	andi	r3,r3,255
   10e60:	1807181e 	bne	r3,zero,12ac4 <___svfprintf_internal_r+0x2194>
   10e64:	94800414 	ori	r18,r18,16
   10e68:	9080080c 	andi	r2,r18,32
   10e6c:	10039626 	beq	r2,zero,11cc8 <___svfprintf_internal_r+0x1398>
   10e70:	d9402d17 	ldw	r5,180(sp)
   10e74:	28800117 	ldw	r2,4(r5)
   10e78:	2d000017 	ldw	r20,0(r5)
   10e7c:	29400204 	addi	r5,r5,8
   10e80:	d9402d15 	stw	r5,180(sp)
   10e84:	102d883a 	mov	r22,r2
   10e88:	10039816 	blt	r2,zero,11cec <___svfprintf_internal_r+0x13bc>
   10e8c:	d9402917 	ldw	r5,164(sp)
   10e90:	df002783 	ldbu	fp,158(sp)
   10e94:	2803ab16 	blt	r5,zero,11d44 <___svfprintf_internal_r+0x1414>
   10e98:	00ffdfc4 	movi	r3,-129
   10e9c:	a584b03a 	or	r2,r20,r22
   10ea0:	90e4703a 	and	r18,r18,r3
   10ea4:	10014a26 	beq	r2,zero,113d0 <___svfprintf_internal_r+0xaa0>
   10ea8:	b0034b26 	beq	r22,zero,11bd8 <___svfprintf_internal_r+0x12a8>
   10eac:	dc402a15 	stw	r17,168(sp)
   10eb0:	dc001e04 	addi	r16,sp,120
   10eb4:	b023883a 	mov	r17,r22
   10eb8:	402d883a 	mov	r22,r8
   10ebc:	a009883a 	mov	r4,r20
   10ec0:	880b883a 	mov	r5,r17
   10ec4:	01800284 	movi	r6,10
   10ec8:	000f883a 	mov	r7,zero
   10ecc:	00170e00 	call	170e0 <__umoddi3>
   10ed0:	10800c04 	addi	r2,r2,48
   10ed4:	843fffc4 	addi	r16,r16,-1
   10ed8:	a009883a 	mov	r4,r20
   10edc:	880b883a 	mov	r5,r17
   10ee0:	80800005 	stb	r2,0(r16)
   10ee4:	01800284 	movi	r6,10
   10ee8:	000f883a 	mov	r7,zero
   10eec:	0016b680 	call	16b68 <__udivdi3>
   10ef0:	1029883a 	mov	r20,r2
   10ef4:	10c4b03a 	or	r2,r2,r3
   10ef8:	1823883a 	mov	r17,r3
   10efc:	103fef1e 	bne	r2,zero,10ebc <__alt_data_end+0xfc010ebc>
   10f00:	d8c02817 	ldw	r3,160(sp)
   10f04:	dc402a17 	ldw	r17,168(sp)
   10f08:	b011883a 	mov	r8,r22
   10f0c:	1c07c83a 	sub	r3,r3,r16
   10f10:	d8c02e15 	stw	r3,184(sp)
   10f14:	00002e06 	br	10fd0 <___svfprintf_internal_r+0x6a0>
   10f18:	18c03fcc 	andi	r3,r3,255
   10f1c:	1806e71e 	bne	r3,zero,12abc <___svfprintf_internal_r+0x218c>
   10f20:	94800414 	ori	r18,r18,16
   10f24:	9080080c 	andi	r2,r18,32
   10f28:	1002d426 	beq	r2,zero,11a7c <___svfprintf_internal_r+0x114c>
   10f2c:	d9402d17 	ldw	r5,180(sp)
   10f30:	d8c02917 	ldw	r3,164(sp)
   10f34:	d8002785 	stb	zero,158(sp)
   10f38:	28800204 	addi	r2,r5,8
   10f3c:	2d000017 	ldw	r20,0(r5)
   10f40:	2d800117 	ldw	r22,4(r5)
   10f44:	18041516 	blt	r3,zero,11f9c <___svfprintf_internal_r+0x166c>
   10f48:	013fdfc4 	movi	r4,-129
   10f4c:	a586b03a 	or	r3,r20,r22
   10f50:	d8802d15 	stw	r2,180(sp)
   10f54:	9124703a 	and	r18,r18,r4
   10f58:	1802d51e 	bne	r3,zero,11ab0 <___svfprintf_internal_r+0x1180>
   10f5c:	d9402917 	ldw	r5,164(sp)
   10f60:	0039883a 	mov	fp,zero
   10f64:	2806be26 	beq	r5,zero,12a60 <___svfprintf_internal_r+0x2130>
   10f68:	0029883a 	mov	r20,zero
   10f6c:	002d883a 	mov	r22,zero
   10f70:	dc001e04 	addi	r16,sp,120
   10f74:	a006d0fa 	srli	r3,r20,3
   10f78:	b008977a 	slli	r4,r22,29
   10f7c:	b02cd0fa 	srli	r22,r22,3
   10f80:	a50001cc 	andi	r20,r20,7
   10f84:	a0800c04 	addi	r2,r20,48
   10f88:	843fffc4 	addi	r16,r16,-1
   10f8c:	20e8b03a 	or	r20,r4,r3
   10f90:	80800005 	stb	r2,0(r16)
   10f94:	a586b03a 	or	r3,r20,r22
   10f98:	183ff61e 	bne	r3,zero,10f74 <__alt_data_end+0xfc010f74>
   10f9c:	90c0004c 	andi	r3,r18,1
   10fa0:	18013926 	beq	r3,zero,11488 <___svfprintf_internal_r+0xb58>
   10fa4:	10803fcc 	andi	r2,r2,255
   10fa8:	1080201c 	xori	r2,r2,128
   10fac:	10bfe004 	addi	r2,r2,-128
   10fb0:	00c00c04 	movi	r3,48
   10fb4:	10c13426 	beq	r2,r3,11488 <___svfprintf_internal_r+0xb58>
   10fb8:	80ffffc5 	stb	r3,-1(r16)
   10fbc:	d8c02817 	ldw	r3,160(sp)
   10fc0:	80bfffc4 	addi	r2,r16,-1
   10fc4:	1021883a 	mov	r16,r2
   10fc8:	1887c83a 	sub	r3,r3,r2
   10fcc:	d8c02e15 	stw	r3,184(sp)
   10fd0:	d8802e17 	ldw	r2,184(sp)
   10fd4:	d9002917 	ldw	r4,164(sp)
   10fd8:	1100010e 	bge	r2,r4,10fe0 <___svfprintf_internal_r+0x6b0>
   10fdc:	2005883a 	mov	r2,r4
   10fe0:	d8802a15 	stw	r2,168(sp)
   10fe4:	d8003215 	stw	zero,200(sp)
   10fe8:	e7003fcc 	andi	fp,fp,255
   10fec:	e700201c 	xori	fp,fp,128
   10ff0:	e73fe004 	addi	fp,fp,-128
   10ff4:	e0000326 	beq	fp,zero,11004 <___svfprintf_internal_r+0x6d4>
   10ff8:	d8c02a17 	ldw	r3,168(sp)
   10ffc:	18c00044 	addi	r3,r3,1
   11000:	d8c02a15 	stw	r3,168(sp)
   11004:	90c0008c 	andi	r3,r18,2
   11008:	d8c02b15 	stw	r3,172(sp)
   1100c:	18000326 	beq	r3,zero,1101c <___svfprintf_internal_r+0x6ec>
   11010:	d8c02a17 	ldw	r3,168(sp)
   11014:	18c00084 	addi	r3,r3,2
   11018:	d8c02a15 	stw	r3,168(sp)
   1101c:	90c0210c 	andi	r3,r18,132
   11020:	d8c03015 	stw	r3,192(sp)
   11024:	1801a11e 	bne	r3,zero,116ac <___svfprintf_internal_r+0xd7c>
   11028:	d9003117 	ldw	r4,196(sp)
   1102c:	d8c02a17 	ldw	r3,168(sp)
   11030:	20e9c83a 	sub	r20,r4,r3
   11034:	05019d0e 	bge	zero,r20,116ac <___svfprintf_internal_r+0xd7c>
   11038:	02400404 	movi	r9,16
   1103c:	d8c02017 	ldw	r3,128(sp)
   11040:	d8801f17 	ldw	r2,124(sp)
   11044:	4d051b0e 	bge	r9,r20,124b4 <___svfprintf_internal_r+0x1b84>
   11048:	014000b4 	movhi	r5,2
   1104c:	29566104 	addi	r5,r5,22916
   11050:	dc403c15 	stw	r17,240(sp)
   11054:	d9403515 	stw	r5,212(sp)
   11058:	a023883a 	mov	r17,r20
   1105c:	482d883a 	mov	r22,r9
   11060:	9029883a 	mov	r20,r18
   11064:	070001c4 	movi	fp,7
   11068:	8025883a 	mov	r18,r16
   1106c:	dc002c17 	ldw	r16,176(sp)
   11070:	00000306 	br	11080 <___svfprintf_internal_r+0x750>
   11074:	8c7ffc04 	addi	r17,r17,-16
   11078:	42000204 	addi	r8,r8,8
   1107c:	b440130e 	bge	r22,r17,110cc <___svfprintf_internal_r+0x79c>
   11080:	010000b4 	movhi	r4,2
   11084:	18c00404 	addi	r3,r3,16
   11088:	10800044 	addi	r2,r2,1
   1108c:	21166104 	addi	r4,r4,22916
   11090:	41000015 	stw	r4,0(r8)
   11094:	45800115 	stw	r22,4(r8)
   11098:	d8c02015 	stw	r3,128(sp)
   1109c:	d8801f15 	stw	r2,124(sp)
   110a0:	e0bff40e 	bge	fp,r2,11074 <__alt_data_end+0xfc011074>
   110a4:	d9801e04 	addi	r6,sp,120
   110a8:	800b883a 	mov	r5,r16
   110ac:	9809883a 	mov	r4,r19
   110b0:	00155000 	call	15500 <__ssprint_r>
   110b4:	103f031e 	bne	r2,zero,10cc4 <__alt_data_end+0xfc010cc4>
   110b8:	8c7ffc04 	addi	r17,r17,-16
   110bc:	d8c02017 	ldw	r3,128(sp)
   110c0:	d8801f17 	ldw	r2,124(sp)
   110c4:	da000404 	addi	r8,sp,16
   110c8:	b47fed16 	blt	r22,r17,11080 <__alt_data_end+0xfc011080>
   110cc:	9021883a 	mov	r16,r18
   110d0:	a025883a 	mov	r18,r20
   110d4:	8829883a 	mov	r20,r17
   110d8:	dc403c17 	ldw	r17,240(sp)
   110dc:	d9403517 	ldw	r5,212(sp)
   110e0:	a0c7883a 	add	r3,r20,r3
   110e4:	10800044 	addi	r2,r2,1
   110e8:	41400015 	stw	r5,0(r8)
   110ec:	45000115 	stw	r20,4(r8)
   110f0:	d8c02015 	stw	r3,128(sp)
   110f4:	d8801f15 	stw	r2,124(sp)
   110f8:	010001c4 	movi	r4,7
   110fc:	20829f16 	blt	r4,r2,11b7c <___svfprintf_internal_r+0x124c>
   11100:	df002787 	ldb	fp,158(sp)
   11104:	42000204 	addi	r8,r8,8
   11108:	e0000c26 	beq	fp,zero,1113c <___svfprintf_internal_r+0x80c>
   1110c:	d8801f17 	ldw	r2,124(sp)
   11110:	d9002784 	addi	r4,sp,158
   11114:	18c00044 	addi	r3,r3,1
   11118:	10800044 	addi	r2,r2,1
   1111c:	41000015 	stw	r4,0(r8)
   11120:	01000044 	movi	r4,1
   11124:	41000115 	stw	r4,4(r8)
   11128:	d8c02015 	stw	r3,128(sp)
   1112c:	d8801f15 	stw	r2,124(sp)
   11130:	010001c4 	movi	r4,7
   11134:	20823816 	blt	r4,r2,11a18 <___svfprintf_internal_r+0x10e8>
   11138:	42000204 	addi	r8,r8,8
   1113c:	d8802b17 	ldw	r2,172(sp)
   11140:	10000c26 	beq	r2,zero,11174 <___svfprintf_internal_r+0x844>
   11144:	d8801f17 	ldw	r2,124(sp)
   11148:	d9002704 	addi	r4,sp,156
   1114c:	18c00084 	addi	r3,r3,2
   11150:	10800044 	addi	r2,r2,1
   11154:	41000015 	stw	r4,0(r8)
   11158:	01000084 	movi	r4,2
   1115c:	41000115 	stw	r4,4(r8)
   11160:	d8c02015 	stw	r3,128(sp)
   11164:	d8801f15 	stw	r2,124(sp)
   11168:	010001c4 	movi	r4,7
   1116c:	20823216 	blt	r4,r2,11a38 <___svfprintf_internal_r+0x1108>
   11170:	42000204 	addi	r8,r8,8
   11174:	d9003017 	ldw	r4,192(sp)
   11178:	00802004 	movi	r2,128
   1117c:	20819726 	beq	r4,r2,117dc <___svfprintf_internal_r+0xeac>
   11180:	d9402917 	ldw	r5,164(sp)
   11184:	d8802e17 	ldw	r2,184(sp)
   11188:	28adc83a 	sub	r22,r5,r2
   1118c:	05802f0e 	bge	zero,r22,1124c <___svfprintf_internal_r+0x91c>
   11190:	07000404 	movi	fp,16
   11194:	d8801f17 	ldw	r2,124(sp)
   11198:	e583c00e 	bge	fp,r22,1209c <___svfprintf_internal_r+0x176c>
   1119c:	014000b4 	movhi	r5,2
   111a0:	29565d04 	addi	r5,r5,22900
   111a4:	dc402915 	stw	r17,164(sp)
   111a8:	d9402b15 	stw	r5,172(sp)
   111ac:	b023883a 	mov	r17,r22
   111b0:	050001c4 	movi	r20,7
   111b4:	902d883a 	mov	r22,r18
   111b8:	8025883a 	mov	r18,r16
   111bc:	dc002c17 	ldw	r16,176(sp)
   111c0:	00000306 	br	111d0 <___svfprintf_internal_r+0x8a0>
   111c4:	8c7ffc04 	addi	r17,r17,-16
   111c8:	42000204 	addi	r8,r8,8
   111cc:	e440110e 	bge	fp,r17,11214 <___svfprintf_internal_r+0x8e4>
   111d0:	18c00404 	addi	r3,r3,16
   111d4:	10800044 	addi	r2,r2,1
   111d8:	45400015 	stw	r21,0(r8)
   111dc:	47000115 	stw	fp,4(r8)
   111e0:	d8c02015 	stw	r3,128(sp)
   111e4:	d8801f15 	stw	r2,124(sp)
   111e8:	a0bff60e 	bge	r20,r2,111c4 <__alt_data_end+0xfc0111c4>
   111ec:	d9801e04 	addi	r6,sp,120
   111f0:	800b883a 	mov	r5,r16
   111f4:	9809883a 	mov	r4,r19
   111f8:	00155000 	call	15500 <__ssprint_r>
   111fc:	103eb11e 	bne	r2,zero,10cc4 <__alt_data_end+0xfc010cc4>
   11200:	8c7ffc04 	addi	r17,r17,-16
   11204:	d8c02017 	ldw	r3,128(sp)
   11208:	d8801f17 	ldw	r2,124(sp)
   1120c:	da000404 	addi	r8,sp,16
   11210:	e47fef16 	blt	fp,r17,111d0 <__alt_data_end+0xfc0111d0>
   11214:	9021883a 	mov	r16,r18
   11218:	b025883a 	mov	r18,r22
   1121c:	882d883a 	mov	r22,r17
   11220:	dc402917 	ldw	r17,164(sp)
   11224:	d9002b17 	ldw	r4,172(sp)
   11228:	1d87883a 	add	r3,r3,r22
   1122c:	10800044 	addi	r2,r2,1
   11230:	41000015 	stw	r4,0(r8)
   11234:	45800115 	stw	r22,4(r8)
   11238:	d8c02015 	stw	r3,128(sp)
   1123c:	d8801f15 	stw	r2,124(sp)
   11240:	010001c4 	movi	r4,7
   11244:	2081ec16 	blt	r4,r2,119f8 <___svfprintf_internal_r+0x10c8>
   11248:	42000204 	addi	r8,r8,8
   1124c:	9080400c 	andi	r2,r18,256
   11250:	1001181e 	bne	r2,zero,116b4 <___svfprintf_internal_r+0xd84>
   11254:	d9402e17 	ldw	r5,184(sp)
   11258:	d8801f17 	ldw	r2,124(sp)
   1125c:	44000015 	stw	r16,0(r8)
   11260:	1947883a 	add	r3,r3,r5
   11264:	10800044 	addi	r2,r2,1
   11268:	41400115 	stw	r5,4(r8)
   1126c:	d8c02015 	stw	r3,128(sp)
   11270:	d8801f15 	stw	r2,124(sp)
   11274:	010001c4 	movi	r4,7
   11278:	2081d116 	blt	r4,r2,119c0 <___svfprintf_internal_r+0x1090>
   1127c:	42000204 	addi	r8,r8,8
   11280:	9480010c 	andi	r18,r18,4
   11284:	90003226 	beq	r18,zero,11350 <___svfprintf_internal_r+0xa20>
   11288:	d9403117 	ldw	r5,196(sp)
   1128c:	d8802a17 	ldw	r2,168(sp)
   11290:	28a1c83a 	sub	r16,r5,r2
   11294:	04002e0e 	bge	zero,r16,11350 <___svfprintf_internal_r+0xa20>
   11298:	04400404 	movi	r17,16
   1129c:	d8801f17 	ldw	r2,124(sp)
   112a0:	8c04b90e 	bge	r17,r16,12588 <___svfprintf_internal_r+0x1c58>
   112a4:	014000b4 	movhi	r5,2
   112a8:	29566104 	addi	r5,r5,22916
   112ac:	d9403515 	stw	r5,212(sp)
   112b0:	048001c4 	movi	r18,7
   112b4:	dd002c17 	ldw	r20,176(sp)
   112b8:	00000306 	br	112c8 <___svfprintf_internal_r+0x998>
   112bc:	843ffc04 	addi	r16,r16,-16
   112c0:	42000204 	addi	r8,r8,8
   112c4:	8c00130e 	bge	r17,r16,11314 <___svfprintf_internal_r+0x9e4>
   112c8:	010000b4 	movhi	r4,2
   112cc:	18c00404 	addi	r3,r3,16
   112d0:	10800044 	addi	r2,r2,1
   112d4:	21166104 	addi	r4,r4,22916
   112d8:	41000015 	stw	r4,0(r8)
   112dc:	44400115 	stw	r17,4(r8)
   112e0:	d8c02015 	stw	r3,128(sp)
   112e4:	d8801f15 	stw	r2,124(sp)
   112e8:	90bff40e 	bge	r18,r2,112bc <__alt_data_end+0xfc0112bc>
   112ec:	d9801e04 	addi	r6,sp,120
   112f0:	a00b883a 	mov	r5,r20
   112f4:	9809883a 	mov	r4,r19
   112f8:	00155000 	call	15500 <__ssprint_r>
   112fc:	103e711e 	bne	r2,zero,10cc4 <__alt_data_end+0xfc010cc4>
   11300:	843ffc04 	addi	r16,r16,-16
   11304:	d8c02017 	ldw	r3,128(sp)
   11308:	d8801f17 	ldw	r2,124(sp)
   1130c:	da000404 	addi	r8,sp,16
   11310:	8c3fed16 	blt	r17,r16,112c8 <__alt_data_end+0xfc0112c8>
   11314:	d9403517 	ldw	r5,212(sp)
   11318:	1c07883a 	add	r3,r3,r16
   1131c:	10800044 	addi	r2,r2,1
   11320:	41400015 	stw	r5,0(r8)
   11324:	44000115 	stw	r16,4(r8)
   11328:	d8c02015 	stw	r3,128(sp)
   1132c:	d8801f15 	stw	r2,124(sp)
   11330:	010001c4 	movi	r4,7
   11334:	2080060e 	bge	r4,r2,11350 <___svfprintf_internal_r+0xa20>
   11338:	d9402c17 	ldw	r5,176(sp)
   1133c:	d9801e04 	addi	r6,sp,120
   11340:	9809883a 	mov	r4,r19
   11344:	00155000 	call	15500 <__ssprint_r>
   11348:	103e5e1e 	bne	r2,zero,10cc4 <__alt_data_end+0xfc010cc4>
   1134c:	d8c02017 	ldw	r3,128(sp)
   11350:	d8803117 	ldw	r2,196(sp)
   11354:	d9002a17 	ldw	r4,168(sp)
   11358:	1100010e 	bge	r2,r4,11360 <___svfprintf_internal_r+0xa30>
   1135c:	2005883a 	mov	r2,r4
   11360:	d9402f17 	ldw	r5,188(sp)
   11364:	288b883a 	add	r5,r5,r2
   11368:	d9402f15 	stw	r5,188(sp)
   1136c:	18019c1e 	bne	r3,zero,119e0 <___svfprintf_internal_r+0x10b0>
   11370:	b8800007 	ldb	r2,0(r23)
   11374:	d8001f15 	stw	zero,124(sp)
   11378:	da000404 	addi	r8,sp,16
   1137c:	103d991e 	bne	r2,zero,109e4 <__alt_data_end+0xfc0109e4>
   11380:	b821883a 	mov	r16,r23
   11384:	003daf06 	br	10a44 <__alt_data_end+0xfc010a44>
   11388:	18c03fcc 	andi	r3,r3,255
   1138c:	1805c71e 	bne	r3,zero,12aac <___svfprintf_internal_r+0x217c>
   11390:	94800414 	ori	r18,r18,16
   11394:	9080080c 	andi	r2,r18,32
   11398:	10020126 	beq	r2,zero,11ba0 <___svfprintf_internal_r+0x1270>
   1139c:	d8802d17 	ldw	r2,180(sp)
   113a0:	d9002917 	ldw	r4,164(sp)
   113a4:	d8002785 	stb	zero,158(sp)
   113a8:	10c00204 	addi	r3,r2,8
   113ac:	15000017 	ldw	r20,0(r2)
   113b0:	15800117 	ldw	r22,4(r2)
   113b4:	20038e16 	blt	r4,zero,121f0 <___svfprintf_internal_r+0x18c0>
   113b8:	013fdfc4 	movi	r4,-129
   113bc:	a584b03a 	or	r2,r20,r22
   113c0:	d8c02d15 	stw	r3,180(sp)
   113c4:	9124703a 	and	r18,r18,r4
   113c8:	0039883a 	mov	fp,zero
   113cc:	103eb61e 	bne	r2,zero,10ea8 <__alt_data_end+0xfc010ea8>
   113d0:	d8802917 	ldw	r2,164(sp)
   113d4:	1002c81e 	bne	r2,zero,11ef8 <___svfprintf_internal_r+0x15c8>
   113d8:	d8002915 	stw	zero,164(sp)
   113dc:	d8002e15 	stw	zero,184(sp)
   113e0:	dc001e04 	addi	r16,sp,120
   113e4:	003efa06 	br	10fd0 <__alt_data_end+0xfc010fd0>
   113e8:	18c03fcc 	andi	r3,r3,255
   113ec:	1805ad1e 	bne	r3,zero,12aa4 <___svfprintf_internal_r+0x2174>
   113f0:	014000b4 	movhi	r5,2
   113f4:	29553504 	addi	r5,r5,21716
   113f8:	d9403a15 	stw	r5,232(sp)
   113fc:	9080080c 	andi	r2,r18,32
   11400:	10006126 	beq	r2,zero,11588 <___svfprintf_internal_r+0xc58>
   11404:	d8802d17 	ldw	r2,180(sp)
   11408:	15000017 	ldw	r20,0(r2)
   1140c:	15800117 	ldw	r22,4(r2)
   11410:	10800204 	addi	r2,r2,8
   11414:	d8802d15 	stw	r2,180(sp)
   11418:	9080004c 	andi	r2,r18,1
   1141c:	10018e26 	beq	r2,zero,11a58 <___svfprintf_internal_r+0x1128>
   11420:	a584b03a 	or	r2,r20,r22
   11424:	10030926 	beq	r2,zero,1204c <___svfprintf_internal_r+0x171c>
   11428:	d8c02917 	ldw	r3,164(sp)
   1142c:	00800c04 	movi	r2,48
   11430:	d8802705 	stb	r2,156(sp)
   11434:	dc402745 	stb	r17,157(sp)
   11438:	d8002785 	stb	zero,158(sp)
   1143c:	90800094 	ori	r2,r18,2
   11440:	18048716 	blt	r3,zero,12660 <___svfprintf_internal_r+0x1d30>
   11444:	00bfdfc4 	movi	r2,-129
   11448:	90a4703a 	and	r18,r18,r2
   1144c:	94800094 	ori	r18,r18,2
   11450:	0039883a 	mov	fp,zero
   11454:	d9003a17 	ldw	r4,232(sp)
   11458:	dc001e04 	addi	r16,sp,120
   1145c:	a08003cc 	andi	r2,r20,15
   11460:	b006973a 	slli	r3,r22,28
   11464:	2085883a 	add	r2,r4,r2
   11468:	a028d13a 	srli	r20,r20,4
   1146c:	10800003 	ldbu	r2,0(r2)
   11470:	b02cd13a 	srli	r22,r22,4
   11474:	843fffc4 	addi	r16,r16,-1
   11478:	1d28b03a 	or	r20,r3,r20
   1147c:	80800005 	stb	r2,0(r16)
   11480:	a584b03a 	or	r2,r20,r22
   11484:	103ff51e 	bne	r2,zero,1145c <__alt_data_end+0xfc01145c>
   11488:	d8c02817 	ldw	r3,160(sp)
   1148c:	1c07c83a 	sub	r3,r3,r16
   11490:	d8c02e15 	stw	r3,184(sp)
   11494:	003ece06 	br	10fd0 <__alt_data_end+0xfc010fd0>
   11498:	d8c02d17 	ldw	r3,180(sp)
   1149c:	d9002d17 	ldw	r4,180(sp)
   114a0:	d8002785 	stb	zero,158(sp)
   114a4:	18800017 	ldw	r2,0(r3)
   114a8:	21000104 	addi	r4,r4,4
   114ac:	00c00044 	movi	r3,1
   114b0:	d8c02a15 	stw	r3,168(sp)
   114b4:	d8801405 	stb	r2,80(sp)
   114b8:	d9002d15 	stw	r4,180(sp)
   114bc:	d8c02e15 	stw	r3,184(sp)
   114c0:	d8002915 	stw	zero,164(sp)
   114c4:	d8003215 	stw	zero,200(sp)
   114c8:	dc001404 	addi	r16,sp,80
   114cc:	0039883a 	mov	fp,zero
   114d0:	003ecc06 	br	11004 <__alt_data_end+0xfc011004>
   114d4:	18c03fcc 	andi	r3,r3,255
   114d8:	183e9226 	beq	r3,zero,10f24 <__alt_data_end+0xfc010f24>
   114dc:	d9c02785 	stb	r7,158(sp)
   114e0:	003e9006 	br	10f24 <__alt_data_end+0xfc010f24>
   114e4:	00c00044 	movi	r3,1
   114e8:	01c00ac4 	movi	r7,43
   114ec:	bc400007 	ldb	r17,0(r23)
   114f0:	003d6306 	br	10a80 <__alt_data_end+0xfc010a80>
   114f4:	94800814 	ori	r18,r18,32
   114f8:	bc400007 	ldb	r17,0(r23)
   114fc:	003d6006 	br	10a80 <__alt_data_end+0xfc010a80>
   11500:	d8c02d17 	ldw	r3,180(sp)
   11504:	d8002785 	stb	zero,158(sp)
   11508:	1c000017 	ldw	r16,0(r3)
   1150c:	1d000104 	addi	r20,r3,4
   11510:	80040f26 	beq	r16,zero,12550 <___svfprintf_internal_r+0x1c20>
   11514:	d9002917 	ldw	r4,164(sp)
   11518:	2003dc16 	blt	r4,zero,1248c <___svfprintf_internal_r+0x1b5c>
   1151c:	200d883a 	mov	r6,r4
   11520:	000b883a 	mov	r5,zero
   11524:	8009883a 	mov	r4,r16
   11528:	da003e15 	stw	r8,248(sp)
   1152c:	00058540 	call	5854 <memchr>
   11530:	da003e17 	ldw	r8,248(sp)
   11534:	10045826 	beq	r2,zero,12698 <___svfprintf_internal_r+0x1d68>
   11538:	1405c83a 	sub	r2,r2,r16
   1153c:	d8802e15 	stw	r2,184(sp)
   11540:	1003d816 	blt	r2,zero,124a4 <___svfprintf_internal_r+0x1b74>
   11544:	df002783 	ldbu	fp,158(sp)
   11548:	d8802a15 	stw	r2,168(sp)
   1154c:	dd002d15 	stw	r20,180(sp)
   11550:	d8002915 	stw	zero,164(sp)
   11554:	d8003215 	stw	zero,200(sp)
   11558:	003ea306 	br	10fe8 <__alt_data_end+0xfc010fe8>
   1155c:	18c03fcc 	andi	r3,r3,255
   11560:	183f8c26 	beq	r3,zero,11394 <__alt_data_end+0xfc011394>
   11564:	d9c02785 	stb	r7,158(sp)
   11568:	003f8a06 	br	11394 <__alt_data_end+0xfc011394>
   1156c:	18c03fcc 	andi	r3,r3,255
   11570:	1805631e 	bne	r3,zero,12b00 <___svfprintf_internal_r+0x21d0>
   11574:	014000b4 	movhi	r5,2
   11578:	29553a04 	addi	r5,r5,21736
   1157c:	d9403a15 	stw	r5,232(sp)
   11580:	9080080c 	andi	r2,r18,32
   11584:	103f9f1e 	bne	r2,zero,11404 <__alt_data_end+0xfc011404>
   11588:	9080040c 	andi	r2,r18,16
   1158c:	10029c26 	beq	r2,zero,12000 <___svfprintf_internal_r+0x16d0>
   11590:	d8c02d17 	ldw	r3,180(sp)
   11594:	002d883a 	mov	r22,zero
   11598:	1d000017 	ldw	r20,0(r3)
   1159c:	18c00104 	addi	r3,r3,4
   115a0:	d8c02d15 	stw	r3,180(sp)
   115a4:	003f9c06 	br	11418 <__alt_data_end+0xfc011418>
   115a8:	94800054 	ori	r18,r18,1
   115ac:	bc400007 	ldb	r17,0(r23)
   115b0:	003d3306 	br	10a80 <__alt_data_end+0xfc010a80>
   115b4:	38803fcc 	andi	r2,r7,255
   115b8:	1080201c 	xori	r2,r2,128
   115bc:	10bfe004 	addi	r2,r2,-128
   115c0:	1002971e 	bne	r2,zero,12020 <___svfprintf_internal_r+0x16f0>
   115c4:	00c00044 	movi	r3,1
   115c8:	01c00804 	movi	r7,32
   115cc:	bc400007 	ldb	r17,0(r23)
   115d0:	003d2b06 	br	10a80 <__alt_data_end+0xfc010a80>
   115d4:	18c03fcc 	andi	r3,r3,255
   115d8:	183e2326 	beq	r3,zero,10e68 <__alt_data_end+0xfc010e68>
   115dc:	d9c02785 	stb	r7,158(sp)
   115e0:	003e2106 	br	10e68 <__alt_data_end+0xfc010e68>
   115e4:	bc400007 	ldb	r17,0(r23)
   115e8:	8a430426 	beq	r17,r9,121fc <___svfprintf_internal_r+0x18cc>
   115ec:	94800414 	ori	r18,r18,16
   115f0:	003d2306 	br	10a80 <__alt_data_end+0xfc010a80>
   115f4:	18c03fcc 	andi	r3,r3,255
   115f8:	18053f1e 	bne	r3,zero,12af8 <___svfprintf_internal_r+0x21c8>
   115fc:	9080080c 	andi	r2,r18,32
   11600:	10028926 	beq	r2,zero,12028 <___svfprintf_internal_r+0x16f8>
   11604:	d9402d17 	ldw	r5,180(sp)
   11608:	d9002f17 	ldw	r4,188(sp)
   1160c:	28800017 	ldw	r2,0(r5)
   11610:	2007d7fa 	srai	r3,r4,31
   11614:	29400104 	addi	r5,r5,4
   11618:	d9402d15 	stw	r5,180(sp)
   1161c:	11000015 	stw	r4,0(r2)
   11620:	10c00115 	stw	r3,4(r2)
   11624:	003ced06 	br	109dc <__alt_data_end+0xfc0109dc>
   11628:	94801014 	ori	r18,r18,64
   1162c:	bc400007 	ldb	r17,0(r23)
   11630:	003d1306 	br	10a80 <__alt_data_end+0xfc010a80>
   11634:	010000b4 	movhi	r4,2
   11638:	21153a04 	addi	r4,r4,21736
   1163c:	0039883a 	mov	fp,zero
   11640:	d9003a15 	stw	r4,232(sp)
   11644:	04401e04 	movi	r17,120
   11648:	003f8206 	br	11454 <__alt_data_end+0xfc011454>
   1164c:	18c03fcc 	andi	r3,r3,255
   11650:	1805221e 	bne	r3,zero,12adc <___svfprintf_internal_r+0x21ac>
   11654:	883d9526 	beq	r17,zero,10cac <__alt_data_end+0xfc010cac>
   11658:	00c00044 	movi	r3,1
   1165c:	d8c02a15 	stw	r3,168(sp)
   11660:	dc401405 	stb	r17,80(sp)
   11664:	d8002785 	stb	zero,158(sp)
   11668:	003f9406 	br	114bc <__alt_data_end+0xfc0114bc>
   1166c:	010000b4 	movhi	r4,2
   11670:	21153a04 	addi	r4,r4,21736
   11674:	d9003a15 	stw	r4,232(sp)
   11678:	d8c02d15 	stw	r3,180(sp)
   1167c:	1025883a 	mov	r18,r2
   11680:	04401e04 	movi	r17,120
   11684:	a584b03a 	or	r2,r20,r22
   11688:	1000fa1e 	bne	r2,zero,11a74 <___svfprintf_internal_r+0x1144>
   1168c:	0039883a 	mov	fp,zero
   11690:	00800084 	movi	r2,2
   11694:	10803fcc 	andi	r2,r2,255
   11698:	00c00044 	movi	r3,1
   1169c:	10c21626 	beq	r2,r3,11ef8 <___svfprintf_internal_r+0x15c8>
   116a0:	00c00084 	movi	r3,2
   116a4:	10fe301e 	bne	r2,r3,10f68 <__alt_data_end+0xfc010f68>
   116a8:	003d7606 	br	10c84 <__alt_data_end+0xfc010c84>
   116ac:	d8c02017 	ldw	r3,128(sp)
   116b0:	003e9506 	br	11108 <__alt_data_end+0xfc011108>
   116b4:	00801944 	movi	r2,101
   116b8:	14407c0e 	bge	r2,r17,118ac <___svfprintf_internal_r+0xf7c>
   116bc:	d9003617 	ldw	r4,216(sp)
   116c0:	d9403717 	ldw	r5,220(sp)
   116c4:	000d883a 	mov	r6,zero
   116c8:	000f883a 	mov	r7,zero
   116cc:	d8c03d15 	stw	r3,244(sp)
   116d0:	da003e15 	stw	r8,248(sp)
   116d4:	0018b5c0 	call	18b5c <__eqdf2>
   116d8:	d8c03d17 	ldw	r3,244(sp)
   116dc:	da003e17 	ldw	r8,248(sp)
   116e0:	1000f51e 	bne	r2,zero,11ab8 <___svfprintf_internal_r+0x1188>
   116e4:	d8801f17 	ldw	r2,124(sp)
   116e8:	010000b4 	movhi	r4,2
   116ec:	21154104 	addi	r4,r4,21764
   116f0:	18c00044 	addi	r3,r3,1
   116f4:	10800044 	addi	r2,r2,1
   116f8:	41000015 	stw	r4,0(r8)
   116fc:	01000044 	movi	r4,1
   11700:	41000115 	stw	r4,4(r8)
   11704:	d8c02015 	stw	r3,128(sp)
   11708:	d8801f15 	stw	r2,124(sp)
   1170c:	010001c4 	movi	r4,7
   11710:	20826616 	blt	r4,r2,120ac <___svfprintf_internal_r+0x177c>
   11714:	42000204 	addi	r8,r8,8
   11718:	d8802617 	ldw	r2,152(sp)
   1171c:	d9403317 	ldw	r5,204(sp)
   11720:	11400216 	blt	r2,r5,1172c <___svfprintf_internal_r+0xdfc>
   11724:	9080004c 	andi	r2,r18,1
   11728:	103ed526 	beq	r2,zero,11280 <__alt_data_end+0xfc011280>
   1172c:	d8803817 	ldw	r2,224(sp)
   11730:	d9003417 	ldw	r4,208(sp)
   11734:	d9403817 	ldw	r5,224(sp)
   11738:	1887883a 	add	r3,r3,r2
   1173c:	d8801f17 	ldw	r2,124(sp)
   11740:	41000015 	stw	r4,0(r8)
   11744:	41400115 	stw	r5,4(r8)
   11748:	10800044 	addi	r2,r2,1
   1174c:	d8c02015 	stw	r3,128(sp)
   11750:	d8801f15 	stw	r2,124(sp)
   11754:	010001c4 	movi	r4,7
   11758:	2082af16 	blt	r4,r2,12218 <___svfprintf_internal_r+0x18e8>
   1175c:	42000204 	addi	r8,r8,8
   11760:	d8803317 	ldw	r2,204(sp)
   11764:	143fffc4 	addi	r16,r2,-1
   11768:	043ec50e 	bge	zero,r16,11280 <__alt_data_end+0xfc011280>
   1176c:	04400404 	movi	r17,16
   11770:	d8801f17 	ldw	r2,124(sp)
   11774:	8c00860e 	bge	r17,r16,11990 <___svfprintf_internal_r+0x1060>
   11778:	014000b4 	movhi	r5,2
   1177c:	29565d04 	addi	r5,r5,22900
   11780:	d9402b15 	stw	r5,172(sp)
   11784:	058001c4 	movi	r22,7
   11788:	dd002c17 	ldw	r20,176(sp)
   1178c:	00000306 	br	1179c <___svfprintf_internal_r+0xe6c>
   11790:	42000204 	addi	r8,r8,8
   11794:	843ffc04 	addi	r16,r16,-16
   11798:	8c00800e 	bge	r17,r16,1199c <___svfprintf_internal_r+0x106c>
   1179c:	18c00404 	addi	r3,r3,16
   117a0:	10800044 	addi	r2,r2,1
   117a4:	45400015 	stw	r21,0(r8)
   117a8:	44400115 	stw	r17,4(r8)
   117ac:	d8c02015 	stw	r3,128(sp)
   117b0:	d8801f15 	stw	r2,124(sp)
   117b4:	b0bff60e 	bge	r22,r2,11790 <__alt_data_end+0xfc011790>
   117b8:	d9801e04 	addi	r6,sp,120
   117bc:	a00b883a 	mov	r5,r20
   117c0:	9809883a 	mov	r4,r19
   117c4:	00155000 	call	15500 <__ssprint_r>
   117c8:	103d3e1e 	bne	r2,zero,10cc4 <__alt_data_end+0xfc010cc4>
   117cc:	d8c02017 	ldw	r3,128(sp)
   117d0:	d8801f17 	ldw	r2,124(sp)
   117d4:	da000404 	addi	r8,sp,16
   117d8:	003fee06 	br	11794 <__alt_data_end+0xfc011794>
   117dc:	d9403117 	ldw	r5,196(sp)
   117e0:	d8802a17 	ldw	r2,168(sp)
   117e4:	28adc83a 	sub	r22,r5,r2
   117e8:	05be650e 	bge	zero,r22,11180 <__alt_data_end+0xfc011180>
   117ec:	07000404 	movi	fp,16
   117f0:	d8801f17 	ldw	r2,124(sp)
   117f4:	e583a20e 	bge	fp,r22,12680 <___svfprintf_internal_r+0x1d50>
   117f8:	014000b4 	movhi	r5,2
   117fc:	29565d04 	addi	r5,r5,22900
   11800:	dc403015 	stw	r17,192(sp)
   11804:	d9402b15 	stw	r5,172(sp)
   11808:	b023883a 	mov	r17,r22
   1180c:	050001c4 	movi	r20,7
   11810:	902d883a 	mov	r22,r18
   11814:	8025883a 	mov	r18,r16
   11818:	dc002c17 	ldw	r16,176(sp)
   1181c:	00000306 	br	1182c <___svfprintf_internal_r+0xefc>
   11820:	8c7ffc04 	addi	r17,r17,-16
   11824:	42000204 	addi	r8,r8,8
   11828:	e440110e 	bge	fp,r17,11870 <___svfprintf_internal_r+0xf40>
   1182c:	18c00404 	addi	r3,r3,16
   11830:	10800044 	addi	r2,r2,1
   11834:	45400015 	stw	r21,0(r8)
   11838:	47000115 	stw	fp,4(r8)
   1183c:	d8c02015 	stw	r3,128(sp)
   11840:	d8801f15 	stw	r2,124(sp)
   11844:	a0bff60e 	bge	r20,r2,11820 <__alt_data_end+0xfc011820>
   11848:	d9801e04 	addi	r6,sp,120
   1184c:	800b883a 	mov	r5,r16
   11850:	9809883a 	mov	r4,r19
   11854:	00155000 	call	15500 <__ssprint_r>
   11858:	103d1a1e 	bne	r2,zero,10cc4 <__alt_data_end+0xfc010cc4>
   1185c:	8c7ffc04 	addi	r17,r17,-16
   11860:	d8c02017 	ldw	r3,128(sp)
   11864:	d8801f17 	ldw	r2,124(sp)
   11868:	da000404 	addi	r8,sp,16
   1186c:	e47fef16 	blt	fp,r17,1182c <__alt_data_end+0xfc01182c>
   11870:	9021883a 	mov	r16,r18
   11874:	b025883a 	mov	r18,r22
   11878:	882d883a 	mov	r22,r17
   1187c:	dc403017 	ldw	r17,192(sp)
   11880:	d9002b17 	ldw	r4,172(sp)
   11884:	1d87883a 	add	r3,r3,r22
   11888:	10800044 	addi	r2,r2,1
   1188c:	41000015 	stw	r4,0(r8)
   11890:	45800115 	stw	r22,4(r8)
   11894:	d8c02015 	stw	r3,128(sp)
   11898:	d8801f15 	stw	r2,124(sp)
   1189c:	010001c4 	movi	r4,7
   118a0:	20819a16 	blt	r4,r2,11f0c <___svfprintf_internal_r+0x15dc>
   118a4:	42000204 	addi	r8,r8,8
   118a8:	003e3506 	br	11180 <__alt_data_end+0xfc011180>
   118ac:	d9403317 	ldw	r5,204(sp)
   118b0:	00800044 	movi	r2,1
   118b4:	18c00044 	addi	r3,r3,1
   118b8:	1141710e 	bge	r2,r5,11e80 <___svfprintf_internal_r+0x1550>
   118bc:	dc401f17 	ldw	r17,124(sp)
   118c0:	00800044 	movi	r2,1
   118c4:	40800115 	stw	r2,4(r8)
   118c8:	8c400044 	addi	r17,r17,1
   118cc:	44000015 	stw	r16,0(r8)
   118d0:	d8c02015 	stw	r3,128(sp)
   118d4:	dc401f15 	stw	r17,124(sp)
   118d8:	008001c4 	movi	r2,7
   118dc:	14417416 	blt	r2,r17,11eb0 <___svfprintf_internal_r+0x1580>
   118e0:	42000204 	addi	r8,r8,8
   118e4:	d8803817 	ldw	r2,224(sp)
   118e8:	d9003417 	ldw	r4,208(sp)
   118ec:	8c400044 	addi	r17,r17,1
   118f0:	10c7883a 	add	r3,r2,r3
   118f4:	40800115 	stw	r2,4(r8)
   118f8:	41000015 	stw	r4,0(r8)
   118fc:	d8c02015 	stw	r3,128(sp)
   11900:	dc401f15 	stw	r17,124(sp)
   11904:	008001c4 	movi	r2,7
   11908:	14417216 	blt	r2,r17,11ed4 <___svfprintf_internal_r+0x15a4>
   1190c:	45800204 	addi	r22,r8,8
   11910:	d9003617 	ldw	r4,216(sp)
   11914:	d9403717 	ldw	r5,220(sp)
   11918:	000d883a 	mov	r6,zero
   1191c:	000f883a 	mov	r7,zero
   11920:	d8c03d15 	stw	r3,244(sp)
   11924:	0018b5c0 	call	18b5c <__eqdf2>
   11928:	d8c03d17 	ldw	r3,244(sp)
   1192c:	1000b326 	beq	r2,zero,11bfc <___svfprintf_internal_r+0x12cc>
   11930:	d9403317 	ldw	r5,204(sp)
   11934:	84000044 	addi	r16,r16,1
   11938:	8c400044 	addi	r17,r17,1
   1193c:	28bfffc4 	addi	r2,r5,-1
   11940:	1887883a 	add	r3,r3,r2
   11944:	b0800115 	stw	r2,4(r22)
   11948:	b4000015 	stw	r16,0(r22)
   1194c:	d8c02015 	stw	r3,128(sp)
   11950:	dc401f15 	stw	r17,124(sp)
   11954:	008001c4 	movi	r2,7
   11958:	1440d216 	blt	r2,r17,11ca4 <___svfprintf_internal_r+0x1374>
   1195c:	b5800204 	addi	r22,r22,8
   11960:	d9003b17 	ldw	r4,236(sp)
   11964:	df0022c4 	addi	fp,sp,139
   11968:	8c400044 	addi	r17,r17,1
   1196c:	20c7883a 	add	r3,r4,r3
   11970:	b7000015 	stw	fp,0(r22)
   11974:	b1000115 	stw	r4,4(r22)
   11978:	d8c02015 	stw	r3,128(sp)
   1197c:	dc401f15 	stw	r17,124(sp)
   11980:	008001c4 	movi	r2,7
   11984:	14400e16 	blt	r2,r17,119c0 <___svfprintf_internal_r+0x1090>
   11988:	b2000204 	addi	r8,r22,8
   1198c:	003e3c06 	br	11280 <__alt_data_end+0xfc011280>
   11990:	010000b4 	movhi	r4,2
   11994:	21165d04 	addi	r4,r4,22900
   11998:	d9002b15 	stw	r4,172(sp)
   1199c:	d9002b17 	ldw	r4,172(sp)
   119a0:	1c07883a 	add	r3,r3,r16
   119a4:	44000115 	stw	r16,4(r8)
   119a8:	41000015 	stw	r4,0(r8)
   119ac:	10800044 	addi	r2,r2,1
   119b0:	d8c02015 	stw	r3,128(sp)
   119b4:	d8801f15 	stw	r2,124(sp)
   119b8:	010001c4 	movi	r4,7
   119bc:	20be2f0e 	bge	r4,r2,1127c <__alt_data_end+0xfc01127c>
   119c0:	d9402c17 	ldw	r5,176(sp)
   119c4:	d9801e04 	addi	r6,sp,120
   119c8:	9809883a 	mov	r4,r19
   119cc:	00155000 	call	15500 <__ssprint_r>
   119d0:	103cbc1e 	bne	r2,zero,10cc4 <__alt_data_end+0xfc010cc4>
   119d4:	d8c02017 	ldw	r3,128(sp)
   119d8:	da000404 	addi	r8,sp,16
   119dc:	003e2806 	br	11280 <__alt_data_end+0xfc011280>
   119e0:	d9402c17 	ldw	r5,176(sp)
   119e4:	d9801e04 	addi	r6,sp,120
   119e8:	9809883a 	mov	r4,r19
   119ec:	00155000 	call	15500 <__ssprint_r>
   119f0:	103e5f26 	beq	r2,zero,11370 <__alt_data_end+0xfc011370>
   119f4:	003cb306 	br	10cc4 <__alt_data_end+0xfc010cc4>
   119f8:	d9402c17 	ldw	r5,176(sp)
   119fc:	d9801e04 	addi	r6,sp,120
   11a00:	9809883a 	mov	r4,r19
   11a04:	00155000 	call	15500 <__ssprint_r>
   11a08:	103cae1e 	bne	r2,zero,10cc4 <__alt_data_end+0xfc010cc4>
   11a0c:	d8c02017 	ldw	r3,128(sp)
   11a10:	da000404 	addi	r8,sp,16
   11a14:	003e0d06 	br	1124c <__alt_data_end+0xfc01124c>
   11a18:	d9402c17 	ldw	r5,176(sp)
   11a1c:	d9801e04 	addi	r6,sp,120
   11a20:	9809883a 	mov	r4,r19
   11a24:	00155000 	call	15500 <__ssprint_r>
   11a28:	103ca61e 	bne	r2,zero,10cc4 <__alt_data_end+0xfc010cc4>
   11a2c:	d8c02017 	ldw	r3,128(sp)
   11a30:	da000404 	addi	r8,sp,16
   11a34:	003dc106 	br	1113c <__alt_data_end+0xfc01113c>
   11a38:	d9402c17 	ldw	r5,176(sp)
   11a3c:	d9801e04 	addi	r6,sp,120
   11a40:	9809883a 	mov	r4,r19
   11a44:	00155000 	call	15500 <__ssprint_r>
   11a48:	103c9e1e 	bne	r2,zero,10cc4 <__alt_data_end+0xfc010cc4>
   11a4c:	d8c02017 	ldw	r3,128(sp)
   11a50:	da000404 	addi	r8,sp,16
   11a54:	003dc706 	br	11174 <__alt_data_end+0xfc011174>
   11a58:	d8802917 	ldw	r2,164(sp)
   11a5c:	d8002785 	stb	zero,158(sp)
   11a60:	103f0816 	blt	r2,zero,11684 <__alt_data_end+0xfc011684>
   11a64:	00ffdfc4 	movi	r3,-129
   11a68:	a584b03a 	or	r2,r20,r22
   11a6c:	90e4703a 	and	r18,r18,r3
   11a70:	103c8126 	beq	r2,zero,10c78 <__alt_data_end+0xfc010c78>
   11a74:	0039883a 	mov	fp,zero
   11a78:	003e7606 	br	11454 <__alt_data_end+0xfc011454>
   11a7c:	9080040c 	andi	r2,r18,16
   11a80:	10013d26 	beq	r2,zero,11f78 <___svfprintf_internal_r+0x1648>
   11a84:	d9002d17 	ldw	r4,180(sp)
   11a88:	d9402917 	ldw	r5,164(sp)
   11a8c:	d8002785 	stb	zero,158(sp)
   11a90:	20800104 	addi	r2,r4,4
   11a94:	25000017 	ldw	r20,0(r4)
   11a98:	002d883a 	mov	r22,zero
   11a9c:	28013f16 	blt	r5,zero,11f9c <___svfprintf_internal_r+0x166c>
   11aa0:	00ffdfc4 	movi	r3,-129
   11aa4:	d8802d15 	stw	r2,180(sp)
   11aa8:	90e4703a 	and	r18,r18,r3
   11aac:	a03d2b26 	beq	r20,zero,10f5c <__alt_data_end+0xfc010f5c>
   11ab0:	0039883a 	mov	fp,zero
   11ab4:	003d2e06 	br	10f70 <__alt_data_end+0xfc010f70>
   11ab8:	dc402617 	ldw	r17,152(sp)
   11abc:	0441830e 	bge	zero,r17,120cc <___svfprintf_internal_r+0x179c>
   11ac0:	dc403217 	ldw	r17,200(sp)
   11ac4:	d8803317 	ldw	r2,204(sp)
   11ac8:	1440010e 	bge	r2,r17,11ad0 <___svfprintf_internal_r+0x11a0>
   11acc:	1023883a 	mov	r17,r2
   11ad0:	04400a0e 	bge	zero,r17,11afc <___svfprintf_internal_r+0x11cc>
   11ad4:	d8801f17 	ldw	r2,124(sp)
   11ad8:	1c47883a 	add	r3,r3,r17
   11adc:	44000015 	stw	r16,0(r8)
   11ae0:	10800044 	addi	r2,r2,1
   11ae4:	44400115 	stw	r17,4(r8)
   11ae8:	d8c02015 	stw	r3,128(sp)
   11aec:	d8801f15 	stw	r2,124(sp)
   11af0:	010001c4 	movi	r4,7
   11af4:	20827516 	blt	r4,r2,124cc <___svfprintf_internal_r+0x1b9c>
   11af8:	42000204 	addi	r8,r8,8
   11afc:	88027b16 	blt	r17,zero,124ec <___svfprintf_internal_r+0x1bbc>
   11b00:	d9003217 	ldw	r4,200(sp)
   11b04:	2463c83a 	sub	r17,r4,r17
   11b08:	0440990e 	bge	zero,r17,11d70 <___svfprintf_internal_r+0x1440>
   11b0c:	05800404 	movi	r22,16
   11b10:	d8801f17 	ldw	r2,124(sp)
   11b14:	b441530e 	bge	r22,r17,12064 <___svfprintf_internal_r+0x1734>
   11b18:	010000b4 	movhi	r4,2
   11b1c:	21165d04 	addi	r4,r4,22900
   11b20:	d9002b15 	stw	r4,172(sp)
   11b24:	070001c4 	movi	fp,7
   11b28:	dd002c17 	ldw	r20,176(sp)
   11b2c:	00000306 	br	11b3c <___svfprintf_internal_r+0x120c>
   11b30:	42000204 	addi	r8,r8,8
   11b34:	8c7ffc04 	addi	r17,r17,-16
   11b38:	b4414d0e 	bge	r22,r17,12070 <___svfprintf_internal_r+0x1740>
   11b3c:	18c00404 	addi	r3,r3,16
   11b40:	10800044 	addi	r2,r2,1
   11b44:	45400015 	stw	r21,0(r8)
   11b48:	45800115 	stw	r22,4(r8)
   11b4c:	d8c02015 	stw	r3,128(sp)
   11b50:	d8801f15 	stw	r2,124(sp)
   11b54:	e0bff60e 	bge	fp,r2,11b30 <__alt_data_end+0xfc011b30>
   11b58:	d9801e04 	addi	r6,sp,120
   11b5c:	a00b883a 	mov	r5,r20
   11b60:	9809883a 	mov	r4,r19
   11b64:	00155000 	call	15500 <__ssprint_r>
   11b68:	103c561e 	bne	r2,zero,10cc4 <__alt_data_end+0xfc010cc4>
   11b6c:	d8c02017 	ldw	r3,128(sp)
   11b70:	d8801f17 	ldw	r2,124(sp)
   11b74:	da000404 	addi	r8,sp,16
   11b78:	003fee06 	br	11b34 <__alt_data_end+0xfc011b34>
   11b7c:	d9402c17 	ldw	r5,176(sp)
   11b80:	d9801e04 	addi	r6,sp,120
   11b84:	9809883a 	mov	r4,r19
   11b88:	00155000 	call	15500 <__ssprint_r>
   11b8c:	103c4d1e 	bne	r2,zero,10cc4 <__alt_data_end+0xfc010cc4>
   11b90:	d8c02017 	ldw	r3,128(sp)
   11b94:	df002787 	ldb	fp,158(sp)
   11b98:	da000404 	addi	r8,sp,16
   11b9c:	003d5a06 	br	11108 <__alt_data_end+0xfc011108>
   11ba0:	9080040c 	andi	r2,r18,16
   11ba4:	10005c26 	beq	r2,zero,11d18 <___svfprintf_internal_r+0x13e8>
   11ba8:	d9402d17 	ldw	r5,180(sp)
   11bac:	d8c02917 	ldw	r3,164(sp)
   11bb0:	d8002785 	stb	zero,158(sp)
   11bb4:	28800104 	addi	r2,r5,4
   11bb8:	2d000017 	ldw	r20,0(r5)
   11bbc:	002d883a 	mov	r22,zero
   11bc0:	18005e16 	blt	r3,zero,11d3c <___svfprintf_internal_r+0x140c>
   11bc4:	00ffdfc4 	movi	r3,-129
   11bc8:	d8802d15 	stw	r2,180(sp)
   11bcc:	90e4703a 	and	r18,r18,r3
   11bd0:	0039883a 	mov	fp,zero
   11bd4:	a03dfe26 	beq	r20,zero,113d0 <__alt_data_end+0xfc0113d0>
   11bd8:	00800244 	movi	r2,9
   11bdc:	153cb336 	bltu	r2,r20,10eac <__alt_data_end+0xfc010eac>
   11be0:	a5000c04 	addi	r20,r20,48
   11be4:	dc001dc4 	addi	r16,sp,119
   11be8:	dd001dc5 	stb	r20,119(sp)
   11bec:	d8c02817 	ldw	r3,160(sp)
   11bf0:	1c07c83a 	sub	r3,r3,r16
   11bf4:	d8c02e15 	stw	r3,184(sp)
   11bf8:	003cf506 	br	10fd0 <__alt_data_end+0xfc010fd0>
   11bfc:	d8803317 	ldw	r2,204(sp)
   11c00:	143fffc4 	addi	r16,r2,-1
   11c04:	043f560e 	bge	zero,r16,11960 <__alt_data_end+0xfc011960>
   11c08:	07000404 	movi	fp,16
   11c0c:	e403530e 	bge	fp,r16,1295c <___svfprintf_internal_r+0x202c>
   11c10:	014000b4 	movhi	r5,2
   11c14:	29565d04 	addi	r5,r5,22900
   11c18:	d9402b15 	stw	r5,172(sp)
   11c1c:	01c001c4 	movi	r7,7
   11c20:	dd002c17 	ldw	r20,176(sp)
   11c24:	00000306 	br	11c34 <___svfprintf_internal_r+0x1304>
   11c28:	843ffc04 	addi	r16,r16,-16
   11c2c:	b5800204 	addi	r22,r22,8
   11c30:	e400130e 	bge	fp,r16,11c80 <___svfprintf_internal_r+0x1350>
   11c34:	18c00404 	addi	r3,r3,16
   11c38:	8c400044 	addi	r17,r17,1
   11c3c:	b5400015 	stw	r21,0(r22)
   11c40:	b7000115 	stw	fp,4(r22)
   11c44:	d8c02015 	stw	r3,128(sp)
   11c48:	dc401f15 	stw	r17,124(sp)
   11c4c:	3c7ff60e 	bge	r7,r17,11c28 <__alt_data_end+0xfc011c28>
   11c50:	d9801e04 	addi	r6,sp,120
   11c54:	a00b883a 	mov	r5,r20
   11c58:	9809883a 	mov	r4,r19
   11c5c:	d9c03d15 	stw	r7,244(sp)
   11c60:	00155000 	call	15500 <__ssprint_r>
   11c64:	d9c03d17 	ldw	r7,244(sp)
   11c68:	103c161e 	bne	r2,zero,10cc4 <__alt_data_end+0xfc010cc4>
   11c6c:	843ffc04 	addi	r16,r16,-16
   11c70:	d8c02017 	ldw	r3,128(sp)
   11c74:	dc401f17 	ldw	r17,124(sp)
   11c78:	dd800404 	addi	r22,sp,16
   11c7c:	e43fed16 	blt	fp,r16,11c34 <__alt_data_end+0xfc011c34>
   11c80:	d8802b17 	ldw	r2,172(sp)
   11c84:	1c07883a 	add	r3,r3,r16
   11c88:	8c400044 	addi	r17,r17,1
   11c8c:	b0800015 	stw	r2,0(r22)
   11c90:	b4000115 	stw	r16,4(r22)
   11c94:	d8c02015 	stw	r3,128(sp)
   11c98:	dc401f15 	stw	r17,124(sp)
   11c9c:	008001c4 	movi	r2,7
   11ca0:	147f2e0e 	bge	r2,r17,1195c <__alt_data_end+0xfc01195c>
   11ca4:	d9402c17 	ldw	r5,176(sp)
   11ca8:	d9801e04 	addi	r6,sp,120
   11cac:	9809883a 	mov	r4,r19
   11cb0:	00155000 	call	15500 <__ssprint_r>
   11cb4:	103c031e 	bne	r2,zero,10cc4 <__alt_data_end+0xfc010cc4>
   11cb8:	d8c02017 	ldw	r3,128(sp)
   11cbc:	dc401f17 	ldw	r17,124(sp)
   11cc0:	dd800404 	addi	r22,sp,16
   11cc4:	003f2606 	br	11960 <__alt_data_end+0xfc011960>
   11cc8:	9080040c 	andi	r2,r18,16
   11ccc:	1000c326 	beq	r2,zero,11fdc <___svfprintf_internal_r+0x16ac>
   11cd0:	d8802d17 	ldw	r2,180(sp)
   11cd4:	15000017 	ldw	r20,0(r2)
   11cd8:	10800104 	addi	r2,r2,4
   11cdc:	d8802d15 	stw	r2,180(sp)
   11ce0:	a02dd7fa 	srai	r22,r20,31
   11ce4:	b005883a 	mov	r2,r22
   11ce8:	103c680e 	bge	r2,zero,10e8c <__alt_data_end+0xfc010e8c>
   11cec:	0529c83a 	sub	r20,zero,r20
   11cf0:	a004c03a 	cmpne	r2,r20,zero
   11cf4:	05adc83a 	sub	r22,zero,r22
   11cf8:	b0adc83a 	sub	r22,r22,r2
   11cfc:	d8802917 	ldw	r2,164(sp)
   11d00:	07000b44 	movi	fp,45
   11d04:	df002785 	stb	fp,158(sp)
   11d08:	10022e16 	blt	r2,zero,125c4 <___svfprintf_internal_r+0x1c94>
   11d0c:	00bfdfc4 	movi	r2,-129
   11d10:	90a4703a 	and	r18,r18,r2
   11d14:	003c6406 	br	10ea8 <__alt_data_end+0xfc010ea8>
   11d18:	9080100c 	andi	r2,r18,64
   11d1c:	d8002785 	stb	zero,158(sp)
   11d20:	10012526 	beq	r2,zero,121b8 <___svfprintf_internal_r+0x1888>
   11d24:	d9002d17 	ldw	r4,180(sp)
   11d28:	d9402917 	ldw	r5,164(sp)
   11d2c:	002d883a 	mov	r22,zero
   11d30:	20800104 	addi	r2,r4,4
   11d34:	2500000b 	ldhu	r20,0(r4)
   11d38:	283fa20e 	bge	r5,zero,11bc4 <__alt_data_end+0xfc011bc4>
   11d3c:	d8802d15 	stw	r2,180(sp)
   11d40:	0039883a 	mov	fp,zero
   11d44:	a584b03a 	or	r2,r20,r22
   11d48:	103c571e 	bne	r2,zero,10ea8 <__alt_data_end+0xfc010ea8>
   11d4c:	00800044 	movi	r2,1
   11d50:	003e5006 	br	11694 <__alt_data_end+0xfc011694>
   11d54:	d9402c17 	ldw	r5,176(sp)
   11d58:	d9801e04 	addi	r6,sp,120
   11d5c:	9809883a 	mov	r4,r19
   11d60:	00155000 	call	15500 <__ssprint_r>
   11d64:	103bd71e 	bne	r2,zero,10cc4 <__alt_data_end+0xfc010cc4>
   11d68:	d8c02017 	ldw	r3,128(sp)
   11d6c:	da000404 	addi	r8,sp,16
   11d70:	d9003217 	ldw	r4,200(sp)
   11d74:	d8802617 	ldw	r2,152(sp)
   11d78:	d9403317 	ldw	r5,204(sp)
   11d7c:	8123883a 	add	r17,r16,r4
   11d80:	11400216 	blt	r2,r5,11d8c <___svfprintf_internal_r+0x145c>
   11d84:	9100004c 	andi	r4,r18,1
   11d88:	20000d26 	beq	r4,zero,11dc0 <___svfprintf_internal_r+0x1490>
   11d8c:	d9003817 	ldw	r4,224(sp)
   11d90:	d9403417 	ldw	r5,208(sp)
   11d94:	1907883a 	add	r3,r3,r4
   11d98:	d9001f17 	ldw	r4,124(sp)
   11d9c:	41400015 	stw	r5,0(r8)
   11da0:	d9403817 	ldw	r5,224(sp)
   11da4:	21000044 	addi	r4,r4,1
   11da8:	d8c02015 	stw	r3,128(sp)
   11dac:	41400115 	stw	r5,4(r8)
   11db0:	d9001f15 	stw	r4,124(sp)
   11db4:	014001c4 	movi	r5,7
   11db8:	2901dc16 	blt	r5,r4,1252c <___svfprintf_internal_r+0x1bfc>
   11dbc:	42000204 	addi	r8,r8,8
   11dc0:	d9003317 	ldw	r4,204(sp)
   11dc4:	8121883a 	add	r16,r16,r4
   11dc8:	2085c83a 	sub	r2,r4,r2
   11dcc:	8461c83a 	sub	r16,r16,r17
   11dd0:	1400010e 	bge	r2,r16,11dd8 <___svfprintf_internal_r+0x14a8>
   11dd4:	1021883a 	mov	r16,r2
   11dd8:	04000a0e 	bge	zero,r16,11e04 <___svfprintf_internal_r+0x14d4>
   11ddc:	d9001f17 	ldw	r4,124(sp)
   11de0:	1c07883a 	add	r3,r3,r16
   11de4:	44400015 	stw	r17,0(r8)
   11de8:	21000044 	addi	r4,r4,1
   11dec:	44000115 	stw	r16,4(r8)
   11df0:	d8c02015 	stw	r3,128(sp)
   11df4:	d9001f15 	stw	r4,124(sp)
   11df8:	014001c4 	movi	r5,7
   11dfc:	2901e616 	blt	r5,r4,12598 <___svfprintf_internal_r+0x1c68>
   11e00:	42000204 	addi	r8,r8,8
   11e04:	8001f616 	blt	r16,zero,125e0 <___svfprintf_internal_r+0x1cb0>
   11e08:	1421c83a 	sub	r16,r2,r16
   11e0c:	043d1c0e 	bge	zero,r16,11280 <__alt_data_end+0xfc011280>
   11e10:	04400404 	movi	r17,16
   11e14:	d8801f17 	ldw	r2,124(sp)
   11e18:	8c3edd0e 	bge	r17,r16,11990 <__alt_data_end+0xfc011990>
   11e1c:	014000b4 	movhi	r5,2
   11e20:	29565d04 	addi	r5,r5,22900
   11e24:	d9402b15 	stw	r5,172(sp)
   11e28:	058001c4 	movi	r22,7
   11e2c:	dd002c17 	ldw	r20,176(sp)
   11e30:	00000306 	br	11e40 <___svfprintf_internal_r+0x1510>
   11e34:	42000204 	addi	r8,r8,8
   11e38:	843ffc04 	addi	r16,r16,-16
   11e3c:	8c3ed70e 	bge	r17,r16,1199c <__alt_data_end+0xfc01199c>
   11e40:	18c00404 	addi	r3,r3,16
   11e44:	10800044 	addi	r2,r2,1
   11e48:	45400015 	stw	r21,0(r8)
   11e4c:	44400115 	stw	r17,4(r8)
   11e50:	d8c02015 	stw	r3,128(sp)
   11e54:	d8801f15 	stw	r2,124(sp)
   11e58:	b0bff60e 	bge	r22,r2,11e34 <__alt_data_end+0xfc011e34>
   11e5c:	d9801e04 	addi	r6,sp,120
   11e60:	a00b883a 	mov	r5,r20
   11e64:	9809883a 	mov	r4,r19
   11e68:	00155000 	call	15500 <__ssprint_r>
   11e6c:	103b951e 	bne	r2,zero,10cc4 <__alt_data_end+0xfc010cc4>
   11e70:	d8c02017 	ldw	r3,128(sp)
   11e74:	d8801f17 	ldw	r2,124(sp)
   11e78:	da000404 	addi	r8,sp,16
   11e7c:	003fee06 	br	11e38 <__alt_data_end+0xfc011e38>
   11e80:	9088703a 	and	r4,r18,r2
   11e84:	203e8d1e 	bne	r4,zero,118bc <__alt_data_end+0xfc0118bc>
   11e88:	dc401f17 	ldw	r17,124(sp)
   11e8c:	40800115 	stw	r2,4(r8)
   11e90:	44000015 	stw	r16,0(r8)
   11e94:	8c400044 	addi	r17,r17,1
   11e98:	d8c02015 	stw	r3,128(sp)
   11e9c:	dc401f15 	stw	r17,124(sp)
   11ea0:	008001c4 	movi	r2,7
   11ea4:	147f7f16 	blt	r2,r17,11ca4 <__alt_data_end+0xfc011ca4>
   11ea8:	45800204 	addi	r22,r8,8
   11eac:	003eac06 	br	11960 <__alt_data_end+0xfc011960>
   11eb0:	d9402c17 	ldw	r5,176(sp)
   11eb4:	d9801e04 	addi	r6,sp,120
   11eb8:	9809883a 	mov	r4,r19
   11ebc:	00155000 	call	15500 <__ssprint_r>
   11ec0:	103b801e 	bne	r2,zero,10cc4 <__alt_data_end+0xfc010cc4>
   11ec4:	d8c02017 	ldw	r3,128(sp)
   11ec8:	dc401f17 	ldw	r17,124(sp)
   11ecc:	da000404 	addi	r8,sp,16
   11ed0:	003e8406 	br	118e4 <__alt_data_end+0xfc0118e4>
   11ed4:	d9402c17 	ldw	r5,176(sp)
   11ed8:	d9801e04 	addi	r6,sp,120
   11edc:	9809883a 	mov	r4,r19
   11ee0:	00155000 	call	15500 <__ssprint_r>
   11ee4:	103b771e 	bne	r2,zero,10cc4 <__alt_data_end+0xfc010cc4>
   11ee8:	d8c02017 	ldw	r3,128(sp)
   11eec:	dc401f17 	ldw	r17,124(sp)
   11ef0:	dd800404 	addi	r22,sp,16
   11ef4:	003e8606 	br	11910 <__alt_data_end+0xfc011910>
   11ef8:	0029883a 	mov	r20,zero
   11efc:	a5000c04 	addi	r20,r20,48
   11f00:	dc001dc4 	addi	r16,sp,119
   11f04:	dd001dc5 	stb	r20,119(sp)
   11f08:	003f3806 	br	11bec <__alt_data_end+0xfc011bec>
   11f0c:	d9402c17 	ldw	r5,176(sp)
   11f10:	d9801e04 	addi	r6,sp,120
   11f14:	9809883a 	mov	r4,r19
   11f18:	00155000 	call	15500 <__ssprint_r>
   11f1c:	103b691e 	bne	r2,zero,10cc4 <__alt_data_end+0xfc010cc4>
   11f20:	d8c02017 	ldw	r3,128(sp)
   11f24:	da000404 	addi	r8,sp,16
   11f28:	003c9506 	br	11180 <__alt_data_end+0xfc011180>
   11f2c:	d9003617 	ldw	r4,216(sp)
   11f30:	d9403717 	ldw	r5,220(sp)
   11f34:	da003e15 	stw	r8,248(sp)
   11f38:	000e6b00 	call	e6b0 <__fpclassifyd>
   11f3c:	da003e17 	ldw	r8,248(sp)
   11f40:	1000bd1e 	bne	r2,zero,12238 <___svfprintf_internal_r+0x1908>
   11f44:	008011c4 	movi	r2,71
   11f48:	14411e0e 	bge	r2,r17,123c4 <___svfprintf_internal_r+0x1a94>
   11f4c:	040000b4 	movhi	r16,2
   11f50:	84153404 	addi	r16,r16,21712
   11f54:	00c000c4 	movi	r3,3
   11f58:	00bfdfc4 	movi	r2,-129
   11f5c:	d8c02a15 	stw	r3,168(sp)
   11f60:	90a4703a 	and	r18,r18,r2
   11f64:	df002783 	ldbu	fp,158(sp)
   11f68:	d8c02e15 	stw	r3,184(sp)
   11f6c:	d8002915 	stw	zero,164(sp)
   11f70:	d8003215 	stw	zero,200(sp)
   11f74:	003c1c06 	br	10fe8 <__alt_data_end+0xfc010fe8>
   11f78:	9080100c 	andi	r2,r18,64
   11f7c:	d8002785 	stb	zero,158(sp)
   11f80:	10009426 	beq	r2,zero,121d4 <___svfprintf_internal_r+0x18a4>
   11f84:	d8c02d17 	ldw	r3,180(sp)
   11f88:	d9002917 	ldw	r4,164(sp)
   11f8c:	002d883a 	mov	r22,zero
   11f90:	18800104 	addi	r2,r3,4
   11f94:	1d00000b 	ldhu	r20,0(r3)
   11f98:	203ec10e 	bge	r4,zero,11aa0 <__alt_data_end+0xfc011aa0>
   11f9c:	a586b03a 	or	r3,r20,r22
   11fa0:	d8802d15 	stw	r2,180(sp)
   11fa4:	183ec21e 	bne	r3,zero,11ab0 <__alt_data_end+0xfc011ab0>
   11fa8:	0039883a 	mov	fp,zero
   11fac:	0005883a 	mov	r2,zero
   11fb0:	003db806 	br	11694 <__alt_data_end+0xfc011694>
   11fb4:	d8802d17 	ldw	r2,180(sp)
   11fb8:	d8c02d17 	ldw	r3,180(sp)
   11fbc:	d9002d17 	ldw	r4,180(sp)
   11fc0:	10800017 	ldw	r2,0(r2)
   11fc4:	18c00117 	ldw	r3,4(r3)
   11fc8:	21000204 	addi	r4,r4,8
   11fcc:	d8803615 	stw	r2,216(sp)
   11fd0:	d8c03715 	stw	r3,220(sp)
   11fd4:	d9002d15 	stw	r4,180(sp)
   11fd8:	003b8206 	br	10de4 <__alt_data_end+0xfc010de4>
   11fdc:	9080100c 	andi	r2,r18,64
   11fe0:	10010726 	beq	r2,zero,12400 <___svfprintf_internal_r+0x1ad0>
   11fe4:	d8c02d17 	ldw	r3,180(sp)
   11fe8:	1d00000f 	ldh	r20,0(r3)
   11fec:	18c00104 	addi	r3,r3,4
   11ff0:	d8c02d15 	stw	r3,180(sp)
   11ff4:	a02dd7fa 	srai	r22,r20,31
   11ff8:	b005883a 	mov	r2,r22
   11ffc:	003ba206 	br	10e88 <__alt_data_end+0xfc010e88>
   12000:	9080100c 	andi	r2,r18,64
   12004:	10010526 	beq	r2,zero,1241c <___svfprintf_internal_r+0x1aec>
   12008:	d9002d17 	ldw	r4,180(sp)
   1200c:	002d883a 	mov	r22,zero
   12010:	2500000b 	ldhu	r20,0(r4)
   12014:	21000104 	addi	r4,r4,4
   12018:	d9002d15 	stw	r4,180(sp)
   1201c:	003cfe06 	br	11418 <__alt_data_end+0xfc011418>
   12020:	bc400007 	ldb	r17,0(r23)
   12024:	003a9606 	br	10a80 <__alt_data_end+0xfc010a80>
   12028:	9080040c 	andi	r2,r18,16
   1202c:	10010126 	beq	r2,zero,12434 <___svfprintf_internal_r+0x1b04>
   12030:	d9402d17 	ldw	r5,180(sp)
   12034:	d8c02f17 	ldw	r3,188(sp)
   12038:	28800017 	ldw	r2,0(r5)
   1203c:	29400104 	addi	r5,r5,4
   12040:	d9402d15 	stw	r5,180(sp)
   12044:	10c00015 	stw	r3,0(r2)
   12048:	003a6406 	br	109dc <__alt_data_end+0xfc0109dc>
   1204c:	d9002917 	ldw	r4,164(sp)
   12050:	d8002785 	stb	zero,158(sp)
   12054:	203d8d16 	blt	r4,zero,1168c <__alt_data_end+0xfc01168c>
   12058:	00bfdfc4 	movi	r2,-129
   1205c:	90a4703a 	and	r18,r18,r2
   12060:	003b0506 	br	10c78 <__alt_data_end+0xfc010c78>
   12064:	014000b4 	movhi	r5,2
   12068:	29565d04 	addi	r5,r5,22900
   1206c:	d9402b15 	stw	r5,172(sp)
   12070:	d9402b17 	ldw	r5,172(sp)
   12074:	1c47883a 	add	r3,r3,r17
   12078:	10800044 	addi	r2,r2,1
   1207c:	41400015 	stw	r5,0(r8)
   12080:	44400115 	stw	r17,4(r8)
   12084:	d8c02015 	stw	r3,128(sp)
   12088:	d8801f15 	stw	r2,124(sp)
   1208c:	010001c4 	movi	r4,7
   12090:	20bf3016 	blt	r4,r2,11d54 <__alt_data_end+0xfc011d54>
   12094:	42000204 	addi	r8,r8,8
   12098:	003f3506 	br	11d70 <__alt_data_end+0xfc011d70>
   1209c:	010000b4 	movhi	r4,2
   120a0:	21165d04 	addi	r4,r4,22900
   120a4:	d9002b15 	stw	r4,172(sp)
   120a8:	003c5e06 	br	11224 <__alt_data_end+0xfc011224>
   120ac:	d9402c17 	ldw	r5,176(sp)
   120b0:	d9801e04 	addi	r6,sp,120
   120b4:	9809883a 	mov	r4,r19
   120b8:	00155000 	call	15500 <__ssprint_r>
   120bc:	103b011e 	bne	r2,zero,10cc4 <__alt_data_end+0xfc010cc4>
   120c0:	d8c02017 	ldw	r3,128(sp)
   120c4:	da000404 	addi	r8,sp,16
   120c8:	003d9306 	br	11718 <__alt_data_end+0xfc011718>
   120cc:	d8801f17 	ldw	r2,124(sp)
   120d0:	014000b4 	movhi	r5,2
   120d4:	01000044 	movi	r4,1
   120d8:	18c00044 	addi	r3,r3,1
   120dc:	10800044 	addi	r2,r2,1
   120e0:	29554104 	addi	r5,r5,21764
   120e4:	41000115 	stw	r4,4(r8)
   120e8:	41400015 	stw	r5,0(r8)
   120ec:	d8c02015 	stw	r3,128(sp)
   120f0:	d8801f15 	stw	r2,124(sp)
   120f4:	010001c4 	movi	r4,7
   120f8:	2080b516 	blt	r4,r2,123d0 <___svfprintf_internal_r+0x1aa0>
   120fc:	42000204 	addi	r8,r8,8
   12100:	8800041e 	bne	r17,zero,12114 <___svfprintf_internal_r+0x17e4>
   12104:	d8803317 	ldw	r2,204(sp)
   12108:	1000021e 	bne	r2,zero,12114 <___svfprintf_internal_r+0x17e4>
   1210c:	9080004c 	andi	r2,r18,1
   12110:	103c5b26 	beq	r2,zero,11280 <__alt_data_end+0xfc011280>
   12114:	d9003817 	ldw	r4,224(sp)
   12118:	d8801f17 	ldw	r2,124(sp)
   1211c:	d9403417 	ldw	r5,208(sp)
   12120:	20c7883a 	add	r3,r4,r3
   12124:	10800044 	addi	r2,r2,1
   12128:	41000115 	stw	r4,4(r8)
   1212c:	41400015 	stw	r5,0(r8)
   12130:	d8c02015 	stw	r3,128(sp)
   12134:	d8801f15 	stw	r2,124(sp)
   12138:	010001c4 	movi	r4,7
   1213c:	20818016 	blt	r4,r2,12740 <___svfprintf_internal_r+0x1e10>
   12140:	42000204 	addi	r8,r8,8
   12144:	0463c83a 	sub	r17,zero,r17
   12148:	0440cb0e 	bge	zero,r17,12478 <___svfprintf_internal_r+0x1b48>
   1214c:	05800404 	movi	r22,16
   12150:	b440e80e 	bge	r22,r17,124f4 <___svfprintf_internal_r+0x1bc4>
   12154:	014000b4 	movhi	r5,2
   12158:	29565d04 	addi	r5,r5,22900
   1215c:	d9402b15 	stw	r5,172(sp)
   12160:	070001c4 	movi	fp,7
   12164:	dd002c17 	ldw	r20,176(sp)
   12168:	00000306 	br	12178 <___svfprintf_internal_r+0x1848>
   1216c:	42000204 	addi	r8,r8,8
   12170:	8c7ffc04 	addi	r17,r17,-16
   12174:	b440e20e 	bge	r22,r17,12500 <___svfprintf_internal_r+0x1bd0>
   12178:	18c00404 	addi	r3,r3,16
   1217c:	10800044 	addi	r2,r2,1
   12180:	45400015 	stw	r21,0(r8)
   12184:	45800115 	stw	r22,4(r8)
   12188:	d8c02015 	stw	r3,128(sp)
   1218c:	d8801f15 	stw	r2,124(sp)
   12190:	e0bff60e 	bge	fp,r2,1216c <__alt_data_end+0xfc01216c>
   12194:	d9801e04 	addi	r6,sp,120
   12198:	a00b883a 	mov	r5,r20
   1219c:	9809883a 	mov	r4,r19
   121a0:	00155000 	call	15500 <__ssprint_r>
   121a4:	103ac71e 	bne	r2,zero,10cc4 <__alt_data_end+0xfc010cc4>
   121a8:	d8c02017 	ldw	r3,128(sp)
   121ac:	d8801f17 	ldw	r2,124(sp)
   121b0:	da000404 	addi	r8,sp,16
   121b4:	003fee06 	br	12170 <__alt_data_end+0xfc012170>
   121b8:	d8c02d17 	ldw	r3,180(sp)
   121bc:	d9002917 	ldw	r4,164(sp)
   121c0:	002d883a 	mov	r22,zero
   121c4:	18800104 	addi	r2,r3,4
   121c8:	1d000017 	ldw	r20,0(r3)
   121cc:	203e7d0e 	bge	r4,zero,11bc4 <__alt_data_end+0xfc011bc4>
   121d0:	003eda06 	br	11d3c <__alt_data_end+0xfc011d3c>
   121d4:	d9402d17 	ldw	r5,180(sp)
   121d8:	d8c02917 	ldw	r3,164(sp)
   121dc:	002d883a 	mov	r22,zero
   121e0:	28800104 	addi	r2,r5,4
   121e4:	2d000017 	ldw	r20,0(r5)
   121e8:	183e2d0e 	bge	r3,zero,11aa0 <__alt_data_end+0xfc011aa0>
   121ec:	003f6b06 	br	11f9c <__alt_data_end+0xfc011f9c>
   121f0:	d8c02d15 	stw	r3,180(sp)
   121f4:	0039883a 	mov	fp,zero
   121f8:	003ed206 	br	11d44 <__alt_data_end+0xfc011d44>
   121fc:	bc400043 	ldbu	r17,1(r23)
   12200:	94800814 	ori	r18,r18,32
   12204:	bdc00044 	addi	r23,r23,1
   12208:	8c403fcc 	andi	r17,r17,255
   1220c:	8c40201c 	xori	r17,r17,128
   12210:	8c7fe004 	addi	r17,r17,-128
   12214:	003a1a06 	br	10a80 <__alt_data_end+0xfc010a80>
   12218:	d9402c17 	ldw	r5,176(sp)
   1221c:	d9801e04 	addi	r6,sp,120
   12220:	9809883a 	mov	r4,r19
   12224:	00155000 	call	15500 <__ssprint_r>
   12228:	103aa61e 	bne	r2,zero,10cc4 <__alt_data_end+0xfc010cc4>
   1222c:	d8c02017 	ldw	r3,128(sp)
   12230:	da000404 	addi	r8,sp,16
   12234:	003d4a06 	br	11760 <__alt_data_end+0xfc011760>
   12238:	d9002917 	ldw	r4,164(sp)
   1223c:	05bff7c4 	movi	r22,-33
   12240:	00bfffc4 	movi	r2,-1
   12244:	8dac703a 	and	r22,r17,r22
   12248:	20806a26 	beq	r4,r2,123f4 <___svfprintf_internal_r+0x1ac4>
   1224c:	008011c4 	movi	r2,71
   12250:	b0813726 	beq	r22,r2,12730 <___svfprintf_internal_r+0x1e00>
   12254:	d9003717 	ldw	r4,220(sp)
   12258:	90c04014 	ori	r3,r18,256
   1225c:	d8c02b15 	stw	r3,172(sp)
   12260:	20015d16 	blt	r4,zero,127d8 <___svfprintf_internal_r+0x1ea8>
   12264:	dd003717 	ldw	r20,220(sp)
   12268:	d8002a05 	stb	zero,168(sp)
   1226c:	00801984 	movi	r2,102
   12270:	88814026 	beq	r17,r2,12774 <___svfprintf_internal_r+0x1e44>
   12274:	00801184 	movi	r2,70
   12278:	88817126 	beq	r17,r2,12840 <___svfprintf_internal_r+0x1f10>
   1227c:	00801144 	movi	r2,69
   12280:	b0816226 	beq	r22,r2,1280c <___svfprintf_internal_r+0x1edc>
   12284:	d8c02917 	ldw	r3,164(sp)
   12288:	d8802104 	addi	r2,sp,132
   1228c:	d8800315 	stw	r2,12(sp)
   12290:	d9403617 	ldw	r5,216(sp)
   12294:	d8802504 	addi	r2,sp,148
   12298:	d8800215 	stw	r2,8(sp)
   1229c:	d8802604 	addi	r2,sp,152
   122a0:	d8c00015 	stw	r3,0(sp)
   122a4:	d8800115 	stw	r2,4(sp)
   122a8:	01c00084 	movi	r7,2
   122ac:	a00d883a 	mov	r6,r20
   122b0:	9809883a 	mov	r4,r19
   122b4:	d8c03d15 	stw	r3,244(sp)
   122b8:	da003e15 	stw	r8,248(sp)
   122bc:	000a8c00 	call	a8c0 <_dtoa_r>
   122c0:	1021883a 	mov	r16,r2
   122c4:	008019c4 	movi	r2,103
   122c8:	d8c03d17 	ldw	r3,244(sp)
   122cc:	da003e17 	ldw	r8,248(sp)
   122d0:	8880e726 	beq	r17,r2,12670 <___svfprintf_internal_r+0x1d40>
   122d4:	008011c4 	movi	r2,71
   122d8:	8880d426 	beq	r17,r2,1262c <___svfprintf_internal_r+0x1cfc>
   122dc:	80f9883a 	add	fp,r16,r3
   122e0:	d9003617 	ldw	r4,216(sp)
   122e4:	000d883a 	mov	r6,zero
   122e8:	000f883a 	mov	r7,zero
   122ec:	a00b883a 	mov	r5,r20
   122f0:	da003e15 	stw	r8,248(sp)
   122f4:	0018b5c0 	call	18b5c <__eqdf2>
   122f8:	da003e17 	ldw	r8,248(sp)
   122fc:	1000e426 	beq	r2,zero,12690 <___svfprintf_internal_r+0x1d60>
   12300:	d8802117 	ldw	r2,132(sp)
   12304:	1700062e 	bgeu	r2,fp,12320 <___svfprintf_internal_r+0x19f0>
   12308:	01000c04 	movi	r4,48
   1230c:	10c00044 	addi	r3,r2,1
   12310:	d8c02115 	stw	r3,132(sp)
   12314:	11000005 	stb	r4,0(r2)
   12318:	d8802117 	ldw	r2,132(sp)
   1231c:	173ffb36 	bltu	r2,fp,1230c <__alt_data_end+0xfc01230c>
   12320:	1405c83a 	sub	r2,r2,r16
   12324:	d8803315 	stw	r2,204(sp)
   12328:	008011c4 	movi	r2,71
   1232c:	b080c526 	beq	r22,r2,12644 <___svfprintf_internal_r+0x1d14>
   12330:	00801944 	movi	r2,101
   12334:	1441d90e 	bge	r2,r17,12a9c <___svfprintf_internal_r+0x216c>
   12338:	d8c02617 	ldw	r3,152(sp)
   1233c:	00801984 	movi	r2,102
   12340:	d8c03215 	stw	r3,200(sp)
   12344:	88813426 	beq	r17,r2,12818 <___svfprintf_internal_r+0x1ee8>
   12348:	d8c03217 	ldw	r3,200(sp)
   1234c:	d9003317 	ldw	r4,204(sp)
   12350:	19012516 	blt	r3,r4,127e8 <___svfprintf_internal_r+0x1eb8>
   12354:	9480004c 	andi	r18,r18,1
   12358:	9001841e 	bne	r18,zero,1296c <___svfprintf_internal_r+0x203c>
   1235c:	1805883a 	mov	r2,r3
   12360:	1801cc16 	blt	r3,zero,12a94 <___svfprintf_internal_r+0x2164>
   12364:	d8c03217 	ldw	r3,200(sp)
   12368:	044019c4 	movi	r17,103
   1236c:	d8c02e15 	stw	r3,184(sp)
   12370:	df002a07 	ldb	fp,168(sp)
   12374:	e000a61e 	bne	fp,zero,12610 <___svfprintf_internal_r+0x1ce0>
   12378:	df002783 	ldbu	fp,158(sp)
   1237c:	d8802a15 	stw	r2,168(sp)
   12380:	dc802b17 	ldw	r18,172(sp)
   12384:	d8002915 	stw	zero,164(sp)
   12388:	003b1706 	br	10fe8 <__alt_data_end+0xfc010fe8>
   1238c:	040000b4 	movhi	r16,2
   12390:	84153104 	addi	r16,r16,21700
   12394:	003aa606 	br	10e30 <__alt_data_end+0xfc010e30>
   12398:	d9003917 	ldw	r4,228(sp)
   1239c:	04001004 	movi	r16,64
   123a0:	800b883a 	mov	r5,r16
   123a4:	00050480 	call	5048 <_malloc_r>
   123a8:	d9002c17 	ldw	r4,176(sp)
   123ac:	20800015 	stw	r2,0(r4)
   123b0:	20800415 	stw	r2,16(r4)
   123b4:	1001cb26 	beq	r2,zero,12ae4 <___svfprintf_internal_r+0x21b4>
   123b8:	d8802c17 	ldw	r2,176(sp)
   123bc:	14000515 	stw	r16,20(r2)
   123c0:	00397606 	br	1099c <__alt_data_end+0xfc01099c>
   123c4:	040000b4 	movhi	r16,2
   123c8:	84153304 	addi	r16,r16,21708
   123cc:	003ee106 	br	11f54 <__alt_data_end+0xfc011f54>
   123d0:	d9402c17 	ldw	r5,176(sp)
   123d4:	d9801e04 	addi	r6,sp,120
   123d8:	9809883a 	mov	r4,r19
   123dc:	00155000 	call	15500 <__ssprint_r>
   123e0:	103a381e 	bne	r2,zero,10cc4 <__alt_data_end+0xfc010cc4>
   123e4:	dc402617 	ldw	r17,152(sp)
   123e8:	d8c02017 	ldw	r3,128(sp)
   123ec:	da000404 	addi	r8,sp,16
   123f0:	003f4306 	br	12100 <__alt_data_end+0xfc012100>
   123f4:	01400184 	movi	r5,6
   123f8:	d9402915 	stw	r5,164(sp)
   123fc:	003f9506 	br	12254 <__alt_data_end+0xfc012254>
   12400:	d9002d17 	ldw	r4,180(sp)
   12404:	25000017 	ldw	r20,0(r4)
   12408:	21000104 	addi	r4,r4,4
   1240c:	d9002d15 	stw	r4,180(sp)
   12410:	a02dd7fa 	srai	r22,r20,31
   12414:	b005883a 	mov	r2,r22
   12418:	003a9b06 	br	10e88 <__alt_data_end+0xfc010e88>
   1241c:	d9402d17 	ldw	r5,180(sp)
   12420:	002d883a 	mov	r22,zero
   12424:	2d000017 	ldw	r20,0(r5)
   12428:	29400104 	addi	r5,r5,4
   1242c:	d9402d15 	stw	r5,180(sp)
   12430:	003bf906 	br	11418 <__alt_data_end+0xfc011418>
   12434:	9480100c 	andi	r18,r18,64
   12438:	90006e26 	beq	r18,zero,125f4 <___svfprintf_internal_r+0x1cc4>
   1243c:	d9002d17 	ldw	r4,180(sp)
   12440:	d9402f17 	ldw	r5,188(sp)
   12444:	20800017 	ldw	r2,0(r4)
   12448:	21000104 	addi	r4,r4,4
   1244c:	d9002d15 	stw	r4,180(sp)
   12450:	1140000d 	sth	r5,0(r2)
   12454:	00396106 	br	109dc <__alt_data_end+0xfc0109dc>
   12458:	d9402c17 	ldw	r5,176(sp)
   1245c:	d9801e04 	addi	r6,sp,120
   12460:	9809883a 	mov	r4,r19
   12464:	00155000 	call	15500 <__ssprint_r>
   12468:	103a161e 	bne	r2,zero,10cc4 <__alt_data_end+0xfc010cc4>
   1246c:	d8c02017 	ldw	r3,128(sp)
   12470:	d8801f17 	ldw	r2,124(sp)
   12474:	da000404 	addi	r8,sp,16
   12478:	d9403317 	ldw	r5,204(sp)
   1247c:	10800044 	addi	r2,r2,1
   12480:	44000015 	stw	r16,0(r8)
   12484:	28c7883a 	add	r3,r5,r3
   12488:	003b7706 	br	11268 <__alt_data_end+0xfc011268>
   1248c:	8009883a 	mov	r4,r16
   12490:	da003e15 	stw	r8,248(sp)
   12494:	00066700 	call	6670 <strlen>
   12498:	d8802e15 	stw	r2,184(sp)
   1249c:	da003e17 	ldw	r8,248(sp)
   124a0:	103c280e 	bge	r2,zero,11544 <__alt_data_end+0xfc011544>
   124a4:	0005883a 	mov	r2,zero
   124a8:	003c2606 	br	11544 <__alt_data_end+0xfc011544>
   124ac:	00bfffc4 	movi	r2,-1
   124b0:	003a0906 	br	10cd8 <__alt_data_end+0xfc010cd8>
   124b4:	010000b4 	movhi	r4,2
   124b8:	21166104 	addi	r4,r4,22916
   124bc:	d9003515 	stw	r4,212(sp)
   124c0:	003b0606 	br	110dc <__alt_data_end+0xfc0110dc>
   124c4:	013fffc4 	movi	r4,-1
   124c8:	003a2706 	br	10d68 <__alt_data_end+0xfc010d68>
   124cc:	d9402c17 	ldw	r5,176(sp)
   124d0:	d9801e04 	addi	r6,sp,120
   124d4:	9809883a 	mov	r4,r19
   124d8:	00155000 	call	15500 <__ssprint_r>
   124dc:	1039f91e 	bne	r2,zero,10cc4 <__alt_data_end+0xfc010cc4>
   124e0:	d8c02017 	ldw	r3,128(sp)
   124e4:	da000404 	addi	r8,sp,16
   124e8:	003d8406 	br	11afc <__alt_data_end+0xfc011afc>
   124ec:	0023883a 	mov	r17,zero
   124f0:	003d8306 	br	11b00 <__alt_data_end+0xfc011b00>
   124f4:	010000b4 	movhi	r4,2
   124f8:	21165d04 	addi	r4,r4,22900
   124fc:	d9002b15 	stw	r4,172(sp)
   12500:	d9002b17 	ldw	r4,172(sp)
   12504:	1c47883a 	add	r3,r3,r17
   12508:	10800044 	addi	r2,r2,1
   1250c:	41000015 	stw	r4,0(r8)
   12510:	44400115 	stw	r17,4(r8)
   12514:	d8c02015 	stw	r3,128(sp)
   12518:	d8801f15 	stw	r2,124(sp)
   1251c:	010001c4 	movi	r4,7
   12520:	20bfcd16 	blt	r4,r2,12458 <__alt_data_end+0xfc012458>
   12524:	42000204 	addi	r8,r8,8
   12528:	003fd306 	br	12478 <__alt_data_end+0xfc012478>
   1252c:	d9402c17 	ldw	r5,176(sp)
   12530:	d9801e04 	addi	r6,sp,120
   12534:	9809883a 	mov	r4,r19
   12538:	00155000 	call	15500 <__ssprint_r>
   1253c:	1039e11e 	bne	r2,zero,10cc4 <__alt_data_end+0xfc010cc4>
   12540:	d8802617 	ldw	r2,152(sp)
   12544:	d8c02017 	ldw	r3,128(sp)
   12548:	da000404 	addi	r8,sp,16
   1254c:	003e1c06 	br	11dc0 <__alt_data_end+0xfc011dc0>
   12550:	d8802917 	ldw	r2,164(sp)
   12554:	00c00184 	movi	r3,6
   12558:	1880012e 	bgeu	r3,r2,12560 <___svfprintf_internal_r+0x1c30>
   1255c:	1805883a 	mov	r2,r3
   12560:	d8802e15 	stw	r2,184(sp)
   12564:	1000f316 	blt	r2,zero,12934 <___svfprintf_internal_r+0x2004>
   12568:	040000b4 	movhi	r16,2
   1256c:	d8802a15 	stw	r2,168(sp)
   12570:	dd002d15 	stw	r20,180(sp)
   12574:	d8002915 	stw	zero,164(sp)
   12578:	d8003215 	stw	zero,200(sp)
   1257c:	84153f04 	addi	r16,r16,21756
   12580:	0039883a 	mov	fp,zero
   12584:	003a9f06 	br	11004 <__alt_data_end+0xfc011004>
   12588:	010000b4 	movhi	r4,2
   1258c:	21166104 	addi	r4,r4,22916
   12590:	d9003515 	stw	r4,212(sp)
   12594:	003b5f06 	br	11314 <__alt_data_end+0xfc011314>
   12598:	d9402c17 	ldw	r5,176(sp)
   1259c:	d9801e04 	addi	r6,sp,120
   125a0:	9809883a 	mov	r4,r19
   125a4:	00155000 	call	15500 <__ssprint_r>
   125a8:	1039c61e 	bne	r2,zero,10cc4 <__alt_data_end+0xfc010cc4>
   125ac:	d8802617 	ldw	r2,152(sp)
   125b0:	d9403317 	ldw	r5,204(sp)
   125b4:	d8c02017 	ldw	r3,128(sp)
   125b8:	da000404 	addi	r8,sp,16
   125bc:	2885c83a 	sub	r2,r5,r2
   125c0:	003e1006 	br	11e04 <__alt_data_end+0xfc011e04>
   125c4:	00800044 	movi	r2,1
   125c8:	10803fcc 	andi	r2,r2,255
   125cc:	00c00044 	movi	r3,1
   125d0:	10fa3526 	beq	r2,r3,10ea8 <__alt_data_end+0xfc010ea8>
   125d4:	00c00084 	movi	r3,2
   125d8:	10fb9e26 	beq	r2,r3,11454 <__alt_data_end+0xfc011454>
   125dc:	003a6406 	br	10f70 <__alt_data_end+0xfc010f70>
   125e0:	0021883a 	mov	r16,zero
   125e4:	003e0806 	br	11e08 <__alt_data_end+0xfc011e08>
   125e8:	07000b44 	movi	fp,45
   125ec:	df002785 	stb	fp,158(sp)
   125f0:	003a0b06 	br	10e20 <__alt_data_end+0xfc010e20>
   125f4:	d8c02d17 	ldw	r3,180(sp)
   125f8:	d9002f17 	ldw	r4,188(sp)
   125fc:	18800017 	ldw	r2,0(r3)
   12600:	18c00104 	addi	r3,r3,4
   12604:	d8c02d15 	stw	r3,180(sp)
   12608:	11000015 	stw	r4,0(r2)
   1260c:	0038f306 	br	109dc <__alt_data_end+0xfc0109dc>
   12610:	00c00b44 	movi	r3,45
   12614:	d8c02785 	stb	r3,158(sp)
   12618:	d8802a15 	stw	r2,168(sp)
   1261c:	dc802b17 	ldw	r18,172(sp)
   12620:	d8002915 	stw	zero,164(sp)
   12624:	07000b44 	movi	fp,45
   12628:	003a7306 	br	10ff8 <__alt_data_end+0xfc010ff8>
   1262c:	9080004c 	andi	r2,r18,1
   12630:	1000941e 	bne	r2,zero,12884 <___svfprintf_internal_r+0x1f54>
   12634:	d8802117 	ldw	r2,132(sp)
   12638:	1405c83a 	sub	r2,r2,r16
   1263c:	d8803315 	stw	r2,204(sp)
   12640:	b441161e 	bne	r22,r17,12a9c <___svfprintf_internal_r+0x216c>
   12644:	dd802617 	ldw	r22,152(sp)
   12648:	00bfff44 	movi	r2,-3
   1264c:	b0801a16 	blt	r22,r2,126b8 <___svfprintf_internal_r+0x1d88>
   12650:	d9402917 	ldw	r5,164(sp)
   12654:	2d801816 	blt	r5,r22,126b8 <___svfprintf_internal_r+0x1d88>
   12658:	dd803215 	stw	r22,200(sp)
   1265c:	003f3a06 	br	12348 <__alt_data_end+0xfc012348>
   12660:	1025883a 	mov	r18,r2
   12664:	0039883a 	mov	fp,zero
   12668:	00800084 	movi	r2,2
   1266c:	003fd606 	br	125c8 <__alt_data_end+0xfc0125c8>
   12670:	9080004c 	andi	r2,r18,1
   12674:	103f191e 	bne	r2,zero,122dc <__alt_data_end+0xfc0122dc>
   12678:	d8802117 	ldw	r2,132(sp)
   1267c:	003f2806 	br	12320 <__alt_data_end+0xfc012320>
   12680:	010000b4 	movhi	r4,2
   12684:	21165d04 	addi	r4,r4,22900
   12688:	d9002b15 	stw	r4,172(sp)
   1268c:	003c7c06 	br	11880 <__alt_data_end+0xfc011880>
   12690:	e005883a 	mov	r2,fp
   12694:	003f2206 	br	12320 <__alt_data_end+0xfc012320>
   12698:	d9402917 	ldw	r5,164(sp)
   1269c:	df002783 	ldbu	fp,158(sp)
   126a0:	dd002d15 	stw	r20,180(sp)
   126a4:	d9402a15 	stw	r5,168(sp)
   126a8:	d9402e15 	stw	r5,184(sp)
   126ac:	d8002915 	stw	zero,164(sp)
   126b0:	d8003215 	stw	zero,200(sp)
   126b4:	003a4c06 	br	10fe8 <__alt_data_end+0xfc010fe8>
   126b8:	8c7fff84 	addi	r17,r17,-2
   126bc:	b5bfffc4 	addi	r22,r22,-1
   126c0:	dd802615 	stw	r22,152(sp)
   126c4:	dc4022c5 	stb	r17,139(sp)
   126c8:	b000c316 	blt	r22,zero,129d8 <___svfprintf_internal_r+0x20a8>
   126cc:	00800ac4 	movi	r2,43
   126d0:	d8802305 	stb	r2,140(sp)
   126d4:	00800244 	movi	r2,9
   126d8:	15806e16 	blt	r2,r22,12894 <___svfprintf_internal_r+0x1f64>
   126dc:	00800c04 	movi	r2,48
   126e0:	b5800c04 	addi	r22,r22,48
   126e4:	d8802345 	stb	r2,141(sp)
   126e8:	dd802385 	stb	r22,142(sp)
   126ec:	d88023c4 	addi	r2,sp,143
   126f0:	df0022c4 	addi	fp,sp,139
   126f4:	d8c03317 	ldw	r3,204(sp)
   126f8:	1739c83a 	sub	fp,r2,fp
   126fc:	d9003317 	ldw	r4,204(sp)
   12700:	e0c7883a 	add	r3,fp,r3
   12704:	df003b15 	stw	fp,236(sp)
   12708:	d8c02e15 	stw	r3,184(sp)
   1270c:	00800044 	movi	r2,1
   12710:	1100b70e 	bge	r2,r4,129f0 <___svfprintf_internal_r+0x20c0>
   12714:	d8c02e17 	ldw	r3,184(sp)
   12718:	18c00044 	addi	r3,r3,1
   1271c:	d8c02e15 	stw	r3,184(sp)
   12720:	1805883a 	mov	r2,r3
   12724:	1800b016 	blt	r3,zero,129e8 <___svfprintf_internal_r+0x20b8>
   12728:	d8003215 	stw	zero,200(sp)
   1272c:	003f1006 	br	12370 <__alt_data_end+0xfc012370>
   12730:	d8802917 	ldw	r2,164(sp)
   12734:	103ec71e 	bne	r2,zero,12254 <__alt_data_end+0xfc012254>
   12738:	dc002915 	stw	r16,164(sp)
   1273c:	003ec506 	br	12254 <__alt_data_end+0xfc012254>
   12740:	d9402c17 	ldw	r5,176(sp)
   12744:	d9801e04 	addi	r6,sp,120
   12748:	9809883a 	mov	r4,r19
   1274c:	00155000 	call	15500 <__ssprint_r>
   12750:	10395c1e 	bne	r2,zero,10cc4 <__alt_data_end+0xfc010cc4>
   12754:	dc402617 	ldw	r17,152(sp)
   12758:	d8c02017 	ldw	r3,128(sp)
   1275c:	d8801f17 	ldw	r2,124(sp)
   12760:	da000404 	addi	r8,sp,16
   12764:	003e7706 	br	12144 <__alt_data_end+0xfc012144>
   12768:	582f883a 	mov	r23,r11
   1276c:	d8002915 	stw	zero,164(sp)
   12770:	0038c406 	br	10a84 <__alt_data_end+0xfc010a84>
   12774:	d8c02917 	ldw	r3,164(sp)
   12778:	d8802104 	addi	r2,sp,132
   1277c:	d8800315 	stw	r2,12(sp)
   12780:	d9403617 	ldw	r5,216(sp)
   12784:	d8802504 	addi	r2,sp,148
   12788:	d8800215 	stw	r2,8(sp)
   1278c:	d8802604 	addi	r2,sp,152
   12790:	d8c00015 	stw	r3,0(sp)
   12794:	9809883a 	mov	r4,r19
   12798:	d8800115 	stw	r2,4(sp)
   1279c:	01c000c4 	movi	r7,3
   127a0:	a00d883a 	mov	r6,r20
   127a4:	da003e15 	stw	r8,248(sp)
   127a8:	000a8c00 	call	a8c0 <_dtoa_r>
   127ac:	d9002917 	ldw	r4,164(sp)
   127b0:	da003e17 	ldw	r8,248(sp)
   127b4:	1021883a 	mov	r16,r2
   127b8:	1139883a 	add	fp,r2,r4
   127bc:	2007883a 	mov	r3,r4
   127c0:	81000007 	ldb	r4,0(r16)
   127c4:	00800c04 	movi	r2,48
   127c8:	20806f26 	beq	r4,r2,12988 <___svfprintf_internal_r+0x2058>
   127cc:	d8c02617 	ldw	r3,152(sp)
   127d0:	e0f9883a 	add	fp,fp,r3
   127d4:	003ec206 	br	122e0 <__alt_data_end+0xfc0122e0>
   127d8:	00c00b44 	movi	r3,45
   127dc:	2520003c 	xorhi	r20,r4,32768
   127e0:	d8c02a05 	stb	r3,168(sp)
   127e4:	003ea106 	br	1226c <__alt_data_end+0xfc01226c>
   127e8:	d8c03217 	ldw	r3,200(sp)
   127ec:	00c0890e 	bge	zero,r3,12a14 <___svfprintf_internal_r+0x20e4>
   127f0:	00800044 	movi	r2,1
   127f4:	d9003317 	ldw	r4,204(sp)
   127f8:	1105883a 	add	r2,r2,r4
   127fc:	d8802e15 	stw	r2,184(sp)
   12800:	10005f16 	blt	r2,zero,12980 <___svfprintf_internal_r+0x2050>
   12804:	044019c4 	movi	r17,103
   12808:	003ed906 	br	12370 <__alt_data_end+0xfc012370>
   1280c:	d9002917 	ldw	r4,164(sp)
   12810:	20c00044 	addi	r3,r4,1
   12814:	003e9c06 	br	12288 <__alt_data_end+0xfc012288>
   12818:	d9002917 	ldw	r4,164(sp)
   1281c:	00c0680e 	bge	zero,r3,129c0 <___svfprintf_internal_r+0x2090>
   12820:	2000461e 	bne	r4,zero,1293c <___svfprintf_internal_r+0x200c>
   12824:	9480004c 	andi	r18,r18,1
   12828:	9000441e 	bne	r18,zero,1293c <___svfprintf_internal_r+0x200c>
   1282c:	1805883a 	mov	r2,r3
   12830:	1800a016 	blt	r3,zero,12ab4 <___svfprintf_internal_r+0x2184>
   12834:	d8c03217 	ldw	r3,200(sp)
   12838:	d8c02e15 	stw	r3,184(sp)
   1283c:	003ecc06 	br	12370 <__alt_data_end+0xfc012370>
   12840:	d9402917 	ldw	r5,164(sp)
   12844:	d8802104 	addi	r2,sp,132
   12848:	d8800315 	stw	r2,12(sp)
   1284c:	d9400015 	stw	r5,0(sp)
   12850:	d8802504 	addi	r2,sp,148
   12854:	d9403617 	ldw	r5,216(sp)
   12858:	d8800215 	stw	r2,8(sp)
   1285c:	d8802604 	addi	r2,sp,152
   12860:	d8800115 	stw	r2,4(sp)
   12864:	01c000c4 	movi	r7,3
   12868:	a00d883a 	mov	r6,r20
   1286c:	9809883a 	mov	r4,r19
   12870:	da003e15 	stw	r8,248(sp)
   12874:	000a8c00 	call	a8c0 <_dtoa_r>
   12878:	d8c02917 	ldw	r3,164(sp)
   1287c:	da003e17 	ldw	r8,248(sp)
   12880:	1021883a 	mov	r16,r2
   12884:	00801184 	movi	r2,70
   12888:	80f9883a 	add	fp,r16,r3
   1288c:	88bfcc26 	beq	r17,r2,127c0 <__alt_data_end+0xfc0127c0>
   12890:	003e9306 	br	122e0 <__alt_data_end+0xfc0122e0>
   12894:	df0022c4 	addi	fp,sp,139
   12898:	dc002915 	stw	r16,164(sp)
   1289c:	9829883a 	mov	r20,r19
   128a0:	e021883a 	mov	r16,fp
   128a4:	4027883a 	mov	r19,r8
   128a8:	b009883a 	mov	r4,r22
   128ac:	01400284 	movi	r5,10
   128b0:	001769c0 	call	1769c <__modsi3>
   128b4:	10800c04 	addi	r2,r2,48
   128b8:	843fffc4 	addi	r16,r16,-1
   128bc:	b009883a 	mov	r4,r22
   128c0:	01400284 	movi	r5,10
   128c4:	80800005 	stb	r2,0(r16)
   128c8:	00176180 	call	17618 <__divsi3>
   128cc:	102d883a 	mov	r22,r2
   128d0:	00800244 	movi	r2,9
   128d4:	15bff416 	blt	r2,r22,128a8 <__alt_data_end+0xfc0128a8>
   128d8:	9811883a 	mov	r8,r19
   128dc:	b0800c04 	addi	r2,r22,48
   128e0:	a027883a 	mov	r19,r20
   128e4:	8029883a 	mov	r20,r16
   128e8:	a17fffc4 	addi	r5,r20,-1
   128ec:	a0bfffc5 	stb	r2,-1(r20)
   128f0:	dc002917 	ldw	r16,164(sp)
   128f4:	2f00752e 	bgeu	r5,fp,12acc <___svfprintf_internal_r+0x219c>
   128f8:	d9c02384 	addi	r7,sp,142
   128fc:	3d0fc83a 	sub	r7,r7,r20
   12900:	d9002344 	addi	r4,sp,141
   12904:	e1cf883a 	add	r7,fp,r7
   12908:	00000106 	br	12910 <___svfprintf_internal_r+0x1fe0>
   1290c:	28800003 	ldbu	r2,0(r5)
   12910:	20800005 	stb	r2,0(r4)
   12914:	21000044 	addi	r4,r4,1
   12918:	29400044 	addi	r5,r5,1
   1291c:	21fffb1e 	bne	r4,r7,1290c <__alt_data_end+0xfc01290c>
   12920:	d8802304 	addi	r2,sp,140
   12924:	1505c83a 	sub	r2,r2,r20
   12928:	d8c02344 	addi	r3,sp,141
   1292c:	1885883a 	add	r2,r3,r2
   12930:	003f7006 	br	126f4 <__alt_data_end+0xfc0126f4>
   12934:	0005883a 	mov	r2,zero
   12938:	003f0b06 	br	12568 <__alt_data_end+0xfc012568>
   1293c:	d9002917 	ldw	r4,164(sp)
   12940:	d8c03217 	ldw	r3,200(sp)
   12944:	20800044 	addi	r2,r4,1
   12948:	1885883a 	add	r2,r3,r2
   1294c:	d8802e15 	stw	r2,184(sp)
   12950:	103e870e 	bge	r2,zero,12370 <__alt_data_end+0xfc012370>
   12954:	0005883a 	mov	r2,zero
   12958:	003e8506 	br	12370 <__alt_data_end+0xfc012370>
   1295c:	010000b4 	movhi	r4,2
   12960:	21165d04 	addi	r4,r4,22900
   12964:	d9002b15 	stw	r4,172(sp)
   12968:	003cc506 	br	11c80 <__alt_data_end+0xfc011c80>
   1296c:	d8c03217 	ldw	r3,200(sp)
   12970:	18c00044 	addi	r3,r3,1
   12974:	d8c02e15 	stw	r3,184(sp)
   12978:	1805883a 	mov	r2,r3
   1297c:	183fa10e 	bge	r3,zero,12804 <__alt_data_end+0xfc012804>
   12980:	0005883a 	mov	r2,zero
   12984:	003f9f06 	br	12804 <__alt_data_end+0xfc012804>
   12988:	d9003617 	ldw	r4,216(sp)
   1298c:	000d883a 	mov	r6,zero
   12990:	000f883a 	mov	r7,zero
   12994:	a00b883a 	mov	r5,r20
   12998:	d8c03d15 	stw	r3,244(sp)
   1299c:	da003e15 	stw	r8,248(sp)
   129a0:	0018b5c0 	call	18b5c <__eqdf2>
   129a4:	d8c03d17 	ldw	r3,244(sp)
   129a8:	da003e17 	ldw	r8,248(sp)
   129ac:	103f8726 	beq	r2,zero,127cc <__alt_data_end+0xfc0127cc>
   129b0:	00800044 	movi	r2,1
   129b4:	10c7c83a 	sub	r3,r2,r3
   129b8:	d8c02615 	stw	r3,152(sp)
   129bc:	003f8406 	br	127d0 <__alt_data_end+0xfc0127d0>
   129c0:	20000e1e 	bne	r4,zero,129fc <___svfprintf_internal_r+0x20cc>
   129c4:	9480004c 	andi	r18,r18,1
   129c8:	90000c1e 	bne	r18,zero,129fc <___svfprintf_internal_r+0x20cc>
   129cc:	00800044 	movi	r2,1
   129d0:	d8802e15 	stw	r2,184(sp)
   129d4:	003e6606 	br	12370 <__alt_data_end+0xfc012370>
   129d8:	00800b44 	movi	r2,45
   129dc:	05adc83a 	sub	r22,zero,r22
   129e0:	d8802305 	stb	r2,140(sp)
   129e4:	003f3b06 	br	126d4 <__alt_data_end+0xfc0126d4>
   129e8:	0005883a 	mov	r2,zero
   129ec:	003f4e06 	br	12728 <__alt_data_end+0xfc012728>
   129f0:	90a4703a 	and	r18,r18,r2
   129f4:	903f4a26 	beq	r18,zero,12720 <__alt_data_end+0xfc012720>
   129f8:	003f4606 	br	12714 <__alt_data_end+0xfc012714>
   129fc:	d8c02917 	ldw	r3,164(sp)
   12a00:	18c00084 	addi	r3,r3,2
   12a04:	d8c02e15 	stw	r3,184(sp)
   12a08:	1805883a 	mov	r2,r3
   12a0c:	183e580e 	bge	r3,zero,12370 <__alt_data_end+0xfc012370>
   12a10:	003fd006 	br	12954 <__alt_data_end+0xfc012954>
   12a14:	00800084 	movi	r2,2
   12a18:	10c5c83a 	sub	r2,r2,r3
   12a1c:	003f7506 	br	127f4 <__alt_data_end+0xfc0127f4>
   12a20:	d8802d17 	ldw	r2,180(sp)
   12a24:	d9002d17 	ldw	r4,180(sp)
   12a28:	bc400043 	ldbu	r17,1(r23)
   12a2c:	10800017 	ldw	r2,0(r2)
   12a30:	582f883a 	mov	r23,r11
   12a34:	d8802915 	stw	r2,164(sp)
   12a38:	20800104 	addi	r2,r4,4
   12a3c:	d9002917 	ldw	r4,164(sp)
   12a40:	d8802d15 	stw	r2,180(sp)
   12a44:	203df00e 	bge	r4,zero,12208 <__alt_data_end+0xfc012208>
   12a48:	8c403fcc 	andi	r17,r17,255
   12a4c:	00bfffc4 	movi	r2,-1
   12a50:	8c40201c 	xori	r17,r17,128
   12a54:	d8802915 	stw	r2,164(sp)
   12a58:	8c7fe004 	addi	r17,r17,-128
   12a5c:	00380806 	br	10a80 <__alt_data_end+0xfc010a80>
   12a60:	9080004c 	andi	r2,r18,1
   12a64:	0039883a 	mov	fp,zero
   12a68:	10000726 	beq	r2,zero,12a88 <___svfprintf_internal_r+0x2158>
   12a6c:	d8c02817 	ldw	r3,160(sp)
   12a70:	dc001dc4 	addi	r16,sp,119
   12a74:	00800c04 	movi	r2,48
   12a78:	1c07c83a 	sub	r3,r3,r16
   12a7c:	d8801dc5 	stb	r2,119(sp)
   12a80:	d8c02e15 	stw	r3,184(sp)
   12a84:	00395206 	br	10fd0 <__alt_data_end+0xfc010fd0>
   12a88:	d8002e15 	stw	zero,184(sp)
   12a8c:	dc001e04 	addi	r16,sp,120
   12a90:	00394f06 	br	10fd0 <__alt_data_end+0xfc010fd0>
   12a94:	0005883a 	mov	r2,zero
   12a98:	003e3206 	br	12364 <__alt_data_end+0xfc012364>
   12a9c:	dd802617 	ldw	r22,152(sp)
   12aa0:	003f0606 	br	126bc <__alt_data_end+0xfc0126bc>
   12aa4:	d9c02785 	stb	r7,158(sp)
   12aa8:	003a5106 	br	113f0 <__alt_data_end+0xfc0113f0>
   12aac:	d9c02785 	stb	r7,158(sp)
   12ab0:	003a3706 	br	11390 <__alt_data_end+0xfc011390>
   12ab4:	0005883a 	mov	r2,zero
   12ab8:	003f5e06 	br	12834 <__alt_data_end+0xfc012834>
   12abc:	d9c02785 	stb	r7,158(sp)
   12ac0:	00391706 	br	10f20 <__alt_data_end+0xfc010f20>
   12ac4:	d9c02785 	stb	r7,158(sp)
   12ac8:	0038e606 	br	10e64 <__alt_data_end+0xfc010e64>
   12acc:	d8802344 	addi	r2,sp,141
   12ad0:	003f0806 	br	126f4 <__alt_data_end+0xfc0126f4>
   12ad4:	d9c02785 	stb	r7,158(sp)
   12ad8:	0038b706 	br	10db8 <__alt_data_end+0xfc010db8>
   12adc:	d9c02785 	stb	r7,158(sp)
   12ae0:	003adc06 	br	11654 <__alt_data_end+0xfc011654>
   12ae4:	d9403917 	ldw	r5,228(sp)
   12ae8:	00800304 	movi	r2,12
   12aec:	28800015 	stw	r2,0(r5)
   12af0:	00bfffc4 	movi	r2,-1
   12af4:	00387806 	br	10cd8 <__alt_data_end+0xfc010cd8>
   12af8:	d9c02785 	stb	r7,158(sp)
   12afc:	003abf06 	br	115fc <__alt_data_end+0xfc0115fc>
   12b00:	d9c02785 	stb	r7,158(sp)
   12b04:	003a9b06 	br	11574 <__alt_data_end+0xfc011574>

00012b08 <__submore>:
   12b08:	defffa04 	addi	sp,sp,-24
   12b0c:	dc000015 	stw	r16,0(sp)
   12b10:	2821883a 	mov	r16,r5
   12b14:	29400c17 	ldw	r5,48(r5)
   12b18:	dfc00515 	stw	ra,20(sp)
   12b1c:	dd000415 	stw	r20,16(sp)
   12b20:	dcc00315 	stw	r19,12(sp)
   12b24:	dc800215 	stw	r18,8(sp)
   12b28:	dc400115 	stw	r17,4(sp)
   12b2c:	80801004 	addi	r2,r16,64
   12b30:	28801726 	beq	r5,r2,12b90 <__submore+0x88>
   12b34:	84400d17 	ldw	r17,52(r16)
   12b38:	8c67883a 	add	r19,r17,r17
   12b3c:	980d883a 	mov	r6,r19
   12b40:	0005d200 	call	5d20 <_realloc_r>
   12b44:	1025883a 	mov	r18,r2
   12b48:	10002226 	beq	r2,zero,12bd4 <__submore+0xcc>
   12b4c:	1469883a 	add	r20,r2,r17
   12b50:	880d883a 	mov	r6,r17
   12b54:	100b883a 	mov	r5,r2
   12b58:	a009883a 	mov	r4,r20
   12b5c:	00059380 	call	5938 <memcpy>
   12b60:	0005883a 	mov	r2,zero
   12b64:	85000015 	stw	r20,0(r16)
   12b68:	84800c15 	stw	r18,48(r16)
   12b6c:	84c00d15 	stw	r19,52(r16)
   12b70:	dfc00517 	ldw	ra,20(sp)
   12b74:	dd000417 	ldw	r20,16(sp)
   12b78:	dcc00317 	ldw	r19,12(sp)
   12b7c:	dc800217 	ldw	r18,8(sp)
   12b80:	dc400117 	ldw	r17,4(sp)
   12b84:	dc000017 	ldw	r16,0(sp)
   12b88:	dec00604 	addi	sp,sp,24
   12b8c:	f800283a 	ret
   12b90:	04410004 	movi	r17,1024
   12b94:	880b883a 	mov	r5,r17
   12b98:	00050480 	call	5048 <_malloc_r>
   12b9c:	1007883a 	mov	r3,r2
   12ba0:	10000c26 	beq	r2,zero,12bd4 <__submore+0xcc>
   12ba4:	80801083 	ldbu	r2,66(r16)
   12ba8:	80c00c15 	stw	r3,48(r16)
   12bac:	84400d15 	stw	r17,52(r16)
   12bb0:	1880ffc5 	stb	r2,1023(r3)
   12bb4:	81401043 	ldbu	r5,65(r16)
   12bb8:	1900ff44 	addi	r4,r3,1021
   12bbc:	0005883a 	mov	r2,zero
   12bc0:	1940ff85 	stb	r5,1022(r3)
   12bc4:	81401003 	ldbu	r5,64(r16)
   12bc8:	1940ff45 	stb	r5,1021(r3)
   12bcc:	81000015 	stw	r4,0(r16)
   12bd0:	003fe706 	br	12b70 <__alt_data_end+0xfc012b70>
   12bd4:	00bfffc4 	movi	r2,-1
   12bd8:	003fe506 	br	12b70 <__alt_data_end+0xfc012b70>

00012bdc <_ungetc_r>:
   12bdc:	00bfffc4 	movi	r2,-1
   12be0:	28806126 	beq	r5,r2,12d68 <_ungetc_r+0x18c>
   12be4:	defffb04 	addi	sp,sp,-20
   12be8:	dcc00315 	stw	r19,12(sp)
   12bec:	dc400115 	stw	r17,4(sp)
   12bf0:	dc000015 	stw	r16,0(sp)
   12bf4:	dfc00415 	stw	ra,16(sp)
   12bf8:	dc800215 	stw	r18,8(sp)
   12bfc:	2023883a 	mov	r17,r4
   12c00:	3021883a 	mov	r16,r6
   12c04:	2827883a 	mov	r19,r5
   12c08:	20000226 	beq	r4,zero,12c14 <_ungetc_r+0x38>
   12c0c:	20800e17 	ldw	r2,56(r4)
   12c10:	10002e26 	beq	r2,zero,12ccc <_ungetc_r+0xf0>
   12c14:	80c0030b 	ldhu	r3,12(r16)
   12c18:	1888000c 	andi	r2,r3,8192
   12c1c:	1000051e 	bne	r2,zero,12c34 <_ungetc_r+0x58>
   12c20:	81001917 	ldw	r4,100(r16)
   12c24:	00b7ffc4 	movi	r2,-8193
   12c28:	18c80014 	ori	r3,r3,8192
   12c2c:	2084703a 	and	r2,r4,r2
   12c30:	80801915 	stw	r2,100(r16)
   12c34:	00bff7c4 	movi	r2,-33
   12c38:	1884703a 	and	r2,r3,r2
   12c3c:	8080030d 	sth	r2,12(r16)
   12c40:	1900010c 	andi	r4,r3,4
   12c44:	2000061e 	bne	r4,zero,12c60 <_ungetc_r+0x84>
   12c48:	1900040c 	andi	r4,r3,16
   12c4c:	20001d26 	beq	r4,zero,12cc4 <_ungetc_r+0xe8>
   12c50:	18c0020c 	andi	r3,r3,8
   12c54:	1800331e 	bne	r3,zero,12d24 <_ungetc_r+0x148>
   12c58:	10800114 	ori	r2,r2,4
   12c5c:	8080030d 	sth	r2,12(r16)
   12c60:	80800c17 	ldw	r2,48(r16)
   12c64:	9c803fcc 	andi	r18,r19,255
   12c68:	10001a26 	beq	r2,zero,12cd4 <_ungetc_r+0xf8>
   12c6c:	80c00117 	ldw	r3,4(r16)
   12c70:	80800d17 	ldw	r2,52(r16)
   12c74:	18800f0e 	bge	r3,r2,12cb4 <_ungetc_r+0xd8>
   12c78:	80c00017 	ldw	r3,0(r16)
   12c7c:	9005883a 	mov	r2,r18
   12c80:	193fffc4 	addi	r4,r3,-1
   12c84:	81000015 	stw	r4,0(r16)
   12c88:	1cffffc5 	stb	r19,-1(r3)
   12c8c:	80c00117 	ldw	r3,4(r16)
   12c90:	18c00044 	addi	r3,r3,1
   12c94:	80c00115 	stw	r3,4(r16)
   12c98:	dfc00417 	ldw	ra,16(sp)
   12c9c:	dcc00317 	ldw	r19,12(sp)
   12ca0:	dc800217 	ldw	r18,8(sp)
   12ca4:	dc400117 	ldw	r17,4(sp)
   12ca8:	dc000017 	ldw	r16,0(sp)
   12cac:	dec00504 	addi	sp,sp,20
   12cb0:	f800283a 	ret
   12cb4:	800b883a 	mov	r5,r16
   12cb8:	8809883a 	mov	r4,r17
   12cbc:	0012b080 	call	12b08 <__submore>
   12cc0:	103fed26 	beq	r2,zero,12c78 <__alt_data_end+0xfc012c78>
   12cc4:	00bfffc4 	movi	r2,-1
   12cc8:	003ff306 	br	12c98 <__alt_data_end+0xfc012c98>
   12ccc:	0004e480 	call	4e48 <__sinit>
   12cd0:	003fd006 	br	12c14 <__alt_data_end+0xfc012c14>
   12cd4:	80c00417 	ldw	r3,16(r16)
   12cd8:	80800017 	ldw	r2,0(r16)
   12cdc:	18000326 	beq	r3,zero,12cec <_ungetc_r+0x110>
   12ce0:	1880022e 	bgeu	r3,r2,12cec <_ungetc_r+0x110>
   12ce4:	10ffffc3 	ldbu	r3,-1(r2)
   12ce8:	90c01826 	beq	r18,r3,12d4c <_ungetc_r+0x170>
   12cec:	81400117 	ldw	r5,4(r16)
   12cf0:	80800e15 	stw	r2,56(r16)
   12cf4:	008000c4 	movi	r2,3
   12cf8:	81001004 	addi	r4,r16,64
   12cfc:	80c01084 	addi	r3,r16,66
   12d00:	80800d15 	stw	r2,52(r16)
   12d04:	00800044 	movi	r2,1
   12d08:	80800115 	stw	r2,4(r16)
   12d0c:	81400f15 	stw	r5,60(r16)
   12d10:	81000c15 	stw	r4,48(r16)
   12d14:	84c01085 	stb	r19,66(r16)
   12d18:	80c00015 	stw	r3,0(r16)
   12d1c:	9005883a 	mov	r2,r18
   12d20:	003fdd06 	br	12c98 <__alt_data_end+0xfc012c98>
   12d24:	800b883a 	mov	r5,r16
   12d28:	8809883a 	mov	r4,r17
   12d2c:	000c2680 	call	c268 <_fflush_r>
   12d30:	103fe41e 	bne	r2,zero,12cc4 <__alt_data_end+0xfc012cc4>
   12d34:	8080030b 	ldhu	r2,12(r16)
   12d38:	00fffdc4 	movi	r3,-9
   12d3c:	80000215 	stw	zero,8(r16)
   12d40:	1884703a 	and	r2,r3,r2
   12d44:	80000615 	stw	zero,24(r16)
   12d48:	003fc306 	br	12c58 <__alt_data_end+0xfc012c58>
   12d4c:	80c00117 	ldw	r3,4(r16)
   12d50:	10bfffc4 	addi	r2,r2,-1
   12d54:	80800015 	stw	r2,0(r16)
   12d58:	18800044 	addi	r2,r3,1
   12d5c:	80800115 	stw	r2,4(r16)
   12d60:	9005883a 	mov	r2,r18
   12d64:	003fcc06 	br	12c98 <__alt_data_end+0xfc012c98>
   12d68:	00bfffc4 	movi	r2,-1
   12d6c:	f800283a 	ret

00012d70 <ungetc>:
   12d70:	008000b4 	movhi	r2,2
   12d74:	109df804 	addi	r2,r2,30688
   12d78:	280d883a 	mov	r6,r5
   12d7c:	200b883a 	mov	r5,r4
   12d80:	11000017 	ldw	r4,0(r2)
   12d84:	0012bdc1 	jmpi	12bdc <_ungetc_r>

00012d88 <__sprint_r.part.0>:
   12d88:	28801917 	ldw	r2,100(r5)
   12d8c:	defff604 	addi	sp,sp,-40
   12d90:	dd400515 	stw	r21,20(sp)
   12d94:	dfc00915 	stw	ra,36(sp)
   12d98:	df000815 	stw	fp,32(sp)
   12d9c:	ddc00715 	stw	r23,28(sp)
   12da0:	dd800615 	stw	r22,24(sp)
   12da4:	dd000415 	stw	r20,16(sp)
   12da8:	dcc00315 	stw	r19,12(sp)
   12dac:	dc800215 	stw	r18,8(sp)
   12db0:	dc400115 	stw	r17,4(sp)
   12db4:	dc000015 	stw	r16,0(sp)
   12db8:	1088000c 	andi	r2,r2,8192
   12dbc:	302b883a 	mov	r21,r6
   12dc0:	10002e26 	beq	r2,zero,12e7c <__sprint_r.part.0+0xf4>
   12dc4:	30800217 	ldw	r2,8(r6)
   12dc8:	35800017 	ldw	r22,0(r6)
   12dcc:	10002926 	beq	r2,zero,12e74 <__sprint_r.part.0+0xec>
   12dd0:	2827883a 	mov	r19,r5
   12dd4:	2029883a 	mov	r20,r4
   12dd8:	b5c00104 	addi	r23,r22,4
   12ddc:	04bfffc4 	movi	r18,-1
   12de0:	bc400017 	ldw	r17,0(r23)
   12de4:	b4000017 	ldw	r16,0(r22)
   12de8:	0039883a 	mov	fp,zero
   12dec:	8822d0ba 	srli	r17,r17,2
   12df0:	8800031e 	bne	r17,zero,12e00 <__sprint_r.part.0+0x78>
   12df4:	00001806 	br	12e58 <__sprint_r.part.0+0xd0>
   12df8:	84000104 	addi	r16,r16,4
   12dfc:	8f001526 	beq	r17,fp,12e54 <__sprint_r.part.0+0xcc>
   12e00:	81400017 	ldw	r5,0(r16)
   12e04:	980d883a 	mov	r6,r19
   12e08:	a009883a 	mov	r4,r20
   12e0c:	00147500 	call	14750 <_fputwc_r>
   12e10:	e7000044 	addi	fp,fp,1
   12e14:	14bff81e 	bne	r2,r18,12df8 <__alt_data_end+0xfc012df8>
   12e18:	9005883a 	mov	r2,r18
   12e1c:	a8000215 	stw	zero,8(r21)
   12e20:	a8000115 	stw	zero,4(r21)
   12e24:	dfc00917 	ldw	ra,36(sp)
   12e28:	df000817 	ldw	fp,32(sp)
   12e2c:	ddc00717 	ldw	r23,28(sp)
   12e30:	dd800617 	ldw	r22,24(sp)
   12e34:	dd400517 	ldw	r21,20(sp)
   12e38:	dd000417 	ldw	r20,16(sp)
   12e3c:	dcc00317 	ldw	r19,12(sp)
   12e40:	dc800217 	ldw	r18,8(sp)
   12e44:	dc400117 	ldw	r17,4(sp)
   12e48:	dc000017 	ldw	r16,0(sp)
   12e4c:	dec00a04 	addi	sp,sp,40
   12e50:	f800283a 	ret
   12e54:	a8800217 	ldw	r2,8(r21)
   12e58:	8c63883a 	add	r17,r17,r17
   12e5c:	8c63883a 	add	r17,r17,r17
   12e60:	1445c83a 	sub	r2,r2,r17
   12e64:	a8800215 	stw	r2,8(r21)
   12e68:	b5800204 	addi	r22,r22,8
   12e6c:	bdc00204 	addi	r23,r23,8
   12e70:	103fdb1e 	bne	r2,zero,12de0 <__alt_data_end+0xfc012de0>
   12e74:	0005883a 	mov	r2,zero
   12e78:	003fe806 	br	12e1c <__alt_data_end+0xfc012e1c>
   12e7c:	000c9880 	call	c988 <__sfvwrite_r>
   12e80:	003fe606 	br	12e1c <__alt_data_end+0xfc012e1c>

00012e84 <__sprint_r>:
   12e84:	30c00217 	ldw	r3,8(r6)
   12e88:	18000126 	beq	r3,zero,12e90 <__sprint_r+0xc>
   12e8c:	0012d881 	jmpi	12d88 <__sprint_r.part.0>
   12e90:	30000115 	stw	zero,4(r6)
   12e94:	0005883a 	mov	r2,zero
   12e98:	f800283a 	ret

00012e9c <___vfiprintf_internal_r>:
   12e9c:	deffc904 	addi	sp,sp,-220
   12ea0:	df003515 	stw	fp,212(sp)
   12ea4:	dd003115 	stw	r20,196(sp)
   12ea8:	dfc03615 	stw	ra,216(sp)
   12eac:	ddc03415 	stw	r23,208(sp)
   12eb0:	dd803315 	stw	r22,204(sp)
   12eb4:	dd403215 	stw	r21,200(sp)
   12eb8:	dcc03015 	stw	r19,192(sp)
   12ebc:	dc802f15 	stw	r18,188(sp)
   12ec0:	dc402e15 	stw	r17,184(sp)
   12ec4:	dc002d15 	stw	r16,180(sp)
   12ec8:	d9002015 	stw	r4,128(sp)
   12ecc:	d9c02215 	stw	r7,136(sp)
   12ed0:	2829883a 	mov	r20,r5
   12ed4:	3039883a 	mov	fp,r6
   12ed8:	20000226 	beq	r4,zero,12ee4 <___vfiprintf_internal_r+0x48>
   12edc:	20800e17 	ldw	r2,56(r4)
   12ee0:	1000cf26 	beq	r2,zero,13220 <___vfiprintf_internal_r+0x384>
   12ee4:	a080030b 	ldhu	r2,12(r20)
   12ee8:	10c8000c 	andi	r3,r2,8192
   12eec:	1800061e 	bne	r3,zero,12f08 <___vfiprintf_internal_r+0x6c>
   12ef0:	a1001917 	ldw	r4,100(r20)
   12ef4:	00f7ffc4 	movi	r3,-8193
   12ef8:	10880014 	ori	r2,r2,8192
   12efc:	20c6703a 	and	r3,r4,r3
   12f00:	a080030d 	sth	r2,12(r20)
   12f04:	a0c01915 	stw	r3,100(r20)
   12f08:	10c0020c 	andi	r3,r2,8
   12f0c:	1800a926 	beq	r3,zero,131b4 <___vfiprintf_internal_r+0x318>
   12f10:	a0c00417 	ldw	r3,16(r20)
   12f14:	1800a726 	beq	r3,zero,131b4 <___vfiprintf_internal_r+0x318>
   12f18:	1080068c 	andi	r2,r2,26
   12f1c:	00c00284 	movi	r3,10
   12f20:	10c0ac26 	beq	r2,r3,131d4 <___vfiprintf_internal_r+0x338>
   12f24:	da801a04 	addi	r10,sp,104
   12f28:	da801e15 	stw	r10,120(sp)
   12f2c:	d8801e17 	ldw	r2,120(sp)
   12f30:	da8019c4 	addi	r10,sp,103
   12f34:	058000b4 	movhi	r22,2
   12f38:	05c000b4 	movhi	r23,2
   12f3c:	da801f15 	stw	r10,124(sp)
   12f40:	1295c83a 	sub	r10,r2,r10
   12f44:	b5966904 	addi	r22,r22,22948
   12f48:	bdd66504 	addi	r23,r23,22932
   12f4c:	dec01a15 	stw	sp,104(sp)
   12f50:	d8001c15 	stw	zero,112(sp)
   12f54:	d8001b15 	stw	zero,108(sp)
   12f58:	d8002615 	stw	zero,152(sp)
   12f5c:	d8002315 	stw	zero,140(sp)
   12f60:	da802715 	stw	r10,156(sp)
   12f64:	d811883a 	mov	r8,sp
   12f68:	dd002115 	stw	r20,132(sp)
   12f6c:	e021883a 	mov	r16,fp
   12f70:	80800007 	ldb	r2,0(r16)
   12f74:	1003ea26 	beq	r2,zero,13f20 <___vfiprintf_internal_r+0x1084>
   12f78:	00c00944 	movi	r3,37
   12f7c:	8025883a 	mov	r18,r16
   12f80:	10c0021e 	bne	r2,r3,12f8c <___vfiprintf_internal_r+0xf0>
   12f84:	00001606 	br	12fe0 <___vfiprintf_internal_r+0x144>
   12f88:	10c00326 	beq	r2,r3,12f98 <___vfiprintf_internal_r+0xfc>
   12f8c:	94800044 	addi	r18,r18,1
   12f90:	90800007 	ldb	r2,0(r18)
   12f94:	103ffc1e 	bne	r2,zero,12f88 <__alt_data_end+0xfc012f88>
   12f98:	9423c83a 	sub	r17,r18,r16
   12f9c:	88001026 	beq	r17,zero,12fe0 <___vfiprintf_internal_r+0x144>
   12fa0:	d8c01c17 	ldw	r3,112(sp)
   12fa4:	d8801b17 	ldw	r2,108(sp)
   12fa8:	44000015 	stw	r16,0(r8)
   12fac:	88c7883a 	add	r3,r17,r3
   12fb0:	10800044 	addi	r2,r2,1
   12fb4:	44400115 	stw	r17,4(r8)
   12fb8:	d8c01c15 	stw	r3,112(sp)
   12fbc:	d8801b15 	stw	r2,108(sp)
   12fc0:	010001c4 	movi	r4,7
   12fc4:	2080760e 	bge	r4,r2,131a0 <___vfiprintf_internal_r+0x304>
   12fc8:	1803821e 	bne	r3,zero,13dd4 <___vfiprintf_internal_r+0xf38>
   12fcc:	da802317 	ldw	r10,140(sp)
   12fd0:	d8001b15 	stw	zero,108(sp)
   12fd4:	d811883a 	mov	r8,sp
   12fd8:	5455883a 	add	r10,r10,r17
   12fdc:	da802315 	stw	r10,140(sp)
   12fe0:	90800007 	ldb	r2,0(r18)
   12fe4:	10044626 	beq	r2,zero,14100 <___vfiprintf_internal_r+0x1264>
   12fe8:	90c00047 	ldb	r3,1(r18)
   12fec:	94000044 	addi	r16,r18,1
   12ff0:	d8001d85 	stb	zero,118(sp)
   12ff4:	0009883a 	mov	r4,zero
   12ff8:	000f883a 	mov	r7,zero
   12ffc:	027fffc4 	movi	r9,-1
   13000:	0023883a 	mov	r17,zero
   13004:	0029883a 	mov	r20,zero
   13008:	01401604 	movi	r5,88
   1300c:	01800244 	movi	r6,9
   13010:	03400a84 	movi	r13,42
   13014:	03001b04 	movi	r12,108
   13018:	84000044 	addi	r16,r16,1
   1301c:	18bff804 	addi	r2,r3,-32
   13020:	28827336 	bltu	r5,r2,139f0 <___vfiprintf_internal_r+0xb54>
   13024:	100490ba 	slli	r2,r2,2
   13028:	02800074 	movhi	r10,1
   1302c:	528c0f04 	addi	r10,r10,12348
   13030:	1285883a 	add	r2,r2,r10
   13034:	10800017 	ldw	r2,0(r2)
   13038:	1000683a 	jmp	r2
   1303c:	00013724 	muli	zero,zero,1244
   13040:	000139f0 	cmpltui	zero,zero,1255
   13044:	000139f0 	cmpltui	zero,zero,1255
   13048:	00013744 	movi	zero,1245
   1304c:	000139f0 	cmpltui	zero,zero,1255
   13050:	000139f0 	cmpltui	zero,zero,1255
   13054:	000139f0 	cmpltui	zero,zero,1255
   13058:	000139f0 	cmpltui	zero,zero,1255
   1305c:	000139f0 	cmpltui	zero,zero,1255
   13060:	000139f0 	cmpltui	zero,zero,1255
   13064:	0001392c 	andhi	zero,zero,1252
   13068:	00013948 	cmpgei	zero,zero,1253
   1306c:	000139f0 	cmpltui	zero,zero,1255
   13070:	00013230 	cmpltui	zero,zero,1224
   13074:	00013958 	cmpnei	zero,zero,1253
   13078:	000139f0 	cmpltui	zero,zero,1255
   1307c:	00013750 	cmplti	zero,zero,1245
   13080:	0001375c 	xori	zero,zero,1245
   13084:	0001375c 	xori	zero,zero,1245
   13088:	0001375c 	xori	zero,zero,1245
   1308c:	0001375c 	xori	zero,zero,1245
   13090:	0001375c 	xori	zero,zero,1245
   13094:	0001375c 	xori	zero,zero,1245
   13098:	0001375c 	xori	zero,zero,1245
   1309c:	0001375c 	xori	zero,zero,1245
   130a0:	0001375c 	xori	zero,zero,1245
   130a4:	000139f0 	cmpltui	zero,zero,1255
   130a8:	000139f0 	cmpltui	zero,zero,1255
   130ac:	000139f0 	cmpltui	zero,zero,1255
   130b0:	000139f0 	cmpltui	zero,zero,1255
   130b4:	000139f0 	cmpltui	zero,zero,1255
   130b8:	000139f0 	cmpltui	zero,zero,1255
   130bc:	000139f0 	cmpltui	zero,zero,1255
   130c0:	000139f0 	cmpltui	zero,zero,1255
   130c4:	000139f0 	cmpltui	zero,zero,1255
   130c8:	000139f0 	cmpltui	zero,zero,1255
   130cc:	00013788 	cmpgei	zero,zero,1246
   130d0:	000139f0 	cmpltui	zero,zero,1255
   130d4:	000139f0 	cmpltui	zero,zero,1255
   130d8:	000139f0 	cmpltui	zero,zero,1255
   130dc:	000139f0 	cmpltui	zero,zero,1255
   130e0:	000139f0 	cmpltui	zero,zero,1255
   130e4:	000139f0 	cmpltui	zero,zero,1255
   130e8:	000139f0 	cmpltui	zero,zero,1255
   130ec:	000139f0 	cmpltui	zero,zero,1255
   130f0:	000139f0 	cmpltui	zero,zero,1255
   130f4:	000139f0 	cmpltui	zero,zero,1255
   130f8:	000137c0 	call	137c <manCapture+0xc>
   130fc:	000139f0 	cmpltui	zero,zero,1255
   13100:	000139f0 	cmpltui	zero,zero,1255
   13104:	000139f0 	cmpltui	zero,zero,1255
   13108:	000139f0 	cmpltui	zero,zero,1255
   1310c:	000139f0 	cmpltui	zero,zero,1255
   13110:	00013818 	cmpnei	zero,zero,1248
   13114:	000139f0 	cmpltui	zero,zero,1255
   13118:	000139f0 	cmpltui	zero,zero,1255
   1311c:	00013888 	cmpgei	zero,zero,1250
   13120:	000139f0 	cmpltui	zero,zero,1255
   13124:	000139f0 	cmpltui	zero,zero,1255
   13128:	000139f0 	cmpltui	zero,zero,1255
   1312c:	000139f0 	cmpltui	zero,zero,1255
   13130:	000139f0 	cmpltui	zero,zero,1255
   13134:	000139f0 	cmpltui	zero,zero,1255
   13138:	000139f0 	cmpltui	zero,zero,1255
   1313c:	000139f0 	cmpltui	zero,zero,1255
   13140:	000139f0 	cmpltui	zero,zero,1255
   13144:	000139f0 	cmpltui	zero,zero,1255
   13148:	00013634 	movhi	zero,1240
   1314c:	00013660 	cmpeqi	zero,zero,1241
   13150:	000139f0 	cmpltui	zero,zero,1255
   13154:	000139f0 	cmpltui	zero,zero,1255
   13158:	000139f0 	cmpltui	zero,zero,1255
   1315c:	00013998 	cmpnei	zero,zero,1254
   13160:	00013660 	cmpeqi	zero,zero,1241
   13164:	000139f0 	cmpltui	zero,zero,1255
   13168:	000139f0 	cmpltui	zero,zero,1255
   1316c:	000134f4 	movhi	zero,1235
   13170:	000139f0 	cmpltui	zero,zero,1255
   13174:	00013504 	movi	zero,1236
   13178:	00013540 	call	1354 <generateCaptureList+0x2b4>
   1317c:	0001323c 	xorhi	zero,zero,1224
   13180:	000134e8 	cmpgeui	zero,zero,1235
   13184:	000139f0 	cmpltui	zero,zero,1255
   13188:	000138c4 	movi	zero,1251
   1318c:	000139f0 	cmpltui	zero,zero,1255
   13190:	0001391c 	xori	zero,zero,1252
   13194:	000139f0 	cmpltui	zero,zero,1255
   13198:	000139f0 	cmpltui	zero,zero,1255
   1319c:	000135e0 	cmpeqi	zero,zero,1239
   131a0:	42000204 	addi	r8,r8,8
   131a4:	da802317 	ldw	r10,140(sp)
   131a8:	5455883a 	add	r10,r10,r17
   131ac:	da802315 	stw	r10,140(sp)
   131b0:	003f8b06 	br	12fe0 <__alt_data_end+0xfc012fe0>
   131b4:	d9002017 	ldw	r4,128(sp)
   131b8:	a00b883a 	mov	r5,r20
   131bc:	000a5180 	call	a518 <__swsetup_r>
   131c0:	1003b11e 	bne	r2,zero,14088 <___vfiprintf_internal_r+0x11ec>
   131c4:	a080030b 	ldhu	r2,12(r20)
   131c8:	00c00284 	movi	r3,10
   131cc:	1080068c 	andi	r2,r2,26
   131d0:	10ff541e 	bne	r2,r3,12f24 <__alt_data_end+0xfc012f24>
   131d4:	a080038f 	ldh	r2,14(r20)
   131d8:	103f5216 	blt	r2,zero,12f24 <__alt_data_end+0xfc012f24>
   131dc:	d9c02217 	ldw	r7,136(sp)
   131e0:	d9002017 	ldw	r4,128(sp)
   131e4:	e00d883a 	mov	r6,fp
   131e8:	a00b883a 	mov	r5,r20
   131ec:	00143140 	call	14314 <__sbprintf>
   131f0:	dfc03617 	ldw	ra,216(sp)
   131f4:	df003517 	ldw	fp,212(sp)
   131f8:	ddc03417 	ldw	r23,208(sp)
   131fc:	dd803317 	ldw	r22,204(sp)
   13200:	dd403217 	ldw	r21,200(sp)
   13204:	dd003117 	ldw	r20,196(sp)
   13208:	dcc03017 	ldw	r19,192(sp)
   1320c:	dc802f17 	ldw	r18,188(sp)
   13210:	dc402e17 	ldw	r17,184(sp)
   13214:	dc002d17 	ldw	r16,180(sp)
   13218:	dec03704 	addi	sp,sp,220
   1321c:	f800283a 	ret
   13220:	0004e480 	call	4e48 <__sinit>
   13224:	003f2f06 	br	12ee4 <__alt_data_end+0xfc012ee4>
   13228:	0463c83a 	sub	r17,zero,r17
   1322c:	d8802215 	stw	r2,136(sp)
   13230:	a5000114 	ori	r20,r20,4
   13234:	80c00007 	ldb	r3,0(r16)
   13238:	003f7706 	br	13018 <__alt_data_end+0xfc013018>
   1323c:	00800c04 	movi	r2,48
   13240:	da802217 	ldw	r10,136(sp)
   13244:	d8801d05 	stb	r2,116(sp)
   13248:	00801e04 	movi	r2,120
   1324c:	d8801d45 	stb	r2,117(sp)
   13250:	d8001d85 	stb	zero,118(sp)
   13254:	50c00104 	addi	r3,r10,4
   13258:	54800017 	ldw	r18,0(r10)
   1325c:	0027883a 	mov	r19,zero
   13260:	a0800094 	ori	r2,r20,2
   13264:	48030b16 	blt	r9,zero,13e94 <___vfiprintf_internal_r+0xff8>
   13268:	00bfdfc4 	movi	r2,-129
   1326c:	a096703a 	and	r11,r20,r2
   13270:	d8c02215 	stw	r3,136(sp)
   13274:	5d000094 	ori	r20,r11,2
   13278:	90032b1e 	bne	r18,zero,13f28 <___vfiprintf_internal_r+0x108c>
   1327c:	008000b4 	movhi	r2,2
   13280:	10953a04 	addi	r2,r2,21736
   13284:	d8802615 	stw	r2,152(sp)
   13288:	0039883a 	mov	fp,zero
   1328c:	48017b1e 	bne	r9,zero,1387c <___vfiprintf_internal_r+0x9e0>
   13290:	0013883a 	mov	r9,zero
   13294:	0027883a 	mov	r19,zero
   13298:	dd401a04 	addi	r21,sp,104
   1329c:	4825883a 	mov	r18,r9
   132a0:	4cc0010e 	bge	r9,r19,132a8 <___vfiprintf_internal_r+0x40c>
   132a4:	9825883a 	mov	r18,r19
   132a8:	e7003fcc 	andi	fp,fp,255
   132ac:	e700201c 	xori	fp,fp,128
   132b0:	e73fe004 	addi	fp,fp,-128
   132b4:	e0000126 	beq	fp,zero,132bc <___vfiprintf_internal_r+0x420>
   132b8:	94800044 	addi	r18,r18,1
   132bc:	a380008c 	andi	r14,r20,2
   132c0:	70000126 	beq	r14,zero,132c8 <___vfiprintf_internal_r+0x42c>
   132c4:	94800084 	addi	r18,r18,2
   132c8:	a700210c 	andi	fp,r20,132
   132cc:	e001df1e 	bne	fp,zero,13a4c <___vfiprintf_internal_r+0xbb0>
   132d0:	8c87c83a 	sub	r3,r17,r18
   132d4:	00c1dd0e 	bge	zero,r3,13a4c <___vfiprintf_internal_r+0xbb0>
   132d8:	01c00404 	movi	r7,16
   132dc:	d8801c17 	ldw	r2,112(sp)
   132e0:	38c3ad0e 	bge	r7,r3,14198 <___vfiprintf_internal_r+0x12fc>
   132e4:	028000b4 	movhi	r10,2
   132e8:	52966904 	addi	r10,r10,22948
   132ec:	dc002915 	stw	r16,164(sp)
   132f0:	d9801b17 	ldw	r6,108(sp)
   132f4:	da802415 	stw	r10,144(sp)
   132f8:	03c001c4 	movi	r15,7
   132fc:	da402515 	stw	r9,148(sp)
   13300:	db802815 	stw	r14,160(sp)
   13304:	1821883a 	mov	r16,r3
   13308:	00000506 	br	13320 <___vfiprintf_internal_r+0x484>
   1330c:	31400084 	addi	r5,r6,2
   13310:	42000204 	addi	r8,r8,8
   13314:	200d883a 	mov	r6,r4
   13318:	843ffc04 	addi	r16,r16,-16
   1331c:	3c000d0e 	bge	r7,r16,13354 <___vfiprintf_internal_r+0x4b8>
   13320:	10800404 	addi	r2,r2,16
   13324:	31000044 	addi	r4,r6,1
   13328:	45800015 	stw	r22,0(r8)
   1332c:	41c00115 	stw	r7,4(r8)
   13330:	d8801c15 	stw	r2,112(sp)
   13334:	d9001b15 	stw	r4,108(sp)
   13338:	793ff40e 	bge	r15,r4,1330c <__alt_data_end+0xfc01330c>
   1333c:	1001b51e 	bne	r2,zero,13a14 <___vfiprintf_internal_r+0xb78>
   13340:	843ffc04 	addi	r16,r16,-16
   13344:	000d883a 	mov	r6,zero
   13348:	01400044 	movi	r5,1
   1334c:	d811883a 	mov	r8,sp
   13350:	3c3ff316 	blt	r7,r16,13320 <__alt_data_end+0xfc013320>
   13354:	8007883a 	mov	r3,r16
   13358:	da402517 	ldw	r9,148(sp)
   1335c:	db802817 	ldw	r14,160(sp)
   13360:	dc002917 	ldw	r16,164(sp)
   13364:	da802417 	ldw	r10,144(sp)
   13368:	1885883a 	add	r2,r3,r2
   1336c:	40c00115 	stw	r3,4(r8)
   13370:	42800015 	stw	r10,0(r8)
   13374:	d8801c15 	stw	r2,112(sp)
   13378:	d9401b15 	stw	r5,108(sp)
   1337c:	00c001c4 	movi	r3,7
   13380:	19426016 	blt	r3,r5,13d04 <___vfiprintf_internal_r+0xe68>
   13384:	d8c01d87 	ldb	r3,118(sp)
   13388:	42000204 	addi	r8,r8,8
   1338c:	29000044 	addi	r4,r5,1
   13390:	1801b31e 	bne	r3,zero,13a60 <___vfiprintf_internal_r+0xbc4>
   13394:	7001c026 	beq	r14,zero,13a98 <___vfiprintf_internal_r+0xbfc>
   13398:	d8c01d04 	addi	r3,sp,116
   1339c:	10800084 	addi	r2,r2,2
   133a0:	40c00015 	stw	r3,0(r8)
   133a4:	00c00084 	movi	r3,2
   133a8:	40c00115 	stw	r3,4(r8)
   133ac:	d8801c15 	stw	r2,112(sp)
   133b0:	d9001b15 	stw	r4,108(sp)
   133b4:	00c001c4 	movi	r3,7
   133b8:	1902650e 	bge	r3,r4,13d50 <___vfiprintf_internal_r+0xeb4>
   133bc:	10029a1e 	bne	r2,zero,13e28 <___vfiprintf_internal_r+0xf8c>
   133c0:	00c02004 	movi	r3,128
   133c4:	01000044 	movi	r4,1
   133c8:	000b883a 	mov	r5,zero
   133cc:	d811883a 	mov	r8,sp
   133d0:	e0c1b31e 	bne	fp,r3,13aa0 <___vfiprintf_internal_r+0xc04>
   133d4:	8cb9c83a 	sub	fp,r17,r18
   133d8:	0701b10e 	bge	zero,fp,13aa0 <___vfiprintf_internal_r+0xc04>
   133dc:	01c00404 	movi	r7,16
   133e0:	3f03890e 	bge	r7,fp,14208 <___vfiprintf_internal_r+0x136c>
   133e4:	00c000b4 	movhi	r3,2
   133e8:	18d66504 	addi	r3,r3,22932
   133ec:	d8c02415 	stw	r3,144(sp)
   133f0:	8007883a 	mov	r3,r16
   133f4:	034001c4 	movi	r13,7
   133f8:	e021883a 	mov	r16,fp
   133fc:	da402515 	stw	r9,148(sp)
   13400:	1839883a 	mov	fp,r3
   13404:	00000506 	br	1341c <___vfiprintf_internal_r+0x580>
   13408:	29800084 	addi	r6,r5,2
   1340c:	42000204 	addi	r8,r8,8
   13410:	180b883a 	mov	r5,r3
   13414:	843ffc04 	addi	r16,r16,-16
   13418:	3c000d0e 	bge	r7,r16,13450 <___vfiprintf_internal_r+0x5b4>
   1341c:	10800404 	addi	r2,r2,16
   13420:	28c00044 	addi	r3,r5,1
   13424:	45c00015 	stw	r23,0(r8)
   13428:	41c00115 	stw	r7,4(r8)
   1342c:	d8801c15 	stw	r2,112(sp)
   13430:	d8c01b15 	stw	r3,108(sp)
   13434:	68fff40e 	bge	r13,r3,13408 <__alt_data_end+0xfc013408>
   13438:	1002241e 	bne	r2,zero,13ccc <___vfiprintf_internal_r+0xe30>
   1343c:	843ffc04 	addi	r16,r16,-16
   13440:	01800044 	movi	r6,1
   13444:	000b883a 	mov	r5,zero
   13448:	d811883a 	mov	r8,sp
   1344c:	3c3ff316 	blt	r7,r16,1341c <__alt_data_end+0xfc01341c>
   13450:	da402517 	ldw	r9,148(sp)
   13454:	e007883a 	mov	r3,fp
   13458:	8039883a 	mov	fp,r16
   1345c:	1821883a 	mov	r16,r3
   13460:	d8c02417 	ldw	r3,144(sp)
   13464:	1705883a 	add	r2,r2,fp
   13468:	47000115 	stw	fp,4(r8)
   1346c:	40c00015 	stw	r3,0(r8)
   13470:	d8801c15 	stw	r2,112(sp)
   13474:	d9801b15 	stw	r6,108(sp)
   13478:	00c001c4 	movi	r3,7
   1347c:	19827616 	blt	r3,r6,13e58 <___vfiprintf_internal_r+0xfbc>
   13480:	4cf9c83a 	sub	fp,r9,r19
   13484:	42000204 	addi	r8,r8,8
   13488:	31000044 	addi	r4,r6,1
   1348c:	300b883a 	mov	r5,r6
   13490:	07018516 	blt	zero,fp,13aa8 <___vfiprintf_internal_r+0xc0c>
   13494:	9885883a 	add	r2,r19,r2
   13498:	45400015 	stw	r21,0(r8)
   1349c:	44c00115 	stw	r19,4(r8)
   134a0:	d8801c15 	stw	r2,112(sp)
   134a4:	d9001b15 	stw	r4,108(sp)
   134a8:	00c001c4 	movi	r3,7
   134ac:	1901dd0e 	bge	r3,r4,13c24 <___vfiprintf_internal_r+0xd88>
   134b0:	1002401e 	bne	r2,zero,13db4 <___vfiprintf_internal_r+0xf18>
   134b4:	d8001b15 	stw	zero,108(sp)
   134b8:	a2c0010c 	andi	r11,r20,4
   134bc:	58000226 	beq	r11,zero,134c8 <___vfiprintf_internal_r+0x62c>
   134c0:	8ca7c83a 	sub	r19,r17,r18
   134c4:	04c2f216 	blt	zero,r19,14090 <___vfiprintf_internal_r+0x11f4>
   134c8:	8c80010e 	bge	r17,r18,134d0 <___vfiprintf_internal_r+0x634>
   134cc:	9023883a 	mov	r17,r18
   134d0:	da802317 	ldw	r10,140(sp)
   134d4:	5455883a 	add	r10,r10,r17
   134d8:	da802315 	stw	r10,140(sp)
   134dc:	d8001b15 	stw	zero,108(sp)
   134e0:	d811883a 	mov	r8,sp
   134e4:	003ea206 	br	12f70 <__alt_data_end+0xfc012f70>
   134e8:	a5000814 	ori	r20,r20,32
   134ec:	80c00007 	ldb	r3,0(r16)
   134f0:	003ec906 	br	13018 <__alt_data_end+0xfc013018>
   134f4:	80c00007 	ldb	r3,0(r16)
   134f8:	1b030926 	beq	r3,r12,14120 <___vfiprintf_internal_r+0x1284>
   134fc:	a5000414 	ori	r20,r20,16
   13500:	003ec506 	br	13018 <__alt_data_end+0xfc013018>
   13504:	21003fcc 	andi	r4,r4,255
   13508:	20035e1e 	bne	r4,zero,14284 <___vfiprintf_internal_r+0x13e8>
   1350c:	a080080c 	andi	r2,r20,32
   13510:	1002a526 	beq	r2,zero,13fa8 <___vfiprintf_internal_r+0x110c>
   13514:	da802217 	ldw	r10,136(sp)
   13518:	50800017 	ldw	r2,0(r10)
   1351c:	da802317 	ldw	r10,140(sp)
   13520:	5007d7fa 	srai	r3,r10,31
   13524:	da802217 	ldw	r10,136(sp)
   13528:	10c00115 	stw	r3,4(r2)
   1352c:	52800104 	addi	r10,r10,4
   13530:	da802215 	stw	r10,136(sp)
   13534:	da802317 	ldw	r10,140(sp)
   13538:	12800015 	stw	r10,0(r2)
   1353c:	003e8c06 	br	12f70 <__alt_data_end+0xfc012f70>
   13540:	21003fcc 	andi	r4,r4,255
   13544:	2003511e 	bne	r4,zero,1428c <___vfiprintf_internal_r+0x13f0>
   13548:	a080080c 	andi	r2,r20,32
   1354c:	1000a126 	beq	r2,zero,137d4 <___vfiprintf_internal_r+0x938>
   13550:	da802217 	ldw	r10,136(sp)
   13554:	d8001d85 	stb	zero,118(sp)
   13558:	50800204 	addi	r2,r10,8
   1355c:	54800017 	ldw	r18,0(r10)
   13560:	54c00117 	ldw	r19,4(r10)
   13564:	4802b416 	blt	r9,zero,14038 <___vfiprintf_internal_r+0x119c>
   13568:	013fdfc4 	movi	r4,-129
   1356c:	94c6b03a 	or	r3,r18,r19
   13570:	d8802215 	stw	r2,136(sp)
   13574:	a128703a 	and	r20,r20,r4
   13578:	1800a226 	beq	r3,zero,13804 <___vfiprintf_internal_r+0x968>
   1357c:	0039883a 	mov	fp,zero
   13580:	dd401a04 	addi	r21,sp,104
   13584:	9006d0fa 	srli	r3,r18,3
   13588:	9808977a 	slli	r4,r19,29
   1358c:	9826d0fa 	srli	r19,r19,3
   13590:	948001cc 	andi	r18,r18,7
   13594:	90800c04 	addi	r2,r18,48
   13598:	ad7fffc4 	addi	r21,r21,-1
   1359c:	20e4b03a 	or	r18,r4,r3
   135a0:	a8800005 	stb	r2,0(r21)
   135a4:	94c6b03a 	or	r3,r18,r19
   135a8:	183ff61e 	bne	r3,zero,13584 <__alt_data_end+0xfc013584>
   135ac:	a0c0004c 	andi	r3,r20,1
   135b0:	18005926 	beq	r3,zero,13718 <___vfiprintf_internal_r+0x87c>
   135b4:	10803fcc 	andi	r2,r2,255
   135b8:	1080201c 	xori	r2,r2,128
   135bc:	10bfe004 	addi	r2,r2,-128
   135c0:	00c00c04 	movi	r3,48
   135c4:	10c05426 	beq	r2,r3,13718 <___vfiprintf_internal_r+0x87c>
   135c8:	da801e17 	ldw	r10,120(sp)
   135cc:	a8bfffc4 	addi	r2,r21,-1
   135d0:	a8ffffc5 	stb	r3,-1(r21)
   135d4:	50a7c83a 	sub	r19,r10,r2
   135d8:	102b883a 	mov	r21,r2
   135dc:	003f2f06 	br	1329c <__alt_data_end+0xfc01329c>
   135e0:	21003fcc 	andi	r4,r4,255
   135e4:	2003421e 	bne	r4,zero,142f0 <___vfiprintf_internal_r+0x1454>
   135e8:	008000b4 	movhi	r2,2
   135ec:	10953a04 	addi	r2,r2,21736
   135f0:	d8802615 	stw	r2,152(sp)
   135f4:	a080080c 	andi	r2,r20,32
   135f8:	1000aa26 	beq	r2,zero,138a4 <___vfiprintf_internal_r+0xa08>
   135fc:	da802217 	ldw	r10,136(sp)
   13600:	54800017 	ldw	r18,0(r10)
   13604:	54c00117 	ldw	r19,4(r10)
   13608:	52800204 	addi	r10,r10,8
   1360c:	da802215 	stw	r10,136(sp)
   13610:	a080004c 	andi	r2,r20,1
   13614:	1001d226 	beq	r2,zero,13d60 <___vfiprintf_internal_r+0xec4>
   13618:	94c4b03a 	or	r2,r18,r19
   1361c:	1002351e 	bne	r2,zero,13ef4 <___vfiprintf_internal_r+0x1058>
   13620:	d8001d85 	stb	zero,118(sp)
   13624:	48022216 	blt	r9,zero,13eb0 <___vfiprintf_internal_r+0x1014>
   13628:	00bfdfc4 	movi	r2,-129
   1362c:	a0a8703a 	and	r20,r20,r2
   13630:	003f1506 	br	13288 <__alt_data_end+0xfc013288>
   13634:	da802217 	ldw	r10,136(sp)
   13638:	04800044 	movi	r18,1
   1363c:	d8001d85 	stb	zero,118(sp)
   13640:	50800017 	ldw	r2,0(r10)
   13644:	52800104 	addi	r10,r10,4
   13648:	da802215 	stw	r10,136(sp)
   1364c:	d8801005 	stb	r2,64(sp)
   13650:	9027883a 	mov	r19,r18
   13654:	dd401004 	addi	r21,sp,64
   13658:	0013883a 	mov	r9,zero
   1365c:	003f1706 	br	132bc <__alt_data_end+0xfc0132bc>
   13660:	21003fcc 	andi	r4,r4,255
   13664:	2003201e 	bne	r4,zero,142e8 <___vfiprintf_internal_r+0x144c>
   13668:	a080080c 	andi	r2,r20,32
   1366c:	10004b26 	beq	r2,zero,1379c <___vfiprintf_internal_r+0x900>
   13670:	da802217 	ldw	r10,136(sp)
   13674:	50800117 	ldw	r2,4(r10)
   13678:	54800017 	ldw	r18,0(r10)
   1367c:	52800204 	addi	r10,r10,8
   13680:	da802215 	stw	r10,136(sp)
   13684:	1027883a 	mov	r19,r2
   13688:	10022c16 	blt	r2,zero,13f3c <___vfiprintf_internal_r+0x10a0>
   1368c:	df001d83 	ldbu	fp,118(sp)
   13690:	48007216 	blt	r9,zero,1385c <___vfiprintf_internal_r+0x9c0>
   13694:	00ffdfc4 	movi	r3,-129
   13698:	94c4b03a 	or	r2,r18,r19
   1369c:	a0e8703a 	and	r20,r20,r3
   136a0:	1000cc26 	beq	r2,zero,139d4 <___vfiprintf_internal_r+0xb38>
   136a4:	98021026 	beq	r19,zero,13ee8 <___vfiprintf_internal_r+0x104c>
   136a8:	dc402415 	stw	r17,144(sp)
   136ac:	dc002515 	stw	r16,148(sp)
   136b0:	9823883a 	mov	r17,r19
   136b4:	9021883a 	mov	r16,r18
   136b8:	dd401a04 	addi	r21,sp,104
   136bc:	4825883a 	mov	r18,r9
   136c0:	4027883a 	mov	r19,r8
   136c4:	8009883a 	mov	r4,r16
   136c8:	880b883a 	mov	r5,r17
   136cc:	01800284 	movi	r6,10
   136d0:	000f883a 	mov	r7,zero
   136d4:	00170e00 	call	170e0 <__umoddi3>
   136d8:	10800c04 	addi	r2,r2,48
   136dc:	ad7fffc4 	addi	r21,r21,-1
   136e0:	8009883a 	mov	r4,r16
   136e4:	880b883a 	mov	r5,r17
   136e8:	a8800005 	stb	r2,0(r21)
   136ec:	01800284 	movi	r6,10
   136f0:	000f883a 	mov	r7,zero
   136f4:	0016b680 	call	16b68 <__udivdi3>
   136f8:	1021883a 	mov	r16,r2
   136fc:	10c4b03a 	or	r2,r2,r3
   13700:	1823883a 	mov	r17,r3
   13704:	103fef1e 	bne	r2,zero,136c4 <__alt_data_end+0xfc0136c4>
   13708:	dc402417 	ldw	r17,144(sp)
   1370c:	dc002517 	ldw	r16,148(sp)
   13710:	9013883a 	mov	r9,r18
   13714:	9811883a 	mov	r8,r19
   13718:	da801e17 	ldw	r10,120(sp)
   1371c:	5567c83a 	sub	r19,r10,r21
   13720:	003ede06 	br	1329c <__alt_data_end+0xfc01329c>
   13724:	38803fcc 	andi	r2,r7,255
   13728:	1080201c 	xori	r2,r2,128
   1372c:	10bfe004 	addi	r2,r2,-128
   13730:	1002371e 	bne	r2,zero,14010 <___vfiprintf_internal_r+0x1174>
   13734:	01000044 	movi	r4,1
   13738:	01c00804 	movi	r7,32
   1373c:	80c00007 	ldb	r3,0(r16)
   13740:	003e3506 	br	13018 <__alt_data_end+0xfc013018>
   13744:	a5000054 	ori	r20,r20,1
   13748:	80c00007 	ldb	r3,0(r16)
   1374c:	003e3206 	br	13018 <__alt_data_end+0xfc013018>
   13750:	a5002014 	ori	r20,r20,128
   13754:	80c00007 	ldb	r3,0(r16)
   13758:	003e2f06 	br	13018 <__alt_data_end+0xfc013018>
   1375c:	8015883a 	mov	r10,r16
   13760:	0023883a 	mov	r17,zero
   13764:	18bff404 	addi	r2,r3,-48
   13768:	50c00007 	ldb	r3,0(r10)
   1376c:	8c4002a4 	muli	r17,r17,10
   13770:	84000044 	addi	r16,r16,1
   13774:	8015883a 	mov	r10,r16
   13778:	1463883a 	add	r17,r2,r17
   1377c:	18bff404 	addi	r2,r3,-48
   13780:	30bff92e 	bgeu	r6,r2,13768 <__alt_data_end+0xfc013768>
   13784:	003e2506 	br	1301c <__alt_data_end+0xfc01301c>
   13788:	21003fcc 	andi	r4,r4,255
   1378c:	2002d41e 	bne	r4,zero,142e0 <___vfiprintf_internal_r+0x1444>
   13790:	a5000414 	ori	r20,r20,16
   13794:	a080080c 	andi	r2,r20,32
   13798:	103fb51e 	bne	r2,zero,13670 <__alt_data_end+0xfc013670>
   1379c:	a080040c 	andi	r2,r20,16
   137a0:	1001f826 	beq	r2,zero,13f84 <___vfiprintf_internal_r+0x10e8>
   137a4:	da802217 	ldw	r10,136(sp)
   137a8:	54800017 	ldw	r18,0(r10)
   137ac:	52800104 	addi	r10,r10,4
   137b0:	da802215 	stw	r10,136(sp)
   137b4:	9027d7fa 	srai	r19,r18,31
   137b8:	9805883a 	mov	r2,r19
   137bc:	003fb206 	br	13688 <__alt_data_end+0xfc013688>
   137c0:	21003fcc 	andi	r4,r4,255
   137c4:	2002c41e 	bne	r4,zero,142d8 <___vfiprintf_internal_r+0x143c>
   137c8:	a5000414 	ori	r20,r20,16
   137cc:	a080080c 	andi	r2,r20,32
   137d0:	103f5f1e 	bne	r2,zero,13550 <__alt_data_end+0xfc013550>
   137d4:	a080040c 	andi	r2,r20,16
   137d8:	10020f26 	beq	r2,zero,14018 <___vfiprintf_internal_r+0x117c>
   137dc:	da802217 	ldw	r10,136(sp)
   137e0:	d8001d85 	stb	zero,118(sp)
   137e4:	0027883a 	mov	r19,zero
   137e8:	50800104 	addi	r2,r10,4
   137ec:	54800017 	ldw	r18,0(r10)
   137f0:	48021116 	blt	r9,zero,14038 <___vfiprintf_internal_r+0x119c>
   137f4:	00ffdfc4 	movi	r3,-129
   137f8:	d8802215 	stw	r2,136(sp)
   137fc:	a0e8703a 	and	r20,r20,r3
   13800:	903f5e1e 	bne	r18,zero,1357c <__alt_data_end+0xfc01357c>
   13804:	0039883a 	mov	fp,zero
   13808:	4802a626 	beq	r9,zero,142a4 <___vfiprintf_internal_r+0x1408>
   1380c:	0025883a 	mov	r18,zero
   13810:	0027883a 	mov	r19,zero
   13814:	003f5a06 	br	13580 <__alt_data_end+0xfc013580>
   13818:	21003fcc 	andi	r4,r4,255
   1381c:	20029f1e 	bne	r4,zero,1429c <___vfiprintf_internal_r+0x1400>
   13820:	a5000414 	ori	r20,r20,16
   13824:	a080080c 	andi	r2,r20,32
   13828:	10005e1e 	bne	r2,zero,139a4 <___vfiprintf_internal_r+0xb08>
   1382c:	a080040c 	andi	r2,r20,16
   13830:	1001a21e 	bne	r2,zero,13ebc <___vfiprintf_internal_r+0x1020>
   13834:	a080100c 	andi	r2,r20,64
   13838:	d8001d85 	stb	zero,118(sp)
   1383c:	da802217 	ldw	r10,136(sp)
   13840:	1002231e 	bne	r2,zero,140d0 <___vfiprintf_internal_r+0x1234>
   13844:	50800104 	addi	r2,r10,4
   13848:	54800017 	ldw	r18,0(r10)
   1384c:	0027883a 	mov	r19,zero
   13850:	4801a00e 	bge	r9,zero,13ed4 <___vfiprintf_internal_r+0x1038>
   13854:	d8802215 	stw	r2,136(sp)
   13858:	0039883a 	mov	fp,zero
   1385c:	94c4b03a 	or	r2,r18,r19
   13860:	103f901e 	bne	r2,zero,136a4 <__alt_data_end+0xfc0136a4>
   13864:	00800044 	movi	r2,1
   13868:	10803fcc 	andi	r2,r2,255
   1386c:	00c00044 	movi	r3,1
   13870:	10c05926 	beq	r2,r3,139d8 <___vfiprintf_internal_r+0xb3c>
   13874:	00c00084 	movi	r3,2
   13878:	10ffe41e 	bne	r2,r3,1380c <__alt_data_end+0xfc01380c>
   1387c:	0025883a 	mov	r18,zero
   13880:	0027883a 	mov	r19,zero
   13884:	00013d06 	br	13d7c <___vfiprintf_internal_r+0xee0>
   13888:	21003fcc 	andi	r4,r4,255
   1388c:	2002811e 	bne	r4,zero,14294 <___vfiprintf_internal_r+0x13f8>
   13890:	008000b4 	movhi	r2,2
   13894:	10953504 	addi	r2,r2,21716
   13898:	d8802615 	stw	r2,152(sp)
   1389c:	a080080c 	andi	r2,r20,32
   138a0:	103f561e 	bne	r2,zero,135fc <__alt_data_end+0xfc0135fc>
   138a4:	a080040c 	andi	r2,r20,16
   138a8:	1001d126 	beq	r2,zero,13ff0 <___vfiprintf_internal_r+0x1154>
   138ac:	da802217 	ldw	r10,136(sp)
   138b0:	0027883a 	mov	r19,zero
   138b4:	54800017 	ldw	r18,0(r10)
   138b8:	52800104 	addi	r10,r10,4
   138bc:	da802215 	stw	r10,136(sp)
   138c0:	003f5306 	br	13610 <__alt_data_end+0xfc013610>
   138c4:	da802217 	ldw	r10,136(sp)
   138c8:	d8001d85 	stb	zero,118(sp)
   138cc:	55400017 	ldw	r21,0(r10)
   138d0:	50c00104 	addi	r3,r10,4
   138d4:	a8024226 	beq	r21,zero,141e0 <___vfiprintf_internal_r+0x1344>
   138d8:	48021816 	blt	r9,zero,1413c <___vfiprintf_internal_r+0x12a0>
   138dc:	480d883a 	mov	r6,r9
   138e0:	000b883a 	mov	r5,zero
   138e4:	a809883a 	mov	r4,r21
   138e8:	d8c02a15 	stw	r3,168(sp)
   138ec:	da002b15 	stw	r8,172(sp)
   138f0:	da402c15 	stw	r9,176(sp)
   138f4:	00058540 	call	5854 <memchr>
   138f8:	d8c02a17 	ldw	r3,168(sp)
   138fc:	da002b17 	ldw	r8,172(sp)
   13900:	da402c17 	ldw	r9,176(sp)
   13904:	10024826 	beq	r2,zero,14228 <___vfiprintf_internal_r+0x138c>
   13908:	1567c83a 	sub	r19,r2,r21
   1390c:	df001d83 	ldbu	fp,118(sp)
   13910:	d8c02215 	stw	r3,136(sp)
   13914:	0013883a 	mov	r9,zero
   13918:	003e6006 	br	1329c <__alt_data_end+0xfc01329c>
   1391c:	21003fcc 	andi	r4,r4,255
   13920:	203fc026 	beq	r4,zero,13824 <__alt_data_end+0xfc013824>
   13924:	d9c01d85 	stb	r7,118(sp)
   13928:	003fbe06 	br	13824 <__alt_data_end+0xfc013824>
   1392c:	da802217 	ldw	r10,136(sp)
   13930:	54400017 	ldw	r17,0(r10)
   13934:	50800104 	addi	r2,r10,4
   13938:	883e3b16 	blt	r17,zero,13228 <__alt_data_end+0xfc013228>
   1393c:	d8802215 	stw	r2,136(sp)
   13940:	80c00007 	ldb	r3,0(r16)
   13944:	003db406 	br	13018 <__alt_data_end+0xfc013018>
   13948:	01000044 	movi	r4,1
   1394c:	01c00ac4 	movi	r7,43
   13950:	80c00007 	ldb	r3,0(r16)
   13954:	003db006 	br	13018 <__alt_data_end+0xfc013018>
   13958:	80c00007 	ldb	r3,0(r16)
   1395c:	82800044 	addi	r10,r16,1
   13960:	1b423c26 	beq	r3,r13,14254 <___vfiprintf_internal_r+0x13b8>
   13964:	18bff404 	addi	r2,r3,-48
   13968:	0013883a 	mov	r9,zero
   1396c:	30822b36 	bltu	r6,r2,1421c <___vfiprintf_internal_r+0x1380>
   13970:	50c00007 	ldb	r3,0(r10)
   13974:	4a4002a4 	muli	r9,r9,10
   13978:	54000044 	addi	r16,r10,1
   1397c:	8015883a 	mov	r10,r16
   13980:	4893883a 	add	r9,r9,r2
   13984:	18bff404 	addi	r2,r3,-48
   13988:	30bff92e 	bgeu	r6,r2,13970 <__alt_data_end+0xfc013970>
   1398c:	483da30e 	bge	r9,zero,1301c <__alt_data_end+0xfc01301c>
   13990:	027fffc4 	movi	r9,-1
   13994:	003da106 	br	1301c <__alt_data_end+0xfc01301c>
   13998:	a5001014 	ori	r20,r20,64
   1399c:	80c00007 	ldb	r3,0(r16)
   139a0:	003d9d06 	br	13018 <__alt_data_end+0xfc013018>
   139a4:	da802217 	ldw	r10,136(sp)
   139a8:	d8001d85 	stb	zero,118(sp)
   139ac:	50c00204 	addi	r3,r10,8
   139b0:	54800017 	ldw	r18,0(r10)
   139b4:	54c00117 	ldw	r19,4(r10)
   139b8:	4801ca16 	blt	r9,zero,140e4 <___vfiprintf_internal_r+0x1248>
   139bc:	013fdfc4 	movi	r4,-129
   139c0:	94c4b03a 	or	r2,r18,r19
   139c4:	d8c02215 	stw	r3,136(sp)
   139c8:	a128703a 	and	r20,r20,r4
   139cc:	0039883a 	mov	fp,zero
   139d0:	103f341e 	bne	r2,zero,136a4 <__alt_data_end+0xfc0136a4>
   139d4:	483e2e26 	beq	r9,zero,13290 <__alt_data_end+0xfc013290>
   139d8:	0025883a 	mov	r18,zero
   139dc:	94800c04 	addi	r18,r18,48
   139e0:	dc8019c5 	stb	r18,103(sp)
   139e4:	dcc02717 	ldw	r19,156(sp)
   139e8:	dd4019c4 	addi	r21,sp,103
   139ec:	003e2b06 	br	1329c <__alt_data_end+0xfc01329c>
   139f0:	21003fcc 	andi	r4,r4,255
   139f4:	2002361e 	bne	r4,zero,142d0 <___vfiprintf_internal_r+0x1434>
   139f8:	1801c126 	beq	r3,zero,14100 <___vfiprintf_internal_r+0x1264>
   139fc:	04800044 	movi	r18,1
   13a00:	d8c01005 	stb	r3,64(sp)
   13a04:	d8001d85 	stb	zero,118(sp)
   13a08:	9027883a 	mov	r19,r18
   13a0c:	dd401004 	addi	r21,sp,64
   13a10:	003f1106 	br	13658 <__alt_data_end+0xfc013658>
   13a14:	d9402117 	ldw	r5,132(sp)
   13a18:	d9002017 	ldw	r4,128(sp)
   13a1c:	d9801a04 	addi	r6,sp,104
   13a20:	d9c02b15 	stw	r7,172(sp)
   13a24:	dbc02a15 	stw	r15,168(sp)
   13a28:	0012d880 	call	12d88 <__sprint_r.part.0>
   13a2c:	d9c02b17 	ldw	r7,172(sp)
   13a30:	dbc02a17 	ldw	r15,168(sp)
   13a34:	10006d1e 	bne	r2,zero,13bec <___vfiprintf_internal_r+0xd50>
   13a38:	d9801b17 	ldw	r6,108(sp)
   13a3c:	d8801c17 	ldw	r2,112(sp)
   13a40:	d811883a 	mov	r8,sp
   13a44:	31400044 	addi	r5,r6,1
   13a48:	003e3306 	br	13318 <__alt_data_end+0xfc013318>
   13a4c:	d9401b17 	ldw	r5,108(sp)
   13a50:	d8801c17 	ldw	r2,112(sp)
   13a54:	29000044 	addi	r4,r5,1
   13a58:	d8c01d87 	ldb	r3,118(sp)
   13a5c:	183e4d26 	beq	r3,zero,13394 <__alt_data_end+0xfc013394>
   13a60:	00c00044 	movi	r3,1
   13a64:	d9401d84 	addi	r5,sp,118
   13a68:	10c5883a 	add	r2,r2,r3
   13a6c:	41400015 	stw	r5,0(r8)
   13a70:	40c00115 	stw	r3,4(r8)
   13a74:	d8801c15 	stw	r2,112(sp)
   13a78:	d9001b15 	stw	r4,108(sp)
   13a7c:	014001c4 	movi	r5,7
   13a80:	2900a90e 	bge	r5,r4,13d28 <___vfiprintf_internal_r+0xe8c>
   13a84:	1000da1e 	bne	r2,zero,13df0 <___vfiprintf_internal_r+0xf54>
   13a88:	7000ab1e 	bne	r14,zero,13d38 <___vfiprintf_internal_r+0xe9c>
   13a8c:	000b883a 	mov	r5,zero
   13a90:	1809883a 	mov	r4,r3
   13a94:	d811883a 	mov	r8,sp
   13a98:	00c02004 	movi	r3,128
   13a9c:	e0fe4d26 	beq	fp,r3,133d4 <__alt_data_end+0xfc0133d4>
   13aa0:	4cf9c83a 	sub	fp,r9,r19
   13aa4:	073e7b0e 	bge	zero,fp,13494 <__alt_data_end+0xfc013494>
   13aa8:	01c00404 	movi	r7,16
   13aac:	3f01900e 	bge	r7,fp,140f0 <___vfiprintf_internal_r+0x1254>
   13ab0:	00c000b4 	movhi	r3,2
   13ab4:	18d66504 	addi	r3,r3,22932
   13ab8:	d8c02415 	stw	r3,144(sp)
   13abc:	034001c4 	movi	r13,7
   13ac0:	00000506 	br	13ad8 <___vfiprintf_internal_r+0xc3c>
   13ac4:	29000084 	addi	r4,r5,2
   13ac8:	42000204 	addi	r8,r8,8
   13acc:	180b883a 	mov	r5,r3
   13ad0:	e73ffc04 	addi	fp,fp,-16
   13ad4:	3f000d0e 	bge	r7,fp,13b0c <___vfiprintf_internal_r+0xc70>
   13ad8:	10800404 	addi	r2,r2,16
   13adc:	28c00044 	addi	r3,r5,1
   13ae0:	45c00015 	stw	r23,0(r8)
   13ae4:	41c00115 	stw	r7,4(r8)
   13ae8:	d8801c15 	stw	r2,112(sp)
   13aec:	d8c01b15 	stw	r3,108(sp)
   13af0:	68fff40e 	bge	r13,r3,13ac4 <__alt_data_end+0xfc013ac4>
   13af4:	1000101e 	bne	r2,zero,13b38 <___vfiprintf_internal_r+0xc9c>
   13af8:	e73ffc04 	addi	fp,fp,-16
   13afc:	01000044 	movi	r4,1
   13b00:	000b883a 	mov	r5,zero
   13b04:	d811883a 	mov	r8,sp
   13b08:	3f3ff316 	blt	r7,fp,13ad8 <__alt_data_end+0xfc013ad8>
   13b0c:	da802417 	ldw	r10,144(sp)
   13b10:	1705883a 	add	r2,r2,fp
   13b14:	47000115 	stw	fp,4(r8)
   13b18:	42800015 	stw	r10,0(r8)
   13b1c:	d8801c15 	stw	r2,112(sp)
   13b20:	d9001b15 	stw	r4,108(sp)
   13b24:	00c001c4 	movi	r3,7
   13b28:	19003616 	blt	r3,r4,13c04 <___vfiprintf_internal_r+0xd68>
   13b2c:	42000204 	addi	r8,r8,8
   13b30:	21000044 	addi	r4,r4,1
   13b34:	003e5706 	br	13494 <__alt_data_end+0xfc013494>
   13b38:	d9402117 	ldw	r5,132(sp)
   13b3c:	d9002017 	ldw	r4,128(sp)
   13b40:	d9801a04 	addi	r6,sp,104
   13b44:	d9c02b15 	stw	r7,172(sp)
   13b48:	db402a15 	stw	r13,168(sp)
   13b4c:	0012d880 	call	12d88 <__sprint_r.part.0>
   13b50:	d9c02b17 	ldw	r7,172(sp)
   13b54:	db402a17 	ldw	r13,168(sp)
   13b58:	1000241e 	bne	r2,zero,13bec <___vfiprintf_internal_r+0xd50>
   13b5c:	d9401b17 	ldw	r5,108(sp)
   13b60:	d8801c17 	ldw	r2,112(sp)
   13b64:	d811883a 	mov	r8,sp
   13b68:	29000044 	addi	r4,r5,1
   13b6c:	003fd806 	br	13ad0 <__alt_data_end+0xfc013ad0>
   13b70:	d9401b17 	ldw	r5,108(sp)
   13b74:	00c000b4 	movhi	r3,2
   13b78:	18d66904 	addi	r3,r3,22948
   13b7c:	d8c02415 	stw	r3,144(sp)
   13b80:	29400044 	addi	r5,r5,1
   13b84:	d8c02417 	ldw	r3,144(sp)
   13b88:	14c5883a 	add	r2,r2,r19
   13b8c:	44c00115 	stw	r19,4(r8)
   13b90:	40c00015 	stw	r3,0(r8)
   13b94:	d8801c15 	stw	r2,112(sp)
   13b98:	d9401b15 	stw	r5,108(sp)
   13b9c:	00c001c4 	movi	r3,7
   13ba0:	1940070e 	bge	r3,r5,13bc0 <___vfiprintf_internal_r+0xd24>
   13ba4:	103e4826 	beq	r2,zero,134c8 <__alt_data_end+0xfc0134c8>
   13ba8:	d9402117 	ldw	r5,132(sp)
   13bac:	d9002017 	ldw	r4,128(sp)
   13bb0:	d9801a04 	addi	r6,sp,104
   13bb4:	0012d880 	call	12d88 <__sprint_r.part.0>
   13bb8:	10000c1e 	bne	r2,zero,13bec <___vfiprintf_internal_r+0xd50>
   13bbc:	d8801c17 	ldw	r2,112(sp)
   13bc0:	8c80010e 	bge	r17,r18,13bc8 <___vfiprintf_internal_r+0xd2c>
   13bc4:	9023883a 	mov	r17,r18
   13bc8:	da802317 	ldw	r10,140(sp)
   13bcc:	5455883a 	add	r10,r10,r17
   13bd0:	da802315 	stw	r10,140(sp)
   13bd4:	103e4126 	beq	r2,zero,134dc <__alt_data_end+0xfc0134dc>
   13bd8:	d9402117 	ldw	r5,132(sp)
   13bdc:	d9002017 	ldw	r4,128(sp)
   13be0:	d9801a04 	addi	r6,sp,104
   13be4:	0012d880 	call	12d88 <__sprint_r.part.0>
   13be8:	103e3c26 	beq	r2,zero,134dc <__alt_data_end+0xfc0134dc>
   13bec:	dd002117 	ldw	r20,132(sp)
   13bf0:	a080030b 	ldhu	r2,12(r20)
   13bf4:	1080100c 	andi	r2,r2,64
   13bf8:	1001231e 	bne	r2,zero,14088 <___vfiprintf_internal_r+0x11ec>
   13bfc:	d8802317 	ldw	r2,140(sp)
   13c00:	003d7b06 	br	131f0 <__alt_data_end+0xfc0131f0>
   13c04:	1000991e 	bne	r2,zero,13e6c <___vfiprintf_internal_r+0xfd0>
   13c08:	00c00044 	movi	r3,1
   13c0c:	9805883a 	mov	r2,r19
   13c10:	dd400015 	stw	r21,0(sp)
   13c14:	dcc00115 	stw	r19,4(sp)
   13c18:	dcc01c15 	stw	r19,112(sp)
   13c1c:	d8c01b15 	stw	r3,108(sp)
   13c20:	d811883a 	mov	r8,sp
   13c24:	42000204 	addi	r8,r8,8
   13c28:	a2c0010c 	andi	r11,r20,4
   13c2c:	583fe426 	beq	r11,zero,13bc0 <__alt_data_end+0xfc013bc0>
   13c30:	8ca7c83a 	sub	r19,r17,r18
   13c34:	04ffe20e 	bge	zero,r19,13bc0 <__alt_data_end+0xfc013bc0>
   13c38:	01c00404 	movi	r7,16
   13c3c:	3cffcc0e 	bge	r7,r19,13b70 <__alt_data_end+0xfc013b70>
   13c40:	028000b4 	movhi	r10,2
   13c44:	52966904 	addi	r10,r10,22948
   13c48:	d9001b17 	ldw	r4,108(sp)
   13c4c:	da802415 	stw	r10,144(sp)
   13c50:	382b883a 	mov	r21,r7
   13c54:	050001c4 	movi	r20,7
   13c58:	df002017 	ldw	fp,128(sp)
   13c5c:	00000506 	br	13c74 <___vfiprintf_internal_r+0xdd8>
   13c60:	21400084 	addi	r5,r4,2
   13c64:	42000204 	addi	r8,r8,8
   13c68:	1809883a 	mov	r4,r3
   13c6c:	9cfffc04 	addi	r19,r19,-16
   13c70:	acffc40e 	bge	r21,r19,13b84 <__alt_data_end+0xfc013b84>
   13c74:	10800404 	addi	r2,r2,16
   13c78:	20c00044 	addi	r3,r4,1
   13c7c:	45800015 	stw	r22,0(r8)
   13c80:	45400115 	stw	r21,4(r8)
   13c84:	d8801c15 	stw	r2,112(sp)
   13c88:	d8c01b15 	stw	r3,108(sp)
   13c8c:	a0fff40e 	bge	r20,r3,13c60 <__alt_data_end+0xfc013c60>
   13c90:	1000041e 	bne	r2,zero,13ca4 <___vfiprintf_internal_r+0xe08>
   13c94:	01400044 	movi	r5,1
   13c98:	0009883a 	mov	r4,zero
   13c9c:	d811883a 	mov	r8,sp
   13ca0:	003ff206 	br	13c6c <__alt_data_end+0xfc013c6c>
   13ca4:	d9402117 	ldw	r5,132(sp)
   13ca8:	d9801a04 	addi	r6,sp,104
   13cac:	e009883a 	mov	r4,fp
   13cb0:	0012d880 	call	12d88 <__sprint_r.part.0>
   13cb4:	103fcd1e 	bne	r2,zero,13bec <__alt_data_end+0xfc013bec>
   13cb8:	d9001b17 	ldw	r4,108(sp)
   13cbc:	d8801c17 	ldw	r2,112(sp)
   13cc0:	d811883a 	mov	r8,sp
   13cc4:	21400044 	addi	r5,r4,1
   13cc8:	003fe806 	br	13c6c <__alt_data_end+0xfc013c6c>
   13ccc:	d9402117 	ldw	r5,132(sp)
   13cd0:	d9002017 	ldw	r4,128(sp)
   13cd4:	d9801a04 	addi	r6,sp,104
   13cd8:	d9c02b15 	stw	r7,172(sp)
   13cdc:	db402a15 	stw	r13,168(sp)
   13ce0:	0012d880 	call	12d88 <__sprint_r.part.0>
   13ce4:	d9c02b17 	ldw	r7,172(sp)
   13ce8:	db402a17 	ldw	r13,168(sp)
   13cec:	103fbf1e 	bne	r2,zero,13bec <__alt_data_end+0xfc013bec>
   13cf0:	d9401b17 	ldw	r5,108(sp)
   13cf4:	d8801c17 	ldw	r2,112(sp)
   13cf8:	d811883a 	mov	r8,sp
   13cfc:	29800044 	addi	r6,r5,1
   13d00:	003dc406 	br	13414 <__alt_data_end+0xfc013414>
   13d04:	1000d21e 	bne	r2,zero,14050 <___vfiprintf_internal_r+0x11b4>
   13d08:	d8c01d87 	ldb	r3,118(sp)
   13d0c:	18009526 	beq	r3,zero,13f64 <___vfiprintf_internal_r+0x10c8>
   13d10:	00800044 	movi	r2,1
   13d14:	d8c01d84 	addi	r3,sp,118
   13d18:	1009883a 	mov	r4,r2
   13d1c:	d8c00015 	stw	r3,0(sp)
   13d20:	d8800115 	stw	r2,4(sp)
   13d24:	d811883a 	mov	r8,sp
   13d28:	200b883a 	mov	r5,r4
   13d2c:	42000204 	addi	r8,r8,8
   13d30:	21000044 	addi	r4,r4,1
   13d34:	003d9706 	br	13394 <__alt_data_end+0xfc013394>
   13d38:	d9001d04 	addi	r4,sp,116
   13d3c:	00800084 	movi	r2,2
   13d40:	d9000015 	stw	r4,0(sp)
   13d44:	d8800115 	stw	r2,4(sp)
   13d48:	1809883a 	mov	r4,r3
   13d4c:	d811883a 	mov	r8,sp
   13d50:	200b883a 	mov	r5,r4
   13d54:	42000204 	addi	r8,r8,8
   13d58:	21000044 	addi	r4,r4,1
   13d5c:	003f4e06 	br	13a98 <__alt_data_end+0xfc013a98>
   13d60:	d8001d85 	stb	zero,118(sp)
   13d64:	48005016 	blt	r9,zero,13ea8 <___vfiprintf_internal_r+0x100c>
   13d68:	00ffdfc4 	movi	r3,-129
   13d6c:	94c4b03a 	or	r2,r18,r19
   13d70:	a0e8703a 	and	r20,r20,r3
   13d74:	103d4426 	beq	r2,zero,13288 <__alt_data_end+0xfc013288>
   13d78:	0039883a 	mov	fp,zero
   13d7c:	d9002617 	ldw	r4,152(sp)
   13d80:	dd401a04 	addi	r21,sp,104
   13d84:	908003cc 	andi	r2,r18,15
   13d88:	9806973a 	slli	r3,r19,28
   13d8c:	2085883a 	add	r2,r4,r2
   13d90:	9024d13a 	srli	r18,r18,4
   13d94:	10800003 	ldbu	r2,0(r2)
   13d98:	9826d13a 	srli	r19,r19,4
   13d9c:	ad7fffc4 	addi	r21,r21,-1
   13da0:	1ca4b03a 	or	r18,r3,r18
   13da4:	a8800005 	stb	r2,0(r21)
   13da8:	94c4b03a 	or	r2,r18,r19
   13dac:	103ff51e 	bne	r2,zero,13d84 <__alt_data_end+0xfc013d84>
   13db0:	003e5906 	br	13718 <__alt_data_end+0xfc013718>
   13db4:	d9402117 	ldw	r5,132(sp)
   13db8:	d9002017 	ldw	r4,128(sp)
   13dbc:	d9801a04 	addi	r6,sp,104
   13dc0:	0012d880 	call	12d88 <__sprint_r.part.0>
   13dc4:	103f891e 	bne	r2,zero,13bec <__alt_data_end+0xfc013bec>
   13dc8:	d8801c17 	ldw	r2,112(sp)
   13dcc:	d811883a 	mov	r8,sp
   13dd0:	003f9506 	br	13c28 <__alt_data_end+0xfc013c28>
   13dd4:	d9402117 	ldw	r5,132(sp)
   13dd8:	d9002017 	ldw	r4,128(sp)
   13ddc:	d9801a04 	addi	r6,sp,104
   13de0:	0012d880 	call	12d88 <__sprint_r.part.0>
   13de4:	103f811e 	bne	r2,zero,13bec <__alt_data_end+0xfc013bec>
   13de8:	d811883a 	mov	r8,sp
   13dec:	003ced06 	br	131a4 <__alt_data_end+0xfc0131a4>
   13df0:	d9402117 	ldw	r5,132(sp)
   13df4:	d9002017 	ldw	r4,128(sp)
   13df8:	d9801a04 	addi	r6,sp,104
   13dfc:	da402c15 	stw	r9,176(sp)
   13e00:	db802a15 	stw	r14,168(sp)
   13e04:	0012d880 	call	12d88 <__sprint_r.part.0>
   13e08:	da402c17 	ldw	r9,176(sp)
   13e0c:	db802a17 	ldw	r14,168(sp)
   13e10:	103f761e 	bne	r2,zero,13bec <__alt_data_end+0xfc013bec>
   13e14:	d9401b17 	ldw	r5,108(sp)
   13e18:	d8801c17 	ldw	r2,112(sp)
   13e1c:	d811883a 	mov	r8,sp
   13e20:	29000044 	addi	r4,r5,1
   13e24:	003d5b06 	br	13394 <__alt_data_end+0xfc013394>
   13e28:	d9402117 	ldw	r5,132(sp)
   13e2c:	d9002017 	ldw	r4,128(sp)
   13e30:	d9801a04 	addi	r6,sp,104
   13e34:	da402c15 	stw	r9,176(sp)
   13e38:	0012d880 	call	12d88 <__sprint_r.part.0>
   13e3c:	da402c17 	ldw	r9,176(sp)
   13e40:	103f6a1e 	bne	r2,zero,13bec <__alt_data_end+0xfc013bec>
   13e44:	d9401b17 	ldw	r5,108(sp)
   13e48:	d8801c17 	ldw	r2,112(sp)
   13e4c:	d811883a 	mov	r8,sp
   13e50:	29000044 	addi	r4,r5,1
   13e54:	003f1006 	br	13a98 <__alt_data_end+0xfc013a98>
   13e58:	1000c31e 	bne	r2,zero,14168 <___vfiprintf_internal_r+0x12cc>
   13e5c:	01000044 	movi	r4,1
   13e60:	000b883a 	mov	r5,zero
   13e64:	d811883a 	mov	r8,sp
   13e68:	003f0d06 	br	13aa0 <__alt_data_end+0xfc013aa0>
   13e6c:	d9402117 	ldw	r5,132(sp)
   13e70:	d9002017 	ldw	r4,128(sp)
   13e74:	d9801a04 	addi	r6,sp,104
   13e78:	0012d880 	call	12d88 <__sprint_r.part.0>
   13e7c:	103f5b1e 	bne	r2,zero,13bec <__alt_data_end+0xfc013bec>
   13e80:	d9001b17 	ldw	r4,108(sp)
   13e84:	d8801c17 	ldw	r2,112(sp)
   13e88:	d811883a 	mov	r8,sp
   13e8c:	21000044 	addi	r4,r4,1
   13e90:	003d8006 	br	13494 <__alt_data_end+0xfc013494>
   13e94:	010000b4 	movhi	r4,2
   13e98:	21153a04 	addi	r4,r4,21736
   13e9c:	d9002615 	stw	r4,152(sp)
   13ea0:	d8c02215 	stw	r3,136(sp)
   13ea4:	1029883a 	mov	r20,r2
   13ea8:	94c4b03a 	or	r2,r18,r19
   13eac:	103fb21e 	bne	r2,zero,13d78 <__alt_data_end+0xfc013d78>
   13eb0:	0039883a 	mov	fp,zero
   13eb4:	00800084 	movi	r2,2
   13eb8:	003e6b06 	br	13868 <__alt_data_end+0xfc013868>
   13ebc:	da802217 	ldw	r10,136(sp)
   13ec0:	d8001d85 	stb	zero,118(sp)
   13ec4:	0027883a 	mov	r19,zero
   13ec8:	50800104 	addi	r2,r10,4
   13ecc:	54800017 	ldw	r18,0(r10)
   13ed0:	483e6016 	blt	r9,zero,13854 <__alt_data_end+0xfc013854>
   13ed4:	00ffdfc4 	movi	r3,-129
   13ed8:	d8802215 	stw	r2,136(sp)
   13edc:	a0e8703a 	and	r20,r20,r3
   13ee0:	0039883a 	mov	fp,zero
   13ee4:	903ebb26 	beq	r18,zero,139d4 <__alt_data_end+0xfc0139d4>
   13ee8:	00800244 	movi	r2,9
   13eec:	14bdee36 	bltu	r2,r18,136a8 <__alt_data_end+0xfc0136a8>
   13ef0:	003eba06 	br	139dc <__alt_data_end+0xfc0139dc>
   13ef4:	00800c04 	movi	r2,48
   13ef8:	d8c01d45 	stb	r3,117(sp)
   13efc:	d8801d05 	stb	r2,116(sp)
   13f00:	d8001d85 	stb	zero,118(sp)
   13f04:	a0c00094 	ori	r3,r20,2
   13f08:	4800a916 	blt	r9,zero,141b0 <___vfiprintf_internal_r+0x1314>
   13f0c:	00bfdfc4 	movi	r2,-129
   13f10:	a096703a 	and	r11,r20,r2
   13f14:	5d000094 	ori	r20,r11,2
   13f18:	0039883a 	mov	fp,zero
   13f1c:	003f9706 	br	13d7c <__alt_data_end+0xfc013d7c>
   13f20:	8025883a 	mov	r18,r16
   13f24:	003c2e06 	br	12fe0 <__alt_data_end+0xfc012fe0>
   13f28:	008000b4 	movhi	r2,2
   13f2c:	10953a04 	addi	r2,r2,21736
   13f30:	0039883a 	mov	fp,zero
   13f34:	d8802615 	stw	r2,152(sp)
   13f38:	003f9006 	br	13d7c <__alt_data_end+0xfc013d7c>
   13f3c:	04a5c83a 	sub	r18,zero,r18
   13f40:	07000b44 	movi	fp,45
   13f44:	9004c03a 	cmpne	r2,r18,zero
   13f48:	04e7c83a 	sub	r19,zero,r19
   13f4c:	df001d85 	stb	fp,118(sp)
   13f50:	98a7c83a 	sub	r19,r19,r2
   13f54:	48009f16 	blt	r9,zero,141d4 <___vfiprintf_internal_r+0x1338>
   13f58:	00bfdfc4 	movi	r2,-129
   13f5c:	a0a8703a 	and	r20,r20,r2
   13f60:	003dd006 	br	136a4 <__alt_data_end+0xfc0136a4>
   13f64:	70004c26 	beq	r14,zero,14098 <___vfiprintf_internal_r+0x11fc>
   13f68:	00800084 	movi	r2,2
   13f6c:	d8c01d04 	addi	r3,sp,116
   13f70:	d8c00015 	stw	r3,0(sp)
   13f74:	d8800115 	stw	r2,4(sp)
   13f78:	01000044 	movi	r4,1
   13f7c:	d811883a 	mov	r8,sp
   13f80:	003f7306 	br	13d50 <__alt_data_end+0xfc013d50>
   13f84:	a080100c 	andi	r2,r20,64
   13f88:	da802217 	ldw	r10,136(sp)
   13f8c:	103e0626 	beq	r2,zero,137a8 <__alt_data_end+0xfc0137a8>
   13f90:	5480000f 	ldh	r18,0(r10)
   13f94:	52800104 	addi	r10,r10,4
   13f98:	da802215 	stw	r10,136(sp)
   13f9c:	9027d7fa 	srai	r19,r18,31
   13fa0:	9805883a 	mov	r2,r19
   13fa4:	003db806 	br	13688 <__alt_data_end+0xfc013688>
   13fa8:	a080040c 	andi	r2,r20,16
   13fac:	1000091e 	bne	r2,zero,13fd4 <___vfiprintf_internal_r+0x1138>
   13fb0:	a2c0100c 	andi	r11,r20,64
   13fb4:	58000726 	beq	r11,zero,13fd4 <___vfiprintf_internal_r+0x1138>
   13fb8:	da802217 	ldw	r10,136(sp)
   13fbc:	50800017 	ldw	r2,0(r10)
   13fc0:	52800104 	addi	r10,r10,4
   13fc4:	da802215 	stw	r10,136(sp)
   13fc8:	da802317 	ldw	r10,140(sp)
   13fcc:	1280000d 	sth	r10,0(r2)
   13fd0:	003be706 	br	12f70 <__alt_data_end+0xfc012f70>
   13fd4:	da802217 	ldw	r10,136(sp)
   13fd8:	50800017 	ldw	r2,0(r10)
   13fdc:	52800104 	addi	r10,r10,4
   13fe0:	da802215 	stw	r10,136(sp)
   13fe4:	da802317 	ldw	r10,140(sp)
   13fe8:	12800015 	stw	r10,0(r2)
   13fec:	003be006 	br	12f70 <__alt_data_end+0xfc012f70>
   13ff0:	a080100c 	andi	r2,r20,64
   13ff4:	da802217 	ldw	r10,136(sp)
   13ff8:	10003026 	beq	r2,zero,140bc <___vfiprintf_internal_r+0x1220>
   13ffc:	5480000b 	ldhu	r18,0(r10)
   14000:	52800104 	addi	r10,r10,4
   14004:	0027883a 	mov	r19,zero
   14008:	da802215 	stw	r10,136(sp)
   1400c:	003d8006 	br	13610 <__alt_data_end+0xfc013610>
   14010:	80c00007 	ldb	r3,0(r16)
   14014:	003c0006 	br	13018 <__alt_data_end+0xfc013018>
   14018:	a080100c 	andi	r2,r20,64
   1401c:	d8001d85 	stb	zero,118(sp)
   14020:	da802217 	ldw	r10,136(sp)
   14024:	1000201e 	bne	r2,zero,140a8 <___vfiprintf_internal_r+0x120c>
   14028:	50800104 	addi	r2,r10,4
   1402c:	54800017 	ldw	r18,0(r10)
   14030:	0027883a 	mov	r19,zero
   14034:	483def0e 	bge	r9,zero,137f4 <__alt_data_end+0xfc0137f4>
   14038:	94c6b03a 	or	r3,r18,r19
   1403c:	d8802215 	stw	r2,136(sp)
   14040:	183d4e1e 	bne	r3,zero,1357c <__alt_data_end+0xfc01357c>
   14044:	0039883a 	mov	fp,zero
   14048:	0005883a 	mov	r2,zero
   1404c:	003e0606 	br	13868 <__alt_data_end+0xfc013868>
   14050:	d9402117 	ldw	r5,132(sp)
   14054:	d9002017 	ldw	r4,128(sp)
   14058:	d9801a04 	addi	r6,sp,104
   1405c:	da402c15 	stw	r9,176(sp)
   14060:	db802a15 	stw	r14,168(sp)
   14064:	0012d880 	call	12d88 <__sprint_r.part.0>
   14068:	da402c17 	ldw	r9,176(sp)
   1406c:	db802a17 	ldw	r14,168(sp)
   14070:	103ede1e 	bne	r2,zero,13bec <__alt_data_end+0xfc013bec>
   14074:	d9401b17 	ldw	r5,108(sp)
   14078:	d8801c17 	ldw	r2,112(sp)
   1407c:	d811883a 	mov	r8,sp
   14080:	29000044 	addi	r4,r5,1
   14084:	003e7406 	br	13a58 <__alt_data_end+0xfc013a58>
   14088:	00bfffc4 	movi	r2,-1
   1408c:	003c5806 	br	131f0 <__alt_data_end+0xfc0131f0>
   14090:	d811883a 	mov	r8,sp
   14094:	003ee806 	br	13c38 <__alt_data_end+0xfc013c38>
   14098:	000b883a 	mov	r5,zero
   1409c:	01000044 	movi	r4,1
   140a0:	d811883a 	mov	r8,sp
   140a4:	003e7c06 	br	13a98 <__alt_data_end+0xfc013a98>
   140a8:	50800104 	addi	r2,r10,4
   140ac:	5480000b 	ldhu	r18,0(r10)
   140b0:	0027883a 	mov	r19,zero
   140b4:	483dcf0e 	bge	r9,zero,137f4 <__alt_data_end+0xfc0137f4>
   140b8:	003fdf06 	br	14038 <__alt_data_end+0xfc014038>
   140bc:	54800017 	ldw	r18,0(r10)
   140c0:	52800104 	addi	r10,r10,4
   140c4:	0027883a 	mov	r19,zero
   140c8:	da802215 	stw	r10,136(sp)
   140cc:	003d5006 	br	13610 <__alt_data_end+0xfc013610>
   140d0:	50800104 	addi	r2,r10,4
   140d4:	5480000b 	ldhu	r18,0(r10)
   140d8:	0027883a 	mov	r19,zero
   140dc:	483f7d0e 	bge	r9,zero,13ed4 <__alt_data_end+0xfc013ed4>
   140e0:	003ddc06 	br	13854 <__alt_data_end+0xfc013854>
   140e4:	d8c02215 	stw	r3,136(sp)
   140e8:	0039883a 	mov	fp,zero
   140ec:	003ddb06 	br	1385c <__alt_data_end+0xfc01385c>
   140f0:	028000b4 	movhi	r10,2
   140f4:	52966504 	addi	r10,r10,22932
   140f8:	da802415 	stw	r10,144(sp)
   140fc:	003e8306 	br	13b0c <__alt_data_end+0xfc013b0c>
   14100:	d8801c17 	ldw	r2,112(sp)
   14104:	dd002117 	ldw	r20,132(sp)
   14108:	103eb926 	beq	r2,zero,13bf0 <__alt_data_end+0xfc013bf0>
   1410c:	d9002017 	ldw	r4,128(sp)
   14110:	d9801a04 	addi	r6,sp,104
   14114:	a00b883a 	mov	r5,r20
   14118:	0012d880 	call	12d88 <__sprint_r.part.0>
   1411c:	003eb406 	br	13bf0 <__alt_data_end+0xfc013bf0>
   14120:	80c00043 	ldbu	r3,1(r16)
   14124:	a5000814 	ori	r20,r20,32
   14128:	84000044 	addi	r16,r16,1
   1412c:	18c03fcc 	andi	r3,r3,255
   14130:	18c0201c 	xori	r3,r3,128
   14134:	18ffe004 	addi	r3,r3,-128
   14138:	003bb706 	br	13018 <__alt_data_end+0xfc013018>
   1413c:	a809883a 	mov	r4,r21
   14140:	d8c02a15 	stw	r3,168(sp)
   14144:	da002b15 	stw	r8,172(sp)
   14148:	00066700 	call	6670 <strlen>
   1414c:	d8c02a17 	ldw	r3,168(sp)
   14150:	1027883a 	mov	r19,r2
   14154:	df001d83 	ldbu	fp,118(sp)
   14158:	d8c02215 	stw	r3,136(sp)
   1415c:	0013883a 	mov	r9,zero
   14160:	da002b17 	ldw	r8,172(sp)
   14164:	003c4d06 	br	1329c <__alt_data_end+0xfc01329c>
   14168:	d9402117 	ldw	r5,132(sp)
   1416c:	d9002017 	ldw	r4,128(sp)
   14170:	d9801a04 	addi	r6,sp,104
   14174:	da402c15 	stw	r9,176(sp)
   14178:	0012d880 	call	12d88 <__sprint_r.part.0>
   1417c:	da402c17 	ldw	r9,176(sp)
   14180:	103e9a1e 	bne	r2,zero,13bec <__alt_data_end+0xfc013bec>
   14184:	d9401b17 	ldw	r5,108(sp)
   14188:	d8801c17 	ldw	r2,112(sp)
   1418c:	d811883a 	mov	r8,sp
   14190:	29000044 	addi	r4,r5,1
   14194:	003e4206 	br	13aa0 <__alt_data_end+0xfc013aa0>
   14198:	d9401b17 	ldw	r5,108(sp)
   1419c:	010000b4 	movhi	r4,2
   141a0:	21166904 	addi	r4,r4,22948
   141a4:	d9002415 	stw	r4,144(sp)
   141a8:	29400044 	addi	r5,r5,1
   141ac:	003c6d06 	br	13364 <__alt_data_end+0xfc013364>
   141b0:	0039883a 	mov	fp,zero
   141b4:	00800084 	movi	r2,2
   141b8:	10803fcc 	andi	r2,r2,255
   141bc:	01000044 	movi	r4,1
   141c0:	11001e26 	beq	r2,r4,1423c <___vfiprintf_internal_r+0x13a0>
   141c4:	01000084 	movi	r4,2
   141c8:	11001e1e 	bne	r2,r4,14244 <___vfiprintf_internal_r+0x13a8>
   141cc:	1829883a 	mov	r20,r3
   141d0:	003eea06 	br	13d7c <__alt_data_end+0xfc013d7c>
   141d4:	a007883a 	mov	r3,r20
   141d8:	00800044 	movi	r2,1
   141dc:	003ff606 	br	141b8 <__alt_data_end+0xfc0141b8>
   141e0:	00800184 	movi	r2,6
   141e4:	1240012e 	bgeu	r2,r9,141ec <___vfiprintf_internal_r+0x1350>
   141e8:	1013883a 	mov	r9,r2
   141ec:	4827883a 	mov	r19,r9
   141f0:	4825883a 	mov	r18,r9
   141f4:	48001516 	blt	r9,zero,1424c <___vfiprintf_internal_r+0x13b0>
   141f8:	054000b4 	movhi	r21,2
   141fc:	d8c02215 	stw	r3,136(sp)
   14200:	ad553f04 	addi	r21,r21,21756
   14204:	003d1406 	br	13658 <__alt_data_end+0xfc013658>
   14208:	028000b4 	movhi	r10,2
   1420c:	52966504 	addi	r10,r10,22932
   14210:	da802415 	stw	r10,144(sp)
   14214:	200d883a 	mov	r6,r4
   14218:	003c9106 	br	13460 <__alt_data_end+0xfc013460>
   1421c:	5021883a 	mov	r16,r10
   14220:	0013883a 	mov	r9,zero
   14224:	003b7d06 	br	1301c <__alt_data_end+0xfc01301c>
   14228:	4827883a 	mov	r19,r9
   1422c:	df001d83 	ldbu	fp,118(sp)
   14230:	d8c02215 	stw	r3,136(sp)
   14234:	0013883a 	mov	r9,zero
   14238:	003c1806 	br	1329c <__alt_data_end+0xfc01329c>
   1423c:	1829883a 	mov	r20,r3
   14240:	003d1806 	br	136a4 <__alt_data_end+0xfc0136a4>
   14244:	1829883a 	mov	r20,r3
   14248:	003ccd06 	br	13580 <__alt_data_end+0xfc013580>
   1424c:	0025883a 	mov	r18,zero
   14250:	003fe906 	br	141f8 <__alt_data_end+0xfc0141f8>
   14254:	d8802217 	ldw	r2,136(sp)
   14258:	80c00043 	ldbu	r3,1(r16)
   1425c:	5021883a 	mov	r16,r10
   14260:	12400017 	ldw	r9,0(r2)
   14264:	10800104 	addi	r2,r2,4
   14268:	d8802215 	stw	r2,136(sp)
   1426c:	483faf0e 	bge	r9,zero,1412c <__alt_data_end+0xfc01412c>
   14270:	18c03fcc 	andi	r3,r3,255
   14274:	18c0201c 	xori	r3,r3,128
   14278:	027fffc4 	movi	r9,-1
   1427c:	18ffe004 	addi	r3,r3,-128
   14280:	003b6506 	br	13018 <__alt_data_end+0xfc013018>
   14284:	d9c01d85 	stb	r7,118(sp)
   14288:	003ca006 	br	1350c <__alt_data_end+0xfc01350c>
   1428c:	d9c01d85 	stb	r7,118(sp)
   14290:	003cad06 	br	13548 <__alt_data_end+0xfc013548>
   14294:	d9c01d85 	stb	r7,118(sp)
   14298:	003d7d06 	br	13890 <__alt_data_end+0xfc013890>
   1429c:	d9c01d85 	stb	r7,118(sp)
   142a0:	003d5f06 	br	13820 <__alt_data_end+0xfc013820>
   142a4:	a080004c 	andi	r2,r20,1
   142a8:	0039883a 	mov	fp,zero
   142ac:	10000526 	beq	r2,zero,142c4 <___vfiprintf_internal_r+0x1428>
   142b0:	00800c04 	movi	r2,48
   142b4:	d88019c5 	stb	r2,103(sp)
   142b8:	dcc02717 	ldw	r19,156(sp)
   142bc:	dd4019c4 	addi	r21,sp,103
   142c0:	003bf606 	br	1329c <__alt_data_end+0xfc01329c>
   142c4:	0027883a 	mov	r19,zero
   142c8:	dd401a04 	addi	r21,sp,104
   142cc:	003bf306 	br	1329c <__alt_data_end+0xfc01329c>
   142d0:	d9c01d85 	stb	r7,118(sp)
   142d4:	003dc806 	br	139f8 <__alt_data_end+0xfc0139f8>
   142d8:	d9c01d85 	stb	r7,118(sp)
   142dc:	003d3a06 	br	137c8 <__alt_data_end+0xfc0137c8>
   142e0:	d9c01d85 	stb	r7,118(sp)
   142e4:	003d2a06 	br	13790 <__alt_data_end+0xfc013790>
   142e8:	d9c01d85 	stb	r7,118(sp)
   142ec:	003cde06 	br	13668 <__alt_data_end+0xfc013668>
   142f0:	d9c01d85 	stb	r7,118(sp)
   142f4:	003cbc06 	br	135e8 <__alt_data_end+0xfc0135e8>

000142f8 <__vfiprintf_internal>:
   142f8:	008000b4 	movhi	r2,2
   142fc:	109df804 	addi	r2,r2,30688
   14300:	300f883a 	mov	r7,r6
   14304:	280d883a 	mov	r6,r5
   14308:	200b883a 	mov	r5,r4
   1430c:	11000017 	ldw	r4,0(r2)
   14310:	0012e9c1 	jmpi	12e9c <___vfiprintf_internal_r>

00014314 <__sbprintf>:
   14314:	2880030b 	ldhu	r2,12(r5)
   14318:	2ac01917 	ldw	r11,100(r5)
   1431c:	2a80038b 	ldhu	r10,14(r5)
   14320:	2a400717 	ldw	r9,28(r5)
   14324:	2a000917 	ldw	r8,36(r5)
   14328:	defee204 	addi	sp,sp,-1144
   1432c:	00c10004 	movi	r3,1024
   14330:	dc011a15 	stw	r16,1128(sp)
   14334:	10bfff4c 	andi	r2,r2,65533
   14338:	2821883a 	mov	r16,r5
   1433c:	d8cb883a 	add	r5,sp,r3
   14340:	dc811c15 	stw	r18,1136(sp)
   14344:	dc411b15 	stw	r17,1132(sp)
   14348:	dfc11d15 	stw	ra,1140(sp)
   1434c:	2025883a 	mov	r18,r4
   14350:	d881030d 	sth	r2,1036(sp)
   14354:	dac11915 	stw	r11,1124(sp)
   14358:	da81038d 	sth	r10,1038(sp)
   1435c:	da410715 	stw	r9,1052(sp)
   14360:	da010915 	stw	r8,1060(sp)
   14364:	dec10015 	stw	sp,1024(sp)
   14368:	dec10415 	stw	sp,1040(sp)
   1436c:	d8c10215 	stw	r3,1032(sp)
   14370:	d8c10515 	stw	r3,1044(sp)
   14374:	d8010615 	stw	zero,1048(sp)
   14378:	0012e9c0 	call	12e9c <___vfiprintf_internal_r>
   1437c:	1023883a 	mov	r17,r2
   14380:	10000416 	blt	r2,zero,14394 <__sbprintf+0x80>
   14384:	d9410004 	addi	r5,sp,1024
   14388:	9009883a 	mov	r4,r18
   1438c:	000c2680 	call	c268 <_fflush_r>
   14390:	10000d1e 	bne	r2,zero,143c8 <__sbprintf+0xb4>
   14394:	d881030b 	ldhu	r2,1036(sp)
   14398:	1080100c 	andi	r2,r2,64
   1439c:	10000326 	beq	r2,zero,143ac <__sbprintf+0x98>
   143a0:	8080030b 	ldhu	r2,12(r16)
   143a4:	10801014 	ori	r2,r2,64
   143a8:	8080030d 	sth	r2,12(r16)
   143ac:	8805883a 	mov	r2,r17
   143b0:	dfc11d17 	ldw	ra,1140(sp)
   143b4:	dc811c17 	ldw	r18,1136(sp)
   143b8:	dc411b17 	ldw	r17,1132(sp)
   143bc:	dc011a17 	ldw	r16,1128(sp)
   143c0:	dec11e04 	addi	sp,sp,1144
   143c4:	f800283a 	ret
   143c8:	047fffc4 	movi	r17,-1
   143cc:	003ff106 	br	14394 <__alt_data_end+0xfc014394>

000143d0 <__swbuf_r>:
   143d0:	defffb04 	addi	sp,sp,-20
   143d4:	dcc00315 	stw	r19,12(sp)
   143d8:	dc800215 	stw	r18,8(sp)
   143dc:	dc000015 	stw	r16,0(sp)
   143e0:	dfc00415 	stw	ra,16(sp)
   143e4:	dc400115 	stw	r17,4(sp)
   143e8:	2025883a 	mov	r18,r4
   143ec:	2827883a 	mov	r19,r5
   143f0:	3021883a 	mov	r16,r6
   143f4:	20000226 	beq	r4,zero,14400 <__swbuf_r+0x30>
   143f8:	20800e17 	ldw	r2,56(r4)
   143fc:	10004226 	beq	r2,zero,14508 <__swbuf_r+0x138>
   14400:	80800617 	ldw	r2,24(r16)
   14404:	8100030b 	ldhu	r4,12(r16)
   14408:	80800215 	stw	r2,8(r16)
   1440c:	2080020c 	andi	r2,r4,8
   14410:	10003626 	beq	r2,zero,144ec <__swbuf_r+0x11c>
   14414:	80c00417 	ldw	r3,16(r16)
   14418:	18003426 	beq	r3,zero,144ec <__swbuf_r+0x11c>
   1441c:	2088000c 	andi	r2,r4,8192
   14420:	9c403fcc 	andi	r17,r19,255
   14424:	10001a26 	beq	r2,zero,14490 <__swbuf_r+0xc0>
   14428:	80800017 	ldw	r2,0(r16)
   1442c:	81000517 	ldw	r4,20(r16)
   14430:	10c7c83a 	sub	r3,r2,r3
   14434:	1900200e 	bge	r3,r4,144b8 <__swbuf_r+0xe8>
   14438:	18c00044 	addi	r3,r3,1
   1443c:	81000217 	ldw	r4,8(r16)
   14440:	11400044 	addi	r5,r2,1
   14444:	81400015 	stw	r5,0(r16)
   14448:	213fffc4 	addi	r4,r4,-1
   1444c:	81000215 	stw	r4,8(r16)
   14450:	14c00005 	stb	r19,0(r2)
   14454:	80800517 	ldw	r2,20(r16)
   14458:	10c01e26 	beq	r2,r3,144d4 <__swbuf_r+0x104>
   1445c:	8080030b 	ldhu	r2,12(r16)
   14460:	1080004c 	andi	r2,r2,1
   14464:	10000226 	beq	r2,zero,14470 <__swbuf_r+0xa0>
   14468:	00800284 	movi	r2,10
   1446c:	88801926 	beq	r17,r2,144d4 <__swbuf_r+0x104>
   14470:	8805883a 	mov	r2,r17
   14474:	dfc00417 	ldw	ra,16(sp)
   14478:	dcc00317 	ldw	r19,12(sp)
   1447c:	dc800217 	ldw	r18,8(sp)
   14480:	dc400117 	ldw	r17,4(sp)
   14484:	dc000017 	ldw	r16,0(sp)
   14488:	dec00504 	addi	sp,sp,20
   1448c:	f800283a 	ret
   14490:	81401917 	ldw	r5,100(r16)
   14494:	00b7ffc4 	movi	r2,-8193
   14498:	21080014 	ori	r4,r4,8192
   1449c:	2884703a 	and	r2,r5,r2
   144a0:	80801915 	stw	r2,100(r16)
   144a4:	80800017 	ldw	r2,0(r16)
   144a8:	8100030d 	sth	r4,12(r16)
   144ac:	81000517 	ldw	r4,20(r16)
   144b0:	10c7c83a 	sub	r3,r2,r3
   144b4:	193fe016 	blt	r3,r4,14438 <__alt_data_end+0xfc014438>
   144b8:	800b883a 	mov	r5,r16
   144bc:	9009883a 	mov	r4,r18
   144c0:	000c2680 	call	c268 <_fflush_r>
   144c4:	1000071e 	bne	r2,zero,144e4 <__swbuf_r+0x114>
   144c8:	80800017 	ldw	r2,0(r16)
   144cc:	00c00044 	movi	r3,1
   144d0:	003fda06 	br	1443c <__alt_data_end+0xfc01443c>
   144d4:	800b883a 	mov	r5,r16
   144d8:	9009883a 	mov	r4,r18
   144dc:	000c2680 	call	c268 <_fflush_r>
   144e0:	103fe326 	beq	r2,zero,14470 <__alt_data_end+0xfc014470>
   144e4:	00bfffc4 	movi	r2,-1
   144e8:	003fe206 	br	14474 <__alt_data_end+0xfc014474>
   144ec:	800b883a 	mov	r5,r16
   144f0:	9009883a 	mov	r4,r18
   144f4:	000a5180 	call	a518 <__swsetup_r>
   144f8:	103ffa1e 	bne	r2,zero,144e4 <__alt_data_end+0xfc0144e4>
   144fc:	8100030b 	ldhu	r4,12(r16)
   14500:	80c00417 	ldw	r3,16(r16)
   14504:	003fc506 	br	1441c <__alt_data_end+0xfc01441c>
   14508:	0004e480 	call	4e48 <__sinit>
   1450c:	003fbc06 	br	14400 <__alt_data_end+0xfc014400>

00014510 <__swbuf>:
   14510:	008000b4 	movhi	r2,2
   14514:	109df804 	addi	r2,r2,30688
   14518:	280d883a 	mov	r6,r5
   1451c:	200b883a 	mov	r5,r4
   14520:	11000017 	ldw	r4,0(r2)
   14524:	00143d01 	jmpi	143d0 <__swbuf_r>

00014528 <_calloc_r>:
   14528:	298b383a 	mul	r5,r5,r6
   1452c:	defffe04 	addi	sp,sp,-8
   14530:	dfc00115 	stw	ra,4(sp)
   14534:	dc000015 	stw	r16,0(sp)
   14538:	00050480 	call	5048 <_malloc_r>
   1453c:	10002926 	beq	r2,zero,145e4 <_calloc_r+0xbc>
   14540:	11bfff17 	ldw	r6,-4(r2)
   14544:	1021883a 	mov	r16,r2
   14548:	00bfff04 	movi	r2,-4
   1454c:	308c703a 	and	r6,r6,r2
   14550:	00c00904 	movi	r3,36
   14554:	308d883a 	add	r6,r6,r2
   14558:	19801636 	bltu	r3,r6,145b4 <_calloc_r+0x8c>
   1455c:	008004c4 	movi	r2,19
   14560:	11800b2e 	bgeu	r2,r6,14590 <_calloc_r+0x68>
   14564:	80000015 	stw	zero,0(r16)
   14568:	80000115 	stw	zero,4(r16)
   1456c:	008006c4 	movi	r2,27
   14570:	11801a2e 	bgeu	r2,r6,145dc <_calloc_r+0xb4>
   14574:	80000215 	stw	zero,8(r16)
   14578:	80000315 	stw	zero,12(r16)
   1457c:	30c0151e 	bne	r6,r3,145d4 <_calloc_r+0xac>
   14580:	80000415 	stw	zero,16(r16)
   14584:	80800604 	addi	r2,r16,24
   14588:	80000515 	stw	zero,20(r16)
   1458c:	00000106 	br	14594 <_calloc_r+0x6c>
   14590:	8005883a 	mov	r2,r16
   14594:	10000015 	stw	zero,0(r2)
   14598:	10000115 	stw	zero,4(r2)
   1459c:	10000215 	stw	zero,8(r2)
   145a0:	8005883a 	mov	r2,r16
   145a4:	dfc00117 	ldw	ra,4(sp)
   145a8:	dc000017 	ldw	r16,0(sp)
   145ac:	dec00204 	addi	sp,sp,8
   145b0:	f800283a 	ret
   145b4:	000b883a 	mov	r5,zero
   145b8:	8009883a 	mov	r4,r16
   145bc:	0005a800 	call	5a80 <memset>
   145c0:	8005883a 	mov	r2,r16
   145c4:	dfc00117 	ldw	ra,4(sp)
   145c8:	dc000017 	ldw	r16,0(sp)
   145cc:	dec00204 	addi	sp,sp,8
   145d0:	f800283a 	ret
   145d4:	80800404 	addi	r2,r16,16
   145d8:	003fee06 	br	14594 <__alt_data_end+0xfc014594>
   145dc:	80800204 	addi	r2,r16,8
   145e0:	003fec06 	br	14594 <__alt_data_end+0xfc014594>
   145e4:	0005883a 	mov	r2,zero
   145e8:	003fee06 	br	145a4 <__alt_data_end+0xfc0145a4>

000145ec <__fputwc>:
   145ec:	defff804 	addi	sp,sp,-32
   145f0:	dcc00415 	stw	r19,16(sp)
   145f4:	dc800315 	stw	r18,12(sp)
   145f8:	dc000115 	stw	r16,4(sp)
   145fc:	dfc00715 	stw	ra,28(sp)
   14600:	dd400615 	stw	r21,24(sp)
   14604:	dd000515 	stw	r20,20(sp)
   14608:	dc400215 	stw	r17,8(sp)
   1460c:	2027883a 	mov	r19,r4
   14610:	2825883a 	mov	r18,r5
   14614:	3021883a 	mov	r16,r6
   14618:	000cefc0 	call	cefc <__locale_mb_cur_max>
   1461c:	00c00044 	movi	r3,1
   14620:	10c03e26 	beq	r2,r3,1471c <__fputwc+0x130>
   14624:	81c01704 	addi	r7,r16,92
   14628:	900d883a 	mov	r6,r18
   1462c:	d80b883a 	mov	r5,sp
   14630:	9809883a 	mov	r4,r19
   14634:	001690c0 	call	1690c <_wcrtomb_r>
   14638:	1029883a 	mov	r20,r2
   1463c:	00bfffc4 	movi	r2,-1
   14640:	a0802026 	beq	r20,r2,146c4 <__fputwc+0xd8>
   14644:	d9400003 	ldbu	r5,0(sp)
   14648:	a0001c26 	beq	r20,zero,146bc <__fputwc+0xd0>
   1464c:	0023883a 	mov	r17,zero
   14650:	05400284 	movi	r21,10
   14654:	00000906 	br	1467c <__fputwc+0x90>
   14658:	80800017 	ldw	r2,0(r16)
   1465c:	11400005 	stb	r5,0(r2)
   14660:	80c00017 	ldw	r3,0(r16)
   14664:	18c00044 	addi	r3,r3,1
   14668:	80c00015 	stw	r3,0(r16)
   1466c:	8c400044 	addi	r17,r17,1
   14670:	dc45883a 	add	r2,sp,r17
   14674:	8d00112e 	bgeu	r17,r20,146bc <__fputwc+0xd0>
   14678:	11400003 	ldbu	r5,0(r2)
   1467c:	80c00217 	ldw	r3,8(r16)
   14680:	18ffffc4 	addi	r3,r3,-1
   14684:	80c00215 	stw	r3,8(r16)
   14688:	183ff30e 	bge	r3,zero,14658 <__alt_data_end+0xfc014658>
   1468c:	80800617 	ldw	r2,24(r16)
   14690:	18801916 	blt	r3,r2,146f8 <__fputwc+0x10c>
   14694:	80800017 	ldw	r2,0(r16)
   14698:	11400005 	stb	r5,0(r2)
   1469c:	80800017 	ldw	r2,0(r16)
   146a0:	10c00003 	ldbu	r3,0(r2)
   146a4:	10800044 	addi	r2,r2,1
   146a8:	1d402326 	beq	r3,r21,14738 <__fputwc+0x14c>
   146ac:	80800015 	stw	r2,0(r16)
   146b0:	8c400044 	addi	r17,r17,1
   146b4:	dc45883a 	add	r2,sp,r17
   146b8:	8d3fef36 	bltu	r17,r20,14678 <__alt_data_end+0xfc014678>
   146bc:	9005883a 	mov	r2,r18
   146c0:	00000406 	br	146d4 <__fputwc+0xe8>
   146c4:	80c0030b 	ldhu	r3,12(r16)
   146c8:	a005883a 	mov	r2,r20
   146cc:	18c01014 	ori	r3,r3,64
   146d0:	80c0030d 	sth	r3,12(r16)
   146d4:	dfc00717 	ldw	ra,28(sp)
   146d8:	dd400617 	ldw	r21,24(sp)
   146dc:	dd000517 	ldw	r20,20(sp)
   146e0:	dcc00417 	ldw	r19,16(sp)
   146e4:	dc800317 	ldw	r18,12(sp)
   146e8:	dc400217 	ldw	r17,8(sp)
   146ec:	dc000117 	ldw	r16,4(sp)
   146f0:	dec00804 	addi	sp,sp,32
   146f4:	f800283a 	ret
   146f8:	800d883a 	mov	r6,r16
   146fc:	29403fcc 	andi	r5,r5,255
   14700:	9809883a 	mov	r4,r19
   14704:	00143d00 	call	143d0 <__swbuf_r>
   14708:	10bfffe0 	cmpeqi	r2,r2,-1
   1470c:	10803fcc 	andi	r2,r2,255
   14710:	103fd626 	beq	r2,zero,1466c <__alt_data_end+0xfc01466c>
   14714:	00bfffc4 	movi	r2,-1
   14718:	003fee06 	br	146d4 <__alt_data_end+0xfc0146d4>
   1471c:	90ffffc4 	addi	r3,r18,-1
   14720:	01003f84 	movi	r4,254
   14724:	20ffbf36 	bltu	r4,r3,14624 <__alt_data_end+0xfc014624>
   14728:	900b883a 	mov	r5,r18
   1472c:	dc800005 	stb	r18,0(sp)
   14730:	1029883a 	mov	r20,r2
   14734:	003fc506 	br	1464c <__alt_data_end+0xfc01464c>
   14738:	800d883a 	mov	r6,r16
   1473c:	a80b883a 	mov	r5,r21
   14740:	9809883a 	mov	r4,r19
   14744:	00143d00 	call	143d0 <__swbuf_r>
   14748:	10bfffe0 	cmpeqi	r2,r2,-1
   1474c:	003fef06 	br	1470c <__alt_data_end+0xfc01470c>

00014750 <_fputwc_r>:
   14750:	3080030b 	ldhu	r2,12(r6)
   14754:	10c8000c 	andi	r3,r2,8192
   14758:	1800051e 	bne	r3,zero,14770 <_fputwc_r+0x20>
   1475c:	30c01917 	ldw	r3,100(r6)
   14760:	10880014 	ori	r2,r2,8192
   14764:	3080030d 	sth	r2,12(r6)
   14768:	18880014 	ori	r2,r3,8192
   1476c:	30801915 	stw	r2,100(r6)
   14770:	00145ec1 	jmpi	145ec <__fputwc>

00014774 <fputwc>:
   14774:	008000b4 	movhi	r2,2
   14778:	defffc04 	addi	sp,sp,-16
   1477c:	109df804 	addi	r2,r2,30688
   14780:	dc000115 	stw	r16,4(sp)
   14784:	14000017 	ldw	r16,0(r2)
   14788:	dc400215 	stw	r17,8(sp)
   1478c:	dfc00315 	stw	ra,12(sp)
   14790:	2023883a 	mov	r17,r4
   14794:	80000226 	beq	r16,zero,147a0 <fputwc+0x2c>
   14798:	80800e17 	ldw	r2,56(r16)
   1479c:	10001026 	beq	r2,zero,147e0 <fputwc+0x6c>
   147a0:	2880030b 	ldhu	r2,12(r5)
   147a4:	10c8000c 	andi	r3,r2,8192
   147a8:	1800051e 	bne	r3,zero,147c0 <fputwc+0x4c>
   147ac:	28c01917 	ldw	r3,100(r5)
   147b0:	10880014 	ori	r2,r2,8192
   147b4:	2880030d 	sth	r2,12(r5)
   147b8:	18880014 	ori	r2,r3,8192
   147bc:	28801915 	stw	r2,100(r5)
   147c0:	280d883a 	mov	r6,r5
   147c4:	8009883a 	mov	r4,r16
   147c8:	880b883a 	mov	r5,r17
   147cc:	dfc00317 	ldw	ra,12(sp)
   147d0:	dc400217 	ldw	r17,8(sp)
   147d4:	dc000117 	ldw	r16,4(sp)
   147d8:	dec00404 	addi	sp,sp,16
   147dc:	00145ec1 	jmpi	145ec <__fputwc>
   147e0:	8009883a 	mov	r4,r16
   147e4:	d9400015 	stw	r5,0(sp)
   147e8:	0004e480 	call	4e48 <__sinit>
   147ec:	d9400017 	ldw	r5,0(sp)
   147f0:	003feb06 	br	147a0 <__alt_data_end+0xfc0147a0>

000147f4 <_fstat_r>:
   147f4:	defffd04 	addi	sp,sp,-12
   147f8:	2805883a 	mov	r2,r5
   147fc:	dc000015 	stw	r16,0(sp)
   14800:	040000f4 	movhi	r16,3
   14804:	dc400115 	stw	r17,4(sp)
   14808:	84250a04 	addi	r16,r16,-27608
   1480c:	2023883a 	mov	r17,r4
   14810:	300b883a 	mov	r5,r6
   14814:	1009883a 	mov	r4,r2
   14818:	dfc00215 	stw	ra,8(sp)
   1481c:	80000015 	stw	zero,0(r16)
   14820:	001a34c0 	call	1a34c <fstat>
   14824:	00ffffc4 	movi	r3,-1
   14828:	10c00526 	beq	r2,r3,14840 <_fstat_r+0x4c>
   1482c:	dfc00217 	ldw	ra,8(sp)
   14830:	dc400117 	ldw	r17,4(sp)
   14834:	dc000017 	ldw	r16,0(sp)
   14838:	dec00304 	addi	sp,sp,12
   1483c:	f800283a 	ret
   14840:	80c00017 	ldw	r3,0(r16)
   14844:	183ff926 	beq	r3,zero,1482c <__alt_data_end+0xfc01482c>
   14848:	88c00015 	stw	r3,0(r17)
   1484c:	003ff706 	br	1482c <__alt_data_end+0xfc01482c>

00014850 <rshift>:
   14850:	2807d17a 	srai	r3,r5,5
   14854:	20800417 	ldw	r2,16(r4)
   14858:	22000504 	addi	r8,r4,20
   1485c:	1880250e 	bge	r3,r2,148f4 <rshift+0xa4>
   14860:	1085883a 	add	r2,r2,r2
   14864:	18c7883a 	add	r3,r3,r3
   14868:	1085883a 	add	r2,r2,r2
   1486c:	18c7883a 	add	r3,r3,r3
   14870:	294007cc 	andi	r5,r5,31
   14874:	4085883a 	add	r2,r8,r2
   14878:	40c7883a 	add	r3,r8,r3
   1487c:	28002026 	beq	r5,zero,14900 <rshift+0xb0>
   14880:	19800017 	ldw	r6,0(r3)
   14884:	02c00804 	movi	r11,32
   14888:	19c00104 	addi	r7,r3,4
   1488c:	5957c83a 	sub	r11,r11,r5
   14890:	314cd83a 	srl	r6,r6,r5
   14894:	38802c2e 	bgeu	r7,r2,14948 <rshift+0xf8>
   14898:	4015883a 	mov	r10,r8
   1489c:	3a400017 	ldw	r9,0(r7)
   148a0:	52800104 	addi	r10,r10,4
   148a4:	39c00104 	addi	r7,r7,4
   148a8:	4ad2983a 	sll	r9,r9,r11
   148ac:	498cb03a 	or	r6,r9,r6
   148b0:	51bfff15 	stw	r6,-4(r10)
   148b4:	39bfff17 	ldw	r6,-4(r7)
   148b8:	314cd83a 	srl	r6,r6,r5
   148bc:	38bff736 	bltu	r7,r2,1489c <__alt_data_end+0xfc01489c>
   148c0:	10c7c83a 	sub	r3,r2,r3
   148c4:	18fffec4 	addi	r3,r3,-5
   148c8:	1806d0ba 	srli	r3,r3,2
   148cc:	18c00044 	addi	r3,r3,1
   148d0:	18c7883a 	add	r3,r3,r3
   148d4:	18c7883a 	add	r3,r3,r3
   148d8:	40c7883a 	add	r3,r8,r3
   148dc:	19800015 	stw	r6,0(r3)
   148e0:	30000126 	beq	r6,zero,148e8 <rshift+0x98>
   148e4:	18c00104 	addi	r3,r3,4
   148e8:	1a05c83a 	sub	r2,r3,r8
   148ec:	1005d0ba 	srai	r2,r2,2
   148f0:	00001206 	br	1493c <rshift+0xec>
   148f4:	20000415 	stw	zero,16(r4)
   148f8:	20000515 	stw	zero,20(r4)
   148fc:	f800283a 	ret
   14900:	18bffc2e 	bgeu	r3,r2,148f4 <__alt_data_end+0xfc0148f4>
   14904:	180d883a 	mov	r6,r3
   14908:	400b883a 	mov	r5,r8
   1490c:	31c00017 	ldw	r7,0(r6)
   14910:	29400104 	addi	r5,r5,4
   14914:	31800104 	addi	r6,r6,4
   14918:	29ffff15 	stw	r7,-4(r5)
   1491c:	30bffb36 	bltu	r6,r2,1490c <__alt_data_end+0xfc01490c>
   14920:	00c6303a 	nor	r3,zero,r3
   14924:	1885883a 	add	r2,r3,r2
   14928:	1004d0ba 	srli	r2,r2,2
   1492c:	10800044 	addi	r2,r2,1
   14930:	1085883a 	add	r2,r2,r2
   14934:	1085883a 	add	r2,r2,r2
   14938:	1005d0ba 	srai	r2,r2,2
   1493c:	20800415 	stw	r2,16(r4)
   14940:	103fed26 	beq	r2,zero,148f8 <__alt_data_end+0xfc0148f8>
   14944:	f800283a 	ret
   14948:	4007883a 	mov	r3,r8
   1494c:	003fe306 	br	148dc <__alt_data_end+0xfc0148dc>

00014950 <__gethex>:
   14950:	deffeb04 	addi	sp,sp,-84
   14954:	dfc01415 	stw	ra,80(sp)
   14958:	dd801115 	stw	r22,68(sp)
   1495c:	dcc00e15 	stw	r19,56(sp)
   14960:	dc800d15 	stw	r18,52(sp)
   14964:	2827883a 	mov	r19,r5
   14968:	d9000115 	stw	r4,4(sp)
   1496c:	d9800015 	stw	r6,0(sp)
   14970:	d9c00415 	stw	r7,16(sp)
   14974:	df001315 	stw	fp,76(sp)
   14978:	ddc01215 	stw	r23,72(sp)
   1497c:	dd401015 	stw	r21,64(sp)
   14980:	dd000f15 	stw	r20,60(sp)
   14984:	dc400c15 	stw	r17,48(sp)
   14988:	dc000b15 	stw	r16,44(sp)
   1498c:	000cf200 	call	cf20 <_localeconv_r>
   14990:	14800017 	ldw	r18,0(r2)
   14994:	9009883a 	mov	r4,r18
   14998:	00066700 	call	6670 <strlen>
   1499c:	98c00017 	ldw	r3,0(r19)
   149a0:	102d883a 	mov	r22,r2
   149a4:	9085883a 	add	r2,r18,r2
   149a8:	10bfffc3 	ldbu	r2,-1(r2)
   149ac:	19000083 	ldbu	r4,2(r3)
   149b0:	d8800305 	stb	r2,12(sp)
   149b4:	00800c04 	movi	r2,48
   149b8:	2081521e 	bne	r4,r2,14f04 <__gethex+0x5b4>
   149bc:	017fff84 	movi	r5,-2
   149c0:	188000c4 	addi	r2,r3,3
   149c4:	28cbc83a 	sub	r5,r5,r3
   149c8:	200d883a 	mov	r6,r4
   149cc:	28a3883a 	add	r17,r5,r2
   149d0:	102b883a 	mov	r21,r2
   149d4:	10800044 	addi	r2,r2,1
   149d8:	113fffc3 	ldbu	r4,-1(r2)
   149dc:	21bffb26 	beq	r4,r6,149cc <__alt_data_end+0xfc0149cc>
   149e0:	050000b4 	movhi	r20,2
   149e4:	a5166d04 	addi	r20,r20,22964
   149e8:	a109883a 	add	r4,r20,r4
   149ec:	20800003 	ldbu	r2,0(r4)
   149f0:	10008826 	beq	r2,zero,14c14 <__gethex+0x2c4>
   149f4:	a8800003 	ldbu	r2,0(r21)
   149f8:	0015883a 	mov	r10,zero
   149fc:	002f883a 	mov	r23,zero
   14a00:	a085883a 	add	r2,r20,r2
   14a04:	10800003 	ldbu	r2,0(r2)
   14a08:	a821883a 	mov	r16,r21
   14a0c:	10000526 	beq	r2,zero,14a24 <__gethex+0xd4>
   14a10:	84000044 	addi	r16,r16,1
   14a14:	80800003 	ldbu	r2,0(r16)
   14a18:	a085883a 	add	r2,r20,r2
   14a1c:	10800003 	ldbu	r2,0(r2)
   14a20:	103ffb1e 	bne	r2,zero,14a10 <__alt_data_end+0xfc014a10>
   14a24:	b00d883a 	mov	r6,r22
   14a28:	900b883a 	mov	r5,r18
   14a2c:	8009883a 	mov	r4,r16
   14a30:	da800a15 	stw	r10,40(sp)
   14a34:	00154300 	call	15430 <strncmp>
   14a38:	da800a17 	ldw	r10,40(sp)
   14a3c:	1000031e 	bne	r2,zero,14a4c <__gethex+0xfc>
   14a40:	b8015226 	beq	r23,zero,14f8c <__gethex+0x63c>
   14a44:	80800003 	ldbu	r2,0(r16)
   14a48:	00000206 	br	14a54 <__gethex+0x104>
   14a4c:	80800003 	ldbu	r2,0(r16)
   14a50:	b8011f26 	beq	r23,zero,14ed0 <__gethex+0x580>
   14a54:	85efc83a 	sub	r23,r16,r23
   14a58:	bdef883a 	add	r23,r23,r23
   14a5c:	bdef883a 	add	r23,r23,r23
   14a60:	05efc83a 	sub	r23,zero,r23
   14a64:	10803fcc 	andi	r2,r2,255
   14a68:	01001404 	movi	r4,80
   14a6c:	11008626 	beq	r2,r4,14c88 <__gethex+0x338>
   14a70:	01001c04 	movi	r4,112
   14a74:	11008426 	beq	r2,r4,14c88 <__gethex+0x338>
   14a78:	8039883a 	mov	fp,r16
   14a7c:	9c000015 	stw	r16,0(r19)
   14a80:	5000711e 	bne	r10,zero,14c48 <__gethex+0x2f8>
   14a84:	e545c83a 	sub	r2,fp,r21
   14a88:	10bfffc4 	addi	r2,r2,-1
   14a8c:	010001c4 	movi	r4,7
   14a90:	000b883a 	mov	r5,zero
   14a94:	2080030e 	bge	r4,r2,14aa4 <__gethex+0x154>
   14a98:	1005d07a 	srai	r2,r2,1
   14a9c:	29400044 	addi	r5,r5,1
   14aa0:	20bffd16 	blt	r4,r2,14a98 <__alt_data_end+0xfc014a98>
   14aa4:	d9000117 	ldw	r4,4(sp)
   14aa8:	000d4ec0 	call	d4ec <_Balloc>
   14aac:	10c00504 	addi	r3,r2,20
   14ab0:	d8c00215 	stw	r3,8(sp)
   14ab4:	1021883a 	mov	r16,r2
   14ab8:	af01732e 	bgeu	r21,fp,15088 <__gethex+0x738>
   14abc:	dc400303 	ldbu	r17,12(sp)
   14ac0:	03400044 	movi	r13,1
   14ac4:	1815883a 	mov	r10,r3
   14ac8:	0013883a 	mov	r9,zero
   14acc:	0027883a 	mov	r19,zero
   14ad0:	6d9bc83a 	sub	r13,r13,r22
   14ad4:	02c00804 	movi	r11,32
   14ad8:	e0bfffc3 	ldbu	r2,-1(fp)
   14adc:	e3bfffc4 	addi	r14,fp,-1
   14ae0:	88803026 	beq	r17,r2,14ba4 <__gethex+0x254>
   14ae4:	9ac04526 	beq	r19,r11,14bfc <__gethex+0x2ac>
   14ae8:	980b883a 	mov	r5,r19
   14aec:	9cc00104 	addi	r19,r19,4
   14af0:	e13fffc3 	ldbu	r4,-1(fp)
   14af4:	7039883a 	mov	fp,r14
   14af8:	a109883a 	add	r4,r20,r4
   14afc:	20800003 	ldbu	r2,0(r4)
   14b00:	108003cc 	andi	r2,r2,15
   14b04:	1144983a 	sll	r2,r2,r5
   14b08:	4892b03a 	or	r9,r9,r2
   14b0c:	af3ff236 	bltu	r21,fp,14ad8 <__alt_data_end+0xfc014ad8>
   14b10:	d8c00217 	ldw	r3,8(sp)
   14b14:	50800104 	addi	r2,r10,4
   14b18:	52400015 	stw	r9,0(r10)
   14b1c:	10c5c83a 	sub	r2,r2,r3
   14b20:	1005d0ba 	srai	r2,r2,2
   14b24:	4809883a 	mov	r4,r9
   14b28:	80800415 	stw	r2,16(r16)
   14b2c:	1022917a 	slli	r17,r2,5
   14b30:	000d7e00 	call	d7e0 <__hi0bits>
   14b34:	d8c00017 	ldw	r3,0(sp)
   14b38:	8885c83a 	sub	r2,r17,r2
   14b3c:	1c800017 	ldw	r18,0(r3)
   14b40:	9080c716 	blt	r18,r2,14e60 <__gethex+0x510>
   14b44:	1480e416 	blt	r2,r18,14ed8 <__gethex+0x588>
   14b48:	0027883a 	mov	r19,zero
   14b4c:	d8c00017 	ldw	r3,0(sp)
   14b50:	18800217 	ldw	r2,8(r3)
   14b54:	15c08d16 	blt	r2,r23,14d8c <__gethex+0x43c>
   14b58:	d8c00017 	ldw	r3,0(sp)
   14b5c:	18800117 	ldw	r2,4(r3)
   14b60:	b880aa0e 	bge	r23,r2,14e0c <__gethex+0x4bc>
   14b64:	15efc83a 	sub	r23,r2,r23
   14b68:	bc80ed16 	blt	r23,r18,14f20 <__gethex+0x5d0>
   14b6c:	18c00317 	ldw	r3,12(r3)
   14b70:	01000084 	movi	r4,2
   14b74:	19014926 	beq	r3,r4,1509c <__gethex+0x74c>
   14b78:	010000c4 	movi	r4,3
   14b7c:	19012e26 	beq	r3,r4,15038 <__gethex+0x6e8>
   14b80:	01000044 	movi	r4,1
   14b84:	19014826 	beq	r3,r4,150a8 <__gethex+0x758>
   14b88:	d9000117 	ldw	r4,4(sp)
   14b8c:	800b883a 	mov	r5,r16
   14b90:	000d5940 	call	d594 <_Bfree>
   14b94:	d8801517 	ldw	r2,84(sp)
   14b98:	10000015 	stw	zero,0(r2)
   14b9c:	00801404 	movi	r2,80
   14ba0:	00002b06 	br	14c50 <__gethex+0x300>
   14ba4:	735f883a 	add	r15,r14,r13
   14ba8:	7d7fce36 	bltu	r15,r21,14ae4 <__alt_data_end+0xfc014ae4>
   14bac:	7809883a 	mov	r4,r15
   14bb0:	b00d883a 	mov	r6,r22
   14bb4:	900b883a 	mov	r5,r18
   14bb8:	da400515 	stw	r9,20(sp)
   14bbc:	da800a15 	stw	r10,40(sp)
   14bc0:	dac00915 	stw	r11,36(sp)
   14bc4:	db400815 	stw	r13,32(sp)
   14bc8:	db800615 	stw	r14,24(sp)
   14bcc:	dbc00715 	stw	r15,28(sp)
   14bd0:	00154300 	call	15430 <strncmp>
   14bd4:	da400517 	ldw	r9,20(sp)
   14bd8:	da800a17 	ldw	r10,40(sp)
   14bdc:	dac00917 	ldw	r11,36(sp)
   14be0:	db400817 	ldw	r13,32(sp)
   14be4:	db800617 	ldw	r14,24(sp)
   14be8:	dbc00717 	ldw	r15,28(sp)
   14bec:	103fbd1e 	bne	r2,zero,14ae4 <__alt_data_end+0xfc014ae4>
   14bf0:	7839883a 	mov	fp,r15
   14bf4:	af3fb836 	bltu	r21,fp,14ad8 <__alt_data_end+0xfc014ad8>
   14bf8:	003fc506 	br	14b10 <__alt_data_end+0xfc014b10>
   14bfc:	04c00104 	movi	r19,4
   14c00:	52400015 	stw	r9,0(r10)
   14c04:	000b883a 	mov	r5,zero
   14c08:	54d5883a 	add	r10,r10,r19
   14c0c:	0013883a 	mov	r9,zero
   14c10:	003fb706 	br	14af0 <__alt_data_end+0xfc014af0>
   14c14:	b00d883a 	mov	r6,r22
   14c18:	900b883a 	mov	r5,r18
   14c1c:	a809883a 	mov	r4,r21
   14c20:	00154300 	call	15430 <strncmp>
   14c24:	10006426 	beq	r2,zero,14db8 <__gethex+0x468>
   14c28:	a8800003 	ldbu	r2,0(r21)
   14c2c:	a821883a 	mov	r16,r21
   14c30:	10803fcc 	andi	r2,r2,255
   14c34:	01001404 	movi	r4,80
   14c38:	11001126 	beq	r2,r4,14c80 <__gethex+0x330>
   14c3c:	01001c04 	movi	r4,112
   14c40:	11000f26 	beq	r2,r4,14c80 <__gethex+0x330>
   14c44:	9c000015 	stw	r16,0(r19)
   14c48:	8800831e 	bne	r17,zero,14e58 <__gethex+0x508>
   14c4c:	00800184 	movi	r2,6
   14c50:	dfc01417 	ldw	ra,80(sp)
   14c54:	df001317 	ldw	fp,76(sp)
   14c58:	ddc01217 	ldw	r23,72(sp)
   14c5c:	dd801117 	ldw	r22,68(sp)
   14c60:	dd401017 	ldw	r21,64(sp)
   14c64:	dd000f17 	ldw	r20,60(sp)
   14c68:	dcc00e17 	ldw	r19,56(sp)
   14c6c:	dc800d17 	ldw	r18,52(sp)
   14c70:	dc400c17 	ldw	r17,48(sp)
   14c74:	dc000b17 	ldw	r16,44(sp)
   14c78:	dec01504 	addi	sp,sp,84
   14c7c:	f800283a 	ret
   14c80:	002f883a 	mov	r23,zero
   14c84:	02800044 	movi	r10,1
   14c88:	80800043 	ldbu	r2,1(r16)
   14c8c:	01400ac4 	movi	r5,43
   14c90:	11003fcc 	andi	r4,r2,255
   14c94:	21406e26 	beq	r4,r5,14e50 <__gethex+0x500>
   14c98:	01400b44 	movi	r5,45
   14c9c:	21404226 	beq	r4,r5,14da8 <__gethex+0x458>
   14ca0:	81400044 	addi	r5,r16,1
   14ca4:	000d883a 	mov	r6,zero
   14ca8:	10803fcc 	andi	r2,r2,255
   14cac:	a085883a 	add	r2,r20,r2
   14cb0:	11000003 	ldbu	r4,0(r2)
   14cb4:	03000604 	movi	r12,24
   14cb8:	20bfffc4 	addi	r2,r4,-1
   14cbc:	10803fcc 	andi	r2,r2,255
   14cc0:	60bf6d36 	bltu	r12,r2,14a78 <__alt_data_end+0xfc014a78>
   14cc4:	2ac00043 	ldbu	r11,1(r5)
   14cc8:	20803fcc 	andi	r2,r4,255
   14ccc:	010000b4 	movhi	r4,2
   14cd0:	21166d04 	addi	r4,r4,22964
   14cd4:	22c9883a 	add	r4,r4,r11
   14cd8:	23400003 	ldbu	r13,0(r4)
   14cdc:	10bffc04 	addi	r2,r2,-16
   14ce0:	29400044 	addi	r5,r5,1
   14ce4:	693fffc4 	addi	r4,r13,-1
   14ce8:	21003fcc 	andi	r4,r4,255
   14cec:	6b403fcc 	andi	r13,r13,255
   14cf0:	61000b36 	bltu	r12,r4,14d20 <__gethex+0x3d0>
   14cf4:	29400044 	addi	r5,r5,1
   14cf8:	29000003 	ldbu	r4,0(r5)
   14cfc:	108002a4 	muli	r2,r2,10
   14d00:	a109883a 	add	r4,r20,r4
   14d04:	22c00003 	ldbu	r11,0(r4)
   14d08:	1345883a 	add	r2,r2,r13
   14d0c:	10bffc04 	addi	r2,r2,-16
   14d10:	593fffc4 	addi	r4,r11,-1
   14d14:	21003fcc 	andi	r4,r4,255
   14d18:	5b403fcc 	andi	r13,r11,255
   14d1c:	613ff52e 	bgeu	r12,r4,14cf4 <__alt_data_end+0xfc014cf4>
   14d20:	30000126 	beq	r6,zero,14d28 <__gethex+0x3d8>
   14d24:	0085c83a 	sub	r2,zero,r2
   14d28:	8039883a 	mov	fp,r16
   14d2c:	b8af883a 	add	r23,r23,r2
   14d30:	2821883a 	mov	r16,r5
   14d34:	003f5106 	br	14a7c <__alt_data_end+0xfc014a7c>
   14d38:	80800217 	ldw	r2,8(r16)
   14d3c:	e080f00e 	bge	fp,r2,15100 <__gethex+0x7b0>
   14d40:	e007883a 	mov	r3,fp
   14d44:	18800144 	addi	r2,r3,5
   14d48:	1085883a 	add	r2,r2,r2
   14d4c:	18c00044 	addi	r3,r3,1
   14d50:	1085883a 	add	r2,r2,r2
   14d54:	8085883a 	add	r2,r16,r2
   14d58:	80c00415 	stw	r3,16(r16)
   14d5c:	01000044 	movi	r4,1
   14d60:	11000015 	stw	r4,0(r2)
   14d64:	00800084 	movi	r2,2
   14d68:	8880d826 	beq	r17,r2,150cc <__gethex+0x77c>
   14d6c:	e0c0ac0e 	bge	fp,r3,15020 <__gethex+0x6d0>
   14d70:	01400044 	movi	r5,1
   14d74:	8009883a 	mov	r4,r16
   14d78:	00148500 	call	14850 <rshift>
   14d7c:	d8c00017 	ldw	r3,0(sp)
   14d80:	bdc00044 	addi	r23,r23,1
   14d84:	18800217 	ldw	r2,8(r3)
   14d88:	15c0a70e 	bge	r2,r23,15028 <__gethex+0x6d8>
   14d8c:	d9000117 	ldw	r4,4(sp)
   14d90:	800b883a 	mov	r5,r16
   14d94:	000d5940 	call	d594 <_Bfree>
   14d98:	d9001517 	ldw	r4,84(sp)
   14d9c:	008028c4 	movi	r2,163
   14da0:	20000015 	stw	zero,0(r4)
   14da4:	003faa06 	br	14c50 <__alt_data_end+0xfc014c50>
   14da8:	01800044 	movi	r6,1
   14dac:	80800083 	ldbu	r2,2(r16)
   14db0:	81400084 	addi	r5,r16,2
   14db4:	003fbc06 	br	14ca8 <__alt_data_end+0xfc014ca8>
   14db8:	ada1883a 	add	r16,r21,r22
   14dbc:	81000003 	ldbu	r4,0(r16)
   14dc0:	21403fcc 	andi	r5,r4,255
   14dc4:	a145883a 	add	r2,r20,r5
   14dc8:	10800003 	ldbu	r2,0(r2)
   14dcc:	11803fcc 	andi	r6,r2,255
   14dd0:	30004f26 	beq	r6,zero,14f10 <__gethex+0x5c0>
   14dd4:	00c00c04 	movi	r3,48
   14dd8:	802b883a 	mov	r21,r16
   14ddc:	28c0061e 	bne	r5,r3,14df8 <__gethex+0x4a8>
   14de0:	2809883a 	mov	r4,r5
   14de4:	ad400044 	addi	r21,r21,1
   14de8:	a8800003 	ldbu	r2,0(r21)
   14dec:	113ffd26 	beq	r2,r4,14de4 <__alt_data_end+0xfc014de4>
   14df0:	a085883a 	add	r2,r20,r2
   14df4:	10800003 	ldbu	r2,0(r2)
   14df8:	10803fcc 	andi	r2,r2,255
   14dfc:	1015003a 	cmpeq	r10,r2,zero
   14e00:	802f883a 	mov	r23,r16
   14e04:	04400044 	movi	r17,1
   14e08:	003eff06 	br	14a08 <__alt_data_end+0xfc014a08>
   14e0c:	04400044 	movi	r17,1
   14e10:	98000926 	beq	r19,zero,14e38 <__gethex+0x4e8>
   14e14:	d8c00017 	ldw	r3,0(sp)
   14e18:	18800317 	ldw	r2,12(r3)
   14e1c:	00c00084 	movi	r3,2
   14e20:	10c06826 	beq	r2,r3,14fc4 <__gethex+0x674>
   14e24:	00c000c4 	movi	r3,3
   14e28:	10c06a26 	beq	r2,r3,14fd4 <__gethex+0x684>
   14e2c:	00c00044 	movi	r3,1
   14e30:	10c08d26 	beq	r2,r3,15068 <__gethex+0x718>
   14e34:	8c400414 	ori	r17,r17,16
   14e38:	d9001517 	ldw	r4,84(sp)
   14e3c:	d8c00417 	ldw	r3,16(sp)
   14e40:	8805883a 	mov	r2,r17
   14e44:	24000015 	stw	r16,0(r4)
   14e48:	1dc00015 	stw	r23,0(r3)
   14e4c:	003f8006 	br	14c50 <__alt_data_end+0xfc014c50>
   14e50:	000d883a 	mov	r6,zero
   14e54:	003fd506 	br	14dac <__alt_data_end+0xfc014dac>
   14e58:	0005883a 	mov	r2,zero
   14e5c:	003f7c06 	br	14c50 <__alt_data_end+0xfc014c50>
   14e60:	14a3c83a 	sub	r17,r2,r18
   14e64:	880b883a 	mov	r5,r17
   14e68:	8009883a 	mov	r4,r16
   14e6c:	000e45c0 	call	e45c <__any_on>
   14e70:	10002926 	beq	r2,zero,14f18 <__gethex+0x5c8>
   14e74:	897fffc4 	addi	r5,r17,-1
   14e78:	2807d17a 	srai	r3,r5,5
   14e7c:	d8800217 	ldw	r2,8(sp)
   14e80:	290007cc 	andi	r4,r5,31
   14e84:	18c7883a 	add	r3,r3,r3
   14e88:	18c7883a 	add	r3,r3,r3
   14e8c:	04c00044 	movi	r19,1
   14e90:	10c7883a 	add	r3,r2,r3
   14e94:	9908983a 	sll	r4,r19,r4
   14e98:	18c00017 	ldw	r3,0(r3)
   14e9c:	20c6703a 	and	r3,r4,r3
   14ea0:	18000626 	beq	r3,zero,14ebc <__gethex+0x56c>
   14ea4:	99407b0e 	bge	r19,r5,15094 <__gethex+0x744>
   14ea8:	897fff84 	addi	r5,r17,-2
   14eac:	8009883a 	mov	r4,r16
   14eb0:	000e45c0 	call	e45c <__any_on>
   14eb4:	10007726 	beq	r2,zero,15094 <__gethex+0x744>
   14eb8:	04c000c4 	movi	r19,3
   14ebc:	880b883a 	mov	r5,r17
   14ec0:	8009883a 	mov	r4,r16
   14ec4:	00148500 	call	14850 <rshift>
   14ec8:	bc6f883a 	add	r23,r23,r17
   14ecc:	003f1f06 	br	14b4c <__alt_data_end+0xfc014b4c>
   14ed0:	002f883a 	mov	r23,zero
   14ed4:	003ee306 	br	14a64 <__alt_data_end+0xfc014a64>
   14ed8:	d9000117 	ldw	r4,4(sp)
   14edc:	90a3c83a 	sub	r17,r18,r2
   14ee0:	800b883a 	mov	r5,r16
   14ee4:	880d883a 	mov	r6,r17
   14ee8:	000dc6c0 	call	dc6c <__lshift>
   14eec:	10c00504 	addi	r3,r2,20
   14ef0:	1021883a 	mov	r16,r2
   14ef4:	bc6fc83a 	sub	r23,r23,r17
   14ef8:	d8c00215 	stw	r3,8(sp)
   14efc:	0027883a 	mov	r19,zero
   14f00:	003f1206 	br	14b4c <__alt_data_end+0xfc014b4c>
   14f04:	1d400084 	addi	r21,r3,2
   14f08:	0023883a 	mov	r17,zero
   14f0c:	003eb406 	br	149e0 <__alt_data_end+0xfc0149e0>
   14f10:	2005883a 	mov	r2,r4
   14f14:	003f4606 	br	14c30 <__alt_data_end+0xfc014c30>
   14f18:	0027883a 	mov	r19,zero
   14f1c:	003fe706 	br	14ebc <__alt_data_end+0xfc014ebc>
   14f20:	bc7fffc4 	addi	r17,r23,-1
   14f24:	9800421e 	bne	r19,zero,15030 <__gethex+0x6e0>
   14f28:	88000426 	beq	r17,zero,14f3c <__gethex+0x5ec>
   14f2c:	880b883a 	mov	r5,r17
   14f30:	8009883a 	mov	r4,r16
   14f34:	000e45c0 	call	e45c <__any_on>
   14f38:	1027883a 	mov	r19,r2
   14f3c:	8805d17a 	srai	r2,r17,5
   14f40:	d8c00217 	ldw	r3,8(sp)
   14f44:	8c4007cc 	andi	r17,r17,31
   14f48:	1085883a 	add	r2,r2,r2
   14f4c:	1085883a 	add	r2,r2,r2
   14f50:	1885883a 	add	r2,r3,r2
   14f54:	00c00044 	movi	r3,1
   14f58:	1c62983a 	sll	r17,r3,r17
   14f5c:	10800017 	ldw	r2,0(r2)
   14f60:	8884703a 	and	r2,r17,r2
   14f64:	10000126 	beq	r2,zero,14f6c <__gethex+0x61c>
   14f68:	9cc00094 	ori	r19,r19,2
   14f6c:	b80b883a 	mov	r5,r23
   14f70:	8009883a 	mov	r4,r16
   14f74:	00148500 	call	14850 <rshift>
   14f78:	d8c00017 	ldw	r3,0(sp)
   14f7c:	95e5c83a 	sub	r18,r18,r23
   14f80:	04400084 	movi	r17,2
   14f84:	1dc00117 	ldw	r23,4(r3)
   14f88:	003fa106 	br	14e10 <__alt_data_end+0xfc014e10>
   14f8c:	85af883a 	add	r23,r16,r22
   14f90:	b8800003 	ldbu	r2,0(r23)
   14f94:	b821883a 	mov	r16,r23
   14f98:	11003fcc 	andi	r4,r2,255
   14f9c:	a109883a 	add	r4,r20,r4
   14fa0:	21000003 	ldbu	r4,0(r4)
   14fa4:	203eaa26 	beq	r4,zero,14a50 <__alt_data_end+0xfc014a50>
   14fa8:	84000044 	addi	r16,r16,1
   14fac:	80800003 	ldbu	r2,0(r16)
   14fb0:	11003fcc 	andi	r4,r2,255
   14fb4:	a109883a 	add	r4,r20,r4
   14fb8:	21000003 	ldbu	r4,0(r4)
   14fbc:	203ffa1e 	bne	r4,zero,14fa8 <__alt_data_end+0xfc014fa8>
   14fc0:	003ea306 	br	14a50 <__alt_data_end+0xfc014a50>
   14fc4:	d9001617 	ldw	r4,88(sp)
   14fc8:	00800044 	movi	r2,1
   14fcc:	1109c83a 	sub	r4,r2,r4
   14fd0:	d9001615 	stw	r4,88(sp)
   14fd4:	d8801617 	ldw	r2,88(sp)
   14fd8:	103f9626 	beq	r2,zero,14e34 <__alt_data_end+0xfc014e34>
   14fdc:	87000417 	ldw	fp,16(r16)
   14fe0:	d9800217 	ldw	r6,8(sp)
   14fe4:	013fffc4 	movi	r4,-1
   14fe8:	e727883a 	add	r19,fp,fp
   14fec:	9ce7883a 	add	r19,r19,r19
   14ff0:	3005883a 	mov	r2,r6
   14ff4:	34cb883a 	add	r5,r6,r19
   14ff8:	00000306 	br	15008 <__gethex+0x6b8>
   14ffc:	10000015 	stw	zero,0(r2)
   15000:	10800104 	addi	r2,r2,4
   15004:	117f4c2e 	bgeu	r2,r5,14d38 <__alt_data_end+0xfc014d38>
   15008:	10c00017 	ldw	r3,0(r2)
   1500c:	193ffb26 	beq	r3,r4,14ffc <__alt_data_end+0xfc014ffc>
   15010:	18c00044 	addi	r3,r3,1
   15014:	10c00015 	stw	r3,0(r2)
   15018:	00800084 	movi	r2,2
   1501c:	88802b26 	beq	r17,r2,150cc <__gethex+0x77c>
   15020:	948007cc 	andi	r18,r18,31
   15024:	90002f1e 	bne	r18,zero,150e4 <__gethex+0x794>
   15028:	04400844 	movi	r17,33
   1502c:	003f8206 	br	14e38 <__alt_data_end+0xfc014e38>
   15030:	04c00044 	movi	r19,1
   15034:	003fc106 	br	14f3c <__alt_data_end+0xfc014f3c>
   15038:	d8c01617 	ldw	r3,88(sp)
   1503c:	183ed226 	beq	r3,zero,14b88 <__alt_data_end+0xfc014b88>
   15040:	d8c00417 	ldw	r3,16(sp)
   15044:	d9001517 	ldw	r4,84(sp)
   15048:	18800015 	stw	r2,0(r3)
   1504c:	d8c00217 	ldw	r3,8(sp)
   15050:	00800044 	movi	r2,1
   15054:	80800415 	stw	r2,16(r16)
   15058:	18800015 	stw	r2,0(r3)
   1505c:	24000015 	stw	r16,0(r4)
   15060:	00801884 	movi	r2,98
   15064:	003efa06 	br	14c50 <__alt_data_end+0xfc014c50>
   15068:	9880008c 	andi	r2,r19,2
   1506c:	103f7126 	beq	r2,zero,14e34 <__alt_data_end+0xfc014e34>
   15070:	d8c00217 	ldw	r3,8(sp)
   15074:	18800017 	ldw	r2,0(r3)
   15078:	9884b03a 	or	r2,r19,r2
   1507c:	1080004c 	andi	r2,r2,1
   15080:	103fd61e 	bne	r2,zero,14fdc <__alt_data_end+0xfc014fdc>
   15084:	003f6b06 	br	14e34 <__alt_data_end+0xfc014e34>
   15088:	da800217 	ldw	r10,8(sp)
   1508c:	0013883a 	mov	r9,zero
   15090:	003e9f06 	br	14b10 <__alt_data_end+0xfc014b10>
   15094:	04c00084 	movi	r19,2
   15098:	003f8806 	br	14ebc <__alt_data_end+0xfc014ebc>
   1509c:	d9001617 	ldw	r4,88(sp)
   150a0:	203fe726 	beq	r4,zero,15040 <__alt_data_end+0xfc015040>
   150a4:	003eb806 	br	14b88 <__alt_data_end+0xfc014b88>
   150a8:	95feb71e 	bne	r18,r23,14b88 <__alt_data_end+0xfc014b88>
   150ac:	1cbfe40e 	bge	r3,r18,15040 <__alt_data_end+0xfc015040>
   150b0:	917fffc4 	addi	r5,r18,-1
   150b4:	8009883a 	mov	r4,r16
   150b8:	000e45c0 	call	e45c <__any_on>
   150bc:	103eb226 	beq	r2,zero,14b88 <__alt_data_end+0xfc014b88>
   150c0:	d8c00017 	ldw	r3,0(sp)
   150c4:	18800117 	ldw	r2,4(r3)
   150c8:	003fdd06 	br	15040 <__alt_data_end+0xfc015040>
   150cc:	d8c00017 	ldw	r3,0(sp)
   150d0:	18800017 	ldw	r2,0(r3)
   150d4:	10bfffc4 	addi	r2,r2,-1
   150d8:	90801c26 	beq	r18,r2,1514c <__gethex+0x7fc>
   150dc:	04400884 	movi	r17,34
   150e0:	003f5506 	br	14e38 <__alt_data_end+0xfc014e38>
   150e4:	34c5883a 	add	r2,r6,r19
   150e8:	113fff17 	ldw	r4,-4(r2)
   150ec:	000d7e00 	call	d7e0 <__hi0bits>
   150f0:	00c00804 	movi	r3,32
   150f4:	1ca5c83a 	sub	r18,r3,r18
   150f8:	14bfcb0e 	bge	r2,r18,15028 <__alt_data_end+0xfc015028>
   150fc:	003f1c06 	br	14d70 <__alt_data_end+0xfc014d70>
   15100:	81400117 	ldw	r5,4(r16)
   15104:	d9000117 	ldw	r4,4(sp)
   15108:	29400044 	addi	r5,r5,1
   1510c:	000d4ec0 	call	d4ec <_Balloc>
   15110:	81800417 	ldw	r6,16(r16)
   15114:	81400304 	addi	r5,r16,12
   15118:	11000304 	addi	r4,r2,12
   1511c:	31800084 	addi	r6,r6,2
   15120:	318d883a 	add	r6,r6,r6
   15124:	318d883a 	add	r6,r6,r6
   15128:	1029883a 	mov	r20,r2
   1512c:	00059380 	call	5938 <memcpy>
   15130:	d9000117 	ldw	r4,4(sp)
   15134:	800b883a 	mov	r5,r16
   15138:	a021883a 	mov	r16,r20
   1513c:	000d5940 	call	d594 <_Bfree>
   15140:	a0c00417 	ldw	r3,16(r20)
   15144:	a1800504 	addi	r6,r20,20
   15148:	003efe06 	br	14d44 <__alt_data_end+0xfc014d44>
   1514c:	9005d17a 	srai	r2,r18,5
   15150:	944007cc 	andi	r17,r18,31
   15154:	1085883a 	add	r2,r2,r2
   15158:	1085883a 	add	r2,r2,r2
   1515c:	3087883a 	add	r3,r6,r2
   15160:	00800044 	movi	r2,1
   15164:	1462983a 	sll	r17,r2,r17
   15168:	18800017 	ldw	r2,0(r3)
   1516c:	8884703a 	and	r2,r17,r2
   15170:	1022c03a 	cmpne	r17,r2,zero
   15174:	00800884 	movi	r2,34
   15178:	1463c83a 	sub	r17,r2,r17
   1517c:	003f2e06 	br	14e38 <__alt_data_end+0xfc014e38>

00015180 <__hexnan>:
   15180:	defff904 	addi	sp,sp,-28
   15184:	dc800215 	stw	r18,8(sp)
   15188:	2c800017 	ldw	r18,0(r5)
   1518c:	dfc00615 	stw	ra,24(sp)
   15190:	dd400515 	stw	r21,20(sp)
   15194:	901fd17a 	srai	r15,r18,5
   15198:	dd000415 	stw	r20,16(sp)
   1519c:	dcc00315 	stw	r19,12(sp)
   151a0:	7bdf883a 	add	r15,r15,r15
   151a4:	7bdf883a 	add	r15,r15,r15
   151a8:	dc400115 	stw	r17,4(sp)
   151ac:	dc000015 	stw	r16,0(sp)
   151b0:	948007cc 	andi	r18,r18,31
   151b4:	33df883a 	add	r15,r6,r15
   151b8:	90000126 	beq	r18,zero,151c0 <__hexnan+0x40>
   151bc:	7bc00104 	addi	r15,r15,4
   151c0:	22000017 	ldw	r8,0(r4)
   151c4:	7affff04 	addi	r11,r15,-4
   151c8:	038000b4 	movhi	r14,2
   151cc:	783fff15 	stw	zero,-4(r15)
   151d0:	581b883a 	mov	r13,r11
   151d4:	580b883a 	mov	r5,r11
   151d8:	000f883a 	mov	r7,zero
   151dc:	003f883a 	mov	ra,zero
   151e0:	0019883a 	mov	r12,zero
   151e4:	73966d04 	addi	r14,r14,22964
   151e8:	04400204 	movi	r17,8
   151ec:	04000804 	movi	r16,32
   151f0:	04c001c4 	movi	r19,7
   151f4:	42000044 	addi	r8,r8,1
   151f8:	40c00003 	ldbu	r3,0(r8)
   151fc:	18001d26 	beq	r3,zero,15274 <__hexnan+0xf4>
   15200:	70c5883a 	add	r2,r14,r3
   15204:	10800003 	ldbu	r2,0(r2)
   15208:	12403fcc 	andi	r9,r2,255
   1520c:	4800301e 	bne	r9,zero,152d0 <__hexnan+0x150>
   15210:	80c04236 	bltu	r16,r3,1531c <__hexnan+0x19c>
   15214:	fb3ff70e 	bge	ra,r12,151f4 <__alt_data_end+0xfc0151f4>
   15218:	2b40112e 	bgeu	r5,r13,15260 <__hexnan+0xe0>
   1521c:	99c01016 	blt	r19,r7,15260 <__hexnan+0xe0>
   15220:	89e9c83a 	sub	r20,r17,r7
   15224:	a529883a 	add	r20,r20,r20
   15228:	2a800017 	ldw	r10,0(r5)
   1522c:	a529883a 	add	r20,r20,r20
   15230:	852bc83a 	sub	r21,r16,r20
   15234:	28c00104 	addi	r3,r5,4
   15238:	2805883a 	mov	r2,r5
   1523c:	19c00017 	ldw	r7,0(r3)
   15240:	10800104 	addi	r2,r2,4
   15244:	18c00104 	addi	r3,r3,4
   15248:	3d52983a 	sll	r9,r7,r21
   1524c:	4a92b03a 	or	r9,r9,r10
   15250:	3d14d83a 	srl	r10,r7,r20
   15254:	127fff15 	stw	r9,-4(r2)
   15258:	1abfff15 	stw	r10,-4(r3)
   1525c:	137ff736 	bltu	r2,r13,1523c <__alt_data_end+0xfc01523c>
   15260:	31402836 	bltu	r6,r5,15304 <__hexnan+0x184>
   15264:	42000044 	addi	r8,r8,1
   15268:	40c00003 	ldbu	r3,0(r8)
   1526c:	01c00204 	movi	r7,8
   15270:	183fe31e 	bne	r3,zero,15200 <__alt_data_end+0xfc015200>
   15274:	60002b26 	beq	r12,zero,15324 <__hexnan+0x1a4>
   15278:	2b40022e 	bgeu	r5,r13,15284 <__hexnan+0x104>
   1527c:	008001c4 	movi	r2,7
   15280:	11c0430e 	bge	r2,r7,15390 <__hexnan+0x210>
   15284:	3140312e 	bgeu	r6,r5,1534c <__hexnan+0x1cc>
   15288:	3007883a 	mov	r3,r6
   1528c:	29000017 	ldw	r4,0(r5)
   15290:	18800104 	addi	r2,r3,4
   15294:	29400104 	addi	r5,r5,4
   15298:	19000015 	stw	r4,0(r3)
   1529c:	1007883a 	mov	r3,r2
   152a0:	597ffa2e 	bgeu	r11,r5,1528c <__alt_data_end+0xfc01528c>
   152a4:	10000015 	stw	zero,0(r2)
   152a8:	10800104 	addi	r2,r2,4
   152ac:	58bffd2e 	bgeu	r11,r2,152a4 <__alt_data_end+0xfc0152a4>
   152b0:	78bfff17 	ldw	r2,-4(r15)
   152b4:	1000041e 	bne	r2,zero,152c8 <__hexnan+0x148>
   152b8:	32c02d26 	beq	r6,r11,15370 <__hexnan+0x1f0>
   152bc:	5affff04 	addi	r11,r11,-4
   152c0:	58800017 	ldw	r2,0(r11)
   152c4:	103ffc26 	beq	r2,zero,152b8 <__alt_data_end+0xfc0152b8>
   152c8:	00800144 	movi	r2,5
   152cc:	00001606 	br	15328 <__hexnan+0x1a8>
   152d0:	39c00044 	addi	r7,r7,1
   152d4:	63000044 	addi	r12,r12,1
   152d8:	89c0040e 	bge	r17,r7,152ec <__hexnan+0x16c>
   152dc:	317fc52e 	bgeu	r6,r5,151f4 <__alt_data_end+0xfc0151f4>
   152e0:	283fff15 	stw	zero,-4(r5)
   152e4:	01c00044 	movi	r7,1
   152e8:	297fff04 	addi	r5,r5,-4
   152ec:	28c00017 	ldw	r3,0(r5)
   152f0:	108003cc 	andi	r2,r2,15
   152f4:	1806913a 	slli	r3,r3,4
   152f8:	1884b03a 	or	r2,r3,r2
   152fc:	28800015 	stw	r2,0(r5)
   15300:	003fbc06 	br	151f4 <__alt_data_end+0xfc0151f4>
   15304:	2b7fff04 	addi	r13,r5,-4
   15308:	283fff15 	stw	zero,-4(r5)
   1530c:	603f883a 	mov	ra,r12
   15310:	680b883a 	mov	r5,r13
   15314:	000f883a 	mov	r7,zero
   15318:	003fb606 	br	151f4 <__alt_data_end+0xfc0151f4>
   1531c:	00800a44 	movi	r2,41
   15320:	18801726 	beq	r3,r2,15380 <__hexnan+0x200>
   15324:	00800104 	movi	r2,4
   15328:	dfc00617 	ldw	ra,24(sp)
   1532c:	dd400517 	ldw	r21,20(sp)
   15330:	dd000417 	ldw	r20,16(sp)
   15334:	dcc00317 	ldw	r19,12(sp)
   15338:	dc800217 	ldw	r18,8(sp)
   1533c:	dc400117 	ldw	r17,4(sp)
   15340:	dc000017 	ldw	r16,0(sp)
   15344:	dec00704 	addi	sp,sp,28
   15348:	f800283a 	ret
   1534c:	903fd826 	beq	r18,zero,152b0 <__alt_data_end+0xfc0152b0>
   15350:	00c00804 	movi	r3,32
   15354:	1ca5c83a 	sub	r18,r3,r18
   15358:	00ffffc4 	movi	r3,-1
   1535c:	78bfff17 	ldw	r2,-4(r15)
   15360:	1c86d83a 	srl	r3,r3,r18
   15364:	1884703a 	and	r2,r3,r2
   15368:	78bfff15 	stw	r2,-4(r15)
   1536c:	003fd106 	br	152b4 <__alt_data_end+0xfc0152b4>
   15370:	00800044 	movi	r2,1
   15374:	58800015 	stw	r2,0(r11)
   15378:	00800144 	movi	r2,5
   1537c:	003fea06 	br	15328 <__alt_data_end+0xfc015328>
   15380:	42000044 	addi	r8,r8,1
   15384:	22000015 	stw	r8,0(r4)
   15388:	603fbb1e 	bne	r12,zero,15278 <__alt_data_end+0xfc015278>
   1538c:	003fe506 	br	15324 <__alt_data_end+0xfc015324>
   15390:	02400204 	movi	r9,8
   15394:	49d3c83a 	sub	r9,r9,r7
   15398:	4a53883a 	add	r9,r9,r9
   1539c:	2a000017 	ldw	r8,0(r5)
   153a0:	4a53883a 	add	r9,r9,r9
   153a4:	02800804 	movi	r10,32
   153a8:	5255c83a 	sub	r10,r10,r9
   153ac:	28c00104 	addi	r3,r5,4
   153b0:	2805883a 	mov	r2,r5
   153b4:	19c00017 	ldw	r7,0(r3)
   153b8:	10800104 	addi	r2,r2,4
   153bc:	18c00104 	addi	r3,r3,4
   153c0:	3a88983a 	sll	r4,r7,r10
   153c4:	2208b03a 	or	r4,r4,r8
   153c8:	3a50d83a 	srl	r8,r7,r9
   153cc:	113fff15 	stw	r4,-4(r2)
   153d0:	1a3fff15 	stw	r8,-4(r3)
   153d4:	137ff736 	bltu	r2,r13,153b4 <__alt_data_end+0xfc0153b4>
   153d8:	003faa06 	br	15284 <__alt_data_end+0xfc015284>

000153dc <_isatty_r>:
   153dc:	defffd04 	addi	sp,sp,-12
   153e0:	dc000015 	stw	r16,0(sp)
   153e4:	040000f4 	movhi	r16,3
   153e8:	dc400115 	stw	r17,4(sp)
   153ec:	84250a04 	addi	r16,r16,-27608
   153f0:	2023883a 	mov	r17,r4
   153f4:	2809883a 	mov	r4,r5
   153f8:	dfc00215 	stw	ra,8(sp)
   153fc:	80000015 	stw	zero,0(r16)
   15400:	001a4380 	call	1a438 <isatty>
   15404:	00ffffc4 	movi	r3,-1
   15408:	10c00526 	beq	r2,r3,15420 <_isatty_r+0x44>
   1540c:	dfc00217 	ldw	ra,8(sp)
   15410:	dc400117 	ldw	r17,4(sp)
   15414:	dc000017 	ldw	r16,0(sp)
   15418:	dec00304 	addi	sp,sp,12
   1541c:	f800283a 	ret
   15420:	80c00017 	ldw	r3,0(r16)
   15424:	183ff926 	beq	r3,zero,1540c <__alt_data_end+0xfc01540c>
   15428:	88c00015 	stw	r3,0(r17)
   1542c:	003ff706 	br	1540c <__alt_data_end+0xfc01540c>

00015430 <strncmp>:
   15430:	30003126 	beq	r6,zero,154f8 <strncmp+0xc8>
   15434:	2144b03a 	or	r2,r4,r5
   15438:	108000cc 	andi	r2,r2,3
   1543c:	10001e1e 	bne	r2,zero,154b8 <strncmp+0x88>
   15440:	024000c4 	movi	r9,3
   15444:	49801c2e 	bgeu	r9,r6,154b8 <strncmp+0x88>
   15448:	20800017 	ldw	r2,0(r4)
   1544c:	28c00017 	ldw	r3,0(r5)
   15450:	10c0191e 	bne	r2,r3,154b8 <strncmp+0x88>
   15454:	31bfff04 	addi	r6,r6,-4
   15458:	30002726 	beq	r6,zero,154f8 <strncmp+0xc8>
   1545c:	02ffbff4 	movhi	r11,65279
   15460:	5affbfc4 	addi	r11,r11,-257
   15464:	0086303a 	nor	r3,zero,r2
   15468:	02a02074 	movhi	r10,32897
   1546c:	12c5883a 	add	r2,r2,r11
   15470:	52a02004 	addi	r10,r10,-32640
   15474:	10c4703a 	and	r2,r2,r3
   15478:	1284703a 	and	r2,r2,r10
   1547c:	10000b26 	beq	r2,zero,154ac <strncmp+0x7c>
   15480:	00001d06 	br	154f8 <strncmp+0xc8>
   15484:	20c00017 	ldw	r3,0(r4)
   15488:	29c00017 	ldw	r7,0(r5)
   1548c:	1ad1883a 	add	r8,r3,r11
   15490:	00c4303a 	nor	r2,zero,r3
   15494:	4084703a 	and	r2,r8,r2
   15498:	1284703a 	and	r2,r2,r10
   1549c:	19c0061e 	bne	r3,r7,154b8 <strncmp+0x88>
   154a0:	31bfff04 	addi	r6,r6,-4
   154a4:	30001426 	beq	r6,zero,154f8 <strncmp+0xc8>
   154a8:	1000131e 	bne	r2,zero,154f8 <strncmp+0xc8>
   154ac:	21000104 	addi	r4,r4,4
   154b0:	29400104 	addi	r5,r5,4
   154b4:	49bff336 	bltu	r9,r6,15484 <__alt_data_end+0xfc015484>
   154b8:	28800007 	ldb	r2,0(r5)
   154bc:	20c00007 	ldb	r3,0(r4)
   154c0:	31bfffc4 	addi	r6,r6,-1
   154c4:	10c0081e 	bne	r2,r3,154e8 <strncmp+0xb8>
   154c8:	30000b26 	beq	r6,zero,154f8 <strncmp+0xc8>
   154cc:	10000a26 	beq	r2,zero,154f8 <strncmp+0xc8>
   154d0:	21000044 	addi	r4,r4,1
   154d4:	29400044 	addi	r5,r5,1
   154d8:	20800007 	ldb	r2,0(r4)
   154dc:	28c00007 	ldb	r3,0(r5)
   154e0:	31bfffc4 	addi	r6,r6,-1
   154e4:	10fff826 	beq	r2,r3,154c8 <__alt_data_end+0xfc0154c8>
   154e8:	20800003 	ldbu	r2,0(r4)
   154ec:	28c00003 	ldbu	r3,0(r5)
   154f0:	10c5c83a 	sub	r2,r2,r3
   154f4:	f800283a 	ret
   154f8:	0005883a 	mov	r2,zero
   154fc:	f800283a 	ret

00015500 <__ssprint_r>:
   15500:	30800217 	ldw	r2,8(r6)
   15504:	defff604 	addi	sp,sp,-40
   15508:	dc800215 	stw	r18,8(sp)
   1550c:	dfc00915 	stw	ra,36(sp)
   15510:	df000815 	stw	fp,32(sp)
   15514:	ddc00715 	stw	r23,28(sp)
   15518:	dd800615 	stw	r22,24(sp)
   1551c:	dd400515 	stw	r21,20(sp)
   15520:	dd000415 	stw	r20,16(sp)
   15524:	dcc00315 	stw	r19,12(sp)
   15528:	dc400115 	stw	r17,4(sp)
   1552c:	dc000015 	stw	r16,0(sp)
   15530:	3025883a 	mov	r18,r6
   15534:	10005826 	beq	r2,zero,15698 <__ssprint_r+0x198>
   15538:	2027883a 	mov	r19,r4
   1553c:	35c00017 	ldw	r23,0(r6)
   15540:	29000017 	ldw	r4,0(r5)
   15544:	28800217 	ldw	r2,8(r5)
   15548:	2823883a 	mov	r17,r5
   1554c:	0039883a 	mov	fp,zero
   15550:	0021883a 	mov	r16,zero
   15554:	80003926 	beq	r16,zero,1563c <__ssprint_r+0x13c>
   15558:	102b883a 	mov	r21,r2
   1555c:	102d883a 	mov	r22,r2
   15560:	80803a36 	bltu	r16,r2,1564c <__ssprint_r+0x14c>
   15564:	88c0030b 	ldhu	r3,12(r17)
   15568:	1881200c 	andi	r2,r3,1152
   1556c:	10002626 	beq	r2,zero,15608 <__ssprint_r+0x108>
   15570:	88800517 	ldw	r2,20(r17)
   15574:	89400417 	ldw	r5,16(r17)
   15578:	81800044 	addi	r6,r16,1
   1557c:	108f883a 	add	r7,r2,r2
   15580:	3885883a 	add	r2,r7,r2
   15584:	100ed7fa 	srli	r7,r2,31
   15588:	216dc83a 	sub	r22,r4,r5
   1558c:	3589883a 	add	r4,r6,r22
   15590:	3885883a 	add	r2,r7,r2
   15594:	102bd07a 	srai	r21,r2,1
   15598:	a80d883a 	mov	r6,r21
   1559c:	a900022e 	bgeu	r21,r4,155a8 <__ssprint_r+0xa8>
   155a0:	202b883a 	mov	r21,r4
   155a4:	200d883a 	mov	r6,r4
   155a8:	18c1000c 	andi	r3,r3,1024
   155ac:	18002a26 	beq	r3,zero,15658 <__ssprint_r+0x158>
   155b0:	300b883a 	mov	r5,r6
   155b4:	9809883a 	mov	r4,r19
   155b8:	00050480 	call	5048 <_malloc_r>
   155bc:	1029883a 	mov	r20,r2
   155c0:	10002c26 	beq	r2,zero,15674 <__ssprint_r+0x174>
   155c4:	89400417 	ldw	r5,16(r17)
   155c8:	b00d883a 	mov	r6,r22
   155cc:	1009883a 	mov	r4,r2
   155d0:	00059380 	call	5938 <memcpy>
   155d4:	8880030b 	ldhu	r2,12(r17)
   155d8:	00fedfc4 	movi	r3,-1153
   155dc:	10c4703a 	and	r2,r2,r3
   155e0:	10802014 	ori	r2,r2,128
   155e4:	8880030d 	sth	r2,12(r17)
   155e8:	a589883a 	add	r4,r20,r22
   155ec:	adadc83a 	sub	r22,r21,r22
   155f0:	8d400515 	stw	r21,20(r17)
   155f4:	8d800215 	stw	r22,8(r17)
   155f8:	8d000415 	stw	r20,16(r17)
   155fc:	89000015 	stw	r4,0(r17)
   15600:	802b883a 	mov	r21,r16
   15604:	802d883a 	mov	r22,r16
   15608:	b00d883a 	mov	r6,r22
   1560c:	e00b883a 	mov	r5,fp
   15610:	000d3900 	call	d390 <memmove>
   15614:	88800217 	ldw	r2,8(r17)
   15618:	89000017 	ldw	r4,0(r17)
   1561c:	90c00217 	ldw	r3,8(r18)
   15620:	1545c83a 	sub	r2,r2,r21
   15624:	2589883a 	add	r4,r4,r22
   15628:	88800215 	stw	r2,8(r17)
   1562c:	89000015 	stw	r4,0(r17)
   15630:	1c21c83a 	sub	r16,r3,r16
   15634:	94000215 	stw	r16,8(r18)
   15638:	80001726 	beq	r16,zero,15698 <__ssprint_r+0x198>
   1563c:	bf000017 	ldw	fp,0(r23)
   15640:	bc000117 	ldw	r16,4(r23)
   15644:	bdc00204 	addi	r23,r23,8
   15648:	003fc206 	br	15554 <__alt_data_end+0xfc015554>
   1564c:	802b883a 	mov	r21,r16
   15650:	802d883a 	mov	r22,r16
   15654:	003fec06 	br	15608 <__alt_data_end+0xfc015608>
   15658:	9809883a 	mov	r4,r19
   1565c:	0005d200 	call	5d20 <_realloc_r>
   15660:	1029883a 	mov	r20,r2
   15664:	103fe01e 	bne	r2,zero,155e8 <__alt_data_end+0xfc0155e8>
   15668:	89400417 	ldw	r5,16(r17)
   1566c:	9809883a 	mov	r4,r19
   15670:	000c6780 	call	c678 <_free_r>
   15674:	88c0030b 	ldhu	r3,12(r17)
   15678:	00800304 	movi	r2,12
   1567c:	98800015 	stw	r2,0(r19)
   15680:	18c01014 	ori	r3,r3,64
   15684:	88c0030d 	sth	r3,12(r17)
   15688:	00bfffc4 	movi	r2,-1
   1568c:	90000215 	stw	zero,8(r18)
   15690:	90000115 	stw	zero,4(r18)
   15694:	00000206 	br	156a0 <__ssprint_r+0x1a0>
   15698:	90000115 	stw	zero,4(r18)
   1569c:	0005883a 	mov	r2,zero
   156a0:	dfc00917 	ldw	ra,36(sp)
   156a4:	df000817 	ldw	fp,32(sp)
   156a8:	ddc00717 	ldw	r23,28(sp)
   156ac:	dd800617 	ldw	r22,24(sp)
   156b0:	dd400517 	ldw	r21,20(sp)
   156b4:	dd000417 	ldw	r20,16(sp)
   156b8:	dcc00317 	ldw	r19,12(sp)
   156bc:	dc800217 	ldw	r18,8(sp)
   156c0:	dc400117 	ldw	r17,4(sp)
   156c4:	dc000017 	ldw	r16,0(sp)
   156c8:	dec00a04 	addi	sp,sp,40
   156cc:	f800283a 	ret

000156d0 <___svfiprintf_internal_r>:
   156d0:	2880030b 	ldhu	r2,12(r5)
   156d4:	deffc804 	addi	sp,sp,-224
   156d8:	dcc03115 	stw	r19,196(sp)
   156dc:	dfc03715 	stw	ra,220(sp)
   156e0:	df003615 	stw	fp,216(sp)
   156e4:	ddc03515 	stw	r23,212(sp)
   156e8:	dd803415 	stw	r22,208(sp)
   156ec:	dd403315 	stw	r21,204(sp)
   156f0:	dd003215 	stw	r20,200(sp)
   156f4:	dc803015 	stw	r18,192(sp)
   156f8:	dc402f15 	stw	r17,188(sp)
   156fc:	dc002e15 	stw	r16,184(sp)
   15700:	d9402715 	stw	r5,156(sp)
   15704:	d9002a15 	stw	r4,168(sp)
   15708:	1080200c 	andi	r2,r2,128
   1570c:	d9c02315 	stw	r7,140(sp)
   15710:	3027883a 	mov	r19,r6
   15714:	10000226 	beq	r2,zero,15720 <___svfiprintf_internal_r+0x50>
   15718:	28800417 	ldw	r2,16(r5)
   1571c:	10041d26 	beq	r2,zero,16794 <___svfiprintf_internal_r+0x10c4>
   15720:	dac01a04 	addi	r11,sp,104
   15724:	dac01e15 	stw	r11,120(sp)
   15728:	d8801e17 	ldw	r2,120(sp)
   1572c:	dac019c4 	addi	r11,sp,103
   15730:	dd402a17 	ldw	r21,168(sp)
   15734:	ddc02717 	ldw	r23,156(sp)
   15738:	058000b4 	movhi	r22,2
   1573c:	050000b4 	movhi	r20,2
   15740:	dac01f15 	stw	r11,124(sp)
   15744:	12d7c83a 	sub	r11,r2,r11
   15748:	b596b104 	addi	r22,r22,23236
   1574c:	a516ad04 	addi	r20,r20,23220
   15750:	dec01a15 	stw	sp,104(sp)
   15754:	d8001c15 	stw	zero,112(sp)
   15758:	d8001b15 	stw	zero,108(sp)
   1575c:	d811883a 	mov	r8,sp
   15760:	d8002915 	stw	zero,164(sp)
   15764:	d8002515 	stw	zero,148(sp)
   15768:	dac02b15 	stw	r11,172(sp)
   1576c:	98800007 	ldb	r2,0(r19)
   15770:	1002dd26 	beq	r2,zero,162e8 <___svfiprintf_internal_r+0xc18>
   15774:	00c00944 	movi	r3,37
   15778:	9823883a 	mov	r17,r19
   1577c:	10c0021e 	bne	r2,r3,15788 <___svfiprintf_internal_r+0xb8>
   15780:	00001406 	br	157d4 <___svfiprintf_internal_r+0x104>
   15784:	10c00326 	beq	r2,r3,15794 <___svfiprintf_internal_r+0xc4>
   15788:	8c400044 	addi	r17,r17,1
   1578c:	88800007 	ldb	r2,0(r17)
   15790:	103ffc1e 	bne	r2,zero,15784 <__alt_data_end+0xfc015784>
   15794:	8ce1c83a 	sub	r16,r17,r19
   15798:	80000e26 	beq	r16,zero,157d4 <___svfiprintf_internal_r+0x104>
   1579c:	d8c01c17 	ldw	r3,112(sp)
   157a0:	d8801b17 	ldw	r2,108(sp)
   157a4:	44c00015 	stw	r19,0(r8)
   157a8:	1c07883a 	add	r3,r3,r16
   157ac:	10800044 	addi	r2,r2,1
   157b0:	d8c01c15 	stw	r3,112(sp)
   157b4:	44000115 	stw	r16,4(r8)
   157b8:	d8801b15 	stw	r2,108(sp)
   157bc:	00c001c4 	movi	r3,7
   157c0:	18831e16 	blt	r3,r2,1643c <___svfiprintf_internal_r+0xd6c>
   157c4:	42000204 	addi	r8,r8,8
   157c8:	dac02517 	ldw	r11,148(sp)
   157cc:	5c17883a 	add	r11,r11,r16
   157d0:	dac02515 	stw	r11,148(sp)
   157d4:	88800007 	ldb	r2,0(r17)
   157d8:	1002c526 	beq	r2,zero,162f0 <___svfiprintf_internal_r+0xc20>
   157dc:	88c00047 	ldb	r3,1(r17)
   157e0:	8cc00044 	addi	r19,r17,1
   157e4:	d8001d85 	stb	zero,118(sp)
   157e8:	0009883a 	mov	r4,zero
   157ec:	000f883a 	mov	r7,zero
   157f0:	043fffc4 	movi	r16,-1
   157f4:	d8002415 	stw	zero,144(sp)
   157f8:	0025883a 	mov	r18,zero
   157fc:	01401604 	movi	r5,88
   15800:	01800244 	movi	r6,9
   15804:	02800a84 	movi	r10,42
   15808:	02401b04 	movi	r9,108
   1580c:	9cc00044 	addi	r19,r19,1
   15810:	18bff804 	addi	r2,r3,-32
   15814:	2881dd36 	bltu	r5,r2,15f8c <___svfiprintf_internal_r+0x8bc>
   15818:	100490ba 	slli	r2,r2,2
   1581c:	02c00074 	movhi	r11,1
   15820:	5ad60c04 	addi	r11,r11,22576
   15824:	12c5883a 	add	r2,r2,r11
   15828:	10800017 	ldw	r2,0(r2)
   1582c:	1000683a 	jmp	r2
   15830:	00015a2c 	andhi	zero,zero,1384
   15834:	00015f8c 	andi	zero,zero,1406
   15838:	00015f8c 	andi	zero,zero,1406
   1583c:	00015a20 	cmpeqi	zero,zero,1384
   15840:	00015f8c 	andi	zero,zero,1406
   15844:	00015f8c 	andi	zero,zero,1406
   15848:	00015f8c 	andi	zero,zero,1406
   1584c:	00015f8c 	andi	zero,zero,1406
   15850:	00015f8c 	andi	zero,zero,1406
   15854:	00015f8c 	andi	zero,zero,1406
   15858:	00015994 	movui	zero,1382
   1585c:	00015b70 	cmpltui	zero,zero,1389
   15860:	00015f8c 	andi	zero,zero,1406
   15864:	000159c0 	call	159c <manCapture+0x22c>
   15868:	00015fc0 	call	15fc <manCapture+0x28c>
   1586c:	00015f8c 	andi	zero,zero,1406
   15870:	00015fb4 	movhi	zero,1406
   15874:	00015f54 	movui	zero,1405
   15878:	00015f54 	movui	zero,1405
   1587c:	00015f54 	movui	zero,1405
   15880:	00015f54 	movui	zero,1405
   15884:	00015f54 	movui	zero,1405
   15888:	00015f54 	movui	zero,1405
   1588c:	00015f54 	movui	zero,1405
   15890:	00015f54 	movui	zero,1405
   15894:	00015f54 	movui	zero,1405
   15898:	00015f8c 	andi	zero,zero,1406
   1589c:	00015f8c 	andi	zero,zero,1406
   158a0:	00015f8c 	andi	zero,zero,1406
   158a4:	00015f8c 	andi	zero,zero,1406
   158a8:	00015f8c 	andi	zero,zero,1406
   158ac:	00015f8c 	andi	zero,zero,1406
   158b0:	00015f8c 	andi	zero,zero,1406
   158b4:	00015f8c 	andi	zero,zero,1406
   158b8:	00015f8c 	andi	zero,zero,1406
   158bc:	00015f8c 	andi	zero,zero,1406
   158c0:	00015ef0 	cmpltui	zero,zero,1403
   158c4:	00015f8c 	andi	zero,zero,1406
   158c8:	00015f8c 	andi	zero,zero,1406
   158cc:	00015f8c 	andi	zero,zero,1406
   158d0:	00015f8c 	andi	zero,zero,1406
   158d4:	00015f8c 	andi	zero,zero,1406
   158d8:	00015f8c 	andi	zero,zero,1406
   158dc:	00015f8c 	andi	zero,zero,1406
   158e0:	00015f8c 	andi	zero,zero,1406
   158e4:	00015f8c 	andi	zero,zero,1406
   158e8:	00015f8c 	andi	zero,zero,1406
   158ec:	00016068 	cmpgeui	zero,zero,1409
   158f0:	00015f8c 	andi	zero,zero,1406
   158f4:	00015f8c 	andi	zero,zero,1406
   158f8:	00015f8c 	andi	zero,zero,1406
   158fc:	00015f8c 	andi	zero,zero,1406
   15900:	00015f8c 	andi	zero,zero,1406
   15904:	00016000 	call	1600 <manCapture+0x290>
   15908:	00015f8c 	andi	zero,zero,1406
   1590c:	00015f8c 	andi	zero,zero,1406
   15910:	00015d34 	movhi	zero,1396
   15914:	00015f8c 	andi	zero,zero,1406
   15918:	00015f8c 	andi	zero,zero,1406
   1591c:	00015f8c 	andi	zero,zero,1406
   15920:	00015f8c 	andi	zero,zero,1406
   15924:	00015f8c 	andi	zero,zero,1406
   15928:	00015f8c 	andi	zero,zero,1406
   1592c:	00015f8c 	andi	zero,zero,1406
   15930:	00015f8c 	andi	zero,zero,1406
   15934:	00015f8c 	andi	zero,zero,1406
   15938:	00015f8c 	andi	zero,zero,1406
   1593c:	00015c24 	muli	zero,zero,1392
   15940:	00015dd0 	cmplti	zero,zero,1399
   15944:	00015f8c 	andi	zero,zero,1406
   15948:	00015f8c 	andi	zero,zero,1406
   1594c:	00015f8c 	andi	zero,zero,1406
   15950:	00015dc4 	movi	zero,1399
   15954:	00015dd0 	cmplti	zero,zero,1399
   15958:	00015f8c 	andi	zero,zero,1406
   1595c:	00015f8c 	andi	zero,zero,1406
   15960:	00015db4 	movhi	zero,1398
   15964:	00015f8c 	andi	zero,zero,1406
   15968:	00015d78 	rdprs	zero,zero,1397
   1596c:	00015b80 	call	15b8 <manCapture+0x248>
   15970:	000159cc 	andi	zero,zero,1383
   15974:	00015ee4 	muli	zero,zero,1403
   15978:	00015f8c 	andi	zero,zero,1406
   1597c:	00015e98 	cmpnei	zero,zero,1402
   15980:	00015f8c 	andi	zero,zero,1406
   15984:	00015af0 	cmpltui	zero,zero,1387
   15988:	00015f8c 	andi	zero,zero,1406
   1598c:	00015f8c 	andi	zero,zero,1406
   15990:	00015a4c 	andi	zero,zero,1385
   15994:	dac02317 	ldw	r11,140(sp)
   15998:	5ac00017 	ldw	r11,0(r11)
   1599c:	dac02415 	stw	r11,144(sp)
   159a0:	dac02317 	ldw	r11,140(sp)
   159a4:	58800104 	addi	r2,r11,4
   159a8:	dac02417 	ldw	r11,144(sp)
   159ac:	5802e90e 	bge	r11,zero,16554 <___svfiprintf_internal_r+0xe84>
   159b0:	dac02417 	ldw	r11,144(sp)
   159b4:	d8802315 	stw	r2,140(sp)
   159b8:	02d7c83a 	sub	r11,zero,r11
   159bc:	dac02415 	stw	r11,144(sp)
   159c0:	94800114 	ori	r18,r18,4
   159c4:	98c00007 	ldb	r3,0(r19)
   159c8:	003f9006 	br	1580c <__alt_data_end+0xfc01580c>
   159cc:	00800c04 	movi	r2,48
   159d0:	dac02317 	ldw	r11,140(sp)
   159d4:	d8801d05 	stb	r2,116(sp)
   159d8:	00801e04 	movi	r2,120
   159dc:	d8801d45 	stb	r2,117(sp)
   159e0:	d8001d85 	stb	zero,118(sp)
   159e4:	58c00104 	addi	r3,r11,4
   159e8:	5f000017 	ldw	fp,0(r11)
   159ec:	0013883a 	mov	r9,zero
   159f0:	90800094 	ori	r2,r18,2
   159f4:	80032b16 	blt	r16,zero,166a4 <___svfiprintf_internal_r+0xfd4>
   159f8:	00bfdfc4 	movi	r2,-129
   159fc:	90a4703a 	and	r18,r18,r2
   15a00:	d8c02315 	stw	r3,140(sp)
   15a04:	94800094 	ori	r18,r18,2
   15a08:	e002dc26 	beq	fp,zero,1657c <___svfiprintf_internal_r+0xeac>
   15a0c:	010000b4 	movhi	r4,2
   15a10:	21153a04 	addi	r4,r4,21736
   15a14:	0015883a 	mov	r10,zero
   15a18:	d9002915 	stw	r4,164(sp)
   15a1c:	00002306 	br	15aac <___svfiprintf_internal_r+0x3dc>
   15a20:	94800054 	ori	r18,r18,1
   15a24:	98c00007 	ldb	r3,0(r19)
   15a28:	003f7806 	br	1580c <__alt_data_end+0xfc01580c>
   15a2c:	38803fcc 	andi	r2,r7,255
   15a30:	1080201c 	xori	r2,r2,128
   15a34:	10bfe004 	addi	r2,r2,-128
   15a38:	1002f31e 	bne	r2,zero,16608 <___svfiprintf_internal_r+0xf38>
   15a3c:	01000044 	movi	r4,1
   15a40:	01c00804 	movi	r7,32
   15a44:	98c00007 	ldb	r3,0(r19)
   15a48:	003f7006 	br	1580c <__alt_data_end+0xfc01580c>
   15a4c:	21003fcc 	andi	r4,r4,255
   15a50:	2003aa1e 	bne	r4,zero,168fc <___svfiprintf_internal_r+0x122c>
   15a54:	008000b4 	movhi	r2,2
   15a58:	10953a04 	addi	r2,r2,21736
   15a5c:	d8802915 	stw	r2,164(sp)
   15a60:	9080080c 	andi	r2,r18,32
   15a64:	1000ba26 	beq	r2,zero,15d50 <___svfiprintf_internal_r+0x680>
   15a68:	dac02317 	ldw	r11,140(sp)
   15a6c:	5f000017 	ldw	fp,0(r11)
   15a70:	5a400117 	ldw	r9,4(r11)
   15a74:	5ac00204 	addi	r11,r11,8
   15a78:	dac02315 	stw	r11,140(sp)
   15a7c:	9080004c 	andi	r2,r18,1
   15a80:	10029026 	beq	r2,zero,164c4 <___svfiprintf_internal_r+0xdf4>
   15a84:	e244b03a 	or	r2,fp,r9
   15a88:	1002d41e 	bne	r2,zero,165dc <___svfiprintf_internal_r+0xf0c>
   15a8c:	d8001d85 	stb	zero,118(sp)
   15a90:	80030b16 	blt	r16,zero,166c0 <___svfiprintf_internal_r+0xff0>
   15a94:	00bfdfc4 	movi	r2,-129
   15a98:	90a4703a 	and	r18,r18,r2
   15a9c:	0015883a 	mov	r10,zero
   15aa0:	80002426 	beq	r16,zero,15b34 <___svfiprintf_internal_r+0x464>
   15aa4:	0039883a 	mov	fp,zero
   15aa8:	0013883a 	mov	r9,zero
   15aac:	d9002917 	ldw	r4,164(sp)
   15ab0:	dc401a04 	addi	r17,sp,104
   15ab4:	e08003cc 	andi	r2,fp,15
   15ab8:	4806973a 	slli	r3,r9,28
   15abc:	2085883a 	add	r2,r4,r2
   15ac0:	e038d13a 	srli	fp,fp,4
   15ac4:	10800003 	ldbu	r2,0(r2)
   15ac8:	4812d13a 	srli	r9,r9,4
   15acc:	8c7fffc4 	addi	r17,r17,-1
   15ad0:	1f38b03a 	or	fp,r3,fp
   15ad4:	88800005 	stb	r2,0(r17)
   15ad8:	e244b03a 	or	r2,fp,r9
   15adc:	103ff51e 	bne	r2,zero,15ab4 <__alt_data_end+0xfc015ab4>
   15ae0:	dac01e17 	ldw	r11,120(sp)
   15ae4:	5c57c83a 	sub	r11,r11,r17
   15ae8:	dac02115 	stw	r11,132(sp)
   15aec:	00001406 	br	15b40 <___svfiprintf_internal_r+0x470>
   15af0:	21003fcc 	andi	r4,r4,255
   15af4:	2003741e 	bne	r4,zero,168c8 <___svfiprintf_internal_r+0x11f8>
   15af8:	9080080c 	andi	r2,r18,32
   15afc:	10014526 	beq	r2,zero,16014 <___svfiprintf_internal_r+0x944>
   15b00:	dac02317 	ldw	r11,140(sp)
   15b04:	d8001d85 	stb	zero,118(sp)
   15b08:	58c00204 	addi	r3,r11,8
   15b0c:	5f000017 	ldw	fp,0(r11)
   15b10:	5a400117 	ldw	r9,4(r11)
   15b14:	8002d916 	blt	r16,zero,1667c <___svfiprintf_internal_r+0xfac>
   15b18:	013fdfc4 	movi	r4,-129
   15b1c:	e244b03a 	or	r2,fp,r9
   15b20:	d8c02315 	stw	r3,140(sp)
   15b24:	9124703a 	and	r18,r18,r4
   15b28:	0015883a 	mov	r10,zero
   15b2c:	1000b91e 	bne	r2,zero,15e14 <___svfiprintf_internal_r+0x744>
   15b30:	8002e61e 	bne	r16,zero,166cc <___svfiprintf_internal_r+0xffc>
   15b34:	0021883a 	mov	r16,zero
   15b38:	d8002115 	stw	zero,132(sp)
   15b3c:	dc401a04 	addi	r17,sp,104
   15b40:	d8c02117 	ldw	r3,132(sp)
   15b44:	dc002015 	stw	r16,128(sp)
   15b48:	80c0010e 	bge	r16,r3,15b50 <___svfiprintf_internal_r+0x480>
   15b4c:	d8c02015 	stw	r3,128(sp)
   15b50:	52803fcc 	andi	r10,r10,255
   15b54:	5280201c 	xori	r10,r10,128
   15b58:	52bfe004 	addi	r10,r10,-128
   15b5c:	50003c26 	beq	r10,zero,15c50 <___svfiprintf_internal_r+0x580>
   15b60:	dac02017 	ldw	r11,128(sp)
   15b64:	5ac00044 	addi	r11,r11,1
   15b68:	dac02015 	stw	r11,128(sp)
   15b6c:	00003806 	br	15c50 <___svfiprintf_internal_r+0x580>
   15b70:	01000044 	movi	r4,1
   15b74:	01c00ac4 	movi	r7,43
   15b78:	98c00007 	ldb	r3,0(r19)
   15b7c:	003f2306 	br	1580c <__alt_data_end+0xfc01580c>
   15b80:	21003fcc 	andi	r4,r4,255
   15b84:	2003481e 	bne	r4,zero,168a8 <___svfiprintf_internal_r+0x11d8>
   15b88:	9080080c 	andi	r2,r18,32
   15b8c:	10013b26 	beq	r2,zero,1607c <___svfiprintf_internal_r+0x9ac>
   15b90:	dac02317 	ldw	r11,140(sp)
   15b94:	d8001d85 	stb	zero,118(sp)
   15b98:	58800204 	addi	r2,r11,8
   15b9c:	5f000017 	ldw	fp,0(r11)
   15ba0:	5a400117 	ldw	r9,4(r11)
   15ba4:	8002a816 	blt	r16,zero,16648 <___svfiprintf_internal_r+0xf78>
   15ba8:	013fdfc4 	movi	r4,-129
   15bac:	e246b03a 	or	r3,fp,r9
   15bb0:	d8802315 	stw	r2,140(sp)
   15bb4:	9124703a 	and	r18,r18,r4
   15bb8:	18013c26 	beq	r3,zero,160ac <___svfiprintf_internal_r+0x9dc>
   15bbc:	0015883a 	mov	r10,zero
   15bc0:	dc401a04 	addi	r17,sp,104
   15bc4:	e006d0fa 	srli	r3,fp,3
   15bc8:	4808977a 	slli	r4,r9,29
   15bcc:	4812d0fa 	srli	r9,r9,3
   15bd0:	e70001cc 	andi	fp,fp,7
   15bd4:	e0800c04 	addi	r2,fp,48
   15bd8:	8c7fffc4 	addi	r17,r17,-1
   15bdc:	20f8b03a 	or	fp,r4,r3
   15be0:	88800005 	stb	r2,0(r17)
   15be4:	e246b03a 	or	r3,fp,r9
   15be8:	183ff61e 	bne	r3,zero,15bc4 <__alt_data_end+0xfc015bc4>
   15bec:	90c0004c 	andi	r3,r18,1
   15bf0:	1800a526 	beq	r3,zero,15e88 <___svfiprintf_internal_r+0x7b8>
   15bf4:	10803fcc 	andi	r2,r2,255
   15bf8:	1080201c 	xori	r2,r2,128
   15bfc:	10bfe004 	addi	r2,r2,-128
   15c00:	00c00c04 	movi	r3,48
   15c04:	10ffb626 	beq	r2,r3,15ae0 <__alt_data_end+0xfc015ae0>
   15c08:	88ffffc5 	stb	r3,-1(r17)
   15c0c:	d8c01e17 	ldw	r3,120(sp)
   15c10:	88bfffc4 	addi	r2,r17,-1
   15c14:	1023883a 	mov	r17,r2
   15c18:	1887c83a 	sub	r3,r3,r2
   15c1c:	d8c02115 	stw	r3,132(sp)
   15c20:	003fc706 	br	15b40 <__alt_data_end+0xfc015b40>
   15c24:	dac02317 	ldw	r11,140(sp)
   15c28:	00c00044 	movi	r3,1
   15c2c:	d8c02015 	stw	r3,128(sp)
   15c30:	58800017 	ldw	r2,0(r11)
   15c34:	5ac00104 	addi	r11,r11,4
   15c38:	d8001d85 	stb	zero,118(sp)
   15c3c:	d8801005 	stb	r2,64(sp)
   15c40:	dac02315 	stw	r11,140(sp)
   15c44:	d8c02115 	stw	r3,132(sp)
   15c48:	dc401004 	addi	r17,sp,64
   15c4c:	0021883a 	mov	r16,zero
   15c50:	90c0008c 	andi	r3,r18,2
   15c54:	d8c02215 	stw	r3,136(sp)
   15c58:	18000326 	beq	r3,zero,15c68 <___svfiprintf_internal_r+0x598>
   15c5c:	dac02017 	ldw	r11,128(sp)
   15c60:	5ac00084 	addi	r11,r11,2
   15c64:	dac02015 	stw	r11,128(sp)
   15c68:	90c0210c 	andi	r3,r18,132
   15c6c:	d8c02615 	stw	r3,152(sp)
   15c70:	1801131e 	bne	r3,zero,160c0 <___svfiprintf_internal_r+0x9f0>
   15c74:	dac02417 	ldw	r11,144(sp)
   15c78:	d8c02017 	ldw	r3,128(sp)
   15c7c:	58f9c83a 	sub	fp,r11,r3
   15c80:	07010f0e 	bge	zero,fp,160c0 <___svfiprintf_internal_r+0x9f0>
   15c84:	02400404 	movi	r9,16
   15c88:	d8c01c17 	ldw	r3,112(sp)
   15c8c:	d8801b17 	ldw	r2,108(sp)
   15c90:	4f02d60e 	bge	r9,fp,167ec <___svfiprintf_internal_r+0x111c>
   15c94:	014000b4 	movhi	r5,2
   15c98:	2956b104 	addi	r5,r5,23236
   15c9c:	d9402815 	stw	r5,160(sp)
   15ca0:	028001c4 	movi	r10,7
   15ca4:	00000306 	br	15cb4 <___svfiprintf_internal_r+0x5e4>
   15ca8:	e73ffc04 	addi	fp,fp,-16
   15cac:	42000204 	addi	r8,r8,8
   15cb0:	4f00150e 	bge	r9,fp,15d08 <___svfiprintf_internal_r+0x638>
   15cb4:	18c00404 	addi	r3,r3,16
   15cb8:	10800044 	addi	r2,r2,1
   15cbc:	45800015 	stw	r22,0(r8)
   15cc0:	42400115 	stw	r9,4(r8)
   15cc4:	d8c01c15 	stw	r3,112(sp)
   15cc8:	d8801b15 	stw	r2,108(sp)
   15ccc:	50bff60e 	bge	r10,r2,15ca8 <__alt_data_end+0xfc015ca8>
   15cd0:	d9801a04 	addi	r6,sp,104
   15cd4:	b80b883a 	mov	r5,r23
   15cd8:	a809883a 	mov	r4,r21
   15cdc:	da402c15 	stw	r9,176(sp)
   15ce0:	da802d15 	stw	r10,180(sp)
   15ce4:	00155000 	call	15500 <__ssprint_r>
   15ce8:	da402c17 	ldw	r9,176(sp)
   15cec:	da802d17 	ldw	r10,180(sp)
   15cf0:	1001851e 	bne	r2,zero,16308 <___svfiprintf_internal_r+0xc38>
   15cf4:	e73ffc04 	addi	fp,fp,-16
   15cf8:	d8c01c17 	ldw	r3,112(sp)
   15cfc:	d8801b17 	ldw	r2,108(sp)
   15d00:	d811883a 	mov	r8,sp
   15d04:	4f3feb16 	blt	r9,fp,15cb4 <__alt_data_end+0xfc015cb4>
   15d08:	dac02817 	ldw	r11,160(sp)
   15d0c:	e0c7883a 	add	r3,fp,r3
   15d10:	10800044 	addi	r2,r2,1
   15d14:	42c00015 	stw	r11,0(r8)
   15d18:	47000115 	stw	fp,4(r8)
   15d1c:	d8c01c15 	stw	r3,112(sp)
   15d20:	d8801b15 	stw	r2,108(sp)
   15d24:	010001c4 	movi	r4,7
   15d28:	2081ee16 	blt	r4,r2,164e4 <___svfiprintf_internal_r+0xe14>
   15d2c:	42000204 	addi	r8,r8,8
   15d30:	0000e506 	br	160c8 <___svfiprintf_internal_r+0x9f8>
   15d34:	21003fcc 	andi	r4,r4,255
   15d38:	2002dd1e 	bne	r4,zero,168b0 <___svfiprintf_internal_r+0x11e0>
   15d3c:	008000b4 	movhi	r2,2
   15d40:	10953504 	addi	r2,r2,21716
   15d44:	d8802915 	stw	r2,164(sp)
   15d48:	9080080c 	andi	r2,r18,32
   15d4c:	103f461e 	bne	r2,zero,15a68 <__alt_data_end+0xfc015a68>
   15d50:	9080040c 	andi	r2,r18,16
   15d54:	10022e1e 	bne	r2,zero,16610 <___svfiprintf_internal_r+0xf40>
   15d58:	9080100c 	andi	r2,r18,64
   15d5c:	dac02317 	ldw	r11,140(sp)
   15d60:	10027326 	beq	r2,zero,16730 <___svfiprintf_internal_r+0x1060>
   15d64:	5f00000b 	ldhu	fp,0(r11)
   15d68:	5ac00104 	addi	r11,r11,4
   15d6c:	0013883a 	mov	r9,zero
   15d70:	dac02315 	stw	r11,140(sp)
   15d74:	003f4106 	br	15a7c <__alt_data_end+0xfc015a7c>
   15d78:	21003fcc 	andi	r4,r4,255
   15d7c:	2002e11e 	bne	r4,zero,16904 <___svfiprintf_internal_r+0x1234>
   15d80:	9080080c 	andi	r2,r18,32
   15d84:	1002011e 	bne	r2,zero,1658c <___svfiprintf_internal_r+0xebc>
   15d88:	9080040c 	andi	r2,r18,16
   15d8c:	10023e1e 	bne	r2,zero,16688 <___svfiprintf_internal_r+0xfb8>
   15d90:	9480100c 	andi	r18,r18,64
   15d94:	90023c26 	beq	r18,zero,16688 <___svfiprintf_internal_r+0xfb8>
   15d98:	dac02317 	ldw	r11,140(sp)
   15d9c:	58800017 	ldw	r2,0(r11)
   15da0:	5ac00104 	addi	r11,r11,4
   15da4:	dac02315 	stw	r11,140(sp)
   15da8:	dac02517 	ldw	r11,148(sp)
   15dac:	12c0000d 	sth	r11,0(r2)
   15db0:	003e6e06 	br	1576c <__alt_data_end+0xfc01576c>
   15db4:	98c00007 	ldb	r3,0(r19)
   15db8:	1a422926 	beq	r3,r9,16660 <___svfiprintf_internal_r+0xf90>
   15dbc:	94800414 	ori	r18,r18,16
   15dc0:	003e9206 	br	1580c <__alt_data_end+0xfc01580c>
   15dc4:	94801014 	ori	r18,r18,64
   15dc8:	98c00007 	ldb	r3,0(r19)
   15dcc:	003e8f06 	br	1580c <__alt_data_end+0xfc01580c>
   15dd0:	21003fcc 	andi	r4,r4,255
   15dd4:	2002c71e 	bne	r4,zero,168f4 <___svfiprintf_internal_r+0x1224>
   15dd8:	9080080c 	andi	r2,r18,32
   15ddc:	10004926 	beq	r2,zero,15f04 <___svfiprintf_internal_r+0x834>
   15de0:	dac02317 	ldw	r11,140(sp)
   15de4:	58800117 	ldw	r2,4(r11)
   15de8:	5f000017 	ldw	fp,0(r11)
   15dec:	5ac00204 	addi	r11,r11,8
   15df0:	dac02315 	stw	r11,140(sp)
   15df4:	1013883a 	mov	r9,r2
   15df8:	10004b16 	blt	r2,zero,15f28 <___svfiprintf_internal_r+0x858>
   15dfc:	da801d83 	ldbu	r10,118(sp)
   15e00:	8001cb16 	blt	r16,zero,16530 <___svfiprintf_internal_r+0xe60>
   15e04:	00ffdfc4 	movi	r3,-129
   15e08:	e244b03a 	or	r2,fp,r9
   15e0c:	90e4703a 	and	r18,r18,r3
   15e10:	103f4726 	beq	r2,zero,15b30 <__alt_data_end+0xfc015b30>
   15e14:	48008c26 	beq	r9,zero,16048 <___svfiprintf_internal_r+0x978>
   15e18:	dc802015 	stw	r18,128(sp)
   15e1c:	dc002115 	stw	r16,132(sp)
   15e20:	dc401a04 	addi	r17,sp,104
   15e24:	e021883a 	mov	r16,fp
   15e28:	da002215 	stw	r8,136(sp)
   15e2c:	5039883a 	mov	fp,r10
   15e30:	4825883a 	mov	r18,r9
   15e34:	8009883a 	mov	r4,r16
   15e38:	900b883a 	mov	r5,r18
   15e3c:	01800284 	movi	r6,10
   15e40:	000f883a 	mov	r7,zero
   15e44:	00170e00 	call	170e0 <__umoddi3>
   15e48:	10800c04 	addi	r2,r2,48
   15e4c:	8c7fffc4 	addi	r17,r17,-1
   15e50:	8009883a 	mov	r4,r16
   15e54:	900b883a 	mov	r5,r18
   15e58:	88800005 	stb	r2,0(r17)
   15e5c:	01800284 	movi	r6,10
   15e60:	000f883a 	mov	r7,zero
   15e64:	0016b680 	call	16b68 <__udivdi3>
   15e68:	1021883a 	mov	r16,r2
   15e6c:	10c4b03a 	or	r2,r2,r3
   15e70:	1825883a 	mov	r18,r3
   15e74:	103fef1e 	bne	r2,zero,15e34 <__alt_data_end+0xfc015e34>
   15e78:	dc802017 	ldw	r18,128(sp)
   15e7c:	dc002117 	ldw	r16,132(sp)
   15e80:	da002217 	ldw	r8,136(sp)
   15e84:	e015883a 	mov	r10,fp
   15e88:	d8c01e17 	ldw	r3,120(sp)
   15e8c:	1c47c83a 	sub	r3,r3,r17
   15e90:	d8c02115 	stw	r3,132(sp)
   15e94:	003f2a06 	br	15b40 <__alt_data_end+0xfc015b40>
   15e98:	dac02317 	ldw	r11,140(sp)
   15e9c:	d8001d85 	stb	zero,118(sp)
   15ea0:	5c400017 	ldw	r17,0(r11)
   15ea4:	5f000104 	addi	fp,r11,4
   15ea8:	88022f26 	beq	r17,zero,16768 <___svfiprintf_internal_r+0x1098>
   15eac:	80022516 	blt	r16,zero,16744 <___svfiprintf_internal_r+0x1074>
   15eb0:	800d883a 	mov	r6,r16
   15eb4:	000b883a 	mov	r5,zero
   15eb8:	8809883a 	mov	r4,r17
   15ebc:	da002c15 	stw	r8,176(sp)
   15ec0:	00058540 	call	5854 <memchr>
   15ec4:	da002c17 	ldw	r8,176(sp)
   15ec8:	10026426 	beq	r2,zero,1685c <___svfiprintf_internal_r+0x118c>
   15ecc:	1445c83a 	sub	r2,r2,r17
   15ed0:	d8802115 	stw	r2,132(sp)
   15ed4:	da801d83 	ldbu	r10,118(sp)
   15ed8:	df002315 	stw	fp,140(sp)
   15edc:	0021883a 	mov	r16,zero
   15ee0:	003f1706 	br	15b40 <__alt_data_end+0xfc015b40>
   15ee4:	94800814 	ori	r18,r18,32
   15ee8:	98c00007 	ldb	r3,0(r19)
   15eec:	003e4706 	br	1580c <__alt_data_end+0xfc01580c>
   15ef0:	21003fcc 	andi	r4,r4,255
   15ef4:	2002701e 	bne	r4,zero,168b8 <___svfiprintf_internal_r+0x11e8>
   15ef8:	94800414 	ori	r18,r18,16
   15efc:	9080080c 	andi	r2,r18,32
   15f00:	103fb71e 	bne	r2,zero,15de0 <__alt_data_end+0xfc015de0>
   15f04:	9080040c 	andi	r2,r18,16
   15f08:	1001ab26 	beq	r2,zero,165b8 <___svfiprintf_internal_r+0xee8>
   15f0c:	dac02317 	ldw	r11,140(sp)
   15f10:	5f000017 	ldw	fp,0(r11)
   15f14:	5ac00104 	addi	r11,r11,4
   15f18:	dac02315 	stw	r11,140(sp)
   15f1c:	e013d7fa 	srai	r9,fp,31
   15f20:	4805883a 	mov	r2,r9
   15f24:	103fb50e 	bge	r2,zero,15dfc <__alt_data_end+0xfc015dfc>
   15f28:	0739c83a 	sub	fp,zero,fp
   15f2c:	02800b44 	movi	r10,45
   15f30:	e004c03a 	cmpne	r2,fp,zero
   15f34:	0253c83a 	sub	r9,zero,r9
   15f38:	da801d85 	stb	r10,118(sp)
   15f3c:	4893c83a 	sub	r9,r9,r2
   15f40:	80023016 	blt	r16,zero,16804 <___svfiprintf_internal_r+0x1134>
   15f44:	00bfdfc4 	movi	r2,-129
   15f48:	90a4703a 	and	r18,r18,r2
   15f4c:	483fb21e 	bne	r9,zero,15e18 <__alt_data_end+0xfc015e18>
   15f50:	00003d06 	br	16048 <___svfiprintf_internal_r+0x978>
   15f54:	9817883a 	mov	r11,r19
   15f58:	d8002415 	stw	zero,144(sp)
   15f5c:	18bff404 	addi	r2,r3,-48
   15f60:	0019883a 	mov	r12,zero
   15f64:	58c00007 	ldb	r3,0(r11)
   15f68:	630002a4 	muli	r12,r12,10
   15f6c:	9cc00044 	addi	r19,r19,1
   15f70:	9817883a 	mov	r11,r19
   15f74:	1319883a 	add	r12,r2,r12
   15f78:	18bff404 	addi	r2,r3,-48
   15f7c:	30bff92e 	bgeu	r6,r2,15f64 <__alt_data_end+0xfc015f64>
   15f80:	db002415 	stw	r12,144(sp)
   15f84:	18bff804 	addi	r2,r3,-32
   15f88:	28be232e 	bgeu	r5,r2,15818 <__alt_data_end+0xfc015818>
   15f8c:	21003fcc 	andi	r4,r4,255
   15f90:	20024b1e 	bne	r4,zero,168c0 <___svfiprintf_internal_r+0x11f0>
   15f94:	1800d626 	beq	r3,zero,162f0 <___svfiprintf_internal_r+0xc20>
   15f98:	02c00044 	movi	r11,1
   15f9c:	dac02015 	stw	r11,128(sp)
   15fa0:	d8c01005 	stb	r3,64(sp)
   15fa4:	d8001d85 	stb	zero,118(sp)
   15fa8:	dac02115 	stw	r11,132(sp)
   15fac:	dc401004 	addi	r17,sp,64
   15fb0:	003f2606 	br	15c4c <__alt_data_end+0xfc015c4c>
   15fb4:	94802014 	ori	r18,r18,128
   15fb8:	98c00007 	ldb	r3,0(r19)
   15fbc:	003e1306 	br	1580c <__alt_data_end+0xfc01580c>
   15fc0:	98c00007 	ldb	r3,0(r19)
   15fc4:	9ac00044 	addi	r11,r19,1
   15fc8:	1a822b26 	beq	r3,r10,16878 <___svfiprintf_internal_r+0x11a8>
   15fcc:	18bff404 	addi	r2,r3,-48
   15fd0:	0021883a 	mov	r16,zero
   15fd4:	30821e36 	bltu	r6,r2,16850 <___svfiprintf_internal_r+0x1180>
   15fd8:	58c00007 	ldb	r3,0(r11)
   15fdc:	840002a4 	muli	r16,r16,10
   15fe0:	5cc00044 	addi	r19,r11,1
   15fe4:	9817883a 	mov	r11,r19
   15fe8:	80a1883a 	add	r16,r16,r2
   15fec:	18bff404 	addi	r2,r3,-48
   15ff0:	30bff92e 	bgeu	r6,r2,15fd8 <__alt_data_end+0xfc015fd8>
   15ff4:	803e060e 	bge	r16,zero,15810 <__alt_data_end+0xfc015810>
   15ff8:	043fffc4 	movi	r16,-1
   15ffc:	003e0406 	br	15810 <__alt_data_end+0xfc015810>
   16000:	21003fcc 	andi	r4,r4,255
   16004:	2002371e 	bne	r4,zero,168e4 <___svfiprintf_internal_r+0x1214>
   16008:	94800414 	ori	r18,r18,16
   1600c:	9080080c 	andi	r2,r18,32
   16010:	103ebb1e 	bne	r2,zero,15b00 <__alt_data_end+0xfc015b00>
   16014:	9080040c 	andi	r2,r18,16
   16018:	10013b26 	beq	r2,zero,16508 <___svfiprintf_internal_r+0xe38>
   1601c:	dac02317 	ldw	r11,140(sp)
   16020:	d8001d85 	stb	zero,118(sp)
   16024:	0013883a 	mov	r9,zero
   16028:	58800104 	addi	r2,r11,4
   1602c:	5f000017 	ldw	fp,0(r11)
   16030:	80013d16 	blt	r16,zero,16528 <___svfiprintf_internal_r+0xe58>
   16034:	00ffdfc4 	movi	r3,-129
   16038:	d8802315 	stw	r2,140(sp)
   1603c:	90e4703a 	and	r18,r18,r3
   16040:	0015883a 	mov	r10,zero
   16044:	e03eba26 	beq	fp,zero,15b30 <__alt_data_end+0xfc015b30>
   16048:	00800244 	movi	r2,9
   1604c:	173f7236 	bltu	r2,fp,15e18 <__alt_data_end+0xfc015e18>
   16050:	dac02b17 	ldw	r11,172(sp)
   16054:	e7000c04 	addi	fp,fp,48
   16058:	df0019c5 	stb	fp,103(sp)
   1605c:	dac02115 	stw	r11,132(sp)
   16060:	dc4019c4 	addi	r17,sp,103
   16064:	003eb606 	br	15b40 <__alt_data_end+0xfc015b40>
   16068:	21003fcc 	andi	r4,r4,255
   1606c:	20021f1e 	bne	r4,zero,168ec <___svfiprintf_internal_r+0x121c>
   16070:	94800414 	ori	r18,r18,16
   16074:	9080080c 	andi	r2,r18,32
   16078:	103ec51e 	bne	r2,zero,15b90 <__alt_data_end+0xfc015b90>
   1607c:	9080040c 	andi	r2,r18,16
   16080:	10016926 	beq	r2,zero,16628 <___svfiprintf_internal_r+0xf58>
   16084:	dac02317 	ldw	r11,140(sp)
   16088:	d8001d85 	stb	zero,118(sp)
   1608c:	0013883a 	mov	r9,zero
   16090:	58800104 	addi	r2,r11,4
   16094:	5f000017 	ldw	fp,0(r11)
   16098:	80016b16 	blt	r16,zero,16648 <___svfiprintf_internal_r+0xf78>
   1609c:	00ffdfc4 	movi	r3,-129
   160a0:	d8802315 	stw	r2,140(sp)
   160a4:	90e4703a 	and	r18,r18,r3
   160a8:	e03ec41e 	bne	fp,zero,15bbc <__alt_data_end+0xfc015bbc>
   160ac:	0015883a 	mov	r10,zero
   160b0:	8001c226 	beq	r16,zero,167bc <___svfiprintf_internal_r+0x10ec>
   160b4:	0039883a 	mov	fp,zero
   160b8:	0013883a 	mov	r9,zero
   160bc:	003ec006 	br	15bc0 <__alt_data_end+0xfc015bc0>
   160c0:	d8c01c17 	ldw	r3,112(sp)
   160c4:	d8801b17 	ldw	r2,108(sp)
   160c8:	d9001d87 	ldb	r4,118(sp)
   160cc:	20000b26 	beq	r4,zero,160fc <___svfiprintf_internal_r+0xa2c>
   160d0:	d9001d84 	addi	r4,sp,118
   160d4:	18c00044 	addi	r3,r3,1
   160d8:	10800044 	addi	r2,r2,1
   160dc:	41000015 	stw	r4,0(r8)
   160e0:	01000044 	movi	r4,1
   160e4:	41000115 	stw	r4,4(r8)
   160e8:	d8c01c15 	stw	r3,112(sp)
   160ec:	d8801b15 	stw	r2,108(sp)
   160f0:	010001c4 	movi	r4,7
   160f4:	2080e116 	blt	r4,r2,1647c <___svfiprintf_internal_r+0xdac>
   160f8:	42000204 	addi	r8,r8,8
   160fc:	dac02217 	ldw	r11,136(sp)
   16100:	58000b26 	beq	r11,zero,16130 <___svfiprintf_internal_r+0xa60>
   16104:	d9001d04 	addi	r4,sp,116
   16108:	18c00084 	addi	r3,r3,2
   1610c:	10800044 	addi	r2,r2,1
   16110:	41000015 	stw	r4,0(r8)
   16114:	01000084 	movi	r4,2
   16118:	41000115 	stw	r4,4(r8)
   1611c:	d8c01c15 	stw	r3,112(sp)
   16120:	d8801b15 	stw	r2,108(sp)
   16124:	010001c4 	movi	r4,7
   16128:	2080dd16 	blt	r4,r2,164a0 <___svfiprintf_internal_r+0xdd0>
   1612c:	42000204 	addi	r8,r8,8
   16130:	dac02617 	ldw	r11,152(sp)
   16134:	01002004 	movi	r4,128
   16138:	59008426 	beq	r11,r4,1634c <___svfiprintf_internal_r+0xc7c>
   1613c:	dac02117 	ldw	r11,132(sp)
   16140:	82e1c83a 	sub	r16,r16,r11
   16144:	0400270e 	bge	zero,r16,161e4 <___svfiprintf_internal_r+0xb14>
   16148:	01c00404 	movi	r7,16
   1614c:	3c016a0e 	bge	r7,r16,166f8 <___svfiprintf_internal_r+0x1028>
   16150:	014000b4 	movhi	r5,2
   16154:	2956ad04 	addi	r5,r5,23220
   16158:	d9402215 	stw	r5,136(sp)
   1615c:	070001c4 	movi	fp,7
   16160:	00000306 	br	16170 <___svfiprintf_internal_r+0xaa0>
   16164:	843ffc04 	addi	r16,r16,-16
   16168:	42000204 	addi	r8,r8,8
   1616c:	3c00130e 	bge	r7,r16,161bc <___svfiprintf_internal_r+0xaec>
   16170:	18c00404 	addi	r3,r3,16
   16174:	10800044 	addi	r2,r2,1
   16178:	45000015 	stw	r20,0(r8)
   1617c:	41c00115 	stw	r7,4(r8)
   16180:	d8c01c15 	stw	r3,112(sp)
   16184:	d8801b15 	stw	r2,108(sp)
   16188:	e0bff60e 	bge	fp,r2,16164 <__alt_data_end+0xfc016164>
   1618c:	d9801a04 	addi	r6,sp,104
   16190:	b80b883a 	mov	r5,r23
   16194:	a809883a 	mov	r4,r21
   16198:	d9c02c15 	stw	r7,176(sp)
   1619c:	00155000 	call	15500 <__ssprint_r>
   161a0:	d9c02c17 	ldw	r7,176(sp)
   161a4:	1000581e 	bne	r2,zero,16308 <___svfiprintf_internal_r+0xc38>
   161a8:	843ffc04 	addi	r16,r16,-16
   161ac:	d8c01c17 	ldw	r3,112(sp)
   161b0:	d8801b17 	ldw	r2,108(sp)
   161b4:	d811883a 	mov	r8,sp
   161b8:	3c3fed16 	blt	r7,r16,16170 <__alt_data_end+0xfc016170>
   161bc:	dac02217 	ldw	r11,136(sp)
   161c0:	1c07883a 	add	r3,r3,r16
   161c4:	10800044 	addi	r2,r2,1
   161c8:	42c00015 	stw	r11,0(r8)
   161cc:	44000115 	stw	r16,4(r8)
   161d0:	d8c01c15 	stw	r3,112(sp)
   161d4:	d8801b15 	stw	r2,108(sp)
   161d8:	010001c4 	movi	r4,7
   161dc:	20809e16 	blt	r4,r2,16458 <___svfiprintf_internal_r+0xd88>
   161e0:	42000204 	addi	r8,r8,8
   161e4:	dac02117 	ldw	r11,132(sp)
   161e8:	10800044 	addi	r2,r2,1
   161ec:	44400015 	stw	r17,0(r8)
   161f0:	58c7883a 	add	r3,r11,r3
   161f4:	42c00115 	stw	r11,4(r8)
   161f8:	d8c01c15 	stw	r3,112(sp)
   161fc:	d8801b15 	stw	r2,108(sp)
   16200:	010001c4 	movi	r4,7
   16204:	20807f16 	blt	r4,r2,16404 <___svfiprintf_internal_r+0xd34>
   16208:	42000204 	addi	r8,r8,8
   1620c:	9480010c 	andi	r18,r18,4
   16210:	90002926 	beq	r18,zero,162b8 <___svfiprintf_internal_r+0xbe8>
   16214:	dac02417 	ldw	r11,144(sp)
   16218:	d8802017 	ldw	r2,128(sp)
   1621c:	58a1c83a 	sub	r16,r11,r2
   16220:	0400250e 	bge	zero,r16,162b8 <___svfiprintf_internal_r+0xbe8>
   16224:	04400404 	movi	r17,16
   16228:	d8801b17 	ldw	r2,108(sp)
   1622c:	8c017c0e 	bge	r17,r16,16820 <___svfiprintf_internal_r+0x1150>
   16230:	014000b4 	movhi	r5,2
   16234:	2956b104 	addi	r5,r5,23236
   16238:	d9402815 	stw	r5,160(sp)
   1623c:	048001c4 	movi	r18,7
   16240:	00000306 	br	16250 <___svfiprintf_internal_r+0xb80>
   16244:	843ffc04 	addi	r16,r16,-16
   16248:	42000204 	addi	r8,r8,8
   1624c:	8c00110e 	bge	r17,r16,16294 <___svfiprintf_internal_r+0xbc4>
   16250:	18c00404 	addi	r3,r3,16
   16254:	10800044 	addi	r2,r2,1
   16258:	45800015 	stw	r22,0(r8)
   1625c:	44400115 	stw	r17,4(r8)
   16260:	d8c01c15 	stw	r3,112(sp)
   16264:	d8801b15 	stw	r2,108(sp)
   16268:	90bff60e 	bge	r18,r2,16244 <__alt_data_end+0xfc016244>
   1626c:	d9801a04 	addi	r6,sp,104
   16270:	b80b883a 	mov	r5,r23
   16274:	a809883a 	mov	r4,r21
   16278:	00155000 	call	15500 <__ssprint_r>
   1627c:	1000221e 	bne	r2,zero,16308 <___svfiprintf_internal_r+0xc38>
   16280:	843ffc04 	addi	r16,r16,-16
   16284:	d8c01c17 	ldw	r3,112(sp)
   16288:	d8801b17 	ldw	r2,108(sp)
   1628c:	d811883a 	mov	r8,sp
   16290:	8c3fef16 	blt	r17,r16,16250 <__alt_data_end+0xfc016250>
   16294:	dac02817 	ldw	r11,160(sp)
   16298:	1c07883a 	add	r3,r3,r16
   1629c:	10800044 	addi	r2,r2,1
   162a0:	42c00015 	stw	r11,0(r8)
   162a4:	44000115 	stw	r16,4(r8)
   162a8:	d8c01c15 	stw	r3,112(sp)
   162ac:	d8801b15 	stw	r2,108(sp)
   162b0:	010001c4 	movi	r4,7
   162b4:	2080aa16 	blt	r4,r2,16560 <___svfiprintf_internal_r+0xe90>
   162b8:	d8802417 	ldw	r2,144(sp)
   162bc:	dac02017 	ldw	r11,128(sp)
   162c0:	12c0010e 	bge	r2,r11,162c8 <___svfiprintf_internal_r+0xbf8>
   162c4:	5805883a 	mov	r2,r11
   162c8:	dac02517 	ldw	r11,148(sp)
   162cc:	5897883a 	add	r11,r11,r2
   162d0:	dac02515 	stw	r11,148(sp)
   162d4:	1800531e 	bne	r3,zero,16424 <___svfiprintf_internal_r+0xd54>
   162d8:	98800007 	ldb	r2,0(r19)
   162dc:	d8001b15 	stw	zero,108(sp)
   162e0:	d811883a 	mov	r8,sp
   162e4:	103d231e 	bne	r2,zero,15774 <__alt_data_end+0xfc015774>
   162e8:	9823883a 	mov	r17,r19
   162ec:	003d3906 	br	157d4 <__alt_data_end+0xfc0157d4>
   162f0:	d8801c17 	ldw	r2,112(sp)
   162f4:	10000426 	beq	r2,zero,16308 <___svfiprintf_internal_r+0xc38>
   162f8:	d9402717 	ldw	r5,156(sp)
   162fc:	d9002a17 	ldw	r4,168(sp)
   16300:	d9801a04 	addi	r6,sp,104
   16304:	00155000 	call	15500 <__ssprint_r>
   16308:	dac02717 	ldw	r11,156(sp)
   1630c:	d8802517 	ldw	r2,148(sp)
   16310:	58c0030b 	ldhu	r3,12(r11)
   16314:	18c0100c 	andi	r3,r3,64
   16318:	1801381e 	bne	r3,zero,167fc <___svfiprintf_internal_r+0x112c>
   1631c:	dfc03717 	ldw	ra,220(sp)
   16320:	df003617 	ldw	fp,216(sp)
   16324:	ddc03517 	ldw	r23,212(sp)
   16328:	dd803417 	ldw	r22,208(sp)
   1632c:	dd403317 	ldw	r21,204(sp)
   16330:	dd003217 	ldw	r20,200(sp)
   16334:	dcc03117 	ldw	r19,196(sp)
   16338:	dc803017 	ldw	r18,192(sp)
   1633c:	dc402f17 	ldw	r17,188(sp)
   16340:	dc002e17 	ldw	r16,184(sp)
   16344:	dec03804 	addi	sp,sp,224
   16348:	f800283a 	ret
   1634c:	dac02417 	ldw	r11,144(sp)
   16350:	d9002017 	ldw	r4,128(sp)
   16354:	5939c83a 	sub	fp,r11,r4
   16358:	073f780e 	bge	zero,fp,1613c <__alt_data_end+0xfc01613c>
   1635c:	02400404 	movi	r9,16
   16360:	4f01370e 	bge	r9,fp,16840 <___svfiprintf_internal_r+0x1170>
   16364:	02c000b4 	movhi	r11,2
   16368:	5ad6ad04 	addi	r11,r11,23220
   1636c:	dac02215 	stw	r11,136(sp)
   16370:	028001c4 	movi	r10,7
   16374:	00000306 	br	16384 <___svfiprintf_internal_r+0xcb4>
   16378:	e73ffc04 	addi	fp,fp,-16
   1637c:	42000204 	addi	r8,r8,8
   16380:	4f00150e 	bge	r9,fp,163d8 <___svfiprintf_internal_r+0xd08>
   16384:	18c00404 	addi	r3,r3,16
   16388:	10800044 	addi	r2,r2,1
   1638c:	45000015 	stw	r20,0(r8)
   16390:	42400115 	stw	r9,4(r8)
   16394:	d8c01c15 	stw	r3,112(sp)
   16398:	d8801b15 	stw	r2,108(sp)
   1639c:	50bff60e 	bge	r10,r2,16378 <__alt_data_end+0xfc016378>
   163a0:	d9801a04 	addi	r6,sp,104
   163a4:	b80b883a 	mov	r5,r23
   163a8:	a809883a 	mov	r4,r21
   163ac:	da402c15 	stw	r9,176(sp)
   163b0:	da802d15 	stw	r10,180(sp)
   163b4:	00155000 	call	15500 <__ssprint_r>
   163b8:	da402c17 	ldw	r9,176(sp)
   163bc:	da802d17 	ldw	r10,180(sp)
   163c0:	103fd11e 	bne	r2,zero,16308 <__alt_data_end+0xfc016308>
   163c4:	e73ffc04 	addi	fp,fp,-16
   163c8:	d8c01c17 	ldw	r3,112(sp)
   163cc:	d8801b17 	ldw	r2,108(sp)
   163d0:	d811883a 	mov	r8,sp
   163d4:	4f3feb16 	blt	r9,fp,16384 <__alt_data_end+0xfc016384>
   163d8:	dac02217 	ldw	r11,136(sp)
   163dc:	1f07883a 	add	r3,r3,fp
   163e0:	10800044 	addi	r2,r2,1
   163e4:	42c00015 	stw	r11,0(r8)
   163e8:	47000115 	stw	fp,4(r8)
   163ec:	d8c01c15 	stw	r3,112(sp)
   163f0:	d8801b15 	stw	r2,108(sp)
   163f4:	010001c4 	movi	r4,7
   163f8:	2080b616 	blt	r4,r2,166d4 <___svfiprintf_internal_r+0x1004>
   163fc:	42000204 	addi	r8,r8,8
   16400:	003f4e06 	br	1613c <__alt_data_end+0xfc01613c>
   16404:	d9801a04 	addi	r6,sp,104
   16408:	b80b883a 	mov	r5,r23
   1640c:	a809883a 	mov	r4,r21
   16410:	00155000 	call	15500 <__ssprint_r>
   16414:	103fbc1e 	bne	r2,zero,16308 <__alt_data_end+0xfc016308>
   16418:	d8c01c17 	ldw	r3,112(sp)
   1641c:	d811883a 	mov	r8,sp
   16420:	003f7a06 	br	1620c <__alt_data_end+0xfc01620c>
   16424:	d9801a04 	addi	r6,sp,104
   16428:	b80b883a 	mov	r5,r23
   1642c:	a809883a 	mov	r4,r21
   16430:	00155000 	call	15500 <__ssprint_r>
   16434:	103fa826 	beq	r2,zero,162d8 <__alt_data_end+0xfc0162d8>
   16438:	003fb306 	br	16308 <__alt_data_end+0xfc016308>
   1643c:	d9801a04 	addi	r6,sp,104
   16440:	b80b883a 	mov	r5,r23
   16444:	a809883a 	mov	r4,r21
   16448:	00155000 	call	15500 <__ssprint_r>
   1644c:	103fae1e 	bne	r2,zero,16308 <__alt_data_end+0xfc016308>
   16450:	d811883a 	mov	r8,sp
   16454:	003cdc06 	br	157c8 <__alt_data_end+0xfc0157c8>
   16458:	d9801a04 	addi	r6,sp,104
   1645c:	b80b883a 	mov	r5,r23
   16460:	a809883a 	mov	r4,r21
   16464:	00155000 	call	15500 <__ssprint_r>
   16468:	103fa71e 	bne	r2,zero,16308 <__alt_data_end+0xfc016308>
   1646c:	d8c01c17 	ldw	r3,112(sp)
   16470:	d8801b17 	ldw	r2,108(sp)
   16474:	d811883a 	mov	r8,sp
   16478:	003f5a06 	br	161e4 <__alt_data_end+0xfc0161e4>
   1647c:	d9801a04 	addi	r6,sp,104
   16480:	b80b883a 	mov	r5,r23
   16484:	a809883a 	mov	r4,r21
   16488:	00155000 	call	15500 <__ssprint_r>
   1648c:	103f9e1e 	bne	r2,zero,16308 <__alt_data_end+0xfc016308>
   16490:	d8c01c17 	ldw	r3,112(sp)
   16494:	d8801b17 	ldw	r2,108(sp)
   16498:	d811883a 	mov	r8,sp
   1649c:	003f1706 	br	160fc <__alt_data_end+0xfc0160fc>
   164a0:	d9801a04 	addi	r6,sp,104
   164a4:	b80b883a 	mov	r5,r23
   164a8:	a809883a 	mov	r4,r21
   164ac:	00155000 	call	15500 <__ssprint_r>
   164b0:	103f951e 	bne	r2,zero,16308 <__alt_data_end+0xfc016308>
   164b4:	d8c01c17 	ldw	r3,112(sp)
   164b8:	d8801b17 	ldw	r2,108(sp)
   164bc:	d811883a 	mov	r8,sp
   164c0:	003f1b06 	br	16130 <__alt_data_end+0xfc016130>
   164c4:	d8001d85 	stb	zero,118(sp)
   164c8:	80007b16 	blt	r16,zero,166b8 <___svfiprintf_internal_r+0xfe8>
   164cc:	00ffdfc4 	movi	r3,-129
   164d0:	e244b03a 	or	r2,fp,r9
   164d4:	90e4703a 	and	r18,r18,r3
   164d8:	103d7026 	beq	r2,zero,15a9c <__alt_data_end+0xfc015a9c>
   164dc:	0015883a 	mov	r10,zero
   164e0:	003d7206 	br	15aac <__alt_data_end+0xfc015aac>
   164e4:	d9801a04 	addi	r6,sp,104
   164e8:	b80b883a 	mov	r5,r23
   164ec:	a809883a 	mov	r4,r21
   164f0:	00155000 	call	15500 <__ssprint_r>
   164f4:	103f841e 	bne	r2,zero,16308 <__alt_data_end+0xfc016308>
   164f8:	d8c01c17 	ldw	r3,112(sp)
   164fc:	d8801b17 	ldw	r2,108(sp)
   16500:	d811883a 	mov	r8,sp
   16504:	003ef006 	br	160c8 <__alt_data_end+0xfc0160c8>
   16508:	9080100c 	andi	r2,r18,64
   1650c:	d8001d85 	stb	zero,118(sp)
   16510:	dac02317 	ldw	r11,140(sp)
   16514:	10008126 	beq	r2,zero,1671c <___svfiprintf_internal_r+0x104c>
   16518:	58800104 	addi	r2,r11,4
   1651c:	5f00000b 	ldhu	fp,0(r11)
   16520:	0013883a 	mov	r9,zero
   16524:	803ec30e 	bge	r16,zero,16034 <__alt_data_end+0xfc016034>
   16528:	d8802315 	stw	r2,140(sp)
   1652c:	0015883a 	mov	r10,zero
   16530:	e244b03a 	or	r2,fp,r9
   16534:	103e371e 	bne	r2,zero,15e14 <__alt_data_end+0xfc015e14>
   16538:	00800044 	movi	r2,1
   1653c:	10803fcc 	andi	r2,r2,255
   16540:	00c00044 	movi	r3,1
   16544:	10c06126 	beq	r2,r3,166cc <___svfiprintf_internal_r+0xffc>
   16548:	00c00084 	movi	r3,2
   1654c:	10fd5526 	beq	r2,r3,15aa4 <__alt_data_end+0xfc015aa4>
   16550:	003ed806 	br	160b4 <__alt_data_end+0xfc0160b4>
   16554:	d8802315 	stw	r2,140(sp)
   16558:	98c00007 	ldb	r3,0(r19)
   1655c:	003cab06 	br	1580c <__alt_data_end+0xfc01580c>
   16560:	d9801a04 	addi	r6,sp,104
   16564:	b80b883a 	mov	r5,r23
   16568:	a809883a 	mov	r4,r21
   1656c:	00155000 	call	15500 <__ssprint_r>
   16570:	103f651e 	bne	r2,zero,16308 <__alt_data_end+0xfc016308>
   16574:	d8c01c17 	ldw	r3,112(sp)
   16578:	003f4f06 	br	162b8 <__alt_data_end+0xfc0162b8>
   1657c:	008000b4 	movhi	r2,2
   16580:	10953a04 	addi	r2,r2,21736
   16584:	d8802915 	stw	r2,164(sp)
   16588:	003d4406 	br	15a9c <__alt_data_end+0xfc015a9c>
   1658c:	dac02317 	ldw	r11,140(sp)
   16590:	58800017 	ldw	r2,0(r11)
   16594:	dac02517 	ldw	r11,148(sp)
   16598:	5807d7fa 	srai	r3,r11,31
   1659c:	dac02317 	ldw	r11,140(sp)
   165a0:	10c00115 	stw	r3,4(r2)
   165a4:	5ac00104 	addi	r11,r11,4
   165a8:	dac02315 	stw	r11,140(sp)
   165ac:	dac02517 	ldw	r11,148(sp)
   165b0:	12c00015 	stw	r11,0(r2)
   165b4:	003c6d06 	br	1576c <__alt_data_end+0xfc01576c>
   165b8:	9080100c 	andi	r2,r18,64
   165bc:	dac02317 	ldw	r11,140(sp)
   165c0:	103e5326 	beq	r2,zero,15f10 <__alt_data_end+0xfc015f10>
   165c4:	5f00000f 	ldh	fp,0(r11)
   165c8:	5ac00104 	addi	r11,r11,4
   165cc:	dac02315 	stw	r11,140(sp)
   165d0:	e013d7fa 	srai	r9,fp,31
   165d4:	4805883a 	mov	r2,r9
   165d8:	003e0706 	br	15df8 <__alt_data_end+0xfc015df8>
   165dc:	00800c04 	movi	r2,48
   165e0:	d8801d05 	stb	r2,116(sp)
   165e4:	d8c01d45 	stb	r3,117(sp)
   165e8:	d8001d85 	stb	zero,118(sp)
   165ec:	90800094 	ori	r2,r18,2
   165f0:	80008f16 	blt	r16,zero,16830 <___svfiprintf_internal_r+0x1160>
   165f4:	00bfdfc4 	movi	r2,-129
   165f8:	90a4703a 	and	r18,r18,r2
   165fc:	94800094 	ori	r18,r18,2
   16600:	0015883a 	mov	r10,zero
   16604:	003d2906 	br	15aac <__alt_data_end+0xfc015aac>
   16608:	98c00007 	ldb	r3,0(r19)
   1660c:	003c7f06 	br	1580c <__alt_data_end+0xfc01580c>
   16610:	dac02317 	ldw	r11,140(sp)
   16614:	0013883a 	mov	r9,zero
   16618:	5f000017 	ldw	fp,0(r11)
   1661c:	5ac00104 	addi	r11,r11,4
   16620:	dac02315 	stw	r11,140(sp)
   16624:	003d1506 	br	15a7c <__alt_data_end+0xfc015a7c>
   16628:	9080100c 	andi	r2,r18,64
   1662c:	d8001d85 	stb	zero,118(sp)
   16630:	dac02317 	ldw	r11,140(sp)
   16634:	10003426 	beq	r2,zero,16708 <___svfiprintf_internal_r+0x1038>
   16638:	58800104 	addi	r2,r11,4
   1663c:	5f00000b 	ldhu	fp,0(r11)
   16640:	0013883a 	mov	r9,zero
   16644:	803e950e 	bge	r16,zero,1609c <__alt_data_end+0xfc01609c>
   16648:	e246b03a 	or	r3,fp,r9
   1664c:	d8802315 	stw	r2,140(sp)
   16650:	183d5a1e 	bne	r3,zero,15bbc <__alt_data_end+0xfc015bbc>
   16654:	0015883a 	mov	r10,zero
   16658:	0005883a 	mov	r2,zero
   1665c:	003fb706 	br	1653c <__alt_data_end+0xfc01653c>
   16660:	98c00043 	ldbu	r3,1(r19)
   16664:	94800814 	ori	r18,r18,32
   16668:	9cc00044 	addi	r19,r19,1
   1666c:	18c03fcc 	andi	r3,r3,255
   16670:	18c0201c 	xori	r3,r3,128
   16674:	18ffe004 	addi	r3,r3,-128
   16678:	003c6406 	br	1580c <__alt_data_end+0xfc01580c>
   1667c:	d8c02315 	stw	r3,140(sp)
   16680:	0015883a 	mov	r10,zero
   16684:	003faa06 	br	16530 <__alt_data_end+0xfc016530>
   16688:	dac02317 	ldw	r11,140(sp)
   1668c:	58800017 	ldw	r2,0(r11)
   16690:	5ac00104 	addi	r11,r11,4
   16694:	dac02315 	stw	r11,140(sp)
   16698:	dac02517 	ldw	r11,148(sp)
   1669c:	12c00015 	stw	r11,0(r2)
   166a0:	003c3206 	br	1576c <__alt_data_end+0xfc01576c>
   166a4:	010000b4 	movhi	r4,2
   166a8:	21153a04 	addi	r4,r4,21736
   166ac:	d9002915 	stw	r4,164(sp)
   166b0:	d8c02315 	stw	r3,140(sp)
   166b4:	1025883a 	mov	r18,r2
   166b8:	e244b03a 	or	r2,fp,r9
   166bc:	103f871e 	bne	r2,zero,164dc <__alt_data_end+0xfc0164dc>
   166c0:	0015883a 	mov	r10,zero
   166c4:	00800084 	movi	r2,2
   166c8:	003f9c06 	br	1653c <__alt_data_end+0xfc01653c>
   166cc:	0039883a 	mov	fp,zero
   166d0:	003e5f06 	br	16050 <__alt_data_end+0xfc016050>
   166d4:	d9801a04 	addi	r6,sp,104
   166d8:	b80b883a 	mov	r5,r23
   166dc:	a809883a 	mov	r4,r21
   166e0:	00155000 	call	15500 <__ssprint_r>
   166e4:	103f081e 	bne	r2,zero,16308 <__alt_data_end+0xfc016308>
   166e8:	d8c01c17 	ldw	r3,112(sp)
   166ec:	d8801b17 	ldw	r2,108(sp)
   166f0:	d811883a 	mov	r8,sp
   166f4:	003e9106 	br	1613c <__alt_data_end+0xfc01613c>
   166f8:	010000b4 	movhi	r4,2
   166fc:	2116ad04 	addi	r4,r4,23220
   16700:	d9002215 	stw	r4,136(sp)
   16704:	003ead06 	br	161bc <__alt_data_end+0xfc0161bc>
   16708:	58800104 	addi	r2,r11,4
   1670c:	5f000017 	ldw	fp,0(r11)
   16710:	0013883a 	mov	r9,zero
   16714:	803e610e 	bge	r16,zero,1609c <__alt_data_end+0xfc01609c>
   16718:	003fcb06 	br	16648 <__alt_data_end+0xfc016648>
   1671c:	58800104 	addi	r2,r11,4
   16720:	5f000017 	ldw	fp,0(r11)
   16724:	0013883a 	mov	r9,zero
   16728:	803e420e 	bge	r16,zero,16034 <__alt_data_end+0xfc016034>
   1672c:	003f7e06 	br	16528 <__alt_data_end+0xfc016528>
   16730:	5f000017 	ldw	fp,0(r11)
   16734:	5ac00104 	addi	r11,r11,4
   16738:	0013883a 	mov	r9,zero
   1673c:	dac02315 	stw	r11,140(sp)
   16740:	003cce06 	br	15a7c <__alt_data_end+0xfc015a7c>
   16744:	8809883a 	mov	r4,r17
   16748:	da002c15 	stw	r8,176(sp)
   1674c:	00066700 	call	6670 <strlen>
   16750:	d8802115 	stw	r2,132(sp)
   16754:	da801d83 	ldbu	r10,118(sp)
   16758:	df002315 	stw	fp,140(sp)
   1675c:	0021883a 	mov	r16,zero
   16760:	da002c17 	ldw	r8,176(sp)
   16764:	003cf606 	br	15b40 <__alt_data_end+0xfc015b40>
   16768:	00800184 	movi	r2,6
   1676c:	1400012e 	bgeu	r2,r16,16774 <___svfiprintf_internal_r+0x10a4>
   16770:	1021883a 	mov	r16,r2
   16774:	dc002115 	stw	r16,132(sp)
   16778:	8005883a 	mov	r2,r16
   1677c:	80003c16 	blt	r16,zero,16870 <___svfiprintf_internal_r+0x11a0>
   16780:	044000b4 	movhi	r17,2
   16784:	d8802015 	stw	r2,128(sp)
   16788:	df002315 	stw	fp,140(sp)
   1678c:	8c553f04 	addi	r17,r17,21756
   16790:	003d2e06 	br	15c4c <__alt_data_end+0xfc015c4c>
   16794:	04001004 	movi	r16,64
   16798:	800b883a 	mov	r5,r16
   1679c:	00050480 	call	5048 <_malloc_r>
   167a0:	dac02717 	ldw	r11,156(sp)
   167a4:	58800015 	stw	r2,0(r11)
   167a8:	58800415 	stw	r2,16(r11)
   167ac:	10004826 	beq	r2,zero,168d0 <___svfiprintf_internal_r+0x1200>
   167b0:	dac02717 	ldw	r11,156(sp)
   167b4:	5c000515 	stw	r16,20(r11)
   167b8:	003bd906 	br	15720 <__alt_data_end+0xfc015720>
   167bc:	9080004c 	andi	r2,r18,1
   167c0:	0015883a 	mov	r10,zero
   167c4:	10000626 	beq	r2,zero,167e0 <___svfiprintf_internal_r+0x1110>
   167c8:	dac02b17 	ldw	r11,172(sp)
   167cc:	00800c04 	movi	r2,48
   167d0:	d88019c5 	stb	r2,103(sp)
   167d4:	dac02115 	stw	r11,132(sp)
   167d8:	dc4019c4 	addi	r17,sp,103
   167dc:	003cd806 	br	15b40 <__alt_data_end+0xfc015b40>
   167e0:	d8002115 	stw	zero,132(sp)
   167e4:	dc401a04 	addi	r17,sp,104
   167e8:	003cd506 	br	15b40 <__alt_data_end+0xfc015b40>
   167ec:	010000b4 	movhi	r4,2
   167f0:	2116b104 	addi	r4,r4,23236
   167f4:	d9002815 	stw	r4,160(sp)
   167f8:	003d4306 	br	15d08 <__alt_data_end+0xfc015d08>
   167fc:	00bfffc4 	movi	r2,-1
   16800:	003ec606 	br	1631c <__alt_data_end+0xfc01631c>
   16804:	00800044 	movi	r2,1
   16808:	10803fcc 	andi	r2,r2,255
   1680c:	00c00044 	movi	r3,1
   16810:	10fd8026 	beq	r2,r3,15e14 <__alt_data_end+0xfc015e14>
   16814:	00c00084 	movi	r3,2
   16818:	10fca426 	beq	r2,r3,15aac <__alt_data_end+0xfc015aac>
   1681c:	003ce806 	br	15bc0 <__alt_data_end+0xfc015bc0>
   16820:	010000b4 	movhi	r4,2
   16824:	2116b104 	addi	r4,r4,23236
   16828:	d9002815 	stw	r4,160(sp)
   1682c:	003e9906 	br	16294 <__alt_data_end+0xfc016294>
   16830:	1025883a 	mov	r18,r2
   16834:	0015883a 	mov	r10,zero
   16838:	00800084 	movi	r2,2
   1683c:	003ff206 	br	16808 <__alt_data_end+0xfc016808>
   16840:	014000b4 	movhi	r5,2
   16844:	2956ad04 	addi	r5,r5,23220
   16848:	d9402215 	stw	r5,136(sp)
   1684c:	003ee206 	br	163d8 <__alt_data_end+0xfc0163d8>
   16850:	5827883a 	mov	r19,r11
   16854:	0021883a 	mov	r16,zero
   16858:	003bed06 	br	15810 <__alt_data_end+0xfc015810>
   1685c:	dc002115 	stw	r16,132(sp)
   16860:	da801d83 	ldbu	r10,118(sp)
   16864:	df002315 	stw	fp,140(sp)
   16868:	0021883a 	mov	r16,zero
   1686c:	003cb406 	br	15b40 <__alt_data_end+0xfc015b40>
   16870:	0005883a 	mov	r2,zero
   16874:	003fc206 	br	16780 <__alt_data_end+0xfc016780>
   16878:	d8802317 	ldw	r2,140(sp)
   1687c:	98c00043 	ldbu	r3,1(r19)
   16880:	5827883a 	mov	r19,r11
   16884:	14000017 	ldw	r16,0(r2)
   16888:	10800104 	addi	r2,r2,4
   1688c:	d8802315 	stw	r2,140(sp)
   16890:	803f760e 	bge	r16,zero,1666c <__alt_data_end+0xfc01666c>
   16894:	18c03fcc 	andi	r3,r3,255
   16898:	18c0201c 	xori	r3,r3,128
   1689c:	043fffc4 	movi	r16,-1
   168a0:	18ffe004 	addi	r3,r3,-128
   168a4:	003bd906 	br	1580c <__alt_data_end+0xfc01580c>
   168a8:	d9c01d85 	stb	r7,118(sp)
   168ac:	003cb606 	br	15b88 <__alt_data_end+0xfc015b88>
   168b0:	d9c01d85 	stb	r7,118(sp)
   168b4:	003d2106 	br	15d3c <__alt_data_end+0xfc015d3c>
   168b8:	d9c01d85 	stb	r7,118(sp)
   168bc:	003d8e06 	br	15ef8 <__alt_data_end+0xfc015ef8>
   168c0:	d9c01d85 	stb	r7,118(sp)
   168c4:	003db306 	br	15f94 <__alt_data_end+0xfc015f94>
   168c8:	d9c01d85 	stb	r7,118(sp)
   168cc:	003c8a06 	br	15af8 <__alt_data_end+0xfc015af8>
   168d0:	dac02a17 	ldw	r11,168(sp)
   168d4:	00800304 	movi	r2,12
   168d8:	58800015 	stw	r2,0(r11)
   168dc:	00bfffc4 	movi	r2,-1
   168e0:	003e8e06 	br	1631c <__alt_data_end+0xfc01631c>
   168e4:	d9c01d85 	stb	r7,118(sp)
   168e8:	003dc706 	br	16008 <__alt_data_end+0xfc016008>
   168ec:	d9c01d85 	stb	r7,118(sp)
   168f0:	003ddf06 	br	16070 <__alt_data_end+0xfc016070>
   168f4:	d9c01d85 	stb	r7,118(sp)
   168f8:	003d3706 	br	15dd8 <__alt_data_end+0xfc015dd8>
   168fc:	d9c01d85 	stb	r7,118(sp)
   16900:	003c5406 	br	15a54 <__alt_data_end+0xfc015a54>
   16904:	d9c01d85 	stb	r7,118(sp)
   16908:	003d1d06 	br	15d80 <__alt_data_end+0xfc015d80>

0001690c <_wcrtomb_r>:
   1690c:	defff604 	addi	sp,sp,-40
   16910:	008000b4 	movhi	r2,2
   16914:	dc800815 	stw	r18,32(sp)
   16918:	dc400715 	stw	r17,28(sp)
   1691c:	dc000615 	stw	r16,24(sp)
   16920:	109dfe04 	addi	r2,r2,30712
   16924:	dfc00915 	stw	ra,36(sp)
   16928:	2021883a 	mov	r16,r4
   1692c:	3823883a 	mov	r17,r7
   16930:	14800017 	ldw	r18,0(r2)
   16934:	28001426 	beq	r5,zero,16988 <_wcrtomb_r+0x7c>
   16938:	d9400415 	stw	r5,16(sp)
   1693c:	d9800515 	stw	r6,20(sp)
   16940:	000cef00 	call	cef0 <__locale_charset>
   16944:	d9800517 	ldw	r6,20(sp)
   16948:	d9400417 	ldw	r5,16(sp)
   1694c:	100f883a 	mov	r7,r2
   16950:	dc400015 	stw	r17,0(sp)
   16954:	8009883a 	mov	r4,r16
   16958:	903ee83a 	callr	r18
   1695c:	00ffffc4 	movi	r3,-1
   16960:	10c0031e 	bne	r2,r3,16970 <_wcrtomb_r+0x64>
   16964:	88000015 	stw	zero,0(r17)
   16968:	00c02284 	movi	r3,138
   1696c:	80c00015 	stw	r3,0(r16)
   16970:	dfc00917 	ldw	ra,36(sp)
   16974:	dc800817 	ldw	r18,32(sp)
   16978:	dc400717 	ldw	r17,28(sp)
   1697c:	dc000617 	ldw	r16,24(sp)
   16980:	dec00a04 	addi	sp,sp,40
   16984:	f800283a 	ret
   16988:	000cef00 	call	cef0 <__locale_charset>
   1698c:	100f883a 	mov	r7,r2
   16990:	dc400015 	stw	r17,0(sp)
   16994:	000d883a 	mov	r6,zero
   16998:	d9400104 	addi	r5,sp,4
   1699c:	8009883a 	mov	r4,r16
   169a0:	903ee83a 	callr	r18
   169a4:	003fed06 	br	1695c <__alt_data_end+0xfc01695c>

000169a8 <wcrtomb>:
   169a8:	defff604 	addi	sp,sp,-40
   169ac:	008000b4 	movhi	r2,2
   169b0:	dc800615 	stw	r18,24(sp)
   169b4:	dc400515 	stw	r17,20(sp)
   169b8:	109df804 	addi	r2,r2,30688
   169bc:	dfc00915 	stw	ra,36(sp)
   169c0:	dd000815 	stw	r20,32(sp)
   169c4:	dcc00715 	stw	r19,28(sp)
   169c8:	dc000415 	stw	r16,16(sp)
   169cc:	3025883a 	mov	r18,r6
   169d0:	14400017 	ldw	r17,0(r2)
   169d4:	20001926 	beq	r4,zero,16a3c <wcrtomb+0x94>
   169d8:	008000b4 	movhi	r2,2
   169dc:	109dfe04 	addi	r2,r2,30712
   169e0:	15000017 	ldw	r20,0(r2)
   169e4:	2021883a 	mov	r16,r4
   169e8:	2827883a 	mov	r19,r5
   169ec:	000cef00 	call	cef0 <__locale_charset>
   169f0:	100f883a 	mov	r7,r2
   169f4:	dc800015 	stw	r18,0(sp)
   169f8:	980d883a 	mov	r6,r19
   169fc:	800b883a 	mov	r5,r16
   16a00:	8809883a 	mov	r4,r17
   16a04:	a03ee83a 	callr	r20
   16a08:	00ffffc4 	movi	r3,-1
   16a0c:	10c0031e 	bne	r2,r3,16a1c <wcrtomb+0x74>
   16a10:	90000015 	stw	zero,0(r18)
   16a14:	00c02284 	movi	r3,138
   16a18:	88c00015 	stw	r3,0(r17)
   16a1c:	dfc00917 	ldw	ra,36(sp)
   16a20:	dd000817 	ldw	r20,32(sp)
   16a24:	dcc00717 	ldw	r19,28(sp)
   16a28:	dc800617 	ldw	r18,24(sp)
   16a2c:	dc400517 	ldw	r17,20(sp)
   16a30:	dc000417 	ldw	r16,16(sp)
   16a34:	dec00a04 	addi	sp,sp,40
   16a38:	f800283a 	ret
   16a3c:	008000b4 	movhi	r2,2
   16a40:	109dfe04 	addi	r2,r2,30712
   16a44:	14000017 	ldw	r16,0(r2)
   16a48:	000cef00 	call	cef0 <__locale_charset>
   16a4c:	100f883a 	mov	r7,r2
   16a50:	dc800015 	stw	r18,0(sp)
   16a54:	000d883a 	mov	r6,zero
   16a58:	d9400104 	addi	r5,sp,4
   16a5c:	8809883a 	mov	r4,r17
   16a60:	803ee83a 	callr	r16
   16a64:	003fe806 	br	16a08 <__alt_data_end+0xfc016a08>

00016a68 <__ascii_wctomb>:
   16a68:	28000526 	beq	r5,zero,16a80 <__ascii_wctomb+0x18>
   16a6c:	00803fc4 	movi	r2,255
   16a70:	11800536 	bltu	r2,r6,16a88 <__ascii_wctomb+0x20>
   16a74:	29800005 	stb	r6,0(r5)
   16a78:	00800044 	movi	r2,1
   16a7c:	f800283a 	ret
   16a80:	0005883a 	mov	r2,zero
   16a84:	f800283a 	ret
   16a88:	00802284 	movi	r2,138
   16a8c:	20800015 	stw	r2,0(r4)
   16a90:	00bfffc4 	movi	r2,-1
   16a94:	f800283a 	ret

00016a98 <_wctomb_r>:
   16a98:	008000b4 	movhi	r2,2
   16a9c:	defff904 	addi	sp,sp,-28
   16aa0:	109dfe04 	addi	r2,r2,30712
   16aa4:	dfc00615 	stw	ra,24(sp)
   16aa8:	dc400515 	stw	r17,20(sp)
   16aac:	dc000415 	stw	r16,16(sp)
   16ab0:	3823883a 	mov	r17,r7
   16ab4:	14000017 	ldw	r16,0(r2)
   16ab8:	d9000115 	stw	r4,4(sp)
   16abc:	d9400215 	stw	r5,8(sp)
   16ac0:	d9800315 	stw	r6,12(sp)
   16ac4:	000cef00 	call	cef0 <__locale_charset>
   16ac8:	d9800317 	ldw	r6,12(sp)
   16acc:	d9400217 	ldw	r5,8(sp)
   16ad0:	d9000117 	ldw	r4,4(sp)
   16ad4:	100f883a 	mov	r7,r2
   16ad8:	dc400015 	stw	r17,0(sp)
   16adc:	803ee83a 	callr	r16
   16ae0:	dfc00617 	ldw	ra,24(sp)
   16ae4:	dc400517 	ldw	r17,20(sp)
   16ae8:	dc000417 	ldw	r16,16(sp)
   16aec:	dec00704 	addi	sp,sp,28
   16af0:	f800283a 	ret

00016af4 <__fixunsdfsi>:
   16af4:	defffd04 	addi	sp,sp,-12
   16af8:	000d883a 	mov	r6,zero
   16afc:	01d07834 	movhi	r7,16864
   16b00:	dc400115 	stw	r17,4(sp)
   16b04:	dc000015 	stw	r16,0(sp)
   16b08:	dfc00215 	stw	ra,8(sp)
   16b0c:	2023883a 	mov	r17,r4
   16b10:	2821883a 	mov	r16,r5
   16b14:	0018be40 	call	18be4 <__gedf2>
   16b18:	1000080e 	bge	r2,zero,16b3c <__fixunsdfsi+0x48>
   16b1c:	8809883a 	mov	r4,r17
   16b20:	800b883a 	mov	r5,r16
   16b24:	0019dc80 	call	19dc8 <__fixdfsi>
   16b28:	dfc00217 	ldw	ra,8(sp)
   16b2c:	dc400117 	ldw	r17,4(sp)
   16b30:	dc000017 	ldw	r16,0(sp)
   16b34:	dec00304 	addi	sp,sp,12
   16b38:	f800283a 	ret
   16b3c:	000d883a 	mov	r6,zero
   16b40:	01d07834 	movhi	r7,16864
   16b44:	8809883a 	mov	r4,r17
   16b48:	800b883a 	mov	r5,r16
   16b4c:	00194cc0 	call	194cc <__subdf3>
   16b50:	180b883a 	mov	r5,r3
   16b54:	1009883a 	mov	r4,r2
   16b58:	0019dc80 	call	19dc8 <__fixdfsi>
   16b5c:	00e00034 	movhi	r3,32768
   16b60:	10c5883a 	add	r2,r2,r3
   16b64:	003ff006 	br	16b28 <__alt_data_end+0xfc016b28>

00016b68 <__udivdi3>:
   16b68:	defff504 	addi	sp,sp,-44
   16b6c:	dcc00415 	stw	r19,16(sp)
   16b70:	dc000115 	stw	r16,4(sp)
   16b74:	dfc00a15 	stw	ra,40(sp)
   16b78:	df000915 	stw	fp,36(sp)
   16b7c:	ddc00815 	stw	r23,32(sp)
   16b80:	dd800715 	stw	r22,28(sp)
   16b84:	dd400615 	stw	r21,24(sp)
   16b88:	dd000515 	stw	r20,20(sp)
   16b8c:	dc800315 	stw	r18,12(sp)
   16b90:	dc400215 	stw	r17,8(sp)
   16b94:	2027883a 	mov	r19,r4
   16b98:	2821883a 	mov	r16,r5
   16b9c:	3800411e 	bne	r7,zero,16ca4 <__udivdi3+0x13c>
   16ba0:	3023883a 	mov	r17,r6
   16ba4:	2025883a 	mov	r18,r4
   16ba8:	2980522e 	bgeu	r5,r6,16cf4 <__udivdi3+0x18c>
   16bac:	00bfffd4 	movui	r2,65535
   16bb0:	282d883a 	mov	r22,r5
   16bb4:	1180a836 	bltu	r2,r6,16e58 <__udivdi3+0x2f0>
   16bb8:	00803fc4 	movi	r2,255
   16bbc:	1185803a 	cmpltu	r2,r2,r6
   16bc0:	100490fa 	slli	r2,r2,3
   16bc4:	3086d83a 	srl	r3,r6,r2
   16bc8:	010000b4 	movhi	r4,2
   16bcc:	2116b504 	addi	r4,r4,23252
   16bd0:	20c7883a 	add	r3,r4,r3
   16bd4:	18c00003 	ldbu	r3,0(r3)
   16bd8:	1885883a 	add	r2,r3,r2
   16bdc:	00c00804 	movi	r3,32
   16be0:	1887c83a 	sub	r3,r3,r2
   16be4:	18000526 	beq	r3,zero,16bfc <__udivdi3+0x94>
   16be8:	80e0983a 	sll	r16,r16,r3
   16bec:	9884d83a 	srl	r2,r19,r2
   16bf0:	30e2983a 	sll	r17,r6,r3
   16bf4:	98e4983a 	sll	r18,r19,r3
   16bf8:	142cb03a 	or	r22,r2,r16
   16bfc:	882ad43a 	srli	r21,r17,16
   16c00:	b009883a 	mov	r4,r22
   16c04:	8d3fffcc 	andi	r20,r17,65535
   16c08:	a80b883a 	mov	r5,r21
   16c0c:	00177740 	call	17774 <__umodsi3>
   16c10:	b009883a 	mov	r4,r22
   16c14:	a80b883a 	mov	r5,r21
   16c18:	1027883a 	mov	r19,r2
   16c1c:	00177100 	call	17710 <__udivsi3>
   16c20:	102d883a 	mov	r22,r2
   16c24:	9826943a 	slli	r19,r19,16
   16c28:	9004d43a 	srli	r2,r18,16
   16c2c:	a5a1383a 	mul	r16,r20,r22
   16c30:	14c4b03a 	or	r2,r2,r19
   16c34:	1400052e 	bgeu	r2,r16,16c4c <__udivdi3+0xe4>
   16c38:	1445883a 	add	r2,r2,r17
   16c3c:	b0ffffc4 	addi	r3,r22,-1
   16c40:	14400136 	bltu	r2,r17,16c48 <__udivdi3+0xe0>
   16c44:	14012336 	bltu	r2,r16,170d4 <__udivdi3+0x56c>
   16c48:	182d883a 	mov	r22,r3
   16c4c:	1421c83a 	sub	r16,r2,r16
   16c50:	a80b883a 	mov	r5,r21
   16c54:	8009883a 	mov	r4,r16
   16c58:	00177740 	call	17774 <__umodsi3>
   16c5c:	1027883a 	mov	r19,r2
   16c60:	a80b883a 	mov	r5,r21
   16c64:	8009883a 	mov	r4,r16
   16c68:	00177100 	call	17710 <__udivsi3>
   16c6c:	9826943a 	slli	r19,r19,16
   16c70:	a0a9383a 	mul	r20,r20,r2
   16c74:	94bfffcc 	andi	r18,r18,65535
   16c78:	94e4b03a 	or	r18,r18,r19
   16c7c:	9500052e 	bgeu	r18,r20,16c94 <__udivdi3+0x12c>
   16c80:	8ca5883a 	add	r18,r17,r18
   16c84:	10ffffc4 	addi	r3,r2,-1
   16c88:	9440f136 	bltu	r18,r17,17050 <__udivdi3+0x4e8>
   16c8c:	9500f02e 	bgeu	r18,r20,17050 <__udivdi3+0x4e8>
   16c90:	10bfff84 	addi	r2,r2,-2
   16c94:	b00c943a 	slli	r6,r22,16
   16c98:	0007883a 	mov	r3,zero
   16c9c:	3084b03a 	or	r2,r6,r2
   16ca0:	00005906 	br	16e08 <__udivdi3+0x2a0>
   16ca4:	29c05636 	bltu	r5,r7,16e00 <__udivdi3+0x298>
   16ca8:	00bfffd4 	movui	r2,65535
   16cac:	11c0622e 	bgeu	r2,r7,16e38 <__udivdi3+0x2d0>
   16cb0:	00804034 	movhi	r2,256
   16cb4:	10bfffc4 	addi	r2,r2,-1
   16cb8:	11c0ee36 	bltu	r2,r7,17074 <__udivdi3+0x50c>
   16cbc:	00800404 	movi	r2,16
   16cc0:	3886d83a 	srl	r3,r7,r2
   16cc4:	010000b4 	movhi	r4,2
   16cc8:	2116b504 	addi	r4,r4,23252
   16ccc:	20c7883a 	add	r3,r4,r3
   16cd0:	18c00003 	ldbu	r3,0(r3)
   16cd4:	05400804 	movi	r21,32
   16cd8:	1885883a 	add	r2,r3,r2
   16cdc:	a8abc83a 	sub	r21,r21,r2
   16ce0:	a800621e 	bne	r21,zero,16e6c <__udivdi3+0x304>
   16ce4:	3c00e936 	bltu	r7,r16,1708c <__udivdi3+0x524>
   16ce8:	9985403a 	cmpgeu	r2,r19,r6
   16cec:	0007883a 	mov	r3,zero
   16cf0:	00004506 	br	16e08 <__udivdi3+0x2a0>
   16cf4:	3000041e 	bne	r6,zero,16d08 <__udivdi3+0x1a0>
   16cf8:	000b883a 	mov	r5,zero
   16cfc:	01000044 	movi	r4,1
   16d00:	00177100 	call	17710 <__udivsi3>
   16d04:	1023883a 	mov	r17,r2
   16d08:	00bfffd4 	movui	r2,65535
   16d0c:	14404e2e 	bgeu	r2,r17,16e48 <__udivdi3+0x2e0>
   16d10:	00804034 	movhi	r2,256
   16d14:	10bfffc4 	addi	r2,r2,-1
   16d18:	1440d836 	bltu	r2,r17,1707c <__udivdi3+0x514>
   16d1c:	00800404 	movi	r2,16
   16d20:	8886d83a 	srl	r3,r17,r2
   16d24:	010000b4 	movhi	r4,2
   16d28:	2116b504 	addi	r4,r4,23252
   16d2c:	20c7883a 	add	r3,r4,r3
   16d30:	18c00003 	ldbu	r3,0(r3)
   16d34:	1885883a 	add	r2,r3,r2
   16d38:	00c00804 	movi	r3,32
   16d3c:	1887c83a 	sub	r3,r3,r2
   16d40:	18008f1e 	bne	r3,zero,16f80 <__udivdi3+0x418>
   16d44:	882ad43a 	srli	r21,r17,16
   16d48:	8461c83a 	sub	r16,r16,r17
   16d4c:	8d3fffcc 	andi	r20,r17,65535
   16d50:	00c00044 	movi	r3,1
   16d54:	8009883a 	mov	r4,r16
   16d58:	a80b883a 	mov	r5,r21
   16d5c:	d8c00015 	stw	r3,0(sp)
   16d60:	00177740 	call	17774 <__umodsi3>
   16d64:	8009883a 	mov	r4,r16
   16d68:	a80b883a 	mov	r5,r21
   16d6c:	1027883a 	mov	r19,r2
   16d70:	00177100 	call	17710 <__udivsi3>
   16d74:	9826943a 	slli	r19,r19,16
   16d78:	9008d43a 	srli	r4,r18,16
   16d7c:	1521383a 	mul	r16,r2,r20
   16d80:	102d883a 	mov	r22,r2
   16d84:	24c8b03a 	or	r4,r4,r19
   16d88:	d8c00017 	ldw	r3,0(sp)
   16d8c:	2400052e 	bgeu	r4,r16,16da4 <__udivdi3+0x23c>
   16d90:	2449883a 	add	r4,r4,r17
   16d94:	b0bfffc4 	addi	r2,r22,-1
   16d98:	24400136 	bltu	r4,r17,16da0 <__udivdi3+0x238>
   16d9c:	2400ca36 	bltu	r4,r16,170c8 <__udivdi3+0x560>
   16da0:	102d883a 	mov	r22,r2
   16da4:	2421c83a 	sub	r16,r4,r16
   16da8:	a80b883a 	mov	r5,r21
   16dac:	8009883a 	mov	r4,r16
   16db0:	d8c00015 	stw	r3,0(sp)
   16db4:	00177740 	call	17774 <__umodsi3>
   16db8:	1027883a 	mov	r19,r2
   16dbc:	a80b883a 	mov	r5,r21
   16dc0:	8009883a 	mov	r4,r16
   16dc4:	00177100 	call	17710 <__udivsi3>
   16dc8:	9826943a 	slli	r19,r19,16
   16dcc:	1529383a 	mul	r20,r2,r20
   16dd0:	94bfffcc 	andi	r18,r18,65535
   16dd4:	94e4b03a 	or	r18,r18,r19
   16dd8:	d8c00017 	ldw	r3,0(sp)
   16ddc:	9500052e 	bgeu	r18,r20,16df4 <__udivdi3+0x28c>
   16de0:	8ca5883a 	add	r18,r17,r18
   16de4:	113fffc4 	addi	r4,r2,-1
   16de8:	94409736 	bltu	r18,r17,17048 <__udivdi3+0x4e0>
   16dec:	9500962e 	bgeu	r18,r20,17048 <__udivdi3+0x4e0>
   16df0:	10bfff84 	addi	r2,r2,-2
   16df4:	b00c943a 	slli	r6,r22,16
   16df8:	3084b03a 	or	r2,r6,r2
   16dfc:	00000206 	br	16e08 <__udivdi3+0x2a0>
   16e00:	0007883a 	mov	r3,zero
   16e04:	0005883a 	mov	r2,zero
   16e08:	dfc00a17 	ldw	ra,40(sp)
   16e0c:	df000917 	ldw	fp,36(sp)
   16e10:	ddc00817 	ldw	r23,32(sp)
   16e14:	dd800717 	ldw	r22,28(sp)
   16e18:	dd400617 	ldw	r21,24(sp)
   16e1c:	dd000517 	ldw	r20,20(sp)
   16e20:	dcc00417 	ldw	r19,16(sp)
   16e24:	dc800317 	ldw	r18,12(sp)
   16e28:	dc400217 	ldw	r17,8(sp)
   16e2c:	dc000117 	ldw	r16,4(sp)
   16e30:	dec00b04 	addi	sp,sp,44
   16e34:	f800283a 	ret
   16e38:	00803fc4 	movi	r2,255
   16e3c:	11c5803a 	cmpltu	r2,r2,r7
   16e40:	100490fa 	slli	r2,r2,3
   16e44:	003f9e06 	br	16cc0 <__alt_data_end+0xfc016cc0>
   16e48:	00803fc4 	movi	r2,255
   16e4c:	1445803a 	cmpltu	r2,r2,r17
   16e50:	100490fa 	slli	r2,r2,3
   16e54:	003fb206 	br	16d20 <__alt_data_end+0xfc016d20>
   16e58:	00804034 	movhi	r2,256
   16e5c:	10bfffc4 	addi	r2,r2,-1
   16e60:	11808836 	bltu	r2,r6,17084 <__udivdi3+0x51c>
   16e64:	00800404 	movi	r2,16
   16e68:	003f5606 	br	16bc4 <__alt_data_end+0xfc016bc4>
   16e6c:	30aed83a 	srl	r23,r6,r2
   16e70:	3d4e983a 	sll	r7,r7,r21
   16e74:	80acd83a 	srl	r22,r16,r2
   16e78:	9884d83a 	srl	r2,r19,r2
   16e7c:	3deeb03a 	or	r23,r7,r23
   16e80:	b824d43a 	srli	r18,r23,16
   16e84:	8560983a 	sll	r16,r16,r21
   16e88:	b009883a 	mov	r4,r22
   16e8c:	900b883a 	mov	r5,r18
   16e90:	3568983a 	sll	r20,r6,r21
   16e94:	1420b03a 	or	r16,r2,r16
   16e98:	00177740 	call	17774 <__umodsi3>
   16e9c:	b009883a 	mov	r4,r22
   16ea0:	900b883a 	mov	r5,r18
   16ea4:	1023883a 	mov	r17,r2
   16ea8:	00177100 	call	17710 <__udivsi3>
   16eac:	8808943a 	slli	r4,r17,16
   16eb0:	bf3fffcc 	andi	fp,r23,65535
   16eb4:	8006d43a 	srli	r3,r16,16
   16eb8:	e0a3383a 	mul	r17,fp,r2
   16ebc:	100d883a 	mov	r6,r2
   16ec0:	1906b03a 	or	r3,r3,r4
   16ec4:	1c40042e 	bgeu	r3,r17,16ed8 <__udivdi3+0x370>
   16ec8:	1dc7883a 	add	r3,r3,r23
   16ecc:	10bfffc4 	addi	r2,r2,-1
   16ed0:	1dc0752e 	bgeu	r3,r23,170a8 <__udivdi3+0x540>
   16ed4:	100d883a 	mov	r6,r2
   16ed8:	1c63c83a 	sub	r17,r3,r17
   16edc:	900b883a 	mov	r5,r18
   16ee0:	8809883a 	mov	r4,r17
   16ee4:	d9800015 	stw	r6,0(sp)
   16ee8:	00177740 	call	17774 <__umodsi3>
   16eec:	102d883a 	mov	r22,r2
   16ef0:	8809883a 	mov	r4,r17
   16ef4:	900b883a 	mov	r5,r18
   16ef8:	00177100 	call	17710 <__udivsi3>
   16efc:	b02c943a 	slli	r22,r22,16
   16f00:	e089383a 	mul	r4,fp,r2
   16f04:	843fffcc 	andi	r16,r16,65535
   16f08:	85a0b03a 	or	r16,r16,r22
   16f0c:	d9800017 	ldw	r6,0(sp)
   16f10:	8100042e 	bgeu	r16,r4,16f24 <__udivdi3+0x3bc>
   16f14:	85e1883a 	add	r16,r16,r23
   16f18:	10ffffc4 	addi	r3,r2,-1
   16f1c:	85c05e2e 	bgeu	r16,r23,17098 <__udivdi3+0x530>
   16f20:	1805883a 	mov	r2,r3
   16f24:	300c943a 	slli	r6,r6,16
   16f28:	a17fffcc 	andi	r5,r20,65535
   16f2c:	a028d43a 	srli	r20,r20,16
   16f30:	3084b03a 	or	r2,r6,r2
   16f34:	10ffffcc 	andi	r3,r2,65535
   16f38:	100cd43a 	srli	r6,r2,16
   16f3c:	194f383a 	mul	r7,r3,r5
   16f40:	1d07383a 	mul	r3,r3,r20
   16f44:	314b383a 	mul	r5,r6,r5
   16f48:	3810d43a 	srli	r8,r7,16
   16f4c:	8121c83a 	sub	r16,r16,r4
   16f50:	1947883a 	add	r3,r3,r5
   16f54:	40c7883a 	add	r3,r8,r3
   16f58:	350d383a 	mul	r6,r6,r20
   16f5c:	1940022e 	bgeu	r3,r5,16f68 <__udivdi3+0x400>
   16f60:	01000074 	movhi	r4,1
   16f64:	310d883a 	add	r6,r6,r4
   16f68:	1828d43a 	srli	r20,r3,16
   16f6c:	a18d883a 	add	r6,r20,r6
   16f70:	81803e36 	bltu	r16,r6,1706c <__udivdi3+0x504>
   16f74:	81803826 	beq	r16,r6,17058 <__udivdi3+0x4f0>
   16f78:	0007883a 	mov	r3,zero
   16f7c:	003fa206 	br	16e08 <__alt_data_end+0xfc016e08>
   16f80:	88e2983a 	sll	r17,r17,r3
   16f84:	80a8d83a 	srl	r20,r16,r2
   16f88:	80e0983a 	sll	r16,r16,r3
   16f8c:	882ad43a 	srli	r21,r17,16
   16f90:	9884d83a 	srl	r2,r19,r2
   16f94:	a009883a 	mov	r4,r20
   16f98:	a80b883a 	mov	r5,r21
   16f9c:	142eb03a 	or	r23,r2,r16
   16fa0:	98e4983a 	sll	r18,r19,r3
   16fa4:	00177740 	call	17774 <__umodsi3>
   16fa8:	a009883a 	mov	r4,r20
   16fac:	a80b883a 	mov	r5,r21
   16fb0:	1021883a 	mov	r16,r2
   16fb4:	00177100 	call	17710 <__udivsi3>
   16fb8:	1039883a 	mov	fp,r2
   16fbc:	8d3fffcc 	andi	r20,r17,65535
   16fc0:	8020943a 	slli	r16,r16,16
   16fc4:	b804d43a 	srli	r2,r23,16
   16fc8:	a72d383a 	mul	r22,r20,fp
   16fcc:	1404b03a 	or	r2,r2,r16
   16fd0:	1580062e 	bgeu	r2,r22,16fec <__udivdi3+0x484>
   16fd4:	1445883a 	add	r2,r2,r17
   16fd8:	e0ffffc4 	addi	r3,fp,-1
   16fdc:	14403836 	bltu	r2,r17,170c0 <__udivdi3+0x558>
   16fe0:	1580372e 	bgeu	r2,r22,170c0 <__udivdi3+0x558>
   16fe4:	e73fff84 	addi	fp,fp,-2
   16fe8:	1445883a 	add	r2,r2,r17
   16fec:	15adc83a 	sub	r22,r2,r22
   16ff0:	a80b883a 	mov	r5,r21
   16ff4:	b009883a 	mov	r4,r22
   16ff8:	00177740 	call	17774 <__umodsi3>
   16ffc:	1027883a 	mov	r19,r2
   17000:	b009883a 	mov	r4,r22
   17004:	a80b883a 	mov	r5,r21
   17008:	00177100 	call	17710 <__udivsi3>
   1700c:	9826943a 	slli	r19,r19,16
   17010:	a0a1383a 	mul	r16,r20,r2
   17014:	b93fffcc 	andi	r4,r23,65535
   17018:	24c8b03a 	or	r4,r4,r19
   1701c:	2400062e 	bgeu	r4,r16,17038 <__udivdi3+0x4d0>
   17020:	2449883a 	add	r4,r4,r17
   17024:	10ffffc4 	addi	r3,r2,-1
   17028:	24402336 	bltu	r4,r17,170b8 <__udivdi3+0x550>
   1702c:	2400222e 	bgeu	r4,r16,170b8 <__udivdi3+0x550>
   17030:	10bfff84 	addi	r2,r2,-2
   17034:	2449883a 	add	r4,r4,r17
   17038:	e038943a 	slli	fp,fp,16
   1703c:	2421c83a 	sub	r16,r4,r16
   17040:	e086b03a 	or	r3,fp,r2
   17044:	003f4306 	br	16d54 <__alt_data_end+0xfc016d54>
   17048:	2005883a 	mov	r2,r4
   1704c:	003f6906 	br	16df4 <__alt_data_end+0xfc016df4>
   17050:	1805883a 	mov	r2,r3
   17054:	003f0f06 	br	16c94 <__alt_data_end+0xfc016c94>
   17058:	1806943a 	slli	r3,r3,16
   1705c:	9d66983a 	sll	r19,r19,r21
   17060:	39ffffcc 	andi	r7,r7,65535
   17064:	19c7883a 	add	r3,r3,r7
   17068:	98ffc32e 	bgeu	r19,r3,16f78 <__alt_data_end+0xfc016f78>
   1706c:	10bfffc4 	addi	r2,r2,-1
   17070:	003fc106 	br	16f78 <__alt_data_end+0xfc016f78>
   17074:	00800604 	movi	r2,24
   17078:	003f1106 	br	16cc0 <__alt_data_end+0xfc016cc0>
   1707c:	00800604 	movi	r2,24
   17080:	003f2706 	br	16d20 <__alt_data_end+0xfc016d20>
   17084:	00800604 	movi	r2,24
   17088:	003ece06 	br	16bc4 <__alt_data_end+0xfc016bc4>
   1708c:	0007883a 	mov	r3,zero
   17090:	00800044 	movi	r2,1
   17094:	003f5c06 	br	16e08 <__alt_data_end+0xfc016e08>
   17098:	813fa12e 	bgeu	r16,r4,16f20 <__alt_data_end+0xfc016f20>
   1709c:	10bfff84 	addi	r2,r2,-2
   170a0:	85e1883a 	add	r16,r16,r23
   170a4:	003f9f06 	br	16f24 <__alt_data_end+0xfc016f24>
   170a8:	1c7f8a2e 	bgeu	r3,r17,16ed4 <__alt_data_end+0xfc016ed4>
   170ac:	31bfff84 	addi	r6,r6,-2
   170b0:	1dc7883a 	add	r3,r3,r23
   170b4:	003f8806 	br	16ed8 <__alt_data_end+0xfc016ed8>
   170b8:	1805883a 	mov	r2,r3
   170bc:	003fde06 	br	17038 <__alt_data_end+0xfc017038>
   170c0:	1839883a 	mov	fp,r3
   170c4:	003fc906 	br	16fec <__alt_data_end+0xfc016fec>
   170c8:	b5bfff84 	addi	r22,r22,-2
   170cc:	2449883a 	add	r4,r4,r17
   170d0:	003f3406 	br	16da4 <__alt_data_end+0xfc016da4>
   170d4:	b5bfff84 	addi	r22,r22,-2
   170d8:	1445883a 	add	r2,r2,r17
   170dc:	003edb06 	br	16c4c <__alt_data_end+0xfc016c4c>

000170e0 <__umoddi3>:
   170e0:	defff404 	addi	sp,sp,-48
   170e4:	df000a15 	stw	fp,40(sp)
   170e8:	dc400315 	stw	r17,12(sp)
   170ec:	dc000215 	stw	r16,8(sp)
   170f0:	dfc00b15 	stw	ra,44(sp)
   170f4:	ddc00915 	stw	r23,36(sp)
   170f8:	dd800815 	stw	r22,32(sp)
   170fc:	dd400715 	stw	r21,28(sp)
   17100:	dd000615 	stw	r20,24(sp)
   17104:	dcc00515 	stw	r19,20(sp)
   17108:	dc800415 	stw	r18,16(sp)
   1710c:	2021883a 	mov	r16,r4
   17110:	2823883a 	mov	r17,r5
   17114:	2839883a 	mov	fp,r5
   17118:	38003c1e 	bne	r7,zero,1720c <__umoddi3+0x12c>
   1711c:	3027883a 	mov	r19,r6
   17120:	2029883a 	mov	r20,r4
   17124:	2980512e 	bgeu	r5,r6,1726c <__umoddi3+0x18c>
   17128:	00bfffd4 	movui	r2,65535
   1712c:	11809a36 	bltu	r2,r6,17398 <__umoddi3+0x2b8>
   17130:	01003fc4 	movi	r4,255
   17134:	2189803a 	cmpltu	r4,r4,r6
   17138:	200890fa 	slli	r4,r4,3
   1713c:	3104d83a 	srl	r2,r6,r4
   17140:	00c000b4 	movhi	r3,2
   17144:	18d6b504 	addi	r3,r3,23252
   17148:	1885883a 	add	r2,r3,r2
   1714c:	10c00003 	ldbu	r3,0(r2)
   17150:	00800804 	movi	r2,32
   17154:	1909883a 	add	r4,r3,r4
   17158:	1125c83a 	sub	r18,r2,r4
   1715c:	90000526 	beq	r18,zero,17174 <__umoddi3+0x94>
   17160:	8ca2983a 	sll	r17,r17,r18
   17164:	8108d83a 	srl	r4,r16,r4
   17168:	34a6983a 	sll	r19,r6,r18
   1716c:	84a8983a 	sll	r20,r16,r18
   17170:	2478b03a 	or	fp,r4,r17
   17174:	982ed43a 	srli	r23,r19,16
   17178:	e009883a 	mov	r4,fp
   1717c:	9dbfffcc 	andi	r22,r19,65535
   17180:	b80b883a 	mov	r5,r23
   17184:	00177740 	call	17774 <__umodsi3>
   17188:	e009883a 	mov	r4,fp
   1718c:	b80b883a 	mov	r5,r23
   17190:	102b883a 	mov	r21,r2
   17194:	00177100 	call	17710 <__udivsi3>
   17198:	a806943a 	slli	r3,r21,16
   1719c:	a008d43a 	srli	r4,r20,16
   171a0:	b085383a 	mul	r2,r22,r2
   171a4:	20c8b03a 	or	r4,r4,r3
   171a8:	2080032e 	bgeu	r4,r2,171b8 <__umoddi3+0xd8>
   171ac:	24c9883a 	add	r4,r4,r19
   171b0:	24c00136 	bltu	r4,r19,171b8 <__umoddi3+0xd8>
   171b4:	20811036 	bltu	r4,r2,175f8 <__umoddi3+0x518>
   171b8:	20abc83a 	sub	r21,r4,r2
   171bc:	b80b883a 	mov	r5,r23
   171c0:	a809883a 	mov	r4,r21
   171c4:	00177740 	call	17774 <__umodsi3>
   171c8:	1023883a 	mov	r17,r2
   171cc:	b80b883a 	mov	r5,r23
   171d0:	a809883a 	mov	r4,r21
   171d4:	00177100 	call	17710 <__udivsi3>
   171d8:	8822943a 	slli	r17,r17,16
   171dc:	b085383a 	mul	r2,r22,r2
   171e0:	a0ffffcc 	andi	r3,r20,65535
   171e4:	1c46b03a 	or	r3,r3,r17
   171e8:	1880042e 	bgeu	r3,r2,171fc <__umoddi3+0x11c>
   171ec:	1cc7883a 	add	r3,r3,r19
   171f0:	1cc00236 	bltu	r3,r19,171fc <__umoddi3+0x11c>
   171f4:	1880012e 	bgeu	r3,r2,171fc <__umoddi3+0x11c>
   171f8:	1cc7883a 	add	r3,r3,r19
   171fc:	1885c83a 	sub	r2,r3,r2
   17200:	1484d83a 	srl	r2,r2,r18
   17204:	0007883a 	mov	r3,zero
   17208:	00004f06 	br	17348 <__umoddi3+0x268>
   1720c:	29c04c36 	bltu	r5,r7,17340 <__umoddi3+0x260>
   17210:	00bfffd4 	movui	r2,65535
   17214:	11c0582e 	bgeu	r2,r7,17378 <__umoddi3+0x298>
   17218:	00804034 	movhi	r2,256
   1721c:	10bfffc4 	addi	r2,r2,-1
   17220:	11c0e736 	bltu	r2,r7,175c0 <__umoddi3+0x4e0>
   17224:	01000404 	movi	r4,16
   17228:	3904d83a 	srl	r2,r7,r4
   1722c:	00c000b4 	movhi	r3,2
   17230:	18d6b504 	addi	r3,r3,23252
   17234:	1885883a 	add	r2,r3,r2
   17238:	14c00003 	ldbu	r19,0(r2)
   1723c:	00c00804 	movi	r3,32
   17240:	9927883a 	add	r19,r19,r4
   17244:	1ce9c83a 	sub	r20,r3,r19
   17248:	a000581e 	bne	r20,zero,173ac <__umoddi3+0x2cc>
   1724c:	3c400136 	bltu	r7,r17,17254 <__umoddi3+0x174>
   17250:	8180eb36 	bltu	r16,r6,17600 <__umoddi3+0x520>
   17254:	8185c83a 	sub	r2,r16,r6
   17258:	89e3c83a 	sub	r17,r17,r7
   1725c:	8089803a 	cmpltu	r4,r16,r2
   17260:	8939c83a 	sub	fp,r17,r4
   17264:	e007883a 	mov	r3,fp
   17268:	00003706 	br	17348 <__umoddi3+0x268>
   1726c:	3000041e 	bne	r6,zero,17280 <__umoddi3+0x1a0>
   17270:	000b883a 	mov	r5,zero
   17274:	01000044 	movi	r4,1
   17278:	00177100 	call	17710 <__udivsi3>
   1727c:	1027883a 	mov	r19,r2
   17280:	00bfffd4 	movui	r2,65535
   17284:	14c0402e 	bgeu	r2,r19,17388 <__umoddi3+0x2a8>
   17288:	00804034 	movhi	r2,256
   1728c:	10bfffc4 	addi	r2,r2,-1
   17290:	14c0cd36 	bltu	r2,r19,175c8 <__umoddi3+0x4e8>
   17294:	00800404 	movi	r2,16
   17298:	9886d83a 	srl	r3,r19,r2
   1729c:	010000b4 	movhi	r4,2
   172a0:	2116b504 	addi	r4,r4,23252
   172a4:	20c7883a 	add	r3,r4,r3
   172a8:	18c00003 	ldbu	r3,0(r3)
   172ac:	1887883a 	add	r3,r3,r2
   172b0:	00800804 	movi	r2,32
   172b4:	10e5c83a 	sub	r18,r2,r3
   172b8:	9000901e 	bne	r18,zero,174fc <__umoddi3+0x41c>
   172bc:	982cd43a 	srli	r22,r19,16
   172c0:	8ce3c83a 	sub	r17,r17,r19
   172c4:	9d7fffcc 	andi	r21,r19,65535
   172c8:	b00b883a 	mov	r5,r22
   172cc:	8809883a 	mov	r4,r17
   172d0:	00177740 	call	17774 <__umodsi3>
   172d4:	8809883a 	mov	r4,r17
   172d8:	b00b883a 	mov	r5,r22
   172dc:	1021883a 	mov	r16,r2
   172e0:	00177100 	call	17710 <__udivsi3>
   172e4:	8006943a 	slli	r3,r16,16
   172e8:	a008d43a 	srli	r4,r20,16
   172ec:	1545383a 	mul	r2,r2,r21
   172f0:	20c8b03a 	or	r4,r4,r3
   172f4:	2080042e 	bgeu	r4,r2,17308 <__umoddi3+0x228>
   172f8:	24c9883a 	add	r4,r4,r19
   172fc:	24c00236 	bltu	r4,r19,17308 <__umoddi3+0x228>
   17300:	2080012e 	bgeu	r4,r2,17308 <__umoddi3+0x228>
   17304:	24c9883a 	add	r4,r4,r19
   17308:	20a1c83a 	sub	r16,r4,r2
   1730c:	b00b883a 	mov	r5,r22
   17310:	8009883a 	mov	r4,r16
   17314:	00177740 	call	17774 <__umodsi3>
   17318:	1023883a 	mov	r17,r2
   1731c:	b00b883a 	mov	r5,r22
   17320:	8009883a 	mov	r4,r16
   17324:	00177100 	call	17710 <__udivsi3>
   17328:	8822943a 	slli	r17,r17,16
   1732c:	1545383a 	mul	r2,r2,r21
   17330:	a53fffcc 	andi	r20,r20,65535
   17334:	a446b03a 	or	r3,r20,r17
   17338:	18bfb02e 	bgeu	r3,r2,171fc <__alt_data_end+0xfc0171fc>
   1733c:	003fab06 	br	171ec <__alt_data_end+0xfc0171ec>
   17340:	2005883a 	mov	r2,r4
   17344:	2807883a 	mov	r3,r5
   17348:	dfc00b17 	ldw	ra,44(sp)
   1734c:	df000a17 	ldw	fp,40(sp)
   17350:	ddc00917 	ldw	r23,36(sp)
   17354:	dd800817 	ldw	r22,32(sp)
   17358:	dd400717 	ldw	r21,28(sp)
   1735c:	dd000617 	ldw	r20,24(sp)
   17360:	dcc00517 	ldw	r19,20(sp)
   17364:	dc800417 	ldw	r18,16(sp)
   17368:	dc400317 	ldw	r17,12(sp)
   1736c:	dc000217 	ldw	r16,8(sp)
   17370:	dec00c04 	addi	sp,sp,48
   17374:	f800283a 	ret
   17378:	04c03fc4 	movi	r19,255
   1737c:	99c9803a 	cmpltu	r4,r19,r7
   17380:	200890fa 	slli	r4,r4,3
   17384:	003fa806 	br	17228 <__alt_data_end+0xfc017228>
   17388:	00803fc4 	movi	r2,255
   1738c:	14c5803a 	cmpltu	r2,r2,r19
   17390:	100490fa 	slli	r2,r2,3
   17394:	003fc006 	br	17298 <__alt_data_end+0xfc017298>
   17398:	00804034 	movhi	r2,256
   1739c:	10bfffc4 	addi	r2,r2,-1
   173a0:	11808b36 	bltu	r2,r6,175d0 <__umoddi3+0x4f0>
   173a4:	01000404 	movi	r4,16
   173a8:	003f6406 	br	1713c <__alt_data_end+0xfc01713c>
   173ac:	34c4d83a 	srl	r2,r6,r19
   173b0:	3d0e983a 	sll	r7,r7,r20
   173b4:	8cf8d83a 	srl	fp,r17,r19
   173b8:	8d10983a 	sll	r8,r17,r20
   173bc:	38aab03a 	or	r21,r7,r2
   173c0:	a82cd43a 	srli	r22,r21,16
   173c4:	84e2d83a 	srl	r17,r16,r19
   173c8:	e009883a 	mov	r4,fp
   173cc:	b00b883a 	mov	r5,r22
   173d0:	8a22b03a 	or	r17,r17,r8
   173d4:	3524983a 	sll	r18,r6,r20
   173d8:	00177740 	call	17774 <__umodsi3>
   173dc:	e009883a 	mov	r4,fp
   173e0:	b00b883a 	mov	r5,r22
   173e4:	102f883a 	mov	r23,r2
   173e8:	00177100 	call	17710 <__udivsi3>
   173ec:	100d883a 	mov	r6,r2
   173f0:	b808943a 	slli	r4,r23,16
   173f4:	aa3fffcc 	andi	r8,r21,65535
   173f8:	8804d43a 	srli	r2,r17,16
   173fc:	41af383a 	mul	r23,r8,r6
   17400:	8520983a 	sll	r16,r16,r20
   17404:	1104b03a 	or	r2,r2,r4
   17408:	15c0042e 	bgeu	r2,r23,1741c <__umoddi3+0x33c>
   1740c:	1545883a 	add	r2,r2,r21
   17410:	30ffffc4 	addi	r3,r6,-1
   17414:	1540742e 	bgeu	r2,r21,175e8 <__umoddi3+0x508>
   17418:	180d883a 	mov	r6,r3
   1741c:	15efc83a 	sub	r23,r2,r23
   17420:	b00b883a 	mov	r5,r22
   17424:	b809883a 	mov	r4,r23
   17428:	d9800115 	stw	r6,4(sp)
   1742c:	da000015 	stw	r8,0(sp)
   17430:	00177740 	call	17774 <__umodsi3>
   17434:	b00b883a 	mov	r5,r22
   17438:	b809883a 	mov	r4,r23
   1743c:	1039883a 	mov	fp,r2
   17440:	00177100 	call	17710 <__udivsi3>
   17444:	da000017 	ldw	r8,0(sp)
   17448:	e038943a 	slli	fp,fp,16
   1744c:	100b883a 	mov	r5,r2
   17450:	4089383a 	mul	r4,r8,r2
   17454:	8a3fffcc 	andi	r8,r17,65535
   17458:	4710b03a 	or	r8,r8,fp
   1745c:	d9800117 	ldw	r6,4(sp)
   17460:	4100042e 	bgeu	r8,r4,17474 <__umoddi3+0x394>
   17464:	4551883a 	add	r8,r8,r21
   17468:	10bfffc4 	addi	r2,r2,-1
   1746c:	45405a2e 	bgeu	r8,r21,175d8 <__umoddi3+0x4f8>
   17470:	100b883a 	mov	r5,r2
   17474:	300c943a 	slli	r6,r6,16
   17478:	91ffffcc 	andi	r7,r18,65535
   1747c:	9004d43a 	srli	r2,r18,16
   17480:	314cb03a 	or	r6,r6,r5
   17484:	317fffcc 	andi	r5,r6,65535
   17488:	300cd43a 	srli	r6,r6,16
   1748c:	29d3383a 	mul	r9,r5,r7
   17490:	288b383a 	mul	r5,r5,r2
   17494:	31cf383a 	mul	r7,r6,r7
   17498:	4806d43a 	srli	r3,r9,16
   1749c:	4111c83a 	sub	r8,r8,r4
   174a0:	29cb883a 	add	r5,r5,r7
   174a4:	194b883a 	add	r5,r3,r5
   174a8:	3085383a 	mul	r2,r6,r2
   174ac:	29c0022e 	bgeu	r5,r7,174b8 <__umoddi3+0x3d8>
   174b0:	00c00074 	movhi	r3,1
   174b4:	10c5883a 	add	r2,r2,r3
   174b8:	2808d43a 	srli	r4,r5,16
   174bc:	280a943a 	slli	r5,r5,16
   174c0:	4a7fffcc 	andi	r9,r9,65535
   174c4:	2085883a 	add	r2,r4,r2
   174c8:	2a4b883a 	add	r5,r5,r9
   174cc:	40803636 	bltu	r8,r2,175a8 <__umoddi3+0x4c8>
   174d0:	40804d26 	beq	r8,r2,17608 <__umoddi3+0x528>
   174d4:	4089c83a 	sub	r4,r8,r2
   174d8:	280f883a 	mov	r7,r5
   174dc:	81cfc83a 	sub	r7,r16,r7
   174e0:	81c7803a 	cmpltu	r3,r16,r7
   174e4:	20c7c83a 	sub	r3,r4,r3
   174e8:	1cc4983a 	sll	r2,r3,r19
   174ec:	3d0ed83a 	srl	r7,r7,r20
   174f0:	1d06d83a 	srl	r3,r3,r20
   174f4:	11c4b03a 	or	r2,r2,r7
   174f8:	003f9306 	br	17348 <__alt_data_end+0xfc017348>
   174fc:	9ca6983a 	sll	r19,r19,r18
   17500:	88e8d83a 	srl	r20,r17,r3
   17504:	80c4d83a 	srl	r2,r16,r3
   17508:	982cd43a 	srli	r22,r19,16
   1750c:	8ca2983a 	sll	r17,r17,r18
   17510:	a009883a 	mov	r4,r20
   17514:	b00b883a 	mov	r5,r22
   17518:	1478b03a 	or	fp,r2,r17
   1751c:	00177740 	call	17774 <__umodsi3>
   17520:	a009883a 	mov	r4,r20
   17524:	b00b883a 	mov	r5,r22
   17528:	1023883a 	mov	r17,r2
   1752c:	00177100 	call	17710 <__udivsi3>
   17530:	9d7fffcc 	andi	r21,r19,65535
   17534:	880a943a 	slli	r5,r17,16
   17538:	e008d43a 	srli	r4,fp,16
   1753c:	a885383a 	mul	r2,r21,r2
   17540:	84a8983a 	sll	r20,r16,r18
   17544:	2148b03a 	or	r4,r4,r5
   17548:	2080042e 	bgeu	r4,r2,1755c <__umoddi3+0x47c>
   1754c:	24c9883a 	add	r4,r4,r19
   17550:	24c00236 	bltu	r4,r19,1755c <__umoddi3+0x47c>
   17554:	2080012e 	bgeu	r4,r2,1755c <__umoddi3+0x47c>
   17558:	24c9883a 	add	r4,r4,r19
   1755c:	20a3c83a 	sub	r17,r4,r2
   17560:	b00b883a 	mov	r5,r22
   17564:	8809883a 	mov	r4,r17
   17568:	00177740 	call	17774 <__umodsi3>
   1756c:	102f883a 	mov	r23,r2
   17570:	8809883a 	mov	r4,r17
   17574:	b00b883a 	mov	r5,r22
   17578:	00177100 	call	17710 <__udivsi3>
   1757c:	b82e943a 	slli	r23,r23,16
   17580:	a885383a 	mul	r2,r21,r2
   17584:	e13fffcc 	andi	r4,fp,65535
   17588:	25c8b03a 	or	r4,r4,r23
   1758c:	2080042e 	bgeu	r4,r2,175a0 <__umoddi3+0x4c0>
   17590:	24c9883a 	add	r4,r4,r19
   17594:	24c00236 	bltu	r4,r19,175a0 <__umoddi3+0x4c0>
   17598:	2080012e 	bgeu	r4,r2,175a0 <__umoddi3+0x4c0>
   1759c:	24c9883a 	add	r4,r4,r19
   175a0:	20a3c83a 	sub	r17,r4,r2
   175a4:	003f4806 	br	172c8 <__alt_data_end+0xfc0172c8>
   175a8:	2c8fc83a 	sub	r7,r5,r18
   175ac:	1545c83a 	sub	r2,r2,r21
   175b0:	29cb803a 	cmpltu	r5,r5,r7
   175b4:	1145c83a 	sub	r2,r2,r5
   175b8:	4089c83a 	sub	r4,r8,r2
   175bc:	003fc706 	br	174dc <__alt_data_end+0xfc0174dc>
   175c0:	01000604 	movi	r4,24
   175c4:	003f1806 	br	17228 <__alt_data_end+0xfc017228>
   175c8:	00800604 	movi	r2,24
   175cc:	003f3206 	br	17298 <__alt_data_end+0xfc017298>
   175d0:	01000604 	movi	r4,24
   175d4:	003ed906 	br	1713c <__alt_data_end+0xfc01713c>
   175d8:	413fa52e 	bgeu	r8,r4,17470 <__alt_data_end+0xfc017470>
   175dc:	297fff84 	addi	r5,r5,-2
   175e0:	4551883a 	add	r8,r8,r21
   175e4:	003fa306 	br	17474 <__alt_data_end+0xfc017474>
   175e8:	15ff8b2e 	bgeu	r2,r23,17418 <__alt_data_end+0xfc017418>
   175ec:	31bfff84 	addi	r6,r6,-2
   175f0:	1545883a 	add	r2,r2,r21
   175f4:	003f8906 	br	1741c <__alt_data_end+0xfc01741c>
   175f8:	24c9883a 	add	r4,r4,r19
   175fc:	003eee06 	br	171b8 <__alt_data_end+0xfc0171b8>
   17600:	8005883a 	mov	r2,r16
   17604:	003f1706 	br	17264 <__alt_data_end+0xfc017264>
   17608:	817fe736 	bltu	r16,r5,175a8 <__alt_data_end+0xfc0175a8>
   1760c:	280f883a 	mov	r7,r5
   17610:	0009883a 	mov	r4,zero
   17614:	003fb106 	br	174dc <__alt_data_end+0xfc0174dc>

00017618 <__divsi3>:
   17618:	20001b16 	blt	r4,zero,17688 <__divsi3+0x70>
   1761c:	000f883a 	mov	r7,zero
   17620:	28001616 	blt	r5,zero,1767c <__divsi3+0x64>
   17624:	200d883a 	mov	r6,r4
   17628:	29001a2e 	bgeu	r5,r4,17694 <__divsi3+0x7c>
   1762c:	00800804 	movi	r2,32
   17630:	00c00044 	movi	r3,1
   17634:	00000106 	br	1763c <__divsi3+0x24>
   17638:	10000d26 	beq	r2,zero,17670 <__divsi3+0x58>
   1763c:	294b883a 	add	r5,r5,r5
   17640:	10bfffc4 	addi	r2,r2,-1
   17644:	18c7883a 	add	r3,r3,r3
   17648:	293ffb36 	bltu	r5,r4,17638 <__alt_data_end+0xfc017638>
   1764c:	0005883a 	mov	r2,zero
   17650:	18000726 	beq	r3,zero,17670 <__divsi3+0x58>
   17654:	0005883a 	mov	r2,zero
   17658:	31400236 	bltu	r6,r5,17664 <__divsi3+0x4c>
   1765c:	314dc83a 	sub	r6,r6,r5
   17660:	10c4b03a 	or	r2,r2,r3
   17664:	1806d07a 	srli	r3,r3,1
   17668:	280ad07a 	srli	r5,r5,1
   1766c:	183ffa1e 	bne	r3,zero,17658 <__alt_data_end+0xfc017658>
   17670:	38000126 	beq	r7,zero,17678 <__divsi3+0x60>
   17674:	0085c83a 	sub	r2,zero,r2
   17678:	f800283a 	ret
   1767c:	014bc83a 	sub	r5,zero,r5
   17680:	39c0005c 	xori	r7,r7,1
   17684:	003fe706 	br	17624 <__alt_data_end+0xfc017624>
   17688:	0109c83a 	sub	r4,zero,r4
   1768c:	01c00044 	movi	r7,1
   17690:	003fe306 	br	17620 <__alt_data_end+0xfc017620>
   17694:	00c00044 	movi	r3,1
   17698:	003fee06 	br	17654 <__alt_data_end+0xfc017654>

0001769c <__modsi3>:
   1769c:	20001716 	blt	r4,zero,176fc <__modsi3+0x60>
   176a0:	000f883a 	mov	r7,zero
   176a4:	2005883a 	mov	r2,r4
   176a8:	28001216 	blt	r5,zero,176f4 <__modsi3+0x58>
   176ac:	2900162e 	bgeu	r5,r4,17708 <__modsi3+0x6c>
   176b0:	01800804 	movi	r6,32
   176b4:	00c00044 	movi	r3,1
   176b8:	00000106 	br	176c0 <__modsi3+0x24>
   176bc:	30000a26 	beq	r6,zero,176e8 <__modsi3+0x4c>
   176c0:	294b883a 	add	r5,r5,r5
   176c4:	31bfffc4 	addi	r6,r6,-1
   176c8:	18c7883a 	add	r3,r3,r3
   176cc:	293ffb36 	bltu	r5,r4,176bc <__alt_data_end+0xfc0176bc>
   176d0:	18000526 	beq	r3,zero,176e8 <__modsi3+0x4c>
   176d4:	1806d07a 	srli	r3,r3,1
   176d8:	11400136 	bltu	r2,r5,176e0 <__modsi3+0x44>
   176dc:	1145c83a 	sub	r2,r2,r5
   176e0:	280ad07a 	srli	r5,r5,1
   176e4:	183ffb1e 	bne	r3,zero,176d4 <__alt_data_end+0xfc0176d4>
   176e8:	38000126 	beq	r7,zero,176f0 <__modsi3+0x54>
   176ec:	0085c83a 	sub	r2,zero,r2
   176f0:	f800283a 	ret
   176f4:	014bc83a 	sub	r5,zero,r5
   176f8:	003fec06 	br	176ac <__alt_data_end+0xfc0176ac>
   176fc:	0109c83a 	sub	r4,zero,r4
   17700:	01c00044 	movi	r7,1
   17704:	003fe706 	br	176a4 <__alt_data_end+0xfc0176a4>
   17708:	00c00044 	movi	r3,1
   1770c:	003ff106 	br	176d4 <__alt_data_end+0xfc0176d4>

00017710 <__udivsi3>:
   17710:	200d883a 	mov	r6,r4
   17714:	2900152e 	bgeu	r5,r4,1776c <__udivsi3+0x5c>
   17718:	28001416 	blt	r5,zero,1776c <__udivsi3+0x5c>
   1771c:	00800804 	movi	r2,32
   17720:	00c00044 	movi	r3,1
   17724:	00000206 	br	17730 <__udivsi3+0x20>
   17728:	10000e26 	beq	r2,zero,17764 <__udivsi3+0x54>
   1772c:	28000516 	blt	r5,zero,17744 <__udivsi3+0x34>
   17730:	294b883a 	add	r5,r5,r5
   17734:	10bfffc4 	addi	r2,r2,-1
   17738:	18c7883a 	add	r3,r3,r3
   1773c:	293ffa36 	bltu	r5,r4,17728 <__alt_data_end+0xfc017728>
   17740:	18000826 	beq	r3,zero,17764 <__udivsi3+0x54>
   17744:	0005883a 	mov	r2,zero
   17748:	31400236 	bltu	r6,r5,17754 <__udivsi3+0x44>
   1774c:	314dc83a 	sub	r6,r6,r5
   17750:	10c4b03a 	or	r2,r2,r3
   17754:	1806d07a 	srli	r3,r3,1
   17758:	280ad07a 	srli	r5,r5,1
   1775c:	183ffa1e 	bne	r3,zero,17748 <__alt_data_end+0xfc017748>
   17760:	f800283a 	ret
   17764:	0005883a 	mov	r2,zero
   17768:	f800283a 	ret
   1776c:	00c00044 	movi	r3,1
   17770:	003ff406 	br	17744 <__alt_data_end+0xfc017744>

00017774 <__umodsi3>:
   17774:	2005883a 	mov	r2,r4
   17778:	2900122e 	bgeu	r5,r4,177c4 <__umodsi3+0x50>
   1777c:	28001116 	blt	r5,zero,177c4 <__umodsi3+0x50>
   17780:	01800804 	movi	r6,32
   17784:	00c00044 	movi	r3,1
   17788:	00000206 	br	17794 <__umodsi3+0x20>
   1778c:	30000c26 	beq	r6,zero,177c0 <__umodsi3+0x4c>
   17790:	28000516 	blt	r5,zero,177a8 <__umodsi3+0x34>
   17794:	294b883a 	add	r5,r5,r5
   17798:	31bfffc4 	addi	r6,r6,-1
   1779c:	18c7883a 	add	r3,r3,r3
   177a0:	293ffa36 	bltu	r5,r4,1778c <__alt_data_end+0xfc01778c>
   177a4:	18000626 	beq	r3,zero,177c0 <__umodsi3+0x4c>
   177a8:	1806d07a 	srli	r3,r3,1
   177ac:	11400136 	bltu	r2,r5,177b4 <__umodsi3+0x40>
   177b0:	1145c83a 	sub	r2,r2,r5
   177b4:	280ad07a 	srli	r5,r5,1
   177b8:	183ffb1e 	bne	r3,zero,177a8 <__alt_data_end+0xfc0177a8>
   177bc:	f800283a 	ret
   177c0:	f800283a 	ret
   177c4:	00c00044 	movi	r3,1
   177c8:	003ff706 	br	177a8 <__alt_data_end+0xfc0177a8>

000177cc <__eqsf2>:
   177cc:	2006d5fa 	srli	r3,r4,23
   177d0:	280cd5fa 	srli	r6,r5,23
   177d4:	01c02034 	movhi	r7,128
   177d8:	39ffffc4 	addi	r7,r7,-1
   177dc:	18c03fcc 	andi	r3,r3,255
   177e0:	02003fc4 	movi	r8,255
   177e4:	3904703a 	and	r2,r7,r4
   177e8:	31803fcc 	andi	r6,r6,255
   177ec:	394e703a 	and	r7,r7,r5
   177f0:	2008d7fa 	srli	r4,r4,31
   177f4:	280ad7fa 	srli	r5,r5,31
   177f8:	1a000d26 	beq	r3,r8,17830 <__eqsf2+0x64>
   177fc:	02003fc4 	movi	r8,255
   17800:	32000826 	beq	r6,r8,17824 <__eqsf2+0x58>
   17804:	19800226 	beq	r3,r6,17810 <__eqsf2+0x44>
   17808:	00800044 	movi	r2,1
   1780c:	f800283a 	ret
   17810:	11fffd1e 	bne	r2,r7,17808 <__alt_data_end+0xfc017808>
   17814:	21400926 	beq	r4,r5,1783c <__eqsf2+0x70>
   17818:	183ffb1e 	bne	r3,zero,17808 <__alt_data_end+0xfc017808>
   1781c:	1004c03a 	cmpne	r2,r2,zero
   17820:	f800283a 	ret
   17824:	383ff726 	beq	r7,zero,17804 <__alt_data_end+0xfc017804>
   17828:	00800044 	movi	r2,1
   1782c:	f800283a 	ret
   17830:	103ff226 	beq	r2,zero,177fc <__alt_data_end+0xfc0177fc>
   17834:	00800044 	movi	r2,1
   17838:	f800283a 	ret
   1783c:	0005883a 	mov	r2,zero
   17840:	f800283a 	ret

00017844 <__gesf2>:
   17844:	2004d5fa 	srli	r2,r4,23
   17848:	2806d5fa 	srli	r3,r5,23
   1784c:	01802034 	movhi	r6,128
   17850:	31bfffc4 	addi	r6,r6,-1
   17854:	10803fcc 	andi	r2,r2,255
   17858:	01c03fc4 	movi	r7,255
   1785c:	3110703a 	and	r8,r6,r4
   17860:	18c03fcc 	andi	r3,r3,255
   17864:	314c703a 	and	r6,r6,r5
   17868:	2008d7fa 	srli	r4,r4,31
   1786c:	280ad7fa 	srli	r5,r5,31
   17870:	11c01926 	beq	r2,r7,178d8 <__gesf2+0x94>
   17874:	01c03fc4 	movi	r7,255
   17878:	19c00f26 	beq	r3,r7,178b8 <__gesf2+0x74>
   1787c:	1000061e 	bne	r2,zero,17898 <__gesf2+0x54>
   17880:	400f003a 	cmpeq	r7,r8,zero
   17884:	1800071e 	bne	r3,zero,178a4 <__gesf2+0x60>
   17888:	3000061e 	bne	r6,zero,178a4 <__gesf2+0x60>
   1788c:	0005883a 	mov	r2,zero
   17890:	40000e1e 	bne	r8,zero,178cc <__gesf2+0x88>
   17894:	f800283a 	ret
   17898:	18000a1e 	bne	r3,zero,178c4 <__gesf2+0x80>
   1789c:	30000b26 	beq	r6,zero,178cc <__gesf2+0x88>
   178a0:	000f883a 	mov	r7,zero
   178a4:	29403fcc 	andi	r5,r5,255
   178a8:	38000726 	beq	r7,zero,178c8 <__gesf2+0x84>
   178ac:	28000826 	beq	r5,zero,178d0 <__gesf2+0x8c>
   178b0:	00800044 	movi	r2,1
   178b4:	f800283a 	ret
   178b8:	303ff026 	beq	r6,zero,1787c <__alt_data_end+0xfc01787c>
   178bc:	00bfff84 	movi	r2,-2
   178c0:	f800283a 	ret
   178c4:	29403fcc 	andi	r5,r5,255
   178c8:	21400526 	beq	r4,r5,178e0 <__gesf2+0x9c>
   178cc:	203ff826 	beq	r4,zero,178b0 <__alt_data_end+0xfc0178b0>
   178d0:	00bfffc4 	movi	r2,-1
   178d4:	f800283a 	ret
   178d8:	403fe626 	beq	r8,zero,17874 <__alt_data_end+0xfc017874>
   178dc:	003ff706 	br	178bc <__alt_data_end+0xfc0178bc>
   178e0:	18bffa16 	blt	r3,r2,178cc <__alt_data_end+0xfc0178cc>
   178e4:	10c00216 	blt	r2,r3,178f0 <__gesf2+0xac>
   178e8:	323ff836 	bltu	r6,r8,178cc <__alt_data_end+0xfc0178cc>
   178ec:	4180022e 	bgeu	r8,r6,178f8 <__gesf2+0xb4>
   178f0:	203fef1e 	bne	r4,zero,178b0 <__alt_data_end+0xfc0178b0>
   178f4:	003ff606 	br	178d0 <__alt_data_end+0xfc0178d0>
   178f8:	0005883a 	mov	r2,zero
   178fc:	f800283a 	ret

00017900 <__lesf2>:
   17900:	2004d5fa 	srli	r2,r4,23
   17904:	280cd5fa 	srli	r6,r5,23
   17908:	00c02034 	movhi	r3,128
   1790c:	18ffffc4 	addi	r3,r3,-1
   17910:	10803fcc 	andi	r2,r2,255
   17914:	01c03fc4 	movi	r7,255
   17918:	1910703a 	and	r8,r3,r4
   1791c:	31803fcc 	andi	r6,r6,255
   17920:	1946703a 	and	r3,r3,r5
   17924:	2008d7fa 	srli	r4,r4,31
   17928:	280ad7fa 	srli	r5,r5,31
   1792c:	11c01b26 	beq	r2,r7,1799c <__lesf2+0x9c>
   17930:	01c03fc4 	movi	r7,255
   17934:	31c01126 	beq	r6,r7,1797c <__lesf2+0x7c>
   17938:	1000071e 	bne	r2,zero,17958 <__lesf2+0x58>
   1793c:	400f003a 	cmpeq	r7,r8,zero
   17940:	21003fcc 	andi	r4,r4,255
   17944:	3000081e 	bne	r6,zero,17968 <__lesf2+0x68>
   17948:	1800071e 	bne	r3,zero,17968 <__lesf2+0x68>
   1794c:	0005883a 	mov	r2,zero
   17950:	40000f1e 	bne	r8,zero,17990 <__lesf2+0x90>
   17954:	f800283a 	ret
   17958:	21003fcc 	andi	r4,r4,255
   1795c:	30000a1e 	bne	r6,zero,17988 <__lesf2+0x88>
   17960:	18000b26 	beq	r3,zero,17990 <__lesf2+0x90>
   17964:	000f883a 	mov	r7,zero
   17968:	29403fcc 	andi	r5,r5,255
   1796c:	38000726 	beq	r7,zero,1798c <__lesf2+0x8c>
   17970:	28000826 	beq	r5,zero,17994 <__lesf2+0x94>
   17974:	00800044 	movi	r2,1
   17978:	f800283a 	ret
   1797c:	183fee26 	beq	r3,zero,17938 <__alt_data_end+0xfc017938>
   17980:	00800084 	movi	r2,2
   17984:	f800283a 	ret
   17988:	29403fcc 	andi	r5,r5,255
   1798c:	21400626 	beq	r4,r5,179a8 <__lesf2+0xa8>
   17990:	203ff826 	beq	r4,zero,17974 <__alt_data_end+0xfc017974>
   17994:	00bfffc4 	movi	r2,-1
   17998:	f800283a 	ret
   1799c:	403fe426 	beq	r8,zero,17930 <__alt_data_end+0xfc017930>
   179a0:	00800084 	movi	r2,2
   179a4:	f800283a 	ret
   179a8:	30bff916 	blt	r6,r2,17990 <__alt_data_end+0xfc017990>
   179ac:	11800216 	blt	r2,r6,179b8 <__lesf2+0xb8>
   179b0:	1a3ff736 	bltu	r3,r8,17990 <__alt_data_end+0xfc017990>
   179b4:	40c0022e 	bgeu	r8,r3,179c0 <__lesf2+0xc0>
   179b8:	203fee1e 	bne	r4,zero,17974 <__alt_data_end+0xfc017974>
   179bc:	003ff506 	br	17994 <__alt_data_end+0xfc017994>
   179c0:	0005883a 	mov	r2,zero
   179c4:	f800283a 	ret

000179c8 <__adddf3>:
   179c8:	02c00434 	movhi	r11,16
   179cc:	5affffc4 	addi	r11,r11,-1
   179d0:	2806d7fa 	srli	r3,r5,31
   179d4:	2ad4703a 	and	r10,r5,r11
   179d8:	3ad2703a 	and	r9,r7,r11
   179dc:	3804d53a 	srli	r2,r7,20
   179e0:	3018d77a 	srli	r12,r6,29
   179e4:	280ad53a 	srli	r5,r5,20
   179e8:	501490fa 	slli	r10,r10,3
   179ec:	2010d77a 	srli	r8,r4,29
   179f0:	481290fa 	slli	r9,r9,3
   179f4:	380ed7fa 	srli	r7,r7,31
   179f8:	defffb04 	addi	sp,sp,-20
   179fc:	dc800215 	stw	r18,8(sp)
   17a00:	dc400115 	stw	r17,4(sp)
   17a04:	dc000015 	stw	r16,0(sp)
   17a08:	dfc00415 	stw	ra,16(sp)
   17a0c:	dcc00315 	stw	r19,12(sp)
   17a10:	1c803fcc 	andi	r18,r3,255
   17a14:	2c01ffcc 	andi	r16,r5,2047
   17a18:	5210b03a 	or	r8,r10,r8
   17a1c:	202290fa 	slli	r17,r4,3
   17a20:	1081ffcc 	andi	r2,r2,2047
   17a24:	4b12b03a 	or	r9,r9,r12
   17a28:	300c90fa 	slli	r6,r6,3
   17a2c:	91c07526 	beq	r18,r7,17c04 <__adddf3+0x23c>
   17a30:	8087c83a 	sub	r3,r16,r2
   17a34:	00c0ab0e 	bge	zero,r3,17ce4 <__adddf3+0x31c>
   17a38:	10002a1e 	bne	r2,zero,17ae4 <__adddf3+0x11c>
   17a3c:	4984b03a 	or	r2,r9,r6
   17a40:	1000961e 	bne	r2,zero,17c9c <__adddf3+0x2d4>
   17a44:	888001cc 	andi	r2,r17,7
   17a48:	10000726 	beq	r2,zero,17a68 <__adddf3+0xa0>
   17a4c:	888003cc 	andi	r2,r17,15
   17a50:	00c00104 	movi	r3,4
   17a54:	10c00426 	beq	r2,r3,17a68 <__adddf3+0xa0>
   17a58:	88c7883a 	add	r3,r17,r3
   17a5c:	1c63803a 	cmpltu	r17,r3,r17
   17a60:	4451883a 	add	r8,r8,r17
   17a64:	1823883a 	mov	r17,r3
   17a68:	4080202c 	andhi	r2,r8,128
   17a6c:	10005926 	beq	r2,zero,17bd4 <__adddf3+0x20c>
   17a70:	84000044 	addi	r16,r16,1
   17a74:	0081ffc4 	movi	r2,2047
   17a78:	8080ba26 	beq	r16,r2,17d64 <__adddf3+0x39c>
   17a7c:	00bfe034 	movhi	r2,65408
   17a80:	10bfffc4 	addi	r2,r2,-1
   17a84:	4090703a 	and	r8,r8,r2
   17a88:	4004977a 	slli	r2,r8,29
   17a8c:	4010927a 	slli	r8,r8,9
   17a90:	8822d0fa 	srli	r17,r17,3
   17a94:	8401ffcc 	andi	r16,r16,2047
   17a98:	4010d33a 	srli	r8,r8,12
   17a9c:	9007883a 	mov	r3,r18
   17aa0:	1444b03a 	or	r2,r2,r17
   17aa4:	8401ffcc 	andi	r16,r16,2047
   17aa8:	8020953a 	slli	r16,r16,20
   17aac:	18c03fcc 	andi	r3,r3,255
   17ab0:	01000434 	movhi	r4,16
   17ab4:	213fffc4 	addi	r4,r4,-1
   17ab8:	180697fa 	slli	r3,r3,31
   17abc:	4110703a 	and	r8,r8,r4
   17ac0:	4410b03a 	or	r8,r8,r16
   17ac4:	40c6b03a 	or	r3,r8,r3
   17ac8:	dfc00417 	ldw	ra,16(sp)
   17acc:	dcc00317 	ldw	r19,12(sp)
   17ad0:	dc800217 	ldw	r18,8(sp)
   17ad4:	dc400117 	ldw	r17,4(sp)
   17ad8:	dc000017 	ldw	r16,0(sp)
   17adc:	dec00504 	addi	sp,sp,20
   17ae0:	f800283a 	ret
   17ae4:	0081ffc4 	movi	r2,2047
   17ae8:	80bfd626 	beq	r16,r2,17a44 <__alt_data_end+0xfc017a44>
   17aec:	4a402034 	orhi	r9,r9,128
   17af0:	00800e04 	movi	r2,56
   17af4:	10c09f16 	blt	r2,r3,17d74 <__adddf3+0x3ac>
   17af8:	008007c4 	movi	r2,31
   17afc:	10c0c216 	blt	r2,r3,17e08 <__adddf3+0x440>
   17b00:	00800804 	movi	r2,32
   17b04:	10c5c83a 	sub	r2,r2,r3
   17b08:	488a983a 	sll	r5,r9,r2
   17b0c:	30c8d83a 	srl	r4,r6,r3
   17b10:	3084983a 	sll	r2,r6,r2
   17b14:	48c6d83a 	srl	r3,r9,r3
   17b18:	290cb03a 	or	r6,r5,r4
   17b1c:	1004c03a 	cmpne	r2,r2,zero
   17b20:	308cb03a 	or	r6,r6,r2
   17b24:	898dc83a 	sub	r6,r17,r6
   17b28:	89a3803a 	cmpltu	r17,r17,r6
   17b2c:	40d1c83a 	sub	r8,r8,r3
   17b30:	4451c83a 	sub	r8,r8,r17
   17b34:	3023883a 	mov	r17,r6
   17b38:	4080202c 	andhi	r2,r8,128
   17b3c:	10002326 	beq	r2,zero,17bcc <__adddf3+0x204>
   17b40:	04c02034 	movhi	r19,128
   17b44:	9cffffc4 	addi	r19,r19,-1
   17b48:	44e6703a 	and	r19,r8,r19
   17b4c:	98007626 	beq	r19,zero,17d28 <__adddf3+0x360>
   17b50:	9809883a 	mov	r4,r19
   17b54:	001a1740 	call	1a174 <__clzsi2>
   17b58:	10fffe04 	addi	r3,r2,-8
   17b5c:	010007c4 	movi	r4,31
   17b60:	20c07716 	blt	r4,r3,17d40 <__adddf3+0x378>
   17b64:	00800804 	movi	r2,32
   17b68:	10c5c83a 	sub	r2,r2,r3
   17b6c:	8884d83a 	srl	r2,r17,r2
   17b70:	98d0983a 	sll	r8,r19,r3
   17b74:	88e2983a 	sll	r17,r17,r3
   17b78:	1204b03a 	or	r2,r2,r8
   17b7c:	1c007416 	blt	r3,r16,17d50 <__adddf3+0x388>
   17b80:	1c21c83a 	sub	r16,r3,r16
   17b84:	82000044 	addi	r8,r16,1
   17b88:	00c007c4 	movi	r3,31
   17b8c:	1a009116 	blt	r3,r8,17dd4 <__adddf3+0x40c>
   17b90:	00c00804 	movi	r3,32
   17b94:	1a07c83a 	sub	r3,r3,r8
   17b98:	8a08d83a 	srl	r4,r17,r8
   17b9c:	88e2983a 	sll	r17,r17,r3
   17ba0:	10c6983a 	sll	r3,r2,r3
   17ba4:	1210d83a 	srl	r8,r2,r8
   17ba8:	8804c03a 	cmpne	r2,r17,zero
   17bac:	1906b03a 	or	r3,r3,r4
   17bb0:	18a2b03a 	or	r17,r3,r2
   17bb4:	0021883a 	mov	r16,zero
   17bb8:	003fa206 	br	17a44 <__alt_data_end+0xfc017a44>
   17bbc:	1890b03a 	or	r8,r3,r2
   17bc0:	40017d26 	beq	r8,zero,181b8 <__adddf3+0x7f0>
   17bc4:	1011883a 	mov	r8,r2
   17bc8:	1823883a 	mov	r17,r3
   17bcc:	888001cc 	andi	r2,r17,7
   17bd0:	103f9e1e 	bne	r2,zero,17a4c <__alt_data_end+0xfc017a4c>
   17bd4:	4004977a 	slli	r2,r8,29
   17bd8:	8822d0fa 	srli	r17,r17,3
   17bdc:	4010d0fa 	srli	r8,r8,3
   17be0:	9007883a 	mov	r3,r18
   17be4:	1444b03a 	or	r2,r2,r17
   17be8:	0101ffc4 	movi	r4,2047
   17bec:	81002426 	beq	r16,r4,17c80 <__adddf3+0x2b8>
   17bf0:	8120703a 	and	r16,r16,r4
   17bf4:	01000434 	movhi	r4,16
   17bf8:	213fffc4 	addi	r4,r4,-1
   17bfc:	4110703a 	and	r8,r8,r4
   17c00:	003fa806 	br	17aa4 <__alt_data_end+0xfc017aa4>
   17c04:	8089c83a 	sub	r4,r16,r2
   17c08:	01005e0e 	bge	zero,r4,17d84 <__adddf3+0x3bc>
   17c0c:	10002b26 	beq	r2,zero,17cbc <__adddf3+0x2f4>
   17c10:	0081ffc4 	movi	r2,2047
   17c14:	80bf8b26 	beq	r16,r2,17a44 <__alt_data_end+0xfc017a44>
   17c18:	4a402034 	orhi	r9,r9,128
   17c1c:	00800e04 	movi	r2,56
   17c20:	1100a40e 	bge	r2,r4,17eb4 <__adddf3+0x4ec>
   17c24:	498cb03a 	or	r6,r9,r6
   17c28:	300ac03a 	cmpne	r5,r6,zero
   17c2c:	0013883a 	mov	r9,zero
   17c30:	2c4b883a 	add	r5,r5,r17
   17c34:	2c63803a 	cmpltu	r17,r5,r17
   17c38:	4a11883a 	add	r8,r9,r8
   17c3c:	8a11883a 	add	r8,r17,r8
   17c40:	2823883a 	mov	r17,r5
   17c44:	4080202c 	andhi	r2,r8,128
   17c48:	103fe026 	beq	r2,zero,17bcc <__alt_data_end+0xfc017bcc>
   17c4c:	84000044 	addi	r16,r16,1
   17c50:	0081ffc4 	movi	r2,2047
   17c54:	8080d226 	beq	r16,r2,17fa0 <__adddf3+0x5d8>
   17c58:	00bfe034 	movhi	r2,65408
   17c5c:	10bfffc4 	addi	r2,r2,-1
   17c60:	4090703a 	and	r8,r8,r2
   17c64:	880ad07a 	srli	r5,r17,1
   17c68:	400897fa 	slli	r4,r8,31
   17c6c:	88c0004c 	andi	r3,r17,1
   17c70:	28e2b03a 	or	r17,r5,r3
   17c74:	4010d07a 	srli	r8,r8,1
   17c78:	2462b03a 	or	r17,r4,r17
   17c7c:	003f7106 	br	17a44 <__alt_data_end+0xfc017a44>
   17c80:	4088b03a 	or	r4,r8,r2
   17c84:	20014526 	beq	r4,zero,1819c <__adddf3+0x7d4>
   17c88:	01000434 	movhi	r4,16
   17c8c:	42000234 	orhi	r8,r8,8
   17c90:	213fffc4 	addi	r4,r4,-1
   17c94:	4110703a 	and	r8,r8,r4
   17c98:	003f8206 	br	17aa4 <__alt_data_end+0xfc017aa4>
   17c9c:	18ffffc4 	addi	r3,r3,-1
   17ca0:	1800491e 	bne	r3,zero,17dc8 <__adddf3+0x400>
   17ca4:	898bc83a 	sub	r5,r17,r6
   17ca8:	8963803a 	cmpltu	r17,r17,r5
   17cac:	4251c83a 	sub	r8,r8,r9
   17cb0:	4451c83a 	sub	r8,r8,r17
   17cb4:	2823883a 	mov	r17,r5
   17cb8:	003f9f06 	br	17b38 <__alt_data_end+0xfc017b38>
   17cbc:	4984b03a 	or	r2,r9,r6
   17cc0:	103f6026 	beq	r2,zero,17a44 <__alt_data_end+0xfc017a44>
   17cc4:	213fffc4 	addi	r4,r4,-1
   17cc8:	2000931e 	bne	r4,zero,17f18 <__adddf3+0x550>
   17ccc:	898d883a 	add	r6,r17,r6
   17cd0:	3463803a 	cmpltu	r17,r6,r17
   17cd4:	4251883a 	add	r8,r8,r9
   17cd8:	8a11883a 	add	r8,r17,r8
   17cdc:	3023883a 	mov	r17,r6
   17ce0:	003fd806 	br	17c44 <__alt_data_end+0xfc017c44>
   17ce4:	1800541e 	bne	r3,zero,17e38 <__adddf3+0x470>
   17ce8:	80800044 	addi	r2,r16,1
   17cec:	1081ffcc 	andi	r2,r2,2047
   17cf0:	00c00044 	movi	r3,1
   17cf4:	1880a00e 	bge	r3,r2,17f78 <__adddf3+0x5b0>
   17cf8:	8989c83a 	sub	r4,r17,r6
   17cfc:	8905803a 	cmpltu	r2,r17,r4
   17d00:	4267c83a 	sub	r19,r8,r9
   17d04:	98a7c83a 	sub	r19,r19,r2
   17d08:	9880202c 	andhi	r2,r19,128
   17d0c:	10006326 	beq	r2,zero,17e9c <__adddf3+0x4d4>
   17d10:	3463c83a 	sub	r17,r6,r17
   17d14:	4a07c83a 	sub	r3,r9,r8
   17d18:	344d803a 	cmpltu	r6,r6,r17
   17d1c:	19a7c83a 	sub	r19,r3,r6
   17d20:	3825883a 	mov	r18,r7
   17d24:	983f8a1e 	bne	r19,zero,17b50 <__alt_data_end+0xfc017b50>
   17d28:	8809883a 	mov	r4,r17
   17d2c:	001a1740 	call	1a174 <__clzsi2>
   17d30:	10800804 	addi	r2,r2,32
   17d34:	10fffe04 	addi	r3,r2,-8
   17d38:	010007c4 	movi	r4,31
   17d3c:	20ff890e 	bge	r4,r3,17b64 <__alt_data_end+0xfc017b64>
   17d40:	10bff604 	addi	r2,r2,-40
   17d44:	8884983a 	sll	r2,r17,r2
   17d48:	0023883a 	mov	r17,zero
   17d4c:	1c3f8c0e 	bge	r3,r16,17b80 <__alt_data_end+0xfc017b80>
   17d50:	023fe034 	movhi	r8,65408
   17d54:	423fffc4 	addi	r8,r8,-1
   17d58:	80e1c83a 	sub	r16,r16,r3
   17d5c:	1210703a 	and	r8,r2,r8
   17d60:	003f3806 	br	17a44 <__alt_data_end+0xfc017a44>
   17d64:	9007883a 	mov	r3,r18
   17d68:	0011883a 	mov	r8,zero
   17d6c:	0005883a 	mov	r2,zero
   17d70:	003f4c06 	br	17aa4 <__alt_data_end+0xfc017aa4>
   17d74:	498cb03a 	or	r6,r9,r6
   17d78:	300cc03a 	cmpne	r6,r6,zero
   17d7c:	0007883a 	mov	r3,zero
   17d80:	003f6806 	br	17b24 <__alt_data_end+0xfc017b24>
   17d84:	20009c1e 	bne	r4,zero,17ff8 <__adddf3+0x630>
   17d88:	80800044 	addi	r2,r16,1
   17d8c:	1141ffcc 	andi	r5,r2,2047
   17d90:	01000044 	movi	r4,1
   17d94:	2140670e 	bge	r4,r5,17f34 <__adddf3+0x56c>
   17d98:	0101ffc4 	movi	r4,2047
   17d9c:	11007f26 	beq	r2,r4,17f9c <__adddf3+0x5d4>
   17da0:	898d883a 	add	r6,r17,r6
   17da4:	4247883a 	add	r3,r8,r9
   17da8:	3451803a 	cmpltu	r8,r6,r17
   17dac:	40d1883a 	add	r8,r8,r3
   17db0:	402297fa 	slli	r17,r8,31
   17db4:	300cd07a 	srli	r6,r6,1
   17db8:	4010d07a 	srli	r8,r8,1
   17dbc:	1021883a 	mov	r16,r2
   17dc0:	89a2b03a 	or	r17,r17,r6
   17dc4:	003f1f06 	br	17a44 <__alt_data_end+0xfc017a44>
   17dc8:	0081ffc4 	movi	r2,2047
   17dcc:	80bf481e 	bne	r16,r2,17af0 <__alt_data_end+0xfc017af0>
   17dd0:	003f1c06 	br	17a44 <__alt_data_end+0xfc017a44>
   17dd4:	843ff844 	addi	r16,r16,-31
   17dd8:	01000804 	movi	r4,32
   17ddc:	1406d83a 	srl	r3,r2,r16
   17de0:	41005026 	beq	r8,r4,17f24 <__adddf3+0x55c>
   17de4:	01001004 	movi	r4,64
   17de8:	2211c83a 	sub	r8,r4,r8
   17dec:	1204983a 	sll	r2,r2,r8
   17df0:	88a2b03a 	or	r17,r17,r2
   17df4:	8822c03a 	cmpne	r17,r17,zero
   17df8:	1c62b03a 	or	r17,r3,r17
   17dfc:	0011883a 	mov	r8,zero
   17e00:	0021883a 	mov	r16,zero
   17e04:	003f7106 	br	17bcc <__alt_data_end+0xfc017bcc>
   17e08:	193ff804 	addi	r4,r3,-32
   17e0c:	00800804 	movi	r2,32
   17e10:	4908d83a 	srl	r4,r9,r4
   17e14:	18804526 	beq	r3,r2,17f2c <__adddf3+0x564>
   17e18:	00801004 	movi	r2,64
   17e1c:	10c5c83a 	sub	r2,r2,r3
   17e20:	4886983a 	sll	r3,r9,r2
   17e24:	198cb03a 	or	r6,r3,r6
   17e28:	300cc03a 	cmpne	r6,r6,zero
   17e2c:	218cb03a 	or	r6,r4,r6
   17e30:	0007883a 	mov	r3,zero
   17e34:	003f3b06 	br	17b24 <__alt_data_end+0xfc017b24>
   17e38:	80002a26 	beq	r16,zero,17ee4 <__adddf3+0x51c>
   17e3c:	0101ffc4 	movi	r4,2047
   17e40:	11006826 	beq	r2,r4,17fe4 <__adddf3+0x61c>
   17e44:	00c7c83a 	sub	r3,zero,r3
   17e48:	42002034 	orhi	r8,r8,128
   17e4c:	01000e04 	movi	r4,56
   17e50:	20c07c16 	blt	r4,r3,18044 <__adddf3+0x67c>
   17e54:	010007c4 	movi	r4,31
   17e58:	20c0da16 	blt	r4,r3,181c4 <__adddf3+0x7fc>
   17e5c:	01000804 	movi	r4,32
   17e60:	20c9c83a 	sub	r4,r4,r3
   17e64:	4114983a 	sll	r10,r8,r4
   17e68:	88cad83a 	srl	r5,r17,r3
   17e6c:	8908983a 	sll	r4,r17,r4
   17e70:	40c6d83a 	srl	r3,r8,r3
   17e74:	5162b03a 	or	r17,r10,r5
   17e78:	2008c03a 	cmpne	r4,r4,zero
   17e7c:	8922b03a 	or	r17,r17,r4
   17e80:	3463c83a 	sub	r17,r6,r17
   17e84:	48c7c83a 	sub	r3,r9,r3
   17e88:	344d803a 	cmpltu	r6,r6,r17
   17e8c:	1991c83a 	sub	r8,r3,r6
   17e90:	1021883a 	mov	r16,r2
   17e94:	3825883a 	mov	r18,r7
   17e98:	003f2706 	br	17b38 <__alt_data_end+0xfc017b38>
   17e9c:	24d0b03a 	or	r8,r4,r19
   17ea0:	40001b1e 	bne	r8,zero,17f10 <__adddf3+0x548>
   17ea4:	0005883a 	mov	r2,zero
   17ea8:	0007883a 	mov	r3,zero
   17eac:	0021883a 	mov	r16,zero
   17eb0:	003f4d06 	br	17be8 <__alt_data_end+0xfc017be8>
   17eb4:	008007c4 	movi	r2,31
   17eb8:	11003c16 	blt	r2,r4,17fac <__adddf3+0x5e4>
   17ebc:	00800804 	movi	r2,32
   17ec0:	1105c83a 	sub	r2,r2,r4
   17ec4:	488e983a 	sll	r7,r9,r2
   17ec8:	310ad83a 	srl	r5,r6,r4
   17ecc:	3084983a 	sll	r2,r6,r2
   17ed0:	4912d83a 	srl	r9,r9,r4
   17ed4:	394ab03a 	or	r5,r7,r5
   17ed8:	1004c03a 	cmpne	r2,r2,zero
   17edc:	288ab03a 	or	r5,r5,r2
   17ee0:	003f5306 	br	17c30 <__alt_data_end+0xfc017c30>
   17ee4:	4448b03a 	or	r4,r8,r17
   17ee8:	20003e26 	beq	r4,zero,17fe4 <__adddf3+0x61c>
   17eec:	00c6303a 	nor	r3,zero,r3
   17ef0:	18003a1e 	bne	r3,zero,17fdc <__adddf3+0x614>
   17ef4:	3463c83a 	sub	r17,r6,r17
   17ef8:	4a07c83a 	sub	r3,r9,r8
   17efc:	344d803a 	cmpltu	r6,r6,r17
   17f00:	1991c83a 	sub	r8,r3,r6
   17f04:	1021883a 	mov	r16,r2
   17f08:	3825883a 	mov	r18,r7
   17f0c:	003f0a06 	br	17b38 <__alt_data_end+0xfc017b38>
   17f10:	2023883a 	mov	r17,r4
   17f14:	003f0d06 	br	17b4c <__alt_data_end+0xfc017b4c>
   17f18:	0081ffc4 	movi	r2,2047
   17f1c:	80bf3f1e 	bne	r16,r2,17c1c <__alt_data_end+0xfc017c1c>
   17f20:	003ec806 	br	17a44 <__alt_data_end+0xfc017a44>
   17f24:	0005883a 	mov	r2,zero
   17f28:	003fb106 	br	17df0 <__alt_data_end+0xfc017df0>
   17f2c:	0007883a 	mov	r3,zero
   17f30:	003fbc06 	br	17e24 <__alt_data_end+0xfc017e24>
   17f34:	4444b03a 	or	r2,r8,r17
   17f38:	8000871e 	bne	r16,zero,18158 <__adddf3+0x790>
   17f3c:	1000ba26 	beq	r2,zero,18228 <__adddf3+0x860>
   17f40:	4984b03a 	or	r2,r9,r6
   17f44:	103ebf26 	beq	r2,zero,17a44 <__alt_data_end+0xfc017a44>
   17f48:	8985883a 	add	r2,r17,r6
   17f4c:	4247883a 	add	r3,r8,r9
   17f50:	1451803a 	cmpltu	r8,r2,r17
   17f54:	40d1883a 	add	r8,r8,r3
   17f58:	40c0202c 	andhi	r3,r8,128
   17f5c:	1023883a 	mov	r17,r2
   17f60:	183f1a26 	beq	r3,zero,17bcc <__alt_data_end+0xfc017bcc>
   17f64:	00bfe034 	movhi	r2,65408
   17f68:	10bfffc4 	addi	r2,r2,-1
   17f6c:	2021883a 	mov	r16,r4
   17f70:	4090703a 	and	r8,r8,r2
   17f74:	003eb306 	br	17a44 <__alt_data_end+0xfc017a44>
   17f78:	4444b03a 	or	r2,r8,r17
   17f7c:	8000291e 	bne	r16,zero,18024 <__adddf3+0x65c>
   17f80:	10004b1e 	bne	r2,zero,180b0 <__adddf3+0x6e8>
   17f84:	4990b03a 	or	r8,r9,r6
   17f88:	40008b26 	beq	r8,zero,181b8 <__adddf3+0x7f0>
   17f8c:	4811883a 	mov	r8,r9
   17f90:	3023883a 	mov	r17,r6
   17f94:	3825883a 	mov	r18,r7
   17f98:	003eaa06 	br	17a44 <__alt_data_end+0xfc017a44>
   17f9c:	1021883a 	mov	r16,r2
   17fa0:	0011883a 	mov	r8,zero
   17fa4:	0005883a 	mov	r2,zero
   17fa8:	003f0f06 	br	17be8 <__alt_data_end+0xfc017be8>
   17fac:	217ff804 	addi	r5,r4,-32
   17fb0:	00800804 	movi	r2,32
   17fb4:	494ad83a 	srl	r5,r9,r5
   17fb8:	20807d26 	beq	r4,r2,181b0 <__adddf3+0x7e8>
   17fbc:	00801004 	movi	r2,64
   17fc0:	1109c83a 	sub	r4,r2,r4
   17fc4:	4912983a 	sll	r9,r9,r4
   17fc8:	498cb03a 	or	r6,r9,r6
   17fcc:	300cc03a 	cmpne	r6,r6,zero
   17fd0:	298ab03a 	or	r5,r5,r6
   17fd4:	0013883a 	mov	r9,zero
   17fd8:	003f1506 	br	17c30 <__alt_data_end+0xfc017c30>
   17fdc:	0101ffc4 	movi	r4,2047
   17fe0:	113f9a1e 	bne	r2,r4,17e4c <__alt_data_end+0xfc017e4c>
   17fe4:	4811883a 	mov	r8,r9
   17fe8:	3023883a 	mov	r17,r6
   17fec:	1021883a 	mov	r16,r2
   17ff0:	3825883a 	mov	r18,r7
   17ff4:	003e9306 	br	17a44 <__alt_data_end+0xfc017a44>
   17ff8:	8000161e 	bne	r16,zero,18054 <__adddf3+0x68c>
   17ffc:	444ab03a 	or	r5,r8,r17
   18000:	28005126 	beq	r5,zero,18148 <__adddf3+0x780>
   18004:	0108303a 	nor	r4,zero,r4
   18008:	20004d1e 	bne	r4,zero,18140 <__adddf3+0x778>
   1800c:	89a3883a 	add	r17,r17,r6
   18010:	4253883a 	add	r9,r8,r9
   18014:	898d803a 	cmpltu	r6,r17,r6
   18018:	3251883a 	add	r8,r6,r9
   1801c:	1021883a 	mov	r16,r2
   18020:	003f0806 	br	17c44 <__alt_data_end+0xfc017c44>
   18024:	1000301e 	bne	r2,zero,180e8 <__adddf3+0x720>
   18028:	4984b03a 	or	r2,r9,r6
   1802c:	10007126 	beq	r2,zero,181f4 <__adddf3+0x82c>
   18030:	4811883a 	mov	r8,r9
   18034:	3023883a 	mov	r17,r6
   18038:	3825883a 	mov	r18,r7
   1803c:	0401ffc4 	movi	r16,2047
   18040:	003e8006 	br	17a44 <__alt_data_end+0xfc017a44>
   18044:	4462b03a 	or	r17,r8,r17
   18048:	8822c03a 	cmpne	r17,r17,zero
   1804c:	0007883a 	mov	r3,zero
   18050:	003f8b06 	br	17e80 <__alt_data_end+0xfc017e80>
   18054:	0141ffc4 	movi	r5,2047
   18058:	11403b26 	beq	r2,r5,18148 <__adddf3+0x780>
   1805c:	0109c83a 	sub	r4,zero,r4
   18060:	42002034 	orhi	r8,r8,128
   18064:	01400e04 	movi	r5,56
   18068:	29006716 	blt	r5,r4,18208 <__adddf3+0x840>
   1806c:	014007c4 	movi	r5,31
   18070:	29007016 	blt	r5,r4,18234 <__adddf3+0x86c>
   18074:	01400804 	movi	r5,32
   18078:	290bc83a 	sub	r5,r5,r4
   1807c:	4154983a 	sll	r10,r8,r5
   18080:	890ed83a 	srl	r7,r17,r4
   18084:	894a983a 	sll	r5,r17,r5
   18088:	4108d83a 	srl	r4,r8,r4
   1808c:	51e2b03a 	or	r17,r10,r7
   18090:	280ac03a 	cmpne	r5,r5,zero
   18094:	8962b03a 	or	r17,r17,r5
   18098:	89a3883a 	add	r17,r17,r6
   1809c:	2253883a 	add	r9,r4,r9
   180a0:	898d803a 	cmpltu	r6,r17,r6
   180a4:	3251883a 	add	r8,r6,r9
   180a8:	1021883a 	mov	r16,r2
   180ac:	003ee506 	br	17c44 <__alt_data_end+0xfc017c44>
   180b0:	4984b03a 	or	r2,r9,r6
   180b4:	103e6326 	beq	r2,zero,17a44 <__alt_data_end+0xfc017a44>
   180b8:	8987c83a 	sub	r3,r17,r6
   180bc:	88c9803a 	cmpltu	r4,r17,r3
   180c0:	4245c83a 	sub	r2,r8,r9
   180c4:	1105c83a 	sub	r2,r2,r4
   180c8:	1100202c 	andhi	r4,r2,128
   180cc:	203ebb26 	beq	r4,zero,17bbc <__alt_data_end+0xfc017bbc>
   180d0:	3463c83a 	sub	r17,r6,r17
   180d4:	4a07c83a 	sub	r3,r9,r8
   180d8:	344d803a 	cmpltu	r6,r6,r17
   180dc:	1991c83a 	sub	r8,r3,r6
   180e0:	3825883a 	mov	r18,r7
   180e4:	003e5706 	br	17a44 <__alt_data_end+0xfc017a44>
   180e8:	4984b03a 	or	r2,r9,r6
   180ec:	10002e26 	beq	r2,zero,181a8 <__adddf3+0x7e0>
   180f0:	4004d0fa 	srli	r2,r8,3
   180f4:	8822d0fa 	srli	r17,r17,3
   180f8:	4010977a 	slli	r8,r8,29
   180fc:	10c0022c 	andhi	r3,r2,8
   18100:	4462b03a 	or	r17,r8,r17
   18104:	18000826 	beq	r3,zero,18128 <__adddf3+0x760>
   18108:	4808d0fa 	srli	r4,r9,3
   1810c:	20c0022c 	andhi	r3,r4,8
   18110:	1800051e 	bne	r3,zero,18128 <__adddf3+0x760>
   18114:	300cd0fa 	srli	r6,r6,3
   18118:	4806977a 	slli	r3,r9,29
   1811c:	2005883a 	mov	r2,r4
   18120:	3825883a 	mov	r18,r7
   18124:	19a2b03a 	or	r17,r3,r6
   18128:	8810d77a 	srli	r8,r17,29
   1812c:	100490fa 	slli	r2,r2,3
   18130:	882290fa 	slli	r17,r17,3
   18134:	0401ffc4 	movi	r16,2047
   18138:	4090b03a 	or	r8,r8,r2
   1813c:	003e4106 	br	17a44 <__alt_data_end+0xfc017a44>
   18140:	0141ffc4 	movi	r5,2047
   18144:	117fc71e 	bne	r2,r5,18064 <__alt_data_end+0xfc018064>
   18148:	4811883a 	mov	r8,r9
   1814c:	3023883a 	mov	r17,r6
   18150:	1021883a 	mov	r16,r2
   18154:	003e3b06 	br	17a44 <__alt_data_end+0xfc017a44>
   18158:	10002f26 	beq	r2,zero,18218 <__adddf3+0x850>
   1815c:	4984b03a 	or	r2,r9,r6
   18160:	10001126 	beq	r2,zero,181a8 <__adddf3+0x7e0>
   18164:	4004d0fa 	srli	r2,r8,3
   18168:	8822d0fa 	srli	r17,r17,3
   1816c:	4010977a 	slli	r8,r8,29
   18170:	10c0022c 	andhi	r3,r2,8
   18174:	4462b03a 	or	r17,r8,r17
   18178:	183feb26 	beq	r3,zero,18128 <__alt_data_end+0xfc018128>
   1817c:	4808d0fa 	srli	r4,r9,3
   18180:	20c0022c 	andhi	r3,r4,8
   18184:	183fe81e 	bne	r3,zero,18128 <__alt_data_end+0xfc018128>
   18188:	300cd0fa 	srli	r6,r6,3
   1818c:	4806977a 	slli	r3,r9,29
   18190:	2005883a 	mov	r2,r4
   18194:	19a2b03a 	or	r17,r3,r6
   18198:	003fe306 	br	18128 <__alt_data_end+0xfc018128>
   1819c:	0011883a 	mov	r8,zero
   181a0:	0005883a 	mov	r2,zero
   181a4:	003e3f06 	br	17aa4 <__alt_data_end+0xfc017aa4>
   181a8:	0401ffc4 	movi	r16,2047
   181ac:	003e2506 	br	17a44 <__alt_data_end+0xfc017a44>
   181b0:	0013883a 	mov	r9,zero
   181b4:	003f8406 	br	17fc8 <__alt_data_end+0xfc017fc8>
   181b8:	0005883a 	mov	r2,zero
   181bc:	0007883a 	mov	r3,zero
   181c0:	003e8906 	br	17be8 <__alt_data_end+0xfc017be8>
   181c4:	197ff804 	addi	r5,r3,-32
   181c8:	01000804 	movi	r4,32
   181cc:	414ad83a 	srl	r5,r8,r5
   181d0:	19002426 	beq	r3,r4,18264 <__adddf3+0x89c>
   181d4:	01001004 	movi	r4,64
   181d8:	20c7c83a 	sub	r3,r4,r3
   181dc:	40c6983a 	sll	r3,r8,r3
   181e0:	1c46b03a 	or	r3,r3,r17
   181e4:	1806c03a 	cmpne	r3,r3,zero
   181e8:	28e2b03a 	or	r17,r5,r3
   181ec:	0007883a 	mov	r3,zero
   181f0:	003f2306 	br	17e80 <__alt_data_end+0xfc017e80>
   181f4:	0007883a 	mov	r3,zero
   181f8:	5811883a 	mov	r8,r11
   181fc:	00bfffc4 	movi	r2,-1
   18200:	0401ffc4 	movi	r16,2047
   18204:	003e7806 	br	17be8 <__alt_data_end+0xfc017be8>
   18208:	4462b03a 	or	r17,r8,r17
   1820c:	8822c03a 	cmpne	r17,r17,zero
   18210:	0009883a 	mov	r4,zero
   18214:	003fa006 	br	18098 <__alt_data_end+0xfc018098>
   18218:	4811883a 	mov	r8,r9
   1821c:	3023883a 	mov	r17,r6
   18220:	0401ffc4 	movi	r16,2047
   18224:	003e0706 	br	17a44 <__alt_data_end+0xfc017a44>
   18228:	4811883a 	mov	r8,r9
   1822c:	3023883a 	mov	r17,r6
   18230:	003e0406 	br	17a44 <__alt_data_end+0xfc017a44>
   18234:	21fff804 	addi	r7,r4,-32
   18238:	01400804 	movi	r5,32
   1823c:	41ced83a 	srl	r7,r8,r7
   18240:	21400a26 	beq	r4,r5,1826c <__adddf3+0x8a4>
   18244:	01401004 	movi	r5,64
   18248:	2909c83a 	sub	r4,r5,r4
   1824c:	4108983a 	sll	r4,r8,r4
   18250:	2448b03a 	or	r4,r4,r17
   18254:	2008c03a 	cmpne	r4,r4,zero
   18258:	3922b03a 	or	r17,r7,r4
   1825c:	0009883a 	mov	r4,zero
   18260:	003f8d06 	br	18098 <__alt_data_end+0xfc018098>
   18264:	0007883a 	mov	r3,zero
   18268:	003fdd06 	br	181e0 <__alt_data_end+0xfc0181e0>
   1826c:	0009883a 	mov	r4,zero
   18270:	003ff706 	br	18250 <__alt_data_end+0xfc018250>

00018274 <__divdf3>:
   18274:	defff204 	addi	sp,sp,-56
   18278:	dd400915 	stw	r21,36(sp)
   1827c:	282ad53a 	srli	r21,r5,20
   18280:	dd000815 	stw	r20,32(sp)
   18284:	2828d7fa 	srli	r20,r5,31
   18288:	dc000415 	stw	r16,16(sp)
   1828c:	04000434 	movhi	r16,16
   18290:	df000c15 	stw	fp,48(sp)
   18294:	843fffc4 	addi	r16,r16,-1
   18298:	dfc00d15 	stw	ra,52(sp)
   1829c:	ddc00b15 	stw	r23,44(sp)
   182a0:	dd800a15 	stw	r22,40(sp)
   182a4:	dcc00715 	stw	r19,28(sp)
   182a8:	dc800615 	stw	r18,24(sp)
   182ac:	dc400515 	stw	r17,20(sp)
   182b0:	ad41ffcc 	andi	r21,r21,2047
   182b4:	2c20703a 	and	r16,r5,r16
   182b8:	a7003fcc 	andi	fp,r20,255
   182bc:	a8006126 	beq	r21,zero,18444 <__divdf3+0x1d0>
   182c0:	0081ffc4 	movi	r2,2047
   182c4:	2025883a 	mov	r18,r4
   182c8:	a8803726 	beq	r21,r2,183a8 <__divdf3+0x134>
   182cc:	80800434 	orhi	r2,r16,16
   182d0:	100490fa 	slli	r2,r2,3
   182d4:	2020d77a 	srli	r16,r4,29
   182d8:	202490fa 	slli	r18,r4,3
   182dc:	ad7f0044 	addi	r21,r21,-1023
   182e0:	80a0b03a 	or	r16,r16,r2
   182e4:	0027883a 	mov	r19,zero
   182e8:	0013883a 	mov	r9,zero
   182ec:	3804d53a 	srli	r2,r7,20
   182f0:	382cd7fa 	srli	r22,r7,31
   182f4:	04400434 	movhi	r17,16
   182f8:	8c7fffc4 	addi	r17,r17,-1
   182fc:	1081ffcc 	andi	r2,r2,2047
   18300:	3011883a 	mov	r8,r6
   18304:	3c62703a 	and	r17,r7,r17
   18308:	b5c03fcc 	andi	r23,r22,255
   1830c:	10006c26 	beq	r2,zero,184c0 <__divdf3+0x24c>
   18310:	00c1ffc4 	movi	r3,2047
   18314:	10c06426 	beq	r2,r3,184a8 <__divdf3+0x234>
   18318:	88c00434 	orhi	r3,r17,16
   1831c:	180690fa 	slli	r3,r3,3
   18320:	3022d77a 	srli	r17,r6,29
   18324:	301090fa 	slli	r8,r6,3
   18328:	10bf0044 	addi	r2,r2,-1023
   1832c:	88e2b03a 	or	r17,r17,r3
   18330:	000f883a 	mov	r7,zero
   18334:	a58cf03a 	xor	r6,r20,r22
   18338:	3cc8b03a 	or	r4,r7,r19
   1833c:	a8abc83a 	sub	r21,r21,r2
   18340:	008003c4 	movi	r2,15
   18344:	3007883a 	mov	r3,r6
   18348:	34c03fcc 	andi	r19,r6,255
   1834c:	11009036 	bltu	r2,r4,18590 <__divdf3+0x31c>
   18350:	200890ba 	slli	r4,r4,2
   18354:	008000b4 	movhi	r2,2
   18358:	10a0da04 	addi	r2,r2,-31896
   1835c:	2089883a 	add	r4,r4,r2
   18360:	20800017 	ldw	r2,0(r4)
   18364:	1000683a 	jmp	r2
   18368:	00018590 	cmplti	zero,zero,1558
   1836c:	000183e0 	cmpeqi	zero,zero,1551
   18370:	00018580 	call	1858 <checkIfCanMove+0x30>
   18374:	000183d4 	movui	zero,1551
   18378:	00018580 	call	1858 <checkIfCanMove+0x30>
   1837c:	00018554 	movui	zero,1557
   18380:	00018580 	call	1858 <checkIfCanMove+0x30>
   18384:	000183d4 	movui	zero,1551
   18388:	000183e0 	cmpeqi	zero,zero,1551
   1838c:	000183e0 	cmpeqi	zero,zero,1551
   18390:	00018554 	movui	zero,1557
   18394:	000183d4 	movui	zero,1551
   18398:	000183c4 	movi	zero,1551
   1839c:	000183c4 	movi	zero,1551
   183a0:	000183c4 	movi	zero,1551
   183a4:	00018874 	movhi	zero,1569
   183a8:	2404b03a 	or	r2,r4,r16
   183ac:	1000661e 	bne	r2,zero,18548 <__divdf3+0x2d4>
   183b0:	04c00204 	movi	r19,8
   183b4:	0021883a 	mov	r16,zero
   183b8:	0025883a 	mov	r18,zero
   183bc:	02400084 	movi	r9,2
   183c0:	003fca06 	br	182ec <__alt_data_end+0xfc0182ec>
   183c4:	8023883a 	mov	r17,r16
   183c8:	9011883a 	mov	r8,r18
   183cc:	e02f883a 	mov	r23,fp
   183d0:	480f883a 	mov	r7,r9
   183d4:	00800084 	movi	r2,2
   183d8:	3881311e 	bne	r7,r2,188a0 <__divdf3+0x62c>
   183dc:	b827883a 	mov	r19,r23
   183e0:	98c0004c 	andi	r3,r19,1
   183e4:	0081ffc4 	movi	r2,2047
   183e8:	000b883a 	mov	r5,zero
   183ec:	0025883a 	mov	r18,zero
   183f0:	1004953a 	slli	r2,r2,20
   183f4:	18c03fcc 	andi	r3,r3,255
   183f8:	04400434 	movhi	r17,16
   183fc:	8c7fffc4 	addi	r17,r17,-1
   18400:	180697fa 	slli	r3,r3,31
   18404:	2c4a703a 	and	r5,r5,r17
   18408:	288ab03a 	or	r5,r5,r2
   1840c:	28c6b03a 	or	r3,r5,r3
   18410:	9005883a 	mov	r2,r18
   18414:	dfc00d17 	ldw	ra,52(sp)
   18418:	df000c17 	ldw	fp,48(sp)
   1841c:	ddc00b17 	ldw	r23,44(sp)
   18420:	dd800a17 	ldw	r22,40(sp)
   18424:	dd400917 	ldw	r21,36(sp)
   18428:	dd000817 	ldw	r20,32(sp)
   1842c:	dcc00717 	ldw	r19,28(sp)
   18430:	dc800617 	ldw	r18,24(sp)
   18434:	dc400517 	ldw	r17,20(sp)
   18438:	dc000417 	ldw	r16,16(sp)
   1843c:	dec00e04 	addi	sp,sp,56
   18440:	f800283a 	ret
   18444:	2404b03a 	or	r2,r4,r16
   18448:	2027883a 	mov	r19,r4
   1844c:	10003926 	beq	r2,zero,18534 <__divdf3+0x2c0>
   18450:	80012e26 	beq	r16,zero,1890c <__divdf3+0x698>
   18454:	8009883a 	mov	r4,r16
   18458:	d9800315 	stw	r6,12(sp)
   1845c:	d9c00215 	stw	r7,8(sp)
   18460:	001a1740 	call	1a174 <__clzsi2>
   18464:	d9800317 	ldw	r6,12(sp)
   18468:	d9c00217 	ldw	r7,8(sp)
   1846c:	113ffd44 	addi	r4,r2,-11
   18470:	00c00704 	movi	r3,28
   18474:	19012116 	blt	r3,r4,188fc <__divdf3+0x688>
   18478:	00c00744 	movi	r3,29
   1847c:	147ffe04 	addi	r17,r2,-8
   18480:	1907c83a 	sub	r3,r3,r4
   18484:	8460983a 	sll	r16,r16,r17
   18488:	98c6d83a 	srl	r3,r19,r3
   1848c:	9c64983a 	sll	r18,r19,r17
   18490:	1c20b03a 	or	r16,r3,r16
   18494:	1080fcc4 	addi	r2,r2,1011
   18498:	00abc83a 	sub	r21,zero,r2
   1849c:	0027883a 	mov	r19,zero
   184a0:	0013883a 	mov	r9,zero
   184a4:	003f9106 	br	182ec <__alt_data_end+0xfc0182ec>
   184a8:	3446b03a 	or	r3,r6,r17
   184ac:	18001f1e 	bne	r3,zero,1852c <__divdf3+0x2b8>
   184b0:	0023883a 	mov	r17,zero
   184b4:	0011883a 	mov	r8,zero
   184b8:	01c00084 	movi	r7,2
   184bc:	003f9d06 	br	18334 <__alt_data_end+0xfc018334>
   184c0:	3446b03a 	or	r3,r6,r17
   184c4:	18001526 	beq	r3,zero,1851c <__divdf3+0x2a8>
   184c8:	88011b26 	beq	r17,zero,18938 <__divdf3+0x6c4>
   184cc:	8809883a 	mov	r4,r17
   184d0:	d9800315 	stw	r6,12(sp)
   184d4:	da400115 	stw	r9,4(sp)
   184d8:	001a1740 	call	1a174 <__clzsi2>
   184dc:	d9800317 	ldw	r6,12(sp)
   184e0:	da400117 	ldw	r9,4(sp)
   184e4:	113ffd44 	addi	r4,r2,-11
   184e8:	00c00704 	movi	r3,28
   184ec:	19010e16 	blt	r3,r4,18928 <__divdf3+0x6b4>
   184f0:	00c00744 	movi	r3,29
   184f4:	123ffe04 	addi	r8,r2,-8
   184f8:	1907c83a 	sub	r3,r3,r4
   184fc:	8a22983a 	sll	r17,r17,r8
   18500:	30c6d83a 	srl	r3,r6,r3
   18504:	3210983a 	sll	r8,r6,r8
   18508:	1c62b03a 	or	r17,r3,r17
   1850c:	1080fcc4 	addi	r2,r2,1011
   18510:	0085c83a 	sub	r2,zero,r2
   18514:	000f883a 	mov	r7,zero
   18518:	003f8606 	br	18334 <__alt_data_end+0xfc018334>
   1851c:	0023883a 	mov	r17,zero
   18520:	0011883a 	mov	r8,zero
   18524:	01c00044 	movi	r7,1
   18528:	003f8206 	br	18334 <__alt_data_end+0xfc018334>
   1852c:	01c000c4 	movi	r7,3
   18530:	003f8006 	br	18334 <__alt_data_end+0xfc018334>
   18534:	04c00104 	movi	r19,4
   18538:	0021883a 	mov	r16,zero
   1853c:	0025883a 	mov	r18,zero
   18540:	02400044 	movi	r9,1
   18544:	003f6906 	br	182ec <__alt_data_end+0xfc0182ec>
   18548:	04c00304 	movi	r19,12
   1854c:	024000c4 	movi	r9,3
   18550:	003f6606 	br	182ec <__alt_data_end+0xfc0182ec>
   18554:	01400434 	movhi	r5,16
   18558:	0007883a 	mov	r3,zero
   1855c:	297fffc4 	addi	r5,r5,-1
   18560:	04bfffc4 	movi	r18,-1
   18564:	0081ffc4 	movi	r2,2047
   18568:	003fa106 	br	183f0 <__alt_data_end+0xfc0183f0>
   1856c:	00c00044 	movi	r3,1
   18570:	1887c83a 	sub	r3,r3,r2
   18574:	01000e04 	movi	r4,56
   18578:	20c1210e 	bge	r4,r3,18a00 <__divdf3+0x78c>
   1857c:	98c0004c 	andi	r3,r19,1
   18580:	0005883a 	mov	r2,zero
   18584:	000b883a 	mov	r5,zero
   18588:	0025883a 	mov	r18,zero
   1858c:	003f9806 	br	183f0 <__alt_data_end+0xfc0183f0>
   18590:	8c00fd36 	bltu	r17,r16,18988 <__divdf3+0x714>
   18594:	8440fb26 	beq	r16,r17,18984 <__divdf3+0x710>
   18598:	8007883a 	mov	r3,r16
   1859c:	ad7fffc4 	addi	r21,r21,-1
   185a0:	0021883a 	mov	r16,zero
   185a4:	4004d63a 	srli	r2,r8,24
   185a8:	8822923a 	slli	r17,r17,8
   185ac:	1809883a 	mov	r4,r3
   185b0:	402c923a 	slli	r22,r8,8
   185b4:	88b8b03a 	or	fp,r17,r2
   185b8:	e028d43a 	srli	r20,fp,16
   185bc:	d8c00015 	stw	r3,0(sp)
   185c0:	e5ffffcc 	andi	r23,fp,65535
   185c4:	a00b883a 	mov	r5,r20
   185c8:	00177100 	call	17710 <__udivsi3>
   185cc:	d8c00017 	ldw	r3,0(sp)
   185d0:	a00b883a 	mov	r5,r20
   185d4:	d8800315 	stw	r2,12(sp)
   185d8:	1809883a 	mov	r4,r3
   185dc:	00177740 	call	17774 <__umodsi3>
   185e0:	d9800317 	ldw	r6,12(sp)
   185e4:	1006943a 	slli	r3,r2,16
   185e8:	9004d43a 	srli	r2,r18,16
   185ec:	b9a3383a 	mul	r17,r23,r6
   185f0:	10c4b03a 	or	r2,r2,r3
   185f4:	1440062e 	bgeu	r2,r17,18610 <__divdf3+0x39c>
   185f8:	1705883a 	add	r2,r2,fp
   185fc:	30ffffc4 	addi	r3,r6,-1
   18600:	1700ee36 	bltu	r2,fp,189bc <__divdf3+0x748>
   18604:	1440ed2e 	bgeu	r2,r17,189bc <__divdf3+0x748>
   18608:	31bfff84 	addi	r6,r6,-2
   1860c:	1705883a 	add	r2,r2,fp
   18610:	1463c83a 	sub	r17,r2,r17
   18614:	a00b883a 	mov	r5,r20
   18618:	8809883a 	mov	r4,r17
   1861c:	d9800315 	stw	r6,12(sp)
   18620:	00177100 	call	17710 <__udivsi3>
   18624:	a00b883a 	mov	r5,r20
   18628:	8809883a 	mov	r4,r17
   1862c:	d8800215 	stw	r2,8(sp)
   18630:	00177740 	call	17774 <__umodsi3>
   18634:	d9c00217 	ldw	r7,8(sp)
   18638:	1004943a 	slli	r2,r2,16
   1863c:	94bfffcc 	andi	r18,r18,65535
   18640:	b9d1383a 	mul	r8,r23,r7
   18644:	90a4b03a 	or	r18,r18,r2
   18648:	d9800317 	ldw	r6,12(sp)
   1864c:	9200062e 	bgeu	r18,r8,18668 <__divdf3+0x3f4>
   18650:	9725883a 	add	r18,r18,fp
   18654:	38bfffc4 	addi	r2,r7,-1
   18658:	9700d636 	bltu	r18,fp,189b4 <__divdf3+0x740>
   1865c:	9200d52e 	bgeu	r18,r8,189b4 <__divdf3+0x740>
   18660:	39ffff84 	addi	r7,r7,-2
   18664:	9725883a 	add	r18,r18,fp
   18668:	3004943a 	slli	r2,r6,16
   1866c:	b012d43a 	srli	r9,r22,16
   18670:	b1bfffcc 	andi	r6,r22,65535
   18674:	11e2b03a 	or	r17,r2,r7
   18678:	8806d43a 	srli	r3,r17,16
   1867c:	893fffcc 	andi	r4,r17,65535
   18680:	218b383a 	mul	r5,r4,r6
   18684:	30c5383a 	mul	r2,r6,r3
   18688:	2249383a 	mul	r4,r4,r9
   1868c:	280ed43a 	srli	r7,r5,16
   18690:	9225c83a 	sub	r18,r18,r8
   18694:	2089883a 	add	r4,r4,r2
   18698:	3909883a 	add	r4,r7,r4
   1869c:	1a47383a 	mul	r3,r3,r9
   186a0:	2080022e 	bgeu	r4,r2,186ac <__divdf3+0x438>
   186a4:	00800074 	movhi	r2,1
   186a8:	1887883a 	add	r3,r3,r2
   186ac:	2004d43a 	srli	r2,r4,16
   186b0:	2008943a 	slli	r4,r4,16
   186b4:	297fffcc 	andi	r5,r5,65535
   186b8:	10c7883a 	add	r3,r2,r3
   186bc:	2149883a 	add	r4,r4,r5
   186c0:	90c0a536 	bltu	r18,r3,18958 <__divdf3+0x6e4>
   186c4:	90c0bf26 	beq	r18,r3,189c4 <__divdf3+0x750>
   186c8:	90c7c83a 	sub	r3,r18,r3
   186cc:	810fc83a 	sub	r7,r16,r4
   186d0:	81e5803a 	cmpltu	r18,r16,r7
   186d4:	1ca5c83a 	sub	r18,r3,r18
   186d8:	e480c126 	beq	fp,r18,189e0 <__divdf3+0x76c>
   186dc:	a00b883a 	mov	r5,r20
   186e0:	9009883a 	mov	r4,r18
   186e4:	d9800315 	stw	r6,12(sp)
   186e8:	d9c00215 	stw	r7,8(sp)
   186ec:	da400115 	stw	r9,4(sp)
   186f0:	00177100 	call	17710 <__udivsi3>
   186f4:	a00b883a 	mov	r5,r20
   186f8:	9009883a 	mov	r4,r18
   186fc:	d8800015 	stw	r2,0(sp)
   18700:	00177740 	call	17774 <__umodsi3>
   18704:	d9c00217 	ldw	r7,8(sp)
   18708:	da000017 	ldw	r8,0(sp)
   1870c:	1006943a 	slli	r3,r2,16
   18710:	3804d43a 	srli	r2,r7,16
   18714:	ba21383a 	mul	r16,r23,r8
   18718:	d9800317 	ldw	r6,12(sp)
   1871c:	10c4b03a 	or	r2,r2,r3
   18720:	da400117 	ldw	r9,4(sp)
   18724:	1400062e 	bgeu	r2,r16,18740 <__divdf3+0x4cc>
   18728:	1705883a 	add	r2,r2,fp
   1872c:	40ffffc4 	addi	r3,r8,-1
   18730:	1700ad36 	bltu	r2,fp,189e8 <__divdf3+0x774>
   18734:	1400ac2e 	bgeu	r2,r16,189e8 <__divdf3+0x774>
   18738:	423fff84 	addi	r8,r8,-2
   1873c:	1705883a 	add	r2,r2,fp
   18740:	1421c83a 	sub	r16,r2,r16
   18744:	a00b883a 	mov	r5,r20
   18748:	8009883a 	mov	r4,r16
   1874c:	d9800315 	stw	r6,12(sp)
   18750:	d9c00215 	stw	r7,8(sp)
   18754:	da000015 	stw	r8,0(sp)
   18758:	da400115 	stw	r9,4(sp)
   1875c:	00177100 	call	17710 <__udivsi3>
   18760:	8009883a 	mov	r4,r16
   18764:	a00b883a 	mov	r5,r20
   18768:	1025883a 	mov	r18,r2
   1876c:	00177740 	call	17774 <__umodsi3>
   18770:	d9c00217 	ldw	r7,8(sp)
   18774:	1004943a 	slli	r2,r2,16
   18778:	bcaf383a 	mul	r23,r23,r18
   1877c:	393fffcc 	andi	r4,r7,65535
   18780:	2088b03a 	or	r4,r4,r2
   18784:	d9800317 	ldw	r6,12(sp)
   18788:	da000017 	ldw	r8,0(sp)
   1878c:	da400117 	ldw	r9,4(sp)
   18790:	25c0062e 	bgeu	r4,r23,187ac <__divdf3+0x538>
   18794:	2709883a 	add	r4,r4,fp
   18798:	90bfffc4 	addi	r2,r18,-1
   1879c:	27009436 	bltu	r4,fp,189f0 <__divdf3+0x77c>
   187a0:	25c0932e 	bgeu	r4,r23,189f0 <__divdf3+0x77c>
   187a4:	94bfff84 	addi	r18,r18,-2
   187a8:	2709883a 	add	r4,r4,fp
   187ac:	4004943a 	slli	r2,r8,16
   187b0:	25efc83a 	sub	r23,r4,r23
   187b4:	1490b03a 	or	r8,r2,r18
   187b8:	4008d43a 	srli	r4,r8,16
   187bc:	40ffffcc 	andi	r3,r8,65535
   187c0:	30c5383a 	mul	r2,r6,r3
   187c4:	1a47383a 	mul	r3,r3,r9
   187c8:	310d383a 	mul	r6,r6,r4
   187cc:	100ad43a 	srli	r5,r2,16
   187d0:	4913383a 	mul	r9,r9,r4
   187d4:	1987883a 	add	r3,r3,r6
   187d8:	28c7883a 	add	r3,r5,r3
   187dc:	1980022e 	bgeu	r3,r6,187e8 <__divdf3+0x574>
   187e0:	01000074 	movhi	r4,1
   187e4:	4913883a 	add	r9,r9,r4
   187e8:	1808d43a 	srli	r4,r3,16
   187ec:	1806943a 	slli	r3,r3,16
   187f0:	10bfffcc 	andi	r2,r2,65535
   187f4:	2253883a 	add	r9,r4,r9
   187f8:	1887883a 	add	r3,r3,r2
   187fc:	ba403836 	bltu	r23,r9,188e0 <__divdf3+0x66c>
   18800:	ba403626 	beq	r23,r9,188dc <__divdf3+0x668>
   18804:	42000054 	ori	r8,r8,1
   18808:	a880ffc4 	addi	r2,r21,1023
   1880c:	00bf570e 	bge	zero,r2,1856c <__alt_data_end+0xfc01856c>
   18810:	40c001cc 	andi	r3,r8,7
   18814:	18000726 	beq	r3,zero,18834 <__divdf3+0x5c0>
   18818:	40c003cc 	andi	r3,r8,15
   1881c:	01000104 	movi	r4,4
   18820:	19000426 	beq	r3,r4,18834 <__divdf3+0x5c0>
   18824:	4107883a 	add	r3,r8,r4
   18828:	1a11803a 	cmpltu	r8,r3,r8
   1882c:	8a23883a 	add	r17,r17,r8
   18830:	1811883a 	mov	r8,r3
   18834:	88c0402c 	andhi	r3,r17,256
   18838:	18000426 	beq	r3,zero,1884c <__divdf3+0x5d8>
   1883c:	00ffc034 	movhi	r3,65280
   18840:	18ffffc4 	addi	r3,r3,-1
   18844:	a8810004 	addi	r2,r21,1024
   18848:	88e2703a 	and	r17,r17,r3
   1884c:	00c1ff84 	movi	r3,2046
   18850:	18bee316 	blt	r3,r2,183e0 <__alt_data_end+0xfc0183e0>
   18854:	8824977a 	slli	r18,r17,29
   18858:	4010d0fa 	srli	r8,r8,3
   1885c:	8822927a 	slli	r17,r17,9
   18860:	1081ffcc 	andi	r2,r2,2047
   18864:	9224b03a 	or	r18,r18,r8
   18868:	880ad33a 	srli	r5,r17,12
   1886c:	98c0004c 	andi	r3,r19,1
   18870:	003edf06 	br	183f0 <__alt_data_end+0xfc0183f0>
   18874:	8080022c 	andhi	r2,r16,8
   18878:	10001226 	beq	r2,zero,188c4 <__divdf3+0x650>
   1887c:	8880022c 	andhi	r2,r17,8
   18880:	1000101e 	bne	r2,zero,188c4 <__divdf3+0x650>
   18884:	00800434 	movhi	r2,16
   18888:	89400234 	orhi	r5,r17,8
   1888c:	10bfffc4 	addi	r2,r2,-1
   18890:	b007883a 	mov	r3,r22
   18894:	288a703a 	and	r5,r5,r2
   18898:	4025883a 	mov	r18,r8
   1889c:	003f3106 	br	18564 <__alt_data_end+0xfc018564>
   188a0:	008000c4 	movi	r2,3
   188a4:	3880a626 	beq	r7,r2,18b40 <__divdf3+0x8cc>
   188a8:	00800044 	movi	r2,1
   188ac:	3880521e 	bne	r7,r2,189f8 <__divdf3+0x784>
   188b0:	b807883a 	mov	r3,r23
   188b4:	0005883a 	mov	r2,zero
   188b8:	000b883a 	mov	r5,zero
   188bc:	0025883a 	mov	r18,zero
   188c0:	003ecb06 	br	183f0 <__alt_data_end+0xfc0183f0>
   188c4:	00800434 	movhi	r2,16
   188c8:	81400234 	orhi	r5,r16,8
   188cc:	10bfffc4 	addi	r2,r2,-1
   188d0:	a007883a 	mov	r3,r20
   188d4:	288a703a 	and	r5,r5,r2
   188d8:	003f2206 	br	18564 <__alt_data_end+0xfc018564>
   188dc:	183fca26 	beq	r3,zero,18808 <__alt_data_end+0xfc018808>
   188e0:	e5ef883a 	add	r23,fp,r23
   188e4:	40bfffc4 	addi	r2,r8,-1
   188e8:	bf00392e 	bgeu	r23,fp,189d0 <__divdf3+0x75c>
   188ec:	1011883a 	mov	r8,r2
   188f0:	ba7fc41e 	bne	r23,r9,18804 <__alt_data_end+0xfc018804>
   188f4:	b0ffc31e 	bne	r22,r3,18804 <__alt_data_end+0xfc018804>
   188f8:	003fc306 	br	18808 <__alt_data_end+0xfc018808>
   188fc:	143ff604 	addi	r16,r2,-40
   18900:	9c20983a 	sll	r16,r19,r16
   18904:	0025883a 	mov	r18,zero
   18908:	003ee206 	br	18494 <__alt_data_end+0xfc018494>
   1890c:	d9800315 	stw	r6,12(sp)
   18910:	d9c00215 	stw	r7,8(sp)
   18914:	001a1740 	call	1a174 <__clzsi2>
   18918:	10800804 	addi	r2,r2,32
   1891c:	d9c00217 	ldw	r7,8(sp)
   18920:	d9800317 	ldw	r6,12(sp)
   18924:	003ed106 	br	1846c <__alt_data_end+0xfc01846c>
   18928:	147ff604 	addi	r17,r2,-40
   1892c:	3462983a 	sll	r17,r6,r17
   18930:	0011883a 	mov	r8,zero
   18934:	003ef506 	br	1850c <__alt_data_end+0xfc01850c>
   18938:	3009883a 	mov	r4,r6
   1893c:	d9800315 	stw	r6,12(sp)
   18940:	da400115 	stw	r9,4(sp)
   18944:	001a1740 	call	1a174 <__clzsi2>
   18948:	10800804 	addi	r2,r2,32
   1894c:	da400117 	ldw	r9,4(sp)
   18950:	d9800317 	ldw	r6,12(sp)
   18954:	003ee306 	br	184e4 <__alt_data_end+0xfc0184e4>
   18958:	85a1883a 	add	r16,r16,r22
   1895c:	8585803a 	cmpltu	r2,r16,r22
   18960:	1705883a 	add	r2,r2,fp
   18964:	14a5883a 	add	r18,r2,r18
   18968:	88bfffc4 	addi	r2,r17,-1
   1896c:	e4800c2e 	bgeu	fp,r18,189a0 <__divdf3+0x72c>
   18970:	90c03e36 	bltu	r18,r3,18a6c <__divdf3+0x7f8>
   18974:	1c806926 	beq	r3,r18,18b1c <__divdf3+0x8a8>
   18978:	90c7c83a 	sub	r3,r18,r3
   1897c:	1023883a 	mov	r17,r2
   18980:	003f5206 	br	186cc <__alt_data_end+0xfc0186cc>
   18984:	923f0436 	bltu	r18,r8,18598 <__alt_data_end+0xfc018598>
   18988:	800897fa 	slli	r4,r16,31
   1898c:	9004d07a 	srli	r2,r18,1
   18990:	8006d07a 	srli	r3,r16,1
   18994:	902097fa 	slli	r16,r18,31
   18998:	20a4b03a 	or	r18,r4,r2
   1899c:	003f0106 	br	185a4 <__alt_data_end+0xfc0185a4>
   189a0:	e4bff51e 	bne	fp,r18,18978 <__alt_data_end+0xfc018978>
   189a4:	85bff22e 	bgeu	r16,r22,18970 <__alt_data_end+0xfc018970>
   189a8:	e0c7c83a 	sub	r3,fp,r3
   189ac:	1023883a 	mov	r17,r2
   189b0:	003f4606 	br	186cc <__alt_data_end+0xfc0186cc>
   189b4:	100f883a 	mov	r7,r2
   189b8:	003f2b06 	br	18668 <__alt_data_end+0xfc018668>
   189bc:	180d883a 	mov	r6,r3
   189c0:	003f1306 	br	18610 <__alt_data_end+0xfc018610>
   189c4:	813fe436 	bltu	r16,r4,18958 <__alt_data_end+0xfc018958>
   189c8:	0007883a 	mov	r3,zero
   189cc:	003f3f06 	br	186cc <__alt_data_end+0xfc0186cc>
   189d0:	ba402c36 	bltu	r23,r9,18a84 <__divdf3+0x810>
   189d4:	4dc05426 	beq	r9,r23,18b28 <__divdf3+0x8b4>
   189d8:	1011883a 	mov	r8,r2
   189dc:	003f8906 	br	18804 <__alt_data_end+0xfc018804>
   189e0:	023fffc4 	movi	r8,-1
   189e4:	003f8806 	br	18808 <__alt_data_end+0xfc018808>
   189e8:	1811883a 	mov	r8,r3
   189ec:	003f5406 	br	18740 <__alt_data_end+0xfc018740>
   189f0:	1025883a 	mov	r18,r2
   189f4:	003f6d06 	br	187ac <__alt_data_end+0xfc0187ac>
   189f8:	b827883a 	mov	r19,r23
   189fc:	003f8206 	br	18808 <__alt_data_end+0xfc018808>
   18a00:	010007c4 	movi	r4,31
   18a04:	20c02616 	blt	r4,r3,18aa0 <__divdf3+0x82c>
   18a08:	00800804 	movi	r2,32
   18a0c:	10c5c83a 	sub	r2,r2,r3
   18a10:	888a983a 	sll	r5,r17,r2
   18a14:	40c8d83a 	srl	r4,r8,r3
   18a18:	4084983a 	sll	r2,r8,r2
   18a1c:	88e2d83a 	srl	r17,r17,r3
   18a20:	2906b03a 	or	r3,r5,r4
   18a24:	1004c03a 	cmpne	r2,r2,zero
   18a28:	1886b03a 	or	r3,r3,r2
   18a2c:	188001cc 	andi	r2,r3,7
   18a30:	10000726 	beq	r2,zero,18a50 <__divdf3+0x7dc>
   18a34:	188003cc 	andi	r2,r3,15
   18a38:	01000104 	movi	r4,4
   18a3c:	11000426 	beq	r2,r4,18a50 <__divdf3+0x7dc>
   18a40:	1805883a 	mov	r2,r3
   18a44:	10c00104 	addi	r3,r2,4
   18a48:	1885803a 	cmpltu	r2,r3,r2
   18a4c:	88a3883a 	add	r17,r17,r2
   18a50:	8880202c 	andhi	r2,r17,128
   18a54:	10002726 	beq	r2,zero,18af4 <__divdf3+0x880>
   18a58:	98c0004c 	andi	r3,r19,1
   18a5c:	00800044 	movi	r2,1
   18a60:	000b883a 	mov	r5,zero
   18a64:	0025883a 	mov	r18,zero
   18a68:	003e6106 	br	183f0 <__alt_data_end+0xfc0183f0>
   18a6c:	85a1883a 	add	r16,r16,r22
   18a70:	8585803a 	cmpltu	r2,r16,r22
   18a74:	1705883a 	add	r2,r2,fp
   18a78:	14a5883a 	add	r18,r2,r18
   18a7c:	8c7fff84 	addi	r17,r17,-2
   18a80:	003f1106 	br	186c8 <__alt_data_end+0xfc0186c8>
   18a84:	b589883a 	add	r4,r22,r22
   18a88:	25ad803a 	cmpltu	r22,r4,r22
   18a8c:	b739883a 	add	fp,r22,fp
   18a90:	40bfff84 	addi	r2,r8,-2
   18a94:	bf2f883a 	add	r23,r23,fp
   18a98:	202d883a 	mov	r22,r4
   18a9c:	003f9306 	br	188ec <__alt_data_end+0xfc0188ec>
   18aa0:	013ff844 	movi	r4,-31
   18aa4:	2085c83a 	sub	r2,r4,r2
   18aa8:	8888d83a 	srl	r4,r17,r2
   18aac:	00800804 	movi	r2,32
   18ab0:	18802126 	beq	r3,r2,18b38 <__divdf3+0x8c4>
   18ab4:	00801004 	movi	r2,64
   18ab8:	10c5c83a 	sub	r2,r2,r3
   18abc:	8884983a 	sll	r2,r17,r2
   18ac0:	1204b03a 	or	r2,r2,r8
   18ac4:	1004c03a 	cmpne	r2,r2,zero
   18ac8:	2084b03a 	or	r2,r4,r2
   18acc:	144001cc 	andi	r17,r2,7
   18ad0:	88000d1e 	bne	r17,zero,18b08 <__divdf3+0x894>
   18ad4:	000b883a 	mov	r5,zero
   18ad8:	1024d0fa 	srli	r18,r2,3
   18adc:	98c0004c 	andi	r3,r19,1
   18ae0:	0005883a 	mov	r2,zero
   18ae4:	9464b03a 	or	r18,r18,r17
   18ae8:	003e4106 	br	183f0 <__alt_data_end+0xfc0183f0>
   18aec:	1007883a 	mov	r3,r2
   18af0:	0023883a 	mov	r17,zero
   18af4:	880a927a 	slli	r5,r17,9
   18af8:	1805883a 	mov	r2,r3
   18afc:	8822977a 	slli	r17,r17,29
   18b00:	280ad33a 	srli	r5,r5,12
   18b04:	003ff406 	br	18ad8 <__alt_data_end+0xfc018ad8>
   18b08:	10c003cc 	andi	r3,r2,15
   18b0c:	01000104 	movi	r4,4
   18b10:	193ff626 	beq	r3,r4,18aec <__alt_data_end+0xfc018aec>
   18b14:	0023883a 	mov	r17,zero
   18b18:	003fca06 	br	18a44 <__alt_data_end+0xfc018a44>
   18b1c:	813fd336 	bltu	r16,r4,18a6c <__alt_data_end+0xfc018a6c>
   18b20:	1023883a 	mov	r17,r2
   18b24:	003fa806 	br	189c8 <__alt_data_end+0xfc0189c8>
   18b28:	b0ffd636 	bltu	r22,r3,18a84 <__alt_data_end+0xfc018a84>
   18b2c:	1011883a 	mov	r8,r2
   18b30:	b0ff341e 	bne	r22,r3,18804 <__alt_data_end+0xfc018804>
   18b34:	003f3406 	br	18808 <__alt_data_end+0xfc018808>
   18b38:	0005883a 	mov	r2,zero
   18b3c:	003fe006 	br	18ac0 <__alt_data_end+0xfc018ac0>
   18b40:	00800434 	movhi	r2,16
   18b44:	89400234 	orhi	r5,r17,8
   18b48:	10bfffc4 	addi	r2,r2,-1
   18b4c:	b807883a 	mov	r3,r23
   18b50:	288a703a 	and	r5,r5,r2
   18b54:	4025883a 	mov	r18,r8
   18b58:	003e8206 	br	18564 <__alt_data_end+0xfc018564>

00018b5c <__eqdf2>:
   18b5c:	2804d53a 	srli	r2,r5,20
   18b60:	3806d53a 	srli	r3,r7,20
   18b64:	02000434 	movhi	r8,16
   18b68:	423fffc4 	addi	r8,r8,-1
   18b6c:	1081ffcc 	andi	r2,r2,2047
   18b70:	0281ffc4 	movi	r10,2047
   18b74:	2a12703a 	and	r9,r5,r8
   18b78:	18c1ffcc 	andi	r3,r3,2047
   18b7c:	3a10703a 	and	r8,r7,r8
   18b80:	280ad7fa 	srli	r5,r5,31
   18b84:	380ed7fa 	srli	r7,r7,31
   18b88:	12801026 	beq	r2,r10,18bcc <__eqdf2+0x70>
   18b8c:	0281ffc4 	movi	r10,2047
   18b90:	1a800a26 	beq	r3,r10,18bbc <__eqdf2+0x60>
   18b94:	10c00226 	beq	r2,r3,18ba0 <__eqdf2+0x44>
   18b98:	00800044 	movi	r2,1
   18b9c:	f800283a 	ret
   18ba0:	4a3ffd1e 	bne	r9,r8,18b98 <__alt_data_end+0xfc018b98>
   18ba4:	21bffc1e 	bne	r4,r6,18b98 <__alt_data_end+0xfc018b98>
   18ba8:	29c00c26 	beq	r5,r7,18bdc <__eqdf2+0x80>
   18bac:	103ffa1e 	bne	r2,zero,18b98 <__alt_data_end+0xfc018b98>
   18bb0:	2244b03a 	or	r2,r4,r9
   18bb4:	1004c03a 	cmpne	r2,r2,zero
   18bb8:	f800283a 	ret
   18bbc:	3214b03a 	or	r10,r6,r8
   18bc0:	503ff426 	beq	r10,zero,18b94 <__alt_data_end+0xfc018b94>
   18bc4:	00800044 	movi	r2,1
   18bc8:	f800283a 	ret
   18bcc:	2254b03a 	or	r10,r4,r9
   18bd0:	503fee26 	beq	r10,zero,18b8c <__alt_data_end+0xfc018b8c>
   18bd4:	00800044 	movi	r2,1
   18bd8:	f800283a 	ret
   18bdc:	0005883a 	mov	r2,zero
   18be0:	f800283a 	ret

00018be4 <__gedf2>:
   18be4:	2804d53a 	srli	r2,r5,20
   18be8:	3806d53a 	srli	r3,r7,20
   18bec:	02000434 	movhi	r8,16
   18bf0:	423fffc4 	addi	r8,r8,-1
   18bf4:	1081ffcc 	andi	r2,r2,2047
   18bf8:	0241ffc4 	movi	r9,2047
   18bfc:	2a14703a 	and	r10,r5,r8
   18c00:	18c1ffcc 	andi	r3,r3,2047
   18c04:	3a10703a 	and	r8,r7,r8
   18c08:	280ad7fa 	srli	r5,r5,31
   18c0c:	380ed7fa 	srli	r7,r7,31
   18c10:	12401d26 	beq	r2,r9,18c88 <__gedf2+0xa4>
   18c14:	0241ffc4 	movi	r9,2047
   18c18:	1a401226 	beq	r3,r9,18c64 <__gedf2+0x80>
   18c1c:	1000081e 	bne	r2,zero,18c40 <__gedf2+0x5c>
   18c20:	2296b03a 	or	r11,r4,r10
   18c24:	5813003a 	cmpeq	r9,r11,zero
   18c28:	1800091e 	bne	r3,zero,18c50 <__gedf2+0x6c>
   18c2c:	3218b03a 	or	r12,r6,r8
   18c30:	6000071e 	bne	r12,zero,18c50 <__gedf2+0x6c>
   18c34:	0005883a 	mov	r2,zero
   18c38:	5800101e 	bne	r11,zero,18c7c <__gedf2+0x98>
   18c3c:	f800283a 	ret
   18c40:	18000c1e 	bne	r3,zero,18c74 <__gedf2+0x90>
   18c44:	3212b03a 	or	r9,r6,r8
   18c48:	48000c26 	beq	r9,zero,18c7c <__gedf2+0x98>
   18c4c:	0013883a 	mov	r9,zero
   18c50:	39c03fcc 	andi	r7,r7,255
   18c54:	48000826 	beq	r9,zero,18c78 <__gedf2+0x94>
   18c58:	38000926 	beq	r7,zero,18c80 <__gedf2+0x9c>
   18c5c:	00800044 	movi	r2,1
   18c60:	f800283a 	ret
   18c64:	3212b03a 	or	r9,r6,r8
   18c68:	483fec26 	beq	r9,zero,18c1c <__alt_data_end+0xfc018c1c>
   18c6c:	00bfff84 	movi	r2,-2
   18c70:	f800283a 	ret
   18c74:	39c03fcc 	andi	r7,r7,255
   18c78:	29c00626 	beq	r5,r7,18c94 <__gedf2+0xb0>
   18c7c:	283ff726 	beq	r5,zero,18c5c <__alt_data_end+0xfc018c5c>
   18c80:	00bfffc4 	movi	r2,-1
   18c84:	f800283a 	ret
   18c88:	2292b03a 	or	r9,r4,r10
   18c8c:	483fe126 	beq	r9,zero,18c14 <__alt_data_end+0xfc018c14>
   18c90:	003ff606 	br	18c6c <__alt_data_end+0xfc018c6c>
   18c94:	18bff916 	blt	r3,r2,18c7c <__alt_data_end+0xfc018c7c>
   18c98:	10c00316 	blt	r2,r3,18ca8 <__gedf2+0xc4>
   18c9c:	42bff736 	bltu	r8,r10,18c7c <__alt_data_end+0xfc018c7c>
   18ca0:	52000326 	beq	r10,r8,18cb0 <__gedf2+0xcc>
   18ca4:	5200042e 	bgeu	r10,r8,18cb8 <__gedf2+0xd4>
   18ca8:	283fec1e 	bne	r5,zero,18c5c <__alt_data_end+0xfc018c5c>
   18cac:	003ff406 	br	18c80 <__alt_data_end+0xfc018c80>
   18cb0:	313ff236 	bltu	r6,r4,18c7c <__alt_data_end+0xfc018c7c>
   18cb4:	21bffc36 	bltu	r4,r6,18ca8 <__alt_data_end+0xfc018ca8>
   18cb8:	0005883a 	mov	r2,zero
   18cbc:	f800283a 	ret

00018cc0 <__ledf2>:
   18cc0:	2804d53a 	srli	r2,r5,20
   18cc4:	3810d53a 	srli	r8,r7,20
   18cc8:	00c00434 	movhi	r3,16
   18ccc:	18ffffc4 	addi	r3,r3,-1
   18cd0:	1081ffcc 	andi	r2,r2,2047
   18cd4:	0241ffc4 	movi	r9,2047
   18cd8:	28d4703a 	and	r10,r5,r3
   18cdc:	4201ffcc 	andi	r8,r8,2047
   18ce0:	38c6703a 	and	r3,r7,r3
   18ce4:	280ad7fa 	srli	r5,r5,31
   18ce8:	380ed7fa 	srli	r7,r7,31
   18cec:	12401f26 	beq	r2,r9,18d6c <__ledf2+0xac>
   18cf0:	0241ffc4 	movi	r9,2047
   18cf4:	42401426 	beq	r8,r9,18d48 <__ledf2+0x88>
   18cf8:	1000091e 	bne	r2,zero,18d20 <__ledf2+0x60>
   18cfc:	2296b03a 	or	r11,r4,r10
   18d00:	5813003a 	cmpeq	r9,r11,zero
   18d04:	29403fcc 	andi	r5,r5,255
   18d08:	40000a1e 	bne	r8,zero,18d34 <__ledf2+0x74>
   18d0c:	30d8b03a 	or	r12,r6,r3
   18d10:	6000081e 	bne	r12,zero,18d34 <__ledf2+0x74>
   18d14:	0005883a 	mov	r2,zero
   18d18:	5800111e 	bne	r11,zero,18d60 <__ledf2+0xa0>
   18d1c:	f800283a 	ret
   18d20:	29403fcc 	andi	r5,r5,255
   18d24:	40000c1e 	bne	r8,zero,18d58 <__ledf2+0x98>
   18d28:	30d2b03a 	or	r9,r6,r3
   18d2c:	48000c26 	beq	r9,zero,18d60 <__ledf2+0xa0>
   18d30:	0013883a 	mov	r9,zero
   18d34:	39c03fcc 	andi	r7,r7,255
   18d38:	48000826 	beq	r9,zero,18d5c <__ledf2+0x9c>
   18d3c:	38001126 	beq	r7,zero,18d84 <__ledf2+0xc4>
   18d40:	00800044 	movi	r2,1
   18d44:	f800283a 	ret
   18d48:	30d2b03a 	or	r9,r6,r3
   18d4c:	483fea26 	beq	r9,zero,18cf8 <__alt_data_end+0xfc018cf8>
   18d50:	00800084 	movi	r2,2
   18d54:	f800283a 	ret
   18d58:	39c03fcc 	andi	r7,r7,255
   18d5c:	39400726 	beq	r7,r5,18d7c <__ledf2+0xbc>
   18d60:	2800081e 	bne	r5,zero,18d84 <__ledf2+0xc4>
   18d64:	00800044 	movi	r2,1
   18d68:	f800283a 	ret
   18d6c:	2292b03a 	or	r9,r4,r10
   18d70:	483fdf26 	beq	r9,zero,18cf0 <__alt_data_end+0xfc018cf0>
   18d74:	00800084 	movi	r2,2
   18d78:	f800283a 	ret
   18d7c:	4080030e 	bge	r8,r2,18d8c <__ledf2+0xcc>
   18d80:	383fef26 	beq	r7,zero,18d40 <__alt_data_end+0xfc018d40>
   18d84:	00bfffc4 	movi	r2,-1
   18d88:	f800283a 	ret
   18d8c:	123feb16 	blt	r2,r8,18d3c <__alt_data_end+0xfc018d3c>
   18d90:	1abff336 	bltu	r3,r10,18d60 <__alt_data_end+0xfc018d60>
   18d94:	50c00326 	beq	r10,r3,18da4 <__ledf2+0xe4>
   18d98:	50c0042e 	bgeu	r10,r3,18dac <__ledf2+0xec>
   18d9c:	283fe81e 	bne	r5,zero,18d40 <__alt_data_end+0xfc018d40>
   18da0:	003ff806 	br	18d84 <__alt_data_end+0xfc018d84>
   18da4:	313fee36 	bltu	r6,r4,18d60 <__alt_data_end+0xfc018d60>
   18da8:	21bffc36 	bltu	r4,r6,18d9c <__alt_data_end+0xfc018d9c>
   18dac:	0005883a 	mov	r2,zero
   18db0:	f800283a 	ret

00018db4 <__muldf3>:
   18db4:	defff304 	addi	sp,sp,-52
   18db8:	2804d53a 	srli	r2,r5,20
   18dbc:	dd800915 	stw	r22,36(sp)
   18dc0:	282cd7fa 	srli	r22,r5,31
   18dc4:	dc000315 	stw	r16,12(sp)
   18dc8:	04000434 	movhi	r16,16
   18dcc:	dd400815 	stw	r21,32(sp)
   18dd0:	dc800515 	stw	r18,20(sp)
   18dd4:	843fffc4 	addi	r16,r16,-1
   18dd8:	dfc00c15 	stw	ra,48(sp)
   18ddc:	df000b15 	stw	fp,44(sp)
   18de0:	ddc00a15 	stw	r23,40(sp)
   18de4:	dd000715 	stw	r20,28(sp)
   18de8:	dcc00615 	stw	r19,24(sp)
   18dec:	dc400415 	stw	r17,16(sp)
   18df0:	1481ffcc 	andi	r18,r2,2047
   18df4:	2c20703a 	and	r16,r5,r16
   18df8:	b02b883a 	mov	r21,r22
   18dfc:	b2403fcc 	andi	r9,r22,255
   18e00:	90006026 	beq	r18,zero,18f84 <__muldf3+0x1d0>
   18e04:	0081ffc4 	movi	r2,2047
   18e08:	2029883a 	mov	r20,r4
   18e0c:	90803626 	beq	r18,r2,18ee8 <__muldf3+0x134>
   18e10:	80800434 	orhi	r2,r16,16
   18e14:	100490fa 	slli	r2,r2,3
   18e18:	2020d77a 	srli	r16,r4,29
   18e1c:	202890fa 	slli	r20,r4,3
   18e20:	94bf0044 	addi	r18,r18,-1023
   18e24:	80a0b03a 	or	r16,r16,r2
   18e28:	0027883a 	mov	r19,zero
   18e2c:	0039883a 	mov	fp,zero
   18e30:	3804d53a 	srli	r2,r7,20
   18e34:	382ed7fa 	srli	r23,r7,31
   18e38:	04400434 	movhi	r17,16
   18e3c:	8c7fffc4 	addi	r17,r17,-1
   18e40:	1081ffcc 	andi	r2,r2,2047
   18e44:	3011883a 	mov	r8,r6
   18e48:	3c62703a 	and	r17,r7,r17
   18e4c:	ba803fcc 	andi	r10,r23,255
   18e50:	10006d26 	beq	r2,zero,19008 <__muldf3+0x254>
   18e54:	00c1ffc4 	movi	r3,2047
   18e58:	10c06526 	beq	r2,r3,18ff0 <__muldf3+0x23c>
   18e5c:	88c00434 	orhi	r3,r17,16
   18e60:	180690fa 	slli	r3,r3,3
   18e64:	3022d77a 	srli	r17,r6,29
   18e68:	301090fa 	slli	r8,r6,3
   18e6c:	10bf0044 	addi	r2,r2,-1023
   18e70:	88e2b03a 	or	r17,r17,r3
   18e74:	000b883a 	mov	r5,zero
   18e78:	9085883a 	add	r2,r18,r2
   18e7c:	2cc8b03a 	or	r4,r5,r19
   18e80:	00c003c4 	movi	r3,15
   18e84:	bdacf03a 	xor	r22,r23,r22
   18e88:	12c00044 	addi	r11,r2,1
   18e8c:	19009936 	bltu	r3,r4,190f4 <__muldf3+0x340>
   18e90:	200890ba 	slli	r4,r4,2
   18e94:	00c000b4 	movhi	r3,2
   18e98:	18e3aa04 	addi	r3,r3,-29016
   18e9c:	20c9883a 	add	r4,r4,r3
   18ea0:	20c00017 	ldw	r3,0(r4)
   18ea4:	1800683a 	jmp	r3
   18ea8:	000190f4 	movhi	zero,1603
   18eac:	00018f08 	cmpgei	zero,zero,1596
   18eb0:	00018f08 	cmpgei	zero,zero,1596
   18eb4:	00018f04 	movi	zero,1596
   18eb8:	000190d0 	cmplti	zero,zero,1603
   18ebc:	000190d0 	cmplti	zero,zero,1603
   18ec0:	000190b8 	rdprs	zero,zero,1602
   18ec4:	00018f04 	movi	zero,1596
   18ec8:	000190d0 	cmplti	zero,zero,1603
   18ecc:	000190b8 	rdprs	zero,zero,1602
   18ed0:	000190d0 	cmplti	zero,zero,1603
   18ed4:	00018f04 	movi	zero,1596
   18ed8:	000190e0 	cmpeqi	zero,zero,1603
   18edc:	000190e0 	cmpeqi	zero,zero,1603
   18ee0:	000190e0 	cmpeqi	zero,zero,1603
   18ee4:	000192fc 	xorhi	zero,zero,1611
   18ee8:	2404b03a 	or	r2,r4,r16
   18eec:	10006f1e 	bne	r2,zero,190ac <__muldf3+0x2f8>
   18ef0:	04c00204 	movi	r19,8
   18ef4:	0021883a 	mov	r16,zero
   18ef8:	0029883a 	mov	r20,zero
   18efc:	07000084 	movi	fp,2
   18f00:	003fcb06 	br	18e30 <__alt_data_end+0xfc018e30>
   18f04:	502d883a 	mov	r22,r10
   18f08:	00800084 	movi	r2,2
   18f0c:	28805726 	beq	r5,r2,1906c <__muldf3+0x2b8>
   18f10:	008000c4 	movi	r2,3
   18f14:	28816626 	beq	r5,r2,194b0 <__muldf3+0x6fc>
   18f18:	00800044 	movi	r2,1
   18f1c:	2881411e 	bne	r5,r2,19424 <__muldf3+0x670>
   18f20:	b02b883a 	mov	r21,r22
   18f24:	0005883a 	mov	r2,zero
   18f28:	000b883a 	mov	r5,zero
   18f2c:	0029883a 	mov	r20,zero
   18f30:	1004953a 	slli	r2,r2,20
   18f34:	a8c03fcc 	andi	r3,r21,255
   18f38:	04400434 	movhi	r17,16
   18f3c:	8c7fffc4 	addi	r17,r17,-1
   18f40:	180697fa 	slli	r3,r3,31
   18f44:	2c4a703a 	and	r5,r5,r17
   18f48:	288ab03a 	or	r5,r5,r2
   18f4c:	28c6b03a 	or	r3,r5,r3
   18f50:	a005883a 	mov	r2,r20
   18f54:	dfc00c17 	ldw	ra,48(sp)
   18f58:	df000b17 	ldw	fp,44(sp)
   18f5c:	ddc00a17 	ldw	r23,40(sp)
   18f60:	dd800917 	ldw	r22,36(sp)
   18f64:	dd400817 	ldw	r21,32(sp)
   18f68:	dd000717 	ldw	r20,28(sp)
   18f6c:	dcc00617 	ldw	r19,24(sp)
   18f70:	dc800517 	ldw	r18,20(sp)
   18f74:	dc400417 	ldw	r17,16(sp)
   18f78:	dc000317 	ldw	r16,12(sp)
   18f7c:	dec00d04 	addi	sp,sp,52
   18f80:	f800283a 	ret
   18f84:	2404b03a 	or	r2,r4,r16
   18f88:	2027883a 	mov	r19,r4
   18f8c:	10004226 	beq	r2,zero,19098 <__muldf3+0x2e4>
   18f90:	8000fc26 	beq	r16,zero,19384 <__muldf3+0x5d0>
   18f94:	8009883a 	mov	r4,r16
   18f98:	d9800215 	stw	r6,8(sp)
   18f9c:	d9c00015 	stw	r7,0(sp)
   18fa0:	da400115 	stw	r9,4(sp)
   18fa4:	001a1740 	call	1a174 <__clzsi2>
   18fa8:	d9800217 	ldw	r6,8(sp)
   18fac:	d9c00017 	ldw	r7,0(sp)
   18fb0:	da400117 	ldw	r9,4(sp)
   18fb4:	113ffd44 	addi	r4,r2,-11
   18fb8:	00c00704 	movi	r3,28
   18fbc:	1900ed16 	blt	r3,r4,19374 <__muldf3+0x5c0>
   18fc0:	00c00744 	movi	r3,29
   18fc4:	147ffe04 	addi	r17,r2,-8
   18fc8:	1907c83a 	sub	r3,r3,r4
   18fcc:	8460983a 	sll	r16,r16,r17
   18fd0:	98c6d83a 	srl	r3,r19,r3
   18fd4:	9c68983a 	sll	r20,r19,r17
   18fd8:	1c20b03a 	or	r16,r3,r16
   18fdc:	1080fcc4 	addi	r2,r2,1011
   18fe0:	00a5c83a 	sub	r18,zero,r2
   18fe4:	0027883a 	mov	r19,zero
   18fe8:	0039883a 	mov	fp,zero
   18fec:	003f9006 	br	18e30 <__alt_data_end+0xfc018e30>
   18ff0:	3446b03a 	or	r3,r6,r17
   18ff4:	1800261e 	bne	r3,zero,19090 <__muldf3+0x2dc>
   18ff8:	0023883a 	mov	r17,zero
   18ffc:	0011883a 	mov	r8,zero
   19000:	01400084 	movi	r5,2
   19004:	003f9c06 	br	18e78 <__alt_data_end+0xfc018e78>
   19008:	3446b03a 	or	r3,r6,r17
   1900c:	18001c26 	beq	r3,zero,19080 <__muldf3+0x2cc>
   19010:	8800ce26 	beq	r17,zero,1934c <__muldf3+0x598>
   19014:	8809883a 	mov	r4,r17
   19018:	d9800215 	stw	r6,8(sp)
   1901c:	da400115 	stw	r9,4(sp)
   19020:	da800015 	stw	r10,0(sp)
   19024:	001a1740 	call	1a174 <__clzsi2>
   19028:	d9800217 	ldw	r6,8(sp)
   1902c:	da400117 	ldw	r9,4(sp)
   19030:	da800017 	ldw	r10,0(sp)
   19034:	113ffd44 	addi	r4,r2,-11
   19038:	00c00704 	movi	r3,28
   1903c:	1900bf16 	blt	r3,r4,1933c <__muldf3+0x588>
   19040:	00c00744 	movi	r3,29
   19044:	123ffe04 	addi	r8,r2,-8
   19048:	1907c83a 	sub	r3,r3,r4
   1904c:	8a22983a 	sll	r17,r17,r8
   19050:	30c6d83a 	srl	r3,r6,r3
   19054:	3210983a 	sll	r8,r6,r8
   19058:	1c62b03a 	or	r17,r3,r17
   1905c:	1080fcc4 	addi	r2,r2,1011
   19060:	0085c83a 	sub	r2,zero,r2
   19064:	000b883a 	mov	r5,zero
   19068:	003f8306 	br	18e78 <__alt_data_end+0xfc018e78>
   1906c:	b02b883a 	mov	r21,r22
   19070:	0081ffc4 	movi	r2,2047
   19074:	000b883a 	mov	r5,zero
   19078:	0029883a 	mov	r20,zero
   1907c:	003fac06 	br	18f30 <__alt_data_end+0xfc018f30>
   19080:	0023883a 	mov	r17,zero
   19084:	0011883a 	mov	r8,zero
   19088:	01400044 	movi	r5,1
   1908c:	003f7a06 	br	18e78 <__alt_data_end+0xfc018e78>
   19090:	014000c4 	movi	r5,3
   19094:	003f7806 	br	18e78 <__alt_data_end+0xfc018e78>
   19098:	04c00104 	movi	r19,4
   1909c:	0021883a 	mov	r16,zero
   190a0:	0029883a 	mov	r20,zero
   190a4:	07000044 	movi	fp,1
   190a8:	003f6106 	br	18e30 <__alt_data_end+0xfc018e30>
   190ac:	04c00304 	movi	r19,12
   190b0:	070000c4 	movi	fp,3
   190b4:	003f5e06 	br	18e30 <__alt_data_end+0xfc018e30>
   190b8:	01400434 	movhi	r5,16
   190bc:	002b883a 	mov	r21,zero
   190c0:	297fffc4 	addi	r5,r5,-1
   190c4:	053fffc4 	movi	r20,-1
   190c8:	0081ffc4 	movi	r2,2047
   190cc:	003f9806 	br	18f30 <__alt_data_end+0xfc018f30>
   190d0:	8023883a 	mov	r17,r16
   190d4:	a011883a 	mov	r8,r20
   190d8:	e00b883a 	mov	r5,fp
   190dc:	003f8a06 	br	18f08 <__alt_data_end+0xfc018f08>
   190e0:	8023883a 	mov	r17,r16
   190e4:	a011883a 	mov	r8,r20
   190e8:	482d883a 	mov	r22,r9
   190ec:	e00b883a 	mov	r5,fp
   190f0:	003f8506 	br	18f08 <__alt_data_end+0xfc018f08>
   190f4:	a00ad43a 	srli	r5,r20,16
   190f8:	401ad43a 	srli	r13,r8,16
   190fc:	a53fffcc 	andi	r20,r20,65535
   19100:	423fffcc 	andi	r8,r8,65535
   19104:	4519383a 	mul	r12,r8,r20
   19108:	4147383a 	mul	r3,r8,r5
   1910c:	6d09383a 	mul	r4,r13,r20
   19110:	600cd43a 	srli	r6,r12,16
   19114:	2b5d383a 	mul	r14,r5,r13
   19118:	20c9883a 	add	r4,r4,r3
   1911c:	310d883a 	add	r6,r6,r4
   19120:	30c0022e 	bgeu	r6,r3,1912c <__muldf3+0x378>
   19124:	00c00074 	movhi	r3,1
   19128:	70dd883a 	add	r14,r14,r3
   1912c:	8826d43a 	srli	r19,r17,16
   19130:	8bffffcc 	andi	r15,r17,65535
   19134:	7d23383a 	mul	r17,r15,r20
   19138:	7949383a 	mul	r4,r15,r5
   1913c:	9d29383a 	mul	r20,r19,r20
   19140:	8814d43a 	srli	r10,r17,16
   19144:	3012943a 	slli	r9,r6,16
   19148:	a129883a 	add	r20,r20,r4
   1914c:	633fffcc 	andi	r12,r12,65535
   19150:	5515883a 	add	r10,r10,r20
   19154:	3006d43a 	srli	r3,r6,16
   19158:	4b13883a 	add	r9,r9,r12
   1915c:	2ccb383a 	mul	r5,r5,r19
   19160:	5100022e 	bgeu	r10,r4,1916c <__muldf3+0x3b8>
   19164:	01000074 	movhi	r4,1
   19168:	290b883a 	add	r5,r5,r4
   1916c:	802ad43a 	srli	r21,r16,16
   19170:	843fffcc 	andi	r16,r16,65535
   19174:	440d383a 	mul	r6,r8,r16
   19178:	4565383a 	mul	r18,r8,r21
   1917c:	8349383a 	mul	r4,r16,r13
   19180:	500e943a 	slli	r7,r10,16
   19184:	3010d43a 	srli	r8,r6,16
   19188:	5028d43a 	srli	r20,r10,16
   1918c:	2489883a 	add	r4,r4,r18
   19190:	8abfffcc 	andi	r10,r17,65535
   19194:	3a95883a 	add	r10,r7,r10
   19198:	4119883a 	add	r12,r8,r4
   1919c:	a169883a 	add	r20,r20,r5
   191a0:	1a87883a 	add	r3,r3,r10
   191a4:	6d5b383a 	mul	r13,r13,r21
   191a8:	6480022e 	bgeu	r12,r18,191b4 <__muldf3+0x400>
   191ac:	01000074 	movhi	r4,1
   191b0:	691b883a 	add	r13,r13,r4
   191b4:	7c25383a 	mul	r18,r15,r16
   191b8:	7d4b383a 	mul	r5,r15,r21
   191bc:	84cf383a 	mul	r7,r16,r19
   191c0:	901ed43a 	srli	r15,r18,16
   191c4:	6008d43a 	srli	r4,r12,16
   191c8:	6010943a 	slli	r8,r12,16
   191cc:	394f883a 	add	r7,r7,r5
   191d0:	333fffcc 	andi	r12,r6,65535
   191d4:	79df883a 	add	r15,r15,r7
   191d8:	235b883a 	add	r13,r4,r13
   191dc:	9d63383a 	mul	r17,r19,r21
   191e0:	4309883a 	add	r4,r8,r12
   191e4:	7940022e 	bgeu	r15,r5,191f0 <__muldf3+0x43c>
   191e8:	01400074 	movhi	r5,1
   191ec:	8963883a 	add	r17,r17,r5
   191f0:	780a943a 	slli	r5,r15,16
   191f4:	91bfffcc 	andi	r6,r18,65535
   191f8:	70c7883a 	add	r3,r14,r3
   191fc:	298d883a 	add	r6,r5,r6
   19200:	1a8f803a 	cmpltu	r7,r3,r10
   19204:	350b883a 	add	r5,r6,r20
   19208:	20c7883a 	add	r3,r4,r3
   1920c:	3955883a 	add	r10,r7,r5
   19210:	1909803a 	cmpltu	r4,r3,r4
   19214:	6a91883a 	add	r8,r13,r10
   19218:	780cd43a 	srli	r6,r15,16
   1921c:	2219883a 	add	r12,r4,r8
   19220:	2d0b803a 	cmpltu	r5,r5,r20
   19224:	51cf803a 	cmpltu	r7,r10,r7
   19228:	29ceb03a 	or	r7,r5,r7
   1922c:	4351803a 	cmpltu	r8,r8,r13
   19230:	610b803a 	cmpltu	r5,r12,r4
   19234:	4148b03a 	or	r4,r8,r5
   19238:	398f883a 	add	r7,r7,r6
   1923c:	3909883a 	add	r4,r7,r4
   19240:	1810927a 	slli	r8,r3,9
   19244:	2449883a 	add	r4,r4,r17
   19248:	2008927a 	slli	r4,r4,9
   1924c:	6022d5fa 	srli	r17,r12,23
   19250:	1806d5fa 	srli	r3,r3,23
   19254:	4252b03a 	or	r9,r8,r9
   19258:	600a927a 	slli	r5,r12,9
   1925c:	4810c03a 	cmpne	r8,r9,zero
   19260:	2462b03a 	or	r17,r4,r17
   19264:	40c6b03a 	or	r3,r8,r3
   19268:	8900402c 	andhi	r4,r17,256
   1926c:	1950b03a 	or	r8,r3,r5
   19270:	20000726 	beq	r4,zero,19290 <__muldf3+0x4dc>
   19274:	4006d07a 	srli	r3,r8,1
   19278:	880497fa 	slli	r2,r17,31
   1927c:	4200004c 	andi	r8,r8,1
   19280:	8822d07a 	srli	r17,r17,1
   19284:	1a10b03a 	or	r8,r3,r8
   19288:	1210b03a 	or	r8,r2,r8
   1928c:	5805883a 	mov	r2,r11
   19290:	1140ffc4 	addi	r5,r2,1023
   19294:	0140440e 	bge	zero,r5,193a8 <__muldf3+0x5f4>
   19298:	40c001cc 	andi	r3,r8,7
   1929c:	18000726 	beq	r3,zero,192bc <__muldf3+0x508>
   192a0:	40c003cc 	andi	r3,r8,15
   192a4:	01000104 	movi	r4,4
   192a8:	19000426 	beq	r3,r4,192bc <__muldf3+0x508>
   192ac:	4107883a 	add	r3,r8,r4
   192b0:	1a11803a 	cmpltu	r8,r3,r8
   192b4:	8a23883a 	add	r17,r17,r8
   192b8:	1811883a 	mov	r8,r3
   192bc:	88c0402c 	andhi	r3,r17,256
   192c0:	18000426 	beq	r3,zero,192d4 <__muldf3+0x520>
   192c4:	11410004 	addi	r5,r2,1024
   192c8:	00bfc034 	movhi	r2,65280
   192cc:	10bfffc4 	addi	r2,r2,-1
   192d0:	88a2703a 	and	r17,r17,r2
   192d4:	0081ff84 	movi	r2,2046
   192d8:	117f6416 	blt	r2,r5,1906c <__alt_data_end+0xfc01906c>
   192dc:	8828977a 	slli	r20,r17,29
   192e0:	4010d0fa 	srli	r8,r8,3
   192e4:	8822927a 	slli	r17,r17,9
   192e8:	2881ffcc 	andi	r2,r5,2047
   192ec:	a228b03a 	or	r20,r20,r8
   192f0:	880ad33a 	srli	r5,r17,12
   192f4:	b02b883a 	mov	r21,r22
   192f8:	003f0d06 	br	18f30 <__alt_data_end+0xfc018f30>
   192fc:	8080022c 	andhi	r2,r16,8
   19300:	10000926 	beq	r2,zero,19328 <__muldf3+0x574>
   19304:	8880022c 	andhi	r2,r17,8
   19308:	1000071e 	bne	r2,zero,19328 <__muldf3+0x574>
   1930c:	00800434 	movhi	r2,16
   19310:	89400234 	orhi	r5,r17,8
   19314:	10bfffc4 	addi	r2,r2,-1
   19318:	b82b883a 	mov	r21,r23
   1931c:	288a703a 	and	r5,r5,r2
   19320:	4029883a 	mov	r20,r8
   19324:	003f6806 	br	190c8 <__alt_data_end+0xfc0190c8>
   19328:	00800434 	movhi	r2,16
   1932c:	81400234 	orhi	r5,r16,8
   19330:	10bfffc4 	addi	r2,r2,-1
   19334:	288a703a 	and	r5,r5,r2
   19338:	003f6306 	br	190c8 <__alt_data_end+0xfc0190c8>
   1933c:	147ff604 	addi	r17,r2,-40
   19340:	3462983a 	sll	r17,r6,r17
   19344:	0011883a 	mov	r8,zero
   19348:	003f4406 	br	1905c <__alt_data_end+0xfc01905c>
   1934c:	3009883a 	mov	r4,r6
   19350:	d9800215 	stw	r6,8(sp)
   19354:	da400115 	stw	r9,4(sp)
   19358:	da800015 	stw	r10,0(sp)
   1935c:	001a1740 	call	1a174 <__clzsi2>
   19360:	10800804 	addi	r2,r2,32
   19364:	da800017 	ldw	r10,0(sp)
   19368:	da400117 	ldw	r9,4(sp)
   1936c:	d9800217 	ldw	r6,8(sp)
   19370:	003f3006 	br	19034 <__alt_data_end+0xfc019034>
   19374:	143ff604 	addi	r16,r2,-40
   19378:	9c20983a 	sll	r16,r19,r16
   1937c:	0029883a 	mov	r20,zero
   19380:	003f1606 	br	18fdc <__alt_data_end+0xfc018fdc>
   19384:	d9800215 	stw	r6,8(sp)
   19388:	d9c00015 	stw	r7,0(sp)
   1938c:	da400115 	stw	r9,4(sp)
   19390:	001a1740 	call	1a174 <__clzsi2>
   19394:	10800804 	addi	r2,r2,32
   19398:	da400117 	ldw	r9,4(sp)
   1939c:	d9c00017 	ldw	r7,0(sp)
   193a0:	d9800217 	ldw	r6,8(sp)
   193a4:	003f0306 	br	18fb4 <__alt_data_end+0xfc018fb4>
   193a8:	00c00044 	movi	r3,1
   193ac:	1947c83a 	sub	r3,r3,r5
   193b0:	00800e04 	movi	r2,56
   193b4:	10feda16 	blt	r2,r3,18f20 <__alt_data_end+0xfc018f20>
   193b8:	008007c4 	movi	r2,31
   193bc:	10c01b16 	blt	r2,r3,1942c <__muldf3+0x678>
   193c0:	00800804 	movi	r2,32
   193c4:	10c5c83a 	sub	r2,r2,r3
   193c8:	888a983a 	sll	r5,r17,r2
   193cc:	40c8d83a 	srl	r4,r8,r3
   193d0:	4084983a 	sll	r2,r8,r2
   193d4:	88e2d83a 	srl	r17,r17,r3
   193d8:	2906b03a 	or	r3,r5,r4
   193dc:	1004c03a 	cmpne	r2,r2,zero
   193e0:	1886b03a 	or	r3,r3,r2
   193e4:	188001cc 	andi	r2,r3,7
   193e8:	10000726 	beq	r2,zero,19408 <__muldf3+0x654>
   193ec:	188003cc 	andi	r2,r3,15
   193f0:	01000104 	movi	r4,4
   193f4:	11000426 	beq	r2,r4,19408 <__muldf3+0x654>
   193f8:	1805883a 	mov	r2,r3
   193fc:	10c00104 	addi	r3,r2,4
   19400:	1885803a 	cmpltu	r2,r3,r2
   19404:	88a3883a 	add	r17,r17,r2
   19408:	8880202c 	andhi	r2,r17,128
   1940c:	10001c26 	beq	r2,zero,19480 <__muldf3+0x6cc>
   19410:	b02b883a 	mov	r21,r22
   19414:	00800044 	movi	r2,1
   19418:	000b883a 	mov	r5,zero
   1941c:	0029883a 	mov	r20,zero
   19420:	003ec306 	br	18f30 <__alt_data_end+0xfc018f30>
   19424:	5805883a 	mov	r2,r11
   19428:	003f9906 	br	19290 <__alt_data_end+0xfc019290>
   1942c:	00bff844 	movi	r2,-31
   19430:	1145c83a 	sub	r2,r2,r5
   19434:	8888d83a 	srl	r4,r17,r2
   19438:	00800804 	movi	r2,32
   1943c:	18801a26 	beq	r3,r2,194a8 <__muldf3+0x6f4>
   19440:	00801004 	movi	r2,64
   19444:	10c5c83a 	sub	r2,r2,r3
   19448:	8884983a 	sll	r2,r17,r2
   1944c:	1204b03a 	or	r2,r2,r8
   19450:	1004c03a 	cmpne	r2,r2,zero
   19454:	2084b03a 	or	r2,r4,r2
   19458:	144001cc 	andi	r17,r2,7
   1945c:	88000d1e 	bne	r17,zero,19494 <__muldf3+0x6e0>
   19460:	000b883a 	mov	r5,zero
   19464:	1028d0fa 	srli	r20,r2,3
   19468:	b02b883a 	mov	r21,r22
   1946c:	0005883a 	mov	r2,zero
   19470:	a468b03a 	or	r20,r20,r17
   19474:	003eae06 	br	18f30 <__alt_data_end+0xfc018f30>
   19478:	1007883a 	mov	r3,r2
   1947c:	0023883a 	mov	r17,zero
   19480:	880a927a 	slli	r5,r17,9
   19484:	1805883a 	mov	r2,r3
   19488:	8822977a 	slli	r17,r17,29
   1948c:	280ad33a 	srli	r5,r5,12
   19490:	003ff406 	br	19464 <__alt_data_end+0xfc019464>
   19494:	10c003cc 	andi	r3,r2,15
   19498:	01000104 	movi	r4,4
   1949c:	193ff626 	beq	r3,r4,19478 <__alt_data_end+0xfc019478>
   194a0:	0023883a 	mov	r17,zero
   194a4:	003fd506 	br	193fc <__alt_data_end+0xfc0193fc>
   194a8:	0005883a 	mov	r2,zero
   194ac:	003fe706 	br	1944c <__alt_data_end+0xfc01944c>
   194b0:	00800434 	movhi	r2,16
   194b4:	89400234 	orhi	r5,r17,8
   194b8:	10bfffc4 	addi	r2,r2,-1
   194bc:	b02b883a 	mov	r21,r22
   194c0:	288a703a 	and	r5,r5,r2
   194c4:	4029883a 	mov	r20,r8
   194c8:	003eff06 	br	190c8 <__alt_data_end+0xfc0190c8>

000194cc <__subdf3>:
   194cc:	02000434 	movhi	r8,16
   194d0:	423fffc4 	addi	r8,r8,-1
   194d4:	defffb04 	addi	sp,sp,-20
   194d8:	2a14703a 	and	r10,r5,r8
   194dc:	3812d53a 	srli	r9,r7,20
   194e0:	3a10703a 	and	r8,r7,r8
   194e4:	2006d77a 	srli	r3,r4,29
   194e8:	3004d77a 	srli	r2,r6,29
   194ec:	dc000015 	stw	r16,0(sp)
   194f0:	501490fa 	slli	r10,r10,3
   194f4:	2820d53a 	srli	r16,r5,20
   194f8:	401090fa 	slli	r8,r8,3
   194fc:	dc800215 	stw	r18,8(sp)
   19500:	dc400115 	stw	r17,4(sp)
   19504:	dfc00415 	stw	ra,16(sp)
   19508:	202290fa 	slli	r17,r4,3
   1950c:	dcc00315 	stw	r19,12(sp)
   19510:	4a41ffcc 	andi	r9,r9,2047
   19514:	0101ffc4 	movi	r4,2047
   19518:	2824d7fa 	srli	r18,r5,31
   1951c:	8401ffcc 	andi	r16,r16,2047
   19520:	50c6b03a 	or	r3,r10,r3
   19524:	380ed7fa 	srli	r7,r7,31
   19528:	408ab03a 	or	r5,r8,r2
   1952c:	300c90fa 	slli	r6,r6,3
   19530:	49009626 	beq	r9,r4,1978c <__subdf3+0x2c0>
   19534:	39c0005c 	xori	r7,r7,1
   19538:	8245c83a 	sub	r2,r16,r9
   1953c:	3c807426 	beq	r7,r18,19710 <__subdf3+0x244>
   19540:	0080af0e 	bge	zero,r2,19800 <__subdf3+0x334>
   19544:	48002a1e 	bne	r9,zero,195f0 <__subdf3+0x124>
   19548:	2988b03a 	or	r4,r5,r6
   1954c:	20009a1e 	bne	r4,zero,197b8 <__subdf3+0x2ec>
   19550:	888001cc 	andi	r2,r17,7
   19554:	10000726 	beq	r2,zero,19574 <__subdf3+0xa8>
   19558:	888003cc 	andi	r2,r17,15
   1955c:	01000104 	movi	r4,4
   19560:	11000426 	beq	r2,r4,19574 <__subdf3+0xa8>
   19564:	890b883a 	add	r5,r17,r4
   19568:	2c63803a 	cmpltu	r17,r5,r17
   1956c:	1c47883a 	add	r3,r3,r17
   19570:	2823883a 	mov	r17,r5
   19574:	1880202c 	andhi	r2,r3,128
   19578:	10005926 	beq	r2,zero,196e0 <__subdf3+0x214>
   1957c:	84000044 	addi	r16,r16,1
   19580:	0081ffc4 	movi	r2,2047
   19584:	8080be26 	beq	r16,r2,19880 <__subdf3+0x3b4>
   19588:	017fe034 	movhi	r5,65408
   1958c:	297fffc4 	addi	r5,r5,-1
   19590:	1946703a 	and	r3,r3,r5
   19594:	1804977a 	slli	r2,r3,29
   19598:	1806927a 	slli	r3,r3,9
   1959c:	8822d0fa 	srli	r17,r17,3
   195a0:	8401ffcc 	andi	r16,r16,2047
   195a4:	180ad33a 	srli	r5,r3,12
   195a8:	9100004c 	andi	r4,r18,1
   195ac:	1444b03a 	or	r2,r2,r17
   195b0:	80c1ffcc 	andi	r3,r16,2047
   195b4:	1820953a 	slli	r16,r3,20
   195b8:	20c03fcc 	andi	r3,r4,255
   195bc:	180897fa 	slli	r4,r3,31
   195c0:	00c00434 	movhi	r3,16
   195c4:	18ffffc4 	addi	r3,r3,-1
   195c8:	28c6703a 	and	r3,r5,r3
   195cc:	1c06b03a 	or	r3,r3,r16
   195d0:	1906b03a 	or	r3,r3,r4
   195d4:	dfc00417 	ldw	ra,16(sp)
   195d8:	dcc00317 	ldw	r19,12(sp)
   195dc:	dc800217 	ldw	r18,8(sp)
   195e0:	dc400117 	ldw	r17,4(sp)
   195e4:	dc000017 	ldw	r16,0(sp)
   195e8:	dec00504 	addi	sp,sp,20
   195ec:	f800283a 	ret
   195f0:	0101ffc4 	movi	r4,2047
   195f4:	813fd626 	beq	r16,r4,19550 <__alt_data_end+0xfc019550>
   195f8:	29402034 	orhi	r5,r5,128
   195fc:	01000e04 	movi	r4,56
   19600:	2080a316 	blt	r4,r2,19890 <__subdf3+0x3c4>
   19604:	010007c4 	movi	r4,31
   19608:	2080c616 	blt	r4,r2,19924 <__subdf3+0x458>
   1960c:	01000804 	movi	r4,32
   19610:	2089c83a 	sub	r4,r4,r2
   19614:	2910983a 	sll	r8,r5,r4
   19618:	308ed83a 	srl	r7,r6,r2
   1961c:	3108983a 	sll	r4,r6,r4
   19620:	2884d83a 	srl	r2,r5,r2
   19624:	41ccb03a 	or	r6,r8,r7
   19628:	2008c03a 	cmpne	r4,r4,zero
   1962c:	310cb03a 	or	r6,r6,r4
   19630:	898dc83a 	sub	r6,r17,r6
   19634:	89a3803a 	cmpltu	r17,r17,r6
   19638:	1887c83a 	sub	r3,r3,r2
   1963c:	1c47c83a 	sub	r3,r3,r17
   19640:	3023883a 	mov	r17,r6
   19644:	1880202c 	andhi	r2,r3,128
   19648:	10002326 	beq	r2,zero,196d8 <__subdf3+0x20c>
   1964c:	04c02034 	movhi	r19,128
   19650:	9cffffc4 	addi	r19,r19,-1
   19654:	1ce6703a 	and	r19,r3,r19
   19658:	98007a26 	beq	r19,zero,19844 <__subdf3+0x378>
   1965c:	9809883a 	mov	r4,r19
   19660:	001a1740 	call	1a174 <__clzsi2>
   19664:	113ffe04 	addi	r4,r2,-8
   19668:	00c007c4 	movi	r3,31
   1966c:	19007b16 	blt	r3,r4,1985c <__subdf3+0x390>
   19670:	00800804 	movi	r2,32
   19674:	1105c83a 	sub	r2,r2,r4
   19678:	8884d83a 	srl	r2,r17,r2
   1967c:	9906983a 	sll	r3,r19,r4
   19680:	8922983a 	sll	r17,r17,r4
   19684:	10c4b03a 	or	r2,r2,r3
   19688:	24007816 	blt	r4,r16,1986c <__subdf3+0x3a0>
   1968c:	2421c83a 	sub	r16,r4,r16
   19690:	80c00044 	addi	r3,r16,1
   19694:	010007c4 	movi	r4,31
   19698:	20c09516 	blt	r4,r3,198f0 <__subdf3+0x424>
   1969c:	01400804 	movi	r5,32
   196a0:	28cbc83a 	sub	r5,r5,r3
   196a4:	88c8d83a 	srl	r4,r17,r3
   196a8:	8962983a 	sll	r17,r17,r5
   196ac:	114a983a 	sll	r5,r2,r5
   196b0:	10c6d83a 	srl	r3,r2,r3
   196b4:	8804c03a 	cmpne	r2,r17,zero
   196b8:	290ab03a 	or	r5,r5,r4
   196bc:	28a2b03a 	or	r17,r5,r2
   196c0:	0021883a 	mov	r16,zero
   196c4:	003fa206 	br	19550 <__alt_data_end+0xfc019550>
   196c8:	2090b03a 	or	r8,r4,r2
   196cc:	40018e26 	beq	r8,zero,19d08 <__subdf3+0x83c>
   196d0:	1007883a 	mov	r3,r2
   196d4:	2023883a 	mov	r17,r4
   196d8:	888001cc 	andi	r2,r17,7
   196dc:	103f9e1e 	bne	r2,zero,19558 <__alt_data_end+0xfc019558>
   196e0:	1804977a 	slli	r2,r3,29
   196e4:	8822d0fa 	srli	r17,r17,3
   196e8:	1810d0fa 	srli	r8,r3,3
   196ec:	9100004c 	andi	r4,r18,1
   196f0:	1444b03a 	or	r2,r2,r17
   196f4:	00c1ffc4 	movi	r3,2047
   196f8:	80c02826 	beq	r16,r3,1979c <__subdf3+0x2d0>
   196fc:	01400434 	movhi	r5,16
   19700:	297fffc4 	addi	r5,r5,-1
   19704:	80e0703a 	and	r16,r16,r3
   19708:	414a703a 	and	r5,r8,r5
   1970c:	003fa806 	br	195b0 <__alt_data_end+0xfc0195b0>
   19710:	0080630e 	bge	zero,r2,198a0 <__subdf3+0x3d4>
   19714:	48003026 	beq	r9,zero,197d8 <__subdf3+0x30c>
   19718:	0101ffc4 	movi	r4,2047
   1971c:	813f8c26 	beq	r16,r4,19550 <__alt_data_end+0xfc019550>
   19720:	29402034 	orhi	r5,r5,128
   19724:	01000e04 	movi	r4,56
   19728:	2080a90e 	bge	r4,r2,199d0 <__subdf3+0x504>
   1972c:	298cb03a 	or	r6,r5,r6
   19730:	3012c03a 	cmpne	r9,r6,zero
   19734:	0005883a 	mov	r2,zero
   19738:	4c53883a 	add	r9,r9,r17
   1973c:	4c63803a 	cmpltu	r17,r9,r17
   19740:	10c7883a 	add	r3,r2,r3
   19744:	88c7883a 	add	r3,r17,r3
   19748:	4823883a 	mov	r17,r9
   1974c:	1880202c 	andhi	r2,r3,128
   19750:	1000d026 	beq	r2,zero,19a94 <__subdf3+0x5c8>
   19754:	84000044 	addi	r16,r16,1
   19758:	0081ffc4 	movi	r2,2047
   1975c:	8080fe26 	beq	r16,r2,19b58 <__subdf3+0x68c>
   19760:	00bfe034 	movhi	r2,65408
   19764:	10bfffc4 	addi	r2,r2,-1
   19768:	1886703a 	and	r3,r3,r2
   1976c:	880ad07a 	srli	r5,r17,1
   19770:	180497fa 	slli	r2,r3,31
   19774:	8900004c 	andi	r4,r17,1
   19778:	2922b03a 	or	r17,r5,r4
   1977c:	1806d07a 	srli	r3,r3,1
   19780:	1462b03a 	or	r17,r2,r17
   19784:	3825883a 	mov	r18,r7
   19788:	003f7106 	br	19550 <__alt_data_end+0xfc019550>
   1978c:	2984b03a 	or	r2,r5,r6
   19790:	103f6826 	beq	r2,zero,19534 <__alt_data_end+0xfc019534>
   19794:	39c03fcc 	andi	r7,r7,255
   19798:	003f6706 	br	19538 <__alt_data_end+0xfc019538>
   1979c:	4086b03a 	or	r3,r8,r2
   197a0:	18015226 	beq	r3,zero,19cec <__subdf3+0x820>
   197a4:	00c00434 	movhi	r3,16
   197a8:	41400234 	orhi	r5,r8,8
   197ac:	18ffffc4 	addi	r3,r3,-1
   197b0:	28ca703a 	and	r5,r5,r3
   197b4:	003f7e06 	br	195b0 <__alt_data_end+0xfc0195b0>
   197b8:	10bfffc4 	addi	r2,r2,-1
   197bc:	1000491e 	bne	r2,zero,198e4 <__subdf3+0x418>
   197c0:	898fc83a 	sub	r7,r17,r6
   197c4:	89e3803a 	cmpltu	r17,r17,r7
   197c8:	1947c83a 	sub	r3,r3,r5
   197cc:	1c47c83a 	sub	r3,r3,r17
   197d0:	3823883a 	mov	r17,r7
   197d4:	003f9b06 	br	19644 <__alt_data_end+0xfc019644>
   197d8:	2988b03a 	or	r4,r5,r6
   197dc:	203f5c26 	beq	r4,zero,19550 <__alt_data_end+0xfc019550>
   197e0:	10bfffc4 	addi	r2,r2,-1
   197e4:	1000931e 	bne	r2,zero,19a34 <__subdf3+0x568>
   197e8:	898d883a 	add	r6,r17,r6
   197ec:	3463803a 	cmpltu	r17,r6,r17
   197f0:	1947883a 	add	r3,r3,r5
   197f4:	88c7883a 	add	r3,r17,r3
   197f8:	3023883a 	mov	r17,r6
   197fc:	003fd306 	br	1974c <__alt_data_end+0xfc01974c>
   19800:	1000541e 	bne	r2,zero,19954 <__subdf3+0x488>
   19804:	80800044 	addi	r2,r16,1
   19808:	1081ffcc 	andi	r2,r2,2047
   1980c:	01000044 	movi	r4,1
   19810:	2080a20e 	bge	r4,r2,19a9c <__subdf3+0x5d0>
   19814:	8989c83a 	sub	r4,r17,r6
   19818:	8905803a 	cmpltu	r2,r17,r4
   1981c:	1967c83a 	sub	r19,r3,r5
   19820:	98a7c83a 	sub	r19,r19,r2
   19824:	9880202c 	andhi	r2,r19,128
   19828:	10006326 	beq	r2,zero,199b8 <__subdf3+0x4ec>
   1982c:	3463c83a 	sub	r17,r6,r17
   19830:	28c7c83a 	sub	r3,r5,r3
   19834:	344d803a 	cmpltu	r6,r6,r17
   19838:	19a7c83a 	sub	r19,r3,r6
   1983c:	3825883a 	mov	r18,r7
   19840:	983f861e 	bne	r19,zero,1965c <__alt_data_end+0xfc01965c>
   19844:	8809883a 	mov	r4,r17
   19848:	001a1740 	call	1a174 <__clzsi2>
   1984c:	10800804 	addi	r2,r2,32
   19850:	113ffe04 	addi	r4,r2,-8
   19854:	00c007c4 	movi	r3,31
   19858:	193f850e 	bge	r3,r4,19670 <__alt_data_end+0xfc019670>
   1985c:	10bff604 	addi	r2,r2,-40
   19860:	8884983a 	sll	r2,r17,r2
   19864:	0023883a 	mov	r17,zero
   19868:	243f880e 	bge	r4,r16,1968c <__alt_data_end+0xfc01968c>
   1986c:	00ffe034 	movhi	r3,65408
   19870:	18ffffc4 	addi	r3,r3,-1
   19874:	8121c83a 	sub	r16,r16,r4
   19878:	10c6703a 	and	r3,r2,r3
   1987c:	003f3406 	br	19550 <__alt_data_end+0xfc019550>
   19880:	9100004c 	andi	r4,r18,1
   19884:	000b883a 	mov	r5,zero
   19888:	0005883a 	mov	r2,zero
   1988c:	003f4806 	br	195b0 <__alt_data_end+0xfc0195b0>
   19890:	298cb03a 	or	r6,r5,r6
   19894:	300cc03a 	cmpne	r6,r6,zero
   19898:	0005883a 	mov	r2,zero
   1989c:	003f6406 	br	19630 <__alt_data_end+0xfc019630>
   198a0:	10009a1e 	bne	r2,zero,19b0c <__subdf3+0x640>
   198a4:	82400044 	addi	r9,r16,1
   198a8:	4881ffcc 	andi	r2,r9,2047
   198ac:	02800044 	movi	r10,1
   198b0:	5080670e 	bge	r10,r2,19a50 <__subdf3+0x584>
   198b4:	0081ffc4 	movi	r2,2047
   198b8:	4880af26 	beq	r9,r2,19b78 <__subdf3+0x6ac>
   198bc:	898d883a 	add	r6,r17,r6
   198c0:	1945883a 	add	r2,r3,r5
   198c4:	3447803a 	cmpltu	r3,r6,r17
   198c8:	1887883a 	add	r3,r3,r2
   198cc:	182297fa 	slli	r17,r3,31
   198d0:	300cd07a 	srli	r6,r6,1
   198d4:	1806d07a 	srli	r3,r3,1
   198d8:	4821883a 	mov	r16,r9
   198dc:	89a2b03a 	or	r17,r17,r6
   198e0:	003f1b06 	br	19550 <__alt_data_end+0xfc019550>
   198e4:	0101ffc4 	movi	r4,2047
   198e8:	813f441e 	bne	r16,r4,195fc <__alt_data_end+0xfc0195fc>
   198ec:	003f1806 	br	19550 <__alt_data_end+0xfc019550>
   198f0:	843ff844 	addi	r16,r16,-31
   198f4:	01400804 	movi	r5,32
   198f8:	1408d83a 	srl	r4,r2,r16
   198fc:	19405026 	beq	r3,r5,19a40 <__subdf3+0x574>
   19900:	01401004 	movi	r5,64
   19904:	28c7c83a 	sub	r3,r5,r3
   19908:	10c4983a 	sll	r2,r2,r3
   1990c:	88a2b03a 	or	r17,r17,r2
   19910:	8822c03a 	cmpne	r17,r17,zero
   19914:	2462b03a 	or	r17,r4,r17
   19918:	0007883a 	mov	r3,zero
   1991c:	0021883a 	mov	r16,zero
   19920:	003f6d06 	br	196d8 <__alt_data_end+0xfc0196d8>
   19924:	11fff804 	addi	r7,r2,-32
   19928:	01000804 	movi	r4,32
   1992c:	29ced83a 	srl	r7,r5,r7
   19930:	11004526 	beq	r2,r4,19a48 <__subdf3+0x57c>
   19934:	01001004 	movi	r4,64
   19938:	2089c83a 	sub	r4,r4,r2
   1993c:	2904983a 	sll	r2,r5,r4
   19940:	118cb03a 	or	r6,r2,r6
   19944:	300cc03a 	cmpne	r6,r6,zero
   19948:	398cb03a 	or	r6,r7,r6
   1994c:	0005883a 	mov	r2,zero
   19950:	003f3706 	br	19630 <__alt_data_end+0xfc019630>
   19954:	80002a26 	beq	r16,zero,19a00 <__subdf3+0x534>
   19958:	0101ffc4 	movi	r4,2047
   1995c:	49006626 	beq	r9,r4,19af8 <__subdf3+0x62c>
   19960:	0085c83a 	sub	r2,zero,r2
   19964:	18c02034 	orhi	r3,r3,128
   19968:	01000e04 	movi	r4,56
   1996c:	20807e16 	blt	r4,r2,19b68 <__subdf3+0x69c>
   19970:	010007c4 	movi	r4,31
   19974:	2080e716 	blt	r4,r2,19d14 <__subdf3+0x848>
   19978:	01000804 	movi	r4,32
   1997c:	2089c83a 	sub	r4,r4,r2
   19980:	1914983a 	sll	r10,r3,r4
   19984:	8890d83a 	srl	r8,r17,r2
   19988:	8908983a 	sll	r4,r17,r4
   1998c:	1884d83a 	srl	r2,r3,r2
   19990:	5222b03a 	or	r17,r10,r8
   19994:	2006c03a 	cmpne	r3,r4,zero
   19998:	88e2b03a 	or	r17,r17,r3
   1999c:	3463c83a 	sub	r17,r6,r17
   199a0:	2885c83a 	sub	r2,r5,r2
   199a4:	344d803a 	cmpltu	r6,r6,r17
   199a8:	1187c83a 	sub	r3,r2,r6
   199ac:	4821883a 	mov	r16,r9
   199b0:	3825883a 	mov	r18,r7
   199b4:	003f2306 	br	19644 <__alt_data_end+0xfc019644>
   199b8:	24d0b03a 	or	r8,r4,r19
   199bc:	40001b1e 	bne	r8,zero,19a2c <__subdf3+0x560>
   199c0:	0005883a 	mov	r2,zero
   199c4:	0009883a 	mov	r4,zero
   199c8:	0021883a 	mov	r16,zero
   199cc:	003f4906 	br	196f4 <__alt_data_end+0xfc0196f4>
   199d0:	010007c4 	movi	r4,31
   199d4:	20803a16 	blt	r4,r2,19ac0 <__subdf3+0x5f4>
   199d8:	01000804 	movi	r4,32
   199dc:	2089c83a 	sub	r4,r4,r2
   199e0:	2912983a 	sll	r9,r5,r4
   199e4:	3090d83a 	srl	r8,r6,r2
   199e8:	3108983a 	sll	r4,r6,r4
   199ec:	2884d83a 	srl	r2,r5,r2
   199f0:	4a12b03a 	or	r9,r9,r8
   199f4:	2008c03a 	cmpne	r4,r4,zero
   199f8:	4912b03a 	or	r9,r9,r4
   199fc:	003f4e06 	br	19738 <__alt_data_end+0xfc019738>
   19a00:	1c48b03a 	or	r4,r3,r17
   19a04:	20003c26 	beq	r4,zero,19af8 <__subdf3+0x62c>
   19a08:	0084303a 	nor	r2,zero,r2
   19a0c:	1000381e 	bne	r2,zero,19af0 <__subdf3+0x624>
   19a10:	3463c83a 	sub	r17,r6,r17
   19a14:	28c5c83a 	sub	r2,r5,r3
   19a18:	344d803a 	cmpltu	r6,r6,r17
   19a1c:	1187c83a 	sub	r3,r2,r6
   19a20:	4821883a 	mov	r16,r9
   19a24:	3825883a 	mov	r18,r7
   19a28:	003f0606 	br	19644 <__alt_data_end+0xfc019644>
   19a2c:	2023883a 	mov	r17,r4
   19a30:	003f0906 	br	19658 <__alt_data_end+0xfc019658>
   19a34:	0101ffc4 	movi	r4,2047
   19a38:	813f3a1e 	bne	r16,r4,19724 <__alt_data_end+0xfc019724>
   19a3c:	003ec406 	br	19550 <__alt_data_end+0xfc019550>
   19a40:	0005883a 	mov	r2,zero
   19a44:	003fb106 	br	1990c <__alt_data_end+0xfc01990c>
   19a48:	0005883a 	mov	r2,zero
   19a4c:	003fbc06 	br	19940 <__alt_data_end+0xfc019940>
   19a50:	1c44b03a 	or	r2,r3,r17
   19a54:	80008e1e 	bne	r16,zero,19c90 <__subdf3+0x7c4>
   19a58:	1000c826 	beq	r2,zero,19d7c <__subdf3+0x8b0>
   19a5c:	2984b03a 	or	r2,r5,r6
   19a60:	103ebb26 	beq	r2,zero,19550 <__alt_data_end+0xfc019550>
   19a64:	8989883a 	add	r4,r17,r6
   19a68:	1945883a 	add	r2,r3,r5
   19a6c:	2447803a 	cmpltu	r3,r4,r17
   19a70:	1887883a 	add	r3,r3,r2
   19a74:	1880202c 	andhi	r2,r3,128
   19a78:	2023883a 	mov	r17,r4
   19a7c:	103f1626 	beq	r2,zero,196d8 <__alt_data_end+0xfc0196d8>
   19a80:	00bfe034 	movhi	r2,65408
   19a84:	10bfffc4 	addi	r2,r2,-1
   19a88:	5021883a 	mov	r16,r10
   19a8c:	1886703a 	and	r3,r3,r2
   19a90:	003eaf06 	br	19550 <__alt_data_end+0xfc019550>
   19a94:	3825883a 	mov	r18,r7
   19a98:	003f0f06 	br	196d8 <__alt_data_end+0xfc0196d8>
   19a9c:	1c44b03a 	or	r2,r3,r17
   19aa0:	8000251e 	bne	r16,zero,19b38 <__subdf3+0x66c>
   19aa4:	1000661e 	bne	r2,zero,19c40 <__subdf3+0x774>
   19aa8:	2990b03a 	or	r8,r5,r6
   19aac:	40009626 	beq	r8,zero,19d08 <__subdf3+0x83c>
   19ab0:	2807883a 	mov	r3,r5
   19ab4:	3023883a 	mov	r17,r6
   19ab8:	3825883a 	mov	r18,r7
   19abc:	003ea406 	br	19550 <__alt_data_end+0xfc019550>
   19ac0:	127ff804 	addi	r9,r2,-32
   19ac4:	01000804 	movi	r4,32
   19ac8:	2a52d83a 	srl	r9,r5,r9
   19acc:	11008c26 	beq	r2,r4,19d00 <__subdf3+0x834>
   19ad0:	01001004 	movi	r4,64
   19ad4:	2085c83a 	sub	r2,r4,r2
   19ad8:	2884983a 	sll	r2,r5,r2
   19adc:	118cb03a 	or	r6,r2,r6
   19ae0:	300cc03a 	cmpne	r6,r6,zero
   19ae4:	4992b03a 	or	r9,r9,r6
   19ae8:	0005883a 	mov	r2,zero
   19aec:	003f1206 	br	19738 <__alt_data_end+0xfc019738>
   19af0:	0101ffc4 	movi	r4,2047
   19af4:	493f9c1e 	bne	r9,r4,19968 <__alt_data_end+0xfc019968>
   19af8:	2807883a 	mov	r3,r5
   19afc:	3023883a 	mov	r17,r6
   19b00:	4821883a 	mov	r16,r9
   19b04:	3825883a 	mov	r18,r7
   19b08:	003e9106 	br	19550 <__alt_data_end+0xfc019550>
   19b0c:	80001f1e 	bne	r16,zero,19b8c <__subdf3+0x6c0>
   19b10:	1c48b03a 	or	r4,r3,r17
   19b14:	20005a26 	beq	r4,zero,19c80 <__subdf3+0x7b4>
   19b18:	0084303a 	nor	r2,zero,r2
   19b1c:	1000561e 	bne	r2,zero,19c78 <__subdf3+0x7ac>
   19b20:	89a3883a 	add	r17,r17,r6
   19b24:	1945883a 	add	r2,r3,r5
   19b28:	898d803a 	cmpltu	r6,r17,r6
   19b2c:	3087883a 	add	r3,r6,r2
   19b30:	4821883a 	mov	r16,r9
   19b34:	003f0506 	br	1974c <__alt_data_end+0xfc01974c>
   19b38:	10002b1e 	bne	r2,zero,19be8 <__subdf3+0x71c>
   19b3c:	2984b03a 	or	r2,r5,r6
   19b40:	10008026 	beq	r2,zero,19d44 <__subdf3+0x878>
   19b44:	2807883a 	mov	r3,r5
   19b48:	3023883a 	mov	r17,r6
   19b4c:	3825883a 	mov	r18,r7
   19b50:	0401ffc4 	movi	r16,2047
   19b54:	003e7e06 	br	19550 <__alt_data_end+0xfc019550>
   19b58:	3809883a 	mov	r4,r7
   19b5c:	0011883a 	mov	r8,zero
   19b60:	0005883a 	mov	r2,zero
   19b64:	003ee306 	br	196f4 <__alt_data_end+0xfc0196f4>
   19b68:	1c62b03a 	or	r17,r3,r17
   19b6c:	8822c03a 	cmpne	r17,r17,zero
   19b70:	0005883a 	mov	r2,zero
   19b74:	003f8906 	br	1999c <__alt_data_end+0xfc01999c>
   19b78:	3809883a 	mov	r4,r7
   19b7c:	4821883a 	mov	r16,r9
   19b80:	0011883a 	mov	r8,zero
   19b84:	0005883a 	mov	r2,zero
   19b88:	003eda06 	br	196f4 <__alt_data_end+0xfc0196f4>
   19b8c:	0101ffc4 	movi	r4,2047
   19b90:	49003b26 	beq	r9,r4,19c80 <__subdf3+0x7b4>
   19b94:	0085c83a 	sub	r2,zero,r2
   19b98:	18c02034 	orhi	r3,r3,128
   19b9c:	01000e04 	movi	r4,56
   19ba0:	20806e16 	blt	r4,r2,19d5c <__subdf3+0x890>
   19ba4:	010007c4 	movi	r4,31
   19ba8:	20807716 	blt	r4,r2,19d88 <__subdf3+0x8bc>
   19bac:	01000804 	movi	r4,32
   19bb0:	2089c83a 	sub	r4,r4,r2
   19bb4:	1914983a 	sll	r10,r3,r4
   19bb8:	8890d83a 	srl	r8,r17,r2
   19bbc:	8908983a 	sll	r4,r17,r4
   19bc0:	1884d83a 	srl	r2,r3,r2
   19bc4:	5222b03a 	or	r17,r10,r8
   19bc8:	2006c03a 	cmpne	r3,r4,zero
   19bcc:	88e2b03a 	or	r17,r17,r3
   19bd0:	89a3883a 	add	r17,r17,r6
   19bd4:	1145883a 	add	r2,r2,r5
   19bd8:	898d803a 	cmpltu	r6,r17,r6
   19bdc:	3087883a 	add	r3,r6,r2
   19be0:	4821883a 	mov	r16,r9
   19be4:	003ed906 	br	1974c <__alt_data_end+0xfc01974c>
   19be8:	2984b03a 	or	r2,r5,r6
   19bec:	10004226 	beq	r2,zero,19cf8 <__subdf3+0x82c>
   19bf0:	1808d0fa 	srli	r4,r3,3
   19bf4:	8822d0fa 	srli	r17,r17,3
   19bf8:	1806977a 	slli	r3,r3,29
   19bfc:	2080022c 	andhi	r2,r4,8
   19c00:	1c62b03a 	or	r17,r3,r17
   19c04:	10000826 	beq	r2,zero,19c28 <__subdf3+0x75c>
   19c08:	2812d0fa 	srli	r9,r5,3
   19c0c:	4880022c 	andhi	r2,r9,8
   19c10:	1000051e 	bne	r2,zero,19c28 <__subdf3+0x75c>
   19c14:	300cd0fa 	srli	r6,r6,3
   19c18:	2804977a 	slli	r2,r5,29
   19c1c:	4809883a 	mov	r4,r9
   19c20:	3825883a 	mov	r18,r7
   19c24:	11a2b03a 	or	r17,r2,r6
   19c28:	8806d77a 	srli	r3,r17,29
   19c2c:	200890fa 	slli	r4,r4,3
   19c30:	882290fa 	slli	r17,r17,3
   19c34:	0401ffc4 	movi	r16,2047
   19c38:	1906b03a 	or	r3,r3,r4
   19c3c:	003e4406 	br	19550 <__alt_data_end+0xfc019550>
   19c40:	2984b03a 	or	r2,r5,r6
   19c44:	103e4226 	beq	r2,zero,19550 <__alt_data_end+0xfc019550>
   19c48:	8989c83a 	sub	r4,r17,r6
   19c4c:	8911803a 	cmpltu	r8,r17,r4
   19c50:	1945c83a 	sub	r2,r3,r5
   19c54:	1205c83a 	sub	r2,r2,r8
   19c58:	1200202c 	andhi	r8,r2,128
   19c5c:	403e9a26 	beq	r8,zero,196c8 <__alt_data_end+0xfc0196c8>
   19c60:	3463c83a 	sub	r17,r6,r17
   19c64:	28c5c83a 	sub	r2,r5,r3
   19c68:	344d803a 	cmpltu	r6,r6,r17
   19c6c:	1187c83a 	sub	r3,r2,r6
   19c70:	3825883a 	mov	r18,r7
   19c74:	003e3606 	br	19550 <__alt_data_end+0xfc019550>
   19c78:	0101ffc4 	movi	r4,2047
   19c7c:	493fc71e 	bne	r9,r4,19b9c <__alt_data_end+0xfc019b9c>
   19c80:	2807883a 	mov	r3,r5
   19c84:	3023883a 	mov	r17,r6
   19c88:	4821883a 	mov	r16,r9
   19c8c:	003e3006 	br	19550 <__alt_data_end+0xfc019550>
   19c90:	10003626 	beq	r2,zero,19d6c <__subdf3+0x8a0>
   19c94:	2984b03a 	or	r2,r5,r6
   19c98:	10001726 	beq	r2,zero,19cf8 <__subdf3+0x82c>
   19c9c:	1808d0fa 	srli	r4,r3,3
   19ca0:	8822d0fa 	srli	r17,r17,3
   19ca4:	1806977a 	slli	r3,r3,29
   19ca8:	2080022c 	andhi	r2,r4,8
   19cac:	1c62b03a 	or	r17,r3,r17
   19cb0:	10000726 	beq	r2,zero,19cd0 <__subdf3+0x804>
   19cb4:	2812d0fa 	srli	r9,r5,3
   19cb8:	4880022c 	andhi	r2,r9,8
   19cbc:	1000041e 	bne	r2,zero,19cd0 <__subdf3+0x804>
   19cc0:	300cd0fa 	srli	r6,r6,3
   19cc4:	2804977a 	slli	r2,r5,29
   19cc8:	4809883a 	mov	r4,r9
   19ccc:	11a2b03a 	or	r17,r2,r6
   19cd0:	8806d77a 	srli	r3,r17,29
   19cd4:	200890fa 	slli	r4,r4,3
   19cd8:	882290fa 	slli	r17,r17,3
   19cdc:	3825883a 	mov	r18,r7
   19ce0:	1906b03a 	or	r3,r3,r4
   19ce4:	0401ffc4 	movi	r16,2047
   19ce8:	003e1906 	br	19550 <__alt_data_end+0xfc019550>
   19cec:	000b883a 	mov	r5,zero
   19cf0:	0005883a 	mov	r2,zero
   19cf4:	003e2e06 	br	195b0 <__alt_data_end+0xfc0195b0>
   19cf8:	0401ffc4 	movi	r16,2047
   19cfc:	003e1406 	br	19550 <__alt_data_end+0xfc019550>
   19d00:	0005883a 	mov	r2,zero
   19d04:	003f7506 	br	19adc <__alt_data_end+0xfc019adc>
   19d08:	0005883a 	mov	r2,zero
   19d0c:	0009883a 	mov	r4,zero
   19d10:	003e7806 	br	196f4 <__alt_data_end+0xfc0196f4>
   19d14:	123ff804 	addi	r8,r2,-32
   19d18:	01000804 	movi	r4,32
   19d1c:	1a10d83a 	srl	r8,r3,r8
   19d20:	11002526 	beq	r2,r4,19db8 <__subdf3+0x8ec>
   19d24:	01001004 	movi	r4,64
   19d28:	2085c83a 	sub	r2,r4,r2
   19d2c:	1884983a 	sll	r2,r3,r2
   19d30:	1444b03a 	or	r2,r2,r17
   19d34:	1004c03a 	cmpne	r2,r2,zero
   19d38:	40a2b03a 	or	r17,r8,r2
   19d3c:	0005883a 	mov	r2,zero
   19d40:	003f1606 	br	1999c <__alt_data_end+0xfc01999c>
   19d44:	02000434 	movhi	r8,16
   19d48:	0009883a 	mov	r4,zero
   19d4c:	423fffc4 	addi	r8,r8,-1
   19d50:	00bfffc4 	movi	r2,-1
   19d54:	0401ffc4 	movi	r16,2047
   19d58:	003e6606 	br	196f4 <__alt_data_end+0xfc0196f4>
   19d5c:	1c62b03a 	or	r17,r3,r17
   19d60:	8822c03a 	cmpne	r17,r17,zero
   19d64:	0005883a 	mov	r2,zero
   19d68:	003f9906 	br	19bd0 <__alt_data_end+0xfc019bd0>
   19d6c:	2807883a 	mov	r3,r5
   19d70:	3023883a 	mov	r17,r6
   19d74:	0401ffc4 	movi	r16,2047
   19d78:	003df506 	br	19550 <__alt_data_end+0xfc019550>
   19d7c:	2807883a 	mov	r3,r5
   19d80:	3023883a 	mov	r17,r6
   19d84:	003df206 	br	19550 <__alt_data_end+0xfc019550>
   19d88:	123ff804 	addi	r8,r2,-32
   19d8c:	01000804 	movi	r4,32
   19d90:	1a10d83a 	srl	r8,r3,r8
   19d94:	11000a26 	beq	r2,r4,19dc0 <__subdf3+0x8f4>
   19d98:	01001004 	movi	r4,64
   19d9c:	2085c83a 	sub	r2,r4,r2
   19da0:	1884983a 	sll	r2,r3,r2
   19da4:	1444b03a 	or	r2,r2,r17
   19da8:	1004c03a 	cmpne	r2,r2,zero
   19dac:	40a2b03a 	or	r17,r8,r2
   19db0:	0005883a 	mov	r2,zero
   19db4:	003f8606 	br	19bd0 <__alt_data_end+0xfc019bd0>
   19db8:	0005883a 	mov	r2,zero
   19dbc:	003fdc06 	br	19d30 <__alt_data_end+0xfc019d30>
   19dc0:	0005883a 	mov	r2,zero
   19dc4:	003ff706 	br	19da4 <__alt_data_end+0xfc019da4>

00019dc8 <__fixdfsi>:
   19dc8:	280cd53a 	srli	r6,r5,20
   19dcc:	00c00434 	movhi	r3,16
   19dd0:	18ffffc4 	addi	r3,r3,-1
   19dd4:	3181ffcc 	andi	r6,r6,2047
   19dd8:	01c0ff84 	movi	r7,1022
   19ddc:	28c6703a 	and	r3,r5,r3
   19de0:	280ad7fa 	srli	r5,r5,31
   19de4:	3980120e 	bge	r7,r6,19e30 <__fixdfsi+0x68>
   19de8:	00810744 	movi	r2,1053
   19dec:	11800c16 	blt	r2,r6,19e20 <__fixdfsi+0x58>
   19df0:	00810cc4 	movi	r2,1075
   19df4:	1185c83a 	sub	r2,r2,r6
   19df8:	01c007c4 	movi	r7,31
   19dfc:	18c00434 	orhi	r3,r3,16
   19e00:	38800d16 	blt	r7,r2,19e38 <__fixdfsi+0x70>
   19e04:	31befb44 	addi	r6,r6,-1043
   19e08:	2084d83a 	srl	r2,r4,r2
   19e0c:	1986983a 	sll	r3,r3,r6
   19e10:	1884b03a 	or	r2,r3,r2
   19e14:	28000726 	beq	r5,zero,19e34 <__fixdfsi+0x6c>
   19e18:	0085c83a 	sub	r2,zero,r2
   19e1c:	f800283a 	ret
   19e20:	00a00034 	movhi	r2,32768
   19e24:	10bfffc4 	addi	r2,r2,-1
   19e28:	2885883a 	add	r2,r5,r2
   19e2c:	f800283a 	ret
   19e30:	0005883a 	mov	r2,zero
   19e34:	f800283a 	ret
   19e38:	008104c4 	movi	r2,1043
   19e3c:	1185c83a 	sub	r2,r2,r6
   19e40:	1884d83a 	srl	r2,r3,r2
   19e44:	003ff306 	br	19e14 <__alt_data_end+0xfc019e14>

00019e48 <__floatsidf>:
   19e48:	defffd04 	addi	sp,sp,-12
   19e4c:	dfc00215 	stw	ra,8(sp)
   19e50:	dc400115 	stw	r17,4(sp)
   19e54:	dc000015 	stw	r16,0(sp)
   19e58:	20002b26 	beq	r4,zero,19f08 <__floatsidf+0xc0>
   19e5c:	2023883a 	mov	r17,r4
   19e60:	2020d7fa 	srli	r16,r4,31
   19e64:	20002d16 	blt	r4,zero,19f1c <__floatsidf+0xd4>
   19e68:	8809883a 	mov	r4,r17
   19e6c:	001a1740 	call	1a174 <__clzsi2>
   19e70:	01410784 	movi	r5,1054
   19e74:	288bc83a 	sub	r5,r5,r2
   19e78:	01010cc4 	movi	r4,1075
   19e7c:	2149c83a 	sub	r4,r4,r5
   19e80:	00c007c4 	movi	r3,31
   19e84:	1900160e 	bge	r3,r4,19ee0 <__floatsidf+0x98>
   19e88:	00c104c4 	movi	r3,1043
   19e8c:	1947c83a 	sub	r3,r3,r5
   19e90:	88c6983a 	sll	r3,r17,r3
   19e94:	00800434 	movhi	r2,16
   19e98:	10bfffc4 	addi	r2,r2,-1
   19e9c:	1886703a 	and	r3,r3,r2
   19ea0:	2941ffcc 	andi	r5,r5,2047
   19ea4:	800d883a 	mov	r6,r16
   19ea8:	0005883a 	mov	r2,zero
   19eac:	280a953a 	slli	r5,r5,20
   19eb0:	31803fcc 	andi	r6,r6,255
   19eb4:	01000434 	movhi	r4,16
   19eb8:	300c97fa 	slli	r6,r6,31
   19ebc:	213fffc4 	addi	r4,r4,-1
   19ec0:	1906703a 	and	r3,r3,r4
   19ec4:	1946b03a 	or	r3,r3,r5
   19ec8:	1986b03a 	or	r3,r3,r6
   19ecc:	dfc00217 	ldw	ra,8(sp)
   19ed0:	dc400117 	ldw	r17,4(sp)
   19ed4:	dc000017 	ldw	r16,0(sp)
   19ed8:	dec00304 	addi	sp,sp,12
   19edc:	f800283a 	ret
   19ee0:	00c002c4 	movi	r3,11
   19ee4:	1887c83a 	sub	r3,r3,r2
   19ee8:	88c6d83a 	srl	r3,r17,r3
   19eec:	8904983a 	sll	r2,r17,r4
   19ef0:	01000434 	movhi	r4,16
   19ef4:	213fffc4 	addi	r4,r4,-1
   19ef8:	2941ffcc 	andi	r5,r5,2047
   19efc:	1906703a 	and	r3,r3,r4
   19f00:	800d883a 	mov	r6,r16
   19f04:	003fe906 	br	19eac <__alt_data_end+0xfc019eac>
   19f08:	000d883a 	mov	r6,zero
   19f0c:	000b883a 	mov	r5,zero
   19f10:	0007883a 	mov	r3,zero
   19f14:	0005883a 	mov	r2,zero
   19f18:	003fe406 	br	19eac <__alt_data_end+0xfc019eac>
   19f1c:	0123c83a 	sub	r17,zero,r4
   19f20:	003fd106 	br	19e68 <__alt_data_end+0xfc019e68>

00019f24 <__floatunsidf>:
   19f24:	defffe04 	addi	sp,sp,-8
   19f28:	dc000015 	stw	r16,0(sp)
   19f2c:	dfc00115 	stw	ra,4(sp)
   19f30:	2021883a 	mov	r16,r4
   19f34:	20002226 	beq	r4,zero,19fc0 <__floatunsidf+0x9c>
   19f38:	001a1740 	call	1a174 <__clzsi2>
   19f3c:	01010784 	movi	r4,1054
   19f40:	2089c83a 	sub	r4,r4,r2
   19f44:	01810cc4 	movi	r6,1075
   19f48:	310dc83a 	sub	r6,r6,r4
   19f4c:	00c007c4 	movi	r3,31
   19f50:	1980120e 	bge	r3,r6,19f9c <__floatunsidf+0x78>
   19f54:	00c104c4 	movi	r3,1043
   19f58:	1907c83a 	sub	r3,r3,r4
   19f5c:	80ca983a 	sll	r5,r16,r3
   19f60:	00800434 	movhi	r2,16
   19f64:	10bfffc4 	addi	r2,r2,-1
   19f68:	2101ffcc 	andi	r4,r4,2047
   19f6c:	0021883a 	mov	r16,zero
   19f70:	288a703a 	and	r5,r5,r2
   19f74:	2008953a 	slli	r4,r4,20
   19f78:	00c00434 	movhi	r3,16
   19f7c:	18ffffc4 	addi	r3,r3,-1
   19f80:	28c6703a 	and	r3,r5,r3
   19f84:	8005883a 	mov	r2,r16
   19f88:	1906b03a 	or	r3,r3,r4
   19f8c:	dfc00117 	ldw	ra,4(sp)
   19f90:	dc000017 	ldw	r16,0(sp)
   19f94:	dec00204 	addi	sp,sp,8
   19f98:	f800283a 	ret
   19f9c:	00c002c4 	movi	r3,11
   19fa0:	188bc83a 	sub	r5,r3,r2
   19fa4:	814ad83a 	srl	r5,r16,r5
   19fa8:	00c00434 	movhi	r3,16
   19fac:	18ffffc4 	addi	r3,r3,-1
   19fb0:	81a0983a 	sll	r16,r16,r6
   19fb4:	2101ffcc 	andi	r4,r4,2047
   19fb8:	28ca703a 	and	r5,r5,r3
   19fbc:	003fed06 	br	19f74 <__alt_data_end+0xfc019f74>
   19fc0:	0009883a 	mov	r4,zero
   19fc4:	000b883a 	mov	r5,zero
   19fc8:	003fea06 	br	19f74 <__alt_data_end+0xfc019f74>

00019fcc <__truncdfsf2>:
   19fcc:	2810d53a 	srli	r8,r5,20
   19fd0:	01c00434 	movhi	r7,16
   19fd4:	39ffffc4 	addi	r7,r7,-1
   19fd8:	29ce703a 	and	r7,r5,r7
   19fdc:	4201ffcc 	andi	r8,r8,2047
   19fe0:	380e90fa 	slli	r7,r7,3
   19fe4:	200cd77a 	srli	r6,r4,29
   19fe8:	42400044 	addi	r9,r8,1
   19fec:	4a41ffcc 	andi	r9,r9,2047
   19ff0:	00c00044 	movi	r3,1
   19ff4:	280ad7fa 	srli	r5,r5,31
   19ff8:	31ceb03a 	or	r7,r6,r7
   19ffc:	200490fa 	slli	r2,r4,3
   1a000:	1a40230e 	bge	r3,r9,1a090 <__truncdfsf2+0xc4>
   1a004:	40ff2004 	addi	r3,r8,-896
   1a008:	01803f84 	movi	r6,254
   1a00c:	30c01516 	blt	r6,r3,1a064 <__truncdfsf2+0x98>
   1a010:	00c0380e 	bge	zero,r3,1a0f4 <__truncdfsf2+0x128>
   1a014:	200c91ba 	slli	r6,r4,6
   1a018:	380e90fa 	slli	r7,r7,3
   1a01c:	1004d77a 	srli	r2,r2,29
   1a020:	300cc03a 	cmpne	r6,r6,zero
   1a024:	31ccb03a 	or	r6,r6,r7
   1a028:	308cb03a 	or	r6,r6,r2
   1a02c:	308001cc 	andi	r2,r6,7
   1a030:	10000426 	beq	r2,zero,1a044 <__truncdfsf2+0x78>
   1a034:	308003cc 	andi	r2,r6,15
   1a038:	01000104 	movi	r4,4
   1a03c:	11000126 	beq	r2,r4,1a044 <__truncdfsf2+0x78>
   1a040:	31800104 	addi	r6,r6,4
   1a044:	3081002c 	andhi	r2,r6,1024
   1a048:	10001626 	beq	r2,zero,1a0a4 <__truncdfsf2+0xd8>
   1a04c:	18c00044 	addi	r3,r3,1
   1a050:	00803fc4 	movi	r2,255
   1a054:	18800326 	beq	r3,r2,1a064 <__truncdfsf2+0x98>
   1a058:	300c91ba 	slli	r6,r6,6
   1a05c:	300cd27a 	srli	r6,r6,9
   1a060:	00000206 	br	1a06c <__truncdfsf2+0xa0>
   1a064:	00ffffc4 	movi	r3,-1
   1a068:	000d883a 	mov	r6,zero
   1a06c:	18c03fcc 	andi	r3,r3,255
   1a070:	180895fa 	slli	r4,r3,23
   1a074:	00c02034 	movhi	r3,128
   1a078:	280a97fa 	slli	r5,r5,31
   1a07c:	18ffffc4 	addi	r3,r3,-1
   1a080:	30c6703a 	and	r3,r6,r3
   1a084:	1906b03a 	or	r3,r3,r4
   1a088:	1944b03a 	or	r2,r3,r5
   1a08c:	f800283a 	ret
   1a090:	40000b1e 	bne	r8,zero,1a0c0 <__truncdfsf2+0xf4>
   1a094:	388cb03a 	or	r6,r7,r2
   1a098:	0007883a 	mov	r3,zero
   1a09c:	30000426 	beq	r6,zero,1a0b0 <__truncdfsf2+0xe4>
   1a0a0:	01800144 	movi	r6,5
   1a0a4:	00803fc4 	movi	r2,255
   1a0a8:	300cd0fa 	srli	r6,r6,3
   1a0ac:	18800a26 	beq	r3,r2,1a0d8 <__truncdfsf2+0x10c>
   1a0b0:	00802034 	movhi	r2,128
   1a0b4:	10bfffc4 	addi	r2,r2,-1
   1a0b8:	308c703a 	and	r6,r6,r2
   1a0bc:	003feb06 	br	1a06c <__alt_data_end+0xfc01a06c>
   1a0c0:	3888b03a 	or	r4,r7,r2
   1a0c4:	203fe726 	beq	r4,zero,1a064 <__alt_data_end+0xfc01a064>
   1a0c8:	380c90fa 	slli	r6,r7,3
   1a0cc:	00c03fc4 	movi	r3,255
   1a0d0:	31808034 	orhi	r6,r6,512
   1a0d4:	003fd506 	br	1a02c <__alt_data_end+0xfc01a02c>
   1a0d8:	303fe226 	beq	r6,zero,1a064 <__alt_data_end+0xfc01a064>
   1a0dc:	00802034 	movhi	r2,128
   1a0e0:	31801034 	orhi	r6,r6,64
   1a0e4:	10bfffc4 	addi	r2,r2,-1
   1a0e8:	00ffffc4 	movi	r3,-1
   1a0ec:	308c703a 	and	r6,r6,r2
   1a0f0:	003fde06 	br	1a06c <__alt_data_end+0xfc01a06c>
   1a0f4:	013ffa44 	movi	r4,-23
   1a0f8:	19000e16 	blt	r3,r4,1a134 <__truncdfsf2+0x168>
   1a0fc:	01000784 	movi	r4,30
   1a100:	20c9c83a 	sub	r4,r4,r3
   1a104:	018007c4 	movi	r6,31
   1a108:	39c02034 	orhi	r7,r7,128
   1a10c:	31000b16 	blt	r6,r4,1a13c <__truncdfsf2+0x170>
   1a110:	423f2084 	addi	r8,r8,-894
   1a114:	120c983a 	sll	r6,r2,r8
   1a118:	3a0e983a 	sll	r7,r7,r8
   1a11c:	1104d83a 	srl	r2,r2,r4
   1a120:	300cc03a 	cmpne	r6,r6,zero
   1a124:	31ceb03a 	or	r7,r6,r7
   1a128:	388cb03a 	or	r6,r7,r2
   1a12c:	0007883a 	mov	r3,zero
   1a130:	003fbe06 	br	1a02c <__alt_data_end+0xfc01a02c>
   1a134:	0007883a 	mov	r3,zero
   1a138:	003fd906 	br	1a0a0 <__alt_data_end+0xfc01a0a0>
   1a13c:	01bfff84 	movi	r6,-2
   1a140:	30cdc83a 	sub	r6,r6,r3
   1a144:	00c00804 	movi	r3,32
   1a148:	398cd83a 	srl	r6,r7,r6
   1a14c:	20c00726 	beq	r4,r3,1a16c <__truncdfsf2+0x1a0>
   1a150:	423f2884 	addi	r8,r8,-862
   1a154:	3a0e983a 	sll	r7,r7,r8
   1a158:	3884b03a 	or	r2,r7,r2
   1a15c:	1004c03a 	cmpne	r2,r2,zero
   1a160:	118cb03a 	or	r6,r2,r6
   1a164:	0007883a 	mov	r3,zero
   1a168:	003fb006 	br	1a02c <__alt_data_end+0xfc01a02c>
   1a16c:	000f883a 	mov	r7,zero
   1a170:	003ff906 	br	1a158 <__alt_data_end+0xfc01a158>

0001a174 <__clzsi2>:
   1a174:	00bfffd4 	movui	r2,65535
   1a178:	11000536 	bltu	r2,r4,1a190 <__clzsi2+0x1c>
   1a17c:	00803fc4 	movi	r2,255
   1a180:	11000f36 	bltu	r2,r4,1a1c0 <__clzsi2+0x4c>
   1a184:	00800804 	movi	r2,32
   1a188:	0007883a 	mov	r3,zero
   1a18c:	00000506 	br	1a1a4 <__clzsi2+0x30>
   1a190:	00804034 	movhi	r2,256
   1a194:	10bfffc4 	addi	r2,r2,-1
   1a198:	11000c2e 	bgeu	r2,r4,1a1cc <__clzsi2+0x58>
   1a19c:	00800204 	movi	r2,8
   1a1a0:	00c00604 	movi	r3,24
   1a1a4:	20c8d83a 	srl	r4,r4,r3
   1a1a8:	00c000b4 	movhi	r3,2
   1a1ac:	18d6b504 	addi	r3,r3,23252
   1a1b0:	1909883a 	add	r4,r3,r4
   1a1b4:	20c00003 	ldbu	r3,0(r4)
   1a1b8:	10c5c83a 	sub	r2,r2,r3
   1a1bc:	f800283a 	ret
   1a1c0:	00800604 	movi	r2,24
   1a1c4:	00c00204 	movi	r3,8
   1a1c8:	003ff606 	br	1a1a4 <__alt_data_end+0xfc01a1a4>
   1a1cc:	00800404 	movi	r2,16
   1a1d0:	1007883a 	mov	r3,r2
   1a1d4:	003ff306 	br	1a1a4 <__alt_data_end+0xfc01a1a4>

0001a1d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a1d8:	defffe04 	addi	sp,sp,-8
   1a1dc:	dfc00115 	stw	ra,4(sp)
   1a1e0:	df000015 	stw	fp,0(sp)
   1a1e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a1e8:	d0a00d17 	ldw	r2,-32716(gp)
   1a1ec:	10000326 	beq	r2,zero,1a1fc <alt_get_errno+0x24>
   1a1f0:	d0a00d17 	ldw	r2,-32716(gp)
   1a1f4:	103ee83a 	callr	r2
   1a1f8:	00000106 	br	1a200 <alt_get_errno+0x28>
   1a1fc:	d0a71304 	addi	r2,gp,-25524
}
   1a200:	e037883a 	mov	sp,fp
   1a204:	dfc00117 	ldw	ra,4(sp)
   1a208:	df000017 	ldw	fp,0(sp)
   1a20c:	dec00204 	addi	sp,sp,8
   1a210:	f800283a 	ret

0001a214 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1a214:	defffb04 	addi	sp,sp,-20
   1a218:	dfc00415 	stw	ra,16(sp)
   1a21c:	df000315 	stw	fp,12(sp)
   1a220:	df000304 	addi	fp,sp,12
   1a224:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1a228:	e0bfff17 	ldw	r2,-4(fp)
   1a22c:	10000616 	blt	r2,zero,1a248 <close+0x34>
   1a230:	e0bfff17 	ldw	r2,-4(fp)
   1a234:	10c00324 	muli	r3,r2,12
   1a238:	008000b4 	movhi	r2,2
   1a23c:	10997c04 	addi	r2,r2,26096
   1a240:	1885883a 	add	r2,r3,r2
   1a244:	00000106 	br	1a24c <close+0x38>
   1a248:	0005883a 	mov	r2,zero
   1a24c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   1a250:	e0bffd17 	ldw	r2,-12(fp)
   1a254:	10001926 	beq	r2,zero,1a2bc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   1a258:	e0bffd17 	ldw	r2,-12(fp)
   1a25c:	10800017 	ldw	r2,0(r2)
   1a260:	10800417 	ldw	r2,16(r2)
   1a264:	10000626 	beq	r2,zero,1a280 <close+0x6c>
   1a268:	e0bffd17 	ldw	r2,-12(fp)
   1a26c:	10800017 	ldw	r2,0(r2)
   1a270:	10800417 	ldw	r2,16(r2)
   1a274:	e13ffd17 	ldw	r4,-12(fp)
   1a278:	103ee83a 	callr	r2
   1a27c:	00000106 	br	1a284 <close+0x70>
   1a280:	0005883a 	mov	r2,zero
   1a284:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1a288:	e13fff17 	ldw	r4,-4(fp)
   1a28c:	001a8cc0 	call	1a8cc <alt_release_fd>
    if (rval < 0)
   1a290:	e0bffe17 	ldw	r2,-8(fp)
   1a294:	1000070e 	bge	r2,zero,1a2b4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   1a298:	001a1d80 	call	1a1d8 <alt_get_errno>
   1a29c:	1007883a 	mov	r3,r2
   1a2a0:	e0bffe17 	ldw	r2,-8(fp)
   1a2a4:	0085c83a 	sub	r2,zero,r2
   1a2a8:	18800015 	stw	r2,0(r3)
      return -1;
   1a2ac:	00bfffc4 	movi	r2,-1
   1a2b0:	00000706 	br	1a2d0 <close+0xbc>
    }
    return 0;
   1a2b4:	0005883a 	mov	r2,zero
   1a2b8:	00000506 	br	1a2d0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1a2bc:	001a1d80 	call	1a1d8 <alt_get_errno>
   1a2c0:	1007883a 	mov	r3,r2
   1a2c4:	00801444 	movi	r2,81
   1a2c8:	18800015 	stw	r2,0(r3)
    return -1;
   1a2cc:	00bfffc4 	movi	r2,-1
  }
}
   1a2d0:	e037883a 	mov	sp,fp
   1a2d4:	dfc00117 	ldw	ra,4(sp)
   1a2d8:	df000017 	ldw	fp,0(sp)
   1a2dc:	dec00204 	addi	sp,sp,8
   1a2e0:	f800283a 	ret

0001a2e4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1a2e4:	defffc04 	addi	sp,sp,-16
   1a2e8:	df000315 	stw	fp,12(sp)
   1a2ec:	df000304 	addi	fp,sp,12
   1a2f0:	e13ffd15 	stw	r4,-12(fp)
   1a2f4:	e17ffe15 	stw	r5,-8(fp)
   1a2f8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1a2fc:	e0bfff17 	ldw	r2,-4(fp)
}
   1a300:	e037883a 	mov	sp,fp
   1a304:	df000017 	ldw	fp,0(sp)
   1a308:	dec00104 	addi	sp,sp,4
   1a30c:	f800283a 	ret

0001a310 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a310:	defffe04 	addi	sp,sp,-8
   1a314:	dfc00115 	stw	ra,4(sp)
   1a318:	df000015 	stw	fp,0(sp)
   1a31c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a320:	d0a00d17 	ldw	r2,-32716(gp)
   1a324:	10000326 	beq	r2,zero,1a334 <alt_get_errno+0x24>
   1a328:	d0a00d17 	ldw	r2,-32716(gp)
   1a32c:	103ee83a 	callr	r2
   1a330:	00000106 	br	1a338 <alt_get_errno+0x28>
   1a334:	d0a71304 	addi	r2,gp,-25524
}
   1a338:	e037883a 	mov	sp,fp
   1a33c:	dfc00117 	ldw	ra,4(sp)
   1a340:	df000017 	ldw	fp,0(sp)
   1a344:	dec00204 	addi	sp,sp,8
   1a348:	f800283a 	ret

0001a34c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   1a34c:	defffb04 	addi	sp,sp,-20
   1a350:	dfc00415 	stw	ra,16(sp)
   1a354:	df000315 	stw	fp,12(sp)
   1a358:	df000304 	addi	fp,sp,12
   1a35c:	e13ffe15 	stw	r4,-8(fp)
   1a360:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a364:	e0bffe17 	ldw	r2,-8(fp)
   1a368:	10000616 	blt	r2,zero,1a384 <fstat+0x38>
   1a36c:	e0bffe17 	ldw	r2,-8(fp)
   1a370:	10c00324 	muli	r3,r2,12
   1a374:	008000b4 	movhi	r2,2
   1a378:	10997c04 	addi	r2,r2,26096
   1a37c:	1885883a 	add	r2,r3,r2
   1a380:	00000106 	br	1a388 <fstat+0x3c>
   1a384:	0005883a 	mov	r2,zero
   1a388:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   1a38c:	e0bffd17 	ldw	r2,-12(fp)
   1a390:	10001026 	beq	r2,zero,1a3d4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1a394:	e0bffd17 	ldw	r2,-12(fp)
   1a398:	10800017 	ldw	r2,0(r2)
   1a39c:	10800817 	ldw	r2,32(r2)
   1a3a0:	10000726 	beq	r2,zero,1a3c0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   1a3a4:	e0bffd17 	ldw	r2,-12(fp)
   1a3a8:	10800017 	ldw	r2,0(r2)
   1a3ac:	10800817 	ldw	r2,32(r2)
   1a3b0:	e17fff17 	ldw	r5,-4(fp)
   1a3b4:	e13ffd17 	ldw	r4,-12(fp)
   1a3b8:	103ee83a 	callr	r2
   1a3bc:	00000a06 	br	1a3e8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   1a3c0:	e0bfff17 	ldw	r2,-4(fp)
   1a3c4:	00c80004 	movi	r3,8192
   1a3c8:	10c00115 	stw	r3,4(r2)
      return 0;
   1a3cc:	0005883a 	mov	r2,zero
   1a3d0:	00000506 	br	1a3e8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1a3d4:	001a3100 	call	1a310 <alt_get_errno>
   1a3d8:	1007883a 	mov	r3,r2
   1a3dc:	00801444 	movi	r2,81
   1a3e0:	18800015 	stw	r2,0(r3)
    return -1;
   1a3e4:	00bfffc4 	movi	r2,-1
  }
}
   1a3e8:	e037883a 	mov	sp,fp
   1a3ec:	dfc00117 	ldw	ra,4(sp)
   1a3f0:	df000017 	ldw	fp,0(sp)
   1a3f4:	dec00204 	addi	sp,sp,8
   1a3f8:	f800283a 	ret

0001a3fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a3fc:	defffe04 	addi	sp,sp,-8
   1a400:	dfc00115 	stw	ra,4(sp)
   1a404:	df000015 	stw	fp,0(sp)
   1a408:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a40c:	d0a00d17 	ldw	r2,-32716(gp)
   1a410:	10000326 	beq	r2,zero,1a420 <alt_get_errno+0x24>
   1a414:	d0a00d17 	ldw	r2,-32716(gp)
   1a418:	103ee83a 	callr	r2
   1a41c:	00000106 	br	1a424 <alt_get_errno+0x28>
   1a420:	d0a71304 	addi	r2,gp,-25524
}
   1a424:	e037883a 	mov	sp,fp
   1a428:	dfc00117 	ldw	ra,4(sp)
   1a42c:	df000017 	ldw	fp,0(sp)
   1a430:	dec00204 	addi	sp,sp,8
   1a434:	f800283a 	ret

0001a438 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   1a438:	deffed04 	addi	sp,sp,-76
   1a43c:	dfc01215 	stw	ra,72(sp)
   1a440:	df001115 	stw	fp,68(sp)
   1a444:	df001104 	addi	fp,sp,68
   1a448:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a44c:	e0bfff17 	ldw	r2,-4(fp)
   1a450:	10000616 	blt	r2,zero,1a46c <isatty+0x34>
   1a454:	e0bfff17 	ldw	r2,-4(fp)
   1a458:	10c00324 	muli	r3,r2,12
   1a45c:	008000b4 	movhi	r2,2
   1a460:	10997c04 	addi	r2,r2,26096
   1a464:	1885883a 	add	r2,r3,r2
   1a468:	00000106 	br	1a470 <isatty+0x38>
   1a46c:	0005883a 	mov	r2,zero
   1a470:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   1a474:	e0bfef17 	ldw	r2,-68(fp)
   1a478:	10000e26 	beq	r2,zero,1a4b4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1a47c:	e0bfef17 	ldw	r2,-68(fp)
   1a480:	10800017 	ldw	r2,0(r2)
   1a484:	10800817 	ldw	r2,32(r2)
   1a488:	1000021e 	bne	r2,zero,1a494 <isatty+0x5c>
    {
      return 1;
   1a48c:	00800044 	movi	r2,1
   1a490:	00000d06 	br	1a4c8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   1a494:	e0bff004 	addi	r2,fp,-64
   1a498:	100b883a 	mov	r5,r2
   1a49c:	e13fff17 	ldw	r4,-4(fp)
   1a4a0:	001a34c0 	call	1a34c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1a4a4:	e0bff117 	ldw	r2,-60(fp)
   1a4a8:	10880020 	cmpeqi	r2,r2,8192
   1a4ac:	10803fcc 	andi	r2,r2,255
   1a4b0:	00000506 	br	1a4c8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1a4b4:	001a3fc0 	call	1a3fc <alt_get_errno>
   1a4b8:	1007883a 	mov	r3,r2
   1a4bc:	00801444 	movi	r2,81
   1a4c0:	18800015 	stw	r2,0(r3)
    return 0;
   1a4c4:	0005883a 	mov	r2,zero
  }
}
   1a4c8:	e037883a 	mov	sp,fp
   1a4cc:	dfc00117 	ldw	ra,4(sp)
   1a4d0:	df000017 	ldw	fp,0(sp)
   1a4d4:	dec00204 	addi	sp,sp,8
   1a4d8:	f800283a 	ret

0001a4dc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1a4dc:	defffc04 	addi	sp,sp,-16
   1a4e0:	df000315 	stw	fp,12(sp)
   1a4e4:	df000304 	addi	fp,sp,12
   1a4e8:	e13ffd15 	stw	r4,-12(fp)
   1a4ec:	e17ffe15 	stw	r5,-8(fp)
   1a4f0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1a4f4:	e0fffe17 	ldw	r3,-8(fp)
   1a4f8:	e0bffd17 	ldw	r2,-12(fp)
   1a4fc:	18800c26 	beq	r3,r2,1a530 <alt_load_section+0x54>
  {
    while( to != end )
   1a500:	00000806 	br	1a524 <alt_load_section+0x48>
    {
      *to++ = *from++;
   1a504:	e0bffe17 	ldw	r2,-8(fp)
   1a508:	10c00104 	addi	r3,r2,4
   1a50c:	e0fffe15 	stw	r3,-8(fp)
   1a510:	e0fffd17 	ldw	r3,-12(fp)
   1a514:	19000104 	addi	r4,r3,4
   1a518:	e13ffd15 	stw	r4,-12(fp)
   1a51c:	18c00017 	ldw	r3,0(r3)
   1a520:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1a524:	e0fffe17 	ldw	r3,-8(fp)
   1a528:	e0bfff17 	ldw	r2,-4(fp)
   1a52c:	18bff51e 	bne	r3,r2,1a504 <__alt_data_end+0xfc01a504>
    {
      *to++ = *from++;
    }
  }
}
   1a530:	0001883a 	nop
   1a534:	e037883a 	mov	sp,fp
   1a538:	df000017 	ldw	fp,0(sp)
   1a53c:	dec00104 	addi	sp,sp,4
   1a540:	f800283a 	ret

0001a544 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1a544:	defffe04 	addi	sp,sp,-8
   1a548:	dfc00115 	stw	ra,4(sp)
   1a54c:	df000015 	stw	fp,0(sp)
   1a550:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1a554:	018000b4 	movhi	r6,2
   1a558:	319e2804 	addi	r6,r6,30880
   1a55c:	014000b4 	movhi	r5,2
   1a560:	29574904 	addi	r5,r5,23844
   1a564:	010000b4 	movhi	r4,2
   1a568:	211e2804 	addi	r4,r4,30880
   1a56c:	001a4dc0 	call	1a4dc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1a570:	01800034 	movhi	r6,0
   1a574:	31809104 	addi	r6,r6,580
   1a578:	01400034 	movhi	r5,0
   1a57c:	29400804 	addi	r5,r5,32
   1a580:	01000034 	movhi	r4,0
   1a584:	21000804 	addi	r4,r4,32
   1a588:	001a4dc0 	call	1a4dc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1a58c:	018000b4 	movhi	r6,2
   1a590:	31974904 	addi	r6,r6,23844
   1a594:	014000b4 	movhi	r5,2
   1a598:	29526304 	addi	r5,r5,18828
   1a59c:	010000b4 	movhi	r4,2
   1a5a0:	21126304 	addi	r4,r4,18828
   1a5a4:	001a4dc0 	call	1a4dc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1a5a8:	00235100 	call	23510 <alt_dcache_flush_all>
  alt_icache_flush_all();
   1a5ac:	00236d00 	call	236d0 <alt_icache_flush_all>
}
   1a5b0:	0001883a 	nop
   1a5b4:	e037883a 	mov	sp,fp
   1a5b8:	dfc00117 	ldw	ra,4(sp)
   1a5bc:	df000017 	ldw	fp,0(sp)
   1a5c0:	dec00204 	addi	sp,sp,8
   1a5c4:	f800283a 	ret

0001a5c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a5c8:	defffe04 	addi	sp,sp,-8
   1a5cc:	dfc00115 	stw	ra,4(sp)
   1a5d0:	df000015 	stw	fp,0(sp)
   1a5d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a5d8:	d0a00d17 	ldw	r2,-32716(gp)
   1a5dc:	10000326 	beq	r2,zero,1a5ec <alt_get_errno+0x24>
   1a5e0:	d0a00d17 	ldw	r2,-32716(gp)
   1a5e4:	103ee83a 	callr	r2
   1a5e8:	00000106 	br	1a5f0 <alt_get_errno+0x28>
   1a5ec:	d0a71304 	addi	r2,gp,-25524
}
   1a5f0:	e037883a 	mov	sp,fp
   1a5f4:	dfc00117 	ldw	ra,4(sp)
   1a5f8:	df000017 	ldw	fp,0(sp)
   1a5fc:	dec00204 	addi	sp,sp,8
   1a600:	f800283a 	ret

0001a604 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1a604:	defff904 	addi	sp,sp,-28
   1a608:	dfc00615 	stw	ra,24(sp)
   1a60c:	df000515 	stw	fp,20(sp)
   1a610:	df000504 	addi	fp,sp,20
   1a614:	e13ffd15 	stw	r4,-12(fp)
   1a618:	e17ffe15 	stw	r5,-8(fp)
   1a61c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1a620:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a624:	e0bffd17 	ldw	r2,-12(fp)
   1a628:	10000616 	blt	r2,zero,1a644 <lseek+0x40>
   1a62c:	e0bffd17 	ldw	r2,-12(fp)
   1a630:	10c00324 	muli	r3,r2,12
   1a634:	008000b4 	movhi	r2,2
   1a638:	10997c04 	addi	r2,r2,26096
   1a63c:	1885883a 	add	r2,r3,r2
   1a640:	00000106 	br	1a648 <lseek+0x44>
   1a644:	0005883a 	mov	r2,zero
   1a648:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   1a64c:	e0bffc17 	ldw	r2,-16(fp)
   1a650:	10001026 	beq	r2,zero,1a694 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1a654:	e0bffc17 	ldw	r2,-16(fp)
   1a658:	10800017 	ldw	r2,0(r2)
   1a65c:	10800717 	ldw	r2,28(r2)
   1a660:	10000926 	beq	r2,zero,1a688 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1a664:	e0bffc17 	ldw	r2,-16(fp)
   1a668:	10800017 	ldw	r2,0(r2)
   1a66c:	10800717 	ldw	r2,28(r2)
   1a670:	e1bfff17 	ldw	r6,-4(fp)
   1a674:	e17ffe17 	ldw	r5,-8(fp)
   1a678:	e13ffc17 	ldw	r4,-16(fp)
   1a67c:	103ee83a 	callr	r2
   1a680:	e0bffb15 	stw	r2,-20(fp)
   1a684:	00000506 	br	1a69c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1a688:	00bfde84 	movi	r2,-134
   1a68c:	e0bffb15 	stw	r2,-20(fp)
   1a690:	00000206 	br	1a69c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   1a694:	00bfebc4 	movi	r2,-81
   1a698:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   1a69c:	e0bffb17 	ldw	r2,-20(fp)
   1a6a0:	1000070e 	bge	r2,zero,1a6c0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   1a6a4:	001a5c80 	call	1a5c8 <alt_get_errno>
   1a6a8:	1007883a 	mov	r3,r2
   1a6ac:	e0bffb17 	ldw	r2,-20(fp)
   1a6b0:	0085c83a 	sub	r2,zero,r2
   1a6b4:	18800015 	stw	r2,0(r3)
    rc = -1;
   1a6b8:	00bfffc4 	movi	r2,-1
   1a6bc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   1a6c0:	e0bffb17 	ldw	r2,-20(fp)
}
   1a6c4:	e037883a 	mov	sp,fp
   1a6c8:	dfc00117 	ldw	ra,4(sp)
   1a6cc:	df000017 	ldw	fp,0(sp)
   1a6d0:	dec00204 	addi	sp,sp,8
   1a6d4:	f800283a 	ret

0001a6d8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1a6d8:	defff904 	addi	sp,sp,-28
   1a6dc:	dfc00615 	stw	ra,24(sp)
   1a6e0:	df000515 	stw	fp,20(sp)
   1a6e4:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1a6e8:	0009883a 	mov	r4,zero
   1a6ec:	00226380 	call	22638 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1a6f0:	001b6940 	call	1b694 <OSInit>
   1a6f4:	01000044 	movi	r4,1
   1a6f8:	001fff40 	call	1fff4 <OSSemCreate>
   1a6fc:	d0a71c15 	stw	r2,-25488(gp)
   1a700:	01000044 	movi	r4,1
   1a704:	001fff40 	call	1fff4 <OSSemCreate>
   1a708:	d0a71e15 	stw	r2,-25480(gp)
   1a70c:	d0a71704 	addi	r2,gp,-25508
   1a710:	e0bffc15 	stw	r2,-16(fp)
   1a714:	00800044 	movi	r2,1
   1a718:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   1a71c:	e0bffd0b 	ldhu	r2,-12(fp)
   1a720:	1009883a 	mov	r4,r2
   1a724:	001fff40 	call	1fff4 <OSSemCreate>
   1a728:	1007883a 	mov	r3,r2
   1a72c:	e0bffc17 	ldw	r2,-16(fp)
   1a730:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1a734:	00226700 	call	22670 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1a738:	018000b4 	movhi	r6,2
   1a73c:	3196f804 	addi	r6,r6,23520
   1a740:	014000b4 	movhi	r5,2
   1a744:	2956f804 	addi	r5,r5,23520
   1a748:	010000b4 	movhi	r4,2
   1a74c:	2116f804 	addi	r4,r4,23520
   1a750:	0023a680 	call	23a68 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1a754:	00236100 	call	23610 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1a758:	010000b4 	movhi	r4,2
   1a75c:	210d9c04 	addi	r4,r4,13936
   1a760:	00245f80 	call	245f8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1a764:	d0a71817 	ldw	r2,-25504(gp)
   1a768:	d0e71917 	ldw	r3,-25500(gp)
   1a76c:	d1271a17 	ldw	r4,-25496(gp)
   1a770:	200d883a 	mov	r6,r4
   1a774:	180b883a 	mov	r5,r3
   1a778:	1009883a 	mov	r4,r2
   1a77c:	00002d40 	call	2d4 <main>
   1a780:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   1a784:	01000044 	movi	r4,1
   1a788:	001a2140 	call	1a214 <close>
  exit (result);
   1a78c:	e13ffb17 	ldw	r4,-20(fp)
   1a790:	002460c0 	call	2460c <exit>

0001a794 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a794:	defffe04 	addi	sp,sp,-8
   1a798:	dfc00115 	stw	ra,4(sp)
   1a79c:	df000015 	stw	fp,0(sp)
   1a7a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a7a4:	d0a00d17 	ldw	r2,-32716(gp)
   1a7a8:	10000326 	beq	r2,zero,1a7b8 <alt_get_errno+0x24>
   1a7ac:	d0a00d17 	ldw	r2,-32716(gp)
   1a7b0:	103ee83a 	callr	r2
   1a7b4:	00000106 	br	1a7bc <alt_get_errno+0x28>
   1a7b8:	d0a71304 	addi	r2,gp,-25524
}
   1a7bc:	e037883a 	mov	sp,fp
   1a7c0:	dfc00117 	ldw	ra,4(sp)
   1a7c4:	df000017 	ldw	fp,0(sp)
   1a7c8:	dec00204 	addi	sp,sp,8
   1a7cc:	f800283a 	ret

0001a7d0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1a7d0:	defff904 	addi	sp,sp,-28
   1a7d4:	dfc00615 	stw	ra,24(sp)
   1a7d8:	df000515 	stw	fp,20(sp)
   1a7dc:	df000504 	addi	fp,sp,20
   1a7e0:	e13ffd15 	stw	r4,-12(fp)
   1a7e4:	e17ffe15 	stw	r5,-8(fp)
   1a7e8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a7ec:	e0bffd17 	ldw	r2,-12(fp)
   1a7f0:	10000616 	blt	r2,zero,1a80c <read+0x3c>
   1a7f4:	e0bffd17 	ldw	r2,-12(fp)
   1a7f8:	10c00324 	muli	r3,r2,12
   1a7fc:	008000b4 	movhi	r2,2
   1a800:	10997c04 	addi	r2,r2,26096
   1a804:	1885883a 	add	r2,r3,r2
   1a808:	00000106 	br	1a810 <read+0x40>
   1a80c:	0005883a 	mov	r2,zero
   1a810:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1a814:	e0bffb17 	ldw	r2,-20(fp)
   1a818:	10002226 	beq	r2,zero,1a8a4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1a81c:	e0bffb17 	ldw	r2,-20(fp)
   1a820:	10800217 	ldw	r2,8(r2)
   1a824:	108000cc 	andi	r2,r2,3
   1a828:	10800060 	cmpeqi	r2,r2,1
   1a82c:	1000181e 	bne	r2,zero,1a890 <read+0xc0>
        (fd->dev->read))
   1a830:	e0bffb17 	ldw	r2,-20(fp)
   1a834:	10800017 	ldw	r2,0(r2)
   1a838:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1a83c:	10001426 	beq	r2,zero,1a890 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1a840:	e0bffb17 	ldw	r2,-20(fp)
   1a844:	10800017 	ldw	r2,0(r2)
   1a848:	10800517 	ldw	r2,20(r2)
   1a84c:	e0ffff17 	ldw	r3,-4(fp)
   1a850:	180d883a 	mov	r6,r3
   1a854:	e17ffe17 	ldw	r5,-8(fp)
   1a858:	e13ffb17 	ldw	r4,-20(fp)
   1a85c:	103ee83a 	callr	r2
   1a860:	e0bffc15 	stw	r2,-16(fp)
   1a864:	e0bffc17 	ldw	r2,-16(fp)
   1a868:	1000070e 	bge	r2,zero,1a888 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   1a86c:	001a7940 	call	1a794 <alt_get_errno>
   1a870:	1007883a 	mov	r3,r2
   1a874:	e0bffc17 	ldw	r2,-16(fp)
   1a878:	0085c83a 	sub	r2,zero,r2
   1a87c:	18800015 	stw	r2,0(r3)
          return -1;
   1a880:	00bfffc4 	movi	r2,-1
   1a884:	00000c06 	br	1a8b8 <read+0xe8>
        }
        return rval;
   1a888:	e0bffc17 	ldw	r2,-16(fp)
   1a88c:	00000a06 	br	1a8b8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1a890:	001a7940 	call	1a794 <alt_get_errno>
   1a894:	1007883a 	mov	r3,r2
   1a898:	00800344 	movi	r2,13
   1a89c:	18800015 	stw	r2,0(r3)
   1a8a0:	00000406 	br	1a8b4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1a8a4:	001a7940 	call	1a794 <alt_get_errno>
   1a8a8:	1007883a 	mov	r3,r2
   1a8ac:	00801444 	movi	r2,81
   1a8b0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1a8b4:	00bfffc4 	movi	r2,-1
}
   1a8b8:	e037883a 	mov	sp,fp
   1a8bc:	dfc00117 	ldw	ra,4(sp)
   1a8c0:	df000017 	ldw	fp,0(sp)
   1a8c4:	dec00204 	addi	sp,sp,8
   1a8c8:	f800283a 	ret

0001a8cc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1a8cc:	defffe04 	addi	sp,sp,-8
   1a8d0:	df000115 	stw	fp,4(sp)
   1a8d4:	df000104 	addi	fp,sp,4
   1a8d8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   1a8dc:	e0bfff17 	ldw	r2,-4(fp)
   1a8e0:	108000d0 	cmplti	r2,r2,3
   1a8e4:	10000d1e 	bne	r2,zero,1a91c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   1a8e8:	008000b4 	movhi	r2,2
   1a8ec:	10997c04 	addi	r2,r2,26096
   1a8f0:	e0ffff17 	ldw	r3,-4(fp)
   1a8f4:	18c00324 	muli	r3,r3,12
   1a8f8:	10c5883a 	add	r2,r2,r3
   1a8fc:	10800204 	addi	r2,r2,8
   1a900:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1a904:	008000b4 	movhi	r2,2
   1a908:	10997c04 	addi	r2,r2,26096
   1a90c:	e0ffff17 	ldw	r3,-4(fp)
   1a910:	18c00324 	muli	r3,r3,12
   1a914:	10c5883a 	add	r2,r2,r3
   1a918:	10000015 	stw	zero,0(r2)
  }
}
   1a91c:	0001883a 	nop
   1a920:	e037883a 	mov	sp,fp
   1a924:	df000017 	ldw	fp,0(sp)
   1a928:	dec00104 	addi	sp,sp,4
   1a92c:	f800283a 	ret

0001a930 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1a930:	defff904 	addi	sp,sp,-28
   1a934:	df000615 	stw	fp,24(sp)
   1a938:	df000604 	addi	fp,sp,24
   1a93c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a940:	0005303a 	rdctl	r2,status
   1a944:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a948:	e0fffe17 	ldw	r3,-8(fp)
   1a94c:	00bfff84 	movi	r2,-2
   1a950:	1884703a 	and	r2,r3,r2
   1a954:	1001703a 	wrctl	status,r2
  
  return context;
   1a958:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1a95c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1a960:	d0a00e17 	ldw	r2,-32712(gp)
   1a964:	10c000c4 	addi	r3,r2,3
   1a968:	00bfff04 	movi	r2,-4
   1a96c:	1884703a 	and	r2,r3,r2
   1a970:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1a974:	d0e00e17 	ldw	r3,-32712(gp)
   1a978:	e0bfff17 	ldw	r2,-4(fp)
   1a97c:	1887883a 	add	r3,r3,r2
   1a980:	00810034 	movhi	r2,1024
   1a984:	10800004 	addi	r2,r2,0
   1a988:	10c0062e 	bgeu	r2,r3,1a9a4 <sbrk+0x74>
   1a98c:	e0bffb17 	ldw	r2,-20(fp)
   1a990:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a994:	e0bffa17 	ldw	r2,-24(fp)
   1a998:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1a99c:	00bfffc4 	movi	r2,-1
   1a9a0:	00000b06 	br	1a9d0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   1a9a4:	d0a00e17 	ldw	r2,-32712(gp)
   1a9a8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   1a9ac:	d0e00e17 	ldw	r3,-32712(gp)
   1a9b0:	e0bfff17 	ldw	r2,-4(fp)
   1a9b4:	1885883a 	add	r2,r3,r2
   1a9b8:	d0a00e15 	stw	r2,-32712(gp)
   1a9bc:	e0bffb17 	ldw	r2,-20(fp)
   1a9c0:	e0bffc15 	stw	r2,-16(fp)
   1a9c4:	e0bffc17 	ldw	r2,-16(fp)
   1a9c8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1a9cc:	e0bffd17 	ldw	r2,-12(fp)
} 
   1a9d0:	e037883a 	mov	sp,fp
   1a9d4:	df000017 	ldw	fp,0(sp)
   1a9d8:	dec00104 	addi	sp,sp,4
   1a9dc:	f800283a 	ret

0001a9e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a9e0:	defffe04 	addi	sp,sp,-8
   1a9e4:	dfc00115 	stw	ra,4(sp)
   1a9e8:	df000015 	stw	fp,0(sp)
   1a9ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a9f0:	d0a00d17 	ldw	r2,-32716(gp)
   1a9f4:	10000326 	beq	r2,zero,1aa04 <alt_get_errno+0x24>
   1a9f8:	d0a00d17 	ldw	r2,-32716(gp)
   1a9fc:	103ee83a 	callr	r2
   1aa00:	00000106 	br	1aa08 <alt_get_errno+0x28>
   1aa04:	d0a71304 	addi	r2,gp,-25524
}
   1aa08:	e037883a 	mov	sp,fp
   1aa0c:	dfc00117 	ldw	ra,4(sp)
   1aa10:	df000017 	ldw	fp,0(sp)
   1aa14:	dec00204 	addi	sp,sp,8
   1aa18:	f800283a 	ret

0001aa1c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1aa1c:	defff904 	addi	sp,sp,-28
   1aa20:	dfc00615 	stw	ra,24(sp)
   1aa24:	df000515 	stw	fp,20(sp)
   1aa28:	df000504 	addi	fp,sp,20
   1aa2c:	e13ffd15 	stw	r4,-12(fp)
   1aa30:	e17ffe15 	stw	r5,-8(fp)
   1aa34:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1aa38:	e0bffd17 	ldw	r2,-12(fp)
   1aa3c:	10000616 	blt	r2,zero,1aa58 <write+0x3c>
   1aa40:	e0bffd17 	ldw	r2,-12(fp)
   1aa44:	10c00324 	muli	r3,r2,12
   1aa48:	008000b4 	movhi	r2,2
   1aa4c:	10997c04 	addi	r2,r2,26096
   1aa50:	1885883a 	add	r2,r3,r2
   1aa54:	00000106 	br	1aa5c <write+0x40>
   1aa58:	0005883a 	mov	r2,zero
   1aa5c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1aa60:	e0bffb17 	ldw	r2,-20(fp)
   1aa64:	10002126 	beq	r2,zero,1aaec <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1aa68:	e0bffb17 	ldw	r2,-20(fp)
   1aa6c:	10800217 	ldw	r2,8(r2)
   1aa70:	108000cc 	andi	r2,r2,3
   1aa74:	10001826 	beq	r2,zero,1aad8 <write+0xbc>
   1aa78:	e0bffb17 	ldw	r2,-20(fp)
   1aa7c:	10800017 	ldw	r2,0(r2)
   1aa80:	10800617 	ldw	r2,24(r2)
   1aa84:	10001426 	beq	r2,zero,1aad8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1aa88:	e0bffb17 	ldw	r2,-20(fp)
   1aa8c:	10800017 	ldw	r2,0(r2)
   1aa90:	10800617 	ldw	r2,24(r2)
   1aa94:	e0ffff17 	ldw	r3,-4(fp)
   1aa98:	180d883a 	mov	r6,r3
   1aa9c:	e17ffe17 	ldw	r5,-8(fp)
   1aaa0:	e13ffb17 	ldw	r4,-20(fp)
   1aaa4:	103ee83a 	callr	r2
   1aaa8:	e0bffc15 	stw	r2,-16(fp)
   1aaac:	e0bffc17 	ldw	r2,-16(fp)
   1aab0:	1000070e 	bge	r2,zero,1aad0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   1aab4:	001a9e00 	call	1a9e0 <alt_get_errno>
   1aab8:	1007883a 	mov	r3,r2
   1aabc:	e0bffc17 	ldw	r2,-16(fp)
   1aac0:	0085c83a 	sub	r2,zero,r2
   1aac4:	18800015 	stw	r2,0(r3)
        return -1;
   1aac8:	00bfffc4 	movi	r2,-1
   1aacc:	00000c06 	br	1ab00 <write+0xe4>
      }
      return rval;
   1aad0:	e0bffc17 	ldw	r2,-16(fp)
   1aad4:	00000a06 	br	1ab00 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1aad8:	001a9e00 	call	1a9e0 <alt_get_errno>
   1aadc:	1007883a 	mov	r3,r2
   1aae0:	00800344 	movi	r2,13
   1aae4:	18800015 	stw	r2,0(r3)
   1aae8:	00000406 	br	1aafc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1aaec:	001a9e00 	call	1a9e0 <alt_get_errno>
   1aaf0:	1007883a 	mov	r3,r2
   1aaf4:	00801444 	movi	r2,81
   1aaf8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1aafc:	00bfffc4 	movi	r2,-1
}
   1ab00:	e037883a 	mov	sp,fp
   1ab04:	dfc00117 	ldw	ra,4(sp)
   1ab08:	df000017 	ldw	fp,0(sp)
   1ab0c:	dec00204 	addi	sp,sp,8
   1ab10:	f800283a 	ret

0001ab14 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   1ab14:	deffdf04 	addi	sp,sp,-132
   1ab18:	dfc02015 	stw	ra,128(sp)
   1ab1c:	df001f15 	stw	fp,124(sp)
   1ab20:	df001f04 	addi	fp,sp,124
   1ab24:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   1ab28:	e0bfe204 	addi	r2,fp,-120
   1ab2c:	100b883a 	mov	r5,r2
   1ab30:	01003fc4 	movi	r4,255
   1ab34:	0021f7c0 	call	21f7c <OSTaskQuery>
   1ab38:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   1ab3c:	e0bffe83 	ldbu	r2,-6(fp)
   1ab40:	10803fcc 	andi	r2,r2,255
   1ab44:	10001e1e 	bne	r2,zero,1abc0 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
   1ab48:	e0bfee83 	ldbu	r2,-70(fp)
   1ab4c:	10803fcc 	andi	r2,r2,255
   1ab50:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   1ab54:	d0a71c17 	ldw	r2,-25488(gp)
   1ab58:	e0fffd04 	addi	r3,fp,-12
   1ab5c:	180b883a 	mov	r5,r3
   1ab60:	1009883a 	mov	r4,r2
   1ab64:	00207940 	call	20794 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   1ab68:	e0bffe43 	ldbu	r2,-7(fp)
   1ab6c:	10803fcc 	andi	r2,r2,255
   1ab70:	10000726 	beq	r2,zero,1ab90 <__env_lock+0x7c>
   1ab74:	d0a00f17 	ldw	r2,-32708(gp)
   1ab78:	e0ffe117 	ldw	r3,-124(fp)
   1ab7c:	1880041e 	bne	r3,r2,1ab90 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
   1ab80:	d0a71b17 	ldw	r2,-25492(gp)
   1ab84:	10800044 	addi	r2,r2,1
   1ab88:	d0a71b15 	stw	r2,-25492(gp)
   1ab8c:	00000a06 	br	1abb8 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   1ab90:	d0a71c17 	ldw	r2,-25488(gp)
   1ab94:	e0fffe84 	addi	r3,fp,-6
   1ab98:	180d883a 	mov	r6,r3
   1ab9c:	000b883a 	mov	r5,zero
   1aba0:	1009883a 	mov	r4,r2
   1aba4:	002030c0 	call	2030c <OSSemPend>
    locks  = 1;
   1aba8:	00800044 	movi	r2,1
   1abac:	d0a71b15 	stw	r2,-25492(gp)
    lockid = id;
   1abb0:	e0bfe117 	ldw	r2,-124(fp)
   1abb4:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   1abb8:	0001883a 	nop
   1abbc:	00000106 	br	1abc4 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   1abc0:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   1abc4:	e037883a 	mov	sp,fp
   1abc8:	dfc00117 	ldw	ra,4(sp)
   1abcc:	df000017 	ldw	fp,0(sp)
   1abd0:	dec00204 	addi	sp,sp,8
   1abd4:	f800283a 	ret

0001abd8 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   1abd8:	defffd04 	addi	sp,sp,-12
   1abdc:	dfc00215 	stw	ra,8(sp)
   1abe0:	df000115 	stw	fp,4(sp)
   1abe4:	df000104 	addi	fp,sp,4
   1abe8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   1abec:	d0a71b17 	ldw	r2,-25492(gp)
   1abf0:	10000b26 	beq	r2,zero,1ac20 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   1abf4:	d0a71b17 	ldw	r2,-25492(gp)
   1abf8:	10bfffc4 	addi	r2,r2,-1
   1abfc:	d0a71b15 	stw	r2,-25492(gp)
   1ac00:	d0a71b17 	ldw	r2,-25492(gp)
   1ac04:	1000071e 	bne	r2,zero,1ac24 <__env_unlock+0x4c>
  {
    lockid = -1;
   1ac08:	00bfffc4 	movi	r2,-1
   1ac0c:	d0a00f15 	stw	r2,-32708(gp)
    OSSemPost( alt_envsem );
   1ac10:	d0a71c17 	ldw	r2,-25488(gp)
   1ac14:	1009883a 	mov	r4,r2
   1ac18:	00206840 	call	20684 <OSSemPost>
   1ac1c:	00000106 	br	1ac24 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
   1ac20:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   1ac24:	e037883a 	mov	sp,fp
   1ac28:	dfc00117 	ldw	ra,4(sp)
   1ac2c:	df000017 	ldw	fp,0(sp)
   1ac30:	dec00204 	addi	sp,sp,8
   1ac34:	f800283a 	ret

0001ac38 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   1ac38:	deffdb04 	addi	sp,sp,-148
   1ac3c:	dfc02415 	stw	ra,144(sp)
   1ac40:	df002315 	stw	fp,140(sp)
   1ac44:	df002304 	addi	fp,sp,140
   1ac48:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1ac4c:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   1ac50:	d0a71f43 	ldbu	r2,-25475(gp)
   1ac54:	10803fcc 	andi	r2,r2,255
   1ac58:	10800060 	cmpeqi	r2,r2,1
   1ac5c:	10003626 	beq	r2,zero,1ad38 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   1ac60:	e0bfe204 	addi	r2,fp,-120
   1ac64:	100b883a 	mov	r5,r2
   1ac68:	01003fc4 	movi	r4,255
   1ac6c:	0021f7c0 	call	21f7c <OSTaskQuery>
   1ac70:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   1ac74:	e0bffe83 	ldbu	r2,-6(fp)
   1ac78:	10803fcc 	andi	r2,r2,255
   1ac7c:	1000301e 	bne	r2,zero,1ad40 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
   1ac80:	e0bfee83 	ldbu	r2,-70(fp)
   1ac84:	10803fcc 	andi	r2,r2,255
   1ac88:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   1ac8c:	d0a71e17 	ldw	r2,-25480(gp)
   1ac90:	e0fffd04 	addi	r3,fp,-12
   1ac94:	180b883a 	mov	r5,r3
   1ac98:	1009883a 	mov	r4,r2
   1ac9c:	00207940 	call	20794 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1aca0:	0005303a 	rdctl	r2,status
   1aca4:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1aca8:	e0ffe117 	ldw	r3,-124(fp)
   1acac:	00bfff84 	movi	r2,-2
   1acb0:	1884703a 	and	r2,r3,r2
   1acb4:	1001703a 	wrctl	status,r2
  
  return context;
   1acb8:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
   1acbc:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   1acc0:	e0bffd0b 	ldhu	r2,-12(fp)
   1acc4:	10bfffcc 	andi	r2,r2,65535
   1acc8:	10000b1e 	bne	r2,zero,1acf8 <__malloc_lock+0xc0>
   1accc:	d0a01017 	ldw	r2,-32704(gp)
   1acd0:	e0ffde17 	ldw	r3,-136(fp)
   1acd4:	1880081e 	bne	r3,r2,1acf8 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
   1acd8:	d0a71d17 	ldw	r2,-25484(gp)
   1acdc:	10800044 	addi	r2,r2,1
   1ace0:	d0a71d15 	stw	r2,-25484(gp)
   1ace4:	e0bfdd17 	ldw	r2,-140(fp)
   1ace8:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1acec:	e0bfdf17 	ldw	r2,-132(fp)
   1acf0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   1acf4:	00000e06 	br	1ad30 <__malloc_lock+0xf8>
   1acf8:	e0bfdd17 	ldw	r2,-140(fp)
   1acfc:	e0bfe015 	stw	r2,-128(fp)
   1ad00:	e0bfe017 	ldw	r2,-128(fp)
   1ad04:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   1ad08:	d0a71e17 	ldw	r2,-25480(gp)
   1ad0c:	e0fffe84 	addi	r3,fp,-6
   1ad10:	180d883a 	mov	r6,r3
   1ad14:	000b883a 	mov	r5,zero
   1ad18:	1009883a 	mov	r4,r2
   1ad1c:	002030c0 	call	2030c <OSSemPend>
    locks  = 1;
   1ad20:	00800044 	movi	r2,1
   1ad24:	d0a71d15 	stw	r2,-25484(gp)
    lockid = id;
   1ad28:	e0bfde17 	ldw	r2,-136(fp)
   1ad2c:	d0a01015 	stw	r2,-32704(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   1ad30:	0001883a 	nop
   1ad34:	00000306 	br	1ad44 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
   1ad38:	0001883a 	nop
   1ad3c:	00000106 	br	1ad44 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   1ad40:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   1ad44:	e037883a 	mov	sp,fp
   1ad48:	dfc00117 	ldw	ra,4(sp)
   1ad4c:	df000017 	ldw	fp,0(sp)
   1ad50:	dec00204 	addi	sp,sp,8
   1ad54:	f800283a 	ret

0001ad58 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1ad58:	defff804 	addi	sp,sp,-32
   1ad5c:	dfc00715 	stw	ra,28(sp)
   1ad60:	df000615 	stw	fp,24(sp)
   1ad64:	df000604 	addi	fp,sp,24
   1ad68:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1ad6c:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   1ad70:	d0a71f43 	ldbu	r2,-25475(gp)
   1ad74:	10803fcc 	andi	r2,r2,255
   1ad78:	10800060 	cmpeqi	r2,r2,1
   1ad7c:	10002326 	beq	r2,zero,1ae0c <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ad80:	0005303a 	rdctl	r2,status
   1ad84:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ad88:	e0fffe17 	ldw	r3,-8(fp)
   1ad8c:	00bfff84 	movi	r2,-2
   1ad90:	1884703a 	and	r2,r3,r2
   1ad94:	1001703a 	wrctl	status,r2
  
  return context;
   1ad98:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
   1ad9c:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   1ada0:	d0a71d17 	ldw	r2,-25484(gp)
   1ada4:	1000051e 	bne	r2,zero,1adbc <__malloc_unlock+0x64>
   1ada8:	e0bffa17 	ldw	r2,-24(fp)
   1adac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1adb0:	e0bffb17 	ldw	r2,-20(fp)
   1adb4:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   1adb8:	00001506 	br	1ae10 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   1adbc:	d0a71d17 	ldw	r2,-25484(gp)
   1adc0:	10bfffc4 	addi	r2,r2,-1
   1adc4:	d0a71d15 	stw	r2,-25484(gp)
   1adc8:	d0a71d17 	ldw	r2,-25484(gp)
   1adcc:	10000a1e 	bne	r2,zero,1adf8 <__malloc_unlock+0xa0>
  {
    lockid = -1;
   1add0:	00bfffc4 	movi	r2,-1
   1add4:	d0a01015 	stw	r2,-32704(gp)
   1add8:	e0bffa17 	ldw	r2,-24(fp)
   1addc:	e0bffc15 	stw	r2,-16(fp)
   1ade0:	e0bffc17 	ldw	r2,-16(fp)
   1ade4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   1ade8:	d0a71e17 	ldw	r2,-25480(gp)
   1adec:	1009883a 	mov	r4,r2
   1adf0:	00206840 	call	20684 <OSSemPost>
   1adf4:	00000606 	br	1ae10 <__malloc_unlock+0xb8>
   1adf8:	e0bffa17 	ldw	r2,-24(fp)
   1adfc:	e0bffd15 	stw	r2,-12(fp)
   1ae00:	e0bffd17 	ldw	r2,-12(fp)
   1ae04:	1001703a 	wrctl	status,r2
   1ae08:	00000106 	br	1ae10 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
   1ae0c:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   1ae10:	e037883a 	mov	sp,fp
   1ae14:	dfc00117 	ldw	ra,4(sp)
   1ae18:	df000017 	ldw	fp,0(sp)
   1ae1c:	dec00204 	addi	sp,sp,8
   1ae20:	f800283a 	ret

0001ae24 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   1ae24:	defff704 	addi	sp,sp,-36
   1ae28:	dfc00815 	stw	ra,32(sp)
   1ae2c:	df000715 	stw	fp,28(sp)
   1ae30:	df000704 	addi	fp,sp,28
   1ae34:	e13ffd15 	stw	r4,-12(fp)
   1ae38:	e17ffe15 	stw	r5,-8(fp)
   1ae3c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1ae40:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1ae44:	e0bfff17 	ldw	r2,-4(fp)
   1ae48:	1000021e 	bne	r2,zero,1ae54 <OSEventNameGet+0x30>
        return (0);
   1ae4c:	0005883a 	mov	r2,zero
   1ae50:	00003706 	br	1af30 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   1ae54:	e0bffd17 	ldw	r2,-12(fp)
   1ae58:	1000051e 	bne	r2,zero,1ae70 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   1ae5c:	e0bfff17 	ldw	r2,-4(fp)
   1ae60:	00c00104 	movi	r3,4
   1ae64:	10c00005 	stb	r3,0(r2)
        return (0);
   1ae68:	0005883a 	mov	r2,zero
   1ae6c:	00003006 	br	1af30 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1ae70:	e0bffe17 	ldw	r2,-8(fp)
   1ae74:	1000051e 	bne	r2,zero,1ae8c <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   1ae78:	e0bfff17 	ldw	r2,-4(fp)
   1ae7c:	00c00304 	movi	r3,12
   1ae80:	10c00005 	stb	r3,0(r2)
        return (0);
   1ae84:	0005883a 	mov	r2,zero
   1ae88:	00002906 	br	1af30 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1ae8c:	d0a72d03 	ldbu	r2,-25420(gp)
   1ae90:	10803fcc 	andi	r2,r2,255
   1ae94:	10000526 	beq	r2,zero,1aeac <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   1ae98:	e0bfff17 	ldw	r2,-4(fp)
   1ae9c:	00c00444 	movi	r3,17
   1aea0:	10c00005 	stb	r3,0(r2)
        return (0);
   1aea4:	0005883a 	mov	r2,zero
   1aea8:	00002106 	br	1af30 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   1aeac:	e0bffd17 	ldw	r2,-12(fp)
   1aeb0:	10800003 	ldbu	r2,0(r2)
   1aeb4:	10803fcc 	andi	r2,r2,255
   1aeb8:	10bfffc4 	addi	r2,r2,-1
   1aebc:	10800128 	cmpgeui	r2,r2,4
   1aec0:	10000526 	beq	r2,zero,1aed8 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   1aec4:	e0bfff17 	ldw	r2,-4(fp)
   1aec8:	00c00044 	movi	r3,1
   1aecc:	10c00005 	stb	r3,0(r2)
             return (0);
   1aed0:	0005883a 	mov	r2,zero
   1aed4:	00001606 	br	1af30 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   1aed8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1aedc:	0005303a 	rdctl	r2,status
   1aee0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1aee4:	e0fffb17 	ldw	r3,-20(fp)
   1aee8:	00bfff84 	movi	r2,-2
   1aeec:	1884703a 	and	r2,r3,r2
   1aef0:	1001703a 	wrctl	status,r2
  
  return context;
   1aef4:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   1aef8:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   1aefc:	e0bffd17 	ldw	r2,-12(fp)
   1af00:	10800384 	addi	r2,r2,14
   1af04:	100b883a 	mov	r5,r2
   1af08:	e13ffe17 	ldw	r4,-8(fp)
   1af0c:	001c8a80 	call	1c8a8 <OS_StrCopy>
   1af10:	e0bffa05 	stb	r2,-24(fp)
   1af14:	e0bff917 	ldw	r2,-28(fp)
   1af18:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1af1c:	e0bffc17 	ldw	r2,-16(fp)
   1af20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1af24:	e0bfff17 	ldw	r2,-4(fp)
   1af28:	10000005 	stb	zero,0(r2)
    return (len);
   1af2c:	e0bffa03 	ldbu	r2,-24(fp)
}
   1af30:	e037883a 	mov	sp,fp
   1af34:	dfc00117 	ldw	ra,4(sp)
   1af38:	df000017 	ldw	fp,0(sp)
   1af3c:	dec00204 	addi	sp,sp,8
   1af40:	f800283a 	ret

0001af44 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   1af44:	defff604 	addi	sp,sp,-40
   1af48:	dfc00915 	stw	ra,36(sp)
   1af4c:	df000815 	stw	fp,32(sp)
   1af50:	df000804 	addi	fp,sp,32
   1af54:	e13ffd15 	stw	r4,-12(fp)
   1af58:	e17ffe15 	stw	r5,-8(fp)
   1af5c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1af60:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1af64:	e0bfff17 	ldw	r2,-4(fp)
   1af68:	10004026 	beq	r2,zero,1b06c <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   1af6c:	e0bffd17 	ldw	r2,-12(fp)
   1af70:	1000041e 	bne	r2,zero,1af84 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   1af74:	e0bfff17 	ldw	r2,-4(fp)
   1af78:	00c00104 	movi	r3,4
   1af7c:	10c00005 	stb	r3,0(r2)
        return;
   1af80:	00003b06 	br	1b070 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1af84:	e0bffe17 	ldw	r2,-8(fp)
   1af88:	1000041e 	bne	r2,zero,1af9c <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   1af8c:	e0bfff17 	ldw	r2,-4(fp)
   1af90:	00c00304 	movi	r3,12
   1af94:	10c00005 	stb	r3,0(r2)
        return;
   1af98:	00003506 	br	1b070 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1af9c:	d0a72d03 	ldbu	r2,-25420(gp)
   1afa0:	10803fcc 	andi	r2,r2,255
   1afa4:	10000426 	beq	r2,zero,1afb8 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   1afa8:	e0bfff17 	ldw	r2,-4(fp)
   1afac:	00c00484 	movi	r3,18
   1afb0:	10c00005 	stb	r3,0(r2)
        return;
   1afb4:	00002e06 	br	1b070 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
   1afb8:	e0bffd17 	ldw	r2,-12(fp)
   1afbc:	10800003 	ldbu	r2,0(r2)
   1afc0:	10803fcc 	andi	r2,r2,255
   1afc4:	10bfffc4 	addi	r2,r2,-1
   1afc8:	10800128 	cmpgeui	r2,r2,4
   1afcc:	10000426 	beq	r2,zero,1afe0 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   1afd0:	e0bfff17 	ldw	r2,-4(fp)
   1afd4:	00c00044 	movi	r3,1
   1afd8:	10c00005 	stb	r3,0(r2)
             return;
   1afdc:	00002406 	br	1b070 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   1afe0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1afe4:	0005303a 	rdctl	r2,status
   1afe8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1afec:	e0fffc17 	ldw	r3,-16(fp)
   1aff0:	00bfff84 	movi	r2,-2
   1aff4:	1884703a 	and	r2,r3,r2
   1aff8:	1001703a 	wrctl	status,r2
  
  return context;
   1affc:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   1b000:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   1b004:	e13ffe17 	ldw	r4,-8(fp)
   1b008:	001c91c0 	call	1c91c <OS_StrLen>
   1b00c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   1b010:	e0bffa03 	ldbu	r2,-24(fp)
   1b014:	10800830 	cmpltui	r2,r2,32
   1b018:	1000081e 	bne	r2,zero,1b03c <OSEventNameSet+0xf8>
   1b01c:	e0bff817 	ldw	r2,-32(fp)
   1b020:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b024:	e0bff917 	ldw	r2,-28(fp)
   1b028:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   1b02c:	e0bfff17 	ldw	r2,-4(fp)
   1b030:	00c002c4 	movi	r3,11
   1b034:	10c00005 	stb	r3,0(r2)
        return;
   1b038:	00000d06 	br	1b070 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   1b03c:	e0bffd17 	ldw	r2,-12(fp)
   1b040:	10800384 	addi	r2,r2,14
   1b044:	e17ffe17 	ldw	r5,-8(fp)
   1b048:	1009883a 	mov	r4,r2
   1b04c:	001c8a80 	call	1c8a8 <OS_StrCopy>
   1b050:	e0bff817 	ldw	r2,-32(fp)
   1b054:	e0bffb15 	stw	r2,-20(fp)
   1b058:	e0bffb17 	ldw	r2,-20(fp)
   1b05c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1b060:	e0bfff17 	ldw	r2,-4(fp)
   1b064:	10000005 	stb	zero,0(r2)
   1b068:	00000106 	br	1b070 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   1b06c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   1b070:	e037883a 	mov	sp,fp
   1b074:	dfc00117 	ldw	ra,4(sp)
   1b078:	df000017 	ldw	fp,0(sp)
   1b07c:	dec00204 	addi	sp,sp,8
   1b080:	f800283a 	ret

0001b084 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   1b084:	deffed04 	addi	sp,sp,-76
   1b088:	dfc01215 	stw	ra,72(sp)
   1b08c:	df001115 	stw	fp,68(sp)
   1b090:	df001104 	addi	fp,sp,68
   1b094:	e13ffc15 	stw	r4,-16(fp)
   1b098:	e17ffd15 	stw	r5,-12(fp)
   1b09c:	e1bffe15 	stw	r6,-8(fp)
   1b0a0:	3805883a 	mov	r2,r7
   1b0a4:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   1b0a8:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   1b0ac:	e0800217 	ldw	r2,8(fp)
   1b0b0:	1000021e 	bne	r2,zero,1b0bc <OSEventPendMulti+0x38>
        return (0);
   1b0b4:	0005883a 	mov	r2,zero
   1b0b8:	00017106 	br	1b680 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   1b0bc:	e0bffc17 	ldw	r2,-16(fp)
   1b0c0:	1000051e 	bne	r2,zero,1b0d8 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   1b0c4:	e0800217 	ldw	r2,8(fp)
   1b0c8:	00c00104 	movi	r3,4
   1b0cc:	10c00005 	stb	r3,0(r2)
        return (0);
   1b0d0:	0005883a 	mov	r2,zero
   1b0d4:	00016a06 	br	1b680 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   1b0d8:	e0bffd17 	ldw	r2,-12(fp)
   1b0dc:	1000051e 	bne	r2,zero,1b0f4 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   1b0e0:	e0800217 	ldw	r2,8(fp)
   1b0e4:	00c00104 	movi	r3,4
   1b0e8:	10c00005 	stb	r3,0(r2)
        return (0);
   1b0ec:	0005883a 	mov	r2,zero
   1b0f0:	00016306 	br	1b680 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   1b0f4:	e0bffe17 	ldw	r2,-8(fp)
   1b0f8:	1000051e 	bne	r2,zero,1b110 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   1b0fc:	e0800217 	ldw	r2,8(fp)
   1b100:	00c00104 	movi	r3,4
   1b104:	10c00005 	stb	r3,0(r2)
        return (0);
   1b108:	0005883a 	mov	r2,zero
   1b10c:	00015c06 	br	1b680 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   1b110:	e0bffd17 	ldw	r2,-12(fp)
   1b114:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   1b118:	e0bffc17 	ldw	r2,-16(fp)
   1b11c:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   1b120:	e0bfef17 	ldw	r2,-68(fp)
   1b124:	10800017 	ldw	r2,0(r2)
   1b128:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   1b12c:	00001906 	br	1b194 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   1b130:	e0bff017 	ldw	r2,-64(fp)
   1b134:	10800003 	ldbu	r2,0(r2)
   1b138:	10803fcc 	andi	r2,r2,255
   1b13c:	10c000a0 	cmpeqi	r3,r2,2
   1b140:	1800091e 	bne	r3,zero,1b168 <OSEventPendMulti+0xe4>
   1b144:	10c000e0 	cmpeqi	r3,r2,3
   1b148:	1800091e 	bne	r3,zero,1b170 <OSEventPendMulti+0xec>
   1b14c:	10800060 	cmpeqi	r2,r2,1
   1b150:	1000091e 	bne	r2,zero,1b178 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   1b154:	e0800217 	ldw	r2,8(fp)
   1b158:	00c00044 	movi	r3,1
   1b15c:	10c00005 	stb	r3,0(r2)
                 return (0);
   1b160:	0005883a 	mov	r2,zero
   1b164:	00014606 	br	1b680 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   1b168:	0001883a 	nop
   1b16c:	00000306 	br	1b17c <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   1b170:	0001883a 	nop
   1b174:	00000106 	br	1b17c <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   1b178:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   1b17c:	e0bfef17 	ldw	r2,-68(fp)
   1b180:	10800104 	addi	r2,r2,4
   1b184:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   1b188:	e0bfef17 	ldw	r2,-68(fp)
   1b18c:	10800017 	ldw	r2,0(r2)
   1b190:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   1b194:	e0bff017 	ldw	r2,-64(fp)
   1b198:	103fe51e 	bne	r2,zero,1b130 <__alt_data_end+0xfc01b130>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   1b19c:	d0a72d03 	ldbu	r2,-25420(gp)
   1b1a0:	10803fcc 	andi	r2,r2,255
   1b1a4:	10000526 	beq	r2,zero,1b1bc <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   1b1a8:	e0800217 	ldw	r2,8(fp)
   1b1ac:	00c00084 	movi	r3,2
   1b1b0:	10c00005 	stb	r3,0(r2)
        return (0);
   1b1b4:	0005883a 	mov	r2,zero
   1b1b8:	00013106 	br	1b680 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   1b1bc:	d0a71f03 	ldbu	r2,-25476(gp)
   1b1c0:	10803fcc 	andi	r2,r2,255
   1b1c4:	10000526 	beq	r2,zero,1b1dc <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   1b1c8:	e0800217 	ldw	r2,8(fp)
   1b1cc:	00c00344 	movi	r3,13
   1b1d0:	10c00005 	stb	r3,0(r2)
        return (0);
   1b1d4:	0005883a 	mov	r2,zero
   1b1d8:	00012906 	br	1b680 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b1dc:	0005303a 	rdctl	r2,status
   1b1e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b1e4:	e0fffb17 	ldw	r3,-20(fp)
   1b1e8:	00bfff84 	movi	r2,-2
   1b1ec:	1884703a 	and	r2,r3,r2
   1b1f0:	1001703a 	wrctl	status,r2
  
  return context;
   1b1f4:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   1b1f8:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   1b1fc:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   1b200:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   1b204:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   1b208:	e0bffc17 	ldw	r2,-16(fp)
   1b20c:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   1b210:	e0bfef17 	ldw	r2,-68(fp)
   1b214:	10800017 	ldw	r2,0(r2)
   1b218:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   1b21c:	00008106 	br	1b424 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   1b220:	e0bff017 	ldw	r2,-64(fp)
   1b224:	10800003 	ldbu	r2,0(r2)
   1b228:	10803fcc 	andi	r2,r2,255
   1b22c:	10c000a0 	cmpeqi	r3,r2,2
   1b230:	18003c1e 	bne	r3,zero,1b324 <OSEventPendMulti+0x2a0>
   1b234:	10c000e0 	cmpeqi	r3,r2,3
   1b238:	1800031e 	bne	r3,zero,1b248 <OSEventPendMulti+0x1c4>
   1b23c:	10800060 	cmpeqi	r2,r2,1
   1b240:	10001e1e 	bne	r2,zero,1b2bc <OSEventPendMulti+0x238>
   1b244:	00006606 	br	1b3e0 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   1b248:	e0bff017 	ldw	r2,-64(fp)
   1b24c:	1080020b 	ldhu	r2,8(r2)
   1b250:	10bfffcc 	andi	r2,r2,65535
   1b254:	10001526 	beq	r2,zero,1b2ac <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   1b258:	e0bff017 	ldw	r2,-64(fp)
   1b25c:	1080020b 	ldhu	r2,8(r2)
   1b260:	10bfffc4 	addi	r2,r2,-1
   1b264:	1007883a 	mov	r3,r2
   1b268:	e0bff017 	ldw	r2,-64(fp)
   1b26c:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   1b270:	e0bffd17 	ldw	r2,-12(fp)
   1b274:	10c00104 	addi	r3,r2,4
   1b278:	e0fffd15 	stw	r3,-12(fp)
   1b27c:	e0fff017 	ldw	r3,-64(fp)
   1b280:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   1b284:	00800044 	movi	r2,1
   1b288:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   1b28c:	e0bffe17 	ldw	r2,-8(fp)
   1b290:	10c00104 	addi	r3,r2,4
   1b294:	e0fffe15 	stw	r3,-8(fp)
   1b298:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   1b29c:	e0bff18b 	ldhu	r2,-58(fp)
   1b2a0:	10800044 	addi	r2,r2,1
   1b2a4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   1b2a8:	00005806 	br	1b40c <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   1b2ac:	e0bff203 	ldbu	r2,-56(fp)
   1b2b0:	10800054 	ori	r2,r2,1
   1b2b4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   1b2b8:	00005406 	br	1b40c <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   1b2bc:	e0bff017 	ldw	r2,-64(fp)
   1b2c0:	10800117 	ldw	r2,4(r2)
   1b2c4:	10001326 	beq	r2,zero,1b314 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   1b2c8:	e0bffe17 	ldw	r2,-8(fp)
   1b2cc:	10c00104 	addi	r3,r2,4
   1b2d0:	e0fffe15 	stw	r3,-8(fp)
   1b2d4:	e0fff017 	ldw	r3,-64(fp)
   1b2d8:	18c00117 	ldw	r3,4(r3)
   1b2dc:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   1b2e0:	e0bff017 	ldw	r2,-64(fp)
   1b2e4:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   1b2e8:	e0bffd17 	ldw	r2,-12(fp)
   1b2ec:	10c00104 	addi	r3,r2,4
   1b2f0:	e0fffd15 	stw	r3,-12(fp)
   1b2f4:	e0fff017 	ldw	r3,-64(fp)
   1b2f8:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   1b2fc:	00800044 	movi	r2,1
   1b300:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   1b304:	e0bff18b 	ldhu	r2,-58(fp)
   1b308:	10800044 	addi	r2,r2,1
   1b30c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   1b310:	00003e06 	br	1b40c <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   1b314:	e0bff203 	ldbu	r2,-56(fp)
   1b318:	10800094 	ori	r2,r2,2
   1b31c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   1b320:	00003a06 	br	1b40c <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   1b324:	e0bff017 	ldw	r2,-64(fp)
   1b328:	10800117 	ldw	r2,4(r2)
   1b32c:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   1b330:	e0bff517 	ldw	r2,-44(fp)
   1b334:	1080058b 	ldhu	r2,22(r2)
   1b338:	10bfffcc 	andi	r2,r2,65535
   1b33c:	10002426 	beq	r2,zero,1b3d0 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   1b340:	e0bffe17 	ldw	r2,-8(fp)
   1b344:	10c00104 	addi	r3,r2,4
   1b348:	e0fffe15 	stw	r3,-8(fp)
   1b34c:	e0fff517 	ldw	r3,-44(fp)
   1b350:	18c00417 	ldw	r3,16(r3)
   1b354:	19400104 	addi	r5,r3,4
   1b358:	e13ff517 	ldw	r4,-44(fp)
   1b35c:	21400415 	stw	r5,16(r4)
   1b360:	18c00017 	ldw	r3,0(r3)
   1b364:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   1b368:	e0bff517 	ldw	r2,-44(fp)
   1b36c:	10c00417 	ldw	r3,16(r2)
   1b370:	e0bff517 	ldw	r2,-44(fp)
   1b374:	10800217 	ldw	r2,8(r2)
   1b378:	1880041e 	bne	r3,r2,1b38c <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   1b37c:	e0bff517 	ldw	r2,-44(fp)
   1b380:	10c00117 	ldw	r3,4(r2)
   1b384:	e0bff517 	ldw	r2,-44(fp)
   1b388:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   1b38c:	e0bff517 	ldw	r2,-44(fp)
   1b390:	1080058b 	ldhu	r2,22(r2)
   1b394:	10bfffc4 	addi	r2,r2,-1
   1b398:	1007883a 	mov	r3,r2
   1b39c:	e0bff517 	ldw	r2,-44(fp)
   1b3a0:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   1b3a4:	e0bffd17 	ldw	r2,-12(fp)
   1b3a8:	10c00104 	addi	r3,r2,4
   1b3ac:	e0fffd15 	stw	r3,-12(fp)
   1b3b0:	e0fff017 	ldw	r3,-64(fp)
   1b3b4:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   1b3b8:	00800044 	movi	r2,1
   1b3bc:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   1b3c0:	e0bff18b 	ldhu	r2,-58(fp)
   1b3c4:	10800044 	addi	r2,r2,1
   1b3c8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   1b3cc:	00000f06 	br	1b40c <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   1b3d0:	e0bff203 	ldbu	r2,-56(fp)
   1b3d4:	10800114 	ori	r2,r2,4
   1b3d8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   1b3dc:	00000b06 	br	1b40c <OSEventPendMulti+0x388>
   1b3e0:	e0bff317 	ldw	r2,-52(fp)
   1b3e4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b3e8:	e0bff417 	ldw	r2,-48(fp)
   1b3ec:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   1b3f0:	e0bffd17 	ldw	r2,-12(fp)
   1b3f4:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   1b3f8:	e0800217 	ldw	r2,8(fp)
   1b3fc:	00c00044 	movi	r3,1
   1b400:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   1b404:	e0bff18b 	ldhu	r2,-58(fp)
   1b408:	00009d06 	br	1b680 <OSEventPendMulti+0x5fc>
        }
        pevents++;
   1b40c:	e0bfef17 	ldw	r2,-68(fp)
   1b410:	10800104 	addi	r2,r2,4
   1b414:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   1b418:	e0bfef17 	ldw	r2,-68(fp)
   1b41c:	10800017 	ldw	r2,0(r2)
   1b420:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   1b424:	e0bff017 	ldw	r2,-64(fp)
   1b428:	103f7d1e 	bne	r2,zero,1b220 <__alt_data_end+0xfc01b220>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   1b42c:	e0bff103 	ldbu	r2,-60(fp)
   1b430:	10800058 	cmpnei	r2,r2,1
   1b434:	10000a1e 	bne	r2,zero,1b460 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   1b438:	e0bffd17 	ldw	r2,-12(fp)
   1b43c:	10000015 	stw	zero,0(r2)
   1b440:	e0bff317 	ldw	r2,-52(fp)
   1b444:	e0bff615 	stw	r2,-40(fp)
   1b448:	e0bff617 	ldw	r2,-40(fp)
   1b44c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   1b450:	e0800217 	ldw	r2,8(fp)
   1b454:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   1b458:	e0bff18b 	ldhu	r2,-58(fp)
   1b45c:	00008806 	br	1b680 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   1b460:	d0a72e17 	ldw	r2,-25416(gp)
   1b464:	d0e72e17 	ldw	r3,-25416(gp)
   1b468:	19000c03 	ldbu	r4,48(r3)
   1b46c:	e0fff203 	ldbu	r3,-56(fp)
   1b470:	20c6b03a 	or	r3,r4,r3
   1b474:	1809883a 	mov	r4,r3
   1b478:	00ffe004 	movi	r3,-128
   1b47c:	20c6b03a 	or	r3,r4,r3
   1b480:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1b484:	d0a72e17 	ldw	r2,-25416(gp)
   1b488:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   1b48c:	d0a72e17 	ldw	r2,-25416(gp)
   1b490:	e0ffff0b 	ldhu	r3,-4(fp)
   1b494:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   1b498:	e13ffc17 	ldw	r4,-16(fp)
   1b49c:	001bfc00 	call	1bfc0 <OS_EventTaskWaitMulti>
   1b4a0:	e0bff317 	ldw	r2,-52(fp)
   1b4a4:	e0bff915 	stw	r2,-28(fp)
   1b4a8:	e0bff917 	ldw	r2,-28(fp)
   1b4ac:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   1b4b0:	001c7640 	call	1c764 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b4b4:	0005303a 	rdctl	r2,status
   1b4b8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b4bc:	e0fff717 	ldw	r3,-36(fp)
   1b4c0:	00bfff84 	movi	r2,-2
   1b4c4:	1884703a 	and	r2,r3,r2
   1b4c8:	1001703a 	wrctl	status,r2
  
  return context;
   1b4cc:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   1b4d0:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   1b4d4:	d0a72e17 	ldw	r2,-25416(gp)
   1b4d8:	10800c43 	ldbu	r2,49(r2)
   1b4dc:	10803fcc 	andi	r2,r2,255
   1b4e0:	10000226 	beq	r2,zero,1b4ec <OSEventPendMulti+0x468>
   1b4e4:	108000a0 	cmpeqi	r2,r2,2
   1b4e8:	10001826 	beq	r2,zero,1b54c <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   1b4ec:	d0a72e17 	ldw	r2,-25416(gp)
   1b4f0:	10800717 	ldw	r2,28(r2)
   1b4f4:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   1b4f8:	e0bff017 	ldw	r2,-64(fp)
   1b4fc:	10000b26 	beq	r2,zero,1b52c <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   1b500:	e0bffd17 	ldw	r2,-12(fp)
   1b504:	10c00104 	addi	r3,r2,4
   1b508:	e0fffd15 	stw	r3,-12(fp)
   1b50c:	e0fff017 	ldw	r3,-64(fp)
   1b510:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   1b514:	e0bffd17 	ldw	r2,-12(fp)
   1b518:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   1b51c:	e0bff18b 	ldhu	r2,-58(fp)
   1b520:	10800044 	addi	r2,r2,1
   1b524:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   1b528:	00000d06 	br	1b560 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   1b52c:	d0a72e17 	ldw	r2,-25416(gp)
   1b530:	00c00044 	movi	r3,1
   1b534:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   1b538:	d0a72e17 	ldw	r2,-25416(gp)
   1b53c:	e17ffc17 	ldw	r5,-16(fp)
   1b540:	1009883a 	mov	r4,r2
   1b544:	001c1c80 	call	1c1c8 <OS_EventTaskRemoveMulti>
             }
			 break;
   1b548:	00000506 	br	1b560 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   1b54c:	d0a72e17 	ldw	r2,-25416(gp)
   1b550:	e17ffc17 	ldw	r5,-16(fp)
   1b554:	1009883a 	mov	r4,r2
   1b558:	001c1c80 	call	1c1c8 <OS_EventTaskRemoveMulti>
             break;
   1b55c:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   1b560:	d0a72e17 	ldw	r2,-25416(gp)
   1b564:	10800c43 	ldbu	r2,49(r2)
   1b568:	10803fcc 	andi	r2,r2,255
   1b56c:	10000326 	beq	r2,zero,1b57c <OSEventPendMulti+0x4f8>
   1b570:	108000a0 	cmpeqi	r2,r2,2
   1b574:	1000231e 	bne	r2,zero,1b604 <OSEventPendMulti+0x580>
   1b578:	00002a06 	br	1b624 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   1b57c:	e0bff017 	ldw	r2,-64(fp)
   1b580:	10800003 	ldbu	r2,0(r2)
   1b584:	10803fcc 	andi	r2,r2,255
   1b588:	0080100e 	bge	zero,r2,1b5cc <OSEventPendMulti+0x548>
   1b58c:	10c000d0 	cmplti	r3,r2,3
   1b590:	1800071e 	bne	r3,zero,1b5b0 <OSEventPendMulti+0x52c>
   1b594:	108000e0 	cmpeqi	r2,r2,3
   1b598:	10000c26 	beq	r2,zero,1b5cc <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   1b59c:	e0bffe17 	ldw	r2,-8(fp)
   1b5a0:	10c00104 	addi	r3,r2,4
   1b5a4:	e0fffe15 	stw	r3,-8(fp)
   1b5a8:	10000015 	stw	zero,0(r2)
                      break;
   1b5ac:	00001206 	br	1b5f8 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   1b5b0:	e0bffe17 	ldw	r2,-8(fp)
   1b5b4:	10c00104 	addi	r3,r2,4
   1b5b8:	e0fffe15 	stw	r3,-8(fp)
   1b5bc:	d0e72e17 	ldw	r3,-25416(gp)
   1b5c0:	18c00917 	ldw	r3,36(r3)
   1b5c4:	10c00015 	stw	r3,0(r2)
                      break;
   1b5c8:	00000b06 	br	1b5f8 <OSEventPendMulti+0x574>
   1b5cc:	e0bff317 	ldw	r2,-52(fp)
   1b5d0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b5d4:	e0bff817 	ldw	r2,-32(fp)
   1b5d8:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   1b5dc:	e0bffd17 	ldw	r2,-12(fp)
   1b5e0:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   1b5e4:	e0800217 	ldw	r2,8(fp)
   1b5e8:	00c00044 	movi	r3,1
   1b5ec:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   1b5f0:	e0bff18b 	ldhu	r2,-58(fp)
   1b5f4:	00002206 	br	1b680 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   1b5f8:	e0800217 	ldw	r2,8(fp)
   1b5fc:	10000005 	stb	zero,0(r2)
             break;
   1b600:	00001006 	br	1b644 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   1b604:	e0bffe17 	ldw	r2,-8(fp)
   1b608:	10c00104 	addi	r3,r2,4
   1b60c:	e0fffe15 	stw	r3,-8(fp)
   1b610:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   1b614:	e0800217 	ldw	r2,8(fp)
   1b618:	00c00384 	movi	r3,14
   1b61c:	10c00005 	stb	r3,0(r2)
             break;
   1b620:	00000806 	br	1b644 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   1b624:	e0bffe17 	ldw	r2,-8(fp)
   1b628:	10c00104 	addi	r3,r2,4
   1b62c:	e0fffe15 	stw	r3,-8(fp)
   1b630:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   1b634:	e0800217 	ldw	r2,8(fp)
   1b638:	00c00284 	movi	r3,10
   1b63c:	10c00005 	stb	r3,0(r2)
             break;
   1b640:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   1b644:	d0a72e17 	ldw	r2,-25416(gp)
   1b648:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   1b64c:	d0a72e17 	ldw	r2,-25416(gp)
   1b650:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   1b654:	d0a72e17 	ldw	r2,-25416(gp)
   1b658:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   1b65c:	d0a72e17 	ldw	r2,-25416(gp)
   1b660:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   1b664:	d0a72e17 	ldw	r2,-25416(gp)
   1b668:	10000915 	stw	zero,36(r2)
   1b66c:	e0bff317 	ldw	r2,-52(fp)
   1b670:	e0bffa15 	stw	r2,-24(fp)
   1b674:	e0bffa17 	ldw	r2,-24(fp)
   1b678:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   1b67c:	e0bff18b 	ldhu	r2,-58(fp)
}
   1b680:	e037883a 	mov	sp,fp
   1b684:	dfc00117 	ldw	ra,4(sp)
   1b688:	df000017 	ldw	fp,0(sp)
   1b68c:	dec00204 	addi	sp,sp,8
   1b690:	f800283a 	ret

0001b694 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   1b694:	defffe04 	addi	sp,sp,-8
   1b698:	dfc00115 	stw	ra,4(sp)
   1b69c:	df000015 	stw	fp,0(sp)
   1b6a0:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   1b6a4:	00241d40 	call	241d4 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   1b6a8:	001c4100 	call	1c410 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   1b6ac:	001c4580 	call	1c458 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   1b6b0:	001c5c40 	call	1c5c4 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   1b6b4:	001c3300 	call	1c330 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   1b6b8:	001e4740 	call	1e474 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   1b6bc:	001ed740 	call	1ed74 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   1b6c0:	001fe9c0 	call	1fe9c <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   1b6c4:	001c4c40 	call	1c4c4 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   1b6c8:	001c5440 	call	1c544 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   1b6cc:	00241f40 	call	241f4 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   1b6d0:	001ce480 	call	1ce48 <OSDebugInit>
#endif
}
   1b6d4:	0001883a 	nop
   1b6d8:	e037883a 	mov	sp,fp
   1b6dc:	dfc00117 	ldw	ra,4(sp)
   1b6e0:	df000017 	ldw	fp,0(sp)
   1b6e4:	dec00204 	addi	sp,sp,8
   1b6e8:	f800283a 	ret

0001b6ec <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   1b6ec:	deffff04 	addi	sp,sp,-4
   1b6f0:	df000015 	stw	fp,0(sp)
   1b6f4:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
   1b6f8:	d0a71f43 	ldbu	r2,-25475(gp)
   1b6fc:	10803fcc 	andi	r2,r2,255
   1b700:	10800058 	cmpnei	r2,r2,1
   1b704:	1000071e 	bne	r2,zero,1b724 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
   1b708:	d0a72d03 	ldbu	r2,-25420(gp)
   1b70c:	10803fcc 	andi	r2,r2,255
   1b710:	10803fe0 	cmpeqi	r2,r2,255
   1b714:	1000031e 	bne	r2,zero,1b724 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   1b718:	d0a72d03 	ldbu	r2,-25420(gp)
   1b71c:	10800044 	addi	r2,r2,1
   1b720:	d0a72d05 	stb	r2,-25420(gp)
        }
    }
}
   1b724:	0001883a 	nop
   1b728:	e037883a 	mov	sp,fp
   1b72c:	df000017 	ldw	fp,0(sp)
   1b730:	dec00104 	addi	sp,sp,4
   1b734:	f800283a 	ret

0001b738 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   1b738:	defffb04 	addi	sp,sp,-20
   1b73c:	dfc00415 	stw	ra,16(sp)
   1b740:	df000315 	stw	fp,12(sp)
   1b744:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1b748:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   1b74c:	d0a71f43 	ldbu	r2,-25475(gp)
   1b750:	10803fcc 	andi	r2,r2,255
   1b754:	10800058 	cmpnei	r2,r2,1
   1b758:	10002f1e 	bne	r2,zero,1b818 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b75c:	0005303a 	rdctl	r2,status
   1b760:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b764:	e0ffff17 	ldw	r3,-4(fp)
   1b768:	00bfff84 	movi	r2,-2
   1b76c:	1884703a 	and	r2,r3,r2
   1b770:	1001703a 	wrctl	status,r2
  
  return context;
   1b774:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   1b778:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   1b77c:	d0a72d03 	ldbu	r2,-25420(gp)
   1b780:	10803fcc 	andi	r2,r2,255
   1b784:	10000326 	beq	r2,zero,1b794 <OSIntExit+0x5c>
            OSIntNesting--;
   1b788:	d0a72d03 	ldbu	r2,-25420(gp)
   1b78c:	10bfffc4 	addi	r2,r2,-1
   1b790:	d0a72d05 	stb	r2,-25420(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   1b794:	d0a72d03 	ldbu	r2,-25420(gp)
   1b798:	10803fcc 	andi	r2,r2,255
   1b79c:	10001a1e 	bne	r2,zero,1b808 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   1b7a0:	d0a71f03 	ldbu	r2,-25476(gp)
   1b7a4:	10803fcc 	andi	r2,r2,255
   1b7a8:	1000171e 	bne	r2,zero,1b808 <OSIntExit+0xd0>
                OS_SchedNew();
   1b7ac:	001c8340 	call	1c834 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   1b7b0:	d0e72103 	ldbu	r3,-25468(gp)
   1b7b4:	d0a72143 	ldbu	r2,-25467(gp)
   1b7b8:	18c03fcc 	andi	r3,r3,255
   1b7bc:	10803fcc 	andi	r2,r2,255
   1b7c0:	18801126 	beq	r3,r2,1b808 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   1b7c4:	d0a72103 	ldbu	r2,-25468(gp)
   1b7c8:	10c03fcc 	andi	r3,r2,255
   1b7cc:	008000f4 	movhi	r2,3
   1b7d0:	10b9c504 	addi	r2,r2,-6380
   1b7d4:	18c7883a 	add	r3,r3,r3
   1b7d8:	18c7883a 	add	r3,r3,r3
   1b7dc:	10c5883a 	add	r2,r2,r3
   1b7e0:	10800017 	ldw	r2,0(r2)
   1b7e4:	d0a72915 	stw	r2,-25436(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   1b7e8:	d0a72917 	ldw	r2,-25436(gp)
   1b7ec:	10c00e17 	ldw	r3,56(r2)
   1b7f0:	18c00044 	addi	r3,r3,1
   1b7f4:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   1b7f8:	d0a72417 	ldw	r2,-25456(gp)
   1b7fc:	10800044 	addi	r2,r2,1
   1b800:	d0a72415 	stw	r2,-25456(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   1b804:	0023f000 	call	23f00 <OSCtxSw>
   1b808:	e0bffd17 	ldw	r2,-12(fp)
   1b80c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b810:	e0bffe17 	ldw	r2,-8(fp)
   1b814:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   1b818:	0001883a 	nop
   1b81c:	e037883a 	mov	sp,fp
   1b820:	dfc00117 	ldw	ra,4(sp)
   1b824:	df000017 	ldw	fp,0(sp)
   1b828:	dec00204 	addi	sp,sp,8
   1b82c:	f800283a 	ret

0001b830 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   1b830:	defffc04 	addi	sp,sp,-16
   1b834:	df000315 	stw	fp,12(sp)
   1b838:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1b83c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   1b840:	d0a71f43 	ldbu	r2,-25475(gp)
   1b844:	10803fcc 	andi	r2,r2,255
   1b848:	10800058 	cmpnei	r2,r2,1
   1b84c:	1000161e 	bne	r2,zero,1b8a8 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b850:	0005303a 	rdctl	r2,status
   1b854:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b858:	e0ffff17 	ldw	r3,-4(fp)
   1b85c:	00bfff84 	movi	r2,-2
   1b860:	1884703a 	and	r2,r3,r2
   1b864:	1001703a 	wrctl	status,r2
  
  return context;
   1b868:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   1b86c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   1b870:	d0a72d03 	ldbu	r2,-25420(gp)
   1b874:	10803fcc 	andi	r2,r2,255
   1b878:	1000071e 	bne	r2,zero,1b898 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   1b87c:	d0a71f03 	ldbu	r2,-25476(gp)
   1b880:	10803fcc 	andi	r2,r2,255
   1b884:	10803fe0 	cmpeqi	r2,r2,255
   1b888:	1000031e 	bne	r2,zero,1b898 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   1b88c:	d0a71f03 	ldbu	r2,-25476(gp)
   1b890:	10800044 	addi	r2,r2,1
   1b894:	d0a71f05 	stb	r2,-25476(gp)
   1b898:	e0bffd17 	ldw	r2,-12(fp)
   1b89c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b8a0:	e0bffe17 	ldw	r2,-8(fp)
   1b8a4:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   1b8a8:	0001883a 	nop
   1b8ac:	e037883a 	mov	sp,fp
   1b8b0:	df000017 	ldw	fp,0(sp)
   1b8b4:	dec00104 	addi	sp,sp,4
   1b8b8:	f800283a 	ret

0001b8bc <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   1b8bc:	defff804 	addi	sp,sp,-32
   1b8c0:	dfc00715 	stw	ra,28(sp)
   1b8c4:	df000615 	stw	fp,24(sp)
   1b8c8:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1b8cc:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   1b8d0:	d0a71f43 	ldbu	r2,-25475(gp)
   1b8d4:	10803fcc 	andi	r2,r2,255
   1b8d8:	10800058 	cmpnei	r2,r2,1
   1b8dc:	1000281e 	bne	r2,zero,1b980 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b8e0:	0005303a 	rdctl	r2,status
   1b8e4:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b8e8:	e0ffff17 	ldw	r3,-4(fp)
   1b8ec:	00bfff84 	movi	r2,-2
   1b8f0:	1884703a 	and	r2,r3,r2
   1b8f4:	1001703a 	wrctl	status,r2
  
  return context;
   1b8f8:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   1b8fc:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   1b900:	d0a71f03 	ldbu	r2,-25476(gp)
   1b904:	10803fcc 	andi	r2,r2,255
   1b908:	10001926 	beq	r2,zero,1b970 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   1b90c:	d0a71f03 	ldbu	r2,-25476(gp)
   1b910:	10bfffc4 	addi	r2,r2,-1
   1b914:	d0a71f05 	stb	r2,-25476(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   1b918:	d0a71f03 	ldbu	r2,-25476(gp)
   1b91c:	10803fcc 	andi	r2,r2,255
   1b920:	10000e1e 	bne	r2,zero,1b95c <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   1b924:	d0a72d03 	ldbu	r2,-25420(gp)
   1b928:	10803fcc 	andi	r2,r2,255
   1b92c:	1000061e 	bne	r2,zero,1b948 <OSSchedUnlock+0x8c>
   1b930:	e0bffa17 	ldw	r2,-24(fp)
   1b934:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b938:	e0bffb17 	ldw	r2,-20(fp)
   1b93c:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   1b940:	001c7640 	call	1c764 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   1b944:	00000e06 	br	1b980 <OSSchedUnlock+0xc4>
   1b948:	e0bffa17 	ldw	r2,-24(fp)
   1b94c:	e0bffc15 	stw	r2,-16(fp)
   1b950:	e0bffc17 	ldw	r2,-16(fp)
   1b954:	1001703a 	wrctl	status,r2
   1b958:	00000906 	br	1b980 <OSSchedUnlock+0xc4>
   1b95c:	e0bffa17 	ldw	r2,-24(fp)
   1b960:	e0bffd15 	stw	r2,-12(fp)
   1b964:	e0bffd17 	ldw	r2,-12(fp)
   1b968:	1001703a 	wrctl	status,r2
   1b96c:	00000406 	br	1b980 <OSSchedUnlock+0xc4>
   1b970:	e0bffa17 	ldw	r2,-24(fp)
   1b974:	e0bffe15 	stw	r2,-8(fp)
   1b978:	e0bffe17 	ldw	r2,-8(fp)
   1b97c:	1001703a 	wrctl	status,r2
   1b980:	0001883a 	nop
   1b984:	e037883a 	mov	sp,fp
   1b988:	dfc00117 	ldw	ra,4(sp)
   1b98c:	df000017 	ldw	fp,0(sp)
   1b990:	dec00204 	addi	sp,sp,8
   1b994:	f800283a 	ret

0001b998 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   1b998:	defffe04 	addi	sp,sp,-8
   1b99c:	dfc00115 	stw	ra,4(sp)
   1b9a0:	df000015 	stw	fp,0(sp)
   1b9a4:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   1b9a8:	d0a71f43 	ldbu	r2,-25475(gp)
   1b9ac:	10803fcc 	andi	r2,r2,255
   1b9b0:	10000f1e 	bne	r2,zero,1b9f0 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   1b9b4:	001c8340 	call	1c834 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   1b9b8:	d0a72103 	ldbu	r2,-25468(gp)
   1b9bc:	d0a72145 	stb	r2,-25467(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   1b9c0:	d0a72103 	ldbu	r2,-25468(gp)
   1b9c4:	10c03fcc 	andi	r3,r2,255
   1b9c8:	008000f4 	movhi	r2,3
   1b9cc:	10b9c504 	addi	r2,r2,-6380
   1b9d0:	18c7883a 	add	r3,r3,r3
   1b9d4:	18c7883a 	add	r3,r3,r3
   1b9d8:	10c5883a 	add	r2,r2,r3
   1b9dc:	10800017 	ldw	r2,0(r2)
   1b9e0:	d0a72915 	stw	r2,-25436(gp)
        OSTCBCur      = OSTCBHighRdy;
   1b9e4:	d0a72917 	ldw	r2,-25436(gp)
   1b9e8:	d0a72e15 	stw	r2,-25416(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   1b9ec:	0023f8c0 	call	23f8c <OSStartHighRdy>
    }
}
   1b9f0:	0001883a 	nop
   1b9f4:	e037883a 	mov	sp,fp
   1b9f8:	dfc00117 	ldw	ra,4(sp)
   1b9fc:	df000017 	ldw	fp,0(sp)
   1ba00:	dec00204 	addi	sp,sp,8
   1ba04:	f800283a 	ret

0001ba08 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   1ba08:	defff904 	addi	sp,sp,-28
   1ba0c:	dfc00615 	stw	ra,24(sp)
   1ba10:	df000515 	stw	fp,20(sp)
   1ba14:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1ba18:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   1ba1c:	01000084 	movi	r4,2
   1ba20:	00221100 	call	22110 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ba24:	0005303a 	rdctl	r2,status
   1ba28:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ba2c:	e0fffc17 	ldw	r3,-16(fp)
   1ba30:	00bfff84 	movi	r2,-2
   1ba34:	1884703a 	and	r2,r3,r2
   1ba38:	1001703a 	wrctl	status,r2
  
  return context;
   1ba3c:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   1ba40:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   1ba44:	d0272015 	stw	zero,-25472(gp)
   1ba48:	e0bffb17 	ldw	r2,-20(fp)
   1ba4c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ba50:	e0bffd17 	ldw	r2,-12(fp)
   1ba54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   1ba58:	01000184 	movi	r4,6
   1ba5c:	00221100 	call	22110 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ba60:	0005303a 	rdctl	r2,status
   1ba64:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ba68:	e0fffe17 	ldw	r3,-8(fp)
   1ba6c:	00bfff84 	movi	r2,-2
   1ba70:	1884703a 	and	r2,r3,r2
   1ba74:	1001703a 	wrctl	status,r2
  
  return context;
   1ba78:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   1ba7c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   1ba80:	d0a72017 	ldw	r2,-25472(gp)
   1ba84:	d0a72515 	stw	r2,-25452(gp)
    OSStatRdy    = OS_TRUE;
   1ba88:	00800044 	movi	r2,1
   1ba8c:	d0a73105 	stb	r2,-25404(gp)
   1ba90:	e0bffb17 	ldw	r2,-20(fp)
   1ba94:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ba98:	e0bfff17 	ldw	r2,-4(fp)
   1ba9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   1baa0:	0001883a 	nop
   1baa4:	e037883a 	mov	sp,fp
   1baa8:	dfc00117 	ldw	ra,4(sp)
   1baac:	df000017 	ldw	fp,0(sp)
   1bab0:	dec00204 	addi	sp,sp,8
   1bab4:	f800283a 	ret

0001bab8 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   1bab8:	defff704 	addi	sp,sp,-36
   1babc:	dfc00815 	stw	ra,32(sp)
   1bac0:	df000715 	stw	fp,28(sp)
   1bac4:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1bac8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   1bacc:	00241b40 	call	241b4 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bad0:	0005303a 	rdctl	r2,status
   1bad4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bad8:	e0fffd17 	ldw	r3,-12(fp)
   1badc:	00bfff84 	movi	r2,-2
   1bae0:	1884703a 	and	r2,r3,r2
   1bae4:	1001703a 	wrctl	status,r2
  
  return context;
   1bae8:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   1baec:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   1baf0:	d0a72f17 	ldw	r2,-25412(gp)
   1baf4:	10800044 	addi	r2,r2,1
   1baf8:	d0a72f15 	stw	r2,-25412(gp)
   1bafc:	e0bffb17 	ldw	r2,-20(fp)
   1bb00:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bb04:	e0bfff17 	ldw	r2,-4(fp)
   1bb08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   1bb0c:	d0a71f43 	ldbu	r2,-25475(gp)
   1bb10:	10803fcc 	andi	r2,r2,255
   1bb14:	10800058 	cmpnei	r2,r2,1
   1bb18:	10006a1e 	bne	r2,zero,1bcc4 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   1bb1c:	d0a72303 	ldbu	r2,-25460(gp)
   1bb20:	10803fcc 	andi	r2,r2,255
   1bb24:	10c00060 	cmpeqi	r3,r2,1
   1bb28:	1800061e 	bne	r3,zero,1bb44 <OSTimeTick+0x8c>
   1bb2c:	10c000a0 	cmpeqi	r3,r2,2
   1bb30:	1800061e 	bne	r3,zero,1bb4c <OSTimeTick+0x94>
   1bb34:	10000a1e 	bne	r2,zero,1bb60 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   1bb38:	00800044 	movi	r2,1
   1bb3c:	e0bffa05 	stb	r2,-24(fp)
                 break;
   1bb40:	00000b06 	br	1bb70 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   1bb44:	e03ffa05 	stb	zero,-24(fp)
                 break;
   1bb48:	00000906 	br	1bb70 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   1bb4c:	00800044 	movi	r2,1
   1bb50:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   1bb54:	00800044 	movi	r2,1
   1bb58:	d0a72305 	stb	r2,-25460(gp)
                 break;
   1bb5c:	00000406 	br	1bb70 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   1bb60:	00800044 	movi	r2,1
   1bb64:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   1bb68:	d0272305 	stb	zero,-25460(gp)
                 break;
   1bb6c:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   1bb70:	e0bffa03 	ldbu	r2,-24(fp)
   1bb74:	10005226 	beq	r2,zero,1bcc0 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   1bb78:	d0a72217 	ldw	r2,-25464(gp)
   1bb7c:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   1bb80:	00004906 	br	1bca8 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bb84:	0005303a 	rdctl	r2,status
   1bb88:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bb8c:	e0fffc17 	ldw	r3,-16(fp)
   1bb90:	00bfff84 	movi	r2,-2
   1bb94:	1884703a 	and	r2,r3,r2
   1bb98:	1001703a 	wrctl	status,r2
  
  return context;
   1bb9c:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
   1bba0:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   1bba4:	e0bff917 	ldw	r2,-28(fp)
   1bba8:	10800b8b 	ldhu	r2,46(r2)
   1bbac:	10bfffcc 	andi	r2,r2,65535
   1bbb0:	10003626 	beq	r2,zero,1bc8c <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   1bbb4:	e0bff917 	ldw	r2,-28(fp)
   1bbb8:	10800b8b 	ldhu	r2,46(r2)
   1bbbc:	10bfffc4 	addi	r2,r2,-1
   1bbc0:	1007883a 	mov	r3,r2
   1bbc4:	e0bff917 	ldw	r2,-28(fp)
   1bbc8:	10c00b8d 	sth	r3,46(r2)
   1bbcc:	e0bff917 	ldw	r2,-28(fp)
   1bbd0:	10800b8b 	ldhu	r2,46(r2)
   1bbd4:	10bfffcc 	andi	r2,r2,65535
   1bbd8:	10002c1e 	bne	r2,zero,1bc8c <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   1bbdc:	e0bff917 	ldw	r2,-28(fp)
   1bbe0:	10800c03 	ldbu	r2,48(r2)
   1bbe4:	10803fcc 	andi	r2,r2,255
   1bbe8:	10800dcc 	andi	r2,r2,55
   1bbec:	10000b26 	beq	r2,zero,1bc1c <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   1bbf0:	e0bff917 	ldw	r2,-28(fp)
   1bbf4:	10c00c03 	ldbu	r3,48(r2)
   1bbf8:	00bff204 	movi	r2,-56
   1bbfc:	1884703a 	and	r2,r3,r2
   1bc00:	1007883a 	mov	r3,r2
   1bc04:	e0bff917 	ldw	r2,-28(fp)
   1bc08:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   1bc0c:	e0bff917 	ldw	r2,-28(fp)
   1bc10:	00c00044 	movi	r3,1
   1bc14:	10c00c45 	stb	r3,49(r2)
   1bc18:	00000206 	br	1bc24 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   1bc1c:	e0bff917 	ldw	r2,-28(fp)
   1bc20:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   1bc24:	e0bff917 	ldw	r2,-28(fp)
   1bc28:	10800c03 	ldbu	r2,48(r2)
   1bc2c:	10803fcc 	andi	r2,r2,255
   1bc30:	1080020c 	andi	r2,r2,8
   1bc34:	1000151e 	bne	r2,zero,1bc8c <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   1bc38:	e0bff917 	ldw	r2,-28(fp)
   1bc3c:	10c00d83 	ldbu	r3,54(r2)
   1bc40:	d0a72b03 	ldbu	r2,-25428(gp)
   1bc44:	1884b03a 	or	r2,r3,r2
   1bc48:	d0a72b05 	stb	r2,-25428(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1bc4c:	e0bff917 	ldw	r2,-28(fp)
   1bc50:	10800d03 	ldbu	r2,52(r2)
   1bc54:	10c03fcc 	andi	r3,r2,255
   1bc58:	e0bff917 	ldw	r2,-28(fp)
   1bc5c:	10800d03 	ldbu	r2,52(r2)
   1bc60:	11003fcc 	andi	r4,r2,255
   1bc64:	d0a72b44 	addi	r2,gp,-25427
   1bc68:	2085883a 	add	r2,r4,r2
   1bc6c:	11000003 	ldbu	r4,0(r2)
   1bc70:	e0bff917 	ldw	r2,-28(fp)
   1bc74:	10800d43 	ldbu	r2,53(r2)
   1bc78:	2084b03a 	or	r2,r4,r2
   1bc7c:	1009883a 	mov	r4,r2
   1bc80:	d0a72b44 	addi	r2,gp,-25427
   1bc84:	1885883a 	add	r2,r3,r2
   1bc88:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   1bc8c:	e0bff917 	ldw	r2,-28(fp)
   1bc90:	10800517 	ldw	r2,20(r2)
   1bc94:	e0bff915 	stw	r2,-28(fp)
   1bc98:	e0bffb17 	ldw	r2,-20(fp)
   1bc9c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bca0:	e0bffe17 	ldw	r2,-8(fp)
   1bca4:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   1bca8:	e0bff917 	ldw	r2,-28(fp)
   1bcac:	10800c83 	ldbu	r2,50(r2)
   1bcb0:	10803fcc 	andi	r2,r2,255
   1bcb4:	10800518 	cmpnei	r2,r2,20
   1bcb8:	103fb21e 	bne	r2,zero,1bb84 <__alt_data_end+0xfc01bb84>
   1bcbc:	00000106 	br	1bcc4 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
   1bcc0:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   1bcc4:	e037883a 	mov	sp,fp
   1bcc8:	dfc00117 	ldw	ra,4(sp)
   1bccc:	df000017 	ldw	fp,0(sp)
   1bcd0:	dec00204 	addi	sp,sp,8
   1bcd4:	f800283a 	ret

0001bcd8 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   1bcd8:	deffff04 	addi	sp,sp,-4
   1bcdc:	df000015 	stw	fp,0(sp)
   1bce0:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   1bce4:	00804784 	movi	r2,286
}
   1bce8:	e037883a 	mov	sp,fp
   1bcec:	df000017 	ldw	fp,0(sp)
   1bcf0:	dec00104 	addi	sp,sp,4
   1bcf4:	f800283a 	ret

0001bcf8 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   1bcf8:	deffff04 	addi	sp,sp,-4
   1bcfc:	df000015 	stw	fp,0(sp)
   1bd00:	d839883a 	mov	fp,sp
}
   1bd04:	0001883a 	nop
   1bd08:	e037883a 	mov	sp,fp
   1bd0c:	df000017 	ldw	fp,0(sp)
   1bd10:	dec00104 	addi	sp,sp,4
   1bd14:	f800283a 	ret

0001bd18 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   1bd18:	defff804 	addi	sp,sp,-32
   1bd1c:	dfc00715 	stw	ra,28(sp)
   1bd20:	df000615 	stw	fp,24(sp)
   1bd24:	df000604 	addi	fp,sp,24
   1bd28:	e13ffc15 	stw	r4,-16(fp)
   1bd2c:	e17ffd15 	stw	r5,-12(fp)
   1bd30:	3007883a 	mov	r3,r6
   1bd34:	3805883a 	mov	r2,r7
   1bd38:	e0fffe05 	stb	r3,-8(fp)
   1bd3c:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   1bd40:	e0bffc17 	ldw	r2,-16(fp)
   1bd44:	10800283 	ldbu	r2,10(r2)
   1bd48:	10c03fcc 	andi	r3,r2,255
   1bd4c:	008000b4 	movhi	r2,2
   1bd50:	1096fc04 	addi	r2,r2,23536
   1bd54:	10c5883a 	add	r2,r2,r3
   1bd58:	10800003 	ldbu	r2,0(r2)
   1bd5c:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   1bd60:	e0bffa03 	ldbu	r2,-24(fp)
   1bd64:	e0fffc17 	ldw	r3,-16(fp)
   1bd68:	1885883a 	add	r2,r3,r2
   1bd6c:	108002c4 	addi	r2,r2,11
   1bd70:	10800003 	ldbu	r2,0(r2)
   1bd74:	10c03fcc 	andi	r3,r2,255
   1bd78:	008000b4 	movhi	r2,2
   1bd7c:	1096fc04 	addi	r2,r2,23536
   1bd80:	10c5883a 	add	r2,r2,r3
   1bd84:	10800003 	ldbu	r2,0(r2)
   1bd88:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   1bd8c:	e0bffa03 	ldbu	r2,-24(fp)
   1bd90:	100490fa 	slli	r2,r2,3
   1bd94:	1007883a 	mov	r3,r2
   1bd98:	e0bffa43 	ldbu	r2,-23(fp)
   1bd9c:	1885883a 	add	r2,r3,r2
   1bda0:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   1bda4:	e0fffa83 	ldbu	r3,-22(fp)
   1bda8:	008000f4 	movhi	r2,3
   1bdac:	10b9c504 	addi	r2,r2,-6380
   1bdb0:	18c7883a 	add	r3,r3,r3
   1bdb4:	18c7883a 	add	r3,r3,r3
   1bdb8:	10c5883a 	add	r2,r2,r3
   1bdbc:	10800017 	ldw	r2,0(r2)
   1bdc0:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   1bdc4:	e0bffb17 	ldw	r2,-20(fp)
   1bdc8:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   1bdcc:	e0bffb17 	ldw	r2,-20(fp)
   1bdd0:	e0fffd17 	ldw	r3,-12(fp)
   1bdd4:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   1bdd8:	e0bffb17 	ldw	r2,-20(fp)
   1bddc:	10800c03 	ldbu	r2,48(r2)
   1bde0:	1007883a 	mov	r3,r2
   1bde4:	e0bffe03 	ldbu	r2,-8(fp)
   1bde8:	0084303a 	nor	r2,zero,r2
   1bdec:	1884703a 	and	r2,r3,r2
   1bdf0:	1007883a 	mov	r3,r2
   1bdf4:	e0bffb17 	ldw	r2,-20(fp)
   1bdf8:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   1bdfc:	e0bffb17 	ldw	r2,-20(fp)
   1be00:	e0ffff03 	ldbu	r3,-4(fp)
   1be04:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   1be08:	e0bffb17 	ldw	r2,-20(fp)
   1be0c:	10800c03 	ldbu	r2,48(r2)
   1be10:	10803fcc 	andi	r2,r2,255
   1be14:	1080020c 	andi	r2,r2,8
   1be18:	1000111e 	bne	r2,zero,1be60 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   1be1c:	e0bffb17 	ldw	r2,-20(fp)
   1be20:	10c00d83 	ldbu	r3,54(r2)
   1be24:	d0a72b03 	ldbu	r2,-25428(gp)
   1be28:	1884b03a 	or	r2,r3,r2
   1be2c:	d0a72b05 	stb	r2,-25428(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   1be30:	e0fffa03 	ldbu	r3,-24(fp)
   1be34:	e13ffa03 	ldbu	r4,-24(fp)
   1be38:	d0a72b44 	addi	r2,gp,-25427
   1be3c:	2085883a 	add	r2,r4,r2
   1be40:	11000003 	ldbu	r4,0(r2)
   1be44:	e0bffb17 	ldw	r2,-20(fp)
   1be48:	10800d43 	ldbu	r2,53(r2)
   1be4c:	2084b03a 	or	r2,r4,r2
   1be50:	1009883a 	mov	r4,r2
   1be54:	d0a72b44 	addi	r2,gp,-25427
   1be58:	1885883a 	add	r2,r3,r2
   1be5c:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   1be60:	e17ffc17 	ldw	r5,-16(fp)
   1be64:	e13ffb17 	ldw	r4,-20(fp)
   1be68:	001c1100 	call	1c110 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   1be6c:	e0bffb17 	ldw	r2,-20(fp)
   1be70:	10800817 	ldw	r2,32(r2)
   1be74:	10000826 	beq	r2,zero,1be98 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   1be78:	e0bffb17 	ldw	r2,-20(fp)
   1be7c:	10800817 	ldw	r2,32(r2)
   1be80:	100b883a 	mov	r5,r2
   1be84:	e13ffb17 	ldw	r4,-20(fp)
   1be88:	001c1c80 	call	1c1c8 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   1be8c:	e0bffb17 	ldw	r2,-20(fp)
   1be90:	e0fffc17 	ldw	r3,-16(fp)
   1be94:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   1be98:	e0bffa83 	ldbu	r2,-22(fp)
}
   1be9c:	e037883a 	mov	sp,fp
   1bea0:	dfc00117 	ldw	ra,4(sp)
   1bea4:	df000017 	ldw	fp,0(sp)
   1bea8:	dec00204 	addi	sp,sp,8
   1beac:	f800283a 	ret

0001beb0 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   1beb0:	defffd04 	addi	sp,sp,-12
   1beb4:	df000215 	stw	fp,8(sp)
   1beb8:	df000204 	addi	fp,sp,8
   1bebc:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   1bec0:	d0a72e17 	ldw	r2,-25416(gp)
   1bec4:	e0ffff17 	ldw	r3,-4(fp)
   1bec8:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   1becc:	d0a72e17 	ldw	r2,-25416(gp)
   1bed0:	10800d03 	ldbu	r2,52(r2)
   1bed4:	10803fcc 	andi	r2,r2,255
   1bed8:	d0e72e17 	ldw	r3,-25416(gp)
   1bedc:	18c00d03 	ldbu	r3,52(r3)
   1bee0:	18c03fcc 	andi	r3,r3,255
   1bee4:	e13fff17 	ldw	r4,-4(fp)
   1bee8:	20c7883a 	add	r3,r4,r3
   1beec:	18c002c4 	addi	r3,r3,11
   1bef0:	19000003 	ldbu	r4,0(r3)
   1bef4:	d0e72e17 	ldw	r3,-25416(gp)
   1bef8:	18c00d43 	ldbu	r3,53(r3)
   1befc:	20c6b03a 	or	r3,r4,r3
   1bf00:	1809883a 	mov	r4,r3
   1bf04:	e0ffff17 	ldw	r3,-4(fp)
   1bf08:	1885883a 	add	r2,r3,r2
   1bf0c:	108002c4 	addi	r2,r2,11
   1bf10:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   1bf14:	e0bfff17 	ldw	r2,-4(fp)
   1bf18:	10c00283 	ldbu	r3,10(r2)
   1bf1c:	d0a72e17 	ldw	r2,-25416(gp)
   1bf20:	10800d83 	ldbu	r2,54(r2)
   1bf24:	1884b03a 	or	r2,r3,r2
   1bf28:	1007883a 	mov	r3,r2
   1bf2c:	e0bfff17 	ldw	r2,-4(fp)
   1bf30:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   1bf34:	d0a72e17 	ldw	r2,-25416(gp)
   1bf38:	10800d03 	ldbu	r2,52(r2)
   1bf3c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   1bf40:	e0fffe03 	ldbu	r3,-8(fp)
   1bf44:	e13ffe03 	ldbu	r4,-8(fp)
   1bf48:	d0a72b44 	addi	r2,gp,-25427
   1bf4c:	2085883a 	add	r2,r4,r2
   1bf50:	10800003 	ldbu	r2,0(r2)
   1bf54:	1009883a 	mov	r4,r2
   1bf58:	d0a72e17 	ldw	r2,-25416(gp)
   1bf5c:	10800d43 	ldbu	r2,53(r2)
   1bf60:	0084303a 	nor	r2,zero,r2
   1bf64:	2084703a 	and	r2,r4,r2
   1bf68:	1009883a 	mov	r4,r2
   1bf6c:	d0a72b44 	addi	r2,gp,-25427
   1bf70:	1885883a 	add	r2,r3,r2
   1bf74:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   1bf78:	e0fffe03 	ldbu	r3,-8(fp)
   1bf7c:	d0a72b44 	addi	r2,gp,-25427
   1bf80:	1885883a 	add	r2,r3,r2
   1bf84:	10800003 	ldbu	r2,0(r2)
   1bf88:	10803fcc 	andi	r2,r2,255
   1bf8c:	1000071e 	bne	r2,zero,1bfac <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   1bf90:	d0a72e17 	ldw	r2,-25416(gp)
   1bf94:	10800d83 	ldbu	r2,54(r2)
   1bf98:	0084303a 	nor	r2,zero,r2
   1bf9c:	1007883a 	mov	r3,r2
   1bfa0:	d0a72b03 	ldbu	r2,-25428(gp)
   1bfa4:	1884703a 	and	r2,r3,r2
   1bfa8:	d0a72b05 	stb	r2,-25428(gp)
    }
}
   1bfac:	0001883a 	nop
   1bfb0:	e037883a 	mov	sp,fp
   1bfb4:	df000017 	ldw	fp,0(sp)
   1bfb8:	dec00104 	addi	sp,sp,4
   1bfbc:	f800283a 	ret

0001bfc0 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   1bfc0:	defffb04 	addi	sp,sp,-20
   1bfc4:	df000415 	stw	fp,16(sp)
   1bfc8:	df000404 	addi	fp,sp,16
   1bfcc:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   1bfd0:	d0a72e17 	ldw	r2,-25416(gp)
   1bfd4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   1bfd8:	d0a72e17 	ldw	r2,-25416(gp)
   1bfdc:	e0ffff17 	ldw	r3,-4(fp)
   1bfe0:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   1bfe4:	e0bfff17 	ldw	r2,-4(fp)
   1bfe8:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   1bfec:	e0bffc17 	ldw	r2,-16(fp)
   1bff0:	10800017 	ldw	r2,0(r2)
   1bff4:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   1bff8:	00002006 	br	1c07c <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   1bffc:	d0a72e17 	ldw	r2,-25416(gp)
   1c000:	10800d03 	ldbu	r2,52(r2)
   1c004:	10803fcc 	andi	r2,r2,255
   1c008:	d0e72e17 	ldw	r3,-25416(gp)
   1c00c:	18c00d03 	ldbu	r3,52(r3)
   1c010:	18c03fcc 	andi	r3,r3,255
   1c014:	e13ffd17 	ldw	r4,-12(fp)
   1c018:	20c7883a 	add	r3,r4,r3
   1c01c:	18c002c4 	addi	r3,r3,11
   1c020:	19000003 	ldbu	r4,0(r3)
   1c024:	d0e72e17 	ldw	r3,-25416(gp)
   1c028:	18c00d43 	ldbu	r3,53(r3)
   1c02c:	20c6b03a 	or	r3,r4,r3
   1c030:	1809883a 	mov	r4,r3
   1c034:	e0fffd17 	ldw	r3,-12(fp)
   1c038:	1885883a 	add	r2,r3,r2
   1c03c:	108002c4 	addi	r2,r2,11
   1c040:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   1c044:	e0bffd17 	ldw	r2,-12(fp)
   1c048:	10c00283 	ldbu	r3,10(r2)
   1c04c:	d0a72e17 	ldw	r2,-25416(gp)
   1c050:	10800d83 	ldbu	r2,54(r2)
   1c054:	1884b03a 	or	r2,r3,r2
   1c058:	1007883a 	mov	r3,r2
   1c05c:	e0bffd17 	ldw	r2,-12(fp)
   1c060:	10c00285 	stb	r3,10(r2)
        pevents++;
   1c064:	e0bffc17 	ldw	r2,-16(fp)
   1c068:	10800104 	addi	r2,r2,4
   1c06c:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   1c070:	e0bffc17 	ldw	r2,-16(fp)
   1c074:	10800017 	ldw	r2,0(r2)
   1c078:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   1c07c:	e0bffd17 	ldw	r2,-12(fp)
   1c080:	103fde1e 	bne	r2,zero,1bffc <__alt_data_end+0xfc01bffc>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   1c084:	d0a72e17 	ldw	r2,-25416(gp)
   1c088:	10800d03 	ldbu	r2,52(r2)
   1c08c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   1c090:	e0fffe03 	ldbu	r3,-8(fp)
   1c094:	e13ffe03 	ldbu	r4,-8(fp)
   1c098:	d0a72b44 	addi	r2,gp,-25427
   1c09c:	2085883a 	add	r2,r4,r2
   1c0a0:	10800003 	ldbu	r2,0(r2)
   1c0a4:	1009883a 	mov	r4,r2
   1c0a8:	d0a72e17 	ldw	r2,-25416(gp)
   1c0ac:	10800d43 	ldbu	r2,53(r2)
   1c0b0:	0084303a 	nor	r2,zero,r2
   1c0b4:	2084703a 	and	r2,r4,r2
   1c0b8:	1009883a 	mov	r4,r2
   1c0bc:	d0a72b44 	addi	r2,gp,-25427
   1c0c0:	1885883a 	add	r2,r3,r2
   1c0c4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   1c0c8:	e0fffe03 	ldbu	r3,-8(fp)
   1c0cc:	d0a72b44 	addi	r2,gp,-25427
   1c0d0:	1885883a 	add	r2,r3,r2
   1c0d4:	10800003 	ldbu	r2,0(r2)
   1c0d8:	10803fcc 	andi	r2,r2,255
   1c0dc:	1000071e 	bne	r2,zero,1c0fc <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   1c0e0:	d0a72e17 	ldw	r2,-25416(gp)
   1c0e4:	10800d83 	ldbu	r2,54(r2)
   1c0e8:	0084303a 	nor	r2,zero,r2
   1c0ec:	1007883a 	mov	r3,r2
   1c0f0:	d0a72b03 	ldbu	r2,-25428(gp)
   1c0f4:	1884703a 	and	r2,r3,r2
   1c0f8:	d0a72b05 	stb	r2,-25428(gp)
    }
}
   1c0fc:	0001883a 	nop
   1c100:	e037883a 	mov	sp,fp
   1c104:	df000017 	ldw	fp,0(sp)
   1c108:	dec00104 	addi	sp,sp,4
   1c10c:	f800283a 	ret

0001c110 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   1c110:	defffc04 	addi	sp,sp,-16
   1c114:	df000315 	stw	fp,12(sp)
   1c118:	df000304 	addi	fp,sp,12
   1c11c:	e13ffe15 	stw	r4,-8(fp)
   1c120:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   1c124:	e0bffe17 	ldw	r2,-8(fp)
   1c128:	10800d03 	ldbu	r2,52(r2)
   1c12c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   1c130:	e0bffd03 	ldbu	r2,-12(fp)
   1c134:	e0fffd03 	ldbu	r3,-12(fp)
   1c138:	e13fff17 	ldw	r4,-4(fp)
   1c13c:	20c7883a 	add	r3,r4,r3
   1c140:	18c002c4 	addi	r3,r3,11
   1c144:	18c00003 	ldbu	r3,0(r3)
   1c148:	1809883a 	mov	r4,r3
   1c14c:	e0fffe17 	ldw	r3,-8(fp)
   1c150:	18c00d43 	ldbu	r3,53(r3)
   1c154:	00c6303a 	nor	r3,zero,r3
   1c158:	20c6703a 	and	r3,r4,r3
   1c15c:	1809883a 	mov	r4,r3
   1c160:	e0ffff17 	ldw	r3,-4(fp)
   1c164:	1885883a 	add	r2,r3,r2
   1c168:	108002c4 	addi	r2,r2,11
   1c16c:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
   1c170:	e0bffd03 	ldbu	r2,-12(fp)
   1c174:	e0ffff17 	ldw	r3,-4(fp)
   1c178:	1885883a 	add	r2,r3,r2
   1c17c:	108002c4 	addi	r2,r2,11
   1c180:	10800003 	ldbu	r2,0(r2)
   1c184:	10803fcc 	andi	r2,r2,255
   1c188:	10000a1e 	bne	r2,zero,1c1b4 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   1c18c:	e0bfff17 	ldw	r2,-4(fp)
   1c190:	10800283 	ldbu	r2,10(r2)
   1c194:	1007883a 	mov	r3,r2
   1c198:	e0bffe17 	ldw	r2,-8(fp)
   1c19c:	10800d83 	ldbu	r2,54(r2)
   1c1a0:	0084303a 	nor	r2,zero,r2
   1c1a4:	1884703a 	and	r2,r3,r2
   1c1a8:	1007883a 	mov	r3,r2
   1c1ac:	e0bfff17 	ldw	r2,-4(fp)
   1c1b0:	10c00285 	stb	r3,10(r2)
    }
}
   1c1b4:	0001883a 	nop
   1c1b8:	e037883a 	mov	sp,fp
   1c1bc:	df000017 	ldw	fp,0(sp)
   1c1c0:	dec00104 	addi	sp,sp,4
   1c1c4:	f800283a 	ret

0001c1c8 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   1c1c8:	defffa04 	addi	sp,sp,-24
   1c1cc:	df000515 	stw	fp,20(sp)
   1c1d0:	df000504 	addi	fp,sp,20
   1c1d4:	e13ffe15 	stw	r4,-8(fp)
   1c1d8:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   1c1dc:	e0bffe17 	ldw	r2,-8(fp)
   1c1e0:	10800d03 	ldbu	r2,52(r2)
   1c1e4:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   1c1e8:	e0bffe17 	ldw	r2,-8(fp)
   1c1ec:	10800d83 	ldbu	r2,54(r2)
   1c1f0:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   1c1f4:	e0bffe17 	ldw	r2,-8(fp)
   1c1f8:	10800d43 	ldbu	r2,53(r2)
   1c1fc:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   1c200:	e0bfff17 	ldw	r2,-4(fp)
   1c204:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   1c208:	e0bffb17 	ldw	r2,-20(fp)
   1c20c:	10800017 	ldw	r2,0(r2)
   1c210:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   1c214:	00002506 	br	1c2ac <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   1c218:	e0bffd03 	ldbu	r2,-12(fp)
   1c21c:	e0fffd03 	ldbu	r3,-12(fp)
   1c220:	e13ffc17 	ldw	r4,-16(fp)
   1c224:	20c7883a 	add	r3,r4,r3
   1c228:	18c002c4 	addi	r3,r3,11
   1c22c:	18c00003 	ldbu	r3,0(r3)
   1c230:	1809883a 	mov	r4,r3
   1c234:	e0fffd83 	ldbu	r3,-10(fp)
   1c238:	00c6303a 	nor	r3,zero,r3
   1c23c:	20c6703a 	and	r3,r4,r3
   1c240:	1809883a 	mov	r4,r3
   1c244:	e0fffc17 	ldw	r3,-16(fp)
   1c248:	1885883a 	add	r2,r3,r2
   1c24c:	108002c4 	addi	r2,r2,11
   1c250:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
   1c254:	e0bffd03 	ldbu	r2,-12(fp)
   1c258:	e0fffc17 	ldw	r3,-16(fp)
   1c25c:	1885883a 	add	r2,r3,r2
   1c260:	108002c4 	addi	r2,r2,11
   1c264:	10800003 	ldbu	r2,0(r2)
   1c268:	10803fcc 	andi	r2,r2,255
   1c26c:	1000091e 	bne	r2,zero,1c294 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   1c270:	e0bffc17 	ldw	r2,-16(fp)
   1c274:	10800283 	ldbu	r2,10(r2)
   1c278:	1007883a 	mov	r3,r2
   1c27c:	e0bffd43 	ldbu	r2,-11(fp)
   1c280:	0084303a 	nor	r2,zero,r2
   1c284:	1884703a 	and	r2,r3,r2
   1c288:	1007883a 	mov	r3,r2
   1c28c:	e0bffc17 	ldw	r2,-16(fp)
   1c290:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   1c294:	e0bffb17 	ldw	r2,-20(fp)
   1c298:	10800104 	addi	r2,r2,4
   1c29c:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   1c2a0:	e0bffb17 	ldw	r2,-20(fp)
   1c2a4:	10800017 	ldw	r2,0(r2)
   1c2a8:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   1c2ac:	e0bffc17 	ldw	r2,-16(fp)
   1c2b0:	103fd91e 	bne	r2,zero,1c218 <__alt_data_end+0xfc01c218>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   1c2b4:	0001883a 	nop
   1c2b8:	e037883a 	mov	sp,fp
   1c2bc:	df000017 	ldw	fp,0(sp)
   1c2c0:	dec00104 	addi	sp,sp,4
   1c2c4:	f800283a 	ret

0001c2c8 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   1c2c8:	defffc04 	addi	sp,sp,-16
   1c2cc:	df000315 	stw	fp,12(sp)
   1c2d0:	df000304 	addi	fp,sp,12
   1c2d4:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   1c2d8:	e0bfff17 	ldw	r2,-4(fp)
   1c2dc:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   1c2e0:	e0bfff17 	ldw	r2,-4(fp)
   1c2e4:	108002c4 	addi	r2,r2,11
   1c2e8:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1c2ec:	e03ffe05 	stb	zero,-8(fp)
   1c2f0:	00000706 	br	1c310 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   1c2f4:	e0bffd17 	ldw	r2,-12(fp)
   1c2f8:	10c00044 	addi	r3,r2,1
   1c2fc:	e0fffd15 	stw	r3,-12(fp)
   1c300:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1c304:	e0bffe03 	ldbu	r2,-8(fp)
   1c308:	10800044 	addi	r2,r2,1
   1c30c:	e0bffe05 	stb	r2,-8(fp)
   1c310:	e0bffe03 	ldbu	r2,-8(fp)
   1c314:	108000f0 	cmpltui	r2,r2,3
   1c318:	103ff61e 	bne	r2,zero,1c2f4 <__alt_data_end+0xfc01c2f4>
        *ptbl++ = 0;
    }
}
   1c31c:	0001883a 	nop
   1c320:	e037883a 	mov	sp,fp
   1c324:	df000017 	ldw	fp,0(sp)
   1c328:	dec00104 	addi	sp,sp,4
   1c32c:	f800283a 	ret

0001c330 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   1c330:	defffb04 	addi	sp,sp,-20
   1c334:	dfc00415 	stw	ra,16(sp)
   1c338:	df000315 	stw	fp,12(sp)
   1c33c:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   1c340:	0142d004 	movi	r5,2880
   1c344:	010000f4 	movhi	r4,3
   1c348:	2135b104 	addi	r4,r4,-10556
   1c34c:	001c6a80 	call	1c6a8 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   1c350:	008000f4 	movhi	r2,3
   1c354:	10b5b104 	addi	r2,r2,-10556
   1c358:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   1c35c:	008000f4 	movhi	r2,3
   1c360:	10b5bd04 	addi	r2,r2,-10508
   1c364:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   1c368:	e03ffd0d 	sth	zero,-12(fp)
   1c36c:	00001306 	br	1c3bc <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1c370:	e0bffe17 	ldw	r2,-8(fp)
   1c374:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   1c378:	e0bffe17 	ldw	r2,-8(fp)
   1c37c:	e0ffff17 	ldw	r3,-4(fp)
   1c380:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   1c384:	e0bffe17 	ldw	r2,-8(fp)
   1c388:	00c00fc4 	movi	r3,63
   1c38c:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   1c390:	e0bffe17 	ldw	r2,-8(fp)
   1c394:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   1c398:	e0bffe17 	ldw	r2,-8(fp)
   1c39c:	10800c04 	addi	r2,r2,48
   1c3a0:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   1c3a4:	e0bfff17 	ldw	r2,-4(fp)
   1c3a8:	10800c04 	addi	r2,r2,48
   1c3ac:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   1c3b0:	e0bffd0b 	ldhu	r2,-12(fp)
   1c3b4:	10800044 	addi	r2,r2,1
   1c3b8:	e0bffd0d 	sth	r2,-12(fp)
   1c3bc:	e0bffd0b 	ldhu	r2,-12(fp)
   1c3c0:	10800ef0 	cmpltui	r2,r2,59
   1c3c4:	103fea1e 	bne	r2,zero,1c370 <__alt_data_end+0xfc01c370>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   1c3c8:	e0bffe17 	ldw	r2,-8(fp)
   1c3cc:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   1c3d0:	e0bffe17 	ldw	r2,-8(fp)
   1c3d4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   1c3d8:	e0bffe17 	ldw	r2,-8(fp)
   1c3dc:	00c00fc4 	movi	r3,63
   1c3e0:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   1c3e4:	e0bffe17 	ldw	r2,-8(fp)
   1c3e8:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   1c3ec:	008000f4 	movhi	r2,3
   1c3f0:	10b5b104 	addi	r2,r2,-10556
   1c3f4:	d0a72c15 	stw	r2,-25424(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   1c3f8:	0001883a 	nop
   1c3fc:	e037883a 	mov	sp,fp
   1c400:	dfc00117 	ldw	ra,4(sp)
   1c404:	df000017 	ldw	fp,0(sp)
   1c408:	dec00204 	addi	sp,sp,8
   1c40c:	f800283a 	ret

0001c410 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   1c410:	deffff04 	addi	sp,sp,-4
   1c414:	df000015 	stw	fp,0(sp)
   1c418:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   1c41c:	d0272f15 	stw	zero,-25412(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   1c420:	d0272d05 	stb	zero,-25420(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   1c424:	d0271f05 	stb	zero,-25476(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   1c428:	d0272745 	stb	zero,-25443(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   1c42c:	d0271f45 	stb	zero,-25475(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   1c430:	d0272415 	stw	zero,-25456(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   1c434:	d0272015 	stw	zero,-25472(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   1c438:	d0273215 	stw	zero,-25400(gp)
    OSIdleCtrMax  = 0L;
   1c43c:	d0272515 	stw	zero,-25452(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   1c440:	d0273105 	stb	zero,-25404(gp)
#endif
}
   1c444:	0001883a 	nop
   1c448:	e037883a 	mov	sp,fp
   1c44c:	df000017 	ldw	fp,0(sp)
   1c450:	dec00104 	addi	sp,sp,4
   1c454:	f800283a 	ret

0001c458 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   1c458:	defffd04 	addi	sp,sp,-12
   1c45c:	df000215 	stw	fp,8(sp)
   1c460:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   1c464:	d0272b05 	stb	zero,-25428(gp)
    prdytbl       = &OSRdyTbl[0];
   1c468:	d0a72b44 	addi	r2,gp,-25427
   1c46c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   1c470:	e03ffe05 	stb	zero,-8(fp)
   1c474:	00000706 	br	1c494 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   1c478:	e0bfff17 	ldw	r2,-4(fp)
   1c47c:	10c00044 	addi	r3,r2,1
   1c480:	e0ffff15 	stw	r3,-4(fp)
   1c484:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   1c488:	e0bffe03 	ldbu	r2,-8(fp)
   1c48c:	10800044 	addi	r2,r2,1
   1c490:	e0bffe05 	stb	r2,-8(fp)
   1c494:	e0bffe03 	ldbu	r2,-8(fp)
   1c498:	108000f0 	cmpltui	r2,r2,3
   1c49c:	103ff61e 	bne	r2,zero,1c478 <__alt_data_end+0xfc01c478>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   1c4a0:	d0272145 	stb	zero,-25467(gp)
    OSPrioHighRdy = 0;
   1c4a4:	d0272105 	stb	zero,-25468(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   1c4a8:	d0272915 	stw	zero,-25436(gp)
    OSTCBCur      = (OS_TCB *)0;
   1c4ac:	d0272e15 	stw	zero,-25416(gp)
}
   1c4b0:	0001883a 	nop
   1c4b4:	e037883a 	mov	sp,fp
   1c4b8:	df000017 	ldw	fp,0(sp)
   1c4bc:	dec00104 	addi	sp,sp,4
   1c4c0:	f800283a 	ret

0001c4c4 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   1c4c4:	defff804 	addi	sp,sp,-32
   1c4c8:	dfc00715 	stw	ra,28(sp)
   1c4cc:	df000615 	stw	fp,24(sp)
   1c4d0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   1c4d4:	008000c4 	movi	r2,3
   1c4d8:	d8800415 	stw	r2,16(sp)
   1c4dc:	d8000315 	stw	zero,12(sp)
   1c4e0:	00808004 	movi	r2,512
   1c4e4:	d8800215 	stw	r2,8(sp)
   1c4e8:	008000f4 	movhi	r2,3
   1c4ec:	10b3b104 	addi	r2,r2,-12604
   1c4f0:	d8800115 	stw	r2,4(sp)
   1c4f4:	00bfffd4 	movui	r2,65535
   1c4f8:	d8800015 	stw	r2,0(sp)
   1c4fc:	01c00504 	movi	r7,20
   1c500:	018000f4 	movhi	r6,3
   1c504:	31b5b004 	addi	r6,r6,-10560
   1c508:	000b883a 	mov	r5,zero
   1c50c:	010000b4 	movhi	r4,2
   1c510:	21325c04 	addi	r4,r4,-13968
   1c514:	00210400 	call	21040 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   1c518:	e1bfff04 	addi	r6,fp,-4
   1c51c:	014000b4 	movhi	r5,2
   1c520:	29573c04 	addi	r5,r5,23792
   1c524:	01000504 	movi	r4,20
   1c528:	00218500 	call	21850 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   1c52c:	0001883a 	nop
   1c530:	e037883a 	mov	sp,fp
   1c534:	dfc00117 	ldw	ra,4(sp)
   1c538:	df000017 	ldw	fp,0(sp)
   1c53c:	dec00204 	addi	sp,sp,8
   1c540:	f800283a 	ret

0001c544 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   1c544:	defff804 	addi	sp,sp,-32
   1c548:	dfc00715 	stw	ra,28(sp)
   1c54c:	df000615 	stw	fp,24(sp)
   1c550:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   1c554:	008000c4 	movi	r2,3
   1c558:	d8800415 	stw	r2,16(sp)
   1c55c:	d8000315 	stw	zero,12(sp)
   1c560:	00808004 	movi	r2,512
   1c564:	d8800215 	stw	r2,8(sp)
   1c568:	008000f4 	movhi	r2,3
   1c56c:	10b13904 	addi	r2,r2,-15132
   1c570:	d8800115 	stw	r2,4(sp)
   1c574:	00bfff94 	movui	r2,65534
   1c578:	d8800015 	stw	r2,0(sp)
   1c57c:	01c004c4 	movi	r7,19
   1c580:	018000f4 	movhi	r6,3
   1c584:	31b33804 	addi	r6,r6,-13088
   1c588:	000b883a 	mov	r5,zero
   1c58c:	010000b4 	movhi	r4,2
   1c590:	21327304 	addi	r4,r4,-13876
   1c594:	00210400 	call	21040 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   1c598:	e1bfff04 	addi	r6,fp,-4
   1c59c:	014000b4 	movhi	r5,2
   1c5a0:	29574004 	addi	r5,r5,23808
   1c5a4:	010004c4 	movi	r4,19
   1c5a8:	00218500 	call	21850 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   1c5ac:	0001883a 	nop
   1c5b0:	e037883a 	mov	sp,fp
   1c5b4:	dfc00117 	ldw	ra,4(sp)
   1c5b8:	df000017 	ldw	fp,0(sp)
   1c5bc:	dec00204 	addi	sp,sp,8
   1c5c0:	f800283a 	ret

0001c5c4 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   1c5c4:	defffb04 	addi	sp,sp,-20
   1c5c8:	dfc00415 	stw	ra,16(sp)
   1c5cc:	df000315 	stw	fp,12(sp)
   1c5d0:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   1c5d4:	01414404 	movi	r5,1296
   1c5d8:	010000f4 	movhi	r4,3
   1c5dc:	21388104 	addi	r4,r4,-7676
   1c5e0:	001c6a80 	call	1c6a8 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   1c5e4:	01401504 	movi	r5,84
   1c5e8:	010000f4 	movhi	r4,3
   1c5ec:	2139c504 	addi	r4,r4,-6380
   1c5f0:	001c6a80 	call	1c6a8 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   1c5f4:	008000f4 	movhi	r2,3
   1c5f8:	10b88104 	addi	r2,r2,-7676
   1c5fc:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   1c600:	008000f4 	movhi	r2,3
   1c604:	10b89c04 	addi	r2,r2,-7568
   1c608:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   1c60c:	e03ffd05 	stb	zero,-12(fp)
   1c610:	00001106 	br	1c658 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   1c614:	e0bffe17 	ldw	r2,-8(fp)
   1c618:	e0ffff17 	ldw	r3,-4(fp)
   1c61c:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   1c620:	e0bffe17 	ldw	r2,-8(fp)
   1c624:	00c00fc4 	movi	r3,63
   1c628:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   1c62c:	e0bffe17 	ldw	r2,-8(fp)
   1c630:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   1c634:	e0bffe17 	ldw	r2,-8(fp)
   1c638:	10801b04 	addi	r2,r2,108
   1c63c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   1c640:	e0bfff17 	ldw	r2,-4(fp)
   1c644:	10801b04 	addi	r2,r2,108
   1c648:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   1c64c:	e0bffd03 	ldbu	r2,-12(fp)
   1c650:	10800044 	addi	r2,r2,1
   1c654:	e0bffd05 	stb	r2,-12(fp)
   1c658:	e0bffd03 	ldbu	r2,-12(fp)
   1c65c:	108002f0 	cmpltui	r2,r2,11
   1c660:	103fec1e 	bne	r2,zero,1c614 <__alt_data_end+0xfc01c614>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   1c664:	e0bffe17 	ldw	r2,-8(fp)
   1c668:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   1c66c:	e0bffe17 	ldw	r2,-8(fp)
   1c670:	00c00fc4 	movi	r3,63
   1c674:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   1c678:	e0bffe17 	ldw	r2,-8(fp)
   1c67c:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   1c680:	d0272215 	stw	zero,-25464(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   1c684:	008000f4 	movhi	r2,3
   1c688:	10b88104 	addi	r2,r2,-7676
   1c68c:	d0a72615 	stw	r2,-25448(gp)
}
   1c690:	0001883a 	nop
   1c694:	e037883a 	mov	sp,fp
   1c698:	dfc00117 	ldw	ra,4(sp)
   1c69c:	df000017 	ldw	fp,0(sp)
   1c6a0:	dec00204 	addi	sp,sp,8
   1c6a4:	f800283a 	ret

0001c6a8 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   1c6a8:	defffd04 	addi	sp,sp,-12
   1c6ac:	df000215 	stw	fp,8(sp)
   1c6b0:	df000204 	addi	fp,sp,8
   1c6b4:	e13ffe15 	stw	r4,-8(fp)
   1c6b8:	2805883a 	mov	r2,r5
   1c6bc:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   1c6c0:	00000706 	br	1c6e0 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   1c6c4:	e0bffe17 	ldw	r2,-8(fp)
   1c6c8:	10c00044 	addi	r3,r2,1
   1c6cc:	e0fffe15 	stw	r3,-8(fp)
   1c6d0:	10000005 	stb	zero,0(r2)
        size--;
   1c6d4:	e0bfff0b 	ldhu	r2,-4(fp)
   1c6d8:	10bfffc4 	addi	r2,r2,-1
   1c6dc:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   1c6e0:	e0bfff0b 	ldhu	r2,-4(fp)
   1c6e4:	103ff71e 	bne	r2,zero,1c6c4 <__alt_data_end+0xfc01c6c4>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   1c6e8:	0001883a 	nop
   1c6ec:	e037883a 	mov	sp,fp
   1c6f0:	df000017 	ldw	fp,0(sp)
   1c6f4:	dec00104 	addi	sp,sp,4
   1c6f8:	f800283a 	ret

0001c6fc <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   1c6fc:	defffc04 	addi	sp,sp,-16
   1c700:	df000315 	stw	fp,12(sp)
   1c704:	df000304 	addi	fp,sp,12
   1c708:	e13ffd15 	stw	r4,-12(fp)
   1c70c:	e17ffe15 	stw	r5,-8(fp)
   1c710:	3005883a 	mov	r2,r6
   1c714:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   1c718:	00000b06 	br	1c748 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   1c71c:	e0bffd17 	ldw	r2,-12(fp)
   1c720:	10c00044 	addi	r3,r2,1
   1c724:	e0fffd15 	stw	r3,-12(fp)
   1c728:	e0fffe17 	ldw	r3,-8(fp)
   1c72c:	19000044 	addi	r4,r3,1
   1c730:	e13ffe15 	stw	r4,-8(fp)
   1c734:	18c00003 	ldbu	r3,0(r3)
   1c738:	10c00005 	stb	r3,0(r2)
        size--;
   1c73c:	e0bfff0b 	ldhu	r2,-4(fp)
   1c740:	10bfffc4 	addi	r2,r2,-1
   1c744:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   1c748:	e0bfff0b 	ldhu	r2,-4(fp)
   1c74c:	103ff31e 	bne	r2,zero,1c71c <__alt_data_end+0xfc01c71c>
        *pdest++ = *psrc++;
        size--;
    }
}
   1c750:	0001883a 	nop
   1c754:	e037883a 	mov	sp,fp
   1c758:	df000017 	ldw	fp,0(sp)
   1c75c:	dec00104 	addi	sp,sp,4
   1c760:	f800283a 	ret

0001c764 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   1c764:	defffb04 	addi	sp,sp,-20
   1c768:	dfc00415 	stw	ra,16(sp)
   1c76c:	df000315 	stw	fp,12(sp)
   1c770:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1c774:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c778:	0005303a 	rdctl	r2,status
   1c77c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c780:	e0ffff17 	ldw	r3,-4(fp)
   1c784:	00bfff84 	movi	r2,-2
   1c788:	1884703a 	and	r2,r3,r2
   1c78c:	1001703a 	wrctl	status,r2
  
  return context;
   1c790:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
   1c794:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   1c798:	d0a72d03 	ldbu	r2,-25420(gp)
   1c79c:	10803fcc 	andi	r2,r2,255
   1c7a0:	10001a1e 	bne	r2,zero,1c80c <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   1c7a4:	d0a71f03 	ldbu	r2,-25476(gp)
   1c7a8:	10803fcc 	andi	r2,r2,255
   1c7ac:	1000171e 	bne	r2,zero,1c80c <OS_Sched+0xa8>
            OS_SchedNew();
   1c7b0:	001c8340 	call	1c834 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   1c7b4:	d0e72103 	ldbu	r3,-25468(gp)
   1c7b8:	d0a72143 	ldbu	r2,-25467(gp)
   1c7bc:	18c03fcc 	andi	r3,r3,255
   1c7c0:	10803fcc 	andi	r2,r2,255
   1c7c4:	18801126 	beq	r3,r2,1c80c <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   1c7c8:	d0a72103 	ldbu	r2,-25468(gp)
   1c7cc:	10c03fcc 	andi	r3,r2,255
   1c7d0:	008000f4 	movhi	r2,3
   1c7d4:	10b9c504 	addi	r2,r2,-6380
   1c7d8:	18c7883a 	add	r3,r3,r3
   1c7dc:	18c7883a 	add	r3,r3,r3
   1c7e0:	10c5883a 	add	r2,r2,r3
   1c7e4:	10800017 	ldw	r2,0(r2)
   1c7e8:	d0a72915 	stw	r2,-25436(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   1c7ec:	d0a72917 	ldw	r2,-25436(gp)
   1c7f0:	10c00e17 	ldw	r3,56(r2)
   1c7f4:	18c00044 	addi	r3,r3,1
   1c7f8:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   1c7fc:	d0a72417 	ldw	r2,-25456(gp)
   1c800:	10800044 	addi	r2,r2,1
   1c804:	d0a72415 	stw	r2,-25456(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   1c808:	0023f000 	call	23f00 <OSCtxSw>
   1c80c:	e0bffd17 	ldw	r2,-12(fp)
   1c810:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c814:	e0bffe17 	ldw	r2,-8(fp)
   1c818:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   1c81c:	0001883a 	nop
   1c820:	e037883a 	mov	sp,fp
   1c824:	dfc00117 	ldw	ra,4(sp)
   1c828:	df000017 	ldw	fp,0(sp)
   1c82c:	dec00204 	addi	sp,sp,8
   1c830:	f800283a 	ret

0001c834 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   1c834:	defffe04 	addi	sp,sp,-8
   1c838:	df000115 	stw	fp,4(sp)
   1c83c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   1c840:	d0a72b03 	ldbu	r2,-25428(gp)
   1c844:	10c03fcc 	andi	r3,r2,255
   1c848:	008000b4 	movhi	r2,2
   1c84c:	1096fc04 	addi	r2,r2,23536
   1c850:	10c5883a 	add	r2,r2,r3
   1c854:	10800003 	ldbu	r2,0(r2)
   1c858:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   1c85c:	e0bfff03 	ldbu	r2,-4(fp)
   1c860:	100490fa 	slli	r2,r2,3
   1c864:	1009883a 	mov	r4,r2
   1c868:	e0ffff03 	ldbu	r3,-4(fp)
   1c86c:	d0a72b44 	addi	r2,gp,-25427
   1c870:	1885883a 	add	r2,r3,r2
   1c874:	10800003 	ldbu	r2,0(r2)
   1c878:	10c03fcc 	andi	r3,r2,255
   1c87c:	008000b4 	movhi	r2,2
   1c880:	1096fc04 	addi	r2,r2,23536
   1c884:	10c5883a 	add	r2,r2,r3
   1c888:	10800003 	ldbu	r2,0(r2)
   1c88c:	2085883a 	add	r2,r4,r2
   1c890:	d0a72105 	stb	r2,-25468(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   1c894:	0001883a 	nop
   1c898:	e037883a 	mov	sp,fp
   1c89c:	df000017 	ldw	fp,0(sp)
   1c8a0:	dec00104 	addi	sp,sp,4
   1c8a4:	f800283a 	ret

0001c8a8 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   1c8a8:	defffc04 	addi	sp,sp,-16
   1c8ac:	df000315 	stw	fp,12(sp)
   1c8b0:	df000304 	addi	fp,sp,12
   1c8b4:	e13ffe15 	stw	r4,-8(fp)
   1c8b8:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   1c8bc:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   1c8c0:	00000b06 	br	1c8f0 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   1c8c4:	e0bffe17 	ldw	r2,-8(fp)
   1c8c8:	10c00044 	addi	r3,r2,1
   1c8cc:	e0fffe15 	stw	r3,-8(fp)
   1c8d0:	e0ffff17 	ldw	r3,-4(fp)
   1c8d4:	19000044 	addi	r4,r3,1
   1c8d8:	e13fff15 	stw	r4,-4(fp)
   1c8dc:	18c00003 	ldbu	r3,0(r3)
   1c8e0:	10c00005 	stb	r3,0(r2)
        len++;
   1c8e4:	e0bffd03 	ldbu	r2,-12(fp)
   1c8e8:	10800044 	addi	r2,r2,1
   1c8ec:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   1c8f0:	e0bfff17 	ldw	r2,-4(fp)
   1c8f4:	10800003 	ldbu	r2,0(r2)
   1c8f8:	10803fcc 	andi	r2,r2,255
   1c8fc:	103ff11e 	bne	r2,zero,1c8c4 <__alt_data_end+0xfc01c8c4>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   1c900:	e0bffe17 	ldw	r2,-8(fp)
   1c904:	10000005 	stb	zero,0(r2)
    return (len);
   1c908:	e0bffd03 	ldbu	r2,-12(fp)
}
   1c90c:	e037883a 	mov	sp,fp
   1c910:	df000017 	ldw	fp,0(sp)
   1c914:	dec00104 	addi	sp,sp,4
   1c918:	f800283a 	ret

0001c91c <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   1c91c:	defffd04 	addi	sp,sp,-12
   1c920:	df000215 	stw	fp,8(sp)
   1c924:	df000204 	addi	fp,sp,8
   1c928:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   1c92c:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   1c930:	00000606 	br	1c94c <OS_StrLen+0x30>
        psrc++;
   1c934:	e0bfff17 	ldw	r2,-4(fp)
   1c938:	10800044 	addi	r2,r2,1
   1c93c:	e0bfff15 	stw	r2,-4(fp)
        len++;
   1c940:	e0bffe03 	ldbu	r2,-8(fp)
   1c944:	10800044 	addi	r2,r2,1
   1c948:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   1c94c:	e0bfff17 	ldw	r2,-4(fp)
   1c950:	10800003 	ldbu	r2,0(r2)
   1c954:	10803fcc 	andi	r2,r2,255
   1c958:	103ff61e 	bne	r2,zero,1c934 <__alt_data_end+0xfc01c934>
        psrc++;
        len++;
    }
    return (len);
   1c95c:	e0bffe03 	ldbu	r2,-8(fp)
}
   1c960:	e037883a 	mov	sp,fp
   1c964:	df000017 	ldw	fp,0(sp)
   1c968:	dec00104 	addi	sp,sp,4
   1c96c:	f800283a 	ret

0001c970 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   1c970:	defffa04 	addi	sp,sp,-24
   1c974:	dfc00515 	stw	ra,20(sp)
   1c978:	df000415 	stw	fp,16(sp)
   1c97c:	df000404 	addi	fp,sp,16
   1c980:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1c984:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c988:	0005303a 	rdctl	r2,status
   1c98c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c990:	e0fffd17 	ldw	r3,-12(fp)
   1c994:	00bfff84 	movi	r2,-2
   1c998:	1884703a 	and	r2,r3,r2
   1c99c:	1001703a 	wrctl	status,r2
  
  return context;
   1c9a0:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   1c9a4:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   1c9a8:	d0a72017 	ldw	r2,-25472(gp)
   1c9ac:	10800044 	addi	r2,r2,1
   1c9b0:	d0a72015 	stw	r2,-25472(gp)
   1c9b4:	e0bffc17 	ldw	r2,-16(fp)
   1c9b8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c9bc:	e0bffe17 	ldw	r2,-8(fp)
   1c9c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   1c9c4:	00242140 	call	24214 <OSTaskIdleHook>
    }
   1c9c8:	003fef06 	br	1c988 <__alt_data_end+0xfc01c988>

0001c9cc <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   1c9cc:	defff804 	addi	sp,sp,-32
   1c9d0:	dfc00715 	stw	ra,28(sp)
   1c9d4:	df000615 	stw	fp,24(sp)
   1c9d8:	dc400515 	stw	r17,20(sp)
   1c9dc:	dc000415 	stw	r16,16(sp)
   1c9e0:	df000604 	addi	fp,sp,24
   1c9e4:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1c9e8:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   1c9ec:	00000206 	br	1c9f8 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   1c9f0:	01000304 	movi	r4,12
   1c9f4:	00221100 	call	22110 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   1c9f8:	d0a73103 	ldbu	r2,-25404(gp)
   1c9fc:	10803fcc 	andi	r2,r2,255
   1ca00:	103ffb26 	beq	r2,zero,1c9f0 <__alt_data_end+0xfc01c9f0>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   1ca04:	d0e72517 	ldw	r3,-25452(gp)
   1ca08:	00947b34 	movhi	r2,20972
   1ca0c:	10a147c4 	addi	r2,r2,-31457
   1ca10:	1888383a 	mulxuu	r4,r3,r2
   1ca14:	1885383a 	mul	r2,r3,r2
   1ca18:	1021883a 	mov	r16,r2
   1ca1c:	2023883a 	mov	r17,r4
   1ca20:	8804d17a 	srli	r2,r17,5
   1ca24:	d0a72515 	stw	r2,-25452(gp)
    if (OSIdleCtrMax == 0L) {
   1ca28:	d0a72517 	ldw	r2,-25452(gp)
   1ca2c:	1000031e 	bne	r2,zero,1ca3c <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   1ca30:	d0272705 	stb	zero,-25444(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   1ca34:	01003fc4 	movi	r4,255
   1ca38:	0021d980 	call	21d98 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ca3c:	0005303a 	rdctl	r2,status
   1ca40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ca44:	e0fffb17 	ldw	r3,-20(fp)
   1ca48:	00bfff84 	movi	r2,-2
   1ca4c:	1884703a 	and	r2,r3,r2
   1ca50:	1001703a 	wrctl	status,r2
  
  return context;
   1ca54:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   1ca58:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   1ca5c:	d0a72017 	ldw	r2,-25472(gp)
   1ca60:	d0a73215 	stw	r2,-25400(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   1ca64:	d0272015 	stw	zero,-25472(gp)
   1ca68:	e0bffa17 	ldw	r2,-24(fp)
   1ca6c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ca70:	e0bffc17 	ldw	r2,-16(fp)
   1ca74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   1ca78:	d0e73217 	ldw	r3,-25400(gp)
   1ca7c:	d0a72517 	ldw	r2,-25452(gp)
   1ca80:	1885203a 	divu	r2,r3,r2
   1ca84:	1007883a 	mov	r3,r2
   1ca88:	00801904 	movi	r2,100
   1ca8c:	10c5c83a 	sub	r2,r2,r3
   1ca90:	d0a72705 	stb	r2,-25444(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   1ca94:	00241940 	call	24194 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   1ca98:	001caa80 	call	1caa8 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   1ca9c:	01000184 	movi	r4,6
   1caa0:	00221100 	call	22110 <OSTimeDly>
    }
   1caa4:	003fe506 	br	1ca3c <__alt_data_end+0xfc01ca3c>

0001caa8 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   1caa8:	defffa04 	addi	sp,sp,-24
   1caac:	dfc00515 	stw	ra,20(sp)
   1cab0:	df000415 	stw	fp,16(sp)
   1cab4:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   1cab8:	e03ffc05 	stb	zero,-16(fp)
   1cabc:	00002406 	br	1cb50 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   1cac0:	e0bffc03 	ldbu	r2,-16(fp)
   1cac4:	e0fffe04 	addi	r3,fp,-8
   1cac8:	180b883a 	mov	r5,r3
   1cacc:	1009883a 	mov	r4,r2
   1cad0:	0021bd80 	call	21bd8 <OSTaskStkChk>
   1cad4:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   1cad8:	e0bffc43 	ldbu	r2,-15(fp)
   1cadc:	1000191e 	bne	r2,zero,1cb44 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   1cae0:	e0fffc03 	ldbu	r3,-16(fp)
   1cae4:	008000f4 	movhi	r2,3
   1cae8:	10b9c504 	addi	r2,r2,-6380
   1caec:	18c7883a 	add	r3,r3,r3
   1caf0:	18c7883a 	add	r3,r3,r3
   1caf4:	10c5883a 	add	r2,r2,r3
   1caf8:	10800017 	ldw	r2,0(r2)
   1cafc:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   1cb00:	e0bffd17 	ldw	r2,-12(fp)
   1cb04:	10000f26 	beq	r2,zero,1cb44 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   1cb08:	e0bffd17 	ldw	r2,-12(fp)
   1cb0c:	10800060 	cmpeqi	r2,r2,1
   1cb10:	10000c1e 	bne	r2,zero,1cb44 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   1cb14:	e0bffd17 	ldw	r2,-12(fp)
   1cb18:	10c00217 	ldw	r3,8(r2)
   1cb1c:	e0bffd17 	ldw	r2,-12(fp)
   1cb20:	10800317 	ldw	r2,12(r2)
   1cb24:	1085883a 	add	r2,r2,r2
   1cb28:	1085883a 	add	r2,r2,r2
   1cb2c:	1887883a 	add	r3,r3,r2
   1cb30:	e0bffd17 	ldw	r2,-12(fp)
   1cb34:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   1cb38:	e0ffff17 	ldw	r3,-4(fp)
   1cb3c:	e0bffd17 	ldw	r2,-12(fp)
   1cb40:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   1cb44:	e0bffc03 	ldbu	r2,-16(fp)
   1cb48:	10800044 	addi	r2,r2,1
   1cb4c:	e0bffc05 	stb	r2,-16(fp)
   1cb50:	e0bffc03 	ldbu	r2,-16(fp)
   1cb54:	10800570 	cmpltui	r2,r2,21
   1cb58:	103fd91e 	bne	r2,zero,1cac0 <__alt_data_end+0xfc01cac0>
#endif
                }
            }
        }
    }
}
   1cb5c:	0001883a 	nop
   1cb60:	e037883a 	mov	sp,fp
   1cb64:	dfc00117 	ldw	ra,4(sp)
   1cb68:	df000017 	ldw	fp,0(sp)
   1cb6c:	dec00204 	addi	sp,sp,8
   1cb70:	f800283a 	ret

0001cb74 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   1cb74:	defff204 	addi	sp,sp,-56
   1cb78:	dfc00d15 	stw	ra,52(sp)
   1cb7c:	df000c15 	stw	fp,48(sp)
   1cb80:	df000c04 	addi	fp,sp,48
   1cb84:	e17ffc15 	stw	r5,-16(fp)
   1cb88:	e1bffd15 	stw	r6,-12(fp)
   1cb8c:	3807883a 	mov	r3,r7
   1cb90:	e0800417 	ldw	r2,16(fp)
   1cb94:	e13ffb05 	stb	r4,-20(fp)
   1cb98:	e0fffe0d 	sth	r3,-8(fp)
   1cb9c:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1cba0:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1cba4:	0005303a 	rdctl	r2,status
   1cba8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1cbac:	e0fffa17 	ldw	r3,-24(fp)
   1cbb0:	00bfff84 	movi	r2,-2
   1cbb4:	1884703a 	and	r2,r3,r2
   1cbb8:	1001703a 	wrctl	status,r2
  
  return context;
   1cbbc:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
   1cbc0:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   1cbc4:	d0a72617 	ldw	r2,-25448(gp)
   1cbc8:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
   1cbcc:	e0bff617 	ldw	r2,-40(fp)
   1cbd0:	10009326 	beq	r2,zero,1ce20 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   1cbd4:	e0bff617 	ldw	r2,-40(fp)
   1cbd8:	10800517 	ldw	r2,20(r2)
   1cbdc:	d0a72615 	stw	r2,-25448(gp)
   1cbe0:	e0bff417 	ldw	r2,-48(fp)
   1cbe4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1cbe8:	e0bff817 	ldw	r2,-32(fp)
   1cbec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   1cbf0:	e0bff617 	ldw	r2,-40(fp)
   1cbf4:	e0fffc17 	ldw	r3,-16(fp)
   1cbf8:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   1cbfc:	e0bff617 	ldw	r2,-40(fp)
   1cc00:	e0fffb03 	ldbu	r3,-20(fp)
   1cc04:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   1cc08:	e0bff617 	ldw	r2,-40(fp)
   1cc0c:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   1cc10:	e0bff617 	ldw	r2,-40(fp)
   1cc14:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   1cc18:	e0bff617 	ldw	r2,-40(fp)
   1cc1c:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   1cc20:	e0bff617 	ldw	r2,-40(fp)
   1cc24:	e0c00317 	ldw	r3,12(fp)
   1cc28:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   1cc2c:	e0bff617 	ldw	r2,-40(fp)
   1cc30:	e0c00217 	ldw	r3,8(fp)
   1cc34:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   1cc38:	e0bff617 	ldw	r2,-40(fp)
   1cc3c:	e0fffd17 	ldw	r3,-12(fp)
   1cc40:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   1cc44:	e0bff617 	ldw	r2,-40(fp)
   1cc48:	e0ffff0b 	ldhu	r3,-4(fp)
   1cc4c:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   1cc50:	e0bff617 	ldw	r2,-40(fp)
   1cc54:	e0fffe0b 	ldhu	r3,-8(fp)
   1cc58:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   1cc5c:	e0bff617 	ldw	r2,-40(fp)
   1cc60:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   1cc64:	e0bffb03 	ldbu	r2,-20(fp)
   1cc68:	1004d0fa 	srli	r2,r2,3
   1cc6c:	1007883a 	mov	r3,r2
   1cc70:	e0bff617 	ldw	r2,-40(fp)
   1cc74:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   1cc78:	e0bffb03 	ldbu	r2,-20(fp)
   1cc7c:	108001cc 	andi	r2,r2,7
   1cc80:	1007883a 	mov	r3,r2
   1cc84:	e0bff617 	ldw	r2,-40(fp)
   1cc88:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   1cc8c:	e0bff617 	ldw	r2,-40(fp)
   1cc90:	10800d03 	ldbu	r2,52(r2)
   1cc94:	10803fcc 	andi	r2,r2,255
   1cc98:	00c00044 	movi	r3,1
   1cc9c:	1884983a 	sll	r2,r3,r2
   1cca0:	1007883a 	mov	r3,r2
   1cca4:	e0bff617 	ldw	r2,-40(fp)
   1cca8:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   1ccac:	e0bff617 	ldw	r2,-40(fp)
   1ccb0:	10800cc3 	ldbu	r2,51(r2)
   1ccb4:	10803fcc 	andi	r2,r2,255
   1ccb8:	00c00044 	movi	r3,1
   1ccbc:	1884983a 	sll	r2,r3,r2
   1ccc0:	1007883a 	mov	r3,r2
   1ccc4:	e0bff617 	ldw	r2,-40(fp)
   1ccc8:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   1cccc:	e0bff617 	ldw	r2,-40(fp)
   1ccd0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   1ccd4:	e0bff617 	ldw	r2,-40(fp)
   1ccd8:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   1ccdc:	e0bff617 	ldw	r2,-40(fp)
   1cce0:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   1cce4:	e0bff617 	ldw	r2,-40(fp)
   1cce8:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   1ccec:	e0bff617 	ldw	r2,-40(fp)
   1ccf0:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   1ccf4:	e0bff617 	ldw	r2,-40(fp)
   1ccf8:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   1ccfc:	e0bff617 	ldw	r2,-40(fp)
   1cd00:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   1cd04:	e0bff617 	ldw	r2,-40(fp)
   1cd08:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   1cd0c:	e0bff617 	ldw	r2,-40(fp)
   1cd10:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   1cd14:	e0bff617 	ldw	r2,-40(fp)
   1cd18:	00c00fc4 	movi	r3,63
   1cd1c:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   1cd20:	e0bff617 	ldw	r2,-40(fp)
   1cd24:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   1cd28:	e13ff617 	ldw	r4,-40(fp)
   1cd2c:	00242340 	call	24234 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   1cd30:	e13ff617 	ldw	r4,-40(fp)
   1cd34:	002412c0 	call	2412c <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1cd38:	0005303a 	rdctl	r2,status
   1cd3c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1cd40:	e0fff517 	ldw	r3,-44(fp)
   1cd44:	00bfff84 	movi	r2,-2
   1cd48:	1884703a 	and	r2,r3,r2
   1cd4c:	1001703a 	wrctl	status,r2
  
  return context;
   1cd50:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   1cd54:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   1cd58:	e0fffb03 	ldbu	r3,-20(fp)
   1cd5c:	008000f4 	movhi	r2,3
   1cd60:	10b9c504 	addi	r2,r2,-6380
   1cd64:	18c7883a 	add	r3,r3,r3
   1cd68:	18c7883a 	add	r3,r3,r3
   1cd6c:	10c5883a 	add	r2,r2,r3
   1cd70:	e0fff617 	ldw	r3,-40(fp)
   1cd74:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   1cd78:	d0e72217 	ldw	r3,-25464(gp)
   1cd7c:	e0bff617 	ldw	r2,-40(fp)
   1cd80:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   1cd84:	e0bff617 	ldw	r2,-40(fp)
   1cd88:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   1cd8c:	d0a72217 	ldw	r2,-25464(gp)
   1cd90:	10000326 	beq	r2,zero,1cda0 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   1cd94:	d0a72217 	ldw	r2,-25464(gp)
   1cd98:	e0fff617 	ldw	r3,-40(fp)
   1cd9c:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   1cda0:	e0bff617 	ldw	r2,-40(fp)
   1cda4:	d0a72215 	stw	r2,-25464(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   1cda8:	e0bff617 	ldw	r2,-40(fp)
   1cdac:	10c00d83 	ldbu	r3,54(r2)
   1cdb0:	d0a72b03 	ldbu	r2,-25428(gp)
   1cdb4:	1884b03a 	or	r2,r3,r2
   1cdb8:	d0a72b05 	stb	r2,-25428(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1cdbc:	e0bff617 	ldw	r2,-40(fp)
   1cdc0:	10800d03 	ldbu	r2,52(r2)
   1cdc4:	10c03fcc 	andi	r3,r2,255
   1cdc8:	e0bff617 	ldw	r2,-40(fp)
   1cdcc:	10800d03 	ldbu	r2,52(r2)
   1cdd0:	11003fcc 	andi	r4,r2,255
   1cdd4:	d0a72b44 	addi	r2,gp,-25427
   1cdd8:	2085883a 	add	r2,r4,r2
   1cddc:	11000003 	ldbu	r4,0(r2)
   1cde0:	e0bff617 	ldw	r2,-40(fp)
   1cde4:	10800d43 	ldbu	r2,53(r2)
   1cde8:	2084b03a 	or	r2,r4,r2
   1cdec:	1009883a 	mov	r4,r2
   1cdf0:	d0a72b44 	addi	r2,gp,-25427
   1cdf4:	1885883a 	add	r2,r3,r2
   1cdf8:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   1cdfc:	d0a72743 	ldbu	r2,-25443(gp)
   1ce00:	10800044 	addi	r2,r2,1
   1ce04:	d0a72745 	stb	r2,-25443(gp)
   1ce08:	e0bff417 	ldw	r2,-48(fp)
   1ce0c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ce10:	e0bff717 	ldw	r2,-36(fp)
   1ce14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   1ce18:	0005883a 	mov	r2,zero
   1ce1c:	00000506 	br	1ce34 <OS_TCBInit+0x2c0>
   1ce20:	e0bff417 	ldw	r2,-48(fp)
   1ce24:	e0bff915 	stw	r2,-28(fp)
   1ce28:	e0bff917 	ldw	r2,-28(fp)
   1ce2c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   1ce30:	00801084 	movi	r2,66
}
   1ce34:	e037883a 	mov	sp,fp
   1ce38:	dfc00117 	ldw	ra,4(sp)
   1ce3c:	df000017 	ldw	fp,0(sp)
   1ce40:	dec00204 	addi	sp,sp,8
   1ce44:	f800283a 	ret

0001ce48 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   1ce48:	defffe04 	addi	sp,sp,-8
   1ce4c:	df000115 	stw	fp,4(sp)
   1ce50:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   1ce54:	d0a01104 	addi	r2,gp,-32700
   1ce58:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   1ce5c:	d0a01204 	addi	r2,gp,-32696
   1ce60:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   1ce64:	d0a01384 	addi	r2,gp,-32690
   1ce68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   1ce6c:	d0a01404 	addi	r2,gp,-32688
   1ce70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   1ce74:	d0a01304 	addi	r2,gp,-32692
   1ce78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   1ce7c:	d0a01484 	addi	r2,gp,-32686
   1ce80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   1ce84:	d0a01504 	addi	r2,gp,-32684
   1ce88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   1ce8c:	d0a01584 	addi	r2,gp,-32682
   1ce90:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   1ce94:	d0a01604 	addi	r2,gp,-32680
   1ce98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   1ce9c:	d0a01684 	addi	r2,gp,-32678
   1cea0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   1cea4:	d0a01704 	addi	r2,gp,-32676
   1cea8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   1ceac:	d0a01784 	addi	r2,gp,-32674
   1ceb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   1ceb4:	d0a01804 	addi	r2,gp,-32672
   1ceb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   1cebc:	d0a01884 	addi	r2,gp,-32670
   1cec0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   1cec4:	d0a01904 	addi	r2,gp,-32668
   1cec8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   1cecc:	d0a01984 	addi	r2,gp,-32666
   1ced0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   1ced4:	d0a01a04 	addi	r2,gp,-32664
   1ced8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   1cedc:	d0a01a84 	addi	r2,gp,-32662
   1cee0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   1cee4:	d0a01b04 	addi	r2,gp,-32660
   1cee8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   1ceec:	d0a01b84 	addi	r2,gp,-32658
   1cef0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   1cef4:	d0a01c04 	addi	r2,gp,-32656
   1cef8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   1cefc:	d0a01c84 	addi	r2,gp,-32654
   1cf00:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   1cf04:	d0a01d04 	addi	r2,gp,-32652
   1cf08:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   1cf0c:	d0a01d84 	addi	r2,gp,-32650
   1cf10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   1cf14:	d0a01e04 	addi	r2,gp,-32648
   1cf18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   1cf1c:	d0a01e84 	addi	r2,gp,-32646
   1cf20:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   1cf24:	d0a01f04 	addi	r2,gp,-32644
   1cf28:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   1cf2c:	d0a01f84 	addi	r2,gp,-32642
   1cf30:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   1cf34:	d0a02004 	addi	r2,gp,-32640
   1cf38:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   1cf3c:	d0a02084 	addi	r2,gp,-32638
   1cf40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   1cf44:	d0a02104 	addi	r2,gp,-32636
   1cf48:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   1cf4c:	d0a02184 	addi	r2,gp,-32634
   1cf50:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   1cf54:	d0a02204 	addi	r2,gp,-32632
   1cf58:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   1cf5c:	d0a02284 	addi	r2,gp,-32630
   1cf60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   1cf64:	d0a02304 	addi	r2,gp,-32628
   1cf68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   1cf6c:	d0a02384 	addi	r2,gp,-32626
   1cf70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   1cf74:	d0a02404 	addi	r2,gp,-32624
   1cf78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   1cf7c:	d0a02484 	addi	r2,gp,-32622
   1cf80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   1cf84:	d0a02504 	addi	r2,gp,-32620
   1cf88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   1cf8c:	d0a02584 	addi	r2,gp,-32618
   1cf90:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   1cf94:	d0a02604 	addi	r2,gp,-32616
   1cf98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   1cf9c:	d0a02684 	addi	r2,gp,-32614
   1cfa0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   1cfa4:	d0a02704 	addi	r2,gp,-32612
   1cfa8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   1cfac:	d0a02784 	addi	r2,gp,-32610
   1cfb0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   1cfb4:	d0a02804 	addi	r2,gp,-32608
   1cfb8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   1cfbc:	d0a02d04 	addi	r2,gp,-32588
   1cfc0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   1cfc4:	0001883a 	nop
   1cfc8:	e037883a 	mov	sp,fp
   1cfcc:	df000017 	ldw	fp,0(sp)
   1cfd0:	dec00104 	addi	sp,sp,4
   1cfd4:	f800283a 	ret

0001cfd8 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   1cfd8:	defff204 	addi	sp,sp,-56
   1cfdc:	df000d15 	stw	fp,52(sp)
   1cfe0:	df000d04 	addi	fp,sp,52
   1cfe4:	e13ffc15 	stw	r4,-16(fp)
   1cfe8:	2807883a 	mov	r3,r5
   1cfec:	3005883a 	mov	r2,r6
   1cff0:	e1ffff15 	stw	r7,-4(fp)
   1cff4:	e0fffd0d 	sth	r3,-12(fp)
   1cff8:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1cffc:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1d000:	e0bfff17 	ldw	r2,-4(fp)
   1d004:	1000021e 	bne	r2,zero,1d010 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   1d008:	0005883a 	mov	r2,zero
   1d00c:	0000b006 	br	1d2d0 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1d010:	e0bffc17 	ldw	r2,-16(fp)
   1d014:	1000051e 	bne	r2,zero,1d02c <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1d018:	e0bfff17 	ldw	r2,-4(fp)
   1d01c:	00c01b84 	movi	r3,110
   1d020:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1d024:	0005883a 	mov	r2,zero
   1d028:	0000a906 	br	1d2d0 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   1d02c:	e0bffc17 	ldw	r2,-16(fp)
   1d030:	10800003 	ldbu	r2,0(r2)
   1d034:	10803fcc 	andi	r2,r2,255
   1d038:	10800160 	cmpeqi	r2,r2,5
   1d03c:	1000051e 	bne	r2,zero,1d054 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   1d040:	e0bfff17 	ldw	r2,-4(fp)
   1d044:	00c00044 	movi	r3,1
   1d048:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1d04c:	0005883a 	mov	r2,zero
   1d050:	00009f06 	br	1d2d0 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   1d054:	e0fffe03 	ldbu	r3,-8(fp)
   1d058:	00bfe004 	movi	r2,-128
   1d05c:	1884703a 	and	r2,r3,r2
   1d060:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   1d064:	e0bff503 	ldbu	r2,-44(fp)
   1d068:	10000626 	beq	r2,zero,1d084 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   1d06c:	e0bffe03 	ldbu	r2,-8(fp)
   1d070:	10801fcc 	andi	r2,r2,127
   1d074:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   1d078:	00800044 	movi	r2,1
   1d07c:	e0bff385 	stb	r2,-50(fp)
   1d080:	00000106 	br	1d088 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   1d084:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   1d088:	e0bfff17 	ldw	r2,-4(fp)
   1d08c:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d090:	0005303a 	rdctl	r2,status
   1d094:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d098:	e0fffb17 	ldw	r3,-20(fp)
   1d09c:	00bfff84 	movi	r2,-2
   1d0a0:	1884703a 	and	r2,r3,r2
   1d0a4:	1001703a 	wrctl	status,r2
  
  return context;
   1d0a8:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   1d0ac:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   1d0b0:	e0bffe03 	ldbu	r2,-8(fp)
   1d0b4:	10c00060 	cmpeqi	r3,r2,1
   1d0b8:	18005f1e 	bne	r3,zero,1d238 <OSFlagAccept+0x260>
   1d0bc:	10c00088 	cmpgei	r3,r2,2
   1d0c0:	1800021e 	bne	r3,zero,1d0cc <OSFlagAccept+0xf4>
   1d0c4:	10003f26 	beq	r2,zero,1d1c4 <OSFlagAccept+0x1ec>
   1d0c8:	00007706 	br	1d2a8 <OSFlagAccept+0x2d0>
   1d0cc:	10c000a0 	cmpeqi	r3,r2,2
   1d0d0:	1800031e 	bne	r3,zero,1d0e0 <OSFlagAccept+0x108>
   1d0d4:	108000e0 	cmpeqi	r2,r2,3
   1d0d8:	10001e1e 	bne	r2,zero,1d154 <OSFlagAccept+0x17c>
   1d0dc:	00007206 	br	1d2a8 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   1d0e0:	e0bffc17 	ldw	r2,-16(fp)
   1d0e4:	10c0020b 	ldhu	r3,8(r2)
   1d0e8:	e0bffd0b 	ldhu	r2,-12(fp)
   1d0ec:	1884703a 	and	r2,r3,r2
   1d0f0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1d0f4:	e0fff30b 	ldhu	r3,-52(fp)
   1d0f8:	e0bffd0b 	ldhu	r2,-12(fp)
   1d0fc:	18800d1e 	bne	r3,r2,1d134 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1d100:	e0bff383 	ldbu	r2,-50(fp)
   1d104:	10800058 	cmpnei	r2,r2,1
   1d108:	10000d1e 	bne	r2,zero,1d140 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   1d10c:	e0bffc17 	ldw	r2,-16(fp)
   1d110:	1080020b 	ldhu	r2,8(r2)
   1d114:	1007883a 	mov	r3,r2
   1d118:	e0bff30b 	ldhu	r2,-52(fp)
   1d11c:	0084303a 	nor	r2,zero,r2
   1d120:	1884703a 	and	r2,r3,r2
   1d124:	1007883a 	mov	r3,r2
   1d128:	e0bffc17 	ldw	r2,-16(fp)
   1d12c:	10c0020d 	sth	r3,8(r2)
   1d130:	00000306 	br	1d140 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1d134:	e0bfff17 	ldw	r2,-4(fp)
   1d138:	00c01c04 	movi	r3,112
   1d13c:	10c00005 	stb	r3,0(r2)
   1d140:	e0bff417 	ldw	r2,-48(fp)
   1d144:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d148:	e0bff617 	ldw	r2,-40(fp)
   1d14c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1d150:	00005e06 	br	1d2cc <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   1d154:	e0bffc17 	ldw	r2,-16(fp)
   1d158:	10c0020b 	ldhu	r3,8(r2)
   1d15c:	e0bffd0b 	ldhu	r2,-12(fp)
   1d160:	1884703a 	and	r2,r3,r2
   1d164:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   1d168:	e0bff30b 	ldhu	r2,-52(fp)
   1d16c:	10000d26 	beq	r2,zero,1d1a4 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1d170:	e0bff383 	ldbu	r2,-50(fp)
   1d174:	10800058 	cmpnei	r2,r2,1
   1d178:	10000d1e 	bne	r2,zero,1d1b0 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   1d17c:	e0bffc17 	ldw	r2,-16(fp)
   1d180:	1080020b 	ldhu	r2,8(r2)
   1d184:	1007883a 	mov	r3,r2
   1d188:	e0bff30b 	ldhu	r2,-52(fp)
   1d18c:	0084303a 	nor	r2,zero,r2
   1d190:	1884703a 	and	r2,r3,r2
   1d194:	1007883a 	mov	r3,r2
   1d198:	e0bffc17 	ldw	r2,-16(fp)
   1d19c:	10c0020d 	sth	r3,8(r2)
   1d1a0:	00000306 	br	1d1b0 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1d1a4:	e0bfff17 	ldw	r2,-4(fp)
   1d1a8:	00c01c04 	movi	r3,112
   1d1ac:	10c00005 	stb	r3,0(r2)
   1d1b0:	e0bff417 	ldw	r2,-48(fp)
   1d1b4:	e0bff715 	stw	r2,-36(fp)
   1d1b8:	e0bff717 	ldw	r2,-36(fp)
   1d1bc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1d1c0:	00004206 	br	1d2cc <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   1d1c4:	e0bffc17 	ldw	r2,-16(fp)
   1d1c8:	1080020b 	ldhu	r2,8(r2)
   1d1cc:	0084303a 	nor	r2,zero,r2
   1d1d0:	1007883a 	mov	r3,r2
   1d1d4:	e0bffd0b 	ldhu	r2,-12(fp)
   1d1d8:	1884703a 	and	r2,r3,r2
   1d1dc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1d1e0:	e0fff30b 	ldhu	r3,-52(fp)
   1d1e4:	e0bffd0b 	ldhu	r2,-12(fp)
   1d1e8:	18800b1e 	bne	r3,r2,1d218 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1d1ec:	e0bff383 	ldbu	r2,-50(fp)
   1d1f0:	10800058 	cmpnei	r2,r2,1
   1d1f4:	10000b1e 	bne	r2,zero,1d224 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   1d1f8:	e0bffc17 	ldw	r2,-16(fp)
   1d1fc:	10c0020b 	ldhu	r3,8(r2)
   1d200:	e0bff30b 	ldhu	r2,-52(fp)
   1d204:	1884b03a 	or	r2,r3,r2
   1d208:	1007883a 	mov	r3,r2
   1d20c:	e0bffc17 	ldw	r2,-16(fp)
   1d210:	10c0020d 	sth	r3,8(r2)
   1d214:	00000306 	br	1d224 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1d218:	e0bfff17 	ldw	r2,-4(fp)
   1d21c:	00c01c04 	movi	r3,112
   1d220:	10c00005 	stb	r3,0(r2)
   1d224:	e0bff417 	ldw	r2,-48(fp)
   1d228:	e0bff815 	stw	r2,-32(fp)
   1d22c:	e0bff817 	ldw	r2,-32(fp)
   1d230:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1d234:	00002506 	br	1d2cc <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   1d238:	e0bffc17 	ldw	r2,-16(fp)
   1d23c:	1080020b 	ldhu	r2,8(r2)
   1d240:	0084303a 	nor	r2,zero,r2
   1d244:	1007883a 	mov	r3,r2
   1d248:	e0bffd0b 	ldhu	r2,-12(fp)
   1d24c:	1884703a 	and	r2,r3,r2
   1d250:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   1d254:	e0bff30b 	ldhu	r2,-52(fp)
   1d258:	10000b26 	beq	r2,zero,1d288 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1d25c:	e0bff383 	ldbu	r2,-50(fp)
   1d260:	10800058 	cmpnei	r2,r2,1
   1d264:	10000b1e 	bne	r2,zero,1d294 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   1d268:	e0bffc17 	ldw	r2,-16(fp)
   1d26c:	10c0020b 	ldhu	r3,8(r2)
   1d270:	e0bff30b 	ldhu	r2,-52(fp)
   1d274:	1884b03a 	or	r2,r3,r2
   1d278:	1007883a 	mov	r3,r2
   1d27c:	e0bffc17 	ldw	r2,-16(fp)
   1d280:	10c0020d 	sth	r3,8(r2)
   1d284:	00000306 	br	1d294 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1d288:	e0bfff17 	ldw	r2,-4(fp)
   1d28c:	00c01c04 	movi	r3,112
   1d290:	10c00005 	stb	r3,0(r2)
   1d294:	e0bff417 	ldw	r2,-48(fp)
   1d298:	e0bff915 	stw	r2,-28(fp)
   1d29c:	e0bff917 	ldw	r2,-28(fp)
   1d2a0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1d2a4:	00000906 	br	1d2cc <OSFlagAccept+0x2f4>
   1d2a8:	e0bff417 	ldw	r2,-48(fp)
   1d2ac:	e0bffa15 	stw	r2,-24(fp)
   1d2b0:	e0bffa17 	ldw	r2,-24(fp)
   1d2b4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   1d2b8:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   1d2bc:	e0bfff17 	ldw	r2,-4(fp)
   1d2c0:	00c01bc4 	movi	r3,111
   1d2c4:	10c00005 	stb	r3,0(r2)
             break;
   1d2c8:	0001883a 	nop
    }
    return (flags_rdy);
   1d2cc:	e0bff30b 	ldhu	r2,-52(fp)
}
   1d2d0:	e037883a 	mov	sp,fp
   1d2d4:	df000017 	ldw	fp,0(sp)
   1d2d8:	dec00104 	addi	sp,sp,4
   1d2dc:	f800283a 	ret

0001d2e0 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   1d2e0:	defff804 	addi	sp,sp,-32
   1d2e4:	df000715 	stw	fp,28(sp)
   1d2e8:	df000704 	addi	fp,sp,28
   1d2ec:	2005883a 	mov	r2,r4
   1d2f0:	e17fff15 	stw	r5,-4(fp)
   1d2f4:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   1d2f8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   1d2fc:	e0bfff17 	ldw	r2,-4(fp)
   1d300:	1000021e 	bne	r2,zero,1d30c <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   1d304:	0005883a 	mov	r2,zero
   1d308:	00003306 	br	1d3d8 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   1d30c:	d0a72d03 	ldbu	r2,-25420(gp)
   1d310:	10803fcc 	andi	r2,r2,255
   1d314:	10000526 	beq	r2,zero,1d32c <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   1d318:	e0bfff17 	ldw	r2,-4(fp)
   1d31c:	00c00404 	movi	r3,16
   1d320:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   1d324:	0005883a 	mov	r2,zero
   1d328:	00002b06 	br	1d3d8 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d32c:	0005303a 	rdctl	r2,status
   1d330:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d334:	e0fffd17 	ldw	r3,-12(fp)
   1d338:	00bfff84 	movi	r2,-2
   1d33c:	1884703a 	and	r2,r3,r2
   1d340:	1001703a 	wrctl	status,r2
  
  return context;
   1d344:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1d348:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   1d34c:	d0a73017 	ldw	r2,-25408(gp)
   1d350:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   1d354:	e0bffb17 	ldw	r2,-20(fp)
   1d358:	10001726 	beq	r2,zero,1d3b8 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   1d35c:	d0a73017 	ldw	r2,-25408(gp)
   1d360:	10800117 	ldw	r2,4(r2)
   1d364:	d0a73015 	stw	r2,-25408(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   1d368:	e0bffb17 	ldw	r2,-20(fp)
   1d36c:	00c00144 	movi	r3,5
   1d370:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   1d374:	e0bffb17 	ldw	r2,-20(fp)
   1d378:	e0fffe0b 	ldhu	r3,-8(fp)
   1d37c:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   1d380:	e0bffb17 	ldw	r2,-20(fp)
   1d384:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   1d388:	e0bffb17 	ldw	r2,-20(fp)
   1d38c:	00c00fc4 	movi	r3,63
   1d390:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1d394:	e0bffb17 	ldw	r2,-20(fp)
   1d398:	100002c5 	stb	zero,11(r2)
   1d39c:	e0bff917 	ldw	r2,-28(fp)
   1d3a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d3a4:	e0bffa17 	ldw	r2,-24(fp)
   1d3a8:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   1d3ac:	e0bfff17 	ldw	r2,-4(fp)
   1d3b0:	10000005 	stb	zero,0(r2)
   1d3b4:	00000706 	br	1d3d4 <OSFlagCreate+0xf4>
   1d3b8:	e0bff917 	ldw	r2,-28(fp)
   1d3bc:	e0bffc15 	stw	r2,-16(fp)
   1d3c0:	e0bffc17 	ldw	r2,-16(fp)
   1d3c4:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   1d3c8:	e0bfff17 	ldw	r2,-4(fp)
   1d3cc:	00c01c84 	movi	r3,114
   1d3d0:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   1d3d4:	e0bffb17 	ldw	r2,-20(fp)
}
   1d3d8:	e037883a 	mov	sp,fp
   1d3dc:	df000017 	ldw	fp,0(sp)
   1d3e0:	dec00104 	addi	sp,sp,4
   1d3e4:	f800283a 	ret

0001d3e8 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   1d3e8:	defff204 	addi	sp,sp,-56
   1d3ec:	dfc00d15 	stw	ra,52(sp)
   1d3f0:	df000c15 	stw	fp,48(sp)
   1d3f4:	df000c04 	addi	fp,sp,48
   1d3f8:	e13ffd15 	stw	r4,-12(fp)
   1d3fc:	2805883a 	mov	r2,r5
   1d400:	e1bfff15 	stw	r6,-4(fp)
   1d404:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1d408:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1d40c:	e0bfff17 	ldw	r2,-4(fp)
   1d410:	1000021e 	bne	r2,zero,1d41c <OSFlagDel+0x34>
        return (pgrp);
   1d414:	e0bffd17 	ldw	r2,-12(fp)
   1d418:	00008006 	br	1d61c <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1d41c:	e0bffd17 	ldw	r2,-12(fp)
   1d420:	1000051e 	bne	r2,zero,1d438 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1d424:	e0bfff17 	ldw	r2,-4(fp)
   1d428:	00c01b84 	movi	r3,110
   1d42c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1d430:	e0bffd17 	ldw	r2,-12(fp)
   1d434:	00007906 	br	1d61c <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1d438:	d0a72d03 	ldbu	r2,-25420(gp)
   1d43c:	10803fcc 	andi	r2,r2,255
   1d440:	10000526 	beq	r2,zero,1d458 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   1d444:	e0bfff17 	ldw	r2,-4(fp)
   1d448:	00c003c4 	movi	r3,15
   1d44c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1d450:	e0bffd17 	ldw	r2,-12(fp)
   1d454:	00007106 	br	1d61c <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   1d458:	e0bffd17 	ldw	r2,-12(fp)
   1d45c:	10800003 	ldbu	r2,0(r2)
   1d460:	10803fcc 	andi	r2,r2,255
   1d464:	10800160 	cmpeqi	r2,r2,5
   1d468:	1000051e 	bne	r2,zero,1d480 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   1d46c:	e0bfff17 	ldw	r2,-4(fp)
   1d470:	00c00044 	movi	r3,1
   1d474:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1d478:	e0bffd17 	ldw	r2,-12(fp)
   1d47c:	00006706 	br	1d61c <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d480:	0005303a 	rdctl	r2,status
   1d484:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d488:	e0fffc17 	ldw	r3,-16(fp)
   1d48c:	00bfff84 	movi	r2,-2
   1d490:	1884703a 	and	r2,r3,r2
   1d494:	1001703a 	wrctl	status,r2
  
  return context;
   1d498:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1d49c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   1d4a0:	e0bffd17 	ldw	r2,-12(fp)
   1d4a4:	10800117 	ldw	r2,4(r2)
   1d4a8:	10000326 	beq	r2,zero,1d4b8 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1d4ac:	00800044 	movi	r2,1
   1d4b0:	e0bff405 	stb	r2,-48(fp)
   1d4b4:	00000106 	br	1d4bc <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1d4b8:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   1d4bc:	e0bffe03 	ldbu	r2,-8(fp)
   1d4c0:	10000326 	beq	r2,zero,1d4d0 <OSFlagDel+0xe8>
   1d4c4:	10800060 	cmpeqi	r2,r2,1
   1d4c8:	1000231e 	bne	r2,zero,1d558 <OSFlagDel+0x170>
   1d4cc:	00004806 	br	1d5f0 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   1d4d0:	e0bff403 	ldbu	r2,-48(fp)
   1d4d4:	1000161e 	bne	r2,zero,1d530 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   1d4d8:	e0bffd17 	ldw	r2,-12(fp)
   1d4dc:	00c00fc4 	movi	r3,63
   1d4e0:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1d4e4:	e0bffd17 	ldw	r2,-12(fp)
   1d4e8:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1d4ec:	e0bffd17 	ldw	r2,-12(fp)
   1d4f0:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   1d4f4:	d0e73017 	ldw	r3,-25408(gp)
   1d4f8:	e0bffd17 	ldw	r2,-12(fp)
   1d4fc:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   1d500:	e0bffd17 	ldw	r2,-12(fp)
   1d504:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   1d508:	e0bffd17 	ldw	r2,-12(fp)
   1d50c:	d0a73015 	stw	r2,-25408(gp)
   1d510:	e0bff717 	ldw	r2,-36(fp)
   1d514:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d518:	e0bff817 	ldw	r2,-32(fp)
   1d51c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   1d520:	e0bfff17 	ldw	r2,-4(fp)
   1d524:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   1d528:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   1d52c:	00003a06 	br	1d618 <OSFlagDel+0x230>
   1d530:	e0bff717 	ldw	r2,-36(fp)
   1d534:	e0bff915 	stw	r2,-28(fp)
   1d538:	e0bff917 	ldw	r2,-28(fp)
   1d53c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   1d540:	e0bfff17 	ldw	r2,-4(fp)
   1d544:	00c01244 	movi	r3,73
   1d548:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   1d54c:	e0bffd17 	ldw	r2,-12(fp)
   1d550:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   1d554:	00003006 	br	1d618 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   1d558:	e0bffd17 	ldw	r2,-12(fp)
   1d55c:	10800117 	ldw	r2,4(r2)
   1d560:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   1d564:	00000606 	br	1d580 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   1d568:	000b883a 	mov	r5,zero
   1d56c:	e13ff517 	ldw	r4,-44(fp)
   1d570:	001e5540 	call	1e554 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   1d574:	e0bff517 	ldw	r2,-44(fp)
   1d578:	10800017 	ldw	r2,0(r2)
   1d57c:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   1d580:	e0bff517 	ldw	r2,-44(fp)
   1d584:	103ff81e 	bne	r2,zero,1d568 <__alt_data_end+0xfc01d568>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   1d588:	e0bffd17 	ldw	r2,-12(fp)
   1d58c:	00c00fc4 	movi	r3,63
   1d590:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1d594:	e0bffd17 	ldw	r2,-12(fp)
   1d598:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1d59c:	e0bffd17 	ldw	r2,-12(fp)
   1d5a0:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   1d5a4:	d0e73017 	ldw	r3,-25408(gp)
   1d5a8:	e0bffd17 	ldw	r2,-12(fp)
   1d5ac:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   1d5b0:	e0bffd17 	ldw	r2,-12(fp)
   1d5b4:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   1d5b8:	e0bffd17 	ldw	r2,-12(fp)
   1d5bc:	d0a73015 	stw	r2,-25408(gp)
   1d5c0:	e0bff717 	ldw	r2,-36(fp)
   1d5c4:	e0bffa15 	stw	r2,-24(fp)
   1d5c8:	e0bffa17 	ldw	r2,-24(fp)
   1d5cc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1d5d0:	e0bff403 	ldbu	r2,-48(fp)
   1d5d4:	10800058 	cmpnei	r2,r2,1
   1d5d8:	1000011e 	bne	r2,zero,1d5e0 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1d5dc:	001c7640 	call	1c764 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   1d5e0:	e0bfff17 	ldw	r2,-4(fp)
   1d5e4:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   1d5e8:	e03ff615 	stw	zero,-40(fp)
             break;
   1d5ec:	00000a06 	br	1d618 <OSFlagDel+0x230>
   1d5f0:	e0bff717 	ldw	r2,-36(fp)
   1d5f4:	e0bffb15 	stw	r2,-20(fp)
   1d5f8:	e0bffb17 	ldw	r2,-20(fp)
   1d5fc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   1d600:	e0bfff17 	ldw	r2,-4(fp)
   1d604:	00c001c4 	movi	r3,7
   1d608:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   1d60c:	e0bffd17 	ldw	r2,-12(fp)
   1d610:	e0bff615 	stw	r2,-40(fp)
             break;
   1d614:	0001883a 	nop
    }
    return (pgrp_return);
   1d618:	e0bff617 	ldw	r2,-40(fp)
}
   1d61c:	e037883a 	mov	sp,fp
   1d620:	dfc00117 	ldw	ra,4(sp)
   1d624:	df000017 	ldw	fp,0(sp)
   1d628:	dec00204 	addi	sp,sp,8
   1d62c:	f800283a 	ret

0001d630 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   1d630:	defff604 	addi	sp,sp,-40
   1d634:	dfc00915 	stw	ra,36(sp)
   1d638:	df000815 	stw	fp,32(sp)
   1d63c:	df000804 	addi	fp,sp,32
   1d640:	e13ffd15 	stw	r4,-12(fp)
   1d644:	e17ffe15 	stw	r5,-8(fp)
   1d648:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1d64c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1d650:	e0bfff17 	ldw	r2,-4(fp)
   1d654:	1000021e 	bne	r2,zero,1d660 <OSFlagNameGet+0x30>
        return (0);
   1d658:	0005883a 	mov	r2,zero
   1d65c:	00003906 	br	1d744 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   1d660:	e0bffd17 	ldw	r2,-12(fp)
   1d664:	1000051e 	bne	r2,zero,1d67c <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1d668:	e0bfff17 	ldw	r2,-4(fp)
   1d66c:	00c01b84 	movi	r3,110
   1d670:	10c00005 	stb	r3,0(r2)
        return (0);
   1d674:	0005883a 	mov	r2,zero
   1d678:	00003206 	br	1d744 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1d67c:	e0bffe17 	ldw	r2,-8(fp)
   1d680:	1000051e 	bne	r2,zero,1d698 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   1d684:	e0bfff17 	ldw	r2,-4(fp)
   1d688:	00c00304 	movi	r3,12
   1d68c:	10c00005 	stb	r3,0(r2)
        return (0);
   1d690:	0005883a 	mov	r2,zero
   1d694:	00002b06 	br	1d744 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1d698:	d0a72d03 	ldbu	r2,-25420(gp)
   1d69c:	10803fcc 	andi	r2,r2,255
   1d6a0:	10000526 	beq	r2,zero,1d6b8 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   1d6a4:	e0bfff17 	ldw	r2,-4(fp)
   1d6a8:	00c00444 	movi	r3,17
   1d6ac:	10c00005 	stb	r3,0(r2)
        return (0);
   1d6b0:	0005883a 	mov	r2,zero
   1d6b4:	00002306 	br	1d744 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d6b8:	0005303a 	rdctl	r2,status
   1d6bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d6c0:	e0fffc17 	ldw	r3,-16(fp)
   1d6c4:	00bfff84 	movi	r2,-2
   1d6c8:	1884703a 	and	r2,r3,r2
   1d6cc:	1001703a 	wrctl	status,r2
  
  return context;
   1d6d0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1d6d4:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   1d6d8:	e0bffd17 	ldw	r2,-12(fp)
   1d6dc:	10800003 	ldbu	r2,0(r2)
   1d6e0:	10803fcc 	andi	r2,r2,255
   1d6e4:	10800160 	cmpeqi	r2,r2,5
   1d6e8:	1000091e 	bne	r2,zero,1d710 <OSFlagNameGet+0xe0>
   1d6ec:	e0bff817 	ldw	r2,-32(fp)
   1d6f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d6f4:	e0bff917 	ldw	r2,-28(fp)
   1d6f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   1d6fc:	e0bfff17 	ldw	r2,-4(fp)
   1d700:	00c00044 	movi	r3,1
   1d704:	10c00005 	stb	r3,0(r2)
        return (0);
   1d708:	0005883a 	mov	r2,zero
   1d70c:	00000d06 	br	1d744 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   1d710:	e0bffd17 	ldw	r2,-12(fp)
   1d714:	10800284 	addi	r2,r2,10
   1d718:	100b883a 	mov	r5,r2
   1d71c:	e13ffe17 	ldw	r4,-8(fp)
   1d720:	001c8a80 	call	1c8a8 <OS_StrCopy>
   1d724:	e0bffb05 	stb	r2,-20(fp)
   1d728:	e0bff817 	ldw	r2,-32(fp)
   1d72c:	e0bffa15 	stw	r2,-24(fp)
   1d730:	e0bffa17 	ldw	r2,-24(fp)
   1d734:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1d738:	e0bfff17 	ldw	r2,-4(fp)
   1d73c:	10000005 	stb	zero,0(r2)
    return (len);
   1d740:	e0bffb03 	ldbu	r2,-20(fp)
}
   1d744:	e037883a 	mov	sp,fp
   1d748:	dfc00117 	ldw	ra,4(sp)
   1d74c:	df000017 	ldw	fp,0(sp)
   1d750:	dec00204 	addi	sp,sp,8
   1d754:	f800283a 	ret

0001d758 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   1d758:	defff504 	addi	sp,sp,-44
   1d75c:	dfc00a15 	stw	ra,40(sp)
   1d760:	df000915 	stw	fp,36(sp)
   1d764:	df000904 	addi	fp,sp,36
   1d768:	e13ffd15 	stw	r4,-12(fp)
   1d76c:	e17ffe15 	stw	r5,-8(fp)
   1d770:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1d774:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1d778:	e0bfff17 	ldw	r2,-4(fp)
   1d77c:	10004326 	beq	r2,zero,1d88c <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   1d780:	e0bffd17 	ldw	r2,-12(fp)
   1d784:	1000041e 	bne	r2,zero,1d798 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1d788:	e0bfff17 	ldw	r2,-4(fp)
   1d78c:	00c01b84 	movi	r3,110
   1d790:	10c00005 	stb	r3,0(r2)
        return;
   1d794:	00003e06 	br	1d890 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1d798:	e0bffe17 	ldw	r2,-8(fp)
   1d79c:	1000041e 	bne	r2,zero,1d7b0 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   1d7a0:	e0bfff17 	ldw	r2,-4(fp)
   1d7a4:	00c00304 	movi	r3,12
   1d7a8:	10c00005 	stb	r3,0(r2)
        return;
   1d7ac:	00003806 	br	1d890 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1d7b0:	d0a72d03 	ldbu	r2,-25420(gp)
   1d7b4:	10803fcc 	andi	r2,r2,255
   1d7b8:	10000426 	beq	r2,zero,1d7cc <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   1d7bc:	e0bfff17 	ldw	r2,-4(fp)
   1d7c0:	00c00484 	movi	r3,18
   1d7c4:	10c00005 	stb	r3,0(r2)
        return;
   1d7c8:	00003106 	br	1d890 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d7cc:	0005303a 	rdctl	r2,status
   1d7d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d7d4:	e0fffc17 	ldw	r3,-16(fp)
   1d7d8:	00bfff84 	movi	r2,-2
   1d7dc:	1884703a 	and	r2,r3,r2
   1d7e0:	1001703a 	wrctl	status,r2
  
  return context;
   1d7e4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1d7e8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   1d7ec:	e0bffd17 	ldw	r2,-12(fp)
   1d7f0:	10800003 	ldbu	r2,0(r2)
   1d7f4:	10803fcc 	andi	r2,r2,255
   1d7f8:	10800160 	cmpeqi	r2,r2,5
   1d7fc:	1000081e 	bne	r2,zero,1d820 <OSFlagNameSet+0xc8>
   1d800:	e0bff717 	ldw	r2,-36(fp)
   1d804:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d808:	e0bff817 	ldw	r2,-32(fp)
   1d80c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   1d810:	e0bfff17 	ldw	r2,-4(fp)
   1d814:	00c00044 	movi	r3,1
   1d818:	10c00005 	stb	r3,0(r2)
        return;
   1d81c:	00001c06 	br	1d890 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   1d820:	e13ffe17 	ldw	r4,-8(fp)
   1d824:	001c91c0 	call	1c91c <OS_StrLen>
   1d828:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   1d82c:	e0bffa03 	ldbu	r2,-24(fp)
   1d830:	10800830 	cmpltui	r2,r2,32
   1d834:	1000081e 	bne	r2,zero,1d858 <OSFlagNameSet+0x100>
   1d838:	e0bff717 	ldw	r2,-36(fp)
   1d83c:	e0bff915 	stw	r2,-28(fp)
   1d840:	e0bff917 	ldw	r2,-28(fp)
   1d844:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   1d848:	e0bfff17 	ldw	r2,-4(fp)
   1d84c:	00c01cc4 	movi	r3,115
   1d850:	10c00005 	stb	r3,0(r2)
        return;
   1d854:	00000e06 	br	1d890 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   1d858:	e0bffd17 	ldw	r2,-12(fp)
   1d85c:	10800284 	addi	r2,r2,10
   1d860:	e17ffe17 	ldw	r5,-8(fp)
   1d864:	1009883a 	mov	r4,r2
   1d868:	001c8a80 	call	1c8a8 <OS_StrCopy>
   1d86c:	e0bff717 	ldw	r2,-36(fp)
   1d870:	e0bffb15 	stw	r2,-20(fp)
   1d874:	e0bffb17 	ldw	r2,-20(fp)
   1d878:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1d87c:	e0bfff17 	ldw	r2,-4(fp)
   1d880:	10000005 	stb	zero,0(r2)
    return;
   1d884:	0001883a 	nop
   1d888:	00000106 	br	1d890 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   1d88c:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   1d890:	e037883a 	mov	sp,fp
   1d894:	dfc00117 	ldw	ra,4(sp)
   1d898:	df000017 	ldw	fp,0(sp)
   1d89c:	dec00204 	addi	sp,sp,8
   1d8a0:	f800283a 	ret

0001d8a4 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   1d8a4:	deffe104 	addi	sp,sp,-124
   1d8a8:	dfc01e15 	stw	ra,120(sp)
   1d8ac:	df001d15 	stw	fp,116(sp)
   1d8b0:	df001d04 	addi	fp,sp,116
   1d8b4:	e13ffc15 	stw	r4,-16(fp)
   1d8b8:	2809883a 	mov	r4,r5
   1d8bc:	3007883a 	mov	r3,r6
   1d8c0:	3805883a 	mov	r2,r7
   1d8c4:	e13ffd0d 	sth	r4,-12(fp)
   1d8c8:	e0fffe05 	stb	r3,-8(fp)
   1d8cc:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1d8d0:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1d8d4:	e0800217 	ldw	r2,8(fp)
   1d8d8:	1000021e 	bne	r2,zero,1d8e4 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   1d8dc:	0005883a 	mov	r2,zero
   1d8e0:	00015906 	br	1de48 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1d8e4:	e0bffc17 	ldw	r2,-16(fp)
   1d8e8:	1000051e 	bne	r2,zero,1d900 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1d8ec:	e0800217 	ldw	r2,8(fp)
   1d8f0:	00c01b84 	movi	r3,110
   1d8f4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1d8f8:	0005883a 	mov	r2,zero
   1d8fc:	00015206 	br	1de48 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1d900:	d0a72d03 	ldbu	r2,-25420(gp)
   1d904:	10803fcc 	andi	r2,r2,255
   1d908:	10000526 	beq	r2,zero,1d920 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   1d90c:	e0800217 	ldw	r2,8(fp)
   1d910:	00c00084 	movi	r3,2
   1d914:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1d918:	0005883a 	mov	r2,zero
   1d91c:	00014a06 	br	1de48 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   1d920:	d0a71f03 	ldbu	r2,-25476(gp)
   1d924:	10803fcc 	andi	r2,r2,255
   1d928:	10000526 	beq	r2,zero,1d940 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   1d92c:	e0800217 	ldw	r2,8(fp)
   1d930:	00c00344 	movi	r3,13
   1d934:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1d938:	0005883a 	mov	r2,zero
   1d93c:	00014206 	br	1de48 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   1d940:	e0bffc17 	ldw	r2,-16(fp)
   1d944:	10800003 	ldbu	r2,0(r2)
   1d948:	10803fcc 	andi	r2,r2,255
   1d94c:	10800160 	cmpeqi	r2,r2,5
   1d950:	1000051e 	bne	r2,zero,1d968 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
   1d954:	e0800217 	ldw	r2,8(fp)
   1d958:	00c00044 	movi	r3,1
   1d95c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1d960:	0005883a 	mov	r2,zero
   1d964:	00013806 	br	1de48 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   1d968:	e0fffe03 	ldbu	r3,-8(fp)
   1d96c:	00bfe004 	movi	r2,-128
   1d970:	1884703a 	and	r2,r3,r2
   1d974:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   1d978:	e0bfe603 	ldbu	r2,-104(fp)
   1d97c:	10000626 	beq	r2,zero,1d998 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   1d980:	e0bffe03 	ldbu	r2,-8(fp)
   1d984:	10801fcc 	andi	r2,r2,127
   1d988:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   1d98c:	00800044 	movi	r2,1
   1d990:	e0bfe405 	stb	r2,-112(fp)
   1d994:	00000106 	br	1d99c <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
   1d998:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d99c:	0005303a 	rdctl	r2,status
   1d9a0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d9a4:	e0fff617 	ldw	r3,-40(fp)
   1d9a8:	00bfff84 	movi	r2,-2
   1d9ac:	1884703a 	and	r2,r3,r2
   1d9b0:	1001703a 	wrctl	status,r2
  
  return context;
   1d9b4:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   1d9b8:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   1d9bc:	e0bffe03 	ldbu	r2,-8(fp)
   1d9c0:	10c00060 	cmpeqi	r3,r2,1
   1d9c4:	1800921e 	bne	r3,zero,1dc10 <OSFlagPend+0x36c>
   1d9c8:	10c00088 	cmpgei	r3,r2,2
   1d9cc:	1800021e 	bne	r3,zero,1d9d8 <OSFlagPend+0x134>
   1d9d0:	10006126 	beq	r2,zero,1db58 <OSFlagPend+0x2b4>
   1d9d4:	0000bb06 	br	1dcc4 <OSFlagPend+0x420>
   1d9d8:	10c000a0 	cmpeqi	r3,r2,2
   1d9dc:	1800031e 	bne	r3,zero,1d9ec <OSFlagPend+0x148>
   1d9e0:	108000e0 	cmpeqi	r2,r2,3
   1d9e4:	10002f1e 	bne	r2,zero,1daa4 <OSFlagPend+0x200>
   1d9e8:	0000b606 	br	1dcc4 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   1d9ec:	e0bffc17 	ldw	r2,-16(fp)
   1d9f0:	10c0020b 	ldhu	r3,8(r2)
   1d9f4:	e0bffd0b 	ldhu	r2,-12(fp)
   1d9f8:	1884703a 	and	r2,r3,r2
   1d9fc:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1da00:	e0ffe80b 	ldhu	r3,-96(fp)
   1da04:	e0bffd0b 	ldhu	r2,-12(fp)
   1da08:	1880171e 	bne	r3,r2,1da68 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1da0c:	e0bfe403 	ldbu	r2,-112(fp)
   1da10:	10800058 	cmpnei	r2,r2,1
   1da14:	1000091e 	bne	r2,zero,1da3c <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   1da18:	e0bffc17 	ldw	r2,-16(fp)
   1da1c:	1080020b 	ldhu	r2,8(r2)
   1da20:	1007883a 	mov	r3,r2
   1da24:	e0bfe80b 	ldhu	r2,-96(fp)
   1da28:	0084303a 	nor	r2,zero,r2
   1da2c:	1884703a 	and	r2,r3,r2
   1da30:	1007883a 	mov	r3,r2
   1da34:	e0bffc17 	ldw	r2,-16(fp)
   1da38:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1da3c:	d0a72e17 	ldw	r2,-25416(gp)
   1da40:	e0ffe80b 	ldhu	r3,-96(fp)
   1da44:	10c00b0d 	sth	r3,44(r2)
   1da48:	e0bfe517 	ldw	r2,-108(fp)
   1da4c:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1da50:	e0bfe717 	ldw	r2,-100(fp)
   1da54:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1da58:	e0800217 	ldw	r2,8(fp)
   1da5c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   1da60:	e0bfe80b 	ldhu	r2,-96(fp)
   1da64:	0000f806 	br	1de48 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1da68:	e13ffd0b 	ldhu	r4,-12(fp)
   1da6c:	e17ffe03 	ldbu	r5,-8(fp)
   1da70:	e0bfff0b 	ldhu	r2,-4(fp)
   1da74:	e0fff704 	addi	r3,fp,-36
   1da78:	d8800015 	stw	r2,0(sp)
   1da7c:	280f883a 	mov	r7,r5
   1da80:	200d883a 	mov	r6,r4
   1da84:	180b883a 	mov	r5,r3
   1da88:	e13ffc17 	ldw	r4,-16(fp)
   1da8c:	001e3140 	call	1e314 <OS_FlagBlock>
   1da90:	e0bfe517 	ldw	r2,-108(fp)
   1da94:	e0bfe915 	stw	r2,-92(fp)
   1da98:	e0bfe917 	ldw	r2,-92(fp)
   1da9c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1daa0:	00009206 	br	1dcec <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   1daa4:	e0bffc17 	ldw	r2,-16(fp)
   1daa8:	10c0020b 	ldhu	r3,8(r2)
   1daac:	e0bffd0b 	ldhu	r2,-12(fp)
   1dab0:	1884703a 	and	r2,r3,r2
   1dab4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   1dab8:	e0bfe80b 	ldhu	r2,-96(fp)
   1dabc:	10001726 	beq	r2,zero,1db1c <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1dac0:	e0bfe403 	ldbu	r2,-112(fp)
   1dac4:	10800058 	cmpnei	r2,r2,1
   1dac8:	1000091e 	bne	r2,zero,1daf0 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   1dacc:	e0bffc17 	ldw	r2,-16(fp)
   1dad0:	1080020b 	ldhu	r2,8(r2)
   1dad4:	1007883a 	mov	r3,r2
   1dad8:	e0bfe80b 	ldhu	r2,-96(fp)
   1dadc:	0084303a 	nor	r2,zero,r2
   1dae0:	1884703a 	and	r2,r3,r2
   1dae4:	1007883a 	mov	r3,r2
   1dae8:	e0bffc17 	ldw	r2,-16(fp)
   1daec:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1daf0:	d0a72e17 	ldw	r2,-25416(gp)
   1daf4:	e0ffe80b 	ldhu	r3,-96(fp)
   1daf8:	10c00b0d 	sth	r3,44(r2)
   1dafc:	e0bfe517 	ldw	r2,-108(fp)
   1db00:	e0bfea15 	stw	r2,-88(fp)
   1db04:	e0bfea17 	ldw	r2,-88(fp)
   1db08:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1db0c:	e0800217 	ldw	r2,8(fp)
   1db10:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   1db14:	e0bfe80b 	ldhu	r2,-96(fp)
   1db18:	0000cb06 	br	1de48 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1db1c:	e13ffd0b 	ldhu	r4,-12(fp)
   1db20:	e17ffe03 	ldbu	r5,-8(fp)
   1db24:	e0bfff0b 	ldhu	r2,-4(fp)
   1db28:	e0fff704 	addi	r3,fp,-36
   1db2c:	d8800015 	stw	r2,0(sp)
   1db30:	280f883a 	mov	r7,r5
   1db34:	200d883a 	mov	r6,r4
   1db38:	180b883a 	mov	r5,r3
   1db3c:	e13ffc17 	ldw	r4,-16(fp)
   1db40:	001e3140 	call	1e314 <OS_FlagBlock>
   1db44:	e0bfe517 	ldw	r2,-108(fp)
   1db48:	e0bfeb15 	stw	r2,-84(fp)
   1db4c:	e0bfeb17 	ldw	r2,-84(fp)
   1db50:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1db54:	00006506 	br	1dcec <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   1db58:	e0bffc17 	ldw	r2,-16(fp)
   1db5c:	1080020b 	ldhu	r2,8(r2)
   1db60:	0084303a 	nor	r2,zero,r2
   1db64:	1007883a 	mov	r3,r2
   1db68:	e0bffd0b 	ldhu	r2,-12(fp)
   1db6c:	1884703a 	and	r2,r3,r2
   1db70:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1db74:	e0ffe80b 	ldhu	r3,-96(fp)
   1db78:	e0bffd0b 	ldhu	r2,-12(fp)
   1db7c:	1880151e 	bne	r3,r2,1dbd4 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1db80:	e0bfe403 	ldbu	r2,-112(fp)
   1db84:	10800058 	cmpnei	r2,r2,1
   1db88:	1000071e 	bne	r2,zero,1dba8 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   1db8c:	e0bffc17 	ldw	r2,-16(fp)
   1db90:	10c0020b 	ldhu	r3,8(r2)
   1db94:	e0bfe80b 	ldhu	r2,-96(fp)
   1db98:	1884b03a 	or	r2,r3,r2
   1db9c:	1007883a 	mov	r3,r2
   1dba0:	e0bffc17 	ldw	r2,-16(fp)
   1dba4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1dba8:	d0a72e17 	ldw	r2,-25416(gp)
   1dbac:	e0ffe80b 	ldhu	r3,-96(fp)
   1dbb0:	10c00b0d 	sth	r3,44(r2)
   1dbb4:	e0bfe517 	ldw	r2,-108(fp)
   1dbb8:	e0bfec15 	stw	r2,-80(fp)
   1dbbc:	e0bfec17 	ldw	r2,-80(fp)
   1dbc0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1dbc4:	e0800217 	ldw	r2,8(fp)
   1dbc8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   1dbcc:	e0bfe80b 	ldhu	r2,-96(fp)
   1dbd0:	00009d06 	br	1de48 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1dbd4:	e13ffd0b 	ldhu	r4,-12(fp)
   1dbd8:	e17ffe03 	ldbu	r5,-8(fp)
   1dbdc:	e0bfff0b 	ldhu	r2,-4(fp)
   1dbe0:	e0fff704 	addi	r3,fp,-36
   1dbe4:	d8800015 	stw	r2,0(sp)
   1dbe8:	280f883a 	mov	r7,r5
   1dbec:	200d883a 	mov	r6,r4
   1dbf0:	180b883a 	mov	r5,r3
   1dbf4:	e13ffc17 	ldw	r4,-16(fp)
   1dbf8:	001e3140 	call	1e314 <OS_FlagBlock>
   1dbfc:	e0bfe517 	ldw	r2,-108(fp)
   1dc00:	e0bfed15 	stw	r2,-76(fp)
   1dc04:	e0bfed17 	ldw	r2,-76(fp)
   1dc08:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1dc0c:	00003706 	br	1dcec <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   1dc10:	e0bffc17 	ldw	r2,-16(fp)
   1dc14:	1080020b 	ldhu	r2,8(r2)
   1dc18:	0084303a 	nor	r2,zero,r2
   1dc1c:	1007883a 	mov	r3,r2
   1dc20:	e0bffd0b 	ldhu	r2,-12(fp)
   1dc24:	1884703a 	and	r2,r3,r2
   1dc28:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   1dc2c:	e0bfe80b 	ldhu	r2,-96(fp)
   1dc30:	10001526 	beq	r2,zero,1dc88 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1dc34:	e0bfe403 	ldbu	r2,-112(fp)
   1dc38:	10800058 	cmpnei	r2,r2,1
   1dc3c:	1000071e 	bne	r2,zero,1dc5c <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   1dc40:	e0bffc17 	ldw	r2,-16(fp)
   1dc44:	10c0020b 	ldhu	r3,8(r2)
   1dc48:	e0bfe80b 	ldhu	r2,-96(fp)
   1dc4c:	1884b03a 	or	r2,r3,r2
   1dc50:	1007883a 	mov	r3,r2
   1dc54:	e0bffc17 	ldw	r2,-16(fp)
   1dc58:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1dc5c:	d0a72e17 	ldw	r2,-25416(gp)
   1dc60:	e0ffe80b 	ldhu	r3,-96(fp)
   1dc64:	10c00b0d 	sth	r3,44(r2)
   1dc68:	e0bfe517 	ldw	r2,-108(fp)
   1dc6c:	e0bfee15 	stw	r2,-72(fp)
   1dc70:	e0bfee17 	ldw	r2,-72(fp)
   1dc74:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1dc78:	e0800217 	ldw	r2,8(fp)
   1dc7c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   1dc80:	e0bfe80b 	ldhu	r2,-96(fp)
   1dc84:	00007006 	br	1de48 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1dc88:	e13ffd0b 	ldhu	r4,-12(fp)
   1dc8c:	e17ffe03 	ldbu	r5,-8(fp)
   1dc90:	e0bfff0b 	ldhu	r2,-4(fp)
   1dc94:	e0fff704 	addi	r3,fp,-36
   1dc98:	d8800015 	stw	r2,0(sp)
   1dc9c:	280f883a 	mov	r7,r5
   1dca0:	200d883a 	mov	r6,r4
   1dca4:	180b883a 	mov	r5,r3
   1dca8:	e13ffc17 	ldw	r4,-16(fp)
   1dcac:	001e3140 	call	1e314 <OS_FlagBlock>
   1dcb0:	e0bfe517 	ldw	r2,-108(fp)
   1dcb4:	e0bfef15 	stw	r2,-68(fp)
   1dcb8:	e0bfef17 	ldw	r2,-68(fp)
   1dcbc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1dcc0:	00000a06 	br	1dcec <OSFlagPend+0x448>
   1dcc4:	e0bfe517 	ldw	r2,-108(fp)
   1dcc8:	e0bff015 	stw	r2,-64(fp)
   1dccc:	e0bff017 	ldw	r2,-64(fp)
   1dcd0:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   1dcd4:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   1dcd8:	e0800217 	ldw	r2,8(fp)
   1dcdc:	00c01bc4 	movi	r3,111
   1dce0:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   1dce4:	e0bfe80b 	ldhu	r2,-96(fp)
   1dce8:	00005706 	br	1de48 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   1dcec:	001c7640 	call	1c764 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1dcf0:	0005303a 	rdctl	r2,status
   1dcf4:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1dcf8:	e0fff117 	ldw	r3,-60(fp)
   1dcfc:	00bfff84 	movi	r2,-2
   1dd00:	1884703a 	and	r2,r3,r2
   1dd04:	1001703a 	wrctl	status,r2
  
  return context;
   1dd08:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   1dd0c:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   1dd10:	d0a72e17 	ldw	r2,-25416(gp)
   1dd14:	10800c43 	ldbu	r2,49(r2)
   1dd18:	10803fcc 	andi	r2,r2,255
   1dd1c:	10001c26 	beq	r2,zero,1dd90 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   1dd20:	d0a72e17 	ldw	r2,-25416(gp)
   1dd24:	10800c43 	ldbu	r2,49(r2)
   1dd28:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1dd2c:	d0a72e17 	ldw	r2,-25416(gp)
   1dd30:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   1dd34:	e0bff704 	addi	r2,fp,-36
   1dd38:	1009883a 	mov	r4,r2
   1dd3c:	001e6480 	call	1e648 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   1dd40:	d0a72e17 	ldw	r2,-25416(gp)
   1dd44:	10000c05 	stb	zero,48(r2)
   1dd48:	e0bfe517 	ldw	r2,-108(fp)
   1dd4c:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1dd50:	e0bff217 	ldw	r2,-56(fp)
   1dd54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   1dd58:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   1dd5c:	e0bff303 	ldbu	r2,-52(fp)
   1dd60:	108000a0 	cmpeqi	r2,r2,2
   1dd64:	10000426 	beq	r2,zero,1dd78 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   1dd68:	e0800217 	ldw	r2,8(fp)
   1dd6c:	00c00384 	movi	r3,14
   1dd70:	10c00005 	stb	r3,0(r2)
                 break;
   1dd74:	00000406 	br	1dd88 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   1dd78:	e0800217 	ldw	r2,8(fp)
   1dd7c:	00c00284 	movi	r3,10
   1dd80:	10c00005 	stb	r3,0(r2)
                 break;
   1dd84:	0001883a 	nop
        }
        return (flags_rdy);
   1dd88:	e0bfe80b 	ldhu	r2,-96(fp)
   1dd8c:	00002e06 	br	1de48 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   1dd90:	d0a72e17 	ldw	r2,-25416(gp)
   1dd94:	10800b0b 	ldhu	r2,44(r2)
   1dd98:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   1dd9c:	e0bfe403 	ldbu	r2,-112(fp)
   1dda0:	10800058 	cmpnei	r2,r2,1
   1dda4:	1000211e 	bne	r2,zero,1de2c <OSFlagPend+0x588>
        switch (wait_type) {
   1dda8:	e0bffe03 	ldbu	r2,-8(fp)
   1ddac:	10001616 	blt	r2,zero,1de08 <OSFlagPend+0x564>
   1ddb0:	10c00090 	cmplti	r3,r2,2
   1ddb4:	18000c1e 	bne	r3,zero,1dde8 <OSFlagPend+0x544>
   1ddb8:	10800108 	cmpgei	r2,r2,4
   1ddbc:	1000121e 	bne	r2,zero,1de08 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   1ddc0:	e0bffc17 	ldw	r2,-16(fp)
   1ddc4:	1080020b 	ldhu	r2,8(r2)
   1ddc8:	1007883a 	mov	r3,r2
   1ddcc:	e0bfe80b 	ldhu	r2,-96(fp)
   1ddd0:	0084303a 	nor	r2,zero,r2
   1ddd4:	1884703a 	and	r2,r3,r2
   1ddd8:	1007883a 	mov	r3,r2
   1dddc:	e0bffc17 	ldw	r2,-16(fp)
   1dde0:	10c0020d 	sth	r3,8(r2)
                 break;
   1dde4:	00001106 	br	1de2c <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   1dde8:	e0bffc17 	ldw	r2,-16(fp)
   1ddec:	10c0020b 	ldhu	r3,8(r2)
   1ddf0:	e0bfe80b 	ldhu	r2,-96(fp)
   1ddf4:	1884b03a 	or	r2,r3,r2
   1ddf8:	1007883a 	mov	r3,r2
   1ddfc:	e0bffc17 	ldw	r2,-16(fp)
   1de00:	10c0020d 	sth	r3,8(r2)
                 break;
   1de04:	00000906 	br	1de2c <OSFlagPend+0x588>
   1de08:	e0bfe517 	ldw	r2,-108(fp)
   1de0c:	e0bff415 	stw	r2,-48(fp)
   1de10:	e0bff417 	ldw	r2,-48(fp)
   1de14:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   1de18:	e0800217 	ldw	r2,8(fp)
   1de1c:	00c01bc4 	movi	r3,111
   1de20:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   1de24:	0005883a 	mov	r2,zero
   1de28:	00000706 	br	1de48 <OSFlagPend+0x5a4>
   1de2c:	e0bfe517 	ldw	r2,-108(fp)
   1de30:	e0bff515 	stw	r2,-44(fp)
   1de34:	e0bff517 	ldw	r2,-44(fp)
   1de38:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   1de3c:	e0800217 	ldw	r2,8(fp)
   1de40:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   1de44:	e0bfe80b 	ldhu	r2,-96(fp)
}
   1de48:	e037883a 	mov	sp,fp
   1de4c:	dfc00117 	ldw	ra,4(sp)
   1de50:	df000017 	ldw	fp,0(sp)
   1de54:	dec00204 	addi	sp,sp,8
   1de58:	f800283a 	ret

0001de5c <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   1de5c:	defffb04 	addi	sp,sp,-20
   1de60:	df000415 	stw	fp,16(sp)
   1de64:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1de68:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1de6c:	0005303a 	rdctl	r2,status
   1de70:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1de74:	e0fffe17 	ldw	r3,-8(fp)
   1de78:	00bfff84 	movi	r2,-2
   1de7c:	1884703a 	and	r2,r3,r2
   1de80:	1001703a 	wrctl	status,r2
  
  return context;
   1de84:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1de88:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   1de8c:	d0a72e17 	ldw	r2,-25416(gp)
   1de90:	10800b0b 	ldhu	r2,44(r2)
   1de94:	e0bffd0d 	sth	r2,-12(fp)
   1de98:	e0bffc17 	ldw	r2,-16(fp)
   1de9c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1dea0:	e0bfff17 	ldw	r2,-4(fp)
   1dea4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   1dea8:	e0bffd0b 	ldhu	r2,-12(fp)
}
   1deac:	e037883a 	mov	sp,fp
   1deb0:	df000017 	ldw	fp,0(sp)
   1deb4:	dec00104 	addi	sp,sp,4
   1deb8:	f800283a 	ret

0001debc <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   1debc:	deffef04 	addi	sp,sp,-68
   1dec0:	dfc01015 	stw	ra,64(sp)
   1dec4:	df000f15 	stw	fp,60(sp)
   1dec8:	df000f04 	addi	fp,sp,60
   1decc:	e13ffc15 	stw	r4,-16(fp)
   1ded0:	2807883a 	mov	r3,r5
   1ded4:	3005883a 	mov	r2,r6
   1ded8:	e1ffff15 	stw	r7,-4(fp)
   1dedc:	e0fffd0d 	sth	r3,-12(fp)
   1dee0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   1dee4:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   1dee8:	e0bfff17 	ldw	r2,-4(fp)
   1deec:	1000021e 	bne	r2,zero,1def8 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   1def0:	0005883a 	mov	r2,zero
   1def4:	0000d106 	br	1e23c <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   1def8:	e0bffc17 	ldw	r2,-16(fp)
   1defc:	1000051e 	bne	r2,zero,1df14 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1df00:	e0bfff17 	ldw	r2,-4(fp)
   1df04:	00c01b84 	movi	r3,110
   1df08:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1df0c:	0005883a 	mov	r2,zero
   1df10:	0000ca06 	br	1e23c <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   1df14:	e0bffc17 	ldw	r2,-16(fp)
   1df18:	10800003 	ldbu	r2,0(r2)
   1df1c:	10803fcc 	andi	r2,r2,255
   1df20:	10800160 	cmpeqi	r2,r2,5
   1df24:	1000051e 	bne	r2,zero,1df3c <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   1df28:	e0bfff17 	ldw	r2,-4(fp)
   1df2c:	00c00044 	movi	r3,1
   1df30:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1df34:	0005883a 	mov	r2,zero
   1df38:	0000c006 	br	1e23c <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1df3c:	0005303a 	rdctl	r2,status
   1df40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1df44:	e0fffb17 	ldw	r3,-20(fp)
   1df48:	00bfff84 	movi	r2,-2
   1df4c:	1884703a 	and	r2,r3,r2
   1df50:	1001703a 	wrctl	status,r2
  
  return context;
   1df54:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   1df58:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   1df5c:	e0bffe03 	ldbu	r2,-8(fp)
   1df60:	10000326 	beq	r2,zero,1df70 <OSFlagPost+0xb4>
   1df64:	10800060 	cmpeqi	r2,r2,1
   1df68:	10000b1e 	bne	r2,zero,1df98 <OSFlagPost+0xdc>
   1df6c:	00001206 	br	1dfb8 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   1df70:	e0bffc17 	ldw	r2,-16(fp)
   1df74:	1080020b 	ldhu	r2,8(r2)
   1df78:	1007883a 	mov	r3,r2
   1df7c:	e0bffd0b 	ldhu	r2,-12(fp)
   1df80:	0084303a 	nor	r2,zero,r2
   1df84:	1884703a 	and	r2,r3,r2
   1df88:	1007883a 	mov	r3,r2
   1df8c:	e0bffc17 	ldw	r2,-16(fp)
   1df90:	10c0020d 	sth	r3,8(r2)
             break;
   1df94:	00001106 	br	1dfdc <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   1df98:	e0bffc17 	ldw	r2,-16(fp)
   1df9c:	10c0020b 	ldhu	r3,8(r2)
   1dfa0:	e0bffd0b 	ldhu	r2,-12(fp)
   1dfa4:	1884b03a 	or	r2,r3,r2
   1dfa8:	1007883a 	mov	r3,r2
   1dfac:	e0bffc17 	ldw	r2,-16(fp)
   1dfb0:	10c0020d 	sth	r3,8(r2)
             break;
   1dfb4:	00000906 	br	1dfdc <OSFlagPost+0x120>
   1dfb8:	e0bff317 	ldw	r2,-52(fp)
   1dfbc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1dfc0:	e0bff417 	ldw	r2,-48(fp)
   1dfc4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   1dfc8:	e0bfff17 	ldw	r2,-4(fp)
   1dfcc:	00c01c44 	movi	r3,113
   1dfd0:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   1dfd4:	0005883a 	mov	r2,zero
   1dfd8:	00009806 	br	1e23c <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   1dfdc:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   1dfe0:	e0bffc17 	ldw	r2,-16(fp)
   1dfe4:	10800117 	ldw	r2,4(r2)
   1dfe8:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   1dfec:	00007706 	br	1e1cc <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   1dff0:	e0bff117 	ldw	r2,-60(fp)
   1dff4:	10800483 	ldbu	r2,18(r2)
   1dff8:	10803fcc 	andi	r2,r2,255
   1dffc:	10c00060 	cmpeqi	r3,r2,1
   1e000:	18004a1e 	bne	r3,zero,1e12c <OSFlagPost+0x270>
   1e004:	10c00088 	cmpgei	r3,r2,2
   1e008:	1800021e 	bne	r3,zero,1e014 <OSFlagPost+0x158>
   1e00c:	10002f26 	beq	r2,zero,1e0cc <OSFlagPost+0x210>
   1e010:	00005b06 	br	1e180 <OSFlagPost+0x2c4>
   1e014:	10c000a0 	cmpeqi	r3,r2,2
   1e018:	1800031e 	bne	r3,zero,1e028 <OSFlagPost+0x16c>
   1e01c:	108000e0 	cmpeqi	r2,r2,3
   1e020:	1000171e 	bne	r2,zero,1e080 <OSFlagPost+0x1c4>
   1e024:	00005606 	br	1e180 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1e028:	e0bffc17 	ldw	r2,-16(fp)
   1e02c:	10c0020b 	ldhu	r3,8(r2)
   1e030:	e0bff117 	ldw	r2,-60(fp)
   1e034:	1080040b 	ldhu	r2,16(r2)
   1e038:	1884703a 	and	r2,r3,r2
   1e03c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   1e040:	e0bff117 	ldw	r2,-60(fp)
   1e044:	1080040b 	ldhu	r2,16(r2)
   1e048:	10ffffcc 	andi	r3,r2,65535
   1e04c:	e0bff60b 	ldhu	r2,-40(fp)
   1e050:	1880541e 	bne	r3,r2,1e1a4 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1e054:	e0bff60b 	ldhu	r2,-40(fp)
   1e058:	100b883a 	mov	r5,r2
   1e05c:	e13ff117 	ldw	r4,-60(fp)
   1e060:	001e5540 	call	1e554 <OS_FlagTaskRdy>
   1e064:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   1e068:	e0bff683 	ldbu	r2,-38(fp)
   1e06c:	10800058 	cmpnei	r2,r2,1
   1e070:	10004c1e 	bne	r2,zero,1e1a4 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1e074:	00800044 	movi	r2,1
   1e078:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1e07c:	00004906 	br	1e1a4 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1e080:	e0bffc17 	ldw	r2,-16(fp)
   1e084:	10c0020b 	ldhu	r3,8(r2)
   1e088:	e0bff117 	ldw	r2,-60(fp)
   1e08c:	1080040b 	ldhu	r2,16(r2)
   1e090:	1884703a 	and	r2,r3,r2
   1e094:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   1e098:	e0bff60b 	ldhu	r2,-40(fp)
   1e09c:	10004326 	beq	r2,zero,1e1ac <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1e0a0:	e0bff60b 	ldhu	r2,-40(fp)
   1e0a4:	100b883a 	mov	r5,r2
   1e0a8:	e13ff117 	ldw	r4,-60(fp)
   1e0ac:	001e5540 	call	1e554 <OS_FlagTaskRdy>
   1e0b0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   1e0b4:	e0bff683 	ldbu	r2,-38(fp)
   1e0b8:	10800058 	cmpnei	r2,r2,1
   1e0bc:	10003b1e 	bne	r2,zero,1e1ac <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1e0c0:	00800044 	movi	r2,1
   1e0c4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1e0c8:	00003806 	br	1e1ac <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1e0cc:	e0bffc17 	ldw	r2,-16(fp)
   1e0d0:	1080020b 	ldhu	r2,8(r2)
   1e0d4:	0084303a 	nor	r2,zero,r2
   1e0d8:	1007883a 	mov	r3,r2
   1e0dc:	e0bff117 	ldw	r2,-60(fp)
   1e0e0:	1080040b 	ldhu	r2,16(r2)
   1e0e4:	1884703a 	and	r2,r3,r2
   1e0e8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   1e0ec:	e0bff117 	ldw	r2,-60(fp)
   1e0f0:	1080040b 	ldhu	r2,16(r2)
   1e0f4:	10ffffcc 	andi	r3,r2,65535
   1e0f8:	e0bff60b 	ldhu	r2,-40(fp)
   1e0fc:	18802d1e 	bne	r3,r2,1e1b4 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1e100:	e0bff60b 	ldhu	r2,-40(fp)
   1e104:	100b883a 	mov	r5,r2
   1e108:	e13ff117 	ldw	r4,-60(fp)
   1e10c:	001e5540 	call	1e554 <OS_FlagTaskRdy>
   1e110:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   1e114:	e0bff683 	ldbu	r2,-38(fp)
   1e118:	10800058 	cmpnei	r2,r2,1
   1e11c:	1000251e 	bne	r2,zero,1e1b4 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1e120:	00800044 	movi	r2,1
   1e124:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1e128:	00002206 	br	1e1b4 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1e12c:	e0bffc17 	ldw	r2,-16(fp)
   1e130:	1080020b 	ldhu	r2,8(r2)
   1e134:	0084303a 	nor	r2,zero,r2
   1e138:	1007883a 	mov	r3,r2
   1e13c:	e0bff117 	ldw	r2,-60(fp)
   1e140:	1080040b 	ldhu	r2,16(r2)
   1e144:	1884703a 	and	r2,r3,r2
   1e148:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   1e14c:	e0bff60b 	ldhu	r2,-40(fp)
   1e150:	10001a26 	beq	r2,zero,1e1bc <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1e154:	e0bff60b 	ldhu	r2,-40(fp)
   1e158:	100b883a 	mov	r5,r2
   1e15c:	e13ff117 	ldw	r4,-60(fp)
   1e160:	001e5540 	call	1e554 <OS_FlagTaskRdy>
   1e164:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   1e168:	e0bff683 	ldbu	r2,-38(fp)
   1e16c:	10800058 	cmpnei	r2,r2,1
   1e170:	1000121e 	bne	r2,zero,1e1bc <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1e174:	00800044 	movi	r2,1
   1e178:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1e17c:	00000f06 	br	1e1bc <OSFlagPost+0x300>
   1e180:	e0bff317 	ldw	r2,-52(fp)
   1e184:	e0bff515 	stw	r2,-44(fp)
   1e188:	e0bff517 	ldw	r2,-44(fp)
   1e18c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   1e190:	e0bfff17 	ldw	r2,-4(fp)
   1e194:	00c01bc4 	movi	r3,111
   1e198:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   1e19c:	0005883a 	mov	r2,zero
   1e1a0:	00002606 	br	1e23c <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   1e1a4:	0001883a 	nop
   1e1a8:	00000506 	br	1e1c0 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   1e1ac:	0001883a 	nop
   1e1b0:	00000306 	br	1e1c0 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   1e1b4:	0001883a 	nop
   1e1b8:	00000106 	br	1e1c0 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   1e1bc:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   1e1c0:	e0bff117 	ldw	r2,-60(fp)
   1e1c4:	10800017 	ldw	r2,0(r2)
   1e1c8:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   1e1cc:	e0bff117 	ldw	r2,-60(fp)
   1e1d0:	103f871e 	bne	r2,zero,1dff0 <__alt_data_end+0xfc01dff0>
   1e1d4:	e0bff317 	ldw	r2,-52(fp)
   1e1d8:	e0bff715 	stw	r2,-36(fp)
   1e1dc:	e0bff717 	ldw	r2,-36(fp)
   1e1e0:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   1e1e4:	e0bff203 	ldbu	r2,-56(fp)
   1e1e8:	10800058 	cmpnei	r2,r2,1
   1e1ec:	1000011e 	bne	r2,zero,1e1f4 <OSFlagPost+0x338>
        OS_Sched();
   1e1f0:	001c7640 	call	1c764 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e1f4:	0005303a 	rdctl	r2,status
   1e1f8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e1fc:	e0fffa17 	ldw	r3,-24(fp)
   1e200:	00bfff84 	movi	r2,-2
   1e204:	1884703a 	and	r2,r3,r2
   1e208:	1001703a 	wrctl	status,r2
  
  return context;
   1e20c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1e210:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   1e214:	e0bffc17 	ldw	r2,-16(fp)
   1e218:	1080020b 	ldhu	r2,8(r2)
   1e21c:	e0bff90d 	sth	r2,-28(fp)
   1e220:	e0bff317 	ldw	r2,-52(fp)
   1e224:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e228:	e0bff817 	ldw	r2,-32(fp)
   1e22c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   1e230:	e0bfff17 	ldw	r2,-4(fp)
   1e234:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   1e238:	e0bff90b 	ldhu	r2,-28(fp)
}
   1e23c:	e037883a 	mov	sp,fp
   1e240:	dfc00117 	ldw	ra,4(sp)
   1e244:	df000017 	ldw	fp,0(sp)
   1e248:	dec00204 	addi	sp,sp,8
   1e24c:	f800283a 	ret

0001e250 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   1e250:	defff904 	addi	sp,sp,-28
   1e254:	df000615 	stw	fp,24(sp)
   1e258:	df000604 	addi	fp,sp,24
   1e25c:	e13ffe15 	stw	r4,-8(fp)
   1e260:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   1e264:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   1e268:	e0bfff17 	ldw	r2,-4(fp)
   1e26c:	1000021e 	bne	r2,zero,1e278 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   1e270:	0005883a 	mov	r2,zero
   1e274:	00002306 	br	1e304 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   1e278:	e0bffe17 	ldw	r2,-8(fp)
   1e27c:	1000051e 	bne	r2,zero,1e294 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1e280:	e0bfff17 	ldw	r2,-4(fp)
   1e284:	00c01b84 	movi	r3,110
   1e288:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1e28c:	0005883a 	mov	r2,zero
   1e290:	00001c06 	br	1e304 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   1e294:	e0bffe17 	ldw	r2,-8(fp)
   1e298:	10800003 	ldbu	r2,0(r2)
   1e29c:	10803fcc 	andi	r2,r2,255
   1e2a0:	10800160 	cmpeqi	r2,r2,5
   1e2a4:	1000051e 	bne	r2,zero,1e2bc <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   1e2a8:	e0bfff17 	ldw	r2,-4(fp)
   1e2ac:	00c00044 	movi	r3,1
   1e2b0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1e2b4:	0005883a 	mov	r2,zero
   1e2b8:	00001206 	br	1e304 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e2bc:	0005303a 	rdctl	r2,status
   1e2c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e2c4:	e0fffc17 	ldw	r3,-16(fp)
   1e2c8:	00bfff84 	movi	r2,-2
   1e2cc:	1884703a 	and	r2,r3,r2
   1e2d0:	1001703a 	wrctl	status,r2
  
  return context;
   1e2d4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1e2d8:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   1e2dc:	e0bffe17 	ldw	r2,-8(fp)
   1e2e0:	1080020b 	ldhu	r2,8(r2)
   1e2e4:	e0bffb0d 	sth	r2,-20(fp)
   1e2e8:	e0bffa17 	ldw	r2,-24(fp)
   1e2ec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e2f0:	e0bffd17 	ldw	r2,-12(fp)
   1e2f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1e2f8:	e0bfff17 	ldw	r2,-4(fp)
   1e2fc:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   1e300:	e0bffb0b 	ldhu	r2,-20(fp)
}
   1e304:	e037883a 	mov	sp,fp
   1e308:	df000017 	ldw	fp,0(sp)
   1e30c:	dec00104 	addi	sp,sp,4
   1e310:	f800283a 	ret

0001e314 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   1e314:	defff804 	addi	sp,sp,-32
   1e318:	df000715 	stw	fp,28(sp)
   1e31c:	df000704 	addi	fp,sp,28
   1e320:	e13ffb15 	stw	r4,-20(fp)
   1e324:	e17ffc15 	stw	r5,-16(fp)
   1e328:	3009883a 	mov	r4,r6
   1e32c:	3807883a 	mov	r3,r7
   1e330:	e0800117 	ldw	r2,4(fp)
   1e334:	e13ffd0d 	sth	r4,-12(fp)
   1e338:	e0fffe05 	stb	r3,-8(fp)
   1e33c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   1e340:	d0a72e17 	ldw	r2,-25416(gp)
   1e344:	d0e72e17 	ldw	r3,-25416(gp)
   1e348:	18c00c03 	ldbu	r3,48(r3)
   1e34c:	18c00814 	ori	r3,r3,32
   1e350:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   1e354:	d0a72e17 	ldw	r2,-25416(gp)
   1e358:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   1e35c:	d0a72e17 	ldw	r2,-25416(gp)
   1e360:	e0ffff0b 	ldhu	r3,-4(fp)
   1e364:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   1e368:	d0a72e17 	ldw	r2,-25416(gp)
   1e36c:	e0fffc17 	ldw	r3,-16(fp)
   1e370:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   1e374:	e0bffc17 	ldw	r2,-16(fp)
   1e378:	e0fffd0b 	ldhu	r3,-12(fp)
   1e37c:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   1e380:	e0bffc17 	ldw	r2,-16(fp)
   1e384:	e0fffe03 	ldbu	r3,-8(fp)
   1e388:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   1e38c:	d0e72e17 	ldw	r3,-25416(gp)
   1e390:	e0bffc17 	ldw	r2,-16(fp)
   1e394:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   1e398:	e0bffb17 	ldw	r2,-20(fp)
   1e39c:	10c00117 	ldw	r3,4(r2)
   1e3a0:	e0bffc17 	ldw	r2,-16(fp)
   1e3a4:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   1e3a8:	e0bffc17 	ldw	r2,-16(fp)
   1e3ac:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   1e3b0:	e0bffc17 	ldw	r2,-16(fp)
   1e3b4:	e0fffb17 	ldw	r3,-20(fp)
   1e3b8:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   1e3bc:	e0bffb17 	ldw	r2,-20(fp)
   1e3c0:	10800117 	ldw	r2,4(r2)
   1e3c4:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   1e3c8:	e0bff917 	ldw	r2,-28(fp)
   1e3cc:	10000326 	beq	r2,zero,1e3dc <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   1e3d0:	e0bff917 	ldw	r2,-28(fp)
   1e3d4:	e0fffc17 	ldw	r3,-16(fp)
   1e3d8:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   1e3dc:	e0bffb17 	ldw	r2,-20(fp)
   1e3e0:	e0fffc17 	ldw	r3,-16(fp)
   1e3e4:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   1e3e8:	d0a72e17 	ldw	r2,-25416(gp)
   1e3ec:	10800d03 	ldbu	r2,52(r2)
   1e3f0:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1e3f4:	e0fffa03 	ldbu	r3,-24(fp)
   1e3f8:	e13ffa03 	ldbu	r4,-24(fp)
   1e3fc:	d0a72b44 	addi	r2,gp,-25427
   1e400:	2085883a 	add	r2,r4,r2
   1e404:	10800003 	ldbu	r2,0(r2)
   1e408:	1009883a 	mov	r4,r2
   1e40c:	d0a72e17 	ldw	r2,-25416(gp)
   1e410:	10800d43 	ldbu	r2,53(r2)
   1e414:	0084303a 	nor	r2,zero,r2
   1e418:	2084703a 	and	r2,r4,r2
   1e41c:	1009883a 	mov	r4,r2
   1e420:	d0a72b44 	addi	r2,gp,-25427
   1e424:	1885883a 	add	r2,r3,r2
   1e428:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   1e42c:	e0fffa03 	ldbu	r3,-24(fp)
   1e430:	d0a72b44 	addi	r2,gp,-25427
   1e434:	1885883a 	add	r2,r3,r2
   1e438:	10800003 	ldbu	r2,0(r2)
   1e43c:	10803fcc 	andi	r2,r2,255
   1e440:	1000071e 	bne	r2,zero,1e460 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1e444:	d0a72e17 	ldw	r2,-25416(gp)
   1e448:	10800d83 	ldbu	r2,54(r2)
   1e44c:	0084303a 	nor	r2,zero,r2
   1e450:	1007883a 	mov	r3,r2
   1e454:	d0a72b03 	ldbu	r2,-25428(gp)
   1e458:	1884703a 	and	r2,r3,r2
   1e45c:	d0a72b05 	stb	r2,-25428(gp)
    }
}
   1e460:	0001883a 	nop
   1e464:	e037883a 	mov	sp,fp
   1e468:	df000017 	ldw	fp,0(sp)
   1e46c:	dec00104 	addi	sp,sp,4
   1e470:	f800283a 	ret

0001e474 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   1e474:	defffb04 	addi	sp,sp,-20
   1e478:	dfc00415 	stw	ra,16(sp)
   1e47c:	df000315 	stw	fp,12(sp)
   1e480:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   1e484:	0140dc04 	movi	r5,880
   1e488:	010000f4 	movhi	r4,3
   1e48c:	212d5104 	addi	r4,r4,-19132
   1e490:	001c6a80 	call	1c6a8 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   1e494:	008000f4 	movhi	r2,3
   1e498:	10ad5104 	addi	r2,r2,-19132
   1e49c:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   1e4a0:	008000f4 	movhi	r2,3
   1e4a4:	10ad5c04 	addi	r2,r2,-19088
   1e4a8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   1e4ac:	e03ffd0d 	sth	zero,-12(fp)
   1e4b0:	00001306 	br	1e500 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1e4b4:	e0bffe17 	ldw	r2,-8(fp)
   1e4b8:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   1e4bc:	e0bffe17 	ldw	r2,-8(fp)
   1e4c0:	e0ffff17 	ldw	r3,-4(fp)
   1e4c4:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   1e4c8:	e0bffe17 	ldw	r2,-8(fp)
   1e4cc:	00c00fc4 	movi	r3,63
   1e4d0:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   1e4d4:	e0bffe17 	ldw	r2,-8(fp)
   1e4d8:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   1e4dc:	e0bffe17 	ldw	r2,-8(fp)
   1e4e0:	10800b04 	addi	r2,r2,44
   1e4e4:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   1e4e8:	e0bfff17 	ldw	r2,-4(fp)
   1e4ec:	10800b04 	addi	r2,r2,44
   1e4f0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   1e4f4:	e0bffd0b 	ldhu	r2,-12(fp)
   1e4f8:	10800044 	addi	r2,r2,1
   1e4fc:	e0bffd0d 	sth	r2,-12(fp)
   1e500:	e0bffd0b 	ldhu	r2,-12(fp)
   1e504:	108004f0 	cmpltui	r2,r2,19
   1e508:	103fea1e 	bne	r2,zero,1e4b4 <__alt_data_end+0xfc01e4b4>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1e50c:	e0bffe17 	ldw	r2,-8(fp)
   1e510:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   1e514:	e0bffe17 	ldw	r2,-8(fp)
   1e518:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   1e51c:	e0bffe17 	ldw	r2,-8(fp)
   1e520:	00c00fc4 	movi	r3,63
   1e524:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   1e528:	e0bffe17 	ldw	r2,-8(fp)
   1e52c:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   1e530:	008000f4 	movhi	r2,3
   1e534:	10ad5104 	addi	r2,r2,-19132
   1e538:	d0a73015 	stw	r2,-25408(gp)
#endif
}
   1e53c:	0001883a 	nop
   1e540:	e037883a 	mov	sp,fp
   1e544:	dfc00117 	ldw	ra,4(sp)
   1e548:	df000017 	ldw	fp,0(sp)
   1e54c:	dec00204 	addi	sp,sp,8
   1e550:	f800283a 	ret

0001e554 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   1e554:	defffa04 	addi	sp,sp,-24
   1e558:	dfc00515 	stw	ra,20(sp)
   1e55c:	df000415 	stw	fp,16(sp)
   1e560:	df000404 	addi	fp,sp,16
   1e564:	e13ffe15 	stw	r4,-8(fp)
   1e568:	2805883a 	mov	r2,r5
   1e56c:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   1e570:	e0bffe17 	ldw	r2,-8(fp)
   1e574:	10800217 	ldw	r2,8(r2)
   1e578:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   1e57c:	e0bffd17 	ldw	r2,-12(fp)
   1e580:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   1e584:	e0bffd17 	ldw	r2,-12(fp)
   1e588:	e0ffff0b 	ldhu	r3,-4(fp)
   1e58c:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   1e590:	e0bffd17 	ldw	r2,-12(fp)
   1e594:	10c00c03 	ldbu	r3,48(r2)
   1e598:	00bff7c4 	movi	r2,-33
   1e59c:	1884703a 	and	r2,r3,r2
   1e5a0:	1007883a 	mov	r3,r2
   1e5a4:	e0bffd17 	ldw	r2,-12(fp)
   1e5a8:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   1e5ac:	e0bffd17 	ldw	r2,-12(fp)
   1e5b0:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   1e5b4:	e0bffd17 	ldw	r2,-12(fp)
   1e5b8:	10800c03 	ldbu	r2,48(r2)
   1e5bc:	10803fcc 	andi	r2,r2,255
   1e5c0:	1000181e 	bne	r2,zero,1e624 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   1e5c4:	e0bffd17 	ldw	r2,-12(fp)
   1e5c8:	10c00d83 	ldbu	r3,54(r2)
   1e5cc:	d0a72b03 	ldbu	r2,-25428(gp)
   1e5d0:	1884b03a 	or	r2,r3,r2
   1e5d4:	d0a72b05 	stb	r2,-25428(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1e5d8:	e0bffd17 	ldw	r2,-12(fp)
   1e5dc:	10800d03 	ldbu	r2,52(r2)
   1e5e0:	10c03fcc 	andi	r3,r2,255
   1e5e4:	e0bffd17 	ldw	r2,-12(fp)
   1e5e8:	10800d03 	ldbu	r2,52(r2)
   1e5ec:	11003fcc 	andi	r4,r2,255
   1e5f0:	d0a72b44 	addi	r2,gp,-25427
   1e5f4:	2085883a 	add	r2,r4,r2
   1e5f8:	11000003 	ldbu	r4,0(r2)
   1e5fc:	e0bffd17 	ldw	r2,-12(fp)
   1e600:	10800d43 	ldbu	r2,53(r2)
   1e604:	2084b03a 	or	r2,r4,r2
   1e608:	1009883a 	mov	r4,r2
   1e60c:	d0a72b44 	addi	r2,gp,-25427
   1e610:	1885883a 	add	r2,r3,r2
   1e614:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   1e618:	00800044 	movi	r2,1
   1e61c:	e0bffc05 	stb	r2,-16(fp)
   1e620:	00000106 	br	1e628 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   1e624:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   1e628:	e13ffe17 	ldw	r4,-8(fp)
   1e62c:	001e6480 	call	1e648 <OS_FlagUnlink>
    return (sched);
   1e630:	e0bffc03 	ldbu	r2,-16(fp)
}
   1e634:	e037883a 	mov	sp,fp
   1e638:	dfc00117 	ldw	ra,4(sp)
   1e63c:	df000017 	ldw	fp,0(sp)
   1e640:	dec00204 	addi	sp,sp,8
   1e644:	f800283a 	ret

0001e648 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   1e648:	defffa04 	addi	sp,sp,-24
   1e64c:	df000515 	stw	fp,20(sp)
   1e650:	df000504 	addi	fp,sp,20
   1e654:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   1e658:	e0bfff17 	ldw	r2,-4(fp)
   1e65c:	10800117 	ldw	r2,4(r2)
   1e660:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   1e664:	e0bfff17 	ldw	r2,-4(fp)
   1e668:	10800017 	ldw	r2,0(r2)
   1e66c:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   1e670:	e0bffb17 	ldw	r2,-20(fp)
   1e674:	10000b1e 	bne	r2,zero,1e6a4 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   1e678:	e0bfff17 	ldw	r2,-4(fp)
   1e67c:	10800317 	ldw	r2,12(r2)
   1e680:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   1e684:	e0bffd17 	ldw	r2,-12(fp)
   1e688:	e0fffc17 	ldw	r3,-16(fp)
   1e68c:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   1e690:	e0bffc17 	ldw	r2,-16(fp)
   1e694:	10000b26 	beq	r2,zero,1e6c4 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   1e698:	e0bffc17 	ldw	r2,-16(fp)
   1e69c:	10000115 	stw	zero,4(r2)
   1e6a0:	00000806 	br	1e6c4 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   1e6a4:	e0bffb17 	ldw	r2,-20(fp)
   1e6a8:	e0fffc17 	ldw	r3,-16(fp)
   1e6ac:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   1e6b0:	e0bffc17 	ldw	r2,-16(fp)
   1e6b4:	10000326 	beq	r2,zero,1e6c4 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   1e6b8:	e0bffc17 	ldw	r2,-16(fp)
   1e6bc:	e0fffb17 	ldw	r3,-20(fp)
   1e6c0:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   1e6c4:	e0bfff17 	ldw	r2,-4(fp)
   1e6c8:	10800217 	ldw	r2,8(r2)
   1e6cc:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   1e6d0:	e0bffe17 	ldw	r2,-8(fp)
   1e6d4:	10000a15 	stw	zero,40(r2)
#endif
}
   1e6d8:	0001883a 	nop
   1e6dc:	e037883a 	mov	sp,fp
   1e6e0:	df000017 	ldw	fp,0(sp)
   1e6e4:	dec00104 	addi	sp,sp,4
   1e6e8:	f800283a 	ret

0001e6ec <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   1e6ec:	defff404 	addi	sp,sp,-48
   1e6f0:	df000b15 	stw	fp,44(sp)
   1e6f4:	df000b04 	addi	fp,sp,44
   1e6f8:	e13ffc15 	stw	r4,-16(fp)
   1e6fc:	e17ffd15 	stw	r5,-12(fp)
   1e700:	e1bffe15 	stw	r6,-8(fp)
   1e704:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1e708:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1e70c:	e0bfff17 	ldw	r2,-4(fp)
   1e710:	1000021e 	bne	r2,zero,1e71c <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   1e714:	0005883a 	mov	r2,zero
   1e718:	00006506 	br	1e8b0 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   1e71c:	e0bffc17 	ldw	r2,-16(fp)
   1e720:	1000051e 	bne	r2,zero,1e738 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   1e724:	e0bfff17 	ldw	r2,-4(fp)
   1e728:	00c01884 	movi	r3,98
   1e72c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1e730:	0005883a 	mov	r2,zero
   1e734:	00005e06 	br	1e8b0 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   1e738:	e0bffc17 	ldw	r2,-16(fp)
   1e73c:	108000cc 	andi	r2,r2,3
   1e740:	10000526 	beq	r2,zero,1e758 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   1e744:	e0bfff17 	ldw	r2,-4(fp)
   1e748:	00c01884 	movi	r3,98
   1e74c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1e750:	0005883a 	mov	r2,zero
   1e754:	00005606 	br	1e8b0 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   1e758:	e0bffd17 	ldw	r2,-12(fp)
   1e75c:	108000a8 	cmpgeui	r2,r2,2
   1e760:	1000051e 	bne	r2,zero,1e778 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   1e764:	e0bfff17 	ldw	r2,-4(fp)
   1e768:	00c016c4 	movi	r3,91
   1e76c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1e770:	0005883a 	mov	r2,zero
   1e774:	00004e06 	br	1e8b0 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   1e778:	e0bffe17 	ldw	r2,-8(fp)
   1e77c:	10800128 	cmpgeui	r2,r2,4
   1e780:	1000051e 	bne	r2,zero,1e798 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   1e784:	e0bfff17 	ldw	r2,-4(fp)
   1e788:	00c01704 	movi	r3,92
   1e78c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1e790:	0005883a 	mov	r2,zero
   1e794:	00004606 	br	1e8b0 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e798:	0005303a 	rdctl	r2,status
   1e79c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e7a0:	e0fffb17 	ldw	r3,-20(fp)
   1e7a4:	00bfff84 	movi	r2,-2
   1e7a8:	1884703a 	and	r2,r3,r2
   1e7ac:	1001703a 	wrctl	status,r2
  
  return context;
   1e7b0:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1e7b4:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   1e7b8:	d0a72817 	ldw	r2,-25440(gp)
   1e7bc:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   1e7c0:	d0a72817 	ldw	r2,-25440(gp)
   1e7c4:	10000326 	beq	r2,zero,1e7d4 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   1e7c8:	d0a72817 	ldw	r2,-25440(gp)
   1e7cc:	10800117 	ldw	r2,4(r2)
   1e7d0:	d0a72815 	stw	r2,-25440(gp)
   1e7d4:	e0bff817 	ldw	r2,-32(fp)
   1e7d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e7dc:	e0bff917 	ldw	r2,-28(fp)
   1e7e0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   1e7e4:	e0bffa17 	ldw	r2,-24(fp)
   1e7e8:	1000051e 	bne	r2,zero,1e800 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   1e7ec:	e0bfff17 	ldw	r2,-4(fp)
   1e7f0:	00c01684 	movi	r3,90
   1e7f4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1e7f8:	0005883a 	mov	r2,zero
   1e7fc:	00002c06 	br	1e8b0 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   1e800:	e0bffc17 	ldw	r2,-16(fp)
   1e804:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   1e808:	e0fffc17 	ldw	r3,-16(fp)
   1e80c:	e0bffe17 	ldw	r2,-8(fp)
   1e810:	1885883a 	add	r2,r3,r2
   1e814:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   1e818:	e03ff715 	stw	zero,-36(fp)
   1e81c:	00000c06 	br	1e850 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   1e820:	e0bff617 	ldw	r2,-40(fp)
   1e824:	e0fff517 	ldw	r3,-44(fp)
   1e828:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   1e82c:	e0bff517 	ldw	r2,-44(fp)
   1e830:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   1e834:	e0fff517 	ldw	r3,-44(fp)
   1e838:	e0bffe17 	ldw	r2,-8(fp)
   1e83c:	1885883a 	add	r2,r3,r2
   1e840:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   1e844:	e0bff717 	ldw	r2,-36(fp)
   1e848:	10800044 	addi	r2,r2,1
   1e84c:	e0bff715 	stw	r2,-36(fp)
   1e850:	e0bffd17 	ldw	r2,-12(fp)
   1e854:	10bfffc4 	addi	r2,r2,-1
   1e858:	e0fff717 	ldw	r3,-36(fp)
   1e85c:	18bff036 	bltu	r3,r2,1e820 <__alt_data_end+0xfc01e820>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   1e860:	e0bff617 	ldw	r2,-40(fp)
   1e864:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   1e868:	e0bffa17 	ldw	r2,-24(fp)
   1e86c:	e0fffc17 	ldw	r3,-16(fp)
   1e870:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   1e874:	e0bffa17 	ldw	r2,-24(fp)
   1e878:	e0fffc17 	ldw	r3,-16(fp)
   1e87c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   1e880:	e0bffa17 	ldw	r2,-24(fp)
   1e884:	e0fffd17 	ldw	r3,-12(fp)
   1e888:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   1e88c:	e0bffa17 	ldw	r2,-24(fp)
   1e890:	e0fffd17 	ldw	r3,-12(fp)
   1e894:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   1e898:	e0bffa17 	ldw	r2,-24(fp)
   1e89c:	e0fffe17 	ldw	r3,-8(fp)
   1e8a0:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   1e8a4:	e0bfff17 	ldw	r2,-4(fp)
   1e8a8:	10000005 	stb	zero,0(r2)
    return (pmem);
   1e8ac:	e0bffa17 	ldw	r2,-24(fp)
}
   1e8b0:	e037883a 	mov	sp,fp
   1e8b4:	df000017 	ldw	fp,0(sp)
   1e8b8:	dec00104 	addi	sp,sp,4
   1e8bc:	f800283a 	ret

0001e8c0 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   1e8c0:	defff804 	addi	sp,sp,-32
   1e8c4:	df000715 	stw	fp,28(sp)
   1e8c8:	df000704 	addi	fp,sp,28
   1e8cc:	e13ffe15 	stw	r4,-8(fp)
   1e8d0:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1e8d4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1e8d8:	e0bfff17 	ldw	r2,-4(fp)
   1e8dc:	1000021e 	bne	r2,zero,1e8e8 <OSMemGet+0x28>
        return ((void *)0);
   1e8e0:	0005883a 	mov	r2,zero
   1e8e4:	00002e06 	br	1e9a0 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   1e8e8:	e0bffe17 	ldw	r2,-8(fp)
   1e8ec:	1000051e 	bne	r2,zero,1e904 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   1e8f0:	e0bfff17 	ldw	r2,-4(fp)
   1e8f4:	00c01804 	movi	r3,96
   1e8f8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1e8fc:	0005883a 	mov	r2,zero
   1e900:	00002706 	br	1e9a0 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e904:	0005303a 	rdctl	r2,status
   1e908:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e90c:	e0fffd17 	ldw	r3,-12(fp)
   1e910:	00bfff84 	movi	r2,-2
   1e914:	1884703a 	and	r2,r3,r2
   1e918:	1001703a 	wrctl	status,r2
  
  return context;
   1e91c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1e920:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   1e924:	e0bffe17 	ldw	r2,-8(fp)
   1e928:	10800417 	ldw	r2,16(r2)
   1e92c:	10001426 	beq	r2,zero,1e980 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   1e930:	e0bffe17 	ldw	r2,-8(fp)
   1e934:	10800117 	ldw	r2,4(r2)
   1e938:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   1e93c:	e0bffb17 	ldw	r2,-20(fp)
   1e940:	10c00017 	ldw	r3,0(r2)
   1e944:	e0bffe17 	ldw	r2,-8(fp)
   1e948:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   1e94c:	e0bffe17 	ldw	r2,-8(fp)
   1e950:	10800417 	ldw	r2,16(r2)
   1e954:	10ffffc4 	addi	r3,r2,-1
   1e958:	e0bffe17 	ldw	r2,-8(fp)
   1e95c:	10c00415 	stw	r3,16(r2)
   1e960:	e0bff917 	ldw	r2,-28(fp)
   1e964:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e968:	e0bffa17 	ldw	r2,-24(fp)
   1e96c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   1e970:	e0bfff17 	ldw	r2,-4(fp)
   1e974:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   1e978:	e0bffb17 	ldw	r2,-20(fp)
   1e97c:	00000806 	br	1e9a0 <OSMemGet+0xe0>
   1e980:	e0bff917 	ldw	r2,-28(fp)
   1e984:	e0bffc15 	stw	r2,-16(fp)
   1e988:	e0bffc17 	ldw	r2,-16(fp)
   1e98c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   1e990:	e0bfff17 	ldw	r2,-4(fp)
   1e994:	00c01744 	movi	r3,93
   1e998:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   1e99c:	0005883a 	mov	r2,zero
}
   1e9a0:	e037883a 	mov	sp,fp
   1e9a4:	df000017 	ldw	fp,0(sp)
   1e9a8:	dec00104 	addi	sp,sp,4
   1e9ac:	f800283a 	ret

0001e9b0 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   1e9b0:	defff704 	addi	sp,sp,-36
   1e9b4:	dfc00815 	stw	ra,32(sp)
   1e9b8:	df000715 	stw	fp,28(sp)
   1e9bc:	df000704 	addi	fp,sp,28
   1e9c0:	e13ffd15 	stw	r4,-12(fp)
   1e9c4:	e17ffe15 	stw	r5,-8(fp)
   1e9c8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1e9cc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1e9d0:	e0bfff17 	ldw	r2,-4(fp)
   1e9d4:	1000021e 	bne	r2,zero,1e9e0 <OSMemNameGet+0x30>
        return (0);
   1e9d8:	0005883a 	mov	r2,zero
   1e9dc:	00002b06 	br	1ea8c <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   1e9e0:	e0bffd17 	ldw	r2,-12(fp)
   1e9e4:	1000051e 	bne	r2,zero,1e9fc <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   1e9e8:	e0bfff17 	ldw	r2,-4(fp)
   1e9ec:	00c01804 	movi	r3,96
   1e9f0:	10c00005 	stb	r3,0(r2)
        return (0);
   1e9f4:	0005883a 	mov	r2,zero
   1e9f8:	00002406 	br	1ea8c <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1e9fc:	e0bffe17 	ldw	r2,-8(fp)
   1ea00:	1000051e 	bne	r2,zero,1ea18 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   1ea04:	e0bfff17 	ldw	r2,-4(fp)
   1ea08:	00c00304 	movi	r3,12
   1ea0c:	10c00005 	stb	r3,0(r2)
        return (0);
   1ea10:	0005883a 	mov	r2,zero
   1ea14:	00001d06 	br	1ea8c <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1ea18:	d0a72d03 	ldbu	r2,-25420(gp)
   1ea1c:	10803fcc 	andi	r2,r2,255
   1ea20:	10000526 	beq	r2,zero,1ea38 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   1ea24:	e0bfff17 	ldw	r2,-4(fp)
   1ea28:	00c00444 	movi	r3,17
   1ea2c:	10c00005 	stb	r3,0(r2)
        return (0);
   1ea30:	0005883a 	mov	r2,zero
   1ea34:	00001506 	br	1ea8c <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ea38:	0005303a 	rdctl	r2,status
   1ea3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ea40:	e0fffb17 	ldw	r3,-20(fp)
   1ea44:	00bfff84 	movi	r2,-2
   1ea48:	1884703a 	and	r2,r3,r2
   1ea4c:	1001703a 	wrctl	status,r2
  
  return context;
   1ea50:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1ea54:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   1ea58:	e0bffd17 	ldw	r2,-12(fp)
   1ea5c:	10800504 	addi	r2,r2,20
   1ea60:	100b883a 	mov	r5,r2
   1ea64:	e13ffe17 	ldw	r4,-8(fp)
   1ea68:	001c8a80 	call	1c8a8 <OS_StrCopy>
   1ea6c:	e0bffa05 	stb	r2,-24(fp)
   1ea70:	e0bff917 	ldw	r2,-28(fp)
   1ea74:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ea78:	e0bffc17 	ldw	r2,-16(fp)
   1ea7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1ea80:	e0bfff17 	ldw	r2,-4(fp)
   1ea84:	10000005 	stb	zero,0(r2)
    return (len);
   1ea88:	e0bffa03 	ldbu	r2,-24(fp)
}
   1ea8c:	e037883a 	mov	sp,fp
   1ea90:	dfc00117 	ldw	ra,4(sp)
   1ea94:	df000017 	ldw	fp,0(sp)
   1ea98:	dec00204 	addi	sp,sp,8
   1ea9c:	f800283a 	ret

0001eaa0 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   1eaa0:	defff604 	addi	sp,sp,-40
   1eaa4:	dfc00915 	stw	ra,36(sp)
   1eaa8:	df000815 	stw	fp,32(sp)
   1eaac:	df000804 	addi	fp,sp,32
   1eab0:	e13ffd15 	stw	r4,-12(fp)
   1eab4:	e17ffe15 	stw	r5,-8(fp)
   1eab8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1eabc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1eac0:	e0bfff17 	ldw	r2,-4(fp)
   1eac4:	10003526 	beq	r2,zero,1eb9c <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   1eac8:	e0bffd17 	ldw	r2,-12(fp)
   1eacc:	1000041e 	bne	r2,zero,1eae0 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   1ead0:	e0bfff17 	ldw	r2,-4(fp)
   1ead4:	00c01804 	movi	r3,96
   1ead8:	10c00005 	stb	r3,0(r2)
        return;
   1eadc:	00003006 	br	1eba0 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1eae0:	e0bffe17 	ldw	r2,-8(fp)
   1eae4:	1000041e 	bne	r2,zero,1eaf8 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   1eae8:	e0bfff17 	ldw	r2,-4(fp)
   1eaec:	00c00304 	movi	r3,12
   1eaf0:	10c00005 	stb	r3,0(r2)
        return;
   1eaf4:	00002a06 	br	1eba0 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1eaf8:	d0a72d03 	ldbu	r2,-25420(gp)
   1eafc:	10803fcc 	andi	r2,r2,255
   1eb00:	10000426 	beq	r2,zero,1eb14 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   1eb04:	e0bfff17 	ldw	r2,-4(fp)
   1eb08:	00c00484 	movi	r3,18
   1eb0c:	10c00005 	stb	r3,0(r2)
        return;
   1eb10:	00002306 	br	1eba0 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1eb14:	0005303a 	rdctl	r2,status
   1eb18:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1eb1c:	e0fffc17 	ldw	r3,-16(fp)
   1eb20:	00bfff84 	movi	r2,-2
   1eb24:	1884703a 	and	r2,r3,r2
   1eb28:	1001703a 	wrctl	status,r2
  
  return context;
   1eb2c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1eb30:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   1eb34:	e13ffe17 	ldw	r4,-8(fp)
   1eb38:	001c91c0 	call	1c91c <OS_StrLen>
   1eb3c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   1eb40:	e0bffa03 	ldbu	r2,-24(fp)
   1eb44:	10800830 	cmpltui	r2,r2,32
   1eb48:	1000081e 	bne	r2,zero,1eb6c <OSMemNameSet+0xcc>
   1eb4c:	e0bff817 	ldw	r2,-32(fp)
   1eb50:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1eb54:	e0bff917 	ldw	r2,-28(fp)
   1eb58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   1eb5c:	e0bfff17 	ldw	r2,-4(fp)
   1eb60:	00c018c4 	movi	r3,99
   1eb64:	10c00005 	stb	r3,0(r2)
        return;
   1eb68:	00000d06 	br	1eba0 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   1eb6c:	e0bffd17 	ldw	r2,-12(fp)
   1eb70:	10800504 	addi	r2,r2,20
   1eb74:	e17ffe17 	ldw	r5,-8(fp)
   1eb78:	1009883a 	mov	r4,r2
   1eb7c:	001c8a80 	call	1c8a8 <OS_StrCopy>
   1eb80:	e0bff817 	ldw	r2,-32(fp)
   1eb84:	e0bffb15 	stw	r2,-20(fp)
   1eb88:	e0bffb17 	ldw	r2,-20(fp)
   1eb8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1eb90:	e0bfff17 	ldw	r2,-4(fp)
   1eb94:	10000005 	stb	zero,0(r2)
   1eb98:	00000106 	br	1eba0 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   1eb9c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   1eba0:	e037883a 	mov	sp,fp
   1eba4:	dfc00117 	ldw	ra,4(sp)
   1eba8:	df000017 	ldw	fp,0(sp)
   1ebac:	dec00204 	addi	sp,sp,8
   1ebb0:	f800283a 	ret

0001ebb4 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   1ebb4:	defff904 	addi	sp,sp,-28
   1ebb8:	df000615 	stw	fp,24(sp)
   1ebbc:	df000604 	addi	fp,sp,24
   1ebc0:	e13ffe15 	stw	r4,-8(fp)
   1ebc4:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1ebc8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   1ebcc:	e0bffe17 	ldw	r2,-8(fp)
   1ebd0:	1000021e 	bne	r2,zero,1ebdc <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   1ebd4:	00801804 	movi	r2,96
   1ebd8:	00002806 	br	1ec7c <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   1ebdc:	e0bfff17 	ldw	r2,-4(fp)
   1ebe0:	1000021e 	bne	r2,zero,1ebec <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   1ebe4:	008017c4 	movi	r2,95
   1ebe8:	00002406 	br	1ec7c <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ebec:	0005303a 	rdctl	r2,status
   1ebf0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ebf4:	e0fffd17 	ldw	r3,-12(fp)
   1ebf8:	00bfff84 	movi	r2,-2
   1ebfc:	1884703a 	and	r2,r3,r2
   1ec00:	1001703a 	wrctl	status,r2
  
  return context;
   1ec04:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1ec08:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   1ec0c:	e0bffe17 	ldw	r2,-8(fp)
   1ec10:	10c00417 	ldw	r3,16(r2)
   1ec14:	e0bffe17 	ldw	r2,-8(fp)
   1ec18:	10800317 	ldw	r2,12(r2)
   1ec1c:	18800636 	bltu	r3,r2,1ec38 <OSMemPut+0x84>
   1ec20:	e0bffa17 	ldw	r2,-24(fp)
   1ec24:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ec28:	e0bffb17 	ldw	r2,-20(fp)
   1ec2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   1ec30:	00801784 	movi	r2,94
   1ec34:	00001106 	br	1ec7c <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   1ec38:	e0bffe17 	ldw	r2,-8(fp)
   1ec3c:	10c00117 	ldw	r3,4(r2)
   1ec40:	e0bfff17 	ldw	r2,-4(fp)
   1ec44:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   1ec48:	e0bffe17 	ldw	r2,-8(fp)
   1ec4c:	e0ffff17 	ldw	r3,-4(fp)
   1ec50:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   1ec54:	e0bffe17 	ldw	r2,-8(fp)
   1ec58:	10800417 	ldw	r2,16(r2)
   1ec5c:	10c00044 	addi	r3,r2,1
   1ec60:	e0bffe17 	ldw	r2,-8(fp)
   1ec64:	10c00415 	stw	r3,16(r2)
   1ec68:	e0bffa17 	ldw	r2,-24(fp)
   1ec6c:	e0bffc15 	stw	r2,-16(fp)
   1ec70:	e0bffc17 	ldw	r2,-16(fp)
   1ec74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   1ec78:	0005883a 	mov	r2,zero
}
   1ec7c:	e037883a 	mov	sp,fp
   1ec80:	df000017 	ldw	fp,0(sp)
   1ec84:	dec00104 	addi	sp,sp,4
   1ec88:	f800283a 	ret

0001ec8c <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   1ec8c:	defffa04 	addi	sp,sp,-24
   1ec90:	df000515 	stw	fp,20(sp)
   1ec94:	df000504 	addi	fp,sp,20
   1ec98:	e13ffe15 	stw	r4,-8(fp)
   1ec9c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1eca0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   1eca4:	e0bffe17 	ldw	r2,-8(fp)
   1eca8:	1000021e 	bne	r2,zero,1ecb4 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   1ecac:	00801804 	movi	r2,96
   1ecb0:	00002c06 	br	1ed64 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   1ecb4:	e0bfff17 	ldw	r2,-4(fp)
   1ecb8:	1000021e 	bne	r2,zero,1ecc4 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   1ecbc:	00801844 	movi	r2,97
   1ecc0:	00002806 	br	1ed64 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ecc4:	0005303a 	rdctl	r2,status
   1ecc8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1eccc:	e0fffc17 	ldw	r3,-16(fp)
   1ecd0:	00bfff84 	movi	r2,-2
   1ecd4:	1884703a 	and	r2,r3,r2
   1ecd8:	1001703a 	wrctl	status,r2
  
  return context;
   1ecdc:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1ece0:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   1ece4:	e0bffe17 	ldw	r2,-8(fp)
   1ece8:	10c00017 	ldw	r3,0(r2)
   1ecec:	e0bfff17 	ldw	r2,-4(fp)
   1ecf0:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   1ecf4:	e0bffe17 	ldw	r2,-8(fp)
   1ecf8:	10c00117 	ldw	r3,4(r2)
   1ecfc:	e0bfff17 	ldw	r2,-4(fp)
   1ed00:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   1ed04:	e0bffe17 	ldw	r2,-8(fp)
   1ed08:	10c00217 	ldw	r3,8(r2)
   1ed0c:	e0bfff17 	ldw	r2,-4(fp)
   1ed10:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   1ed14:	e0bffe17 	ldw	r2,-8(fp)
   1ed18:	10c00317 	ldw	r3,12(r2)
   1ed1c:	e0bfff17 	ldw	r2,-4(fp)
   1ed20:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   1ed24:	e0bffe17 	ldw	r2,-8(fp)
   1ed28:	10c00417 	ldw	r3,16(r2)
   1ed2c:	e0bfff17 	ldw	r2,-4(fp)
   1ed30:	10c00415 	stw	r3,16(r2)
   1ed34:	e0bffb17 	ldw	r2,-20(fp)
   1ed38:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ed3c:	e0bffd17 	ldw	r2,-12(fp)
   1ed40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   1ed44:	e0bfff17 	ldw	r2,-4(fp)
   1ed48:	10c00317 	ldw	r3,12(r2)
   1ed4c:	e0bfff17 	ldw	r2,-4(fp)
   1ed50:	10800417 	ldw	r2,16(r2)
   1ed54:	1887c83a 	sub	r3,r3,r2
   1ed58:	e0bfff17 	ldw	r2,-4(fp)
   1ed5c:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   1ed60:	0005883a 	mov	r2,zero
}
   1ed64:	e037883a 	mov	sp,fp
   1ed68:	df000017 	ldw	fp,0(sp)
   1ed6c:	dec00104 	addi	sp,sp,4
   1ed70:	f800283a 	ret

0001ed74 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   1ed74:	defffc04 	addi	sp,sp,-16
   1ed78:	dfc00315 	stw	ra,12(sp)
   1ed7c:	df000215 	stw	fp,8(sp)
   1ed80:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   1ed84:	01430c04 	movi	r5,3120
   1ed88:	010000f4 	movhi	r4,3
   1ed8c:	212e2d04 	addi	r4,r4,-18252
   1ed90:	001c6a80 	call	1c6a8 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   1ed94:	008000f4 	movhi	r2,3
   1ed98:	10ae2d04 	addi	r2,r2,-18252
   1ed9c:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   1eda0:	e03fff0d 	sth	zero,-4(fp)
   1eda4:	00001306 	br	1edf4 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   1eda8:	e0bfff0b 	ldhu	r2,-4(fp)
   1edac:	10800044 	addi	r2,r2,1
   1edb0:	10c00d24 	muli	r3,r2,52
   1edb4:	008000f4 	movhi	r2,3
   1edb8:	10ae2d04 	addi	r2,r2,-18252
   1edbc:	1887883a 	add	r3,r3,r2
   1edc0:	e0bffe17 	ldw	r2,-8(fp)
   1edc4:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   1edc8:	e0bffe17 	ldw	r2,-8(fp)
   1edcc:	00c00fc4 	movi	r3,63
   1edd0:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   1edd4:	e0bffe17 	ldw	r2,-8(fp)
   1edd8:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   1eddc:	e0bffe17 	ldw	r2,-8(fp)
   1ede0:	10800d04 	addi	r2,r2,52
   1ede4:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   1ede8:	e0bfff0b 	ldhu	r2,-4(fp)
   1edec:	10800044 	addi	r2,r2,1
   1edf0:	e0bfff0d 	sth	r2,-4(fp)
   1edf4:	e0bfff0b 	ldhu	r2,-4(fp)
   1edf8:	10800ef0 	cmpltui	r2,r2,59
   1edfc:	103fea1e 	bne	r2,zero,1eda8 <__alt_data_end+0xfc01eda8>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   1ee00:	e0bffe17 	ldw	r2,-8(fp)
   1ee04:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   1ee08:	e0bffe17 	ldw	r2,-8(fp)
   1ee0c:	00c00fc4 	movi	r3,63
   1ee10:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   1ee14:	e0bffe17 	ldw	r2,-8(fp)
   1ee18:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   1ee1c:	008000f4 	movhi	r2,3
   1ee20:	10ae2d04 	addi	r2,r2,-18252
   1ee24:	d0a72815 	stw	r2,-25440(gp)
#endif
}
   1ee28:	0001883a 	nop
   1ee2c:	e037883a 	mov	sp,fp
   1ee30:	dfc00117 	ldw	ra,4(sp)
   1ee34:	df000017 	ldw	fp,0(sp)
   1ee38:	dec00204 	addi	sp,sp,8
   1ee3c:	f800283a 	ret

0001ee40 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   1ee40:	defff804 	addi	sp,sp,-32
   1ee44:	df000715 	stw	fp,28(sp)
   1ee48:	df000704 	addi	fp,sp,28
   1ee4c:	e13ffe15 	stw	r4,-8(fp)
   1ee50:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1ee54:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1ee58:	e0bfff17 	ldw	r2,-4(fp)
   1ee5c:	1000021e 	bne	r2,zero,1ee68 <OSQAccept+0x28>
        return ((void *)0);
   1ee60:	0005883a 	mov	r2,zero
   1ee64:	00004206 	br	1ef70 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   1ee68:	e0bffe17 	ldw	r2,-8(fp)
   1ee6c:	1000051e 	bne	r2,zero,1ee84 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   1ee70:	e0bfff17 	ldw	r2,-4(fp)
   1ee74:	00c00104 	movi	r3,4
   1ee78:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1ee7c:	0005883a 	mov	r2,zero
   1ee80:	00003b06 	br	1ef70 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   1ee84:	e0bffe17 	ldw	r2,-8(fp)
   1ee88:	10800003 	ldbu	r2,0(r2)
   1ee8c:	10803fcc 	andi	r2,r2,255
   1ee90:	108000a0 	cmpeqi	r2,r2,2
   1ee94:	1000051e 	bne	r2,zero,1eeac <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   1ee98:	e0bfff17 	ldw	r2,-4(fp)
   1ee9c:	00c00044 	movi	r3,1
   1eea0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1eea4:	0005883a 	mov	r2,zero
   1eea8:	00003106 	br	1ef70 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1eeac:	0005303a 	rdctl	r2,status
   1eeb0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1eeb4:	e0fffd17 	ldw	r3,-12(fp)
   1eeb8:	00bfff84 	movi	r2,-2
   1eebc:	1884703a 	and	r2,r3,r2
   1eec0:	1001703a 	wrctl	status,r2
  
  return context;
   1eec4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1eec8:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   1eecc:	e0bffe17 	ldw	r2,-8(fp)
   1eed0:	10800117 	ldw	r2,4(r2)
   1eed4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   1eed8:	e0bffc17 	ldw	r2,-16(fp)
   1eedc:	1080058b 	ldhu	r2,22(r2)
   1eee0:	10bfffcc 	andi	r2,r2,65535
   1eee4:	10001926 	beq	r2,zero,1ef4c <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   1eee8:	e0bffc17 	ldw	r2,-16(fp)
   1eeec:	10800417 	ldw	r2,16(r2)
   1eef0:	11000104 	addi	r4,r2,4
   1eef4:	e0fffc17 	ldw	r3,-16(fp)
   1eef8:	19000415 	stw	r4,16(r3)
   1eefc:	10800017 	ldw	r2,0(r2)
   1ef00:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   1ef04:	e0bffc17 	ldw	r2,-16(fp)
   1ef08:	1080058b 	ldhu	r2,22(r2)
   1ef0c:	10bfffc4 	addi	r2,r2,-1
   1ef10:	1007883a 	mov	r3,r2
   1ef14:	e0bffc17 	ldw	r2,-16(fp)
   1ef18:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   1ef1c:	e0bffc17 	ldw	r2,-16(fp)
   1ef20:	10c00417 	ldw	r3,16(r2)
   1ef24:	e0bffc17 	ldw	r2,-16(fp)
   1ef28:	10800217 	ldw	r2,8(r2)
   1ef2c:	1880041e 	bne	r3,r2,1ef40 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   1ef30:	e0bffc17 	ldw	r2,-16(fp)
   1ef34:	10c00117 	ldw	r3,4(r2)
   1ef38:	e0bffc17 	ldw	r2,-16(fp)
   1ef3c:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   1ef40:	e0bfff17 	ldw	r2,-4(fp)
   1ef44:	10000005 	stb	zero,0(r2)
   1ef48:	00000406 	br	1ef5c <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   1ef4c:	e0bfff17 	ldw	r2,-4(fp)
   1ef50:	00c007c4 	movi	r3,31
   1ef54:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   1ef58:	e03ff915 	stw	zero,-28(fp)
   1ef5c:	e0bffa17 	ldw	r2,-24(fp)
   1ef60:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ef64:	e0bffb17 	ldw	r2,-20(fp)
   1ef68:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   1ef6c:	e0bff917 	ldw	r2,-28(fp)
}
   1ef70:	e037883a 	mov	sp,fp
   1ef74:	df000017 	ldw	fp,0(sp)
   1ef78:	dec00104 	addi	sp,sp,4
   1ef7c:	f800283a 	ret

0001ef80 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   1ef80:	defff404 	addi	sp,sp,-48
   1ef84:	dfc00b15 	stw	ra,44(sp)
   1ef88:	df000a15 	stw	fp,40(sp)
   1ef8c:	df000a04 	addi	fp,sp,40
   1ef90:	e13ffe15 	stw	r4,-8(fp)
   1ef94:	2805883a 	mov	r2,r5
   1ef98:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1ef9c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   1efa0:	d0a72d03 	ldbu	r2,-25420(gp)
   1efa4:	10803fcc 	andi	r2,r2,255
   1efa8:	10000226 	beq	r2,zero,1efb4 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   1efac:	0005883a 	mov	r2,zero
   1efb0:	00005906 	br	1f118 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1efb4:	0005303a 	rdctl	r2,status
   1efb8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1efbc:	e0fffd17 	ldw	r3,-12(fp)
   1efc0:	00bfff84 	movi	r2,-2
   1efc4:	1884703a 	and	r2,r3,r2
   1efc8:	1001703a 	wrctl	status,r2
  
  return context;
   1efcc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1efd0:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   1efd4:	d0a72c17 	ldw	r2,-25424(gp)
   1efd8:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   1efdc:	d0a72c17 	ldw	r2,-25424(gp)
   1efe0:	10000326 	beq	r2,zero,1eff0 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   1efe4:	d0a72c17 	ldw	r2,-25424(gp)
   1efe8:	10800117 	ldw	r2,4(r2)
   1efec:	d0a72c15 	stw	r2,-25424(gp)
   1eff0:	e0bff717 	ldw	r2,-36(fp)
   1eff4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1eff8:	e0bff817 	ldw	r2,-32(fp)
   1effc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   1f000:	e0bff617 	ldw	r2,-40(fp)
   1f004:	10004326 	beq	r2,zero,1f114 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f008:	0005303a 	rdctl	r2,status
   1f00c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f010:	e0fff917 	ldw	r3,-28(fp)
   1f014:	00bfff84 	movi	r2,-2
   1f018:	1884703a 	and	r2,r3,r2
   1f01c:	1001703a 	wrctl	status,r2
  
  return context;
   1f020:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   1f024:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   1f028:	d0a72a17 	ldw	r2,-25432(gp)
   1f02c:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   1f030:	e0bffb17 	ldw	r2,-20(fp)
   1f034:	10002d26 	beq	r2,zero,1f0ec <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   1f038:	d0a72a17 	ldw	r2,-25432(gp)
   1f03c:	10800017 	ldw	r2,0(r2)
   1f040:	d0a72a15 	stw	r2,-25432(gp)
   1f044:	e0bff717 	ldw	r2,-36(fp)
   1f048:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f04c:	e0bffa17 	ldw	r2,-24(fp)
   1f050:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   1f054:	e0bffb17 	ldw	r2,-20(fp)
   1f058:	e0fffe17 	ldw	r3,-8(fp)
   1f05c:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   1f060:	e0bfff0b 	ldhu	r2,-4(fp)
   1f064:	1085883a 	add	r2,r2,r2
   1f068:	1085883a 	add	r2,r2,r2
   1f06c:	1007883a 	mov	r3,r2
   1f070:	e0bffe17 	ldw	r2,-8(fp)
   1f074:	10c7883a 	add	r3,r2,r3
   1f078:	e0bffb17 	ldw	r2,-20(fp)
   1f07c:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   1f080:	e0bffb17 	ldw	r2,-20(fp)
   1f084:	e0fffe17 	ldw	r3,-8(fp)
   1f088:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   1f08c:	e0bffb17 	ldw	r2,-20(fp)
   1f090:	e0fffe17 	ldw	r3,-8(fp)
   1f094:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   1f098:	e0bffb17 	ldw	r2,-20(fp)
   1f09c:	e0ffff0b 	ldhu	r3,-4(fp)
   1f0a0:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   1f0a4:	e0bffb17 	ldw	r2,-20(fp)
   1f0a8:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   1f0ac:	e0bff617 	ldw	r2,-40(fp)
   1f0b0:	00c00084 	movi	r3,2
   1f0b4:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   1f0b8:	e0bff617 	ldw	r2,-40(fp)
   1f0bc:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   1f0c0:	e0bff617 	ldw	r2,-40(fp)
   1f0c4:	e0fffb17 	ldw	r3,-20(fp)
   1f0c8:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   1f0cc:	e0bff617 	ldw	r2,-40(fp)
   1f0d0:	00c00fc4 	movi	r3,63
   1f0d4:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   1f0d8:	e0bff617 	ldw	r2,-40(fp)
   1f0dc:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   1f0e0:	e13ff617 	ldw	r4,-40(fp)
   1f0e4:	001c2c80 	call	1c2c8 <OS_EventWaitListInit>
   1f0e8:	00000a06 	br	1f114 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   1f0ec:	d0e72c17 	ldw	r3,-25424(gp)
   1f0f0:	e0bff617 	ldw	r2,-40(fp)
   1f0f4:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   1f0f8:	e0bff617 	ldw	r2,-40(fp)
   1f0fc:	d0a72c15 	stw	r2,-25424(gp)
   1f100:	e0bff717 	ldw	r2,-36(fp)
   1f104:	e0bffc15 	stw	r2,-16(fp)
   1f108:	e0bffc17 	ldw	r2,-16(fp)
   1f10c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   1f110:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   1f114:	e0bff617 	ldw	r2,-40(fp)
}
   1f118:	e037883a 	mov	sp,fp
   1f11c:	dfc00117 	ldw	ra,4(sp)
   1f120:	df000017 	ldw	fp,0(sp)
   1f124:	dec00204 	addi	sp,sp,8
   1f128:	f800283a 	ret

0001f12c <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1f12c:	defff204 	addi	sp,sp,-56
   1f130:	dfc00d15 	stw	ra,52(sp)
   1f134:	df000c15 	stw	fp,48(sp)
   1f138:	df000c04 	addi	fp,sp,48
   1f13c:	e13ffd15 	stw	r4,-12(fp)
   1f140:	2805883a 	mov	r2,r5
   1f144:	e1bfff15 	stw	r6,-4(fp)
   1f148:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1f14c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1f150:	e0bfff17 	ldw	r2,-4(fp)
   1f154:	1000021e 	bne	r2,zero,1f160 <OSQDel+0x34>
        return (pevent);
   1f158:	e0bffd17 	ldw	r2,-12(fp)
   1f15c:	00008e06 	br	1f398 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1f160:	e0bffd17 	ldw	r2,-12(fp)
   1f164:	1000051e 	bne	r2,zero,1f17c <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1f168:	e0bfff17 	ldw	r2,-4(fp)
   1f16c:	00c00104 	movi	r3,4
   1f170:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1f174:	e0bffd17 	ldw	r2,-12(fp)
   1f178:	00008706 	br	1f398 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   1f17c:	e0bffd17 	ldw	r2,-12(fp)
   1f180:	10800003 	ldbu	r2,0(r2)
   1f184:	10803fcc 	andi	r2,r2,255
   1f188:	108000a0 	cmpeqi	r2,r2,2
   1f18c:	1000051e 	bne	r2,zero,1f1a4 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1f190:	e0bfff17 	ldw	r2,-4(fp)
   1f194:	00c00044 	movi	r3,1
   1f198:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1f19c:	e0bffd17 	ldw	r2,-12(fp)
   1f1a0:	00007d06 	br	1f398 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1f1a4:	d0a72d03 	ldbu	r2,-25420(gp)
   1f1a8:	10803fcc 	andi	r2,r2,255
   1f1ac:	10000526 	beq	r2,zero,1f1c4 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   1f1b0:	e0bfff17 	ldw	r2,-4(fp)
   1f1b4:	00c003c4 	movi	r3,15
   1f1b8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1f1bc:	e0bffd17 	ldw	r2,-12(fp)
   1f1c0:	00007506 	br	1f398 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f1c4:	0005303a 	rdctl	r2,status
   1f1c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f1cc:	e0fffc17 	ldw	r3,-16(fp)
   1f1d0:	00bfff84 	movi	r2,-2
   1f1d4:	1884703a 	and	r2,r3,r2
   1f1d8:	1001703a 	wrctl	status,r2
  
  return context;
   1f1dc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1f1e0:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   1f1e4:	e0bffd17 	ldw	r2,-12(fp)
   1f1e8:	10800283 	ldbu	r2,10(r2)
   1f1ec:	10803fcc 	andi	r2,r2,255
   1f1f0:	10000326 	beq	r2,zero,1f200 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1f1f4:	00800044 	movi	r2,1
   1f1f8:	e0bff405 	stb	r2,-48(fp)
   1f1fc:	00000106 	br	1f204 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1f200:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   1f204:	e0bffe03 	ldbu	r2,-8(fp)
   1f208:	10000326 	beq	r2,zero,1f218 <OSQDel+0xec>
   1f20c:	10800060 	cmpeqi	r2,r2,1
   1f210:	1000301e 	bne	r2,zero,1f2d4 <OSQDel+0x1a8>
   1f214:	00005506 	br	1f36c <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   1f218:	e0bff403 	ldbu	r2,-48(fp)
   1f21c:	10001e1e 	bne	r2,zero,1f298 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   1f220:	e0bffd17 	ldw	r2,-12(fp)
   1f224:	00c00fc4 	movi	r3,63
   1f228:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   1f22c:	e0bffd17 	ldw	r2,-12(fp)
   1f230:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   1f234:	e0bffd17 	ldw	r2,-12(fp)
   1f238:	10800117 	ldw	r2,4(r2)
   1f23c:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   1f240:	d0e72a17 	ldw	r3,-25432(gp)
   1f244:	e0bff817 	ldw	r2,-32(fp)
   1f248:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   1f24c:	e0bff817 	ldw	r2,-32(fp)
   1f250:	d0a72a15 	stw	r2,-25432(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1f254:	e0bffd17 	ldw	r2,-12(fp)
   1f258:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   1f25c:	d0e72c17 	ldw	r3,-25424(gp)
   1f260:	e0bffd17 	ldw	r2,-12(fp)
   1f264:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   1f268:	e0bffd17 	ldw	r2,-12(fp)
   1f26c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   1f270:	e0bffd17 	ldw	r2,-12(fp)
   1f274:	d0a72c15 	stw	r2,-25424(gp)
   1f278:	e0bff617 	ldw	r2,-40(fp)
   1f27c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f280:	e0bff717 	ldw	r2,-36(fp)
   1f284:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   1f288:	e0bfff17 	ldw	r2,-4(fp)
   1f28c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   1f290:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   1f294:	00003f06 	br	1f394 <OSQDel+0x268>
   1f298:	e0bff617 	ldw	r2,-40(fp)
   1f29c:	e0bff915 	stw	r2,-28(fp)
   1f2a0:	e0bff917 	ldw	r2,-28(fp)
   1f2a4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   1f2a8:	e0bfff17 	ldw	r2,-4(fp)
   1f2ac:	00c01244 	movi	r3,73
   1f2b0:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   1f2b4:	e0bffd17 	ldw	r2,-12(fp)
   1f2b8:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   1f2bc:	00003506 	br	1f394 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   1f2c0:	000f883a 	mov	r7,zero
   1f2c4:	01800104 	movi	r6,4
   1f2c8:	000b883a 	mov	r5,zero
   1f2cc:	e13ffd17 	ldw	r4,-12(fp)
   1f2d0:	001bd180 	call	1bd18 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   1f2d4:	e0bffd17 	ldw	r2,-12(fp)
   1f2d8:	10800283 	ldbu	r2,10(r2)
   1f2dc:	10803fcc 	andi	r2,r2,255
   1f2e0:	103ff71e 	bne	r2,zero,1f2c0 <__alt_data_end+0xfc01f2c0>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   1f2e4:	e0bffd17 	ldw	r2,-12(fp)
   1f2e8:	00c00fc4 	movi	r3,63
   1f2ec:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   1f2f0:	e0bffd17 	ldw	r2,-12(fp)
   1f2f4:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   1f2f8:	e0bffd17 	ldw	r2,-12(fp)
   1f2fc:	10800117 	ldw	r2,4(r2)
   1f300:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   1f304:	d0e72a17 	ldw	r3,-25432(gp)
   1f308:	e0bff817 	ldw	r2,-32(fp)
   1f30c:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   1f310:	e0bff817 	ldw	r2,-32(fp)
   1f314:	d0a72a15 	stw	r2,-25432(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1f318:	e0bffd17 	ldw	r2,-12(fp)
   1f31c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   1f320:	d0e72c17 	ldw	r3,-25424(gp)
   1f324:	e0bffd17 	ldw	r2,-12(fp)
   1f328:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   1f32c:	e0bffd17 	ldw	r2,-12(fp)
   1f330:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   1f334:	e0bffd17 	ldw	r2,-12(fp)
   1f338:	d0a72c15 	stw	r2,-25424(gp)
   1f33c:	e0bff617 	ldw	r2,-40(fp)
   1f340:	e0bffa15 	stw	r2,-24(fp)
   1f344:	e0bffa17 	ldw	r2,-24(fp)
   1f348:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1f34c:	e0bff403 	ldbu	r2,-48(fp)
   1f350:	10800058 	cmpnei	r2,r2,1
   1f354:	1000011e 	bne	r2,zero,1f35c <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1f358:	001c7640 	call	1c764 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   1f35c:	e0bfff17 	ldw	r2,-4(fp)
   1f360:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   1f364:	e03ff515 	stw	zero,-44(fp)
             break;
   1f368:	00000a06 	br	1f394 <OSQDel+0x268>
   1f36c:	e0bff617 	ldw	r2,-40(fp)
   1f370:	e0bffb15 	stw	r2,-20(fp)
   1f374:	e0bffb17 	ldw	r2,-20(fp)
   1f378:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   1f37c:	e0bfff17 	ldw	r2,-4(fp)
   1f380:	00c001c4 	movi	r3,7
   1f384:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   1f388:	e0bffd17 	ldw	r2,-12(fp)
   1f38c:	e0bff515 	stw	r2,-44(fp)
             break;
   1f390:	0001883a 	nop
    }
    return (pevent_return);
   1f394:	e0bff517 	ldw	r2,-44(fp)
}
   1f398:	e037883a 	mov	sp,fp
   1f39c:	dfc00117 	ldw	ra,4(sp)
   1f3a0:	df000017 	ldw	fp,0(sp)
   1f3a4:	dec00204 	addi	sp,sp,8
   1f3a8:	f800283a 	ret

0001f3ac <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   1f3ac:	defffa04 	addi	sp,sp,-24
   1f3b0:	df000515 	stw	fp,20(sp)
   1f3b4:	df000504 	addi	fp,sp,20
   1f3b8:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1f3bc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1f3c0:	e0bfff17 	ldw	r2,-4(fp)
   1f3c4:	1000021e 	bne	r2,zero,1f3d0 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   1f3c8:	00800104 	movi	r2,4
   1f3cc:	00002106 	br	1f454 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   1f3d0:	e0bfff17 	ldw	r2,-4(fp)
   1f3d4:	10800003 	ldbu	r2,0(r2)
   1f3d8:	10803fcc 	andi	r2,r2,255
   1f3dc:	108000a0 	cmpeqi	r2,r2,2
   1f3e0:	1000021e 	bne	r2,zero,1f3ec <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   1f3e4:	00800044 	movi	r2,1
   1f3e8:	00001a06 	br	1f454 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f3ec:	0005303a 	rdctl	r2,status
   1f3f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f3f4:	e0fffd17 	ldw	r3,-12(fp)
   1f3f8:	00bfff84 	movi	r2,-2
   1f3fc:	1884703a 	and	r2,r3,r2
   1f400:	1001703a 	wrctl	status,r2
  
  return context;
   1f404:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1f408:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   1f40c:	e0bfff17 	ldw	r2,-4(fp)
   1f410:	10800117 	ldw	r2,4(r2)
   1f414:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   1f418:	e0bffc17 	ldw	r2,-16(fp)
   1f41c:	10c00117 	ldw	r3,4(r2)
   1f420:	e0bffc17 	ldw	r2,-16(fp)
   1f424:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   1f428:	e0bffc17 	ldw	r2,-16(fp)
   1f42c:	10c00117 	ldw	r3,4(r2)
   1f430:	e0bffc17 	ldw	r2,-16(fp)
   1f434:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   1f438:	e0bffc17 	ldw	r2,-16(fp)
   1f43c:	1000058d 	sth	zero,22(r2)
   1f440:	e0bffb17 	ldw	r2,-20(fp)
   1f444:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f448:	e0bffe17 	ldw	r2,-8(fp)
   1f44c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1f450:	0005883a 	mov	r2,zero
}
   1f454:	e037883a 	mov	sp,fp
   1f458:	df000017 	ldw	fp,0(sp)
   1f45c:	dec00104 	addi	sp,sp,4
   1f460:	f800283a 	ret

0001f464 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   1f464:	defff304 	addi	sp,sp,-52
   1f468:	dfc00c15 	stw	ra,48(sp)
   1f46c:	df000b15 	stw	fp,44(sp)
   1f470:	df000b04 	addi	fp,sp,44
   1f474:	e13ffd15 	stw	r4,-12(fp)
   1f478:	2805883a 	mov	r2,r5
   1f47c:	e1bfff15 	stw	r6,-4(fp)
   1f480:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1f484:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1f488:	e0bfff17 	ldw	r2,-4(fp)
   1f48c:	1000021e 	bne	r2,zero,1f498 <OSQPend+0x34>
        return ((void *)0);
   1f490:	0005883a 	mov	r2,zero
   1f494:	00009106 	br	1f6dc <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   1f498:	e0bffd17 	ldw	r2,-12(fp)
   1f49c:	1000051e 	bne	r2,zero,1f4b4 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1f4a0:	e0bfff17 	ldw	r2,-4(fp)
   1f4a4:	00c00104 	movi	r3,4
   1f4a8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1f4ac:	0005883a 	mov	r2,zero
   1f4b0:	00008a06 	br	1f6dc <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   1f4b4:	e0bffd17 	ldw	r2,-12(fp)
   1f4b8:	10800003 	ldbu	r2,0(r2)
   1f4bc:	10803fcc 	andi	r2,r2,255
   1f4c0:	108000a0 	cmpeqi	r2,r2,2
   1f4c4:	1000051e 	bne	r2,zero,1f4dc <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1f4c8:	e0bfff17 	ldw	r2,-4(fp)
   1f4cc:	00c00044 	movi	r3,1
   1f4d0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1f4d4:	0005883a 	mov	r2,zero
   1f4d8:	00008006 	br	1f6dc <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   1f4dc:	d0a72d03 	ldbu	r2,-25420(gp)
   1f4e0:	10803fcc 	andi	r2,r2,255
   1f4e4:	10000526 	beq	r2,zero,1f4fc <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   1f4e8:	e0bfff17 	ldw	r2,-4(fp)
   1f4ec:	00c00084 	movi	r3,2
   1f4f0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1f4f4:	0005883a 	mov	r2,zero
   1f4f8:	00007806 	br	1f6dc <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   1f4fc:	d0a71f03 	ldbu	r2,-25476(gp)
   1f500:	10803fcc 	andi	r2,r2,255
   1f504:	10000526 	beq	r2,zero,1f51c <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   1f508:	e0bfff17 	ldw	r2,-4(fp)
   1f50c:	00c00344 	movi	r3,13
   1f510:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1f514:	0005883a 	mov	r2,zero
   1f518:	00007006 	br	1f6dc <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f51c:	0005303a 	rdctl	r2,status
   1f520:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f524:	e0fffc17 	ldw	r3,-16(fp)
   1f528:	00bfff84 	movi	r2,-2
   1f52c:	1884703a 	and	r2,r3,r2
   1f530:	1001703a 	wrctl	status,r2
  
  return context;
   1f534:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1f538:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   1f53c:	e0bffd17 	ldw	r2,-12(fp)
   1f540:	10800117 	ldw	r2,4(r2)
   1f544:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   1f548:	e0bff817 	ldw	r2,-32(fp)
   1f54c:	1080058b 	ldhu	r2,22(r2)
   1f550:	10bfffcc 	andi	r2,r2,65535
   1f554:	10001e26 	beq	r2,zero,1f5d0 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   1f558:	e0bff817 	ldw	r2,-32(fp)
   1f55c:	10800417 	ldw	r2,16(r2)
   1f560:	11000104 	addi	r4,r2,4
   1f564:	e0fff817 	ldw	r3,-32(fp)
   1f568:	19000415 	stw	r4,16(r3)
   1f56c:	10800017 	ldw	r2,0(r2)
   1f570:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   1f574:	e0bff817 	ldw	r2,-32(fp)
   1f578:	1080058b 	ldhu	r2,22(r2)
   1f57c:	10bfffc4 	addi	r2,r2,-1
   1f580:	1007883a 	mov	r3,r2
   1f584:	e0bff817 	ldw	r2,-32(fp)
   1f588:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   1f58c:	e0bff817 	ldw	r2,-32(fp)
   1f590:	10c00417 	ldw	r3,16(r2)
   1f594:	e0bff817 	ldw	r2,-32(fp)
   1f598:	10800217 	ldw	r2,8(r2)
   1f59c:	1880041e 	bne	r3,r2,1f5b0 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   1f5a0:	e0bff817 	ldw	r2,-32(fp)
   1f5a4:	10c00117 	ldw	r3,4(r2)
   1f5a8:	e0bff817 	ldw	r2,-32(fp)
   1f5ac:	10c00415 	stw	r3,16(r2)
   1f5b0:	e0bff617 	ldw	r2,-40(fp)
   1f5b4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f5b8:	e0bff717 	ldw	r2,-36(fp)
   1f5bc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   1f5c0:	e0bfff17 	ldw	r2,-4(fp)
   1f5c4:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   1f5c8:	e0bff517 	ldw	r2,-44(fp)
   1f5cc:	00004306 	br	1f6dc <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   1f5d0:	d0a72e17 	ldw	r2,-25416(gp)
   1f5d4:	d0e72e17 	ldw	r3,-25416(gp)
   1f5d8:	18c00c03 	ldbu	r3,48(r3)
   1f5dc:	18c00114 	ori	r3,r3,4
   1f5e0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1f5e4:	d0a72e17 	ldw	r2,-25416(gp)
   1f5e8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   1f5ec:	d0a72e17 	ldw	r2,-25416(gp)
   1f5f0:	e0fffe0b 	ldhu	r3,-8(fp)
   1f5f4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   1f5f8:	e13ffd17 	ldw	r4,-12(fp)
   1f5fc:	001beb00 	call	1beb0 <OS_EventTaskWait>
   1f600:	e0bff617 	ldw	r2,-40(fp)
   1f604:	e0bffb15 	stw	r2,-20(fp)
   1f608:	e0bffb17 	ldw	r2,-20(fp)
   1f60c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   1f610:	001c7640 	call	1c764 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f614:	0005303a 	rdctl	r2,status
   1f618:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f61c:	e0fff917 	ldw	r3,-28(fp)
   1f620:	00bfff84 	movi	r2,-2
   1f624:	1884703a 	and	r2,r3,r2
   1f628:	1001703a 	wrctl	status,r2
  
  return context;
   1f62c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   1f630:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1f634:	d0a72e17 	ldw	r2,-25416(gp)
   1f638:	10800c43 	ldbu	r2,49(r2)
   1f63c:	10803fcc 	andi	r2,r2,255
   1f640:	10000326 	beq	r2,zero,1f650 <OSQPend+0x1ec>
   1f644:	108000a0 	cmpeqi	r2,r2,2
   1f648:	1000071e 	bne	r2,zero,1f668 <OSQPend+0x204>
   1f64c:	00000b06 	br	1f67c <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   1f650:	d0a72e17 	ldw	r2,-25416(gp)
   1f654:	10800917 	ldw	r2,36(r2)
   1f658:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   1f65c:	e0bfff17 	ldw	r2,-4(fp)
   1f660:	10000005 	stb	zero,0(r2)
             break;
   1f664:	00000e06 	br	1f6a0 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   1f668:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   1f66c:	e0bfff17 	ldw	r2,-4(fp)
   1f670:	00c00384 	movi	r3,14
   1f674:	10c00005 	stb	r3,0(r2)
             break;
   1f678:	00000906 	br	1f6a0 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   1f67c:	d0a72e17 	ldw	r2,-25416(gp)
   1f680:	e17ffd17 	ldw	r5,-12(fp)
   1f684:	1009883a 	mov	r4,r2
   1f688:	001c1100 	call	1c110 <OS_EventTaskRemove>
             pmsg = (void *)0;
   1f68c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   1f690:	e0bfff17 	ldw	r2,-4(fp)
   1f694:	00c00284 	movi	r3,10
   1f698:	10c00005 	stb	r3,0(r2)
             break;
   1f69c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   1f6a0:	d0a72e17 	ldw	r2,-25416(gp)
   1f6a4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   1f6a8:	d0a72e17 	ldw	r2,-25416(gp)
   1f6ac:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   1f6b0:	d0a72e17 	ldw	r2,-25416(gp)
   1f6b4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   1f6b8:	d0a72e17 	ldw	r2,-25416(gp)
   1f6bc:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   1f6c0:	d0a72e17 	ldw	r2,-25416(gp)
   1f6c4:	10000915 	stw	zero,36(r2)
   1f6c8:	e0bff617 	ldw	r2,-40(fp)
   1f6cc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f6d0:	e0bffa17 	ldw	r2,-24(fp)
   1f6d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   1f6d8:	e0bff517 	ldw	r2,-44(fp)
}
   1f6dc:	e037883a 	mov	sp,fp
   1f6e0:	dfc00117 	ldw	ra,4(sp)
   1f6e4:	df000017 	ldw	fp,0(sp)
   1f6e8:	dec00204 	addi	sp,sp,8
   1f6ec:	f800283a 	ret

0001f6f0 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1f6f0:	defff604 	addi	sp,sp,-40
   1f6f4:	dfc00915 	stw	ra,36(sp)
   1f6f8:	df000815 	stw	fp,32(sp)
   1f6fc:	df000804 	addi	fp,sp,32
   1f700:	e13ffd15 	stw	r4,-12(fp)
   1f704:	2805883a 	mov	r2,r5
   1f708:	e1bfff15 	stw	r6,-4(fp)
   1f70c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1f710:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1f714:	e0bfff17 	ldw	r2,-4(fp)
   1f718:	1000021e 	bne	r2,zero,1f724 <OSQPendAbort+0x34>
        return (0);
   1f71c:	0005883a 	mov	r2,zero
   1f720:	00004906 	br	1f848 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1f724:	e0bffd17 	ldw	r2,-12(fp)
   1f728:	1000051e 	bne	r2,zero,1f740 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1f72c:	e0bfff17 	ldw	r2,-4(fp)
   1f730:	00c00104 	movi	r3,4
   1f734:	10c00005 	stb	r3,0(r2)
        return (0);
   1f738:	0005883a 	mov	r2,zero
   1f73c:	00004206 	br	1f848 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   1f740:	e0bffd17 	ldw	r2,-12(fp)
   1f744:	10800003 	ldbu	r2,0(r2)
   1f748:	10803fcc 	andi	r2,r2,255
   1f74c:	108000a0 	cmpeqi	r2,r2,2
   1f750:	1000051e 	bne	r2,zero,1f768 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1f754:	e0bfff17 	ldw	r2,-4(fp)
   1f758:	00c00044 	movi	r3,1
   1f75c:	10c00005 	stb	r3,0(r2)
        return (0);
   1f760:	0005883a 	mov	r2,zero
   1f764:	00003806 	br	1f848 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f768:	0005303a 	rdctl	r2,status
   1f76c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f770:	e0fffc17 	ldw	r3,-16(fp)
   1f774:	00bfff84 	movi	r2,-2
   1f778:	1884703a 	and	r2,r3,r2
   1f77c:	1001703a 	wrctl	status,r2
  
  return context;
   1f780:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1f784:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   1f788:	e0bffd17 	ldw	r2,-12(fp)
   1f78c:	10800283 	ldbu	r2,10(r2)
   1f790:	10803fcc 	andi	r2,r2,255
   1f794:	10002526 	beq	r2,zero,1f82c <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   1f798:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   1f79c:	e0bffe03 	ldbu	r2,-8(fp)
   1f7a0:	10800060 	cmpeqi	r2,r2,1
   1f7a4:	10000e26 	beq	r2,zero,1f7e0 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   1f7a8:	00000806 	br	1f7cc <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   1f7ac:	01c00084 	movi	r7,2
   1f7b0:	01800104 	movi	r6,4
   1f7b4:	000b883a 	mov	r5,zero
   1f7b8:	e13ffd17 	ldw	r4,-12(fp)
   1f7bc:	001bd180 	call	1bd18 <OS_EventTaskRdy>
                     nbr_tasks++;
   1f7c0:	e0bff803 	ldbu	r2,-32(fp)
   1f7c4:	10800044 	addi	r2,r2,1
   1f7c8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   1f7cc:	e0bffd17 	ldw	r2,-12(fp)
   1f7d0:	10800283 	ldbu	r2,10(r2)
   1f7d4:	10803fcc 	andi	r2,r2,255
   1f7d8:	103ff41e 	bne	r2,zero,1f7ac <__alt_data_end+0xfc01f7ac>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   1f7dc:	00000906 	br	1f804 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   1f7e0:	01c00084 	movi	r7,2
   1f7e4:	01800104 	movi	r6,4
   1f7e8:	000b883a 	mov	r5,zero
   1f7ec:	e13ffd17 	ldw	r4,-12(fp)
   1f7f0:	001bd180 	call	1bd18 <OS_EventTaskRdy>
                 nbr_tasks++;
   1f7f4:	e0bff803 	ldbu	r2,-32(fp)
   1f7f8:	10800044 	addi	r2,r2,1
   1f7fc:	e0bff805 	stb	r2,-32(fp)
                 break;
   1f800:	0001883a 	nop
   1f804:	e0bff917 	ldw	r2,-28(fp)
   1f808:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f80c:	e0bffa17 	ldw	r2,-24(fp)
   1f810:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   1f814:	001c7640 	call	1c764 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   1f818:	e0bfff17 	ldw	r2,-4(fp)
   1f81c:	00c00384 	movi	r3,14
   1f820:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   1f824:	e0bff803 	ldbu	r2,-32(fp)
   1f828:	00000706 	br	1f848 <OSQPendAbort+0x158>
   1f82c:	e0bff917 	ldw	r2,-28(fp)
   1f830:	e0bffb15 	stw	r2,-20(fp)
   1f834:	e0bffb17 	ldw	r2,-20(fp)
   1f838:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1f83c:	e0bfff17 	ldw	r2,-4(fp)
   1f840:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   1f844:	0005883a 	mov	r2,zero
}
   1f848:	e037883a 	mov	sp,fp
   1f84c:	dfc00117 	ldw	ra,4(sp)
   1f850:	df000017 	ldw	fp,0(sp)
   1f854:	dec00204 	addi	sp,sp,8
   1f858:	f800283a 	ret

0001f85c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   1f85c:	defff604 	addi	sp,sp,-40
   1f860:	dfc00915 	stw	ra,36(sp)
   1f864:	df000815 	stw	fp,32(sp)
   1f868:	df000804 	addi	fp,sp,32
   1f86c:	e13ffe15 	stw	r4,-8(fp)
   1f870:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1f874:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   1f878:	e0bffe17 	ldw	r2,-8(fp)
   1f87c:	1000021e 	bne	r2,zero,1f888 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   1f880:	00800104 	movi	r2,4
   1f884:	00004a06 	br	1f9b0 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   1f888:	e0bffe17 	ldw	r2,-8(fp)
   1f88c:	10800003 	ldbu	r2,0(r2)
   1f890:	10803fcc 	andi	r2,r2,255
   1f894:	108000a0 	cmpeqi	r2,r2,2
   1f898:	1000021e 	bne	r2,zero,1f8a4 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   1f89c:	00800044 	movi	r2,1
   1f8a0:	00004306 	br	1f9b0 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f8a4:	0005303a 	rdctl	r2,status
   1f8a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f8ac:	e0fffd17 	ldw	r3,-12(fp)
   1f8b0:	00bfff84 	movi	r2,-2
   1f8b4:	1884703a 	and	r2,r3,r2
   1f8b8:	1001703a 	wrctl	status,r2
  
  return context;
   1f8bc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1f8c0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   1f8c4:	e0bffe17 	ldw	r2,-8(fp)
   1f8c8:	10800283 	ldbu	r2,10(r2)
   1f8cc:	10803fcc 	andi	r2,r2,255
   1f8d0:	10000c26 	beq	r2,zero,1f904 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1f8d4:	000f883a 	mov	r7,zero
   1f8d8:	01800104 	movi	r6,4
   1f8dc:	e17fff17 	ldw	r5,-4(fp)
   1f8e0:	e13ffe17 	ldw	r4,-8(fp)
   1f8e4:	001bd180 	call	1bd18 <OS_EventTaskRdy>
   1f8e8:	e0bff817 	ldw	r2,-32(fp)
   1f8ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f8f0:	e0bff917 	ldw	r2,-28(fp)
   1f8f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   1f8f8:	001c7640 	call	1c764 <OS_Sched>
        return (OS_ERR_NONE);
   1f8fc:	0005883a 	mov	r2,zero
   1f900:	00002b06 	br	1f9b0 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   1f904:	e0bffe17 	ldw	r2,-8(fp)
   1f908:	10800117 	ldw	r2,4(r2)
   1f90c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   1f910:	e0bffb17 	ldw	r2,-20(fp)
   1f914:	10c0058b 	ldhu	r3,22(r2)
   1f918:	e0bffb17 	ldw	r2,-20(fp)
   1f91c:	1080050b 	ldhu	r2,20(r2)
   1f920:	18ffffcc 	andi	r3,r3,65535
   1f924:	10bfffcc 	andi	r2,r2,65535
   1f928:	18800636 	bltu	r3,r2,1f944 <OSQPost+0xe8>
   1f92c:	e0bff817 	ldw	r2,-32(fp)
   1f930:	e0bffa15 	stw	r2,-24(fp)
   1f934:	e0bffa17 	ldw	r2,-24(fp)
   1f938:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   1f93c:	00800784 	movi	r2,30
   1f940:	00001b06 	br	1f9b0 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   1f944:	e0bffb17 	ldw	r2,-20(fp)
   1f948:	10800317 	ldw	r2,12(r2)
   1f94c:	11000104 	addi	r4,r2,4
   1f950:	e0fffb17 	ldw	r3,-20(fp)
   1f954:	19000315 	stw	r4,12(r3)
   1f958:	e0ffff17 	ldw	r3,-4(fp)
   1f95c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   1f960:	e0bffb17 	ldw	r2,-20(fp)
   1f964:	1080058b 	ldhu	r2,22(r2)
   1f968:	10800044 	addi	r2,r2,1
   1f96c:	1007883a 	mov	r3,r2
   1f970:	e0bffb17 	ldw	r2,-20(fp)
   1f974:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   1f978:	e0bffb17 	ldw	r2,-20(fp)
   1f97c:	10c00317 	ldw	r3,12(r2)
   1f980:	e0bffb17 	ldw	r2,-20(fp)
   1f984:	10800217 	ldw	r2,8(r2)
   1f988:	1880041e 	bne	r3,r2,1f99c <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   1f98c:	e0bffb17 	ldw	r2,-20(fp)
   1f990:	10c00117 	ldw	r3,4(r2)
   1f994:	e0bffb17 	ldw	r2,-20(fp)
   1f998:	10c00315 	stw	r3,12(r2)
   1f99c:	e0bff817 	ldw	r2,-32(fp)
   1f9a0:	e0bffc15 	stw	r2,-16(fp)
   1f9a4:	e0bffc17 	ldw	r2,-16(fp)
   1f9a8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1f9ac:	0005883a 	mov	r2,zero
}
   1f9b0:	e037883a 	mov	sp,fp
   1f9b4:	dfc00117 	ldw	ra,4(sp)
   1f9b8:	df000017 	ldw	fp,0(sp)
   1f9bc:	dec00204 	addi	sp,sp,8
   1f9c0:	f800283a 	ret

0001f9c4 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   1f9c4:	defff604 	addi	sp,sp,-40
   1f9c8:	dfc00915 	stw	ra,36(sp)
   1f9cc:	df000815 	stw	fp,32(sp)
   1f9d0:	df000804 	addi	fp,sp,32
   1f9d4:	e13ffe15 	stw	r4,-8(fp)
   1f9d8:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1f9dc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1f9e0:	e0bffe17 	ldw	r2,-8(fp)
   1f9e4:	1000021e 	bne	r2,zero,1f9f0 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   1f9e8:	00800104 	movi	r2,4
   1f9ec:	00004c06 	br	1fb20 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   1f9f0:	e0bffe17 	ldw	r2,-8(fp)
   1f9f4:	10800003 	ldbu	r2,0(r2)
   1f9f8:	10803fcc 	andi	r2,r2,255
   1f9fc:	108000a0 	cmpeqi	r2,r2,2
   1fa00:	1000021e 	bne	r2,zero,1fa0c <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   1fa04:	00800044 	movi	r2,1
   1fa08:	00004506 	br	1fb20 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1fa0c:	0005303a 	rdctl	r2,status
   1fa10:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1fa14:	e0fffd17 	ldw	r3,-12(fp)
   1fa18:	00bfff84 	movi	r2,-2
   1fa1c:	1884703a 	and	r2,r3,r2
   1fa20:	1001703a 	wrctl	status,r2
  
  return context;
   1fa24:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1fa28:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   1fa2c:	e0bffe17 	ldw	r2,-8(fp)
   1fa30:	10800283 	ldbu	r2,10(r2)
   1fa34:	10803fcc 	andi	r2,r2,255
   1fa38:	10000c26 	beq	r2,zero,1fa6c <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1fa3c:	000f883a 	mov	r7,zero
   1fa40:	01800104 	movi	r6,4
   1fa44:	e17fff17 	ldw	r5,-4(fp)
   1fa48:	e13ffe17 	ldw	r4,-8(fp)
   1fa4c:	001bd180 	call	1bd18 <OS_EventTaskRdy>
   1fa50:	e0bff817 	ldw	r2,-32(fp)
   1fa54:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1fa58:	e0bff917 	ldw	r2,-28(fp)
   1fa5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   1fa60:	001c7640 	call	1c764 <OS_Sched>
        return (OS_ERR_NONE);
   1fa64:	0005883a 	mov	r2,zero
   1fa68:	00002d06 	br	1fb20 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   1fa6c:	e0bffe17 	ldw	r2,-8(fp)
   1fa70:	10800117 	ldw	r2,4(r2)
   1fa74:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   1fa78:	e0bffb17 	ldw	r2,-20(fp)
   1fa7c:	10c0058b 	ldhu	r3,22(r2)
   1fa80:	e0bffb17 	ldw	r2,-20(fp)
   1fa84:	1080050b 	ldhu	r2,20(r2)
   1fa88:	18ffffcc 	andi	r3,r3,65535
   1fa8c:	10bfffcc 	andi	r2,r2,65535
   1fa90:	18800636 	bltu	r3,r2,1faac <OSQPostFront+0xe8>
   1fa94:	e0bff817 	ldw	r2,-32(fp)
   1fa98:	e0bffa15 	stw	r2,-24(fp)
   1fa9c:	e0bffa17 	ldw	r2,-24(fp)
   1faa0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   1faa4:	00800784 	movi	r2,30
   1faa8:	00001d06 	br	1fb20 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   1faac:	e0bffb17 	ldw	r2,-20(fp)
   1fab0:	10c00417 	ldw	r3,16(r2)
   1fab4:	e0bffb17 	ldw	r2,-20(fp)
   1fab8:	10800117 	ldw	r2,4(r2)
   1fabc:	1880041e 	bne	r3,r2,1fad0 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   1fac0:	e0bffb17 	ldw	r2,-20(fp)
   1fac4:	10c00217 	ldw	r3,8(r2)
   1fac8:	e0bffb17 	ldw	r2,-20(fp)
   1facc:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   1fad0:	e0bffb17 	ldw	r2,-20(fp)
   1fad4:	10800417 	ldw	r2,16(r2)
   1fad8:	10ffff04 	addi	r3,r2,-4
   1fadc:	e0bffb17 	ldw	r2,-20(fp)
   1fae0:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   1fae4:	e0bffb17 	ldw	r2,-20(fp)
   1fae8:	10800417 	ldw	r2,16(r2)
   1faec:	e0ffff17 	ldw	r3,-4(fp)
   1faf0:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   1faf4:	e0bffb17 	ldw	r2,-20(fp)
   1faf8:	1080058b 	ldhu	r2,22(r2)
   1fafc:	10800044 	addi	r2,r2,1
   1fb00:	1007883a 	mov	r3,r2
   1fb04:	e0bffb17 	ldw	r2,-20(fp)
   1fb08:	10c0058d 	sth	r3,22(r2)
   1fb0c:	e0bff817 	ldw	r2,-32(fp)
   1fb10:	e0bffc15 	stw	r2,-16(fp)
   1fb14:	e0bffc17 	ldw	r2,-16(fp)
   1fb18:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1fb1c:	0005883a 	mov	r2,zero
}
   1fb20:	e037883a 	mov	sp,fp
   1fb24:	dfc00117 	ldw	ra,4(sp)
   1fb28:	df000017 	ldw	fp,0(sp)
   1fb2c:	dec00204 	addi	sp,sp,8
   1fb30:	f800283a 	ret

0001fb34 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   1fb34:	defff504 	addi	sp,sp,-44
   1fb38:	dfc00a15 	stw	ra,40(sp)
   1fb3c:	df000915 	stw	fp,36(sp)
   1fb40:	df000904 	addi	fp,sp,36
   1fb44:	e13ffd15 	stw	r4,-12(fp)
   1fb48:	e17ffe15 	stw	r5,-8(fp)
   1fb4c:	3005883a 	mov	r2,r6
   1fb50:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1fb54:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1fb58:	e0bffd17 	ldw	r2,-12(fp)
   1fb5c:	1000021e 	bne	r2,zero,1fb68 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   1fb60:	00800104 	movi	r2,4
   1fb64:	00007106 	br	1fd2c <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   1fb68:	e0bffd17 	ldw	r2,-12(fp)
   1fb6c:	10800003 	ldbu	r2,0(r2)
   1fb70:	10803fcc 	andi	r2,r2,255
   1fb74:	108000a0 	cmpeqi	r2,r2,2
   1fb78:	1000021e 	bne	r2,zero,1fb84 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   1fb7c:	00800044 	movi	r2,1
   1fb80:	00006a06 	br	1fd2c <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1fb84:	0005303a 	rdctl	r2,status
   1fb88:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1fb8c:	e0fffc17 	ldw	r3,-16(fp)
   1fb90:	00bfff84 	movi	r2,-2
   1fb94:	1884703a 	and	r2,r3,r2
   1fb98:	1001703a 	wrctl	status,r2
  
  return context;
   1fb9c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1fba0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   1fba4:	e0bffd17 	ldw	r2,-12(fp)
   1fba8:	10800283 	ldbu	r2,10(r2)
   1fbac:	10803fcc 	andi	r2,r2,255
   1fbb0:	10001d26 	beq	r2,zero,1fc28 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   1fbb4:	e0bfff03 	ldbu	r2,-4(fp)
   1fbb8:	1080004c 	andi	r2,r2,1
   1fbbc:	10000b26 	beq	r2,zero,1fbec <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   1fbc0:	00000506 	br	1fbd8 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1fbc4:	000f883a 	mov	r7,zero
   1fbc8:	01800104 	movi	r6,4
   1fbcc:	e17ffe17 	ldw	r5,-8(fp)
   1fbd0:	e13ffd17 	ldw	r4,-12(fp)
   1fbd4:	001bd180 	call	1bd18 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   1fbd8:	e0bffd17 	ldw	r2,-12(fp)
   1fbdc:	10800283 	ldbu	r2,10(r2)
   1fbe0:	10803fcc 	andi	r2,r2,255
   1fbe4:	103ff71e 	bne	r2,zero,1fbc4 <__alt_data_end+0xfc01fbc4>
   1fbe8:	00000506 	br	1fc00 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1fbec:	000f883a 	mov	r7,zero
   1fbf0:	01800104 	movi	r6,4
   1fbf4:	e17ffe17 	ldw	r5,-8(fp)
   1fbf8:	e13ffd17 	ldw	r4,-12(fp)
   1fbfc:	001bd180 	call	1bd18 <OS_EventTaskRdy>
   1fc00:	e0bff717 	ldw	r2,-36(fp)
   1fc04:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1fc08:	e0bff817 	ldw	r2,-32(fp)
   1fc0c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   1fc10:	e0bfff03 	ldbu	r2,-4(fp)
   1fc14:	1080010c 	andi	r2,r2,4
   1fc18:	1000011e 	bne	r2,zero,1fc20 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   1fc1c:	001c7640 	call	1c764 <OS_Sched>
        }
        return (OS_ERR_NONE);
   1fc20:	0005883a 	mov	r2,zero
   1fc24:	00004106 	br	1fd2c <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   1fc28:	e0bffd17 	ldw	r2,-12(fp)
   1fc2c:	10800117 	ldw	r2,4(r2)
   1fc30:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   1fc34:	e0bffa17 	ldw	r2,-24(fp)
   1fc38:	10c0058b 	ldhu	r3,22(r2)
   1fc3c:	e0bffa17 	ldw	r2,-24(fp)
   1fc40:	1080050b 	ldhu	r2,20(r2)
   1fc44:	18ffffcc 	andi	r3,r3,65535
   1fc48:	10bfffcc 	andi	r2,r2,65535
   1fc4c:	18800636 	bltu	r3,r2,1fc68 <OSQPostOpt+0x134>
   1fc50:	e0bff717 	ldw	r2,-36(fp)
   1fc54:	e0bff915 	stw	r2,-28(fp)
   1fc58:	e0bff917 	ldw	r2,-28(fp)
   1fc5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   1fc60:	00800784 	movi	r2,30
   1fc64:	00003106 	br	1fd2c <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   1fc68:	e0bfff03 	ldbu	r2,-4(fp)
   1fc6c:	1080008c 	andi	r2,r2,2
   1fc70:	10001326 	beq	r2,zero,1fcc0 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   1fc74:	e0bffa17 	ldw	r2,-24(fp)
   1fc78:	10c00417 	ldw	r3,16(r2)
   1fc7c:	e0bffa17 	ldw	r2,-24(fp)
   1fc80:	10800117 	ldw	r2,4(r2)
   1fc84:	1880041e 	bne	r3,r2,1fc98 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   1fc88:	e0bffa17 	ldw	r2,-24(fp)
   1fc8c:	10c00217 	ldw	r3,8(r2)
   1fc90:	e0bffa17 	ldw	r2,-24(fp)
   1fc94:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   1fc98:	e0bffa17 	ldw	r2,-24(fp)
   1fc9c:	10800417 	ldw	r2,16(r2)
   1fca0:	10ffff04 	addi	r3,r2,-4
   1fca4:	e0bffa17 	ldw	r2,-24(fp)
   1fca8:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   1fcac:	e0bffa17 	ldw	r2,-24(fp)
   1fcb0:	10800417 	ldw	r2,16(r2)
   1fcb4:	e0fffe17 	ldw	r3,-8(fp)
   1fcb8:	10c00015 	stw	r3,0(r2)
   1fcbc:	00001006 	br	1fd00 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   1fcc0:	e0bffa17 	ldw	r2,-24(fp)
   1fcc4:	10800317 	ldw	r2,12(r2)
   1fcc8:	11000104 	addi	r4,r2,4
   1fccc:	e0fffa17 	ldw	r3,-24(fp)
   1fcd0:	19000315 	stw	r4,12(r3)
   1fcd4:	e0fffe17 	ldw	r3,-8(fp)
   1fcd8:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   1fcdc:	e0bffa17 	ldw	r2,-24(fp)
   1fce0:	10c00317 	ldw	r3,12(r2)
   1fce4:	e0bffa17 	ldw	r2,-24(fp)
   1fce8:	10800217 	ldw	r2,8(r2)
   1fcec:	1880041e 	bne	r3,r2,1fd00 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   1fcf0:	e0bffa17 	ldw	r2,-24(fp)
   1fcf4:	10c00117 	ldw	r3,4(r2)
   1fcf8:	e0bffa17 	ldw	r2,-24(fp)
   1fcfc:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   1fd00:	e0bffa17 	ldw	r2,-24(fp)
   1fd04:	1080058b 	ldhu	r2,22(r2)
   1fd08:	10800044 	addi	r2,r2,1
   1fd0c:	1007883a 	mov	r3,r2
   1fd10:	e0bffa17 	ldw	r2,-24(fp)
   1fd14:	10c0058d 	sth	r3,22(r2)
   1fd18:	e0bff717 	ldw	r2,-36(fp)
   1fd1c:	e0bffb15 	stw	r2,-20(fp)
   1fd20:	e0bffb17 	ldw	r2,-20(fp)
   1fd24:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1fd28:	0005883a 	mov	r2,zero
}
   1fd2c:	e037883a 	mov	sp,fp
   1fd30:	dfc00117 	ldw	ra,4(sp)
   1fd34:	df000017 	ldw	fp,0(sp)
   1fd38:	dec00204 	addi	sp,sp,8
   1fd3c:	f800283a 	ret

0001fd40 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   1fd40:	defff604 	addi	sp,sp,-40
   1fd44:	df000915 	stw	fp,36(sp)
   1fd48:	df000904 	addi	fp,sp,36
   1fd4c:	e13ffe15 	stw	r4,-8(fp)
   1fd50:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1fd54:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   1fd58:	e0bffe17 	ldw	r2,-8(fp)
   1fd5c:	1000021e 	bne	r2,zero,1fd68 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   1fd60:	00800104 	movi	r2,4
   1fd64:	00004906 	br	1fe8c <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   1fd68:	e0bfff17 	ldw	r2,-4(fp)
   1fd6c:	1000021e 	bne	r2,zero,1fd78 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   1fd70:	00800244 	movi	r2,9
   1fd74:	00004506 	br	1fe8c <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   1fd78:	e0bffe17 	ldw	r2,-8(fp)
   1fd7c:	10800003 	ldbu	r2,0(r2)
   1fd80:	10803fcc 	andi	r2,r2,255
   1fd84:	108000a0 	cmpeqi	r2,r2,2
   1fd88:	1000021e 	bne	r2,zero,1fd94 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   1fd8c:	00800044 	movi	r2,1
   1fd90:	00003e06 	br	1fe8c <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1fd94:	0005303a 	rdctl	r2,status
   1fd98:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1fd9c:	e0fffd17 	ldw	r3,-12(fp)
   1fda0:	00bfff84 	movi	r2,-2
   1fda4:	1884703a 	and	r2,r3,r2
   1fda8:	1001703a 	wrctl	status,r2
  
  return context;
   1fdac:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1fdb0:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   1fdb4:	e0bffe17 	ldw	r2,-8(fp)
   1fdb8:	10c00283 	ldbu	r3,10(r2)
   1fdbc:	e0bfff17 	ldw	r2,-4(fp)
   1fdc0:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   1fdc4:	e0bffe17 	ldw	r2,-8(fp)
   1fdc8:	108002c4 	addi	r2,r2,11
   1fdcc:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   1fdd0:	e0bfff17 	ldw	r2,-4(fp)
   1fdd4:	10800204 	addi	r2,r2,8
   1fdd8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1fddc:	e03ff705 	stb	zero,-36(fp)
   1fde0:	00000b06 	br	1fe10 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   1fde4:	e0bff917 	ldw	r2,-28(fp)
   1fde8:	10c00044 	addi	r3,r2,1
   1fdec:	e0fff915 	stw	r3,-28(fp)
   1fdf0:	e0fff817 	ldw	r3,-32(fp)
   1fdf4:	19000044 	addi	r4,r3,1
   1fdf8:	e13ff815 	stw	r4,-32(fp)
   1fdfc:	18c00003 	ldbu	r3,0(r3)
   1fe00:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1fe04:	e0bff703 	ldbu	r2,-36(fp)
   1fe08:	10800044 	addi	r2,r2,1
   1fe0c:	e0bff705 	stb	r2,-36(fp)
   1fe10:	e0bff703 	ldbu	r2,-36(fp)
   1fe14:	108000f0 	cmpltui	r2,r2,3
   1fe18:	103ff21e 	bne	r2,zero,1fde4 <__alt_data_end+0xfc01fde4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   1fe1c:	e0bffe17 	ldw	r2,-8(fp)
   1fe20:	10800117 	ldw	r2,4(r2)
   1fe24:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   1fe28:	e0bffc17 	ldw	r2,-16(fp)
   1fe2c:	1080058b 	ldhu	r2,22(r2)
   1fe30:	10bfffcc 	andi	r2,r2,65535
   1fe34:	10000626 	beq	r2,zero,1fe50 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   1fe38:	e0bffc17 	ldw	r2,-16(fp)
   1fe3c:	10800417 	ldw	r2,16(r2)
   1fe40:	10c00017 	ldw	r3,0(r2)
   1fe44:	e0bfff17 	ldw	r2,-4(fp)
   1fe48:	10c00015 	stw	r3,0(r2)
   1fe4c:	00000206 	br	1fe58 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   1fe50:	e0bfff17 	ldw	r2,-4(fp)
   1fe54:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   1fe58:	e0bffc17 	ldw	r2,-16(fp)
   1fe5c:	10c0058b 	ldhu	r3,22(r2)
   1fe60:	e0bfff17 	ldw	r2,-4(fp)
   1fe64:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   1fe68:	e0bffc17 	ldw	r2,-16(fp)
   1fe6c:	10c0050b 	ldhu	r3,20(r2)
   1fe70:	e0bfff17 	ldw	r2,-4(fp)
   1fe74:	10c0018d 	sth	r3,6(r2)
   1fe78:	e0bffa17 	ldw	r2,-24(fp)
   1fe7c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1fe80:	e0bffb17 	ldw	r2,-20(fp)
   1fe84:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1fe88:	0005883a 	mov	r2,zero
}
   1fe8c:	e037883a 	mov	sp,fp
   1fe90:	df000017 	ldw	fp,0(sp)
   1fe94:	dec00104 	addi	sp,sp,4
   1fe98:	f800283a 	ret

0001fe9c <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   1fe9c:	defffb04 	addi	sp,sp,-20
   1fea0:	dfc00415 	stw	ra,16(sp)
   1fea4:	df000315 	stw	fp,12(sp)
   1fea8:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   1feac:	01407804 	movi	r5,480
   1feb0:	010000f4 	movhi	r4,3
   1feb4:	21333904 	addi	r4,r4,-13084
   1feb8:	001c6a80 	call	1c6a8 <OS_MemClr>
    pq1 = &OSQTbl[0];
   1febc:	008000f4 	movhi	r2,3
   1fec0:	10b33904 	addi	r2,r2,-13084
   1fec4:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   1fec8:	008000f4 	movhi	r2,3
   1fecc:	10b33f04 	addi	r2,r2,-13060
   1fed0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   1fed4:	e03ffd0d 	sth	zero,-12(fp)
   1fed8:	00000c06 	br	1ff0c <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   1fedc:	e0bffe17 	ldw	r2,-8(fp)
   1fee0:	e0ffff17 	ldw	r3,-4(fp)
   1fee4:	10c00015 	stw	r3,0(r2)
        pq1++;
   1fee8:	e0bffe17 	ldw	r2,-8(fp)
   1feec:	10800604 	addi	r2,r2,24
   1fef0:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   1fef4:	e0bfff17 	ldw	r2,-4(fp)
   1fef8:	10800604 	addi	r2,r2,24
   1fefc:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   1ff00:	e0bffd0b 	ldhu	r2,-12(fp)
   1ff04:	10800044 	addi	r2,r2,1
   1ff08:	e0bffd0d 	sth	r2,-12(fp)
   1ff0c:	e0bffd0b 	ldhu	r2,-12(fp)
   1ff10:	108004f0 	cmpltui	r2,r2,19
   1ff14:	103ff11e 	bne	r2,zero,1fedc <__alt_data_end+0xfc01fedc>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   1ff18:	e0bffe17 	ldw	r2,-8(fp)
   1ff1c:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   1ff20:	008000f4 	movhi	r2,3
   1ff24:	10b33904 	addi	r2,r2,-13084
   1ff28:	d0a72a15 	stw	r2,-25432(gp)
#endif
}
   1ff2c:	0001883a 	nop
   1ff30:	e037883a 	mov	sp,fp
   1ff34:	dfc00117 	ldw	ra,4(sp)
   1ff38:	df000017 	ldw	fp,0(sp)
   1ff3c:	dec00204 	addi	sp,sp,8
   1ff40:	f800283a 	ret

0001ff44 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   1ff44:	defffa04 	addi	sp,sp,-24
   1ff48:	df000515 	stw	fp,20(sp)
   1ff4c:	df000504 	addi	fp,sp,20
   1ff50:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1ff54:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1ff58:	e0bfff17 	ldw	r2,-4(fp)
   1ff5c:	1000021e 	bne	r2,zero,1ff68 <OSSemAccept+0x24>
        return (0);
   1ff60:	0005883a 	mov	r2,zero
   1ff64:	00001f06 	br	1ffe4 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1ff68:	e0bfff17 	ldw	r2,-4(fp)
   1ff6c:	10800003 	ldbu	r2,0(r2)
   1ff70:	10803fcc 	andi	r2,r2,255
   1ff74:	108000e0 	cmpeqi	r2,r2,3
   1ff78:	1000021e 	bne	r2,zero,1ff84 <OSSemAccept+0x40>
        return (0);
   1ff7c:	0005883a 	mov	r2,zero
   1ff80:	00001806 	br	1ffe4 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ff84:	0005303a 	rdctl	r2,status
   1ff88:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ff8c:	e0fffe17 	ldw	r3,-8(fp)
   1ff90:	00bfff84 	movi	r2,-2
   1ff94:	1884703a 	and	r2,r3,r2
   1ff98:	1001703a 	wrctl	status,r2
  
  return context;
   1ff9c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   1ffa0:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   1ffa4:	e0bfff17 	ldw	r2,-4(fp)
   1ffa8:	1080020b 	ldhu	r2,8(r2)
   1ffac:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   1ffb0:	e0bffd0b 	ldhu	r2,-12(fp)
   1ffb4:	10000626 	beq	r2,zero,1ffd0 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   1ffb8:	e0bfff17 	ldw	r2,-4(fp)
   1ffbc:	1080020b 	ldhu	r2,8(r2)
   1ffc0:	10bfffc4 	addi	r2,r2,-1
   1ffc4:	1007883a 	mov	r3,r2
   1ffc8:	e0bfff17 	ldw	r2,-4(fp)
   1ffcc:	10c0020d 	sth	r3,8(r2)
   1ffd0:	e0bffb17 	ldw	r2,-20(fp)
   1ffd4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ffd8:	e0bffc17 	ldw	r2,-16(fp)
   1ffdc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   1ffe0:	e0bffd0b 	ldhu	r2,-12(fp)
}
   1ffe4:	e037883a 	mov	sp,fp
   1ffe8:	df000017 	ldw	fp,0(sp)
   1ffec:	dec00104 	addi	sp,sp,4
   1fff0:	f800283a 	ret

0001fff4 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   1fff4:	defff904 	addi	sp,sp,-28
   1fff8:	dfc00615 	stw	ra,24(sp)
   1fffc:	df000515 	stw	fp,20(sp)
   20000:	df000504 	addi	fp,sp,20
   20004:	2005883a 	mov	r2,r4
   20008:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   2000c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   20010:	d0a72d03 	ldbu	r2,-25420(gp)
   20014:	10803fcc 	andi	r2,r2,255
   20018:	10000226 	beq	r2,zero,20024 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   2001c:	0005883a 	mov	r2,zero
   20020:	00002506 	br	200b8 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20024:	0005303a 	rdctl	r2,status
   20028:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2002c:	e0fffe17 	ldw	r3,-8(fp)
   20030:	00bfff84 	movi	r2,-2
   20034:	1884703a 	and	r2,r3,r2
   20038:	1001703a 	wrctl	status,r2
  
  return context;
   2003c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   20040:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   20044:	d0a72c17 	ldw	r2,-25424(gp)
   20048:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   2004c:	d0a72c17 	ldw	r2,-25424(gp)
   20050:	10000326 	beq	r2,zero,20060 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   20054:	d0a72c17 	ldw	r2,-25424(gp)
   20058:	10800117 	ldw	r2,4(r2)
   2005c:	d0a72c15 	stw	r2,-25424(gp)
   20060:	e0bffb17 	ldw	r2,-20(fp)
   20064:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20068:	e0bffc17 	ldw	r2,-16(fp)
   2006c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   20070:	e0bffd17 	ldw	r2,-12(fp)
   20074:	10000f26 	beq	r2,zero,200b4 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   20078:	e0bffd17 	ldw	r2,-12(fp)
   2007c:	00c000c4 	movi	r3,3
   20080:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   20084:	e0bffd17 	ldw	r2,-12(fp)
   20088:	e0ffff0b 	ldhu	r3,-4(fp)
   2008c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   20090:	e0bffd17 	ldw	r2,-12(fp)
   20094:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   20098:	e0bffd17 	ldw	r2,-12(fp)
   2009c:	00c00fc4 	movi	r3,63
   200a0:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   200a4:	e0bffd17 	ldw	r2,-12(fp)
   200a8:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   200ac:	e13ffd17 	ldw	r4,-12(fp)
   200b0:	001c2c80 	call	1c2c8 <OS_EventWaitListInit>
    }
    return (pevent);
   200b4:	e0bffd17 	ldw	r2,-12(fp)
}
   200b8:	e037883a 	mov	sp,fp
   200bc:	dfc00117 	ldw	ra,4(sp)
   200c0:	df000017 	ldw	fp,0(sp)
   200c4:	dec00204 	addi	sp,sp,8
   200c8:	f800283a 	ret

000200cc <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   200cc:	defff304 	addi	sp,sp,-52
   200d0:	dfc00c15 	stw	ra,48(sp)
   200d4:	df000b15 	stw	fp,44(sp)
   200d8:	df000b04 	addi	fp,sp,44
   200dc:	e13ffd15 	stw	r4,-12(fp)
   200e0:	2805883a 	mov	r2,r5
   200e4:	e1bfff15 	stw	r6,-4(fp)
   200e8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   200ec:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   200f0:	e0bfff17 	ldw	r2,-4(fp)
   200f4:	1000021e 	bne	r2,zero,20100 <OSSemDel+0x34>
        return (pevent);
   200f8:	e0bffd17 	ldw	r2,-12(fp)
   200fc:	00007e06 	br	202f8 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   20100:	e0bffd17 	ldw	r2,-12(fp)
   20104:	1000051e 	bne	r2,zero,2011c <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   20108:	e0bfff17 	ldw	r2,-4(fp)
   2010c:	00c00104 	movi	r3,4
   20110:	10c00005 	stb	r3,0(r2)
        return (pevent);
   20114:	e0bffd17 	ldw	r2,-12(fp)
   20118:	00007706 	br	202f8 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   2011c:	e0bffd17 	ldw	r2,-12(fp)
   20120:	10800003 	ldbu	r2,0(r2)
   20124:	10803fcc 	andi	r2,r2,255
   20128:	108000e0 	cmpeqi	r2,r2,3
   2012c:	1000051e 	bne	r2,zero,20144 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   20130:	e0bfff17 	ldw	r2,-4(fp)
   20134:	00c00044 	movi	r3,1
   20138:	10c00005 	stb	r3,0(r2)
        return (pevent);
   2013c:	e0bffd17 	ldw	r2,-12(fp)
   20140:	00006d06 	br	202f8 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   20144:	d0a72d03 	ldbu	r2,-25420(gp)
   20148:	10803fcc 	andi	r2,r2,255
   2014c:	10000526 	beq	r2,zero,20164 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   20150:	e0bfff17 	ldw	r2,-4(fp)
   20154:	00c003c4 	movi	r3,15
   20158:	10c00005 	stb	r3,0(r2)
        return (pevent);
   2015c:	e0bffd17 	ldw	r2,-12(fp)
   20160:	00006506 	br	202f8 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20164:	0005303a 	rdctl	r2,status
   20168:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2016c:	e0fffc17 	ldw	r3,-16(fp)
   20170:	00bfff84 	movi	r2,-2
   20174:	1884703a 	and	r2,r3,r2
   20178:	1001703a 	wrctl	status,r2
  
  return context;
   2017c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   20180:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   20184:	e0bffd17 	ldw	r2,-12(fp)
   20188:	10800283 	ldbu	r2,10(r2)
   2018c:	10803fcc 	andi	r2,r2,255
   20190:	10000326 	beq	r2,zero,201a0 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   20194:	00800044 	movi	r2,1
   20198:	e0bff505 	stb	r2,-44(fp)
   2019c:	00000106 	br	201a4 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   201a0:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   201a4:	e0bffe03 	ldbu	r2,-8(fp)
   201a8:	10000326 	beq	r2,zero,201b8 <OSSemDel+0xec>
   201ac:	10800060 	cmpeqi	r2,r2,1
   201b0:	1000281e 	bne	r2,zero,20254 <OSSemDel+0x188>
   201b4:	00004506 	br	202cc <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   201b8:	e0bff503 	ldbu	r2,-44(fp)
   201bc:	1000161e 	bne	r2,zero,20218 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   201c0:	e0bffd17 	ldw	r2,-12(fp)
   201c4:	00c00fc4 	movi	r3,63
   201c8:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   201cc:	e0bffd17 	ldw	r2,-12(fp)
   201d0:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   201d4:	e0bffd17 	ldw	r2,-12(fp)
   201d8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   201dc:	d0e72c17 	ldw	r3,-25424(gp)
   201e0:	e0bffd17 	ldw	r2,-12(fp)
   201e4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   201e8:	e0bffd17 	ldw	r2,-12(fp)
   201ec:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   201f0:	e0bffd17 	ldw	r2,-12(fp)
   201f4:	d0a72c15 	stw	r2,-25424(gp)
   201f8:	e0bff717 	ldw	r2,-36(fp)
   201fc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20200:	e0bff817 	ldw	r2,-32(fp)
   20204:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   20208:	e0bfff17 	ldw	r2,-4(fp)
   2020c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   20210:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   20214:	00003706 	br	202f4 <OSSemDel+0x228>
   20218:	e0bff717 	ldw	r2,-36(fp)
   2021c:	e0bff915 	stw	r2,-28(fp)
   20220:	e0bff917 	ldw	r2,-28(fp)
   20224:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   20228:	e0bfff17 	ldw	r2,-4(fp)
   2022c:	00c01244 	movi	r3,73
   20230:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   20234:	e0bffd17 	ldw	r2,-12(fp)
   20238:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   2023c:	00002d06 	br	202f4 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   20240:	000f883a 	mov	r7,zero
   20244:	01800044 	movi	r6,1
   20248:	000b883a 	mov	r5,zero
   2024c:	e13ffd17 	ldw	r4,-12(fp)
   20250:	001bd180 	call	1bd18 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   20254:	e0bffd17 	ldw	r2,-12(fp)
   20258:	10800283 	ldbu	r2,10(r2)
   2025c:	10803fcc 	andi	r2,r2,255
   20260:	103ff71e 	bne	r2,zero,20240 <__alt_data_end+0xfc020240>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   20264:	e0bffd17 	ldw	r2,-12(fp)
   20268:	00c00fc4 	movi	r3,63
   2026c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   20270:	e0bffd17 	ldw	r2,-12(fp)
   20274:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   20278:	e0bffd17 	ldw	r2,-12(fp)
   2027c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   20280:	d0e72c17 	ldw	r3,-25424(gp)
   20284:	e0bffd17 	ldw	r2,-12(fp)
   20288:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   2028c:	e0bffd17 	ldw	r2,-12(fp)
   20290:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   20294:	e0bffd17 	ldw	r2,-12(fp)
   20298:	d0a72c15 	stw	r2,-25424(gp)
   2029c:	e0bff717 	ldw	r2,-36(fp)
   202a0:	e0bffa15 	stw	r2,-24(fp)
   202a4:	e0bffa17 	ldw	r2,-24(fp)
   202a8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   202ac:	e0bff503 	ldbu	r2,-44(fp)
   202b0:	10800058 	cmpnei	r2,r2,1
   202b4:	1000011e 	bne	r2,zero,202bc <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   202b8:	001c7640 	call	1c764 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   202bc:	e0bfff17 	ldw	r2,-4(fp)
   202c0:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   202c4:	e03ff615 	stw	zero,-40(fp)
             break;
   202c8:	00000a06 	br	202f4 <OSSemDel+0x228>
   202cc:	e0bff717 	ldw	r2,-36(fp)
   202d0:	e0bffb15 	stw	r2,-20(fp)
   202d4:	e0bffb17 	ldw	r2,-20(fp)
   202d8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   202dc:	e0bfff17 	ldw	r2,-4(fp)
   202e0:	00c001c4 	movi	r3,7
   202e4:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   202e8:	e0bffd17 	ldw	r2,-12(fp)
   202ec:	e0bff615 	stw	r2,-40(fp)
             break;
   202f0:	0001883a 	nop
    }
    return (pevent_return);
   202f4:	e0bff617 	ldw	r2,-40(fp)
}
   202f8:	e037883a 	mov	sp,fp
   202fc:	dfc00117 	ldw	ra,4(sp)
   20300:	df000017 	ldw	fp,0(sp)
   20304:	dec00204 	addi	sp,sp,8
   20308:	f800283a 	ret

0002030c <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   2030c:	defff504 	addi	sp,sp,-44
   20310:	dfc00a15 	stw	ra,40(sp)
   20314:	df000915 	stw	fp,36(sp)
   20318:	df000904 	addi	fp,sp,36
   2031c:	e13ffd15 	stw	r4,-12(fp)
   20320:	2805883a 	mov	r2,r5
   20324:	e1bfff15 	stw	r6,-4(fp)
   20328:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   2032c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   20330:	e0bfff17 	ldw	r2,-4(fp)
   20334:	10007226 	beq	r2,zero,20500 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   20338:	e0bffd17 	ldw	r2,-12(fp)
   2033c:	1000041e 	bne	r2,zero,20350 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   20340:	e0bfff17 	ldw	r2,-4(fp)
   20344:	00c00104 	movi	r3,4
   20348:	10c00005 	stb	r3,0(r2)
        return;
   2034c:	00006d06 	br	20504 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   20350:	e0bffd17 	ldw	r2,-12(fp)
   20354:	10800003 	ldbu	r2,0(r2)
   20358:	10803fcc 	andi	r2,r2,255
   2035c:	108000e0 	cmpeqi	r2,r2,3
   20360:	1000041e 	bne	r2,zero,20374 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   20364:	e0bfff17 	ldw	r2,-4(fp)
   20368:	00c00044 	movi	r3,1
   2036c:	10c00005 	stb	r3,0(r2)
        return;
   20370:	00006406 	br	20504 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   20374:	d0a72d03 	ldbu	r2,-25420(gp)
   20378:	10803fcc 	andi	r2,r2,255
   2037c:	10000426 	beq	r2,zero,20390 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   20380:	e0bfff17 	ldw	r2,-4(fp)
   20384:	00c00084 	movi	r3,2
   20388:	10c00005 	stb	r3,0(r2)
        return;
   2038c:	00005d06 	br	20504 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   20390:	d0a71f03 	ldbu	r2,-25476(gp)
   20394:	10803fcc 	andi	r2,r2,255
   20398:	10000426 	beq	r2,zero,203ac <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   2039c:	e0bfff17 	ldw	r2,-4(fp)
   203a0:	00c00344 	movi	r3,13
   203a4:	10c00005 	stb	r3,0(r2)
        return;
   203a8:	00005606 	br	20504 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   203ac:	0005303a 	rdctl	r2,status
   203b0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   203b4:	e0fffc17 	ldw	r3,-16(fp)
   203b8:	00bfff84 	movi	r2,-2
   203bc:	1884703a 	and	r2,r3,r2
   203c0:	1001703a 	wrctl	status,r2
  
  return context;
   203c4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   203c8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   203cc:	e0bffd17 	ldw	r2,-12(fp)
   203d0:	1080020b 	ldhu	r2,8(r2)
   203d4:	10bfffcc 	andi	r2,r2,65535
   203d8:	10000d26 	beq	r2,zero,20410 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   203dc:	e0bffd17 	ldw	r2,-12(fp)
   203e0:	1080020b 	ldhu	r2,8(r2)
   203e4:	10bfffc4 	addi	r2,r2,-1
   203e8:	1007883a 	mov	r3,r2
   203ec:	e0bffd17 	ldw	r2,-12(fp)
   203f0:	10c0020d 	sth	r3,8(r2)
   203f4:	e0bff717 	ldw	r2,-36(fp)
   203f8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   203fc:	e0bff817 	ldw	r2,-32(fp)
   20400:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   20404:	e0bfff17 	ldw	r2,-4(fp)
   20408:	10000005 	stb	zero,0(r2)
        return;
   2040c:	00003d06 	br	20504 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   20410:	d0a72e17 	ldw	r2,-25416(gp)
   20414:	d0e72e17 	ldw	r3,-25416(gp)
   20418:	18c00c03 	ldbu	r3,48(r3)
   2041c:	18c00054 	ori	r3,r3,1
   20420:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   20424:	d0a72e17 	ldw	r2,-25416(gp)
   20428:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   2042c:	d0a72e17 	ldw	r2,-25416(gp)
   20430:	e0fffe0b 	ldhu	r3,-8(fp)
   20434:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   20438:	e13ffd17 	ldw	r4,-12(fp)
   2043c:	001beb00 	call	1beb0 <OS_EventTaskWait>
   20440:	e0bff717 	ldw	r2,-36(fp)
   20444:	e0bffb15 	stw	r2,-20(fp)
   20448:	e0bffb17 	ldw	r2,-20(fp)
   2044c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   20450:	001c7640 	call	1c764 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20454:	0005303a 	rdctl	r2,status
   20458:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2045c:	e0fff917 	ldw	r3,-28(fp)
   20460:	00bfff84 	movi	r2,-2
   20464:	1884703a 	and	r2,r3,r2
   20468:	1001703a 	wrctl	status,r2
  
  return context;
   2046c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   20470:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   20474:	d0a72e17 	ldw	r2,-25416(gp)
   20478:	10800c43 	ldbu	r2,49(r2)
   2047c:	10803fcc 	andi	r2,r2,255
   20480:	10000326 	beq	r2,zero,20490 <OSSemPend+0x184>
   20484:	108000a0 	cmpeqi	r2,r2,2
   20488:	1000041e 	bne	r2,zero,2049c <OSSemPend+0x190>
   2048c:	00000706 	br	204ac <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   20490:	e0bfff17 	ldw	r2,-4(fp)
   20494:	10000005 	stb	zero,0(r2)
             break;
   20498:	00000c06 	br	204cc <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   2049c:	e0bfff17 	ldw	r2,-4(fp)
   204a0:	00c00384 	movi	r3,14
   204a4:	10c00005 	stb	r3,0(r2)
             break;
   204a8:	00000806 	br	204cc <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   204ac:	d0a72e17 	ldw	r2,-25416(gp)
   204b0:	e17ffd17 	ldw	r5,-12(fp)
   204b4:	1009883a 	mov	r4,r2
   204b8:	001c1100 	call	1c110 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   204bc:	e0bfff17 	ldw	r2,-4(fp)
   204c0:	00c00284 	movi	r3,10
   204c4:	10c00005 	stb	r3,0(r2)
             break;
   204c8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   204cc:	d0a72e17 	ldw	r2,-25416(gp)
   204d0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   204d4:	d0a72e17 	ldw	r2,-25416(gp)
   204d8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   204dc:	d0a72e17 	ldw	r2,-25416(gp)
   204e0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   204e4:	d0a72e17 	ldw	r2,-25416(gp)
   204e8:	10000815 	stw	zero,32(r2)
   204ec:	e0bff717 	ldw	r2,-36(fp)
   204f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   204f4:	e0bffa17 	ldw	r2,-24(fp)
   204f8:	1001703a 	wrctl	status,r2
   204fc:	00000106 	br	20504 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   20500:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   20504:	e037883a 	mov	sp,fp
   20508:	dfc00117 	ldw	ra,4(sp)
   2050c:	df000017 	ldw	fp,0(sp)
   20510:	dec00204 	addi	sp,sp,8
   20514:	f800283a 	ret

00020518 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   20518:	defff604 	addi	sp,sp,-40
   2051c:	dfc00915 	stw	ra,36(sp)
   20520:	df000815 	stw	fp,32(sp)
   20524:	df000804 	addi	fp,sp,32
   20528:	e13ffd15 	stw	r4,-12(fp)
   2052c:	2805883a 	mov	r2,r5
   20530:	e1bfff15 	stw	r6,-4(fp)
   20534:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   20538:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   2053c:	e0bfff17 	ldw	r2,-4(fp)
   20540:	1000021e 	bne	r2,zero,2054c <OSSemPendAbort+0x34>
        return (0);
   20544:	0005883a 	mov	r2,zero
   20548:	00004906 	br	20670 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   2054c:	e0bffd17 	ldw	r2,-12(fp)
   20550:	1000051e 	bne	r2,zero,20568 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   20554:	e0bfff17 	ldw	r2,-4(fp)
   20558:	00c00104 	movi	r3,4
   2055c:	10c00005 	stb	r3,0(r2)
        return (0);
   20560:	0005883a 	mov	r2,zero
   20564:	00004206 	br	20670 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   20568:	e0bffd17 	ldw	r2,-12(fp)
   2056c:	10800003 	ldbu	r2,0(r2)
   20570:	10803fcc 	andi	r2,r2,255
   20574:	108000e0 	cmpeqi	r2,r2,3
   20578:	1000051e 	bne	r2,zero,20590 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   2057c:	e0bfff17 	ldw	r2,-4(fp)
   20580:	00c00044 	movi	r3,1
   20584:	10c00005 	stb	r3,0(r2)
        return (0);
   20588:	0005883a 	mov	r2,zero
   2058c:	00003806 	br	20670 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20590:	0005303a 	rdctl	r2,status
   20594:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20598:	e0fffc17 	ldw	r3,-16(fp)
   2059c:	00bfff84 	movi	r2,-2
   205a0:	1884703a 	and	r2,r3,r2
   205a4:	1001703a 	wrctl	status,r2
  
  return context;
   205a8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   205ac:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   205b0:	e0bffd17 	ldw	r2,-12(fp)
   205b4:	10800283 	ldbu	r2,10(r2)
   205b8:	10803fcc 	andi	r2,r2,255
   205bc:	10002526 	beq	r2,zero,20654 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   205c0:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   205c4:	e0bffe03 	ldbu	r2,-8(fp)
   205c8:	10800060 	cmpeqi	r2,r2,1
   205cc:	10000e26 	beq	r2,zero,20608 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   205d0:	00000806 	br	205f4 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   205d4:	01c00084 	movi	r7,2
   205d8:	01800044 	movi	r6,1
   205dc:	000b883a 	mov	r5,zero
   205e0:	e13ffd17 	ldw	r4,-12(fp)
   205e4:	001bd180 	call	1bd18 <OS_EventTaskRdy>
                     nbr_tasks++;
   205e8:	e0bff803 	ldbu	r2,-32(fp)
   205ec:	10800044 	addi	r2,r2,1
   205f0:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   205f4:	e0bffd17 	ldw	r2,-12(fp)
   205f8:	10800283 	ldbu	r2,10(r2)
   205fc:	10803fcc 	andi	r2,r2,255
   20600:	103ff41e 	bne	r2,zero,205d4 <__alt_data_end+0xfc0205d4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   20604:	00000906 	br	2062c <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   20608:	01c00084 	movi	r7,2
   2060c:	01800044 	movi	r6,1
   20610:	000b883a 	mov	r5,zero
   20614:	e13ffd17 	ldw	r4,-12(fp)
   20618:	001bd180 	call	1bd18 <OS_EventTaskRdy>
                 nbr_tasks++;
   2061c:	e0bff803 	ldbu	r2,-32(fp)
   20620:	10800044 	addi	r2,r2,1
   20624:	e0bff805 	stb	r2,-32(fp)
                 break;
   20628:	0001883a 	nop
   2062c:	e0bff917 	ldw	r2,-28(fp)
   20630:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20634:	e0bffa17 	ldw	r2,-24(fp)
   20638:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   2063c:	001c7640 	call	1c764 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   20640:	e0bfff17 	ldw	r2,-4(fp)
   20644:	00c00384 	movi	r3,14
   20648:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   2064c:	e0bff803 	ldbu	r2,-32(fp)
   20650:	00000706 	br	20670 <OSSemPendAbort+0x158>
   20654:	e0bff917 	ldw	r2,-28(fp)
   20658:	e0bffb15 	stw	r2,-20(fp)
   2065c:	e0bffb17 	ldw	r2,-20(fp)
   20660:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   20664:	e0bfff17 	ldw	r2,-4(fp)
   20668:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   2066c:	0005883a 	mov	r2,zero
}
   20670:	e037883a 	mov	sp,fp
   20674:	dfc00117 	ldw	ra,4(sp)
   20678:	df000017 	ldw	fp,0(sp)
   2067c:	dec00204 	addi	sp,sp,8
   20680:	f800283a 	ret

00020684 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   20684:	defff804 	addi	sp,sp,-32
   20688:	dfc00715 	stw	ra,28(sp)
   2068c:	df000615 	stw	fp,24(sp)
   20690:	df000604 	addi	fp,sp,24
   20694:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   20698:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   2069c:	e0bfff17 	ldw	r2,-4(fp)
   206a0:	1000021e 	bne	r2,zero,206ac <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   206a4:	00800104 	movi	r2,4
   206a8:	00003506 	br	20780 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   206ac:	e0bfff17 	ldw	r2,-4(fp)
   206b0:	10800003 	ldbu	r2,0(r2)
   206b4:	10803fcc 	andi	r2,r2,255
   206b8:	108000e0 	cmpeqi	r2,r2,3
   206bc:	1000021e 	bne	r2,zero,206c8 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   206c0:	00800044 	movi	r2,1
   206c4:	00002e06 	br	20780 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   206c8:	0005303a 	rdctl	r2,status
   206cc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   206d0:	e0fffe17 	ldw	r3,-8(fp)
   206d4:	00bfff84 	movi	r2,-2
   206d8:	1884703a 	and	r2,r3,r2
   206dc:	1001703a 	wrctl	status,r2
  
  return context;
   206e0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   206e4:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   206e8:	e0bfff17 	ldw	r2,-4(fp)
   206ec:	10800283 	ldbu	r2,10(r2)
   206f0:	10803fcc 	andi	r2,r2,255
   206f4:	10000c26 	beq	r2,zero,20728 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   206f8:	000f883a 	mov	r7,zero
   206fc:	01800044 	movi	r6,1
   20700:	000b883a 	mov	r5,zero
   20704:	e13fff17 	ldw	r4,-4(fp)
   20708:	001bd180 	call	1bd18 <OS_EventTaskRdy>
   2070c:	e0bffa17 	ldw	r2,-24(fp)
   20710:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20714:	e0bffb17 	ldw	r2,-20(fp)
   20718:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   2071c:	001c7640 	call	1c764 <OS_Sched>
        return (OS_ERR_NONE);
   20720:	0005883a 	mov	r2,zero
   20724:	00001606 	br	20780 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   20728:	e0bfff17 	ldw	r2,-4(fp)
   2072c:	1080020b 	ldhu	r2,8(r2)
   20730:	10ffffcc 	andi	r3,r2,65535
   20734:	00bfffd4 	movui	r2,65535
   20738:	18800c26 	beq	r3,r2,2076c <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   2073c:	e0bfff17 	ldw	r2,-4(fp)
   20740:	1080020b 	ldhu	r2,8(r2)
   20744:	10800044 	addi	r2,r2,1
   20748:	1007883a 	mov	r3,r2
   2074c:	e0bfff17 	ldw	r2,-4(fp)
   20750:	10c0020d 	sth	r3,8(r2)
   20754:	e0bffa17 	ldw	r2,-24(fp)
   20758:	e0bffc15 	stw	r2,-16(fp)
   2075c:	e0bffc17 	ldw	r2,-16(fp)
   20760:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   20764:	0005883a 	mov	r2,zero
   20768:	00000506 	br	20780 <OSSemPost+0xfc>
   2076c:	e0bffa17 	ldw	r2,-24(fp)
   20770:	e0bffd15 	stw	r2,-12(fp)
   20774:	e0bffd17 	ldw	r2,-12(fp)
   20778:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   2077c:	00800c84 	movi	r2,50
}
   20780:	e037883a 	mov	sp,fp
   20784:	dfc00117 	ldw	ra,4(sp)
   20788:	df000017 	ldw	fp,0(sp)
   2078c:	dec00204 	addi	sp,sp,8
   20790:	f800283a 	ret

00020794 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   20794:	defff704 	addi	sp,sp,-36
   20798:	df000815 	stw	fp,32(sp)
   2079c:	df000804 	addi	fp,sp,32
   207a0:	e13ffe15 	stw	r4,-8(fp)
   207a4:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   207a8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   207ac:	e0bffe17 	ldw	r2,-8(fp)
   207b0:	1000021e 	bne	r2,zero,207bc <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   207b4:	00800104 	movi	r2,4
   207b8:	00003606 	br	20894 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   207bc:	e0bfff17 	ldw	r2,-4(fp)
   207c0:	1000021e 	bne	r2,zero,207cc <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   207c4:	00800244 	movi	r2,9
   207c8:	00003206 	br	20894 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   207cc:	e0bffe17 	ldw	r2,-8(fp)
   207d0:	10800003 	ldbu	r2,0(r2)
   207d4:	10803fcc 	andi	r2,r2,255
   207d8:	108000e0 	cmpeqi	r2,r2,3
   207dc:	1000021e 	bne	r2,zero,207e8 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   207e0:	00800044 	movi	r2,1
   207e4:	00002b06 	br	20894 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   207e8:	0005303a 	rdctl	r2,status
   207ec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   207f0:	e0fffd17 	ldw	r3,-12(fp)
   207f4:	00bfff84 	movi	r2,-2
   207f8:	1884703a 	and	r2,r3,r2
   207fc:	1001703a 	wrctl	status,r2
  
  return context;
   20800:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   20804:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   20808:	e0bffe17 	ldw	r2,-8(fp)
   2080c:	10c00283 	ldbu	r3,10(r2)
   20810:	e0bfff17 	ldw	r2,-4(fp)
   20814:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   20818:	e0bffe17 	ldw	r2,-8(fp)
   2081c:	108002c4 	addi	r2,r2,11
   20820:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   20824:	e0bfff17 	ldw	r2,-4(fp)
   20828:	10800084 	addi	r2,r2,2
   2082c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   20830:	e03ffa05 	stb	zero,-24(fp)
   20834:	00000b06 	br	20864 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   20838:	e0bff917 	ldw	r2,-28(fp)
   2083c:	10c00044 	addi	r3,r2,1
   20840:	e0fff915 	stw	r3,-28(fp)
   20844:	e0fff817 	ldw	r3,-32(fp)
   20848:	19000044 	addi	r4,r3,1
   2084c:	e13ff815 	stw	r4,-32(fp)
   20850:	18c00003 	ldbu	r3,0(r3)
   20854:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   20858:	e0bffa03 	ldbu	r2,-24(fp)
   2085c:	10800044 	addi	r2,r2,1
   20860:	e0bffa05 	stb	r2,-24(fp)
   20864:	e0bffa03 	ldbu	r2,-24(fp)
   20868:	108000f0 	cmpltui	r2,r2,3
   2086c:	103ff21e 	bne	r2,zero,20838 <__alt_data_end+0xfc020838>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   20870:	e0bffe17 	ldw	r2,-8(fp)
   20874:	10c0020b 	ldhu	r3,8(r2)
   20878:	e0bfff17 	ldw	r2,-4(fp)
   2087c:	10c0000d 	sth	r3,0(r2)
   20880:	e0bffb17 	ldw	r2,-20(fp)
   20884:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20888:	e0bffc17 	ldw	r2,-16(fp)
   2088c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   20890:	0005883a 	mov	r2,zero
}
   20894:	e037883a 	mov	sp,fp
   20898:	df000017 	ldw	fp,0(sp)
   2089c:	dec00104 	addi	sp,sp,4
   208a0:	f800283a 	ret

000208a4 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   208a4:	defff904 	addi	sp,sp,-28
   208a8:	df000615 	stw	fp,24(sp)
   208ac:	df000604 	addi	fp,sp,24
   208b0:	e13ffd15 	stw	r4,-12(fp)
   208b4:	2805883a 	mov	r2,r5
   208b8:	e1bfff15 	stw	r6,-4(fp)
   208bc:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   208c0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   208c4:	e0bfff17 	ldw	r2,-4(fp)
   208c8:	10003126 	beq	r2,zero,20990 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   208cc:	e0bffd17 	ldw	r2,-12(fp)
   208d0:	1000041e 	bne	r2,zero,208e4 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   208d4:	e0bfff17 	ldw	r2,-4(fp)
   208d8:	00c00104 	movi	r3,4
   208dc:	10c00005 	stb	r3,0(r2)
        return;
   208e0:	00002c06 	br	20994 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   208e4:	e0bffd17 	ldw	r2,-12(fp)
   208e8:	10800003 	ldbu	r2,0(r2)
   208ec:	10803fcc 	andi	r2,r2,255
   208f0:	108000e0 	cmpeqi	r2,r2,3
   208f4:	1000041e 	bne	r2,zero,20908 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   208f8:	e0bfff17 	ldw	r2,-4(fp)
   208fc:	00c00044 	movi	r3,1
   20900:	10c00005 	stb	r3,0(r2)
        return;
   20904:	00002306 	br	20994 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20908:	0005303a 	rdctl	r2,status
   2090c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20910:	e0fffc17 	ldw	r3,-16(fp)
   20914:	00bfff84 	movi	r2,-2
   20918:	1884703a 	and	r2,r3,r2
   2091c:	1001703a 	wrctl	status,r2
  
  return context;
   20920:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   20924:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   20928:	e0bfff17 	ldw	r2,-4(fp)
   2092c:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   20930:	e0bffd17 	ldw	r2,-12(fp)
   20934:	1080020b 	ldhu	r2,8(r2)
   20938:	10bfffcc 	andi	r2,r2,65535
   2093c:	10000426 	beq	r2,zero,20950 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   20940:	e0bffd17 	ldw	r2,-12(fp)
   20944:	e0fffe0b 	ldhu	r3,-8(fp)
   20948:	10c0020d 	sth	r3,8(r2)
   2094c:	00000b06 	br	2097c <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   20950:	e0bffd17 	ldw	r2,-12(fp)
   20954:	10800283 	ldbu	r2,10(r2)
   20958:	10803fcc 	andi	r2,r2,255
   2095c:	1000041e 	bne	r2,zero,20970 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   20960:	e0bffd17 	ldw	r2,-12(fp)
   20964:	e0fffe0b 	ldhu	r3,-8(fp)
   20968:	10c0020d 	sth	r3,8(r2)
   2096c:	00000306 	br	2097c <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   20970:	e0bfff17 	ldw	r2,-4(fp)
   20974:	00c01244 	movi	r3,73
   20978:	10c00005 	stb	r3,0(r2)
   2097c:	e0bffa17 	ldw	r2,-24(fp)
   20980:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20984:	e0bffb17 	ldw	r2,-20(fp)
   20988:	1001703a 	wrctl	status,r2
   2098c:	00000106 	br	20994 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   20990:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   20994:	e037883a 	mov	sp,fp
   20998:	df000017 	ldw	fp,0(sp)
   2099c:	dec00104 	addi	sp,sp,4
   209a0:	f800283a 	ret

000209a4 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   209a4:	defff104 	addi	sp,sp,-60
   209a8:	dfc00e15 	stw	ra,56(sp)
   209ac:	df000d15 	stw	fp,52(sp)
   209b0:	df000d04 	addi	fp,sp,52
   209b4:	2007883a 	mov	r3,r4
   209b8:	2805883a 	mov	r2,r5
   209bc:	e0fffe05 	stb	r3,-8(fp)
   209c0:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   209c4:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   209c8:	e0bffe03 	ldbu	r2,-8(fp)
   209cc:	10800530 	cmpltui	r2,r2,20
   209d0:	1000051e 	bne	r2,zero,209e8 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   209d4:	e0bffe03 	ldbu	r2,-8(fp)
   209d8:	10803fe0 	cmpeqi	r2,r2,255
   209dc:	1000021e 	bne	r2,zero,209e8 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   209e0:	00800a84 	movi	r2,42
   209e4:	00012606 	br	20e80 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   209e8:	e0bfff03 	ldbu	r2,-4(fp)
   209ec:	10800530 	cmpltui	r2,r2,20
   209f0:	1000021e 	bne	r2,zero,209fc <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   209f4:	00800a84 	movi	r2,42
   209f8:	00012106 	br	20e80 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   209fc:	0005303a 	rdctl	r2,status
   20a00:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20a04:	e0fffd17 	ldw	r3,-12(fp)
   20a08:	00bfff84 	movi	r2,-2
   20a0c:	1884703a 	and	r2,r3,r2
   20a10:	1001703a 	wrctl	status,r2
  
  return context;
   20a14:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   20a18:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   20a1c:	e0ffff03 	ldbu	r3,-4(fp)
   20a20:	008000f4 	movhi	r2,3
   20a24:	10b9c504 	addi	r2,r2,-6380
   20a28:	18c7883a 	add	r3,r3,r3
   20a2c:	18c7883a 	add	r3,r3,r3
   20a30:	10c5883a 	add	r2,r2,r3
   20a34:	10800017 	ldw	r2,0(r2)
   20a38:	10000626 	beq	r2,zero,20a54 <OSTaskChangePrio+0xb0>
   20a3c:	e0bff517 	ldw	r2,-44(fp)
   20a40:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20a44:	e0bff617 	ldw	r2,-40(fp)
   20a48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   20a4c:	00800a04 	movi	r2,40
   20a50:	00010b06 	br	20e80 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   20a54:	e0bffe03 	ldbu	r2,-8(fp)
   20a58:	10803fd8 	cmpnei	r2,r2,255
   20a5c:	1000031e 	bne	r2,zero,20a6c <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   20a60:	d0a72e17 	ldw	r2,-25416(gp)
   20a64:	10800c83 	ldbu	r2,50(r2)
   20a68:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   20a6c:	e0fffe03 	ldbu	r3,-8(fp)
   20a70:	008000f4 	movhi	r2,3
   20a74:	10b9c504 	addi	r2,r2,-6380
   20a78:	18c7883a 	add	r3,r3,r3
   20a7c:	18c7883a 	add	r3,r3,r3
   20a80:	10c5883a 	add	r2,r2,r3
   20a84:	10800017 	ldw	r2,0(r2)
   20a88:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   20a8c:	e0bff817 	ldw	r2,-32(fp)
   20a90:	1000061e 	bne	r2,zero,20aac <OSTaskChangePrio+0x108>
   20a94:	e0bff517 	ldw	r2,-44(fp)
   20a98:	e0bff715 	stw	r2,-36(fp)
   20a9c:	e0bff717 	ldw	r2,-36(fp)
   20aa0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   20aa4:	00800a44 	movi	r2,41
   20aa8:	0000f506 	br	20e80 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   20aac:	e0bff817 	ldw	r2,-32(fp)
   20ab0:	10800058 	cmpnei	r2,r2,1
   20ab4:	1000061e 	bne	r2,zero,20ad0 <OSTaskChangePrio+0x12c>
   20ab8:	e0bff517 	ldw	r2,-44(fp)
   20abc:	e0bff915 	stw	r2,-28(fp)
   20ac0:	e0bff917 	ldw	r2,-28(fp)
   20ac4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   20ac8:	008010c4 	movi	r2,67
   20acc:	0000ec06 	br	20e80 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   20ad0:	e0bfff03 	ldbu	r2,-4(fp)
   20ad4:	1004d0fa 	srli	r2,r2,3
   20ad8:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   20adc:	e0bfff03 	ldbu	r2,-4(fp)
   20ae0:	108001cc 	andi	r2,r2,7
   20ae4:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   20ae8:	e0bffb03 	ldbu	r2,-20(fp)
   20aec:	00c00044 	movi	r3,1
   20af0:	1884983a 	sll	r2,r3,r2
   20af4:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   20af8:	e0bffb43 	ldbu	r2,-19(fp)
   20afc:	00c00044 	movi	r3,1
   20b00:	1884983a 	sll	r2,r3,r2
   20b04:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   20b08:	e0fffe03 	ldbu	r3,-8(fp)
   20b0c:	008000f4 	movhi	r2,3
   20b10:	10b9c504 	addi	r2,r2,-6380
   20b14:	18c7883a 	add	r3,r3,r3
   20b18:	18c7883a 	add	r3,r3,r3
   20b1c:	10c5883a 	add	r2,r2,r3
   20b20:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   20b24:	e0ffff03 	ldbu	r3,-4(fp)
   20b28:	008000f4 	movhi	r2,3
   20b2c:	10b9c504 	addi	r2,r2,-6380
   20b30:	18c7883a 	add	r3,r3,r3
   20b34:	18c7883a 	add	r3,r3,r3
   20b38:	10c5883a 	add	r2,r2,r3
   20b3c:	e0fff817 	ldw	r3,-32(fp)
   20b40:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   20b44:	e0bff817 	ldw	r2,-32(fp)
   20b48:	10800d03 	ldbu	r2,52(r2)
   20b4c:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   20b50:	e0bff817 	ldw	r2,-32(fp)
   20b54:	10800d83 	ldbu	r2,54(r2)
   20b58:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   20b5c:	e0bff817 	ldw	r2,-32(fp)
   20b60:	10800d43 	ldbu	r2,53(r2)
   20b64:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   20b68:	e0fffc03 	ldbu	r3,-16(fp)
   20b6c:	d0a72b44 	addi	r2,gp,-25427
   20b70:	1885883a 	add	r2,r3,r2
   20b74:	10c00003 	ldbu	r3,0(r2)
   20b78:	e0bffc83 	ldbu	r2,-14(fp)
   20b7c:	1884703a 	and	r2,r3,r2
   20b80:	10803fcc 	andi	r2,r2,255
   20b84:	10002826 	beq	r2,zero,20c28 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   20b88:	e0fffc03 	ldbu	r3,-16(fp)
   20b8c:	e13ffc03 	ldbu	r4,-16(fp)
   20b90:	d0a72b44 	addi	r2,gp,-25427
   20b94:	2085883a 	add	r2,r4,r2
   20b98:	10800003 	ldbu	r2,0(r2)
   20b9c:	1009883a 	mov	r4,r2
   20ba0:	e0bffc83 	ldbu	r2,-14(fp)
   20ba4:	0084303a 	nor	r2,zero,r2
   20ba8:	2084703a 	and	r2,r4,r2
   20bac:	1009883a 	mov	r4,r2
   20bb0:	d0a72b44 	addi	r2,gp,-25427
   20bb4:	1885883a 	add	r2,r3,r2
   20bb8:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   20bbc:	e0fffc03 	ldbu	r3,-16(fp)
   20bc0:	d0a72b44 	addi	r2,gp,-25427
   20bc4:	1885883a 	add	r2,r3,r2
   20bc8:	10800003 	ldbu	r2,0(r2)
   20bcc:	10803fcc 	andi	r2,r2,255
   20bd0:	1000061e 	bne	r2,zero,20bec <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   20bd4:	e0bffc43 	ldbu	r2,-15(fp)
   20bd8:	0084303a 	nor	r2,zero,r2
   20bdc:	1007883a 	mov	r3,r2
   20be0:	d0a72b03 	ldbu	r2,-25428(gp)
   20be4:	1884703a 	and	r2,r3,r2
   20be8:	d0a72b05 	stb	r2,-25428(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   20bec:	d0e72b03 	ldbu	r3,-25428(gp)
   20bf0:	e0bffb83 	ldbu	r2,-18(fp)
   20bf4:	1884b03a 	or	r2,r3,r2
   20bf8:	d0a72b05 	stb	r2,-25428(gp)
         OSRdyTbl[y_new] |= bitx_new;
   20bfc:	e0fffb03 	ldbu	r3,-20(fp)
   20c00:	e13ffb03 	ldbu	r4,-20(fp)
   20c04:	d0a72b44 	addi	r2,gp,-25427
   20c08:	2085883a 	add	r2,r4,r2
   20c0c:	11000003 	ldbu	r4,0(r2)
   20c10:	e0bffbc3 	ldbu	r2,-17(fp)
   20c14:	2084b03a 	or	r2,r4,r2
   20c18:	1009883a 	mov	r4,r2
   20c1c:	d0a72b44 	addi	r2,gp,-25427
   20c20:	1885883a 	add	r2,r3,r2
   20c24:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   20c28:	e0bff817 	ldw	r2,-32(fp)
   20c2c:	10800717 	ldw	r2,28(r2)
   20c30:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   20c34:	e0bff317 	ldw	r2,-52(fp)
   20c38:	10003326 	beq	r2,zero,20d08 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   20c3c:	e0bffc03 	ldbu	r2,-16(fp)
   20c40:	e0fffc03 	ldbu	r3,-16(fp)
   20c44:	e13ff317 	ldw	r4,-52(fp)
   20c48:	20c7883a 	add	r3,r4,r3
   20c4c:	18c002c4 	addi	r3,r3,11
   20c50:	18c00003 	ldbu	r3,0(r3)
   20c54:	1809883a 	mov	r4,r3
   20c58:	e0fffc83 	ldbu	r3,-14(fp)
   20c5c:	00c6303a 	nor	r3,zero,r3
   20c60:	20c6703a 	and	r3,r4,r3
   20c64:	1809883a 	mov	r4,r3
   20c68:	e0fff317 	ldw	r3,-52(fp)
   20c6c:	1885883a 	add	r2,r3,r2
   20c70:	108002c4 	addi	r2,r2,11
   20c74:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   20c78:	e0bffc03 	ldbu	r2,-16(fp)
   20c7c:	e0fff317 	ldw	r3,-52(fp)
   20c80:	1885883a 	add	r2,r3,r2
   20c84:	108002c4 	addi	r2,r2,11
   20c88:	10800003 	ldbu	r2,0(r2)
   20c8c:	10803fcc 	andi	r2,r2,255
   20c90:	1000091e 	bne	r2,zero,20cb8 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   20c94:	e0bff317 	ldw	r2,-52(fp)
   20c98:	10800283 	ldbu	r2,10(r2)
   20c9c:	1007883a 	mov	r3,r2
   20ca0:	e0bffc43 	ldbu	r2,-15(fp)
   20ca4:	0084303a 	nor	r2,zero,r2
   20ca8:	1884703a 	and	r2,r3,r2
   20cac:	1007883a 	mov	r3,r2
   20cb0:	e0bff317 	ldw	r2,-52(fp)
   20cb4:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   20cb8:	e0bff317 	ldw	r2,-52(fp)
   20cbc:	10c00283 	ldbu	r3,10(r2)
   20cc0:	e0bffb83 	ldbu	r2,-18(fp)
   20cc4:	1884b03a 	or	r2,r3,r2
   20cc8:	1007883a 	mov	r3,r2
   20ccc:	e0bff317 	ldw	r2,-52(fp)
   20cd0:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   20cd4:	e0bffb03 	ldbu	r2,-20(fp)
   20cd8:	e0fffb03 	ldbu	r3,-20(fp)
   20cdc:	e13ff317 	ldw	r4,-52(fp)
   20ce0:	20c7883a 	add	r3,r4,r3
   20ce4:	18c002c4 	addi	r3,r3,11
   20ce8:	19000003 	ldbu	r4,0(r3)
   20cec:	e0fffbc3 	ldbu	r3,-17(fp)
   20cf0:	20c6b03a 	or	r3,r4,r3
   20cf4:	1809883a 	mov	r4,r3
   20cf8:	e0fff317 	ldw	r3,-52(fp)
   20cfc:	1885883a 	add	r2,r3,r2
   20d00:	108002c4 	addi	r2,r2,11
   20d04:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   20d08:	e0bff817 	ldw	r2,-32(fp)
   20d0c:	10800817 	ldw	r2,32(r2)
   20d10:	10004226 	beq	r2,zero,20e1c <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   20d14:	e0bff817 	ldw	r2,-32(fp)
   20d18:	10800817 	ldw	r2,32(r2)
   20d1c:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   20d20:	e0bff417 	ldw	r2,-48(fp)
   20d24:	10800017 	ldw	r2,0(r2)
   20d28:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   20d2c:	00003906 	br	20e14 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   20d30:	e0bffc03 	ldbu	r2,-16(fp)
   20d34:	e0fffc03 	ldbu	r3,-16(fp)
   20d38:	e13ff317 	ldw	r4,-52(fp)
   20d3c:	20c7883a 	add	r3,r4,r3
   20d40:	18c002c4 	addi	r3,r3,11
   20d44:	18c00003 	ldbu	r3,0(r3)
   20d48:	1809883a 	mov	r4,r3
   20d4c:	e0fffc83 	ldbu	r3,-14(fp)
   20d50:	00c6303a 	nor	r3,zero,r3
   20d54:	20c6703a 	and	r3,r4,r3
   20d58:	1809883a 	mov	r4,r3
   20d5c:	e0fff317 	ldw	r3,-52(fp)
   20d60:	1885883a 	add	r2,r3,r2
   20d64:	108002c4 	addi	r2,r2,11
   20d68:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   20d6c:	e0bffc03 	ldbu	r2,-16(fp)
   20d70:	e0fff317 	ldw	r3,-52(fp)
   20d74:	1885883a 	add	r2,r3,r2
   20d78:	108002c4 	addi	r2,r2,11
   20d7c:	10800003 	ldbu	r2,0(r2)
   20d80:	10803fcc 	andi	r2,r2,255
   20d84:	1000091e 	bne	r2,zero,20dac <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   20d88:	e0bff317 	ldw	r2,-52(fp)
   20d8c:	10800283 	ldbu	r2,10(r2)
   20d90:	1007883a 	mov	r3,r2
   20d94:	e0bffc43 	ldbu	r2,-15(fp)
   20d98:	0084303a 	nor	r2,zero,r2
   20d9c:	1884703a 	and	r2,r3,r2
   20da0:	1007883a 	mov	r3,r2
   20da4:	e0bff317 	ldw	r2,-52(fp)
   20da8:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   20dac:	e0bff317 	ldw	r2,-52(fp)
   20db0:	10c00283 	ldbu	r3,10(r2)
   20db4:	e0bffb83 	ldbu	r2,-18(fp)
   20db8:	1884b03a 	or	r2,r3,r2
   20dbc:	1007883a 	mov	r3,r2
   20dc0:	e0bff317 	ldw	r2,-52(fp)
   20dc4:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   20dc8:	e0bffb03 	ldbu	r2,-20(fp)
   20dcc:	e0fffb03 	ldbu	r3,-20(fp)
   20dd0:	e13ff317 	ldw	r4,-52(fp)
   20dd4:	20c7883a 	add	r3,r4,r3
   20dd8:	18c002c4 	addi	r3,r3,11
   20ddc:	19000003 	ldbu	r4,0(r3)
   20de0:	e0fffbc3 	ldbu	r3,-17(fp)
   20de4:	20c6b03a 	or	r3,r4,r3
   20de8:	1809883a 	mov	r4,r3
   20dec:	e0fff317 	ldw	r3,-52(fp)
   20df0:	1885883a 	add	r2,r3,r2
   20df4:	108002c4 	addi	r2,r2,11
   20df8:	11000005 	stb	r4,0(r2)
            pevents++;
   20dfc:	e0bff417 	ldw	r2,-48(fp)
   20e00:	10800104 	addi	r2,r2,4
   20e04:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   20e08:	e0bff417 	ldw	r2,-48(fp)
   20e0c:	10800017 	ldw	r2,0(r2)
   20e10:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   20e14:	e0bff317 	ldw	r2,-52(fp)
   20e18:	103fc51e 	bne	r2,zero,20d30 <__alt_data_end+0xfc020d30>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   20e1c:	e0bff817 	ldw	r2,-32(fp)
   20e20:	e0ffff03 	ldbu	r3,-4(fp)
   20e24:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   20e28:	e0bff817 	ldw	r2,-32(fp)
   20e2c:	e0fffb03 	ldbu	r3,-20(fp)
   20e30:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   20e34:	e0bff817 	ldw	r2,-32(fp)
   20e38:	e0fffb43 	ldbu	r3,-19(fp)
   20e3c:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   20e40:	e0bff817 	ldw	r2,-32(fp)
   20e44:	e0fffb83 	ldbu	r3,-18(fp)
   20e48:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   20e4c:	e0bff817 	ldw	r2,-32(fp)
   20e50:	e0fffbc3 	ldbu	r3,-17(fp)
   20e54:	10c00d45 	stb	r3,53(r2)
   20e58:	e0bff517 	ldw	r2,-44(fp)
   20e5c:	e0bffa15 	stw	r2,-24(fp)
   20e60:	e0bffa17 	ldw	r2,-24(fp)
   20e64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   20e68:	d0a71f43 	ldbu	r2,-25475(gp)
   20e6c:	10803fcc 	andi	r2,r2,255
   20e70:	10800058 	cmpnei	r2,r2,1
   20e74:	1000011e 	bne	r2,zero,20e7c <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   20e78:	001c7640 	call	1c764 <OS_Sched>
    }
    return (OS_ERR_NONE);
   20e7c:	0005883a 	mov	r2,zero
}
   20e80:	e037883a 	mov	sp,fp
   20e84:	dfc00117 	ldw	ra,4(sp)
   20e88:	df000017 	ldw	fp,0(sp)
   20e8c:	dec00204 	addi	sp,sp,8
   20e90:	f800283a 	ret

00020e94 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   20e94:	deffee04 	addi	sp,sp,-72
   20e98:	dfc01115 	stw	ra,68(sp)
   20e9c:	df001015 	stw	fp,64(sp)
   20ea0:	df001004 	addi	fp,sp,64
   20ea4:	e13ffc15 	stw	r4,-16(fp)
   20ea8:	e17ffd15 	stw	r5,-12(fp)
   20eac:	e1bffe15 	stw	r6,-8(fp)
   20eb0:	3805883a 	mov	r2,r7
   20eb4:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   20eb8:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   20ebc:	e0bfff03 	ldbu	r2,-4(fp)
   20ec0:	10800570 	cmpltui	r2,r2,21
   20ec4:	1000021e 	bne	r2,zero,20ed0 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   20ec8:	00800a84 	movi	r2,42
   20ecc:	00005706 	br	2102c <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20ed0:	0005303a 	rdctl	r2,status
   20ed4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20ed8:	e0fffb17 	ldw	r3,-20(fp)
   20edc:	00bfff84 	movi	r2,-2
   20ee0:	1884703a 	and	r2,r3,r2
   20ee4:	1001703a 	wrctl	status,r2
  
  return context;
   20ee8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   20eec:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   20ef0:	d0a72d03 	ldbu	r2,-25420(gp)
   20ef4:	10803fcc 	andi	r2,r2,255
   20ef8:	10000626 	beq	r2,zero,20f14 <OSTaskCreate+0x80>
   20efc:	e0bff317 	ldw	r2,-52(fp)
   20f00:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20f04:	e0bff417 	ldw	r2,-48(fp)
   20f08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   20f0c:	00800f04 	movi	r2,60
   20f10:	00004606 	br	2102c <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   20f14:	e0ffff03 	ldbu	r3,-4(fp)
   20f18:	008000f4 	movhi	r2,3
   20f1c:	10b9c504 	addi	r2,r2,-6380
   20f20:	18c7883a 	add	r3,r3,r3
   20f24:	18c7883a 	add	r3,r3,r3
   20f28:	10c5883a 	add	r2,r2,r3
   20f2c:	10800017 	ldw	r2,0(r2)
   20f30:	1000391e 	bne	r2,zero,21018 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   20f34:	e0ffff03 	ldbu	r3,-4(fp)
   20f38:	008000f4 	movhi	r2,3
   20f3c:	10b9c504 	addi	r2,r2,-6380
   20f40:	18c7883a 	add	r3,r3,r3
   20f44:	18c7883a 	add	r3,r3,r3
   20f48:	10c5883a 	add	r2,r2,r3
   20f4c:	00c00044 	movi	r3,1
   20f50:	10c00015 	stw	r3,0(r2)
   20f54:	e0bff317 	ldw	r2,-52(fp)
   20f58:	e0bff515 	stw	r2,-44(fp)
   20f5c:	e0bff517 	ldw	r2,-44(fp)
   20f60:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   20f64:	000f883a 	mov	r7,zero
   20f68:	e1bffe17 	ldw	r6,-8(fp)
   20f6c:	e17ffd17 	ldw	r5,-12(fp)
   20f70:	e13ffc17 	ldw	r4,-16(fp)
   20f74:	0023fd00 	call	23fd0 <OSTaskStkInit>
   20f78:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   20f7c:	e0bfff03 	ldbu	r2,-4(fp)
   20f80:	d8000215 	stw	zero,8(sp)
   20f84:	d8000115 	stw	zero,4(sp)
   20f88:	d8000015 	stw	zero,0(sp)
   20f8c:	000f883a 	mov	r7,zero
   20f90:	000d883a 	mov	r6,zero
   20f94:	e17ff717 	ldw	r5,-36(fp)
   20f98:	1009883a 	mov	r4,r2
   20f9c:	001cb740 	call	1cb74 <OS_TCBInit>
   20fa0:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   20fa4:	e0bff803 	ldbu	r2,-32(fp)
   20fa8:	1000061e 	bne	r2,zero,20fc4 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   20fac:	d0a71f43 	ldbu	r2,-25475(gp)
   20fb0:	10803fcc 	andi	r2,r2,255
   20fb4:	10800058 	cmpnei	r2,r2,1
   20fb8:	1000151e 	bne	r2,zero,21010 <OSTaskCreate+0x17c>
                OS_Sched();
   20fbc:	001c7640 	call	1c764 <OS_Sched>
   20fc0:	00001306 	br	21010 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20fc4:	0005303a 	rdctl	r2,status
   20fc8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20fcc:	e0fffa17 	ldw	r3,-24(fp)
   20fd0:	00bfff84 	movi	r2,-2
   20fd4:	1884703a 	and	r2,r3,r2
   20fd8:	1001703a 	wrctl	status,r2
  
  return context;
   20fdc:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   20fe0:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   20fe4:	e0ffff03 	ldbu	r3,-4(fp)
   20fe8:	008000f4 	movhi	r2,3
   20fec:	10b9c504 	addi	r2,r2,-6380
   20ff0:	18c7883a 	add	r3,r3,r3
   20ff4:	18c7883a 	add	r3,r3,r3
   20ff8:	10c5883a 	add	r2,r2,r3
   20ffc:	10000015 	stw	zero,0(r2)
   21000:	e0bff317 	ldw	r2,-52(fp)
   21004:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21008:	e0bff617 	ldw	r2,-40(fp)
   2100c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   21010:	e0bff803 	ldbu	r2,-32(fp)
   21014:	00000506 	br	2102c <OSTaskCreate+0x198>
   21018:	e0bff317 	ldw	r2,-52(fp)
   2101c:	e0bff915 	stw	r2,-28(fp)
   21020:	e0bff917 	ldw	r2,-28(fp)
   21024:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   21028:	00800a04 	movi	r2,40
}
   2102c:	e037883a 	mov	sp,fp
   21030:	dfc00117 	ldw	ra,4(sp)
   21034:	df000017 	ldw	fp,0(sp)
   21038:	dec00204 	addi	sp,sp,8
   2103c:	f800283a 	ret

00021040 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   21040:	deffec04 	addi	sp,sp,-80
   21044:	dfc01315 	stw	ra,76(sp)
   21048:	df001215 	stw	fp,72(sp)
   2104c:	df001204 	addi	fp,sp,72
   21050:	e13ffa15 	stw	r4,-24(fp)
   21054:	e17ffb15 	stw	r5,-20(fp)
   21058:	e1bffc15 	stw	r6,-16(fp)
   2105c:	3809883a 	mov	r4,r7
   21060:	e0c00217 	ldw	r3,8(fp)
   21064:	e0800617 	ldw	r2,24(fp)
   21068:	e13ffd05 	stb	r4,-12(fp)
   2106c:	e0fffe0d 	sth	r3,-8(fp)
   21070:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   21074:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   21078:	e0bffd03 	ldbu	r2,-12(fp)
   2107c:	10800570 	cmpltui	r2,r2,21
   21080:	1000021e 	bne	r2,zero,2108c <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   21084:	00800a84 	movi	r2,42
   21088:	00006106 	br	21210 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2108c:	0005303a 	rdctl	r2,status
   21090:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21094:	e0fff917 	ldw	r3,-28(fp)
   21098:	00bfff84 	movi	r2,-2
   2109c:	1884703a 	and	r2,r3,r2
   210a0:	1001703a 	wrctl	status,r2
  
  return context;
   210a4:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   210a8:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   210ac:	d0a72d03 	ldbu	r2,-25420(gp)
   210b0:	10803fcc 	andi	r2,r2,255
   210b4:	10000626 	beq	r2,zero,210d0 <OSTaskCreateExt+0x90>
   210b8:	e0bff117 	ldw	r2,-60(fp)
   210bc:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   210c0:	e0bff217 	ldw	r2,-56(fp)
   210c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   210c8:	00800f04 	movi	r2,60
   210cc:	00005006 	br	21210 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   210d0:	e0fffd03 	ldbu	r3,-12(fp)
   210d4:	008000f4 	movhi	r2,3
   210d8:	10b9c504 	addi	r2,r2,-6380
   210dc:	18c7883a 	add	r3,r3,r3
   210e0:	18c7883a 	add	r3,r3,r3
   210e4:	10c5883a 	add	r2,r2,r3
   210e8:	10800017 	ldw	r2,0(r2)
   210ec:	1000431e 	bne	r2,zero,211fc <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   210f0:	e0fffd03 	ldbu	r3,-12(fp)
   210f4:	008000f4 	movhi	r2,3
   210f8:	10b9c504 	addi	r2,r2,-6380
   210fc:	18c7883a 	add	r3,r3,r3
   21100:	18c7883a 	add	r3,r3,r3
   21104:	10c5883a 	add	r2,r2,r3
   21108:	00c00044 	movi	r3,1
   2110c:	10c00015 	stw	r3,0(r2)
   21110:	e0bff117 	ldw	r2,-60(fp)
   21114:	e0bff315 	stw	r2,-52(fp)
   21118:	e0bff317 	ldw	r2,-52(fp)
   2111c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   21120:	e0bfff0b 	ldhu	r2,-4(fp)
   21124:	100d883a 	mov	r6,r2
   21128:	e1400417 	ldw	r5,16(fp)
   2112c:	e1000317 	ldw	r4,12(fp)
   21130:	00220a00 	call	220a0 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   21134:	e0bfff0b 	ldhu	r2,-4(fp)
   21138:	100f883a 	mov	r7,r2
   2113c:	e1bffc17 	ldw	r6,-16(fp)
   21140:	e17ffb17 	ldw	r5,-20(fp)
   21144:	e13ffa17 	ldw	r4,-24(fp)
   21148:	0023fd00 	call	23fd0 <OSTaskStkInit>
   2114c:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   21150:	e0fffd03 	ldbu	r3,-12(fp)
   21154:	e13ffe0b 	ldhu	r4,-8(fp)
   21158:	e0bfff0b 	ldhu	r2,-4(fp)
   2115c:	d8800215 	stw	r2,8(sp)
   21160:	e0800517 	ldw	r2,20(fp)
   21164:	d8800115 	stw	r2,4(sp)
   21168:	e0800417 	ldw	r2,16(fp)
   2116c:	d8800015 	stw	r2,0(sp)
   21170:	200f883a 	mov	r7,r4
   21174:	e1800317 	ldw	r6,12(fp)
   21178:	e17ff517 	ldw	r5,-44(fp)
   2117c:	1809883a 	mov	r4,r3
   21180:	001cb740 	call	1cb74 <OS_TCBInit>
   21184:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   21188:	e0bff603 	ldbu	r2,-40(fp)
   2118c:	1000061e 	bne	r2,zero,211a8 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   21190:	d0a71f43 	ldbu	r2,-25475(gp)
   21194:	10803fcc 	andi	r2,r2,255
   21198:	10800058 	cmpnei	r2,r2,1
   2119c:	1000151e 	bne	r2,zero,211f4 <OSTaskCreateExt+0x1b4>
                OS_Sched();
   211a0:	001c7640 	call	1c764 <OS_Sched>
   211a4:	00001306 	br	211f4 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   211a8:	0005303a 	rdctl	r2,status
   211ac:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   211b0:	e0fff817 	ldw	r3,-32(fp)
   211b4:	00bfff84 	movi	r2,-2
   211b8:	1884703a 	and	r2,r3,r2
   211bc:	1001703a 	wrctl	status,r2
  
  return context;
   211c0:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   211c4:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   211c8:	e0fffd03 	ldbu	r3,-12(fp)
   211cc:	008000f4 	movhi	r2,3
   211d0:	10b9c504 	addi	r2,r2,-6380
   211d4:	18c7883a 	add	r3,r3,r3
   211d8:	18c7883a 	add	r3,r3,r3
   211dc:	10c5883a 	add	r2,r2,r3
   211e0:	10000015 	stw	zero,0(r2)
   211e4:	e0bff117 	ldw	r2,-60(fp)
   211e8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   211ec:	e0bff417 	ldw	r2,-48(fp)
   211f0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   211f4:	e0bff603 	ldbu	r2,-40(fp)
   211f8:	00000506 	br	21210 <OSTaskCreateExt+0x1d0>
   211fc:	e0bff117 	ldw	r2,-60(fp)
   21200:	e0bff715 	stw	r2,-36(fp)
   21204:	e0bff717 	ldw	r2,-36(fp)
   21208:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   2120c:	00800a04 	movi	r2,40
}
   21210:	e037883a 	mov	sp,fp
   21214:	dfc00117 	ldw	ra,4(sp)
   21218:	df000017 	ldw	fp,0(sp)
   2121c:	dec00204 	addi	sp,sp,8
   21220:	f800283a 	ret

00021224 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   21224:	defff404 	addi	sp,sp,-48
   21228:	dfc00b15 	stw	ra,44(sp)
   2122c:	df000a15 	stw	fp,40(sp)
   21230:	df000a04 	addi	fp,sp,40
   21234:	2005883a 	mov	r2,r4
   21238:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   2123c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   21240:	d0a72d03 	ldbu	r2,-25420(gp)
   21244:	10803fcc 	andi	r2,r2,255
   21248:	10000226 	beq	r2,zero,21254 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   2124c:	00801004 	movi	r2,64
   21250:	0000c006 	br	21554 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   21254:	e0bfff03 	ldbu	r2,-4(fp)
   21258:	10800518 	cmpnei	r2,r2,20
   2125c:	1000021e 	bne	r2,zero,21268 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   21260:	00800f84 	movi	r2,62
   21264:	0000bb06 	br	21554 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   21268:	e0bfff03 	ldbu	r2,-4(fp)
   2126c:	10800530 	cmpltui	r2,r2,20
   21270:	1000051e 	bne	r2,zero,21288 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   21274:	e0bfff03 	ldbu	r2,-4(fp)
   21278:	10803fe0 	cmpeqi	r2,r2,255
   2127c:	1000021e 	bne	r2,zero,21288 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   21280:	00800a84 	movi	r2,42
   21284:	0000b306 	br	21554 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21288:	0005303a 	rdctl	r2,status
   2128c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21290:	e0fffe17 	ldw	r3,-8(fp)
   21294:	00bfff84 	movi	r2,-2
   21298:	1884703a 	and	r2,r3,r2
   2129c:	1001703a 	wrctl	status,r2
  
  return context;
   212a0:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   212a4:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   212a8:	e0bfff03 	ldbu	r2,-4(fp)
   212ac:	10803fd8 	cmpnei	r2,r2,255
   212b0:	1000031e 	bne	r2,zero,212c0 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   212b4:	d0a72e17 	ldw	r2,-25416(gp)
   212b8:	10800c83 	ldbu	r2,50(r2)
   212bc:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   212c0:	e0ffff03 	ldbu	r3,-4(fp)
   212c4:	008000f4 	movhi	r2,3
   212c8:	10b9c504 	addi	r2,r2,-6380
   212cc:	18c7883a 	add	r3,r3,r3
   212d0:	18c7883a 	add	r3,r3,r3
   212d4:	10c5883a 	add	r2,r2,r3
   212d8:	10800017 	ldw	r2,0(r2)
   212dc:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   212e0:	e0bff817 	ldw	r2,-32(fp)
   212e4:	1000061e 	bne	r2,zero,21300 <OSTaskDel+0xdc>
   212e8:	e0bff617 	ldw	r2,-40(fp)
   212ec:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   212f0:	e0bff717 	ldw	r2,-36(fp)
   212f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   212f8:	008010c4 	movi	r2,67
   212fc:	00009506 	br	21554 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   21300:	e0bff817 	ldw	r2,-32(fp)
   21304:	10800058 	cmpnei	r2,r2,1
   21308:	1000061e 	bne	r2,zero,21324 <OSTaskDel+0x100>
   2130c:	e0bff617 	ldw	r2,-40(fp)
   21310:	e0bff915 	stw	r2,-28(fp)
   21314:	e0bff917 	ldw	r2,-28(fp)
   21318:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   2131c:	00800f44 	movi	r2,61
   21320:	00008c06 	br	21554 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   21324:	e0bff817 	ldw	r2,-32(fp)
   21328:	10800d03 	ldbu	r2,52(r2)
   2132c:	10c03fcc 	andi	r3,r2,255
   21330:	e0bff817 	ldw	r2,-32(fp)
   21334:	10800d03 	ldbu	r2,52(r2)
   21338:	11003fcc 	andi	r4,r2,255
   2133c:	d0a72b44 	addi	r2,gp,-25427
   21340:	2085883a 	add	r2,r4,r2
   21344:	10800003 	ldbu	r2,0(r2)
   21348:	1009883a 	mov	r4,r2
   2134c:	e0bff817 	ldw	r2,-32(fp)
   21350:	10800d43 	ldbu	r2,53(r2)
   21354:	0084303a 	nor	r2,zero,r2
   21358:	2084703a 	and	r2,r4,r2
   2135c:	1009883a 	mov	r4,r2
   21360:	d0a72b44 	addi	r2,gp,-25427
   21364:	1885883a 	add	r2,r3,r2
   21368:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   2136c:	e0bff817 	ldw	r2,-32(fp)
   21370:	10800d03 	ldbu	r2,52(r2)
   21374:	10c03fcc 	andi	r3,r2,255
   21378:	d0a72b44 	addi	r2,gp,-25427
   2137c:	1885883a 	add	r2,r3,r2
   21380:	10800003 	ldbu	r2,0(r2)
   21384:	10803fcc 	andi	r2,r2,255
   21388:	1000071e 	bne	r2,zero,213a8 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   2138c:	e0bff817 	ldw	r2,-32(fp)
   21390:	10800d83 	ldbu	r2,54(r2)
   21394:	0084303a 	nor	r2,zero,r2
   21398:	1007883a 	mov	r3,r2
   2139c:	d0a72b03 	ldbu	r2,-25428(gp)
   213a0:	1884703a 	and	r2,r3,r2
   213a4:	d0a72b05 	stb	r2,-25428(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   213a8:	e0bff817 	ldw	r2,-32(fp)
   213ac:	10800717 	ldw	r2,28(r2)
   213b0:	10000526 	beq	r2,zero,213c8 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   213b4:	e0bff817 	ldw	r2,-32(fp)
   213b8:	10800717 	ldw	r2,28(r2)
   213bc:	100b883a 	mov	r5,r2
   213c0:	e13ff817 	ldw	r4,-32(fp)
   213c4:	001c1100 	call	1c110 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   213c8:	e0bff817 	ldw	r2,-32(fp)
   213cc:	10800817 	ldw	r2,32(r2)
   213d0:	10000526 	beq	r2,zero,213e8 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   213d4:	e0bff817 	ldw	r2,-32(fp)
   213d8:	10800817 	ldw	r2,32(r2)
   213dc:	100b883a 	mov	r5,r2
   213e0:	e13ff817 	ldw	r4,-32(fp)
   213e4:	001c1c80 	call	1c1c8 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   213e8:	e0bff817 	ldw	r2,-32(fp)
   213ec:	10800a17 	ldw	r2,40(r2)
   213f0:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   213f4:	e0bffb17 	ldw	r2,-20(fp)
   213f8:	10000226 	beq	r2,zero,21404 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   213fc:	e13ffb17 	ldw	r4,-20(fp)
   21400:	001e6480 	call	1e648 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   21404:	e0bff817 	ldw	r2,-32(fp)
   21408:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   2140c:	e0bff817 	ldw	r2,-32(fp)
   21410:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   21414:	e0bff817 	ldw	r2,-32(fp)
   21418:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   2141c:	d0a71f03 	ldbu	r2,-25476(gp)
   21420:	10803fcc 	andi	r2,r2,255
   21424:	10803fe0 	cmpeqi	r2,r2,255
   21428:	1000031e 	bne	r2,zero,21438 <OSTaskDel+0x214>
        OSLockNesting++;
   2142c:	d0a71f03 	ldbu	r2,-25476(gp)
   21430:	10800044 	addi	r2,r2,1
   21434:	d0a71f05 	stb	r2,-25476(gp)
   21438:	e0bff617 	ldw	r2,-40(fp)
   2143c:	e0bffd15 	stw	r2,-12(fp)
   21440:	e0bffd17 	ldw	r2,-12(fp)
   21444:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   21448:	001bcf80 	call	1bcf8 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2144c:	0005303a 	rdctl	r2,status
   21450:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21454:	e0fffa17 	ldw	r3,-24(fp)
   21458:	00bfff84 	movi	r2,-2
   2145c:	1884703a 	and	r2,r3,r2
   21460:	1001703a 	wrctl	status,r2
  
  return context;
   21464:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   21468:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   2146c:	d0a71f03 	ldbu	r2,-25476(gp)
   21470:	10803fcc 	andi	r2,r2,255
   21474:	10000326 	beq	r2,zero,21484 <OSTaskDel+0x260>
        OSLockNesting--;
   21478:	d0a71f03 	ldbu	r2,-25476(gp)
   2147c:	10bfffc4 	addi	r2,r2,-1
   21480:	d0a71f05 	stb	r2,-25476(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   21484:	e13ff817 	ldw	r4,-32(fp)
   21488:	00241500 	call	24150 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   2148c:	d0a72743 	ldbu	r2,-25443(gp)
   21490:	10bfffc4 	addi	r2,r2,-1
   21494:	d0a72745 	stb	r2,-25443(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   21498:	e0ffff03 	ldbu	r3,-4(fp)
   2149c:	008000f4 	movhi	r2,3
   214a0:	10b9c504 	addi	r2,r2,-6380
   214a4:	18c7883a 	add	r3,r3,r3
   214a8:	18c7883a 	add	r3,r3,r3
   214ac:	10c5883a 	add	r2,r2,r3
   214b0:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   214b4:	e0bff817 	ldw	r2,-32(fp)
   214b8:	10800617 	ldw	r2,24(r2)
   214bc:	1000071e 	bne	r2,zero,214dc <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   214c0:	e0bff817 	ldw	r2,-32(fp)
   214c4:	10800517 	ldw	r2,20(r2)
   214c8:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   214cc:	e0bff817 	ldw	r2,-32(fp)
   214d0:	10800517 	ldw	r2,20(r2)
   214d4:	d0a72215 	stw	r2,-25464(gp)
   214d8:	00000a06 	br	21504 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   214dc:	e0bff817 	ldw	r2,-32(fp)
   214e0:	10800617 	ldw	r2,24(r2)
   214e4:	e0fff817 	ldw	r3,-32(fp)
   214e8:	18c00517 	ldw	r3,20(r3)
   214ec:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   214f0:	e0bff817 	ldw	r2,-32(fp)
   214f4:	10800517 	ldw	r2,20(r2)
   214f8:	e0fff817 	ldw	r3,-32(fp)
   214fc:	18c00617 	ldw	r3,24(r3)
   21500:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   21504:	d0e72617 	ldw	r3,-25448(gp)
   21508:	e0bff817 	ldw	r2,-32(fp)
   2150c:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   21510:	e0bff817 	ldw	r2,-32(fp)
   21514:	d0a72615 	stw	r2,-25448(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   21518:	e0bff817 	ldw	r2,-32(fp)
   2151c:	00c00fc4 	movi	r3,63
   21520:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   21524:	e0bff817 	ldw	r2,-32(fp)
   21528:	10001345 	stb	zero,77(r2)
   2152c:	e0bff617 	ldw	r2,-40(fp)
   21530:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21534:	e0bffc17 	ldw	r2,-16(fp)
   21538:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   2153c:	d0a71f43 	ldbu	r2,-25475(gp)
   21540:	10803fcc 	andi	r2,r2,255
   21544:	10800058 	cmpnei	r2,r2,1
   21548:	1000011e 	bne	r2,zero,21550 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   2154c:	001c7640 	call	1c764 <OS_Sched>
    }
    return (OS_ERR_NONE);
   21550:	0005883a 	mov	r2,zero
}
   21554:	e037883a 	mov	sp,fp
   21558:	dfc00117 	ldw	ra,4(sp)
   2155c:	df000017 	ldw	fp,0(sp)
   21560:	dec00204 	addi	sp,sp,8
   21564:	f800283a 	ret

00021568 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   21568:	defff504 	addi	sp,sp,-44
   2156c:	df000a15 	stw	fp,40(sp)
   21570:	df000a04 	addi	fp,sp,40
   21574:	2005883a 	mov	r2,r4
   21578:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   2157c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   21580:	e0bfff03 	ldbu	r2,-4(fp)
   21584:	10800518 	cmpnei	r2,r2,20
   21588:	1000021e 	bne	r2,zero,21594 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   2158c:	00800f84 	movi	r2,62
   21590:	00004506 	br	216a8 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   21594:	e0bfff03 	ldbu	r2,-4(fp)
   21598:	10800530 	cmpltui	r2,r2,20
   2159c:	1000051e 	bne	r2,zero,215b4 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   215a0:	e0bfff03 	ldbu	r2,-4(fp)
   215a4:	10803fe0 	cmpeqi	r2,r2,255
   215a8:	1000021e 	bne	r2,zero,215b4 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   215ac:	00800a84 	movi	r2,42
   215b0:	00003d06 	br	216a8 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   215b4:	e0bfff03 	ldbu	r2,-4(fp)
   215b8:	10803fd8 	cmpnei	r2,r2,255
   215bc:	1000111e 	bne	r2,zero,21604 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   215c0:	0005303a 	rdctl	r2,status
   215c4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   215c8:	e0fff917 	ldw	r3,-28(fp)
   215cc:	00bfff84 	movi	r2,-2
   215d0:	1884703a 	and	r2,r3,r2
   215d4:	1001703a 	wrctl	status,r2
  
  return context;
   215d8:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   215dc:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   215e0:	d0a72e17 	ldw	r2,-25416(gp)
   215e4:	10800dc3 	ldbu	r2,55(r2)
   215e8:	e0bff805 	stb	r2,-32(fp)
   215ec:	e0bff617 	ldw	r2,-40(fp)
   215f0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   215f4:	e0bffe17 	ldw	r2,-8(fp)
   215f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   215fc:	e0bff803 	ldbu	r2,-32(fp)
   21600:	00002906 	br	216a8 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21604:	0005303a 	rdctl	r2,status
   21608:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2160c:	e0fff717 	ldw	r3,-36(fp)
   21610:	00bfff84 	movi	r2,-2
   21614:	1884703a 	and	r2,r3,r2
   21618:	1001703a 	wrctl	status,r2
  
  return context;
   2161c:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   21620:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   21624:	e0ffff03 	ldbu	r3,-4(fp)
   21628:	008000f4 	movhi	r2,3
   2162c:	10b9c504 	addi	r2,r2,-6380
   21630:	18c7883a 	add	r3,r3,r3
   21634:	18c7883a 	add	r3,r3,r3
   21638:	10c5883a 	add	r2,r2,r3
   2163c:	10800017 	ldw	r2,0(r2)
   21640:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   21644:	e0bffb17 	ldw	r2,-20(fp)
   21648:	1000061e 	bne	r2,zero,21664 <OSTaskDelReq+0xfc>
   2164c:	e0bff617 	ldw	r2,-40(fp)
   21650:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21654:	e0bffa17 	ldw	r2,-24(fp)
   21658:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   2165c:	008010c4 	movi	r2,67
   21660:	00001106 	br	216a8 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   21664:	e0bffb17 	ldw	r2,-20(fp)
   21668:	10800058 	cmpnei	r2,r2,1
   2166c:	1000061e 	bne	r2,zero,21688 <OSTaskDelReq+0x120>
   21670:	e0bff617 	ldw	r2,-40(fp)
   21674:	e0bffc15 	stw	r2,-16(fp)
   21678:	e0bffc17 	ldw	r2,-16(fp)
   2167c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   21680:	00800f44 	movi	r2,61
   21684:	00000806 	br	216a8 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   21688:	e0bffb17 	ldw	r2,-20(fp)
   2168c:	00c00fc4 	movi	r3,63
   21690:	10c00dc5 	stb	r3,55(r2)
   21694:	e0bff617 	ldw	r2,-40(fp)
   21698:	e0bffd15 	stw	r2,-12(fp)
   2169c:	e0bffd17 	ldw	r2,-12(fp)
   216a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   216a4:	0005883a 	mov	r2,zero
}
   216a8:	e037883a 	mov	sp,fp
   216ac:	df000017 	ldw	fp,0(sp)
   216b0:	dec00104 	addi	sp,sp,4
   216b4:	f800283a 	ret

000216b8 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   216b8:	defff404 	addi	sp,sp,-48
   216bc:	dfc00b15 	stw	ra,44(sp)
   216c0:	df000a15 	stw	fp,40(sp)
   216c4:	df000a04 	addi	fp,sp,40
   216c8:	2005883a 	mov	r2,r4
   216cc:	e17ffe15 	stw	r5,-8(fp)
   216d0:	e1bfff15 	stw	r6,-4(fp)
   216d4:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   216d8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   216dc:	e0bfff17 	ldw	r2,-4(fp)
   216e0:	1000021e 	bne	r2,zero,216ec <OSTaskNameGet+0x34>
        return (0);
   216e4:	0005883a 	mov	r2,zero
   216e8:	00005406 	br	2183c <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   216ec:	e0bffd03 	ldbu	r2,-12(fp)
   216f0:	10800570 	cmpltui	r2,r2,21
   216f4:	1000081e 	bne	r2,zero,21718 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   216f8:	e0bffd03 	ldbu	r2,-12(fp)
   216fc:	10803fe0 	cmpeqi	r2,r2,255
   21700:	1000051e 	bne	r2,zero,21718 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   21704:	e0bfff17 	ldw	r2,-4(fp)
   21708:	00c00a84 	movi	r3,42
   2170c:	10c00005 	stb	r3,0(r2)
            return (0);
   21710:	0005883a 	mov	r2,zero
   21714:	00004906 	br	2183c <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   21718:	e0bffe17 	ldw	r2,-8(fp)
   2171c:	1000051e 	bne	r2,zero,21734 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   21720:	e0bfff17 	ldw	r2,-4(fp)
   21724:	00c00304 	movi	r3,12
   21728:	10c00005 	stb	r3,0(r2)
        return (0);
   2172c:	0005883a 	mov	r2,zero
   21730:	00004206 	br	2183c <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   21734:	d0a72d03 	ldbu	r2,-25420(gp)
   21738:	10803fcc 	andi	r2,r2,255
   2173c:	10000526 	beq	r2,zero,21754 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   21740:	e0bfff17 	ldw	r2,-4(fp)
   21744:	00c00444 	movi	r3,17
   21748:	10c00005 	stb	r3,0(r2)
        return (0);
   2174c:	0005883a 	mov	r2,zero
   21750:	00003a06 	br	2183c <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21754:	0005303a 	rdctl	r2,status
   21758:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2175c:	e0fffc17 	ldw	r3,-16(fp)
   21760:	00bfff84 	movi	r2,-2
   21764:	1884703a 	and	r2,r3,r2
   21768:	1001703a 	wrctl	status,r2
  
  return context;
   2176c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   21770:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   21774:	e0bffd03 	ldbu	r2,-12(fp)
   21778:	10803fd8 	cmpnei	r2,r2,255
   2177c:	1000031e 	bne	r2,zero,2178c <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   21780:	d0a72e17 	ldw	r2,-25416(gp)
   21784:	10800c83 	ldbu	r2,50(r2)
   21788:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   2178c:	e0fffd03 	ldbu	r3,-12(fp)
   21790:	008000f4 	movhi	r2,3
   21794:	10b9c504 	addi	r2,r2,-6380
   21798:	18c7883a 	add	r3,r3,r3
   2179c:	18c7883a 	add	r3,r3,r3
   217a0:	10c5883a 	add	r2,r2,r3
   217a4:	10800017 	ldw	r2,0(r2)
   217a8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   217ac:	e0bff817 	ldw	r2,-32(fp)
   217b0:	1000091e 	bne	r2,zero,217d8 <OSTaskNameGet+0x120>
   217b4:	e0bff617 	ldw	r2,-40(fp)
   217b8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   217bc:	e0bff717 	ldw	r2,-36(fp)
   217c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   217c4:	e0bfff17 	ldw	r2,-4(fp)
   217c8:	00c010c4 	movi	r3,67
   217cc:	10c00005 	stb	r3,0(r2)
        return (0);
   217d0:	0005883a 	mov	r2,zero
   217d4:	00001906 	br	2183c <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   217d8:	e0bff817 	ldw	r2,-32(fp)
   217dc:	10800058 	cmpnei	r2,r2,1
   217e0:	1000091e 	bne	r2,zero,21808 <OSTaskNameGet+0x150>
   217e4:	e0bff617 	ldw	r2,-40(fp)
   217e8:	e0bff915 	stw	r2,-28(fp)
   217ec:	e0bff917 	ldw	r2,-28(fp)
   217f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   217f4:	e0bfff17 	ldw	r2,-4(fp)
   217f8:	00c010c4 	movi	r3,67
   217fc:	10c00005 	stb	r3,0(r2)
        return (0);
   21800:	0005883a 	mov	r2,zero
   21804:	00000d06 	br	2183c <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   21808:	e0bff817 	ldw	r2,-32(fp)
   2180c:	10801304 	addi	r2,r2,76
   21810:	100b883a 	mov	r5,r2
   21814:	e13ffe17 	ldw	r4,-8(fp)
   21818:	001c8a80 	call	1c8a8 <OS_StrCopy>
   2181c:	e0bffb05 	stb	r2,-20(fp)
   21820:	e0bff617 	ldw	r2,-40(fp)
   21824:	e0bffa15 	stw	r2,-24(fp)
   21828:	e0bffa17 	ldw	r2,-24(fp)
   2182c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   21830:	e0bfff17 	ldw	r2,-4(fp)
   21834:	10000005 	stb	zero,0(r2)
    return (len);
   21838:	e0bffb03 	ldbu	r2,-20(fp)
}
   2183c:	e037883a 	mov	sp,fp
   21840:	dfc00117 	ldw	ra,4(sp)
   21844:	df000017 	ldw	fp,0(sp)
   21848:	dec00204 	addi	sp,sp,8
   2184c:	f800283a 	ret

00021850 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   21850:	defff304 	addi	sp,sp,-52
   21854:	dfc00c15 	stw	ra,48(sp)
   21858:	df000b15 	stw	fp,44(sp)
   2185c:	df000b04 	addi	fp,sp,44
   21860:	2005883a 	mov	r2,r4
   21864:	e17ffe15 	stw	r5,-8(fp)
   21868:	e1bfff15 	stw	r6,-4(fp)
   2186c:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   21870:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   21874:	e0bfff17 	ldw	r2,-4(fp)
   21878:	10005c26 	beq	r2,zero,219ec <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   2187c:	e0bffd03 	ldbu	r2,-12(fp)
   21880:	10800570 	cmpltui	r2,r2,21
   21884:	1000071e 	bne	r2,zero,218a4 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   21888:	e0bffd03 	ldbu	r2,-12(fp)
   2188c:	10803fe0 	cmpeqi	r2,r2,255
   21890:	1000041e 	bne	r2,zero,218a4 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   21894:	e0bfff17 	ldw	r2,-4(fp)
   21898:	00c00a84 	movi	r3,42
   2189c:	10c00005 	stb	r3,0(r2)
            return;
   218a0:	00005306 	br	219f0 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   218a4:	e0bffe17 	ldw	r2,-8(fp)
   218a8:	1000041e 	bne	r2,zero,218bc <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   218ac:	e0bfff17 	ldw	r2,-4(fp)
   218b0:	00c00304 	movi	r3,12
   218b4:	10c00005 	stb	r3,0(r2)
        return;
   218b8:	00004d06 	br	219f0 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   218bc:	d0a72d03 	ldbu	r2,-25420(gp)
   218c0:	10803fcc 	andi	r2,r2,255
   218c4:	10000426 	beq	r2,zero,218d8 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   218c8:	e0bfff17 	ldw	r2,-4(fp)
   218cc:	00c00484 	movi	r3,18
   218d0:	10c00005 	stb	r3,0(r2)
        return;
   218d4:	00004606 	br	219f0 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   218d8:	0005303a 	rdctl	r2,status
   218dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   218e0:	e0fffc17 	ldw	r3,-16(fp)
   218e4:	00bfff84 	movi	r2,-2
   218e8:	1884703a 	and	r2,r3,r2
   218ec:	1001703a 	wrctl	status,r2
  
  return context;
   218f0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   218f4:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   218f8:	e0bffd03 	ldbu	r2,-12(fp)
   218fc:	10803fd8 	cmpnei	r2,r2,255
   21900:	1000031e 	bne	r2,zero,21910 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   21904:	d0a72e17 	ldw	r2,-25416(gp)
   21908:	10800c83 	ldbu	r2,50(r2)
   2190c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   21910:	e0fffd03 	ldbu	r3,-12(fp)
   21914:	008000f4 	movhi	r2,3
   21918:	10b9c504 	addi	r2,r2,-6380
   2191c:	18c7883a 	add	r3,r3,r3
   21920:	18c7883a 	add	r3,r3,r3
   21924:	10c5883a 	add	r2,r2,r3
   21928:	10800017 	ldw	r2,0(r2)
   2192c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   21930:	e0bff717 	ldw	r2,-36(fp)
   21934:	1000081e 	bne	r2,zero,21958 <OSTaskNameSet+0x108>
   21938:	e0bff517 	ldw	r2,-44(fp)
   2193c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21940:	e0bff617 	ldw	r2,-40(fp)
   21944:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   21948:	e0bfff17 	ldw	r2,-4(fp)
   2194c:	00c010c4 	movi	r3,67
   21950:	10c00005 	stb	r3,0(r2)
        return;
   21954:	00002606 	br	219f0 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   21958:	e0bff717 	ldw	r2,-36(fp)
   2195c:	10800058 	cmpnei	r2,r2,1
   21960:	1000081e 	bne	r2,zero,21984 <OSTaskNameSet+0x134>
   21964:	e0bff517 	ldw	r2,-44(fp)
   21968:	e0bff815 	stw	r2,-32(fp)
   2196c:	e0bff817 	ldw	r2,-32(fp)
   21970:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   21974:	e0bfff17 	ldw	r2,-4(fp)
   21978:	00c010c4 	movi	r3,67
   2197c:	10c00005 	stb	r3,0(r2)
        return;
   21980:	00001b06 	br	219f0 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   21984:	e13ffe17 	ldw	r4,-8(fp)
   21988:	001c91c0 	call	1c91c <OS_StrLen>
   2198c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   21990:	e0bffa03 	ldbu	r2,-24(fp)
   21994:	10800830 	cmpltui	r2,r2,32
   21998:	1000081e 	bne	r2,zero,219bc <OSTaskNameSet+0x16c>
   2199c:	e0bff517 	ldw	r2,-44(fp)
   219a0:	e0bff915 	stw	r2,-28(fp)
   219a4:	e0bff917 	ldw	r2,-28(fp)
   219a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   219ac:	e0bfff17 	ldw	r2,-4(fp)
   219b0:	00c01044 	movi	r3,65
   219b4:	10c00005 	stb	r3,0(r2)
        return;
   219b8:	00000d06 	br	219f0 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   219bc:	e0bff717 	ldw	r2,-36(fp)
   219c0:	10801304 	addi	r2,r2,76
   219c4:	e17ffe17 	ldw	r5,-8(fp)
   219c8:	1009883a 	mov	r4,r2
   219cc:	001c8a80 	call	1c8a8 <OS_StrCopy>
   219d0:	e0bff517 	ldw	r2,-44(fp)
   219d4:	e0bffb15 	stw	r2,-20(fp)
   219d8:	e0bffb17 	ldw	r2,-20(fp)
   219dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   219e0:	e0bfff17 	ldw	r2,-4(fp)
   219e4:	10000005 	stb	zero,0(r2)
   219e8:	00000106 	br	219f0 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   219ec:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   219f0:	e037883a 	mov	sp,fp
   219f4:	dfc00117 	ldw	ra,4(sp)
   219f8:	df000017 	ldw	fp,0(sp)
   219fc:	dec00204 	addi	sp,sp,8
   21a00:	f800283a 	ret

00021a04 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   21a04:	defff404 	addi	sp,sp,-48
   21a08:	dfc00b15 	stw	ra,44(sp)
   21a0c:	df000a15 	stw	fp,40(sp)
   21a10:	df000a04 	addi	fp,sp,40
   21a14:	2005883a 	mov	r2,r4
   21a18:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   21a1c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   21a20:	e0bfff03 	ldbu	r2,-4(fp)
   21a24:	10800530 	cmpltui	r2,r2,20
   21a28:	1000021e 	bne	r2,zero,21a34 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   21a2c:	00800a84 	movi	r2,42
   21a30:	00006406 	br	21bc4 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21a34:	0005303a 	rdctl	r2,status
   21a38:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21a3c:	e0fffe17 	ldw	r3,-8(fp)
   21a40:	00bfff84 	movi	r2,-2
   21a44:	1884703a 	and	r2,r3,r2
   21a48:	1001703a 	wrctl	status,r2
  
  return context;
   21a4c:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   21a50:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   21a54:	e0ffff03 	ldbu	r3,-4(fp)
   21a58:	008000f4 	movhi	r2,3
   21a5c:	10b9c504 	addi	r2,r2,-6380
   21a60:	18c7883a 	add	r3,r3,r3
   21a64:	18c7883a 	add	r3,r3,r3
   21a68:	10c5883a 	add	r2,r2,r3
   21a6c:	10800017 	ldw	r2,0(r2)
   21a70:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   21a74:	e0bff817 	ldw	r2,-32(fp)
   21a78:	1000061e 	bne	r2,zero,21a94 <OSTaskResume+0x90>
   21a7c:	e0bff617 	ldw	r2,-40(fp)
   21a80:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21a84:	e0bff717 	ldw	r2,-36(fp)
   21a88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   21a8c:	00801184 	movi	r2,70
   21a90:	00004c06 	br	21bc4 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   21a94:	e0bff817 	ldw	r2,-32(fp)
   21a98:	10800058 	cmpnei	r2,r2,1
   21a9c:	1000061e 	bne	r2,zero,21ab8 <OSTaskResume+0xb4>
   21aa0:	e0bff617 	ldw	r2,-40(fp)
   21aa4:	e0bff915 	stw	r2,-28(fp)
   21aa8:	e0bff917 	ldw	r2,-28(fp)
   21aac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   21ab0:	008010c4 	movi	r2,67
   21ab4:	00004306 	br	21bc4 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   21ab8:	e0bff817 	ldw	r2,-32(fp)
   21abc:	10800c03 	ldbu	r2,48(r2)
   21ac0:	10803fcc 	andi	r2,r2,255
   21ac4:	1080020c 	andi	r2,r2,8
   21ac8:	10003926 	beq	r2,zero,21bb0 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   21acc:	e0bff817 	ldw	r2,-32(fp)
   21ad0:	10c00c03 	ldbu	r3,48(r2)
   21ad4:	00bffdc4 	movi	r2,-9
   21ad8:	1884703a 	and	r2,r3,r2
   21adc:	1007883a 	mov	r3,r2
   21ae0:	e0bff817 	ldw	r2,-32(fp)
   21ae4:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   21ae8:	e0bff817 	ldw	r2,-32(fp)
   21aec:	10800c03 	ldbu	r2,48(r2)
   21af0:	10803fcc 	andi	r2,r2,255
   21af4:	1000281e 	bne	r2,zero,21b98 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   21af8:	e0bff817 	ldw	r2,-32(fp)
   21afc:	10800b8b 	ldhu	r2,46(r2)
   21b00:	10bfffcc 	andi	r2,r2,65535
   21b04:	10001f1e 	bne	r2,zero,21b84 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   21b08:	e0bff817 	ldw	r2,-32(fp)
   21b0c:	10c00d83 	ldbu	r3,54(r2)
   21b10:	d0a72b03 	ldbu	r2,-25428(gp)
   21b14:	1884b03a 	or	r2,r3,r2
   21b18:	d0a72b05 	stb	r2,-25428(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   21b1c:	e0bff817 	ldw	r2,-32(fp)
   21b20:	10800d03 	ldbu	r2,52(r2)
   21b24:	10c03fcc 	andi	r3,r2,255
   21b28:	e0bff817 	ldw	r2,-32(fp)
   21b2c:	10800d03 	ldbu	r2,52(r2)
   21b30:	11003fcc 	andi	r4,r2,255
   21b34:	d0a72b44 	addi	r2,gp,-25427
   21b38:	2085883a 	add	r2,r4,r2
   21b3c:	11000003 	ldbu	r4,0(r2)
   21b40:	e0bff817 	ldw	r2,-32(fp)
   21b44:	10800d43 	ldbu	r2,53(r2)
   21b48:	2084b03a 	or	r2,r4,r2
   21b4c:	1009883a 	mov	r4,r2
   21b50:	d0a72b44 	addi	r2,gp,-25427
   21b54:	1885883a 	add	r2,r3,r2
   21b58:	11000005 	stb	r4,0(r2)
   21b5c:	e0bff617 	ldw	r2,-40(fp)
   21b60:	e0bffa15 	stw	r2,-24(fp)
   21b64:	e0bffa17 	ldw	r2,-24(fp)
   21b68:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   21b6c:	d0a71f43 	ldbu	r2,-25475(gp)
   21b70:	10803fcc 	andi	r2,r2,255
   21b74:	10800058 	cmpnei	r2,r2,1
   21b78:	10000b1e 	bne	r2,zero,21ba8 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   21b7c:	001c7640 	call	1c764 <OS_Sched>
   21b80:	00000906 	br	21ba8 <OSTaskResume+0x1a4>
   21b84:	e0bff617 	ldw	r2,-40(fp)
   21b88:	e0bffb15 	stw	r2,-20(fp)
   21b8c:	e0bffb17 	ldw	r2,-20(fp)
   21b90:	1001703a 	wrctl	status,r2
   21b94:	00000406 	br	21ba8 <OSTaskResume+0x1a4>
   21b98:	e0bff617 	ldw	r2,-40(fp)
   21b9c:	e0bffc15 	stw	r2,-16(fp)
   21ba0:	e0bffc17 	ldw	r2,-16(fp)
   21ba4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   21ba8:	0005883a 	mov	r2,zero
   21bac:	00000506 	br	21bc4 <OSTaskResume+0x1c0>
   21bb0:	e0bff617 	ldw	r2,-40(fp)
   21bb4:	e0bffd15 	stw	r2,-12(fp)
   21bb8:	e0bffd17 	ldw	r2,-12(fp)
   21bbc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   21bc0:	00801104 	movi	r2,68
}
   21bc4:	e037883a 	mov	sp,fp
   21bc8:	dfc00117 	ldw	ra,4(sp)
   21bcc:	df000017 	ldw	fp,0(sp)
   21bd0:	dec00204 	addi	sp,sp,8
   21bd4:	f800283a 	ret

00021bd8 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   21bd8:	defff304 	addi	sp,sp,-52
   21bdc:	df000c15 	stw	fp,48(sp)
   21be0:	df000c04 	addi	fp,sp,48
   21be4:	2005883a 	mov	r2,r4
   21be8:	e17fff15 	stw	r5,-4(fp)
   21bec:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   21bf0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   21bf4:	e0bffe03 	ldbu	r2,-8(fp)
   21bf8:	10800570 	cmpltui	r2,r2,21
   21bfc:	1000051e 	bne	r2,zero,21c14 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   21c00:	e0bffe03 	ldbu	r2,-8(fp)
   21c04:	10803fe0 	cmpeqi	r2,r2,255
   21c08:	1000021e 	bne	r2,zero,21c14 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   21c0c:	00800a84 	movi	r2,42
   21c10:	00005d06 	br	21d88 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   21c14:	e0bfff17 	ldw	r2,-4(fp)
   21c18:	1000021e 	bne	r2,zero,21c24 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   21c1c:	00800244 	movi	r2,9
   21c20:	00005906 	br	21d88 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   21c24:	e0bfff17 	ldw	r2,-4(fp)
   21c28:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   21c2c:	e0bfff17 	ldw	r2,-4(fp)
   21c30:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21c34:	0005303a 	rdctl	r2,status
   21c38:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21c3c:	e0fffd17 	ldw	r3,-12(fp)
   21c40:	00bfff84 	movi	r2,-2
   21c44:	1884703a 	and	r2,r3,r2
   21c48:	1001703a 	wrctl	status,r2
  
  return context;
   21c4c:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   21c50:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   21c54:	e0bffe03 	ldbu	r2,-8(fp)
   21c58:	10803fd8 	cmpnei	r2,r2,255
   21c5c:	1000031e 	bne	r2,zero,21c6c <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   21c60:	d0a72e17 	ldw	r2,-25416(gp)
   21c64:	10800c83 	ldbu	r2,50(r2)
   21c68:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   21c6c:	e0fffe03 	ldbu	r3,-8(fp)
   21c70:	008000f4 	movhi	r2,3
   21c74:	10b9c504 	addi	r2,r2,-6380
   21c78:	18c7883a 	add	r3,r3,r3
   21c7c:	18c7883a 	add	r3,r3,r3
   21c80:	10c5883a 	add	r2,r2,r3
   21c84:	10800017 	ldw	r2,0(r2)
   21c88:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   21c8c:	e0bff817 	ldw	r2,-32(fp)
   21c90:	1000061e 	bne	r2,zero,21cac <OSTaskStkChk+0xd4>
   21c94:	e0bff617 	ldw	r2,-40(fp)
   21c98:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21c9c:	e0bff717 	ldw	r2,-36(fp)
   21ca0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   21ca4:	008010c4 	movi	r2,67
   21ca8:	00003706 	br	21d88 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   21cac:	e0bff817 	ldw	r2,-32(fp)
   21cb0:	10800058 	cmpnei	r2,r2,1
   21cb4:	1000061e 	bne	r2,zero,21cd0 <OSTaskStkChk+0xf8>
   21cb8:	e0bff617 	ldw	r2,-40(fp)
   21cbc:	e0bff915 	stw	r2,-28(fp)
   21cc0:	e0bff917 	ldw	r2,-28(fp)
   21cc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   21cc8:	008010c4 	movi	r2,67
   21ccc:	00002e06 	br	21d88 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   21cd0:	e0bff817 	ldw	r2,-32(fp)
   21cd4:	1080040b 	ldhu	r2,16(r2)
   21cd8:	10bfffcc 	andi	r2,r2,65535
   21cdc:	1080004c 	andi	r2,r2,1
   21ce0:	1000061e 	bne	r2,zero,21cfc <OSTaskStkChk+0x124>
   21ce4:	e0bff617 	ldw	r2,-40(fp)
   21ce8:	e0bffa15 	stw	r2,-24(fp)
   21cec:	e0bffa17 	ldw	r2,-24(fp)
   21cf0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   21cf4:	00801144 	movi	r2,69
   21cf8:	00002306 	br	21d88 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   21cfc:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   21d00:	e0bff817 	ldw	r2,-32(fp)
   21d04:	10800317 	ldw	r2,12(r2)
   21d08:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   21d0c:	e0bff817 	ldw	r2,-32(fp)
   21d10:	10800217 	ldw	r2,8(r2)
   21d14:	e0bff415 	stw	r2,-48(fp)
   21d18:	e0bff617 	ldw	r2,-40(fp)
   21d1c:	e0bffb15 	stw	r2,-20(fp)
   21d20:	e0bffb17 	ldw	r2,-20(fp)
   21d24:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   21d28:	00000306 	br	21d38 <OSTaskStkChk+0x160>
        nfree++;
   21d2c:	e0bff517 	ldw	r2,-44(fp)
   21d30:	10800044 	addi	r2,r2,1
   21d34:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   21d38:	e0bff417 	ldw	r2,-48(fp)
   21d3c:	10c00104 	addi	r3,r2,4
   21d40:	e0fff415 	stw	r3,-48(fp)
   21d44:	10800017 	ldw	r2,0(r2)
   21d48:	103ff826 	beq	r2,zero,21d2c <__alt_data_end+0xfc021d2c>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   21d4c:	e0bff517 	ldw	r2,-44(fp)
   21d50:	1085883a 	add	r2,r2,r2
   21d54:	1085883a 	add	r2,r2,r2
   21d58:	1007883a 	mov	r3,r2
   21d5c:	e0bfff17 	ldw	r2,-4(fp)
   21d60:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   21d64:	e0fffc17 	ldw	r3,-16(fp)
   21d68:	e0bff517 	ldw	r2,-44(fp)
   21d6c:	1885c83a 	sub	r2,r3,r2
   21d70:	1085883a 	add	r2,r2,r2
   21d74:	1085883a 	add	r2,r2,r2
   21d78:	1007883a 	mov	r3,r2
   21d7c:	e0bfff17 	ldw	r2,-4(fp)
   21d80:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   21d84:	0005883a 	mov	r2,zero
}
   21d88:	e037883a 	mov	sp,fp
   21d8c:	df000017 	ldw	fp,0(sp)
   21d90:	dec00104 	addi	sp,sp,4
   21d94:	f800283a 	ret

00021d98 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   21d98:	defff504 	addi	sp,sp,-44
   21d9c:	dfc00a15 	stw	ra,40(sp)
   21da0:	df000915 	stw	fp,36(sp)
   21da4:	df000904 	addi	fp,sp,36
   21da8:	2005883a 	mov	r2,r4
   21dac:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   21db0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   21db4:	e0bfff03 	ldbu	r2,-4(fp)
   21db8:	10800518 	cmpnei	r2,r2,20
   21dbc:	1000021e 	bne	r2,zero,21dc8 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   21dc0:	008011c4 	movi	r2,71
   21dc4:	00006806 	br	21f68 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   21dc8:	e0bfff03 	ldbu	r2,-4(fp)
   21dcc:	10800530 	cmpltui	r2,r2,20
   21dd0:	1000051e 	bne	r2,zero,21de8 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   21dd4:	e0bfff03 	ldbu	r2,-4(fp)
   21dd8:	10803fe0 	cmpeqi	r2,r2,255
   21ddc:	1000021e 	bne	r2,zero,21de8 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   21de0:	00800a84 	movi	r2,42
   21de4:	00006006 	br	21f68 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21de8:	0005303a 	rdctl	r2,status
   21dec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21df0:	e0fffe17 	ldw	r3,-8(fp)
   21df4:	00bfff84 	movi	r2,-2
   21df8:	1884703a 	and	r2,r3,r2
   21dfc:	1001703a 	wrctl	status,r2
  
  return context;
   21e00:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   21e04:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   21e08:	e0bfff03 	ldbu	r2,-4(fp)
   21e0c:	10803fd8 	cmpnei	r2,r2,255
   21e10:	1000061e 	bne	r2,zero,21e2c <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   21e14:	d0a72e17 	ldw	r2,-25416(gp)
   21e18:	10800c83 	ldbu	r2,50(r2)
   21e1c:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   21e20:	00800044 	movi	r2,1
   21e24:	e0bff705 	stb	r2,-36(fp)
   21e28:	00000906 	br	21e50 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   21e2c:	d0a72e17 	ldw	r2,-25416(gp)
   21e30:	10800c83 	ldbu	r2,50(r2)
   21e34:	10c03fcc 	andi	r3,r2,255
   21e38:	e0bfff03 	ldbu	r2,-4(fp)
   21e3c:	1880031e 	bne	r3,r2,21e4c <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   21e40:	00800044 	movi	r2,1
   21e44:	e0bff705 	stb	r2,-36(fp)
   21e48:	00000106 	br	21e50 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   21e4c:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   21e50:	e0ffff03 	ldbu	r3,-4(fp)
   21e54:	008000f4 	movhi	r2,3
   21e58:	10b9c504 	addi	r2,r2,-6380
   21e5c:	18c7883a 	add	r3,r3,r3
   21e60:	18c7883a 	add	r3,r3,r3
   21e64:	10c5883a 	add	r2,r2,r3
   21e68:	10800017 	ldw	r2,0(r2)
   21e6c:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   21e70:	e0bffa17 	ldw	r2,-24(fp)
   21e74:	1000061e 	bne	r2,zero,21e90 <OSTaskSuspend+0xf8>
   21e78:	e0bff817 	ldw	r2,-32(fp)
   21e7c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21e80:	e0bff917 	ldw	r2,-28(fp)
   21e84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   21e88:	00801204 	movi	r2,72
   21e8c:	00003606 	br	21f68 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   21e90:	e0bffa17 	ldw	r2,-24(fp)
   21e94:	10800058 	cmpnei	r2,r2,1
   21e98:	1000061e 	bne	r2,zero,21eb4 <OSTaskSuspend+0x11c>
   21e9c:	e0bff817 	ldw	r2,-32(fp)
   21ea0:	e0bffb15 	stw	r2,-20(fp)
   21ea4:	e0bffb17 	ldw	r2,-20(fp)
   21ea8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   21eac:	008010c4 	movi	r2,67
   21eb0:	00002d06 	br	21f68 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   21eb4:	e0bffa17 	ldw	r2,-24(fp)
   21eb8:	10800d03 	ldbu	r2,52(r2)
   21ebc:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   21ec0:	e0fffd03 	ldbu	r3,-12(fp)
   21ec4:	e13ffd03 	ldbu	r4,-12(fp)
   21ec8:	d0a72b44 	addi	r2,gp,-25427
   21ecc:	2085883a 	add	r2,r4,r2
   21ed0:	10800003 	ldbu	r2,0(r2)
   21ed4:	1009883a 	mov	r4,r2
   21ed8:	e0bffa17 	ldw	r2,-24(fp)
   21edc:	10800d43 	ldbu	r2,53(r2)
   21ee0:	0084303a 	nor	r2,zero,r2
   21ee4:	2084703a 	and	r2,r4,r2
   21ee8:	1009883a 	mov	r4,r2
   21eec:	d0a72b44 	addi	r2,gp,-25427
   21ef0:	1885883a 	add	r2,r3,r2
   21ef4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   21ef8:	e0fffd03 	ldbu	r3,-12(fp)
   21efc:	d0a72b44 	addi	r2,gp,-25427
   21f00:	1885883a 	add	r2,r3,r2
   21f04:	10800003 	ldbu	r2,0(r2)
   21f08:	10803fcc 	andi	r2,r2,255
   21f0c:	1000071e 	bne	r2,zero,21f2c <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   21f10:	e0bffa17 	ldw	r2,-24(fp)
   21f14:	10800d83 	ldbu	r2,54(r2)
   21f18:	0084303a 	nor	r2,zero,r2
   21f1c:	1007883a 	mov	r3,r2
   21f20:	d0a72b03 	ldbu	r2,-25428(gp)
   21f24:	1884703a 	and	r2,r3,r2
   21f28:	d0a72b05 	stb	r2,-25428(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   21f2c:	e0bffa17 	ldw	r2,-24(fp)
   21f30:	10800c03 	ldbu	r2,48(r2)
   21f34:	10800214 	ori	r2,r2,8
   21f38:	1007883a 	mov	r3,r2
   21f3c:	e0bffa17 	ldw	r2,-24(fp)
   21f40:	10c00c05 	stb	r3,48(r2)
   21f44:	e0bff817 	ldw	r2,-32(fp)
   21f48:	e0bffc15 	stw	r2,-16(fp)
   21f4c:	e0bffc17 	ldw	r2,-16(fp)
   21f50:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   21f54:	e0bff703 	ldbu	r2,-36(fp)
   21f58:	10800058 	cmpnei	r2,r2,1
   21f5c:	1000011e 	bne	r2,zero,21f64 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   21f60:	001c7640 	call	1c764 <OS_Sched>
    }
    return (OS_ERR_NONE);
   21f64:	0005883a 	mov	r2,zero
}
   21f68:	e037883a 	mov	sp,fp
   21f6c:	dfc00117 	ldw	ra,4(sp)
   21f70:	df000017 	ldw	fp,0(sp)
   21f74:	dec00204 	addi	sp,sp,8
   21f78:	f800283a 	ret

00021f7c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   21f7c:	defff604 	addi	sp,sp,-40
   21f80:	dfc00915 	stw	ra,36(sp)
   21f84:	df000815 	stw	fp,32(sp)
   21f88:	df000804 	addi	fp,sp,32
   21f8c:	2005883a 	mov	r2,r4
   21f90:	e17fff15 	stw	r5,-4(fp)
   21f94:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   21f98:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   21f9c:	e0bffe03 	ldbu	r2,-8(fp)
   21fa0:	10800570 	cmpltui	r2,r2,21
   21fa4:	1000051e 	bne	r2,zero,21fbc <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   21fa8:	e0bffe03 	ldbu	r2,-8(fp)
   21fac:	10803fe0 	cmpeqi	r2,r2,255
   21fb0:	1000021e 	bne	r2,zero,21fbc <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   21fb4:	00800a84 	movi	r2,42
   21fb8:	00003406 	br	2208c <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   21fbc:	e0bfff17 	ldw	r2,-4(fp)
   21fc0:	1000021e 	bne	r2,zero,21fcc <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   21fc4:	00800244 	movi	r2,9
   21fc8:	00003006 	br	2208c <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21fcc:	0005303a 	rdctl	r2,status
   21fd0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21fd4:	e0fffd17 	ldw	r3,-12(fp)
   21fd8:	00bfff84 	movi	r2,-2
   21fdc:	1884703a 	and	r2,r3,r2
   21fe0:	1001703a 	wrctl	status,r2
  
  return context;
   21fe4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   21fe8:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   21fec:	e0bffe03 	ldbu	r2,-8(fp)
   21ff0:	10803fd8 	cmpnei	r2,r2,255
   21ff4:	1000031e 	bne	r2,zero,22004 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   21ff8:	d0a72e17 	ldw	r2,-25416(gp)
   21ffc:	10800c83 	ldbu	r2,50(r2)
   22000:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   22004:	e0fffe03 	ldbu	r3,-8(fp)
   22008:	008000f4 	movhi	r2,3
   2200c:	10b9c504 	addi	r2,r2,-6380
   22010:	18c7883a 	add	r3,r3,r3
   22014:	18c7883a 	add	r3,r3,r3
   22018:	10c5883a 	add	r2,r2,r3
   2201c:	10800017 	ldw	r2,0(r2)
   22020:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   22024:	e0bffa17 	ldw	r2,-24(fp)
   22028:	1000061e 	bne	r2,zero,22044 <OSTaskQuery+0xc8>
   2202c:	e0bff817 	ldw	r2,-32(fp)
   22030:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22034:	e0bff917 	ldw	r2,-28(fp)
   22038:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   2203c:	00800a44 	movi	r2,41
   22040:	00001206 	br	2208c <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   22044:	e0bffa17 	ldw	r2,-24(fp)
   22048:	10800058 	cmpnei	r2,r2,1
   2204c:	1000061e 	bne	r2,zero,22068 <OSTaskQuery+0xec>
   22050:	e0bff817 	ldw	r2,-32(fp)
   22054:	e0bffb15 	stw	r2,-20(fp)
   22058:	e0bffb17 	ldw	r2,-20(fp)
   2205c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   22060:	008010c4 	movi	r2,67
   22064:	00000906 	br	2208c <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   22068:	01801b04 	movi	r6,108
   2206c:	e17ffa17 	ldw	r5,-24(fp)
   22070:	e13fff17 	ldw	r4,-4(fp)
   22074:	001c6fc0 	call	1c6fc <OS_MemCopy>
   22078:	e0bff817 	ldw	r2,-32(fp)
   2207c:	e0bffc15 	stw	r2,-16(fp)
   22080:	e0bffc17 	ldw	r2,-16(fp)
   22084:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   22088:	0005883a 	mov	r2,zero
}
   2208c:	e037883a 	mov	sp,fp
   22090:	dfc00117 	ldw	ra,4(sp)
   22094:	df000017 	ldw	fp,0(sp)
   22098:	dec00204 	addi	sp,sp,8
   2209c:	f800283a 	ret

000220a0 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   220a0:	defffc04 	addi	sp,sp,-16
   220a4:	df000315 	stw	fp,12(sp)
   220a8:	df000304 	addi	fp,sp,12
   220ac:	e13ffd15 	stw	r4,-12(fp)
   220b0:	e17ffe15 	stw	r5,-8(fp)
   220b4:	3005883a 	mov	r2,r6
   220b8:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   220bc:	e0bfff0b 	ldhu	r2,-4(fp)
   220c0:	1080004c 	andi	r2,r2,1
   220c4:	10000d26 	beq	r2,zero,220fc <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   220c8:	e0bfff0b 	ldhu	r2,-4(fp)
   220cc:	1080008c 	andi	r2,r2,2
   220d0:	10000a26 	beq	r2,zero,220fc <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   220d4:	00000706 	br	220f4 <OS_TaskStkClr+0x54>
                size--;
   220d8:	e0bffe17 	ldw	r2,-8(fp)
   220dc:	10bfffc4 	addi	r2,r2,-1
   220e0:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   220e4:	e0bffd17 	ldw	r2,-12(fp)
   220e8:	10c00104 	addi	r3,r2,4
   220ec:	e0fffd15 	stw	r3,-12(fp)
   220f0:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   220f4:	e0bffe17 	ldw	r2,-8(fp)
   220f8:	103ff71e 	bne	r2,zero,220d8 <__alt_data_end+0xfc0220d8>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   220fc:	0001883a 	nop
   22100:	e037883a 	mov	sp,fp
   22104:	df000017 	ldw	fp,0(sp)
   22108:	dec00104 	addi	sp,sp,4
   2210c:	f800283a 	ret

00022110 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   22110:	defff904 	addi	sp,sp,-28
   22114:	dfc00615 	stw	ra,24(sp)
   22118:	df000515 	stw	fp,20(sp)
   2211c:	df000504 	addi	fp,sp,20
   22120:	2005883a 	mov	r2,r4
   22124:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   22128:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   2212c:	d0a72d03 	ldbu	r2,-25420(gp)
   22130:	10803fcc 	andi	r2,r2,255
   22134:	1000311e 	bne	r2,zero,221fc <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   22138:	e0bfff0b 	ldhu	r2,-4(fp)
   2213c:	10003026 	beq	r2,zero,22200 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22140:	0005303a 	rdctl	r2,status
   22144:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22148:	e0fffe17 	ldw	r3,-8(fp)
   2214c:	00bfff84 	movi	r2,-2
   22150:	1884703a 	and	r2,r3,r2
   22154:	1001703a 	wrctl	status,r2
  
  return context;
   22158:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   2215c:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   22160:	d0a72e17 	ldw	r2,-25416(gp)
   22164:	10800d03 	ldbu	r2,52(r2)
   22168:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   2216c:	e0fffd03 	ldbu	r3,-12(fp)
   22170:	e13ffd03 	ldbu	r4,-12(fp)
   22174:	d0a72b44 	addi	r2,gp,-25427
   22178:	2085883a 	add	r2,r4,r2
   2217c:	10800003 	ldbu	r2,0(r2)
   22180:	1009883a 	mov	r4,r2
   22184:	d0a72e17 	ldw	r2,-25416(gp)
   22188:	10800d43 	ldbu	r2,53(r2)
   2218c:	0084303a 	nor	r2,zero,r2
   22190:	2084703a 	and	r2,r4,r2
   22194:	1009883a 	mov	r4,r2
   22198:	d0a72b44 	addi	r2,gp,-25427
   2219c:	1885883a 	add	r2,r3,r2
   221a0:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   221a4:	e0fffd03 	ldbu	r3,-12(fp)
   221a8:	d0a72b44 	addi	r2,gp,-25427
   221ac:	1885883a 	add	r2,r3,r2
   221b0:	10800003 	ldbu	r2,0(r2)
   221b4:	10803fcc 	andi	r2,r2,255
   221b8:	1000071e 	bne	r2,zero,221d8 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   221bc:	d0a72e17 	ldw	r2,-25416(gp)
   221c0:	10800d83 	ldbu	r2,54(r2)
   221c4:	0084303a 	nor	r2,zero,r2
   221c8:	1007883a 	mov	r3,r2
   221cc:	d0a72b03 	ldbu	r2,-25428(gp)
   221d0:	1884703a 	and	r2,r3,r2
   221d4:	d0a72b05 	stb	r2,-25428(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   221d8:	d0a72e17 	ldw	r2,-25416(gp)
   221dc:	e0ffff0b 	ldhu	r3,-4(fp)
   221e0:	10c00b8d 	sth	r3,46(r2)
   221e4:	e0bffb17 	ldw	r2,-20(fp)
   221e8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   221ec:	e0bffc17 	ldw	r2,-16(fp)
   221f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   221f4:	001c7640 	call	1c764 <OS_Sched>
   221f8:	00000106 	br	22200 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   221fc:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   22200:	e037883a 	mov	sp,fp
   22204:	dfc00117 	ldw	ra,4(sp)
   22208:	df000017 	ldw	fp,0(sp)
   2220c:	dec00204 	addi	sp,sp,8
   22210:	f800283a 	ret

00022214 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   22214:	defff804 	addi	sp,sp,-32
   22218:	dfc00715 	stw	ra,28(sp)
   2221c:	df000615 	stw	fp,24(sp)
   22220:	df000604 	addi	fp,sp,24
   22224:	2015883a 	mov	r10,r4
   22228:	2809883a 	mov	r4,r5
   2222c:	3007883a 	mov	r3,r6
   22230:	3805883a 	mov	r2,r7
   22234:	e2bffc05 	stb	r10,-16(fp)
   22238:	e13ffd05 	stb	r4,-12(fp)
   2223c:	e0fffe05 	stb	r3,-8(fp)
   22240:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   22244:	d0a72d03 	ldbu	r2,-25420(gp)
   22248:	10803fcc 	andi	r2,r2,255
   2224c:	10000226 	beq	r2,zero,22258 <OSTimeDlyHMSM+0x44>
        return (OS_ERR_TIME_DLY_ISR);
   22250:	00801544 	movi	r2,85
   22254:	00004206 	br	22360 <OSTimeDlyHMSM+0x14c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   22258:	e0bffc03 	ldbu	r2,-16(fp)
   2225c:	1000081e 	bne	r2,zero,22280 <OSTimeDlyHMSM+0x6c>
        if (minutes == 0) {
   22260:	e0bffd03 	ldbu	r2,-12(fp)
   22264:	1000061e 	bne	r2,zero,22280 <OSTimeDlyHMSM+0x6c>
            if (seconds == 0) {
   22268:	e0bffe03 	ldbu	r2,-8(fp)
   2226c:	1000041e 	bne	r2,zero,22280 <OSTimeDlyHMSM+0x6c>
                if (ms == 0) {
   22270:	e0bfff0b 	ldhu	r2,-4(fp)
   22274:	1000021e 	bne	r2,zero,22280 <OSTimeDlyHMSM+0x6c>
                    return (OS_ERR_TIME_ZERO_DLY);
   22278:	00801504 	movi	r2,84
   2227c:	00003806 	br	22360 <OSTimeDlyHMSM+0x14c>
                }
            }
        }
    }
    if (minutes > 59) {
   22280:	e0bffd03 	ldbu	r2,-12(fp)
   22284:	10800f30 	cmpltui	r2,r2,60
   22288:	1000021e 	bne	r2,zero,22294 <OSTimeDlyHMSM+0x80>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   2228c:	00801444 	movi	r2,81
   22290:	00003306 	br	22360 <OSTimeDlyHMSM+0x14c>
    }
    if (seconds > 59) {
   22294:	e0bffe03 	ldbu	r2,-8(fp)
   22298:	10800f30 	cmpltui	r2,r2,60
   2229c:	1000021e 	bne	r2,zero,222a8 <OSTimeDlyHMSM+0x94>
        return (OS_ERR_TIME_INVALID_SECONDS);
   222a0:	00801484 	movi	r2,82
   222a4:	00002e06 	br	22360 <OSTimeDlyHMSM+0x14c>
    }
    if (ms > 999) {
   222a8:	e0bfff0b 	ldhu	r2,-4(fp)
   222ac:	1080fa30 	cmpltui	r2,r2,1000
   222b0:	1000021e 	bne	r2,zero,222bc <OSTimeDlyHMSM+0xa8>
        return (OS_ERR_TIME_INVALID_MS);
   222b4:	008014c4 	movi	r2,83
   222b8:	00002906 	br	22360 <OSTimeDlyHMSM+0x14c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   222bc:	e0bffc03 	ldbu	r2,-16(fp)
   222c0:	10c38424 	muli	r3,r2,3600
   222c4:	e0bffd03 	ldbu	r2,-12(fp)
   222c8:	10800f24 	muli	r2,r2,60
   222cc:	1887883a 	add	r3,r3,r2
   222d0:	e0bffe03 	ldbu	r2,-8(fp)
   222d4:	1885883a 	add	r2,r3,r2
   222d8:	100891ba 	slli	r4,r2,6
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   222dc:	e0bfff0b 	ldhu	r2,-4(fp)
   222e0:	108001c4 	addi	r2,r2,7
   222e4:	100691ba 	slli	r3,r2,6
   222e8:	008418b4 	movhi	r2,4194
   222ec:	109374c4 	addi	r2,r2,19923
   222f0:	188a383a 	mulxuu	r5,r3,r2
   222f4:	1885383a 	mul	r2,r3,r2
   222f8:	1011883a 	mov	r8,r2
   222fc:	2813883a 	mov	r9,r5
   22300:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   22304:	2085883a 	add	r2,r4,r2
   22308:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   2230c:	e0bffb17 	ldw	r2,-20(fp)
   22310:	1004d43a 	srli	r2,r2,16
   22314:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   22318:	e0bffb17 	ldw	r2,-20(fp)
   2231c:	10bfffcc 	andi	r2,r2,65535
   22320:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   22324:	e0bffb17 	ldw	r2,-20(fp)
   22328:	10bfffcc 	andi	r2,r2,65535
   2232c:	1009883a 	mov	r4,r2
   22330:	00221100 	call	22110 <OSTimeDly>
    while (loops > 0) {
   22334:	00000706 	br	22354 <OSTimeDlyHMSM+0x140>
        OSTimeDly((INT16U)32768u);
   22338:	01200014 	movui	r4,32768
   2233c:	00221100 	call	22110 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   22340:	01200014 	movui	r4,32768
   22344:	00221100 	call	22110 <OSTimeDly>
        loops--;
   22348:	e0bffa0b 	ldhu	r2,-24(fp)
   2234c:	10bfffc4 	addi	r2,r2,-1
   22350:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   22354:	e0bffa0b 	ldhu	r2,-24(fp)
   22358:	103ff71e 	bne	r2,zero,22338 <__alt_data_end+0xfc022338>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   2235c:	0005883a 	mov	r2,zero
}
   22360:	e037883a 	mov	sp,fp
   22364:	dfc00117 	ldw	ra,4(sp)
   22368:	df000017 	ldw	fp,0(sp)
   2236c:	dec00204 	addi	sp,sp,8
   22370:	f800283a 	ret

00022374 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   22374:	defff504 	addi	sp,sp,-44
   22378:	dfc00a15 	stw	ra,40(sp)
   2237c:	df000915 	stw	fp,36(sp)
   22380:	df000904 	addi	fp,sp,36
   22384:	2005883a 	mov	r2,r4
   22388:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   2238c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   22390:	e0bfff03 	ldbu	r2,-4(fp)
   22394:	10800530 	cmpltui	r2,r2,20
   22398:	1000021e 	bne	r2,zero,223a4 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   2239c:	00800a84 	movi	r2,42
   223a0:	00006406 	br	22534 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   223a4:	0005303a 	rdctl	r2,status
   223a8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   223ac:	e0fffe17 	ldw	r3,-8(fp)
   223b0:	00bfff84 	movi	r2,-2
   223b4:	1884703a 	and	r2,r3,r2
   223b8:	1001703a 	wrctl	status,r2
  
  return context;
   223bc:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   223c0:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   223c4:	e0ffff03 	ldbu	r3,-4(fp)
   223c8:	008000f4 	movhi	r2,3
   223cc:	10b9c504 	addi	r2,r2,-6380
   223d0:	18c7883a 	add	r3,r3,r3
   223d4:	18c7883a 	add	r3,r3,r3
   223d8:	10c5883a 	add	r2,r2,r3
   223dc:	10800017 	ldw	r2,0(r2)
   223e0:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   223e4:	e0bff917 	ldw	r2,-28(fp)
   223e8:	1000061e 	bne	r2,zero,22404 <OSTimeDlyResume+0x90>
   223ec:	e0bff717 	ldw	r2,-36(fp)
   223f0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   223f4:	e0bff817 	ldw	r2,-32(fp)
   223f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   223fc:	008010c4 	movi	r2,67
   22400:	00004c06 	br	22534 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   22404:	e0bff917 	ldw	r2,-28(fp)
   22408:	10800058 	cmpnei	r2,r2,1
   2240c:	1000061e 	bne	r2,zero,22428 <OSTimeDlyResume+0xb4>
   22410:	e0bff717 	ldw	r2,-36(fp)
   22414:	e0bffa15 	stw	r2,-24(fp)
   22418:	e0bffa17 	ldw	r2,-24(fp)
   2241c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   22420:	008010c4 	movi	r2,67
   22424:	00004306 	br	22534 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   22428:	e0bff917 	ldw	r2,-28(fp)
   2242c:	10800b8b 	ldhu	r2,46(r2)
   22430:	10bfffcc 	andi	r2,r2,65535
   22434:	1000061e 	bne	r2,zero,22450 <OSTimeDlyResume+0xdc>
   22438:	e0bff717 	ldw	r2,-36(fp)
   2243c:	e0bffb15 	stw	r2,-20(fp)
   22440:	e0bffb17 	ldw	r2,-20(fp)
   22444:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   22448:	00801404 	movi	r2,80
   2244c:	00003906 	br	22534 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   22450:	e0bff917 	ldw	r2,-28(fp)
   22454:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   22458:	e0bff917 	ldw	r2,-28(fp)
   2245c:	10800c03 	ldbu	r2,48(r2)
   22460:	10803fcc 	andi	r2,r2,255
   22464:	10800dcc 	andi	r2,r2,55
   22468:	10000b26 	beq	r2,zero,22498 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   2246c:	e0bff917 	ldw	r2,-28(fp)
   22470:	10c00c03 	ldbu	r3,48(r2)
   22474:	00bff204 	movi	r2,-56
   22478:	1884703a 	and	r2,r3,r2
   2247c:	1007883a 	mov	r3,r2
   22480:	e0bff917 	ldw	r2,-28(fp)
   22484:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   22488:	e0bff917 	ldw	r2,-28(fp)
   2248c:	00c00044 	movi	r3,1
   22490:	10c00c45 	stb	r3,49(r2)
   22494:	00000206 	br	224a0 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   22498:	e0bff917 	ldw	r2,-28(fp)
   2249c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   224a0:	e0bff917 	ldw	r2,-28(fp)
   224a4:	10800c03 	ldbu	r2,48(r2)
   224a8:	10803fcc 	andi	r2,r2,255
   224ac:	1080020c 	andi	r2,r2,8
   224b0:	10001b1e 	bne	r2,zero,22520 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   224b4:	e0bff917 	ldw	r2,-28(fp)
   224b8:	10c00d83 	ldbu	r3,54(r2)
   224bc:	d0a72b03 	ldbu	r2,-25428(gp)
   224c0:	1884b03a 	or	r2,r3,r2
   224c4:	d0a72b05 	stb	r2,-25428(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   224c8:	e0bff917 	ldw	r2,-28(fp)
   224cc:	10800d03 	ldbu	r2,52(r2)
   224d0:	10c03fcc 	andi	r3,r2,255
   224d4:	e0bff917 	ldw	r2,-28(fp)
   224d8:	10800d03 	ldbu	r2,52(r2)
   224dc:	11003fcc 	andi	r4,r2,255
   224e0:	d0a72b44 	addi	r2,gp,-25427
   224e4:	2085883a 	add	r2,r4,r2
   224e8:	11000003 	ldbu	r4,0(r2)
   224ec:	e0bff917 	ldw	r2,-28(fp)
   224f0:	10800d43 	ldbu	r2,53(r2)
   224f4:	2084b03a 	or	r2,r4,r2
   224f8:	1009883a 	mov	r4,r2
   224fc:	d0a72b44 	addi	r2,gp,-25427
   22500:	1885883a 	add	r2,r3,r2
   22504:	11000005 	stb	r4,0(r2)
   22508:	e0bff717 	ldw	r2,-36(fp)
   2250c:	e0bffc15 	stw	r2,-16(fp)
   22510:	e0bffc17 	ldw	r2,-16(fp)
   22514:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   22518:	001c7640 	call	1c764 <OS_Sched>
   2251c:	00000406 	br	22530 <OSTimeDlyResume+0x1bc>
   22520:	e0bff717 	ldw	r2,-36(fp)
   22524:	e0bffd15 	stw	r2,-12(fp)
   22528:	e0bffd17 	ldw	r2,-12(fp)
   2252c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   22530:	0005883a 	mov	r2,zero
}
   22534:	e037883a 	mov	sp,fp
   22538:	dfc00117 	ldw	ra,4(sp)
   2253c:	df000017 	ldw	fp,0(sp)
   22540:	dec00204 	addi	sp,sp,8
   22544:	f800283a 	ret

00022548 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   22548:	defffb04 	addi	sp,sp,-20
   2254c:	df000415 	stw	fp,16(sp)
   22550:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   22554:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22558:	0005303a 	rdctl	r2,status
   2255c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22560:	e0fffe17 	ldw	r3,-8(fp)
   22564:	00bfff84 	movi	r2,-2
   22568:	1884703a 	and	r2,r3,r2
   2256c:	1001703a 	wrctl	status,r2
  
  return context;
   22570:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   22574:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   22578:	d0a72f17 	ldw	r2,-25412(gp)
   2257c:	e0bffd15 	stw	r2,-12(fp)
   22580:	e0bffc17 	ldw	r2,-16(fp)
   22584:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22588:	e0bfff17 	ldw	r2,-4(fp)
   2258c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   22590:	e0bffd17 	ldw	r2,-12(fp)
}
   22594:	e037883a 	mov	sp,fp
   22598:	df000017 	ldw	fp,0(sp)
   2259c:	dec00104 	addi	sp,sp,4
   225a0:	f800283a 	ret

000225a4 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   225a4:	defffb04 	addi	sp,sp,-20
   225a8:	df000415 	stw	fp,16(sp)
   225ac:	df000404 	addi	fp,sp,16
   225b0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   225b4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   225b8:	0005303a 	rdctl	r2,status
   225bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   225c0:	e0fffd17 	ldw	r3,-12(fp)
   225c4:	00bfff84 	movi	r2,-2
   225c8:	1884703a 	and	r2,r3,r2
   225cc:	1001703a 	wrctl	status,r2
  
  return context;
   225d0:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   225d4:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   225d8:	e0bfff17 	ldw	r2,-4(fp)
   225dc:	d0a72f15 	stw	r2,-25412(gp)
   225e0:	e0bffc17 	ldw	r2,-16(fp)
   225e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   225e8:	e0bffe17 	ldw	r2,-8(fp)
   225ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   225f0:	0001883a 	nop
   225f4:	e037883a 	mov	sp,fp
   225f8:	df000017 	ldw	fp,0(sp)
   225fc:	dec00104 	addi	sp,sp,4
   22600:	f800283a 	ret

00022604 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   22604:	defffd04 	addi	sp,sp,-12
   22608:	dfc00215 	stw	ra,8(sp)
   2260c:	df000115 	stw	fp,4(sp)
   22610:	df000104 	addi	fp,sp,4
   22614:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   22618:	d1600a04 	addi	r5,gp,-32728
   2261c:	e13fff17 	ldw	r4,-4(fp)
   22620:	002356c0 	call	2356c <alt_dev_llist_insert>
}
   22624:	e037883a 	mov	sp,fp
   22628:	dfc00117 	ldw	ra,4(sp)
   2262c:	df000017 	ldw	fp,0(sp)
   22630:	dec00204 	addi	sp,sp,8
   22634:	f800283a 	ret

00022638 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   22638:	defffd04 	addi	sp,sp,-12
   2263c:	dfc00215 	stw	ra,8(sp)
   22640:	df000115 	stw	fp,4(sp)
   22644:	df000104 	addi	fp,sp,4
   22648:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   2264c:	0023edc0 	call	23edc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   22650:	00800044 	movi	r2,1
   22654:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   22658:	0001883a 	nop
   2265c:	e037883a 	mov	sp,fp
   22660:	dfc00117 	ldw	ra,4(sp)
   22664:	df000017 	ldw	fp,0(sp)
   22668:	dec00204 	addi	sp,sp,8
   2266c:	f800283a 	ret

00022670 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   22670:	defffe04 	addi	sp,sp,-8
   22674:	dfc00115 	stw	ra,4(sp)
   22678:	df000015 	stw	fp,0(sp)
   2267c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   22680:	01800204 	movi	r6,8
   22684:	000b883a 	mov	r5,zero
   22688:	010000b4 	movhi	r4,2
   2268c:	2119e604 	addi	r4,r4,26520
   22690:	002281c0 	call	2281c <altera_avalon_jtag_uart_init>
   22694:	010000b4 	movhi	r4,2
   22698:	2119dc04 	addi	r4,r4,26480
   2269c:	00226040 	call	22604 <alt_dev_reg>
}
   226a0:	0001883a 	nop
   226a4:	e037883a 	mov	sp,fp
   226a8:	dfc00117 	ldw	ra,4(sp)
   226ac:	df000017 	ldw	fp,0(sp)
   226b0:	dec00204 	addi	sp,sp,8
   226b4:	f800283a 	ret

000226b8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   226b8:	defffa04 	addi	sp,sp,-24
   226bc:	dfc00515 	stw	ra,20(sp)
   226c0:	df000415 	stw	fp,16(sp)
   226c4:	df000404 	addi	fp,sp,16
   226c8:	e13ffd15 	stw	r4,-12(fp)
   226cc:	e17ffe15 	stw	r5,-8(fp)
   226d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   226d4:	e0bffd17 	ldw	r2,-12(fp)
   226d8:	10800017 	ldw	r2,0(r2)
   226dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   226e0:	e0bffc17 	ldw	r2,-16(fp)
   226e4:	10c00a04 	addi	r3,r2,40
   226e8:	e0bffd17 	ldw	r2,-12(fp)
   226ec:	10800217 	ldw	r2,8(r2)
   226f0:	100f883a 	mov	r7,r2
   226f4:	e1bfff17 	ldw	r6,-4(fp)
   226f8:	e17ffe17 	ldw	r5,-8(fp)
   226fc:	1809883a 	mov	r4,r3
   22700:	0022e640 	call	22e64 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   22704:	e037883a 	mov	sp,fp
   22708:	dfc00117 	ldw	ra,4(sp)
   2270c:	df000017 	ldw	fp,0(sp)
   22710:	dec00204 	addi	sp,sp,8
   22714:	f800283a 	ret

00022718 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   22718:	defffa04 	addi	sp,sp,-24
   2271c:	dfc00515 	stw	ra,20(sp)
   22720:	df000415 	stw	fp,16(sp)
   22724:	df000404 	addi	fp,sp,16
   22728:	e13ffd15 	stw	r4,-12(fp)
   2272c:	e17ffe15 	stw	r5,-8(fp)
   22730:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   22734:	e0bffd17 	ldw	r2,-12(fp)
   22738:	10800017 	ldw	r2,0(r2)
   2273c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   22740:	e0bffc17 	ldw	r2,-16(fp)
   22744:	10c00a04 	addi	r3,r2,40
   22748:	e0bffd17 	ldw	r2,-12(fp)
   2274c:	10800217 	ldw	r2,8(r2)
   22750:	100f883a 	mov	r7,r2
   22754:	e1bfff17 	ldw	r6,-4(fp)
   22758:	e17ffe17 	ldw	r5,-8(fp)
   2275c:	1809883a 	mov	r4,r3
   22760:	00231200 	call	23120 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   22764:	e037883a 	mov	sp,fp
   22768:	dfc00117 	ldw	ra,4(sp)
   2276c:	df000017 	ldw	fp,0(sp)
   22770:	dec00204 	addi	sp,sp,8
   22774:	f800283a 	ret

00022778 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   22778:	defffc04 	addi	sp,sp,-16
   2277c:	dfc00315 	stw	ra,12(sp)
   22780:	df000215 	stw	fp,8(sp)
   22784:	df000204 	addi	fp,sp,8
   22788:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2278c:	e0bfff17 	ldw	r2,-4(fp)
   22790:	10800017 	ldw	r2,0(r2)
   22794:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   22798:	e0bffe17 	ldw	r2,-8(fp)
   2279c:	10c00a04 	addi	r3,r2,40
   227a0:	e0bfff17 	ldw	r2,-4(fp)
   227a4:	10800217 	ldw	r2,8(r2)
   227a8:	100b883a 	mov	r5,r2
   227ac:	1809883a 	mov	r4,r3
   227b0:	0022d0c0 	call	22d0c <altera_avalon_jtag_uart_close>
}
   227b4:	e037883a 	mov	sp,fp
   227b8:	dfc00117 	ldw	ra,4(sp)
   227bc:	df000017 	ldw	fp,0(sp)
   227c0:	dec00204 	addi	sp,sp,8
   227c4:	f800283a 	ret

000227c8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   227c8:	defffa04 	addi	sp,sp,-24
   227cc:	dfc00515 	stw	ra,20(sp)
   227d0:	df000415 	stw	fp,16(sp)
   227d4:	df000404 	addi	fp,sp,16
   227d8:	e13ffd15 	stw	r4,-12(fp)
   227dc:	e17ffe15 	stw	r5,-8(fp)
   227e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   227e4:	e0bffd17 	ldw	r2,-12(fp)
   227e8:	10800017 	ldw	r2,0(r2)
   227ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   227f0:	e0bffc17 	ldw	r2,-16(fp)
   227f4:	10800a04 	addi	r2,r2,40
   227f8:	e1bfff17 	ldw	r6,-4(fp)
   227fc:	e17ffe17 	ldw	r5,-8(fp)
   22800:	1009883a 	mov	r4,r2
   22804:	0022d740 	call	22d74 <altera_avalon_jtag_uart_ioctl>
}
   22808:	e037883a 	mov	sp,fp
   2280c:	dfc00117 	ldw	ra,4(sp)
   22810:	df000017 	ldw	fp,0(sp)
   22814:	dec00204 	addi	sp,sp,8
   22818:	f800283a 	ret

0002281c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   2281c:	defff104 	addi	sp,sp,-60
   22820:	dfc00e15 	stw	ra,56(sp)
   22824:	df000d15 	stw	fp,52(sp)
   22828:	df000d04 	addi	fp,sp,52
   2282c:	e13ff915 	stw	r4,-28(fp)
   22830:	e17ffa15 	stw	r5,-24(fp)
   22834:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   22838:	e0bff917 	ldw	r2,-28(fp)
   2283c:	10800c04 	addi	r2,r2,48
   22840:	e0bff415 	stw	r2,-48(fp)
   22844:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   22848:	e0bff80b 	ldhu	r2,-32(fp)
   2284c:	e0fff884 	addi	r3,fp,-30
   22850:	180b883a 	mov	r5,r3
   22854:	1009883a 	mov	r4,r2
   22858:	001d2e00 	call	1d2e0 <OSFlagCreate>
   2285c:	1007883a 	mov	r3,r2
   22860:	e0bff417 	ldw	r2,-48(fp)
   22864:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   22868:	e0bff917 	ldw	r2,-28(fp)
   2286c:	10800a04 	addi	r2,r2,40
   22870:	e0bff515 	stw	r2,-44(fp)
   22874:	00800044 	movi	r2,1
   22878:	e0bff78d 	sth	r2,-34(fp)
   2287c:	e0bff78b 	ldhu	r2,-34(fp)
   22880:	1009883a 	mov	r4,r2
   22884:	001fff40 	call	1fff4 <OSSemCreate>
   22888:	1007883a 	mov	r3,r2
   2288c:	e0bff517 	ldw	r2,-44(fp)
   22890:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   22894:	e0bff917 	ldw	r2,-28(fp)
   22898:	10800b04 	addi	r2,r2,44
   2289c:	e0bff615 	stw	r2,-40(fp)
   228a0:	00800044 	movi	r2,1
   228a4:	e0bff70d 	sth	r2,-36(fp)
   228a8:	e0bff70b 	ldhu	r2,-36(fp)
   228ac:	1009883a 	mov	r4,r2
   228b0:	001fff40 	call	1fff4 <OSSemCreate>
   228b4:	1007883a 	mov	r3,r2
   228b8:	e0bff617 	ldw	r2,-40(fp)
   228bc:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   228c0:	e0bff917 	ldw	r2,-28(fp)
   228c4:	00c00044 	movi	r3,1
   228c8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   228cc:	e0bff917 	ldw	r2,-28(fp)
   228d0:	10800017 	ldw	r2,0(r2)
   228d4:	10800104 	addi	r2,r2,4
   228d8:	1007883a 	mov	r3,r2
   228dc:	e0bff917 	ldw	r2,-28(fp)
   228e0:	10800817 	ldw	r2,32(r2)
   228e4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   228e8:	e0bffa17 	ldw	r2,-24(fp)
   228ec:	e0fffb17 	ldw	r3,-20(fp)
   228f0:	d8000015 	stw	zero,0(sp)
   228f4:	e1fff917 	ldw	r7,-28(fp)
   228f8:	018000b4 	movhi	r6,2
   228fc:	318a5904 	addi	r6,r6,10596
   22900:	180b883a 	mov	r5,r3
   22904:	1009883a 	mov	r4,r2
   22908:	00237040 	call	23704 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   2290c:	e0bff917 	ldw	r2,-28(fp)
   22910:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   22914:	e0bff917 	ldw	r2,-28(fp)
   22918:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2291c:	d0e73417 	ldw	r3,-25392(gp)
   22920:	e1fff917 	ldw	r7,-28(fp)
   22924:	018000b4 	movhi	r6,2
   22928:	318b0204 	addi	r6,r6,11272
   2292c:	180b883a 	mov	r5,r3
   22930:	1009883a 	mov	r4,r2
   22934:	00233e40 	call	233e4 <alt_alarm_start>
   22938:	1000040e 	bge	r2,zero,2294c <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   2293c:	e0fff917 	ldw	r3,-28(fp)
   22940:	00a00034 	movhi	r2,32768
   22944:	10bfffc4 	addi	r2,r2,-1
   22948:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   2294c:	0001883a 	nop
   22950:	e037883a 	mov	sp,fp
   22954:	dfc00117 	ldw	ra,4(sp)
   22958:	df000017 	ldw	fp,0(sp)
   2295c:	dec00204 	addi	sp,sp,8
   22960:	f800283a 	ret

00022964 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   22964:	defff204 	addi	sp,sp,-56
   22968:	dfc00d15 	stw	ra,52(sp)
   2296c:	df000c15 	stw	fp,48(sp)
   22970:	df000c04 	addi	fp,sp,48
   22974:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   22978:	e0bfff17 	ldw	r2,-4(fp)
   2297c:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
   22980:	e0bff617 	ldw	r2,-40(fp)
   22984:	10800017 	ldw	r2,0(r2)
   22988:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2298c:	e0bff717 	ldw	r2,-36(fp)
   22990:	10800104 	addi	r2,r2,4
   22994:	10800037 	ldwio	r2,0(r2)
   22998:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   2299c:	e0bff817 	ldw	r2,-32(fp)
   229a0:	1080c00c 	andi	r2,r2,768
   229a4:	10009126 	beq	r2,zero,22bec <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   229a8:	e0bff817 	ldw	r2,-32(fp)
   229ac:	1080400c 	andi	r2,r2,256
   229b0:	10004726 	beq	r2,zero,22ad0 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   229b4:	00800074 	movhi	r2,1
   229b8:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   229bc:	e0bff617 	ldw	r2,-40(fp)
   229c0:	10800d17 	ldw	r2,52(r2)
   229c4:	10800044 	addi	r2,r2,1
   229c8:	1081ffcc 	andi	r2,r2,2047
   229cc:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   229d0:	e0bff617 	ldw	r2,-40(fp)
   229d4:	10c00e17 	ldw	r3,56(r2)
   229d8:	e0bff917 	ldw	r2,-28(fp)
   229dc:	18802726 	beq	r3,r2,22a7c <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   229e0:	e0bff717 	ldw	r2,-36(fp)
   229e4:	10800037 	ldwio	r2,0(r2)
   229e8:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   229ec:	e0bff417 	ldw	r2,-48(fp)
   229f0:	10a0000c 	andi	r2,r2,32768
   229f4:	10002326 	beq	r2,zero,22a84 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   229f8:	e0bff617 	ldw	r2,-40(fp)
   229fc:	10800d17 	ldw	r2,52(r2)
   22a00:	e0fff417 	ldw	r3,-48(fp)
   22a04:	1809883a 	mov	r4,r3
   22a08:	e0fff617 	ldw	r3,-40(fp)
   22a0c:	1885883a 	add	r2,r3,r2
   22a10:	10801104 	addi	r2,r2,68
   22a14:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   22a18:	e0bff617 	ldw	r2,-40(fp)
   22a1c:	10800d17 	ldw	r2,52(r2)
   22a20:	10800044 	addi	r2,r2,1
   22a24:	10c1ffcc 	andi	r3,r2,2047
   22a28:	e0bff617 	ldw	r2,-40(fp)
   22a2c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   22a30:	e0bff617 	ldw	r2,-40(fp)
   22a34:	10800c17 	ldw	r2,48(r2)
   22a38:	e0bffb15 	stw	r2,-20(fp)
   22a3c:	00800044 	movi	r2,1
   22a40:	e0bffc0d 	sth	r2,-16(fp)
   22a44:	00800044 	movi	r2,1
   22a48:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   22a4c:	d0a71f43 	ldbu	r2,-25475(gp)
   22a50:	10803fcc 	andi	r2,r2,255
   22a54:	103fd926 	beq	r2,zero,229bc <__alt_data_end+0xfc0229bc>
  {
    OSFlagPost (group, flags, opt, &err);
   22a58:	e0bffc0b 	ldhu	r2,-16(fp)
   22a5c:	e0fffc83 	ldbu	r3,-14(fp)
   22a60:	e13ffdc4 	addi	r4,fp,-9
   22a64:	200f883a 	mov	r7,r4
   22a68:	180d883a 	mov	r6,r3
   22a6c:	100b883a 	mov	r5,r2
   22a70:	e13ffb17 	ldw	r4,-20(fp)
   22a74:	001debc0 	call	1debc <OSFlagPost>
      }
   22a78:	003fd006 	br	229bc <__alt_data_end+0xfc0229bc>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   22a7c:	0001883a 	nop
   22a80:	00000106 	br	22a88 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   22a84:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   22a88:	e0bff417 	ldw	r2,-48(fp)
   22a8c:	10bfffec 	andhi	r2,r2,65535
   22a90:	10000f26 	beq	r2,zero,22ad0 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   22a94:	e0bff617 	ldw	r2,-40(fp)
   22a98:	10c00817 	ldw	r3,32(r2)
   22a9c:	00bfff84 	movi	r2,-2
   22aa0:	1886703a 	and	r3,r3,r2
   22aa4:	e0bff617 	ldw	r2,-40(fp)
   22aa8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   22aac:	e0bff717 	ldw	r2,-36(fp)
   22ab0:	10800104 	addi	r2,r2,4
   22ab4:	1007883a 	mov	r3,r2
   22ab8:	e0bff617 	ldw	r2,-40(fp)
   22abc:	10800817 	ldw	r2,32(r2)
   22ac0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   22ac4:	e0bff717 	ldw	r2,-36(fp)
   22ac8:	10800104 	addi	r2,r2,4
   22acc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   22ad0:	e0bff817 	ldw	r2,-32(fp)
   22ad4:	1080800c 	andi	r2,r2,512
   22ad8:	103fac26 	beq	r2,zero,2298c <__alt_data_end+0xfc02298c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   22adc:	e0bff817 	ldw	r2,-32(fp)
   22ae0:	1004d43a 	srli	r2,r2,16
   22ae4:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   22ae8:	00002606 	br	22b84 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   22aec:	e0bff717 	ldw	r2,-36(fp)
   22af0:	e0fff617 	ldw	r3,-40(fp)
   22af4:	18c01017 	ldw	r3,64(r3)
   22af8:	e13ff617 	ldw	r4,-40(fp)
   22afc:	20c7883a 	add	r3,r4,r3
   22b00:	18c21104 	addi	r3,r3,2116
   22b04:	18c00003 	ldbu	r3,0(r3)
   22b08:	18c03fcc 	andi	r3,r3,255
   22b0c:	18c0201c 	xori	r3,r3,128
   22b10:	18ffe004 	addi	r3,r3,-128
   22b14:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   22b18:	e0bff617 	ldw	r2,-40(fp)
   22b1c:	10801017 	ldw	r2,64(r2)
   22b20:	10800044 	addi	r2,r2,1
   22b24:	10c1ffcc 	andi	r3,r2,2047
   22b28:	e0bff617 	ldw	r2,-40(fp)
   22b2c:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   22b30:	e0bff617 	ldw	r2,-40(fp)
   22b34:	10800c17 	ldw	r2,48(r2)
   22b38:	e0bffa15 	stw	r2,-24(fp)
   22b3c:	00800084 	movi	r2,2
   22b40:	e0bffd0d 	sth	r2,-12(fp)
   22b44:	00800044 	movi	r2,1
   22b48:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   22b4c:	d0a71f43 	ldbu	r2,-25475(gp)
   22b50:	10803fcc 	andi	r2,r2,255
   22b54:	10000826 	beq	r2,zero,22b78 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
   22b58:	e0bffd0b 	ldhu	r2,-12(fp)
   22b5c:	e0fffd83 	ldbu	r3,-10(fp)
   22b60:	e13ffe04 	addi	r4,fp,-8
   22b64:	200f883a 	mov	r7,r4
   22b68:	180d883a 	mov	r6,r3
   22b6c:	100b883a 	mov	r5,r2
   22b70:	e13ffa17 	ldw	r4,-24(fp)
   22b74:	001debc0 	call	1debc <OSFlagPost>

        space--;
   22b78:	e0bff517 	ldw	r2,-44(fp)
   22b7c:	10bfffc4 	addi	r2,r2,-1
   22b80:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   22b84:	e0bff517 	ldw	r2,-44(fp)
   22b88:	10000526 	beq	r2,zero,22ba0 <altera_avalon_jtag_uart_irq+0x23c>
   22b8c:	e0bff617 	ldw	r2,-40(fp)
   22b90:	10c01017 	ldw	r3,64(r2)
   22b94:	e0bff617 	ldw	r2,-40(fp)
   22b98:	10800f17 	ldw	r2,60(r2)
   22b9c:	18bfd31e 	bne	r3,r2,22aec <__alt_data_end+0xfc022aec>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   22ba0:	e0bff517 	ldw	r2,-44(fp)
   22ba4:	103f7926 	beq	r2,zero,2298c <__alt_data_end+0xfc02298c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   22ba8:	e0bff617 	ldw	r2,-40(fp)
   22bac:	10c00817 	ldw	r3,32(r2)
   22bb0:	00bfff44 	movi	r2,-3
   22bb4:	1886703a 	and	r3,r3,r2
   22bb8:	e0bff617 	ldw	r2,-40(fp)
   22bbc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   22bc0:	e0bff617 	ldw	r2,-40(fp)
   22bc4:	10800017 	ldw	r2,0(r2)
   22bc8:	10800104 	addi	r2,r2,4
   22bcc:	1007883a 	mov	r3,r2
   22bd0:	e0bff617 	ldw	r2,-40(fp)
   22bd4:	10800817 	ldw	r2,32(r2)
   22bd8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   22bdc:	e0bff717 	ldw	r2,-36(fp)
   22be0:	10800104 	addi	r2,r2,4
   22be4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   22be8:	003f6806 	br	2298c <__alt_data_end+0xfc02298c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   22bec:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   22bf0:	0001883a 	nop
   22bf4:	e037883a 	mov	sp,fp
   22bf8:	dfc00117 	ldw	ra,4(sp)
   22bfc:	df000017 	ldw	fp,0(sp)
   22c00:	dec00204 	addi	sp,sp,8
   22c04:	f800283a 	ret

00022c08 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   22c08:	defff904 	addi	sp,sp,-28
   22c0c:	dfc00615 	stw	ra,24(sp)
   22c10:	df000515 	stw	fp,20(sp)
   22c14:	df000504 	addi	fp,sp,20
   22c18:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   22c1c:	e0bfff17 	ldw	r2,-4(fp)
   22c20:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   22c24:	e0bffb17 	ldw	r2,-20(fp)
   22c28:	10800017 	ldw	r2,0(r2)
   22c2c:	10800104 	addi	r2,r2,4
   22c30:	10800037 	ldwio	r2,0(r2)
   22c34:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   22c38:	e0bffc17 	ldw	r2,-16(fp)
   22c3c:	1081000c 	andi	r2,r2,1024
   22c40:	10000b26 	beq	r2,zero,22c70 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   22c44:	e0bffb17 	ldw	r2,-20(fp)
   22c48:	10800017 	ldw	r2,0(r2)
   22c4c:	10800104 	addi	r2,r2,4
   22c50:	1007883a 	mov	r3,r2
   22c54:	e0bffb17 	ldw	r2,-20(fp)
   22c58:	10800817 	ldw	r2,32(r2)
   22c5c:	10810014 	ori	r2,r2,1024
   22c60:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   22c64:	e0bffb17 	ldw	r2,-20(fp)
   22c68:	10000915 	stw	zero,36(r2)
   22c6c:	00002106 	br	22cf4 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   22c70:	e0bffb17 	ldw	r2,-20(fp)
   22c74:	10c00917 	ldw	r3,36(r2)
   22c78:	00a00034 	movhi	r2,32768
   22c7c:	10bfff04 	addi	r2,r2,-4
   22c80:	10c01c36 	bltu	r2,r3,22cf4 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   22c84:	e0bffb17 	ldw	r2,-20(fp)
   22c88:	10800917 	ldw	r2,36(r2)
   22c8c:	10c00044 	addi	r3,r2,1
   22c90:	e0bffb17 	ldw	r2,-20(fp)
   22c94:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   22c98:	e0bffb17 	ldw	r2,-20(fp)
   22c9c:	10c00917 	ldw	r3,36(r2)
   22ca0:	e0bffb17 	ldw	r2,-20(fp)
   22ca4:	10800117 	ldw	r2,4(r2)
   22ca8:	18801236 	bltu	r3,r2,22cf4 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   22cac:	e0bffb17 	ldw	r2,-20(fp)
   22cb0:	10800c17 	ldw	r2,48(r2)
   22cb4:	e0bffd15 	stw	r2,-12(fp)
   22cb8:	00800104 	movi	r2,4
   22cbc:	e0bffe0d 	sth	r2,-8(fp)
   22cc0:	00800044 	movi	r2,1
   22cc4:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   22cc8:	d0a71f43 	ldbu	r2,-25475(gp)
   22ccc:	10803fcc 	andi	r2,r2,255
   22cd0:	10000826 	beq	r2,zero,22cf4 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   22cd4:	e0bffe0b 	ldhu	r2,-8(fp)
   22cd8:	e0fffe83 	ldbu	r3,-6(fp)
   22cdc:	e13ffec4 	addi	r4,fp,-5
   22ce0:	200f883a 	mov	r7,r4
   22ce4:	180d883a 	mov	r6,r3
   22ce8:	100b883a 	mov	r5,r2
   22cec:	e13ffd17 	ldw	r4,-12(fp)
   22cf0:	001debc0 	call	1debc <OSFlagPost>
   22cf4:	d0a73417 	ldw	r2,-25392(gp)
    }
  }

  return alt_ticks_per_second();
}
   22cf8:	e037883a 	mov	sp,fp
   22cfc:	dfc00117 	ldw	ra,4(sp)
   22d00:	df000017 	ldw	fp,0(sp)
   22d04:	dec00204 	addi	sp,sp,8
   22d08:	f800283a 	ret

00022d0c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   22d0c:	defffd04 	addi	sp,sp,-12
   22d10:	df000215 	stw	fp,8(sp)
   22d14:	df000204 	addi	fp,sp,8
   22d18:	e13ffe15 	stw	r4,-8(fp)
   22d1c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   22d20:	00000506 	br	22d38 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   22d24:	e0bfff17 	ldw	r2,-4(fp)
   22d28:	1090000c 	andi	r2,r2,16384
   22d2c:	10000226 	beq	r2,zero,22d38 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   22d30:	00bffd44 	movi	r2,-11
   22d34:	00000b06 	br	22d64 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   22d38:	e0bffe17 	ldw	r2,-8(fp)
   22d3c:	10c01017 	ldw	r3,64(r2)
   22d40:	e0bffe17 	ldw	r2,-8(fp)
   22d44:	10800f17 	ldw	r2,60(r2)
   22d48:	18800526 	beq	r3,r2,22d60 <altera_avalon_jtag_uart_close+0x54>
   22d4c:	e0bffe17 	ldw	r2,-8(fp)
   22d50:	10c00917 	ldw	r3,36(r2)
   22d54:	e0bffe17 	ldw	r2,-8(fp)
   22d58:	10800117 	ldw	r2,4(r2)
   22d5c:	18bff136 	bltu	r3,r2,22d24 <__alt_data_end+0xfc022d24>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   22d60:	0005883a 	mov	r2,zero
}
   22d64:	e037883a 	mov	sp,fp
   22d68:	df000017 	ldw	fp,0(sp)
   22d6c:	dec00104 	addi	sp,sp,4
   22d70:	f800283a 	ret

00022d74 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   22d74:	defffa04 	addi	sp,sp,-24
   22d78:	df000515 	stw	fp,20(sp)
   22d7c:	df000504 	addi	fp,sp,20
   22d80:	e13ffd15 	stw	r4,-12(fp)
   22d84:	e17ffe15 	stw	r5,-8(fp)
   22d88:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   22d8c:	00bff9c4 	movi	r2,-25
   22d90:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   22d94:	e0bffe17 	ldw	r2,-8(fp)
   22d98:	10da8060 	cmpeqi	r3,r2,27137
   22d9c:	1800031e 	bne	r3,zero,22dac <altera_avalon_jtag_uart_ioctl+0x38>
   22da0:	109a80a0 	cmpeqi	r2,r2,27138
   22da4:	1000181e 	bne	r2,zero,22e08 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   22da8:	00002906 	br	22e50 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   22dac:	e0bffd17 	ldw	r2,-12(fp)
   22db0:	10c00117 	ldw	r3,4(r2)
   22db4:	00a00034 	movhi	r2,32768
   22db8:	10bfffc4 	addi	r2,r2,-1
   22dbc:	18802126 	beq	r3,r2,22e44 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   22dc0:	e0bfff17 	ldw	r2,-4(fp)
   22dc4:	10800017 	ldw	r2,0(r2)
   22dc8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   22dcc:	e0bffc17 	ldw	r2,-16(fp)
   22dd0:	10800090 	cmplti	r2,r2,2
   22dd4:	1000061e 	bne	r2,zero,22df0 <altera_avalon_jtag_uart_ioctl+0x7c>
   22dd8:	e0fffc17 	ldw	r3,-16(fp)
   22ddc:	00a00034 	movhi	r2,32768
   22de0:	10bfffc4 	addi	r2,r2,-1
   22de4:	18800226 	beq	r3,r2,22df0 <altera_avalon_jtag_uart_ioctl+0x7c>
   22de8:	e0bffc17 	ldw	r2,-16(fp)
   22dec:	00000206 	br	22df8 <altera_avalon_jtag_uart_ioctl+0x84>
   22df0:	00a00034 	movhi	r2,32768
   22df4:	10bfff84 	addi	r2,r2,-2
   22df8:	e0fffd17 	ldw	r3,-12(fp)
   22dfc:	18800115 	stw	r2,4(r3)
      rc = 0;
   22e00:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   22e04:	00000f06 	br	22e44 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   22e08:	e0bffd17 	ldw	r2,-12(fp)
   22e0c:	10c00117 	ldw	r3,4(r2)
   22e10:	00a00034 	movhi	r2,32768
   22e14:	10bfffc4 	addi	r2,r2,-1
   22e18:	18800c26 	beq	r3,r2,22e4c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   22e1c:	e0bffd17 	ldw	r2,-12(fp)
   22e20:	10c00917 	ldw	r3,36(r2)
   22e24:	e0bffd17 	ldw	r2,-12(fp)
   22e28:	10800117 	ldw	r2,4(r2)
   22e2c:	1885803a 	cmpltu	r2,r3,r2
   22e30:	10c03fcc 	andi	r3,r2,255
   22e34:	e0bfff17 	ldw	r2,-4(fp)
   22e38:	10c00015 	stw	r3,0(r2)
      rc = 0;
   22e3c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   22e40:	00000206 	br	22e4c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   22e44:	0001883a 	nop
   22e48:	00000106 	br	22e50 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   22e4c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   22e50:	e0bffb17 	ldw	r2,-20(fp)
}
   22e54:	e037883a 	mov	sp,fp
   22e58:	df000017 	ldw	fp,0(sp)
   22e5c:	dec00104 	addi	sp,sp,4
   22e60:	f800283a 	ret

00022e64 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   22e64:	deffed04 	addi	sp,sp,-76
   22e68:	dfc01215 	stw	ra,72(sp)
   22e6c:	df001115 	stw	fp,68(sp)
   22e70:	df001104 	addi	fp,sp,68
   22e74:	e13ffc15 	stw	r4,-16(fp)
   22e78:	e17ffd15 	stw	r5,-12(fp)
   22e7c:	e1bffe15 	stw	r6,-8(fp)
   22e80:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   22e84:	e0bffd17 	ldw	r2,-12(fp)
   22e88:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   22e8c:	e0bffc17 	ldw	r2,-16(fp)
   22e90:	10800a17 	ldw	r2,40(r2)
   22e94:	e0bff815 	stw	r2,-32(fp)
   22e98:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   22e9c:	e0bff90b 	ldhu	r2,-28(fp)
   22ea0:	e0fffb04 	addi	r3,fp,-20
   22ea4:	180d883a 	mov	r6,r3
   22ea8:	100b883a 	mov	r5,r2
   22eac:	e13ff817 	ldw	r4,-32(fp)
   22eb0:	002030c0 	call	2030c <OSSemPend>

  while (space > 0)
   22eb4:	00006106 	br	2303c <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   22eb8:	e0bffc17 	ldw	r2,-16(fp)
   22ebc:	10800d17 	ldw	r2,52(r2)
   22ec0:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   22ec4:	e0bffc17 	ldw	r2,-16(fp)
   22ec8:	10800e17 	ldw	r2,56(r2)
   22ecc:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   22ed0:	e0fff317 	ldw	r3,-52(fp)
   22ed4:	e0bff417 	ldw	r2,-48(fp)
   22ed8:	18800536 	bltu	r3,r2,22ef0 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   22edc:	e0fff317 	ldw	r3,-52(fp)
   22ee0:	e0bff417 	ldw	r2,-48(fp)
   22ee4:	1885c83a 	sub	r2,r3,r2
   22ee8:	e0bff115 	stw	r2,-60(fp)
   22eec:	00000406 	br	22f00 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   22ef0:	00c20004 	movi	r3,2048
   22ef4:	e0bff417 	ldw	r2,-48(fp)
   22ef8:	1885c83a 	sub	r2,r3,r2
   22efc:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   22f00:	e0bff117 	ldw	r2,-60(fp)
   22f04:	10001e26 	beq	r2,zero,22f80 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   22f08:	e0fffe17 	ldw	r3,-8(fp)
   22f0c:	e0bff117 	ldw	r2,-60(fp)
   22f10:	1880022e 	bgeu	r3,r2,22f1c <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   22f14:	e0bffe17 	ldw	r2,-8(fp)
   22f18:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   22f1c:	e0bffc17 	ldw	r2,-16(fp)
   22f20:	10c01104 	addi	r3,r2,68
   22f24:	e0bff417 	ldw	r2,-48(fp)
   22f28:	1885883a 	add	r2,r3,r2
   22f2c:	e1bff117 	ldw	r6,-60(fp)
   22f30:	100b883a 	mov	r5,r2
   22f34:	e13ff017 	ldw	r4,-64(fp)
   22f38:	00059380 	call	5938 <memcpy>
      ptr   += n;
   22f3c:	e0fff017 	ldw	r3,-64(fp)
   22f40:	e0bff117 	ldw	r2,-60(fp)
   22f44:	1885883a 	add	r2,r3,r2
   22f48:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   22f4c:	e0fffe17 	ldw	r3,-8(fp)
   22f50:	e0bff117 	ldw	r2,-60(fp)
   22f54:	1885c83a 	sub	r2,r3,r2
   22f58:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   22f5c:	e0fff417 	ldw	r3,-48(fp)
   22f60:	e0bff117 	ldw	r2,-60(fp)
   22f64:	1885883a 	add	r2,r3,r2
   22f68:	10c1ffcc 	andi	r3,r2,2047
   22f6c:	e0bffc17 	ldw	r2,-16(fp)
   22f70:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   22f74:	e0bffe17 	ldw	r2,-8(fp)
   22f78:	00bfcf16 	blt	zero,r2,22eb8 <__alt_data_end+0xfc022eb8>
   22f7c:	00000106 	br	22f84 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   22f80:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   22f84:	e0fff017 	ldw	r3,-64(fp)
   22f88:	e0bffd17 	ldw	r2,-12(fp)
   22f8c:	18802e1e 	bne	r3,r2,23048 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   22f90:	e0bfff17 	ldw	r2,-4(fp)
   22f94:	1090000c 	andi	r2,r2,16384
   22f98:	10002d1e 	bne	r2,zero,23050 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   22f9c:	d0a71f43 	ldbu	r2,-25475(gp)
   22fa0:	10803fcc 	andi	r2,r2,255
   22fa4:	10800058 	cmpnei	r2,r2,1
   22fa8:	1000161e 	bne	r2,zero,23004 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   22fac:	e0bffc17 	ldw	r2,-16(fp)
   22fb0:	10800c17 	ldw	r2,48(r2)
   22fb4:	e0bff215 	stw	r2,-56(fp)
   22fb8:	00800144 	movi	r2,5
   22fbc:	e0bff98d 	sth	r2,-26(fp)
   22fc0:	00bfe0c4 	movi	r2,-125
   22fc4:	e0bffa05 	stb	r2,-24(fp)
   22fc8:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   22fcc:	d0a71f43 	ldbu	r2,-25475(gp)
   22fd0:	10803fcc 	andi	r2,r2,255
   22fd4:	10001526 	beq	r2,zero,2302c <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   22fd8:	e0fff98b 	ldhu	r3,-26(fp)
   22fdc:	e13ffa03 	ldbu	r4,-24(fp)
   22fe0:	e17ffa8b 	ldhu	r5,-22(fp)
   22fe4:	e0bffb44 	addi	r2,fp,-19
   22fe8:	d8800015 	stw	r2,0(sp)
   22fec:	280f883a 	mov	r7,r5
   22ff0:	200d883a 	mov	r6,r4
   22ff4:	180b883a 	mov	r5,r3
   22ff8:	e13ff217 	ldw	r4,-56(fp)
   22ffc:	001d8a40 	call	1d8a4 <OSFlagPend>
   23000:	00000a06 	br	2302c <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   23004:	0001883a 	nop
   23008:	e0bffc17 	ldw	r2,-16(fp)
   2300c:	10c00d17 	ldw	r3,52(r2)
   23010:	e0bff317 	ldw	r2,-52(fp)
   23014:	1880051e 	bne	r3,r2,2302c <altera_avalon_jtag_uart_read+0x1c8>
   23018:	e0bffc17 	ldw	r2,-16(fp)
   2301c:	10c00917 	ldw	r3,36(r2)
   23020:	e0bffc17 	ldw	r2,-16(fp)
   23024:	10800117 	ldw	r2,4(r2)
   23028:	18bff736 	bltu	r3,r2,23008 <__alt_data_end+0xfc023008>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   2302c:	e0bffc17 	ldw	r2,-16(fp)
   23030:	10c00d17 	ldw	r3,52(r2)
   23034:	e0bff317 	ldw	r2,-52(fp)
   23038:	18800726 	beq	r3,r2,23058 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2303c:	e0bffe17 	ldw	r2,-8(fp)
   23040:	00bf9d16 	blt	zero,r2,22eb8 <__alt_data_end+0xfc022eb8>
   23044:	00000506 	br	2305c <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   23048:	0001883a 	nop
   2304c:	00000306 	br	2305c <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   23050:	0001883a 	nop
   23054:	00000106 	br	2305c <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   23058:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   2305c:	e0bffc17 	ldw	r2,-16(fp)
   23060:	10800a17 	ldw	r2,40(r2)
   23064:	1009883a 	mov	r4,r2
   23068:	00206840 	call	20684 <OSSemPost>

  if (ptr != buffer)
   2306c:	e0fff017 	ldw	r3,-64(fp)
   23070:	e0bffd17 	ldw	r2,-12(fp)
   23074:	18801826 	beq	r3,r2,230d8 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23078:	0005303a 	rdctl	r2,status
   2307c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23080:	e0fff717 	ldw	r3,-36(fp)
   23084:	00bfff84 	movi	r2,-2
   23088:	1884703a 	and	r2,r3,r2
   2308c:	1001703a 	wrctl	status,r2
  
  return context;
   23090:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   23094:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23098:	e0bffc17 	ldw	r2,-16(fp)
   2309c:	10800817 	ldw	r2,32(r2)
   230a0:	10c00054 	ori	r3,r2,1
   230a4:	e0bffc17 	ldw	r2,-16(fp)
   230a8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   230ac:	e0bffc17 	ldw	r2,-16(fp)
   230b0:	10800017 	ldw	r2,0(r2)
   230b4:	10800104 	addi	r2,r2,4
   230b8:	1007883a 	mov	r3,r2
   230bc:	e0bffc17 	ldw	r2,-16(fp)
   230c0:	10800817 	ldw	r2,32(r2)
   230c4:	18800035 	stwio	r2,0(r3)
   230c8:	e0bff617 	ldw	r2,-40(fp)
   230cc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   230d0:	e0bff517 	ldw	r2,-44(fp)
   230d4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   230d8:	e0fff017 	ldw	r3,-64(fp)
   230dc:	e0bffd17 	ldw	r2,-12(fp)
   230e0:	18800426 	beq	r3,r2,230f4 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   230e4:	e0fff017 	ldw	r3,-64(fp)
   230e8:	e0bffd17 	ldw	r2,-12(fp)
   230ec:	1885c83a 	sub	r2,r3,r2
   230f0:	00000606 	br	2310c <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   230f4:	e0bfff17 	ldw	r2,-4(fp)
   230f8:	1090000c 	andi	r2,r2,16384
   230fc:	10000226 	beq	r2,zero,23108 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   23100:	00bffd44 	movi	r2,-11
   23104:	00000106 	br	2310c <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   23108:	00bffec4 	movi	r2,-5
}
   2310c:	e037883a 	mov	sp,fp
   23110:	dfc00117 	ldw	ra,4(sp)
   23114:	df000017 	ldw	fp,0(sp)
   23118:	dec00204 	addi	sp,sp,8
   2311c:	f800283a 	ret

00023120 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   23120:	deffed04 	addi	sp,sp,-76
   23124:	dfc01215 	stw	ra,72(sp)
   23128:	df001115 	stw	fp,68(sp)
   2312c:	df001104 	addi	fp,sp,68
   23130:	e13ffc15 	stw	r4,-16(fp)
   23134:	e17ffd15 	stw	r5,-12(fp)
   23138:	e1bffe15 	stw	r6,-8(fp)
   2313c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   23140:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   23144:	e0bffd17 	ldw	r2,-12(fp)
   23148:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   2314c:	e0bffc17 	ldw	r2,-16(fp)
   23150:	10800b17 	ldw	r2,44(r2)
   23154:	e0bff815 	stw	r2,-32(fp)
   23158:	e03ff90d 	sth	zero,-28(fp)
   2315c:	e0bff90b 	ldhu	r2,-28(fp)
   23160:	e0fffb44 	addi	r3,fp,-19
   23164:	180d883a 	mov	r6,r3
   23168:	100b883a 	mov	r5,r2
   2316c:	e13ff817 	ldw	r4,-32(fp)
   23170:	002030c0 	call	2030c <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   23174:	00003706 	br	23254 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   23178:	e0bffc17 	ldw	r2,-16(fp)
   2317c:	10800f17 	ldw	r2,60(r2)
   23180:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   23184:	e0bffc17 	ldw	r2,-16(fp)
   23188:	10801017 	ldw	r2,64(r2)
   2318c:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   23190:	e0fff417 	ldw	r3,-48(fp)
   23194:	e0bff017 	ldw	r2,-64(fp)
   23198:	1880062e 	bgeu	r3,r2,231b4 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   2319c:	e0fff017 	ldw	r3,-64(fp)
   231a0:	e0bff417 	ldw	r2,-48(fp)
   231a4:	1885c83a 	sub	r2,r3,r2
   231a8:	10bfffc4 	addi	r2,r2,-1
   231ac:	e0bff115 	stw	r2,-60(fp)
   231b0:	00000b06 	br	231e0 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   231b4:	e0bff017 	ldw	r2,-64(fp)
   231b8:	10000526 	beq	r2,zero,231d0 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   231bc:	00c20004 	movi	r3,2048
   231c0:	e0bff417 	ldw	r2,-48(fp)
   231c4:	1885c83a 	sub	r2,r3,r2
   231c8:	e0bff115 	stw	r2,-60(fp)
   231cc:	00000406 	br	231e0 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   231d0:	00c1ffc4 	movi	r3,2047
   231d4:	e0bff417 	ldw	r2,-48(fp)
   231d8:	1885c83a 	sub	r2,r3,r2
   231dc:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   231e0:	e0bff117 	ldw	r2,-60(fp)
   231e4:	10001e26 	beq	r2,zero,23260 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   231e8:	e0fffe17 	ldw	r3,-8(fp)
   231ec:	e0bff117 	ldw	r2,-60(fp)
   231f0:	1880022e 	bgeu	r3,r2,231fc <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   231f4:	e0bffe17 	ldw	r2,-8(fp)
   231f8:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   231fc:	e0bffc17 	ldw	r2,-16(fp)
   23200:	10c21104 	addi	r3,r2,2116
   23204:	e0bff417 	ldw	r2,-48(fp)
   23208:	1885883a 	add	r2,r3,r2
   2320c:	e1bff117 	ldw	r6,-60(fp)
   23210:	e17ffd17 	ldw	r5,-12(fp)
   23214:	1009883a 	mov	r4,r2
   23218:	00059380 	call	5938 <memcpy>
      ptr   += n;
   2321c:	e0fffd17 	ldw	r3,-12(fp)
   23220:	e0bff117 	ldw	r2,-60(fp)
   23224:	1885883a 	add	r2,r3,r2
   23228:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   2322c:	e0fffe17 	ldw	r3,-8(fp)
   23230:	e0bff117 	ldw	r2,-60(fp)
   23234:	1885c83a 	sub	r2,r3,r2
   23238:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2323c:	e0fff417 	ldw	r3,-48(fp)
   23240:	e0bff117 	ldw	r2,-60(fp)
   23244:	1885883a 	add	r2,r3,r2
   23248:	10c1ffcc 	andi	r3,r2,2047
   2324c:	e0bffc17 	ldw	r2,-16(fp)
   23250:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   23254:	e0bffe17 	ldw	r2,-8(fp)
   23258:	00bfc716 	blt	zero,r2,23178 <__alt_data_end+0xfc023178>
   2325c:	00000106 	br	23264 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   23260:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23264:	0005303a 	rdctl	r2,status
   23268:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2326c:	e0fff717 	ldw	r3,-36(fp)
   23270:	00bfff84 	movi	r2,-2
   23274:	1884703a 	and	r2,r3,r2
   23278:	1001703a 	wrctl	status,r2
  
  return context;
   2327c:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   23280:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   23284:	e0bffc17 	ldw	r2,-16(fp)
   23288:	10800817 	ldw	r2,32(r2)
   2328c:	10c00094 	ori	r3,r2,2
   23290:	e0bffc17 	ldw	r2,-16(fp)
   23294:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   23298:	e0bffc17 	ldw	r2,-16(fp)
   2329c:	10800017 	ldw	r2,0(r2)
   232a0:	10800104 	addi	r2,r2,4
   232a4:	1007883a 	mov	r3,r2
   232a8:	e0bffc17 	ldw	r2,-16(fp)
   232ac:	10800817 	ldw	r2,32(r2)
   232b0:	18800035 	stwio	r2,0(r3)
   232b4:	e0bff617 	ldw	r2,-40(fp)
   232b8:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   232bc:	e0bff317 	ldw	r2,-52(fp)
   232c0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   232c4:	e0bffe17 	ldw	r2,-8(fp)
   232c8:	00802a0e 	bge	zero,r2,23374 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   232cc:	e0bfff17 	ldw	r2,-4(fp)
   232d0:	1090000c 	andi	r2,r2,16384
   232d4:	10002a1e 	bne	r2,zero,23380 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   232d8:	d0a71f43 	ldbu	r2,-25475(gp)
   232dc:	10803fcc 	andi	r2,r2,255
   232e0:	10800058 	cmpnei	r2,r2,1
   232e4:	1000161e 	bne	r2,zero,23340 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   232e8:	e0bffc17 	ldw	r2,-16(fp)
   232ec:	10800c17 	ldw	r2,48(r2)
   232f0:	e0bff515 	stw	r2,-44(fp)
   232f4:	00800184 	movi	r2,6
   232f8:	e0bff98d 	sth	r2,-26(fp)
   232fc:	00bfe0c4 	movi	r2,-125
   23300:	e0bffa05 	stb	r2,-24(fp)
   23304:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   23308:	d0a71f43 	ldbu	r2,-25475(gp)
   2330c:	10803fcc 	andi	r2,r2,255
   23310:	10001526 	beq	r2,zero,23368 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   23314:	e0fff98b 	ldhu	r3,-26(fp)
   23318:	e13ffa03 	ldbu	r4,-24(fp)
   2331c:	e17ffa8b 	ldhu	r5,-22(fp)
   23320:	e0bffb04 	addi	r2,fp,-20
   23324:	d8800015 	stw	r2,0(sp)
   23328:	280f883a 	mov	r7,r5
   2332c:	200d883a 	mov	r6,r4
   23330:	180b883a 	mov	r5,r3
   23334:	e13ff517 	ldw	r4,-44(fp)
   23338:	001d8a40 	call	1d8a4 <OSFlagPend>
   2333c:	00000a06 	br	23368 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   23340:	0001883a 	nop
   23344:	e0bffc17 	ldw	r2,-16(fp)
   23348:	10c01017 	ldw	r3,64(r2)
   2334c:	e0bff017 	ldw	r2,-64(fp)
   23350:	1880051e 	bne	r3,r2,23368 <altera_avalon_jtag_uart_write+0x248>
   23354:	e0bffc17 	ldw	r2,-16(fp)
   23358:	10c00917 	ldw	r3,36(r2)
   2335c:	e0bffc17 	ldw	r2,-16(fp)
   23360:	10800117 	ldw	r2,4(r2)
   23364:	18bff736 	bltu	r3,r2,23344 <__alt_data_end+0xfc023344>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   23368:	e0bffc17 	ldw	r2,-16(fp)
   2336c:	10800917 	ldw	r2,36(r2)
   23370:	1000051e 	bne	r2,zero,23388 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   23374:	e0bffe17 	ldw	r2,-8(fp)
   23378:	00bfb616 	blt	zero,r2,23254 <__alt_data_end+0xfc023254>
   2337c:	00000306 	br	2338c <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   23380:	0001883a 	nop
   23384:	00000106 	br	2338c <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   23388:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   2338c:	e0bffc17 	ldw	r2,-16(fp)
   23390:	10800b17 	ldw	r2,44(r2)
   23394:	1009883a 	mov	r4,r2
   23398:	00206840 	call	20684 <OSSemPost>

  if (ptr != start)
   2339c:	e0fffd17 	ldw	r3,-12(fp)
   233a0:	e0bff217 	ldw	r2,-56(fp)
   233a4:	18800426 	beq	r3,r2,233b8 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   233a8:	e0fffd17 	ldw	r3,-12(fp)
   233ac:	e0bff217 	ldw	r2,-56(fp)
   233b0:	1885c83a 	sub	r2,r3,r2
   233b4:	00000606 	br	233d0 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   233b8:	e0bfff17 	ldw	r2,-4(fp)
   233bc:	1090000c 	andi	r2,r2,16384
   233c0:	10000226 	beq	r2,zero,233cc <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   233c4:	00bffd44 	movi	r2,-11
   233c8:	00000106 	br	233d0 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   233cc:	00bffec4 	movi	r2,-5
}
   233d0:	e037883a 	mov	sp,fp
   233d4:	dfc00117 	ldw	ra,4(sp)
   233d8:	df000017 	ldw	fp,0(sp)
   233dc:	dec00204 	addi	sp,sp,8
   233e0:	f800283a 	ret

000233e4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   233e4:	defff504 	addi	sp,sp,-44
   233e8:	df000a15 	stw	fp,40(sp)
   233ec:	df000a04 	addi	fp,sp,40
   233f0:	e13ffc15 	stw	r4,-16(fp)
   233f4:	e17ffd15 	stw	r5,-12(fp)
   233f8:	e1bffe15 	stw	r6,-8(fp)
   233fc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   23400:	e03ff615 	stw	zero,-40(fp)
   23404:	d0a73417 	ldw	r2,-25392(gp)
  
  if (alt_ticks_per_second ())
   23408:	10003c26 	beq	r2,zero,234fc <alt_alarm_start+0x118>
  {
    if (alarm)
   2340c:	e0bffc17 	ldw	r2,-16(fp)
   23410:	10003826 	beq	r2,zero,234f4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   23414:	e0bffc17 	ldw	r2,-16(fp)
   23418:	e0fffe17 	ldw	r3,-8(fp)
   2341c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   23420:	e0bffc17 	ldw	r2,-16(fp)
   23424:	e0ffff17 	ldw	r3,-4(fp)
   23428:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2342c:	0005303a 	rdctl	r2,status
   23430:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23434:	e0fff917 	ldw	r3,-28(fp)
   23438:	00bfff84 	movi	r2,-2
   2343c:	1884703a 	and	r2,r3,r2
   23440:	1001703a 	wrctl	status,r2
  
  return context;
   23444:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   23448:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   2344c:	d0a73517 	ldw	r2,-25388(gp)
      
      current_nticks = alt_nticks();
   23450:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   23454:	e0fffd17 	ldw	r3,-12(fp)
   23458:	e0bff617 	ldw	r2,-40(fp)
   2345c:	1885883a 	add	r2,r3,r2
   23460:	10c00044 	addi	r3,r2,1
   23464:	e0bffc17 	ldw	r2,-16(fp)
   23468:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   2346c:	e0bffc17 	ldw	r2,-16(fp)
   23470:	10c00217 	ldw	r3,8(r2)
   23474:	e0bff617 	ldw	r2,-40(fp)
   23478:	1880042e 	bgeu	r3,r2,2348c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   2347c:	e0bffc17 	ldw	r2,-16(fp)
   23480:	00c00044 	movi	r3,1
   23484:	10c00405 	stb	r3,16(r2)
   23488:	00000206 	br	23494 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   2348c:	e0bffc17 	ldw	r2,-16(fp)
   23490:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   23494:	e0bffc17 	ldw	r2,-16(fp)
   23498:	d0e02f04 	addi	r3,gp,-32580
   2349c:	e0fffa15 	stw	r3,-24(fp)
   234a0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   234a4:	e0bffb17 	ldw	r2,-20(fp)
   234a8:	e0fffa17 	ldw	r3,-24(fp)
   234ac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   234b0:	e0bffa17 	ldw	r2,-24(fp)
   234b4:	10c00017 	ldw	r3,0(r2)
   234b8:	e0bffb17 	ldw	r2,-20(fp)
   234bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   234c0:	e0bffa17 	ldw	r2,-24(fp)
   234c4:	10800017 	ldw	r2,0(r2)
   234c8:	e0fffb17 	ldw	r3,-20(fp)
   234cc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   234d0:	e0bffa17 	ldw	r2,-24(fp)
   234d4:	e0fffb17 	ldw	r3,-20(fp)
   234d8:	10c00015 	stw	r3,0(r2)
   234dc:	e0bff817 	ldw	r2,-32(fp)
   234e0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   234e4:	e0bff717 	ldw	r2,-36(fp)
   234e8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   234ec:	0005883a 	mov	r2,zero
   234f0:	00000306 	br	23500 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   234f4:	00bffa84 	movi	r2,-22
   234f8:	00000106 	br	23500 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   234fc:	00bfde84 	movi	r2,-134
  }
}
   23500:	e037883a 	mov	sp,fp
   23504:	df000017 	ldw	fp,0(sp)
   23508:	dec00104 	addi	sp,sp,4
   2350c:	f800283a 	ret

00023510 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   23510:	deffff04 	addi	sp,sp,-4
   23514:	df000015 	stw	fp,0(sp)
   23518:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2351c:	0001883a 	nop
   23520:	e037883a 	mov	sp,fp
   23524:	df000017 	ldw	fp,0(sp)
   23528:	dec00104 	addi	sp,sp,4
   2352c:	f800283a 	ret

00023530 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23530:	defffe04 	addi	sp,sp,-8
   23534:	dfc00115 	stw	ra,4(sp)
   23538:	df000015 	stw	fp,0(sp)
   2353c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23540:	d0a00d17 	ldw	r2,-32716(gp)
   23544:	10000326 	beq	r2,zero,23554 <alt_get_errno+0x24>
   23548:	d0a00d17 	ldw	r2,-32716(gp)
   2354c:	103ee83a 	callr	r2
   23550:	00000106 	br	23558 <alt_get_errno+0x28>
   23554:	d0a71304 	addi	r2,gp,-25524
}
   23558:	e037883a 	mov	sp,fp
   2355c:	dfc00117 	ldw	ra,4(sp)
   23560:	df000017 	ldw	fp,0(sp)
   23564:	dec00204 	addi	sp,sp,8
   23568:	f800283a 	ret

0002356c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2356c:	defffa04 	addi	sp,sp,-24
   23570:	dfc00515 	stw	ra,20(sp)
   23574:	df000415 	stw	fp,16(sp)
   23578:	df000404 	addi	fp,sp,16
   2357c:	e13ffe15 	stw	r4,-8(fp)
   23580:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   23584:	e0bffe17 	ldw	r2,-8(fp)
   23588:	10000326 	beq	r2,zero,23598 <alt_dev_llist_insert+0x2c>
   2358c:	e0bffe17 	ldw	r2,-8(fp)
   23590:	10800217 	ldw	r2,8(r2)
   23594:	1000061e 	bne	r2,zero,235b0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   23598:	00235300 	call	23530 <alt_get_errno>
   2359c:	1007883a 	mov	r3,r2
   235a0:	00800584 	movi	r2,22
   235a4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   235a8:	00bffa84 	movi	r2,-22
   235ac:	00001306 	br	235fc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   235b0:	e0bffe17 	ldw	r2,-8(fp)
   235b4:	e0ffff17 	ldw	r3,-4(fp)
   235b8:	e0fffc15 	stw	r3,-16(fp)
   235bc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   235c0:	e0bffd17 	ldw	r2,-12(fp)
   235c4:	e0fffc17 	ldw	r3,-16(fp)
   235c8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   235cc:	e0bffc17 	ldw	r2,-16(fp)
   235d0:	10c00017 	ldw	r3,0(r2)
   235d4:	e0bffd17 	ldw	r2,-12(fp)
   235d8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   235dc:	e0bffc17 	ldw	r2,-16(fp)
   235e0:	10800017 	ldw	r2,0(r2)
   235e4:	e0fffd17 	ldw	r3,-12(fp)
   235e8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   235ec:	e0bffc17 	ldw	r2,-16(fp)
   235f0:	e0fffd17 	ldw	r3,-12(fp)
   235f4:	10c00015 	stw	r3,0(r2)

  return 0;  
   235f8:	0005883a 	mov	r2,zero
}
   235fc:	e037883a 	mov	sp,fp
   23600:	dfc00117 	ldw	ra,4(sp)
   23604:	df000017 	ldw	fp,0(sp)
   23608:	dec00204 	addi	sp,sp,8
   2360c:	f800283a 	ret

00023610 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   23610:	defffd04 	addi	sp,sp,-12
   23614:	dfc00215 	stw	ra,8(sp)
   23618:	df000115 	stw	fp,4(sp)
   2361c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   23620:	008000b4 	movhi	r2,2
   23624:	10926204 	addi	r2,r2,18824
   23628:	e0bfff15 	stw	r2,-4(fp)
   2362c:	00000606 	br	23648 <_do_ctors+0x38>
        (*ctor) (); 
   23630:	e0bfff17 	ldw	r2,-4(fp)
   23634:	10800017 	ldw	r2,0(r2)
   23638:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2363c:	e0bfff17 	ldw	r2,-4(fp)
   23640:	10bfff04 	addi	r2,r2,-4
   23644:	e0bfff15 	stw	r2,-4(fp)
   23648:	e0ffff17 	ldw	r3,-4(fp)
   2364c:	008000b4 	movhi	r2,2
   23650:	10926304 	addi	r2,r2,18828
   23654:	18bff62e 	bgeu	r3,r2,23630 <__alt_data_end+0xfc023630>
        (*ctor) (); 
}
   23658:	0001883a 	nop
   2365c:	e037883a 	mov	sp,fp
   23660:	dfc00117 	ldw	ra,4(sp)
   23664:	df000017 	ldw	fp,0(sp)
   23668:	dec00204 	addi	sp,sp,8
   2366c:	f800283a 	ret

00023670 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   23670:	defffd04 	addi	sp,sp,-12
   23674:	dfc00215 	stw	ra,8(sp)
   23678:	df000115 	stw	fp,4(sp)
   2367c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   23680:	008000b4 	movhi	r2,2
   23684:	10926204 	addi	r2,r2,18824
   23688:	e0bfff15 	stw	r2,-4(fp)
   2368c:	00000606 	br	236a8 <_do_dtors+0x38>
        (*dtor) (); 
   23690:	e0bfff17 	ldw	r2,-4(fp)
   23694:	10800017 	ldw	r2,0(r2)
   23698:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2369c:	e0bfff17 	ldw	r2,-4(fp)
   236a0:	10bfff04 	addi	r2,r2,-4
   236a4:	e0bfff15 	stw	r2,-4(fp)
   236a8:	e0ffff17 	ldw	r3,-4(fp)
   236ac:	008000b4 	movhi	r2,2
   236b0:	10926304 	addi	r2,r2,18828
   236b4:	18bff62e 	bgeu	r3,r2,23690 <__alt_data_end+0xfc023690>
        (*dtor) (); 
}
   236b8:	0001883a 	nop
   236bc:	e037883a 	mov	sp,fp
   236c0:	dfc00117 	ldw	ra,4(sp)
   236c4:	df000017 	ldw	fp,0(sp)
   236c8:	dec00204 	addi	sp,sp,8
   236cc:	f800283a 	ret

000236d0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   236d0:	defffe04 	addi	sp,sp,-8
   236d4:	dfc00115 	stw	ra,4(sp)
   236d8:	df000015 	stw	fp,0(sp)
   236dc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   236e0:	01440004 	movi	r5,4096
   236e4:	0009883a 	mov	r4,zero
   236e8:	00244cc0 	call	244cc <alt_icache_flush>
#endif
}
   236ec:	0001883a 	nop
   236f0:	e037883a 	mov	sp,fp
   236f4:	dfc00117 	ldw	ra,4(sp)
   236f8:	df000017 	ldw	fp,0(sp)
   236fc:	dec00204 	addi	sp,sp,8
   23700:	f800283a 	ret

00023704 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   23704:	defff904 	addi	sp,sp,-28
   23708:	dfc00615 	stw	ra,24(sp)
   2370c:	df000515 	stw	fp,20(sp)
   23710:	df000504 	addi	fp,sp,20
   23714:	e13ffc15 	stw	r4,-16(fp)
   23718:	e17ffd15 	stw	r5,-12(fp)
   2371c:	e1bffe15 	stw	r6,-8(fp)
   23720:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   23724:	e0800217 	ldw	r2,8(fp)
   23728:	d8800015 	stw	r2,0(sp)
   2372c:	e1ffff17 	ldw	r7,-4(fp)
   23730:	e1bffe17 	ldw	r6,-8(fp)
   23734:	e17ffd17 	ldw	r5,-12(fp)
   23738:	e13ffc17 	ldw	r4,-16(fp)
   2373c:	00238b40 	call	238b4 <alt_iic_isr_register>
}  
   23740:	e037883a 	mov	sp,fp
   23744:	dfc00117 	ldw	ra,4(sp)
   23748:	df000017 	ldw	fp,0(sp)
   2374c:	dec00204 	addi	sp,sp,8
   23750:	f800283a 	ret

00023754 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   23754:	defff904 	addi	sp,sp,-28
   23758:	df000615 	stw	fp,24(sp)
   2375c:	df000604 	addi	fp,sp,24
   23760:	e13ffe15 	stw	r4,-8(fp)
   23764:	e17fff15 	stw	r5,-4(fp)
   23768:	e0bfff17 	ldw	r2,-4(fp)
   2376c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23770:	0005303a 	rdctl	r2,status
   23774:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23778:	e0fffb17 	ldw	r3,-20(fp)
   2377c:	00bfff84 	movi	r2,-2
   23780:	1884703a 	and	r2,r3,r2
   23784:	1001703a 	wrctl	status,r2
  
  return context;
   23788:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2378c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   23790:	00c00044 	movi	r3,1
   23794:	e0bffa17 	ldw	r2,-24(fp)
   23798:	1884983a 	sll	r2,r3,r2
   2379c:	1007883a 	mov	r3,r2
   237a0:	d0a73317 	ldw	r2,-25396(gp)
   237a4:	1884b03a 	or	r2,r3,r2
   237a8:	d0a73315 	stw	r2,-25396(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   237ac:	d0a73317 	ldw	r2,-25396(gp)
   237b0:	100170fa 	wrctl	ienable,r2
   237b4:	e0bffc17 	ldw	r2,-16(fp)
   237b8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   237bc:	e0bffd17 	ldw	r2,-12(fp)
   237c0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   237c4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   237c8:	0001883a 	nop
}
   237cc:	e037883a 	mov	sp,fp
   237d0:	df000017 	ldw	fp,0(sp)
   237d4:	dec00104 	addi	sp,sp,4
   237d8:	f800283a 	ret

000237dc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   237dc:	defff904 	addi	sp,sp,-28
   237e0:	df000615 	stw	fp,24(sp)
   237e4:	df000604 	addi	fp,sp,24
   237e8:	e13ffe15 	stw	r4,-8(fp)
   237ec:	e17fff15 	stw	r5,-4(fp)
   237f0:	e0bfff17 	ldw	r2,-4(fp)
   237f4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   237f8:	0005303a 	rdctl	r2,status
   237fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23800:	e0fffb17 	ldw	r3,-20(fp)
   23804:	00bfff84 	movi	r2,-2
   23808:	1884703a 	and	r2,r3,r2
   2380c:	1001703a 	wrctl	status,r2
  
  return context;
   23810:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   23814:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   23818:	00c00044 	movi	r3,1
   2381c:	e0bffa17 	ldw	r2,-24(fp)
   23820:	1884983a 	sll	r2,r3,r2
   23824:	0084303a 	nor	r2,zero,r2
   23828:	1007883a 	mov	r3,r2
   2382c:	d0a73317 	ldw	r2,-25396(gp)
   23830:	1884703a 	and	r2,r3,r2
   23834:	d0a73315 	stw	r2,-25396(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   23838:	d0a73317 	ldw	r2,-25396(gp)
   2383c:	100170fa 	wrctl	ienable,r2
   23840:	e0bffc17 	ldw	r2,-16(fp)
   23844:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23848:	e0bffd17 	ldw	r2,-12(fp)
   2384c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   23850:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   23854:	0001883a 	nop
}
   23858:	e037883a 	mov	sp,fp
   2385c:	df000017 	ldw	fp,0(sp)
   23860:	dec00104 	addi	sp,sp,4
   23864:	f800283a 	ret

00023868 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   23868:	defffc04 	addi	sp,sp,-16
   2386c:	df000315 	stw	fp,12(sp)
   23870:	df000304 	addi	fp,sp,12
   23874:	e13ffe15 	stw	r4,-8(fp)
   23878:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   2387c:	000530fa 	rdctl	r2,ienable
   23880:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   23884:	00c00044 	movi	r3,1
   23888:	e0bfff17 	ldw	r2,-4(fp)
   2388c:	1884983a 	sll	r2,r3,r2
   23890:	1007883a 	mov	r3,r2
   23894:	e0bffd17 	ldw	r2,-12(fp)
   23898:	1884703a 	and	r2,r3,r2
   2389c:	1004c03a 	cmpne	r2,r2,zero
   238a0:	10803fcc 	andi	r2,r2,255
}
   238a4:	e037883a 	mov	sp,fp
   238a8:	df000017 	ldw	fp,0(sp)
   238ac:	dec00104 	addi	sp,sp,4
   238b0:	f800283a 	ret

000238b4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   238b4:	defff504 	addi	sp,sp,-44
   238b8:	dfc00a15 	stw	ra,40(sp)
   238bc:	df000915 	stw	fp,36(sp)
   238c0:	df000904 	addi	fp,sp,36
   238c4:	e13ffc15 	stw	r4,-16(fp)
   238c8:	e17ffd15 	stw	r5,-12(fp)
   238cc:	e1bffe15 	stw	r6,-8(fp)
   238d0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   238d4:	00bffa84 	movi	r2,-22
   238d8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   238dc:	e0bffd17 	ldw	r2,-12(fp)
   238e0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   238e4:	e0bff817 	ldw	r2,-32(fp)
   238e8:	10800808 	cmpgei	r2,r2,32
   238ec:	1000271e 	bne	r2,zero,2398c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   238f0:	0005303a 	rdctl	r2,status
   238f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   238f8:	e0fffb17 	ldw	r3,-20(fp)
   238fc:	00bfff84 	movi	r2,-2
   23900:	1884703a 	and	r2,r3,r2
   23904:	1001703a 	wrctl	status,r2
  
  return context;
   23908:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   2390c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   23910:	008000f4 	movhi	r2,3
   23914:	10b9da04 	addi	r2,r2,-6296
   23918:	e0fff817 	ldw	r3,-32(fp)
   2391c:	180690fa 	slli	r3,r3,3
   23920:	10c5883a 	add	r2,r2,r3
   23924:	e0fffe17 	ldw	r3,-8(fp)
   23928:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   2392c:	008000f4 	movhi	r2,3
   23930:	10b9da04 	addi	r2,r2,-6296
   23934:	e0fff817 	ldw	r3,-32(fp)
   23938:	180690fa 	slli	r3,r3,3
   2393c:	10c5883a 	add	r2,r2,r3
   23940:	10800104 	addi	r2,r2,4
   23944:	e0ffff17 	ldw	r3,-4(fp)
   23948:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   2394c:	e0bffe17 	ldw	r2,-8(fp)
   23950:	10000526 	beq	r2,zero,23968 <alt_iic_isr_register+0xb4>
   23954:	e0bff817 	ldw	r2,-32(fp)
   23958:	100b883a 	mov	r5,r2
   2395c:	e13ffc17 	ldw	r4,-16(fp)
   23960:	00237540 	call	23754 <alt_ic_irq_enable>
   23964:	00000406 	br	23978 <alt_iic_isr_register+0xc4>
   23968:	e0bff817 	ldw	r2,-32(fp)
   2396c:	100b883a 	mov	r5,r2
   23970:	e13ffc17 	ldw	r4,-16(fp)
   23974:	00237dc0 	call	237dc <alt_ic_irq_disable>
   23978:	e0bff715 	stw	r2,-36(fp)
   2397c:	e0bffa17 	ldw	r2,-24(fp)
   23980:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23984:	e0bff917 	ldw	r2,-28(fp)
   23988:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   2398c:	e0bff717 	ldw	r2,-36(fp)
}
   23990:	e037883a 	mov	sp,fp
   23994:	dfc00117 	ldw	ra,4(sp)
   23998:	df000017 	ldw	fp,0(sp)
   2399c:	dec00204 	addi	sp,sp,8
   239a0:	f800283a 	ret

000239a4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   239a4:	defff904 	addi	sp,sp,-28
   239a8:	dfc00615 	stw	ra,24(sp)
   239ac:	df000515 	stw	fp,20(sp)
   239b0:	df000504 	addi	fp,sp,20
   239b4:	e13ffc15 	stw	r4,-16(fp)
   239b8:	e17ffd15 	stw	r5,-12(fp)
   239bc:	e1bffe15 	stw	r6,-8(fp)
   239c0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   239c4:	e1bfff17 	ldw	r6,-4(fp)
   239c8:	e17ffe17 	ldw	r5,-8(fp)
   239cc:	e13ffd17 	ldw	r4,-12(fp)
   239d0:	0023be40 	call	23be4 <open>
   239d4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   239d8:	e0bffb17 	ldw	r2,-20(fp)
   239dc:	10001c16 	blt	r2,zero,23a50 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   239e0:	008000b4 	movhi	r2,2
   239e4:	10997c04 	addi	r2,r2,26096
   239e8:	e0fffb17 	ldw	r3,-20(fp)
   239ec:	18c00324 	muli	r3,r3,12
   239f0:	10c5883a 	add	r2,r2,r3
   239f4:	10c00017 	ldw	r3,0(r2)
   239f8:	e0bffc17 	ldw	r2,-16(fp)
   239fc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   23a00:	008000b4 	movhi	r2,2
   23a04:	10997c04 	addi	r2,r2,26096
   23a08:	e0fffb17 	ldw	r3,-20(fp)
   23a0c:	18c00324 	muli	r3,r3,12
   23a10:	10c5883a 	add	r2,r2,r3
   23a14:	10800104 	addi	r2,r2,4
   23a18:	10c00017 	ldw	r3,0(r2)
   23a1c:	e0bffc17 	ldw	r2,-16(fp)
   23a20:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   23a24:	008000b4 	movhi	r2,2
   23a28:	10997c04 	addi	r2,r2,26096
   23a2c:	e0fffb17 	ldw	r3,-20(fp)
   23a30:	18c00324 	muli	r3,r3,12
   23a34:	10c5883a 	add	r2,r2,r3
   23a38:	10800204 	addi	r2,r2,8
   23a3c:	10c00017 	ldw	r3,0(r2)
   23a40:	e0bffc17 	ldw	r2,-16(fp)
   23a44:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   23a48:	e13ffb17 	ldw	r4,-20(fp)
   23a4c:	001a8cc0 	call	1a8cc <alt_release_fd>
  }
} 
   23a50:	0001883a 	nop
   23a54:	e037883a 	mov	sp,fp
   23a58:	dfc00117 	ldw	ra,4(sp)
   23a5c:	df000017 	ldw	fp,0(sp)
   23a60:	dec00204 	addi	sp,sp,8
   23a64:	f800283a 	ret

00023a68 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   23a68:	defffb04 	addi	sp,sp,-20
   23a6c:	dfc00415 	stw	ra,16(sp)
   23a70:	df000315 	stw	fp,12(sp)
   23a74:	df000304 	addi	fp,sp,12
   23a78:	e13ffd15 	stw	r4,-12(fp)
   23a7c:	e17ffe15 	stw	r5,-8(fp)
   23a80:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   23a84:	01c07fc4 	movi	r7,511
   23a88:	01800044 	movi	r6,1
   23a8c:	e17ffd17 	ldw	r5,-12(fp)
   23a90:	010000b4 	movhi	r4,2
   23a94:	21197f04 	addi	r4,r4,26108
   23a98:	00239a40 	call	239a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   23a9c:	01c07fc4 	movi	r7,511
   23aa0:	000d883a 	mov	r6,zero
   23aa4:	e17ffe17 	ldw	r5,-8(fp)
   23aa8:	010000b4 	movhi	r4,2
   23aac:	21197c04 	addi	r4,r4,26096
   23ab0:	00239a40 	call	239a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   23ab4:	01c07fc4 	movi	r7,511
   23ab8:	01800044 	movi	r6,1
   23abc:	e17fff17 	ldw	r5,-4(fp)
   23ac0:	010000b4 	movhi	r4,2
   23ac4:	21198204 	addi	r4,r4,26120
   23ac8:	00239a40 	call	239a4 <alt_open_fd>
}  
   23acc:	0001883a 	nop
   23ad0:	e037883a 	mov	sp,fp
   23ad4:	dfc00117 	ldw	ra,4(sp)
   23ad8:	df000017 	ldw	fp,0(sp)
   23adc:	dec00204 	addi	sp,sp,8
   23ae0:	f800283a 	ret

00023ae4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23ae4:	defffe04 	addi	sp,sp,-8
   23ae8:	dfc00115 	stw	ra,4(sp)
   23aec:	df000015 	stw	fp,0(sp)
   23af0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23af4:	d0a00d17 	ldw	r2,-32716(gp)
   23af8:	10000326 	beq	r2,zero,23b08 <alt_get_errno+0x24>
   23afc:	d0a00d17 	ldw	r2,-32716(gp)
   23b00:	103ee83a 	callr	r2
   23b04:	00000106 	br	23b0c <alt_get_errno+0x28>
   23b08:	d0a71304 	addi	r2,gp,-25524
}
   23b0c:	e037883a 	mov	sp,fp
   23b10:	dfc00117 	ldw	ra,4(sp)
   23b14:	df000017 	ldw	fp,0(sp)
   23b18:	dec00204 	addi	sp,sp,8
   23b1c:	f800283a 	ret

00023b20 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   23b20:	defffd04 	addi	sp,sp,-12
   23b24:	df000215 	stw	fp,8(sp)
   23b28:	df000204 	addi	fp,sp,8
   23b2c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   23b30:	e0bfff17 	ldw	r2,-4(fp)
   23b34:	10800217 	ldw	r2,8(r2)
   23b38:	10d00034 	orhi	r3,r2,16384
   23b3c:	e0bfff17 	ldw	r2,-4(fp)
   23b40:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   23b44:	e03ffe15 	stw	zero,-8(fp)
   23b48:	00001d06 	br	23bc0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   23b4c:	008000b4 	movhi	r2,2
   23b50:	10997c04 	addi	r2,r2,26096
   23b54:	e0fffe17 	ldw	r3,-8(fp)
   23b58:	18c00324 	muli	r3,r3,12
   23b5c:	10c5883a 	add	r2,r2,r3
   23b60:	10c00017 	ldw	r3,0(r2)
   23b64:	e0bfff17 	ldw	r2,-4(fp)
   23b68:	10800017 	ldw	r2,0(r2)
   23b6c:	1880111e 	bne	r3,r2,23bb4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   23b70:	008000b4 	movhi	r2,2
   23b74:	10997c04 	addi	r2,r2,26096
   23b78:	e0fffe17 	ldw	r3,-8(fp)
   23b7c:	18c00324 	muli	r3,r3,12
   23b80:	10c5883a 	add	r2,r2,r3
   23b84:	10800204 	addi	r2,r2,8
   23b88:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   23b8c:	1000090e 	bge	r2,zero,23bb4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   23b90:	e0bffe17 	ldw	r2,-8(fp)
   23b94:	10c00324 	muli	r3,r2,12
   23b98:	008000b4 	movhi	r2,2
   23b9c:	10997c04 	addi	r2,r2,26096
   23ba0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   23ba4:	e0bfff17 	ldw	r2,-4(fp)
   23ba8:	18800226 	beq	r3,r2,23bb4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   23bac:	00bffcc4 	movi	r2,-13
   23bb0:	00000806 	br	23bd4 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   23bb4:	e0bffe17 	ldw	r2,-8(fp)
   23bb8:	10800044 	addi	r2,r2,1
   23bbc:	e0bffe15 	stw	r2,-8(fp)
   23bc0:	d0a00c17 	ldw	r2,-32720(gp)
   23bc4:	1007883a 	mov	r3,r2
   23bc8:	e0bffe17 	ldw	r2,-8(fp)
   23bcc:	18bfdf2e 	bgeu	r3,r2,23b4c <__alt_data_end+0xfc023b4c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   23bd0:	0005883a 	mov	r2,zero
}
   23bd4:	e037883a 	mov	sp,fp
   23bd8:	df000017 	ldw	fp,0(sp)
   23bdc:	dec00104 	addi	sp,sp,4
   23be0:	f800283a 	ret

00023be4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   23be4:	defff604 	addi	sp,sp,-40
   23be8:	dfc00915 	stw	ra,36(sp)
   23bec:	df000815 	stw	fp,32(sp)
   23bf0:	df000804 	addi	fp,sp,32
   23bf4:	e13ffd15 	stw	r4,-12(fp)
   23bf8:	e17ffe15 	stw	r5,-8(fp)
   23bfc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   23c00:	00bfffc4 	movi	r2,-1
   23c04:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   23c08:	00bffb44 	movi	r2,-19
   23c0c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   23c10:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   23c14:	d1600a04 	addi	r5,gp,-32728
   23c18:	e13ffd17 	ldw	r4,-12(fp)
   23c1c:	00242580 	call	24258 <alt_find_dev>
   23c20:	e0bff815 	stw	r2,-32(fp)
   23c24:	e0bff817 	ldw	r2,-32(fp)
   23c28:	1000051e 	bne	r2,zero,23c40 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   23c2c:	e13ffd17 	ldw	r4,-12(fp)
   23c30:	00242e80 	call	242e8 <alt_find_file>
   23c34:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   23c38:	00800044 	movi	r2,1
   23c3c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   23c40:	e0bff817 	ldw	r2,-32(fp)
   23c44:	10002926 	beq	r2,zero,23cec <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   23c48:	e13ff817 	ldw	r4,-32(fp)
   23c4c:	00243f00 	call	243f0 <alt_get_fd>
   23c50:	e0bff915 	stw	r2,-28(fp)
   23c54:	e0bff917 	ldw	r2,-28(fp)
   23c58:	1000030e 	bge	r2,zero,23c68 <open+0x84>
    {
      status = index;
   23c5c:	e0bff917 	ldw	r2,-28(fp)
   23c60:	e0bffa15 	stw	r2,-24(fp)
   23c64:	00002306 	br	23cf4 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   23c68:	e0bff917 	ldw	r2,-28(fp)
   23c6c:	10c00324 	muli	r3,r2,12
   23c70:	008000b4 	movhi	r2,2
   23c74:	10997c04 	addi	r2,r2,26096
   23c78:	1885883a 	add	r2,r3,r2
   23c7c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   23c80:	e0fffe17 	ldw	r3,-8(fp)
   23c84:	00900034 	movhi	r2,16384
   23c88:	10bfffc4 	addi	r2,r2,-1
   23c8c:	1886703a 	and	r3,r3,r2
   23c90:	e0bffc17 	ldw	r2,-16(fp)
   23c94:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   23c98:	e0bffb17 	ldw	r2,-20(fp)
   23c9c:	1000051e 	bne	r2,zero,23cb4 <open+0xd0>
   23ca0:	e13ffc17 	ldw	r4,-16(fp)
   23ca4:	0023b200 	call	23b20 <alt_file_locked>
   23ca8:	e0bffa15 	stw	r2,-24(fp)
   23cac:	e0bffa17 	ldw	r2,-24(fp)
   23cb0:	10001016 	blt	r2,zero,23cf4 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   23cb4:	e0bff817 	ldw	r2,-32(fp)
   23cb8:	10800317 	ldw	r2,12(r2)
   23cbc:	10000826 	beq	r2,zero,23ce0 <open+0xfc>
   23cc0:	e0bff817 	ldw	r2,-32(fp)
   23cc4:	10800317 	ldw	r2,12(r2)
   23cc8:	e1ffff17 	ldw	r7,-4(fp)
   23ccc:	e1bffe17 	ldw	r6,-8(fp)
   23cd0:	e17ffd17 	ldw	r5,-12(fp)
   23cd4:	e13ffc17 	ldw	r4,-16(fp)
   23cd8:	103ee83a 	callr	r2
   23cdc:	00000106 	br	23ce4 <open+0x100>
   23ce0:	0005883a 	mov	r2,zero
   23ce4:	e0bffa15 	stw	r2,-24(fp)
   23ce8:	00000206 	br	23cf4 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   23cec:	00bffb44 	movi	r2,-19
   23cf0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   23cf4:	e0bffa17 	ldw	r2,-24(fp)
   23cf8:	1000090e 	bge	r2,zero,23d20 <open+0x13c>
  {
    alt_release_fd (index);  
   23cfc:	e13ff917 	ldw	r4,-28(fp)
   23d00:	001a8cc0 	call	1a8cc <alt_release_fd>
    ALT_ERRNO = -status;
   23d04:	0023ae40 	call	23ae4 <alt_get_errno>
   23d08:	1007883a 	mov	r3,r2
   23d0c:	e0bffa17 	ldw	r2,-24(fp)
   23d10:	0085c83a 	sub	r2,zero,r2
   23d14:	18800015 	stw	r2,0(r3)
    return -1;
   23d18:	00bfffc4 	movi	r2,-1
   23d1c:	00000106 	br	23d24 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   23d20:	e0bff917 	ldw	r2,-28(fp)
}
   23d24:	e037883a 	mov	sp,fp
   23d28:	dfc00117 	ldw	ra,4(sp)
   23d2c:	df000017 	ldw	fp,0(sp)
   23d30:	dec00204 	addi	sp,sp,8
   23d34:	f800283a 	ret

00023d38 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   23d38:	defffa04 	addi	sp,sp,-24
   23d3c:	df000515 	stw	fp,20(sp)
   23d40:	df000504 	addi	fp,sp,20
   23d44:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23d48:	0005303a 	rdctl	r2,status
   23d4c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23d50:	e0fffc17 	ldw	r3,-16(fp)
   23d54:	00bfff84 	movi	r2,-2
   23d58:	1884703a 	and	r2,r3,r2
   23d5c:	1001703a 	wrctl	status,r2
  
  return context;
   23d60:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   23d64:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   23d68:	e0bfff17 	ldw	r2,-4(fp)
   23d6c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   23d70:	e0bffd17 	ldw	r2,-12(fp)
   23d74:	10800017 	ldw	r2,0(r2)
   23d78:	e0fffd17 	ldw	r3,-12(fp)
   23d7c:	18c00117 	ldw	r3,4(r3)
   23d80:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   23d84:	e0bffd17 	ldw	r2,-12(fp)
   23d88:	10800117 	ldw	r2,4(r2)
   23d8c:	e0fffd17 	ldw	r3,-12(fp)
   23d90:	18c00017 	ldw	r3,0(r3)
   23d94:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   23d98:	e0bffd17 	ldw	r2,-12(fp)
   23d9c:	e0fffd17 	ldw	r3,-12(fp)
   23da0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   23da4:	e0bffd17 	ldw	r2,-12(fp)
   23da8:	e0fffd17 	ldw	r3,-12(fp)
   23dac:	10c00015 	stw	r3,0(r2)
   23db0:	e0bffb17 	ldw	r2,-20(fp)
   23db4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23db8:	e0bffe17 	ldw	r2,-8(fp)
   23dbc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   23dc0:	0001883a 	nop
   23dc4:	e037883a 	mov	sp,fp
   23dc8:	df000017 	ldw	fp,0(sp)
   23dcc:	dec00104 	addi	sp,sp,4
   23dd0:	f800283a 	ret

00023dd4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   23dd4:	defffb04 	addi	sp,sp,-20
   23dd8:	dfc00415 	stw	ra,16(sp)
   23ddc:	df000315 	stw	fp,12(sp)
   23de0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   23de4:	d0a02f17 	ldw	r2,-32580(gp)
   23de8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   23dec:	d0a73517 	ldw	r2,-25388(gp)
   23df0:	10800044 	addi	r2,r2,1
   23df4:	d0a73515 	stw	r2,-25388(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   23df8:	00002e06 	br	23eb4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   23dfc:	e0bffd17 	ldw	r2,-12(fp)
   23e00:	10800017 	ldw	r2,0(r2)
   23e04:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   23e08:	e0bffd17 	ldw	r2,-12(fp)
   23e0c:	10800403 	ldbu	r2,16(r2)
   23e10:	10803fcc 	andi	r2,r2,255
   23e14:	10000426 	beq	r2,zero,23e28 <alt_tick+0x54>
   23e18:	d0a73517 	ldw	r2,-25388(gp)
   23e1c:	1000021e 	bne	r2,zero,23e28 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   23e20:	e0bffd17 	ldw	r2,-12(fp)
   23e24:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   23e28:	e0bffd17 	ldw	r2,-12(fp)
   23e2c:	10800217 	ldw	r2,8(r2)
   23e30:	d0e73517 	ldw	r3,-25388(gp)
   23e34:	18801d36 	bltu	r3,r2,23eac <alt_tick+0xd8>
   23e38:	e0bffd17 	ldw	r2,-12(fp)
   23e3c:	10800403 	ldbu	r2,16(r2)
   23e40:	10803fcc 	andi	r2,r2,255
   23e44:	1000191e 	bne	r2,zero,23eac <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   23e48:	e0bffd17 	ldw	r2,-12(fp)
   23e4c:	10800317 	ldw	r2,12(r2)
   23e50:	e0fffd17 	ldw	r3,-12(fp)
   23e54:	18c00517 	ldw	r3,20(r3)
   23e58:	1809883a 	mov	r4,r3
   23e5c:	103ee83a 	callr	r2
   23e60:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   23e64:	e0bfff17 	ldw	r2,-4(fp)
   23e68:	1000031e 	bne	r2,zero,23e78 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   23e6c:	e13ffd17 	ldw	r4,-12(fp)
   23e70:	0023d380 	call	23d38 <alt_alarm_stop>
   23e74:	00000d06 	br	23eac <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   23e78:	e0bffd17 	ldw	r2,-12(fp)
   23e7c:	10c00217 	ldw	r3,8(r2)
   23e80:	e0bfff17 	ldw	r2,-4(fp)
   23e84:	1887883a 	add	r3,r3,r2
   23e88:	e0bffd17 	ldw	r2,-12(fp)
   23e8c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   23e90:	e0bffd17 	ldw	r2,-12(fp)
   23e94:	10c00217 	ldw	r3,8(r2)
   23e98:	d0a73517 	ldw	r2,-25388(gp)
   23e9c:	1880032e 	bgeu	r3,r2,23eac <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   23ea0:	e0bffd17 	ldw	r2,-12(fp)
   23ea4:	00c00044 	movi	r3,1
   23ea8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   23eac:	e0bffe17 	ldw	r2,-8(fp)
   23eb0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   23eb4:	e0fffd17 	ldw	r3,-12(fp)
   23eb8:	d0a02f04 	addi	r2,gp,-32580
   23ebc:	18bfcf1e 	bne	r3,r2,23dfc <__alt_data_end+0xfc023dfc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   23ec0:	001bab80 	call	1bab8 <OSTimeTick>
}
   23ec4:	0001883a 	nop
   23ec8:	e037883a 	mov	sp,fp
   23ecc:	dfc00117 	ldw	ra,4(sp)
   23ed0:	df000017 	ldw	fp,0(sp)
   23ed4:	dec00204 	addi	sp,sp,8
   23ed8:	f800283a 	ret

00023edc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   23edc:	deffff04 	addi	sp,sp,-4
   23ee0:	df000015 	stw	fp,0(sp)
   23ee4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   23ee8:	000170fa 	wrctl	ienable,zero
}
   23eec:	0001883a 	nop
   23ef0:	e037883a 	mov	sp,fp
   23ef4:	df000017 	ldw	fp,0(sp)
   23ef8:	dec00104 	addi	sp,sp,4
   23efc:	f800283a 	ret

00023f00 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   23f00:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   23f04:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   23f08:	d1272e17 	ldw	r4,-25416(gp)

      stw ra,  0(sp)
   23f0c:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   23f10:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   23f14:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   23f18:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   23f1c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   23f20:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   23f24:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   23f28:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   23f2c:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   23f30:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   23f34:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   23f38:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   23f3c:	00241740 	call	24174 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   23f40:	d1272917 	ldw	r4,-25436(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   23f44:	d1672107 	ldb	r5,-25468(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   23f48:	d1272e15 	stw	r4,-25416(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   23f4c:	d1672145 	stb	r5,-25467(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   23f50:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   23f54:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   23f58:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   23f5c:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   23f60:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   23f64:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   23f68:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   23f6c:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   23f70:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   23f74:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   23f78:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   23f7c:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   23f80:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   23f84:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   23f88:	f800283a 	ret

00023f8c <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   23f8c:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   23f90:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   23f94:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   23f98:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   23f9c:	00241740 	call	24174 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   23fa0:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   23fa4:	d4a71f45 	stb	r18,-25475(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   23fa8:	003fe506 	br	23f40 <__alt_data_end+0xfc023f40>

00023fac <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   23fac:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   23fb0:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   23fb4:	10800054 	ori	r2,r2,1
      wrctl status, r2
   23fb8:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   23fbc:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   23fc0:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   23fc4:	dec00204 	addi	sp,sp,8

      callr r2
   23fc8:	103ee83a 	callr	r2

      nop
   23fcc:	0001883a 	nop

00023fd0 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   23fd0:	defff704 	addi	sp,sp,-36
   23fd4:	dfc00815 	stw	ra,32(sp)
   23fd8:	df000715 	stw	fp,28(sp)
   23fdc:	df000704 	addi	fp,sp,28
   23fe0:	e13ffc15 	stw	r4,-16(fp)
   23fe4:	e17ffd15 	stw	r5,-12(fp)
   23fe8:	e1bffe15 	stw	r6,-8(fp)
   23fec:	3805883a 	mov	r2,r7
   23ff0:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   23ff4:	e0fffe17 	ldw	r3,-8(fp)
   23ff8:	00bfff04 	movi	r2,-4
   23ffc:	1884703a 	and	r2,r3,r2
   24000:	10bef704 	addi	r2,r2,-1060
   24004:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   24008:	01810904 	movi	r6,1060
   2400c:	000b883a 	mov	r5,zero
   24010:	e13ff917 	ldw	r4,-28(fp)
   24014:	0005a800 	call	5a80 <memset>
   24018:	e0bff917 	ldw	r2,-28(fp)
   2401c:	10c0bb04 	addi	r3,r2,748
   24020:	e0bff917 	ldw	r2,-28(fp)
   24024:	10c00115 	stw	r3,4(r2)
   24028:	e0bff917 	ldw	r2,-28(fp)
   2402c:	10c0d504 	addi	r3,r2,852
   24030:	e0bff917 	ldw	r2,-28(fp)
   24034:	10c00215 	stw	r3,8(r2)
   24038:	e0bff917 	ldw	r2,-28(fp)
   2403c:	10c0ef04 	addi	r3,r2,956
   24040:	e0bff917 	ldw	r2,-28(fp)
   24044:	10c00315 	stw	r3,12(r2)
   24048:	e0fff917 	ldw	r3,-28(fp)
   2404c:	008000b4 	movhi	r2,2
   24050:	10974804 	addi	r2,r2,23840
   24054:	18800d15 	stw	r2,52(r3)
   24058:	e0bff917 	ldw	r2,-28(fp)
   2405c:	00c00044 	movi	r3,1
   24060:	10c02915 	stw	r3,164(r2)
   24064:	10002a15 	stw	zero,168(r2)
   24068:	e0bff917 	ldw	r2,-28(fp)
   2406c:	00ccc384 	movi	r3,13070
   24070:	10c02b0d 	sth	r3,172(r2)
   24074:	e0bff917 	ldw	r2,-28(fp)
   24078:	00eaf344 	movi	r3,-21555
   2407c:	10c02b8d 	sth	r3,174(r2)
   24080:	e0bff917 	ldw	r2,-28(fp)
   24084:	00c48d04 	movi	r3,4660
   24088:	10c02c0d 	sth	r3,176(r2)
   2408c:	e0bff917 	ldw	r2,-28(fp)
   24090:	00f99b44 	movi	r3,-6547
   24094:	10c02c8d 	sth	r3,178(r2)
   24098:	e0bff917 	ldw	r2,-28(fp)
   2409c:	00f7bb04 	movi	r3,-8468
   240a0:	10c02d0d 	sth	r3,180(r2)
   240a4:	e0bff917 	ldw	r2,-28(fp)
   240a8:	00c00144 	movi	r3,5
   240ac:	10c02d8d 	sth	r3,182(r2)
   240b0:	e0bff917 	ldw	r2,-28(fp)
   240b4:	00c002c4 	movi	r3,11
   240b8:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   240bc:	e0bff917 	ldw	r2,-28(fp)
   240c0:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   240c4:	e0bffa17 	ldw	r2,-24(fp)
   240c8:	10bff304 	addi	r2,r2,-52
   240cc:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   240d0:	e0bffb17 	ldw	r2,-20(fp)
   240d4:	10800c04 	addi	r2,r2,48
   240d8:	e0fffc17 	ldw	r3,-16(fp)
   240dc:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   240e0:	e0bffb17 	ldw	r2,-20(fp)
   240e4:	10800b04 	addi	r2,r2,44
   240e8:	e0fffd17 	ldw	r3,-12(fp)
   240ec:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   240f0:	e0bffb17 	ldw	r2,-20(fp)
   240f4:	10800a04 	addi	r2,r2,40
   240f8:	e0fff917 	ldw	r3,-28(fp)
   240fc:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   24100:	008000b4 	movhi	r2,2
   24104:	108feb04 	addi	r2,r2,16300
   24108:	10c00104 	addi	r3,r2,4
   2410c:	e0bffb17 	ldw	r2,-20(fp)
   24110:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   24114:	e0bffb17 	ldw	r2,-20(fp)
}
   24118:	e037883a 	mov	sp,fp
   2411c:	dfc00117 	ldw	ra,4(sp)
   24120:	df000017 	ldw	fp,0(sp)
   24124:	dec00204 	addi	sp,sp,8
   24128:	f800283a 	ret

0002412c <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   2412c:	defffe04 	addi	sp,sp,-8
   24130:	df000115 	stw	fp,4(sp)
   24134:	df000104 	addi	fp,sp,4
   24138:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   2413c:	0001883a 	nop
   24140:	e037883a 	mov	sp,fp
   24144:	df000017 	ldw	fp,0(sp)
   24148:	dec00104 	addi	sp,sp,4
   2414c:	f800283a 	ret

00024150 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   24150:	defffe04 	addi	sp,sp,-8
   24154:	df000115 	stw	fp,4(sp)
   24158:	df000104 	addi	fp,sp,4
   2415c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   24160:	0001883a 	nop
   24164:	e037883a 	mov	sp,fp
   24168:	df000017 	ldw	fp,0(sp)
   2416c:	dec00104 	addi	sp,sp,4
   24170:	f800283a 	ret

00024174 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   24174:	deffff04 	addi	sp,sp,-4
   24178:	df000015 	stw	fp,0(sp)
   2417c:	d839883a 	mov	fp,sp
}
   24180:	0001883a 	nop
   24184:	e037883a 	mov	sp,fp
   24188:	df000017 	ldw	fp,0(sp)
   2418c:	dec00104 	addi	sp,sp,4
   24190:	f800283a 	ret

00024194 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   24194:	deffff04 	addi	sp,sp,-4
   24198:	df000015 	stw	fp,0(sp)
   2419c:	d839883a 	mov	fp,sp
}
   241a0:	0001883a 	nop
   241a4:	e037883a 	mov	sp,fp
   241a8:	df000017 	ldw	fp,0(sp)
   241ac:	dec00104 	addi	sp,sp,4
   241b0:	f800283a 	ret

000241b4 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   241b4:	deffff04 	addi	sp,sp,-4
   241b8:	df000015 	stw	fp,0(sp)
   241bc:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   241c0:	0001883a 	nop
   241c4:	e037883a 	mov	sp,fp
   241c8:	df000017 	ldw	fp,0(sp)
   241cc:	dec00104 	addi	sp,sp,4
   241d0:	f800283a 	ret

000241d4 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   241d4:	deffff04 	addi	sp,sp,-4
   241d8:	df000015 	stw	fp,0(sp)
   241dc:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   241e0:	0001883a 	nop
   241e4:	e037883a 	mov	sp,fp
   241e8:	df000017 	ldw	fp,0(sp)
   241ec:	dec00104 	addi	sp,sp,4
   241f0:	f800283a 	ret

000241f4 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   241f4:	deffff04 	addi	sp,sp,-4
   241f8:	df000015 	stw	fp,0(sp)
   241fc:	d839883a 	mov	fp,sp
}
   24200:	0001883a 	nop
   24204:	e037883a 	mov	sp,fp
   24208:	df000017 	ldw	fp,0(sp)
   2420c:	dec00104 	addi	sp,sp,4
   24210:	f800283a 	ret

00024214 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   24214:	deffff04 	addi	sp,sp,-4
   24218:	df000015 	stw	fp,0(sp)
   2421c:	d839883a 	mov	fp,sp
}
   24220:	0001883a 	nop
   24224:	e037883a 	mov	sp,fp
   24228:	df000017 	ldw	fp,0(sp)
   2422c:	dec00104 	addi	sp,sp,4
   24230:	f800283a 	ret

00024234 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   24234:	defffe04 	addi	sp,sp,-8
   24238:	df000115 	stw	fp,4(sp)
   2423c:	df000104 	addi	fp,sp,4
   24240:	e13fff15 	stw	r4,-4(fp)
}
   24244:	0001883a 	nop
   24248:	e037883a 	mov	sp,fp
   2424c:	df000017 	ldw	fp,0(sp)
   24250:	dec00104 	addi	sp,sp,4
   24254:	f800283a 	ret

00024258 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   24258:	defffa04 	addi	sp,sp,-24
   2425c:	dfc00515 	stw	ra,20(sp)
   24260:	df000415 	stw	fp,16(sp)
   24264:	df000404 	addi	fp,sp,16
   24268:	e13ffe15 	stw	r4,-8(fp)
   2426c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   24270:	e0bfff17 	ldw	r2,-4(fp)
   24274:	10800017 	ldw	r2,0(r2)
   24278:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   2427c:	e13ffe17 	ldw	r4,-8(fp)
   24280:	00066700 	call	6670 <strlen>
   24284:	10800044 	addi	r2,r2,1
   24288:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2428c:	00000d06 	br	242c4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   24290:	e0bffc17 	ldw	r2,-16(fp)
   24294:	10800217 	ldw	r2,8(r2)
   24298:	e0fffd17 	ldw	r3,-12(fp)
   2429c:	180d883a 	mov	r6,r3
   242a0:	e17ffe17 	ldw	r5,-8(fp)
   242a4:	1009883a 	mov	r4,r2
   242a8:	00246440 	call	24644 <memcmp>
   242ac:	1000021e 	bne	r2,zero,242b8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   242b0:	e0bffc17 	ldw	r2,-16(fp)
   242b4:	00000706 	br	242d4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   242b8:	e0bffc17 	ldw	r2,-16(fp)
   242bc:	10800017 	ldw	r2,0(r2)
   242c0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   242c4:	e0fffc17 	ldw	r3,-16(fp)
   242c8:	e0bfff17 	ldw	r2,-4(fp)
   242cc:	18bff01e 	bne	r3,r2,24290 <__alt_data_end+0xfc024290>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   242d0:	0005883a 	mov	r2,zero
}
   242d4:	e037883a 	mov	sp,fp
   242d8:	dfc00117 	ldw	ra,4(sp)
   242dc:	df000017 	ldw	fp,0(sp)
   242e0:	dec00204 	addi	sp,sp,8
   242e4:	f800283a 	ret

000242e8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   242e8:	defffb04 	addi	sp,sp,-20
   242ec:	dfc00415 	stw	ra,16(sp)
   242f0:	df000315 	stw	fp,12(sp)
   242f4:	df000304 	addi	fp,sp,12
   242f8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   242fc:	d0a00817 	ldw	r2,-32736(gp)
   24300:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24304:	00003106 	br	243cc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   24308:	e0bffd17 	ldw	r2,-12(fp)
   2430c:	10800217 	ldw	r2,8(r2)
   24310:	1009883a 	mov	r4,r2
   24314:	00066700 	call	6670 <strlen>
   24318:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   2431c:	e0bffd17 	ldw	r2,-12(fp)
   24320:	10c00217 	ldw	r3,8(r2)
   24324:	e0bffe17 	ldw	r2,-8(fp)
   24328:	10bfffc4 	addi	r2,r2,-1
   2432c:	1885883a 	add	r2,r3,r2
   24330:	10800003 	ldbu	r2,0(r2)
   24334:	10803fcc 	andi	r2,r2,255
   24338:	1080201c 	xori	r2,r2,128
   2433c:	10bfe004 	addi	r2,r2,-128
   24340:	10800bd8 	cmpnei	r2,r2,47
   24344:	1000031e 	bne	r2,zero,24354 <alt_find_file+0x6c>
    {
      len -= 1;
   24348:	e0bffe17 	ldw	r2,-8(fp)
   2434c:	10bfffc4 	addi	r2,r2,-1
   24350:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   24354:	e0bffe17 	ldw	r2,-8(fp)
   24358:	e0ffff17 	ldw	r3,-4(fp)
   2435c:	1885883a 	add	r2,r3,r2
   24360:	10800003 	ldbu	r2,0(r2)
   24364:	10803fcc 	andi	r2,r2,255
   24368:	1080201c 	xori	r2,r2,128
   2436c:	10bfe004 	addi	r2,r2,-128
   24370:	10800be0 	cmpeqi	r2,r2,47
   24374:	1000081e 	bne	r2,zero,24398 <alt_find_file+0xb0>
   24378:	e0bffe17 	ldw	r2,-8(fp)
   2437c:	e0ffff17 	ldw	r3,-4(fp)
   24380:	1885883a 	add	r2,r3,r2
   24384:	10800003 	ldbu	r2,0(r2)
   24388:	10803fcc 	andi	r2,r2,255
   2438c:	1080201c 	xori	r2,r2,128
   24390:	10bfe004 	addi	r2,r2,-128
   24394:	10000a1e 	bne	r2,zero,243c0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   24398:	e0bffd17 	ldw	r2,-12(fp)
   2439c:	10800217 	ldw	r2,8(r2)
   243a0:	e0fffe17 	ldw	r3,-8(fp)
   243a4:	180d883a 	mov	r6,r3
   243a8:	e17fff17 	ldw	r5,-4(fp)
   243ac:	1009883a 	mov	r4,r2
   243b0:	00246440 	call	24644 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   243b4:	1000021e 	bne	r2,zero,243c0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   243b8:	e0bffd17 	ldw	r2,-12(fp)
   243bc:	00000706 	br	243dc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   243c0:	e0bffd17 	ldw	r2,-12(fp)
   243c4:	10800017 	ldw	r2,0(r2)
   243c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   243cc:	e0fffd17 	ldw	r3,-12(fp)
   243d0:	d0a00804 	addi	r2,gp,-32736
   243d4:	18bfcc1e 	bne	r3,r2,24308 <__alt_data_end+0xfc024308>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   243d8:	0005883a 	mov	r2,zero
}
   243dc:	e037883a 	mov	sp,fp
   243e0:	dfc00117 	ldw	ra,4(sp)
   243e4:	df000017 	ldw	fp,0(sp)
   243e8:	dec00204 	addi	sp,sp,8
   243ec:	f800283a 	ret

000243f0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   243f0:	defff904 	addi	sp,sp,-28
   243f4:	dfc00615 	stw	ra,24(sp)
   243f8:	df000515 	stw	fp,20(sp)
   243fc:	df000504 	addi	fp,sp,20
   24400:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   24404:	00bffa04 	movi	r2,-24
   24408:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   2440c:	d0a71717 	ldw	r2,-25508(gp)
   24410:	e0bffd15 	stw	r2,-12(fp)
   24414:	e03ffe0d 	sth	zero,-8(fp)
   24418:	e0bffe0b 	ldhu	r2,-8(fp)
   2441c:	e0fffe84 	addi	r3,fp,-6
   24420:	180d883a 	mov	r6,r3
   24424:	100b883a 	mov	r5,r2
   24428:	e13ffd17 	ldw	r4,-12(fp)
   2442c:	002030c0 	call	2030c <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   24430:	e03ffb15 	stw	zero,-20(fp)
   24434:	00001906 	br	2449c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   24438:	008000b4 	movhi	r2,2
   2443c:	10997c04 	addi	r2,r2,26096
   24440:	e0fffb17 	ldw	r3,-20(fp)
   24444:	18c00324 	muli	r3,r3,12
   24448:	10c5883a 	add	r2,r2,r3
   2444c:	10800017 	ldw	r2,0(r2)
   24450:	10000f1e 	bne	r2,zero,24490 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   24454:	008000b4 	movhi	r2,2
   24458:	10997c04 	addi	r2,r2,26096
   2445c:	e0fffb17 	ldw	r3,-20(fp)
   24460:	18c00324 	muli	r3,r3,12
   24464:	10c5883a 	add	r2,r2,r3
   24468:	e0ffff17 	ldw	r3,-4(fp)
   2446c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   24470:	d0e00c17 	ldw	r3,-32720(gp)
   24474:	e0bffb17 	ldw	r2,-20(fp)
   24478:	1880020e 	bge	r3,r2,24484 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   2447c:	e0bffb17 	ldw	r2,-20(fp)
   24480:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
   24484:	e0bffb17 	ldw	r2,-20(fp)
   24488:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   2448c:	00000606 	br	244a8 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   24490:	e0bffb17 	ldw	r2,-20(fp)
   24494:	10800044 	addi	r2,r2,1
   24498:	e0bffb15 	stw	r2,-20(fp)
   2449c:	e0bffb17 	ldw	r2,-20(fp)
   244a0:	10800810 	cmplti	r2,r2,32
   244a4:	103fe41e 	bne	r2,zero,24438 <__alt_data_end+0xfc024438>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   244a8:	d0a71717 	ldw	r2,-25508(gp)
   244ac:	1009883a 	mov	r4,r2
   244b0:	00206840 	call	20684 <OSSemPost>

  return rc;
   244b4:	e0bffc17 	ldw	r2,-16(fp)
}
   244b8:	e037883a 	mov	sp,fp
   244bc:	dfc00117 	ldw	ra,4(sp)
   244c0:	df000017 	ldw	fp,0(sp)
   244c4:	dec00204 	addi	sp,sp,8
   244c8:	f800283a 	ret

000244cc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   244cc:	defffb04 	addi	sp,sp,-20
   244d0:	df000415 	stw	fp,16(sp)
   244d4:	df000404 	addi	fp,sp,16
   244d8:	e13ffe15 	stw	r4,-8(fp)
   244dc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   244e0:	e0bfff17 	ldw	r2,-4(fp)
   244e4:	10840070 	cmpltui	r2,r2,4097
   244e8:	1000021e 	bne	r2,zero,244f4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   244ec:	00840004 	movi	r2,4096
   244f0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   244f4:	e0fffe17 	ldw	r3,-8(fp)
   244f8:	e0bfff17 	ldw	r2,-4(fp)
   244fc:	1885883a 	add	r2,r3,r2
   24500:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   24504:	e0bffe17 	ldw	r2,-8(fp)
   24508:	e0bffc15 	stw	r2,-16(fp)
   2450c:	00000506 	br	24524 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   24510:	e0bffc17 	ldw	r2,-16(fp)
   24514:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   24518:	e0bffc17 	ldw	r2,-16(fp)
   2451c:	10800804 	addi	r2,r2,32
   24520:	e0bffc15 	stw	r2,-16(fp)
   24524:	e0fffc17 	ldw	r3,-16(fp)
   24528:	e0bffd17 	ldw	r2,-12(fp)
   2452c:	18bff836 	bltu	r3,r2,24510 <__alt_data_end+0xfc024510>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   24530:	e0bffe17 	ldw	r2,-8(fp)
   24534:	108007cc 	andi	r2,r2,31
   24538:	10000226 	beq	r2,zero,24544 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   2453c:	e0bffc17 	ldw	r2,-16(fp)
   24540:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   24544:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   24548:	0001883a 	nop
   2454c:	e037883a 	mov	sp,fp
   24550:	df000017 	ldw	fp,0(sp)
   24554:	dec00104 	addi	sp,sp,4
   24558:	f800283a 	ret

0002455c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   2455c:	defffe04 	addi	sp,sp,-8
   24560:	df000115 	stw	fp,4(sp)
   24564:	df000104 	addi	fp,sp,4
   24568:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   2456c:	e0bfff17 	ldw	r2,-4(fp)
   24570:	10bffe84 	addi	r2,r2,-6
   24574:	10c00428 	cmpgeui	r3,r2,16
   24578:	18001a1e 	bne	r3,zero,245e4 <alt_exception_cause_generated_bad_addr+0x88>
   2457c:	100690ba 	slli	r3,r2,2
   24580:	008000b4 	movhi	r2,2
   24584:	10916504 	addi	r2,r2,17812
   24588:	1885883a 	add	r2,r3,r2
   2458c:	10800017 	ldw	r2,0(r2)
   24590:	1000683a 	jmp	r2
   24594:	000245d4 	movui	zero,2327
   24598:	000245d4 	movui	zero,2327
   2459c:	000245e4 	muli	zero,zero,2327
   245a0:	000245e4 	muli	zero,zero,2327
   245a4:	000245e4 	muli	zero,zero,2327
   245a8:	000245d4 	movui	zero,2327
   245ac:	000245dc 	xori	zero,zero,2327
   245b0:	000245e4 	muli	zero,zero,2327
   245b4:	000245d4 	movui	zero,2327
   245b8:	000245d4 	movui	zero,2327
   245bc:	000245e4 	muli	zero,zero,2327
   245c0:	000245d4 	movui	zero,2327
   245c4:	000245dc 	xori	zero,zero,2327
   245c8:	000245e4 	muli	zero,zero,2327
   245cc:	000245e4 	muli	zero,zero,2327
   245d0:	000245d4 	movui	zero,2327
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   245d4:	00800044 	movi	r2,1
   245d8:	00000306 	br	245e8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   245dc:	0005883a 	mov	r2,zero
   245e0:	00000106 	br	245e8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   245e4:	0005883a 	mov	r2,zero
  }
}
   245e8:	e037883a 	mov	sp,fp
   245ec:	df000017 	ldw	fp,0(sp)
   245f0:	dec00104 	addi	sp,sp,4
   245f4:	f800283a 	ret

000245f8 <atexit>:
   245f8:	200b883a 	mov	r5,r4
   245fc:	000f883a 	mov	r7,zero
   24600:	000d883a 	mov	r6,zero
   24604:	0009883a 	mov	r4,zero
   24608:	00246c01 	jmpi	246c0 <__register_exitproc>

0002460c <exit>:
   2460c:	defffe04 	addi	sp,sp,-8
   24610:	000b883a 	mov	r5,zero
   24614:	dc000015 	stw	r16,0(sp)
   24618:	dfc00115 	stw	ra,4(sp)
   2461c:	2021883a 	mov	r16,r4
   24620:	00247d80 	call	247d8 <__call_exitprocs>
   24624:	008000b4 	movhi	r2,2
   24628:	109df704 	addi	r2,r2,30684
   2462c:	11000017 	ldw	r4,0(r2)
   24630:	20800f17 	ldw	r2,60(r4)
   24634:	10000126 	beq	r2,zero,2463c <exit+0x30>
   24638:	103ee83a 	callr	r2
   2463c:	8009883a 	mov	r4,r16
   24640:	00249580 	call	24958 <_exit>

00024644 <memcmp>:
   24644:	01c000c4 	movi	r7,3
   24648:	3980192e 	bgeu	r7,r6,246b0 <memcmp+0x6c>
   2464c:	2144b03a 	or	r2,r4,r5
   24650:	11c4703a 	and	r2,r2,r7
   24654:	10000f26 	beq	r2,zero,24694 <memcmp+0x50>
   24658:	20800003 	ldbu	r2,0(r4)
   2465c:	28c00003 	ldbu	r3,0(r5)
   24660:	10c0151e 	bne	r2,r3,246b8 <memcmp+0x74>
   24664:	31bfff84 	addi	r6,r6,-2
   24668:	01ffffc4 	movi	r7,-1
   2466c:	00000406 	br	24680 <memcmp+0x3c>
   24670:	20800003 	ldbu	r2,0(r4)
   24674:	28c00003 	ldbu	r3,0(r5)
   24678:	31bfffc4 	addi	r6,r6,-1
   2467c:	10c00e1e 	bne	r2,r3,246b8 <memcmp+0x74>
   24680:	21000044 	addi	r4,r4,1
   24684:	29400044 	addi	r5,r5,1
   24688:	31fff91e 	bne	r6,r7,24670 <__alt_data_end+0xfc024670>
   2468c:	0005883a 	mov	r2,zero
   24690:	f800283a 	ret
   24694:	20c00017 	ldw	r3,0(r4)
   24698:	28800017 	ldw	r2,0(r5)
   2469c:	18bfee1e 	bne	r3,r2,24658 <__alt_data_end+0xfc024658>
   246a0:	31bfff04 	addi	r6,r6,-4
   246a4:	21000104 	addi	r4,r4,4
   246a8:	29400104 	addi	r5,r5,4
   246ac:	39bff936 	bltu	r7,r6,24694 <__alt_data_end+0xfc024694>
   246b0:	303fe91e 	bne	r6,zero,24658 <__alt_data_end+0xfc024658>
   246b4:	003ff506 	br	2468c <__alt_data_end+0xfc02468c>
   246b8:	10c5c83a 	sub	r2,r2,r3
   246bc:	f800283a 	ret

000246c0 <__register_exitproc>:
   246c0:	defffa04 	addi	sp,sp,-24
   246c4:	dc000315 	stw	r16,12(sp)
   246c8:	040000b4 	movhi	r16,2
   246cc:	841df704 	addi	r16,r16,30684
   246d0:	80c00017 	ldw	r3,0(r16)
   246d4:	dc400415 	stw	r17,16(sp)
   246d8:	dfc00515 	stw	ra,20(sp)
   246dc:	18805217 	ldw	r2,328(r3)
   246e0:	2023883a 	mov	r17,r4
   246e4:	10003726 	beq	r2,zero,247c4 <__register_exitproc+0x104>
   246e8:	10c00117 	ldw	r3,4(r2)
   246ec:	010007c4 	movi	r4,31
   246f0:	20c00e16 	blt	r4,r3,2472c <__register_exitproc+0x6c>
   246f4:	1a000044 	addi	r8,r3,1
   246f8:	8800221e 	bne	r17,zero,24784 <__register_exitproc+0xc4>
   246fc:	18c00084 	addi	r3,r3,2
   24700:	18c7883a 	add	r3,r3,r3
   24704:	18c7883a 	add	r3,r3,r3
   24708:	12000115 	stw	r8,4(r2)
   2470c:	10c7883a 	add	r3,r2,r3
   24710:	19400015 	stw	r5,0(r3)
   24714:	0005883a 	mov	r2,zero
   24718:	dfc00517 	ldw	ra,20(sp)
   2471c:	dc400417 	ldw	r17,16(sp)
   24720:	dc000317 	ldw	r16,12(sp)
   24724:	dec00604 	addi	sp,sp,24
   24728:	f800283a 	ret
   2472c:	00800034 	movhi	r2,0
   24730:	10940804 	addi	r2,r2,20512
   24734:	10002626 	beq	r2,zero,247d0 <__register_exitproc+0x110>
   24738:	01006404 	movi	r4,400
   2473c:	d9400015 	stw	r5,0(sp)
   24740:	d9800115 	stw	r6,4(sp)
   24744:	d9c00215 	stw	r7,8(sp)
   24748:	00050200 	call	5020 <malloc>
   2474c:	d9400017 	ldw	r5,0(sp)
   24750:	d9800117 	ldw	r6,4(sp)
   24754:	d9c00217 	ldw	r7,8(sp)
   24758:	10001d26 	beq	r2,zero,247d0 <__register_exitproc+0x110>
   2475c:	81000017 	ldw	r4,0(r16)
   24760:	10000115 	stw	zero,4(r2)
   24764:	02000044 	movi	r8,1
   24768:	22405217 	ldw	r9,328(r4)
   2476c:	0007883a 	mov	r3,zero
   24770:	12400015 	stw	r9,0(r2)
   24774:	20805215 	stw	r2,328(r4)
   24778:	10006215 	stw	zero,392(r2)
   2477c:	10006315 	stw	zero,396(r2)
   24780:	883fde26 	beq	r17,zero,246fc <__alt_data_end+0xfc0246fc>
   24784:	18c9883a 	add	r4,r3,r3
   24788:	2109883a 	add	r4,r4,r4
   2478c:	1109883a 	add	r4,r2,r4
   24790:	21802215 	stw	r6,136(r4)
   24794:	01800044 	movi	r6,1
   24798:	12406217 	ldw	r9,392(r2)
   2479c:	30cc983a 	sll	r6,r6,r3
   247a0:	4992b03a 	or	r9,r9,r6
   247a4:	12406215 	stw	r9,392(r2)
   247a8:	21c04215 	stw	r7,264(r4)
   247ac:	01000084 	movi	r4,2
   247b0:	893fd21e 	bne	r17,r4,246fc <__alt_data_end+0xfc0246fc>
   247b4:	11006317 	ldw	r4,396(r2)
   247b8:	218cb03a 	or	r6,r4,r6
   247bc:	11806315 	stw	r6,396(r2)
   247c0:	003fce06 	br	246fc <__alt_data_end+0xfc0246fc>
   247c4:	18805304 	addi	r2,r3,332
   247c8:	18805215 	stw	r2,328(r3)
   247cc:	003fc606 	br	246e8 <__alt_data_end+0xfc0246e8>
   247d0:	00bfffc4 	movi	r2,-1
   247d4:	003fd006 	br	24718 <__alt_data_end+0xfc024718>

000247d8 <__call_exitprocs>:
   247d8:	defff504 	addi	sp,sp,-44
   247dc:	df000915 	stw	fp,36(sp)
   247e0:	dd400615 	stw	r21,24(sp)
   247e4:	dc800315 	stw	r18,12(sp)
   247e8:	dfc00a15 	stw	ra,40(sp)
   247ec:	ddc00815 	stw	r23,32(sp)
   247f0:	dd800715 	stw	r22,28(sp)
   247f4:	dd000515 	stw	r20,20(sp)
   247f8:	dcc00415 	stw	r19,16(sp)
   247fc:	dc400215 	stw	r17,8(sp)
   24800:	dc000115 	stw	r16,4(sp)
   24804:	d9000015 	stw	r4,0(sp)
   24808:	2839883a 	mov	fp,r5
   2480c:	04800044 	movi	r18,1
   24810:	057fffc4 	movi	r21,-1
   24814:	008000b4 	movhi	r2,2
   24818:	109df704 	addi	r2,r2,30684
   2481c:	12000017 	ldw	r8,0(r2)
   24820:	45005217 	ldw	r20,328(r8)
   24824:	44c05204 	addi	r19,r8,328
   24828:	a0001c26 	beq	r20,zero,2489c <__call_exitprocs+0xc4>
   2482c:	a0800117 	ldw	r2,4(r20)
   24830:	15ffffc4 	addi	r23,r2,-1
   24834:	b8000d16 	blt	r23,zero,2486c <__call_exitprocs+0x94>
   24838:	14000044 	addi	r16,r2,1
   2483c:	8421883a 	add	r16,r16,r16
   24840:	8421883a 	add	r16,r16,r16
   24844:	84402004 	addi	r17,r16,128
   24848:	a463883a 	add	r17,r20,r17
   2484c:	a421883a 	add	r16,r20,r16
   24850:	e0001e26 	beq	fp,zero,248cc <__call_exitprocs+0xf4>
   24854:	80804017 	ldw	r2,256(r16)
   24858:	e0801c26 	beq	fp,r2,248cc <__call_exitprocs+0xf4>
   2485c:	bdffffc4 	addi	r23,r23,-1
   24860:	843fff04 	addi	r16,r16,-4
   24864:	8c7fff04 	addi	r17,r17,-4
   24868:	bd7ff91e 	bne	r23,r21,24850 <__alt_data_end+0xfc024850>
   2486c:	00800034 	movhi	r2,0
   24870:	10940d04 	addi	r2,r2,20532
   24874:	10000926 	beq	r2,zero,2489c <__call_exitprocs+0xc4>
   24878:	a0800117 	ldw	r2,4(r20)
   2487c:	1000301e 	bne	r2,zero,24940 <__call_exitprocs+0x168>
   24880:	a0800017 	ldw	r2,0(r20)
   24884:	10003226 	beq	r2,zero,24950 <__call_exitprocs+0x178>
   24888:	a009883a 	mov	r4,r20
   2488c:	98800015 	stw	r2,0(r19)
   24890:	00050340 	call	5034 <free>
   24894:	9d000017 	ldw	r20,0(r19)
   24898:	a03fe41e 	bne	r20,zero,2482c <__alt_data_end+0xfc02482c>
   2489c:	dfc00a17 	ldw	ra,40(sp)
   248a0:	df000917 	ldw	fp,36(sp)
   248a4:	ddc00817 	ldw	r23,32(sp)
   248a8:	dd800717 	ldw	r22,28(sp)
   248ac:	dd400617 	ldw	r21,24(sp)
   248b0:	dd000517 	ldw	r20,20(sp)
   248b4:	dcc00417 	ldw	r19,16(sp)
   248b8:	dc800317 	ldw	r18,12(sp)
   248bc:	dc400217 	ldw	r17,8(sp)
   248c0:	dc000117 	ldw	r16,4(sp)
   248c4:	dec00b04 	addi	sp,sp,44
   248c8:	f800283a 	ret
   248cc:	a0800117 	ldw	r2,4(r20)
   248d0:	80c00017 	ldw	r3,0(r16)
   248d4:	10bfffc4 	addi	r2,r2,-1
   248d8:	15c01426 	beq	r2,r23,2492c <__call_exitprocs+0x154>
   248dc:	80000015 	stw	zero,0(r16)
   248e0:	183fde26 	beq	r3,zero,2485c <__alt_data_end+0xfc02485c>
   248e4:	95c8983a 	sll	r4,r18,r23
   248e8:	a0806217 	ldw	r2,392(r20)
   248ec:	a5800117 	ldw	r22,4(r20)
   248f0:	2084703a 	and	r2,r4,r2
   248f4:	10000b26 	beq	r2,zero,24924 <__call_exitprocs+0x14c>
   248f8:	a0806317 	ldw	r2,396(r20)
   248fc:	2088703a 	and	r4,r4,r2
   24900:	20000c1e 	bne	r4,zero,24934 <__call_exitprocs+0x15c>
   24904:	89400017 	ldw	r5,0(r17)
   24908:	d9000017 	ldw	r4,0(sp)
   2490c:	183ee83a 	callr	r3
   24910:	a0800117 	ldw	r2,4(r20)
   24914:	15bfbf1e 	bne	r2,r22,24814 <__alt_data_end+0xfc024814>
   24918:	98800017 	ldw	r2,0(r19)
   2491c:	153fcf26 	beq	r2,r20,2485c <__alt_data_end+0xfc02485c>
   24920:	003fbc06 	br	24814 <__alt_data_end+0xfc024814>
   24924:	183ee83a 	callr	r3
   24928:	003ff906 	br	24910 <__alt_data_end+0xfc024910>
   2492c:	a5c00115 	stw	r23,4(r20)
   24930:	003feb06 	br	248e0 <__alt_data_end+0xfc0248e0>
   24934:	89000017 	ldw	r4,0(r17)
   24938:	183ee83a 	callr	r3
   2493c:	003ff406 	br	24910 <__alt_data_end+0xfc024910>
   24940:	a0800017 	ldw	r2,0(r20)
   24944:	a027883a 	mov	r19,r20
   24948:	1029883a 	mov	r20,r2
   2494c:	003fb606 	br	24828 <__alt_data_end+0xfc024828>
   24950:	0005883a 	mov	r2,zero
   24954:	003ffb06 	br	24944 <__alt_data_end+0xfc024944>

00024958 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   24958:	defffd04 	addi	sp,sp,-12
   2495c:	df000215 	stw	fp,8(sp)
   24960:	df000204 	addi	fp,sp,8
   24964:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   24968:	d0271f45 	stb	zero,-25475(gp)
   2496c:	e0bfff17 	ldw	r2,-4(fp)
   24970:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   24974:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   24978:	10000226 	beq	r2,zero,24984 <_exit+0x2c>
    ALT_SIM_FAIL();
   2497c:	002af070 	cmpltui	zero,zero,43969
   24980:	00000106 	br	24988 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   24984:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   24988:	003fff06 	br	24988 <__alt_data_end+0xfc024988>
