
manynicegame.elf:     file format elf32-littlenios2
manynicegame.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020244

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00018074 memsz 0x00018074 flags r-x
    LOAD off    0x00019094 vaddr 0x00038094 paddr 0x00039c08 align 2**12
         filesz 0x00001b74 memsz 0x00001b74 flags rw-
    LOAD off    0x0001b77c vaddr 0x0003b77c paddr 0x0003b77c align 2**12
         filesz 0x00000000 memsz 0x000033e8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00017998  00020244  00020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004b8  00037bdc  00037bdc  00018bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b74  00038094  00039c08  00019094  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000033e8  0003b77c  0003b77c  0001b77c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0003eb64  0003eb64  0001ac08  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001ac08  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000010b0  00000000  00000000  0001ac30  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002f16b  00000000  00000000  0001bce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b21f  00000000  00000000  0004ae4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000e287  00000000  00000000  0005606a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000032c4  00000000  00000000  000642f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004a56  00000000  00000000  000675b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017bbd  00000000  00000000  0006c00e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00083bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001948  00000000  00000000  00083c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  00089f72  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00089f78  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00089f84  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00089f85  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00089f86  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00089f91  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00089f9c  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000d  00000000  00000000  00089fa7  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000053  00000000  00000000  00089fb4  2**0
                  CONTENTS, READONLY
 26 .jdi          00004ced  00000000  00000000  0008a007  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00069a70  00000000  00000000  0008ecf4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020244 l    d  .text	00000000 .text
00037bdc l    d  .rodata	00000000 .rodata
00038094 l    d  .rwdata	00000000 .rwdata
0003b77c l    d  .bss	00000000 .bss
0003eb64 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../manynicegame_bsp//obj/HAL/src/crt0.o
0002028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 algo_ucos.c
00000000 l    df *ABS*	00000000 vector.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00037cb6 l     O .rodata	00000010 zeroes.4404
00023c68 l     F .text	000000bc __sbprintf
00037cc6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00023e78 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000259a8 l     F .text	00000008 __fp_unlock
000259bc l     F .text	0000019c __sinit.part.1
00025b58 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0003849c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
000388e0 l     O .rwdata	00000020 lc_ctype_charset
000388c0 l     O .rwdata	00000020 lc_message_charset
00038900 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00037cf8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
000281d0 l     F .text	000000fc __sprint_r.part.0
00037e2c l     O .rodata	00000010 blanks.4348
00037e1c l     O .rodata	00000010 zeroes.4349
0002975c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0002d418 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0002d524 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0002d550 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0002d63c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0002d71c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002d808 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0002d9d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00039b7c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0002dc20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00039b80 l     O .rwdata	00000004 lockid
0003b7a8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00039b84 l     O .rwdata	00000004 lockid
0003b7b0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0002f650 l     F .text	00000048 OS_InitMisc
0002f698 l     F .text	0000006c OS_InitRdyList
0002f804 l     F .text	000000e4 OS_InitTCBList
0002f570 l     F .text	000000e0 OS_InitEventList
0002f704 l     F .text	00000080 OS_InitTaskIdle
0002f784 l     F .text	00000080 OS_InitTaskStat
0002fa74 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00031784 l     F .text	000000f4 OS_FlagTaskRdy
00031544 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0003582c l     F .text	00000034 alt_dev_reg
00038ae0 l     O .rwdata	0000106c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00035b8c l     F .text	000002a4 altera_avalon_jtag_uart_irq
00035e30 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00036780 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00036bf4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00036d34 l     F .text	0000003c alt_get_errno
00036d70 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0003b814 g     O .bss	00000004 alt_instruction_exception_handler
00021300 g     F .text	00000018 putchar
00027c64 g     F .text	00000074 _mprec_log10
00039bd2 g     O .rwdata	00000002 OSTaskNameSize
00027d50 g     F .text	0000008c __any_on
00029e50 g     F .text	00000054 _isatty_r
00037d04 g     O .rodata	00000028 __mprec_tinytens
0002d918 g     F .text	000000bc alt_main
00021318 g     F .text	000000c0 _puts_r
0003ea64 g     O .bss	00000100 alt_irq
00029ea4 g     F .text	00000060 _lseek_r
00031fa4 g     F .text	000000cc OS_MemInit
00039c08 g       *ABS*	00000000 __flash_rwdata_start
000357cc g     F .text	00000060 OSTimeSet
0002bf44 g     F .text	00000088 .hidden __eqdf2
0002e2c4 g     F .text	00000610 OSEventPendMulti
0003eb64 g       *ABS*	00000000 __alt_heap_start
0003737c g     F .text	00000024 OSTaskCreateHook
000212bc g     F .text	0000003c printf
00039baa g     O .rwdata	00000002 OSMboxEn
0002e92c g     F .text	0000004c OSIntEnter
00029f64 g     F .text	0000009c _wcrtomb_r
00028090 g     F .text	0000005c __sseek
00025cf8 g     F .text	00000010 __sinit
00029818 g     F .text	00000140 __swbuf_r
000204bc g     F .text	00000058 vectorGet
00039bba g     O .rwdata	00000002 OSQEn
000267c0 g     F .text	0000007c _setlocale_r
00025b60 g     F .text	00000068 __sfmoreglue
0002df98 g     F .text	000000cc __malloc_unlock
000373e4 g     F .text	00000020 OSTaskStatHook
0003b7b8 g     O .bss	00000001 OSLockNesting
00039bf8 g     O .rwdata	00000002 OSDataSize
0003b7b9 g     O .bss	00000001 OSRunning
00026c84 g     F .text	0000015c memmove
00037424 g     F .text	00000020 OSInitHookBegin
00039bf0 g     O .rwdata	00000002 OSTmrSize
00025ce0 g     F .text	00000018 _cleanup
00026de0 g     F .text	000000a8 _Balloc
00020684 g     F .text	00000058 printLocation
0003b7bc g     O .bss	00000004 OSIdleCtr
0002bfcc g     F .text	000000dc .hidden __gtdf2
0003712c g     F .text	00000024 altera_nios2_gen2_irq_init
000371fc g       .text	00000000 OSStartTsk
0002fda4 g     F .text	000002d4 OS_TCBInit
00020000 g     F .entry	0000001c __reset
00039bf6 g     O .rwdata	00000002 OSTmrWheelTblSize
00020020 g       *ABS*	00000000 __flash_exceptions_start
00039b96 g     O .rwdata	00000002 OSEventSize
0003b7c0 g     O .bss	00000001 OSPrioHighRdy
00029df4 g     F .text	0000005c _fstat_r
000373a0 g     F .text	00000024 OSTaskDelHook
0003b788 g     O .bss	00000004 errno
0002800c g     F .text	00000008 __seofread
000371dc g       .text	00000000 OSStartHighRdy
00034270 g     F .text	000001e4 OSTaskCreateExt
0003108c g     F .text	00000060 OSFlagPendGetFlagsRdy
00039bd6 g     O .rwdata	00000002 OSTaskStatStkSize
00030208 g     F .text	00000308 OSFlagAccept
000325dc g     F .text	000000b8 OSQFlush
00032070 g     F .text	00000140 OSQAccept
0003b7a0 g     O .bss	00000004 alt_argv
00041b4c g       *ABS*	00000000 _gp
000340c4 g     F .text	000001ac OSTaskCreate
00033bd4 g     F .text	000004f0 OSTaskChangePrio
0003b7b4 g     O .bss	00000004 alt_heapsem
00030078 g     F .text	00000190 OSDebugInit
00034454 g     F .text	00000344 OSTaskDel
00038960 g     O .rwdata	00000180 alt_fd_list
0003b840 g     O .bss	00000370 OSFlagTbl
000212f8 g     F .text	00000008 _putchar_r
0002f350 g     F .text	000000b8 OS_EventTaskRemove
000374a8 g     F .text	00000090 alt_find_dev
00026b3c g     F .text	00000148 memcpy
00039bc0 g     O .rwdata	00000002 OSRdyTblSize
000259b0 g     F .text	0000000c _cleanup_r
0002d230 g     F .text	000000dc .hidden __floatsidf
00036cb8 g     F .text	0000007c alt_io_redirect
0002c0a8 g     F .text	000000f4 .hidden __ltdf2
00037bdc g       *ABS*	00000000 __DTOR_END__
000213d8 g     F .text	00000014 puts
000377ac g     F .text	0000009c alt_exception_cause_generated_bad_addr
0002e064 g     F .text	00000120 OSEventNameGet
00039ba4 g     O .rwdata	00000002 OSFlagMax
00027f44 g     F .text	00000074 __fpclassifyd
00027bc0 g     F .text	000000a4 __ratio
0002e978 g     F .text	000000f8 OSIntExit
00029740 g     F .text	0000001c __vfiprintf_internal
00039bde g     O .rwdata	00000002 OSTCBSize
0003b7c1 g     O .bss	00000001 OSPrioCur
0003608c g     F .text	000002bc altera_avalon_jtag_uart_read
00020930 g     F .text	00000014 malloc
0002128c g     F .text	00000030 _printf_r
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0002acf4 g     F .text	00000064 .hidden __udivsi3
0002d678 g     F .text	000000a4 isatty
00039bc4 g     O .rwdata	00000002 OSStkWidth
00037d54 g     O .rodata	000000c8 __mprec_tens
00039bb8 g     O .rwdata	00000002 OSPtrSize
0002683c g     F .text	0000000c __locale_charset
00039b98 g     O .rwdata	00000002 OSEventTblSize
00037150 g       .text	00000000 OSCtxSw
0003771c g     F .text	00000090 alt_icache_flush
0003b784 g     O .bss	00000004 __malloc_top_pad
0003b7c4 g     O .bss	00000004 OSTCBList
0003b798 g     O .bss	00000004 alt_fd_list_lock
00039b5c g     O .rwdata	00000004 __mb_cur_max
0002686c g     F .text	0000000c _localeconv_r
000271ec g     F .text	0000003c __i2b
0002617c g     F .text	000004bc __sfvwrite_r
0003bbb0 g     O .bss	00000c30 OSMemTbl
0003b7c8 g     O .bss	00000001 OSTickStepState
00021968 g     F .text	00000054 _sbrk_r
00039bbc g     O .rwdata	00000002 OSQMax
0003c7e0 g     O .bss	00000800 OSTaskStatStk
00031be0 g     F .text	000000f0 OSMemNameGet
00039b9c g     O .rwdata	00000002 OSFlagEn
00029f04 g     F .text	00000060 _read_r
00039be2 g     O .rwdata	00000002 OSTimeTickHookEn
00032a8c g     F .text	00000168 OSQPost
00031878 g     F .text	000000a4 OS_FlagUnlink
00039b74 g     O .rwdata	00000004 alt_max_fd
0002f93c g     F .text	00000068 OS_MemCopy
0002f9a4 g     F .text	000000d0 OS_Sched
00029ae8 g     F .text	000000f0 _fclose_r
00031af0 g     F .text	000000f0 OSMemGet
00034a80 g     F .text	000001b4 OSTaskNameSet
00025978 g     F .text	00000030 fflush
0003b780 g     O .bss	00000004 __malloc_max_sbrked_mem
0003b7cc g     O .bss	00000004 OSCtxSwCtr
00037404 g     F .text	00000020 OSTimeTickHook
00039ba6 g     O .rwdata	00000002 OSFlagNameSize
000207e8 g     F .text	00000148 printVector
0002f408 g     F .text	00000100 OS_EventTaskRemoveMulti
0002adb0 g     F .text	000008ac .hidden __adddf3
0002f200 g     F .text	00000150 OS_EventTaskWaitMulti
00027968 g     F .text	0000010c __b2d
00039bbe g     O .rwdata	00000002 OSQSize
0002a6c4 g     F .text	00000538 .hidden __umoddi3
0002d844 g     F .text	000000d4 lseek
0003353c g     F .text	0000020c OSSemPend
00039b54 g     O .rwdata	00000004 _global_impure_ptr
00021404 g     F .text	00000564 _realloc_r
00039ba8 g     O .rwdata	00000002 OSLowestPrio
0003eb64 g       *ABS*	00000000 __bss_end
00036b04 g     F .text	000000f0 alt_iic_isr_register
00037484 g     F .text	00000024 OSTCBInitHook
00039bee g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00037024 g     F .text	00000108 alt_tick
0002a14c g     F .text	00000578 .hidden __udivdi3
00029d50 g     F .text	00000024 _fputwc_r
00039b90 g     O .rwdata	00000002 OSEventEn
00037d2c g     O .rodata	00000028 __mprec_bigtens
00026fd0 g     F .text	00000104 __s2b
00039bea g     O .rwdata	00000002 OSTmrCfgNameSize
0002d30c g     F .text	000000a8 .hidden __floatunsidf
000276a8 g     F .text	00000060 __mcmp
00025d18 g     F .text	00000018 __fp_lock_all
00036ab8 g     F .text	0000004c alt_ic_irq_enabled
000316a4 g     F .text	000000e0 OS_FlagInit
00036f88 g     F .text	0000009c alt_alarm_stop
00039bcc g     O .rwdata	00000002 OSTaskIdleStkSize
0003b808 g     O .bss	00000004 alt_irq_active
00033174 g     F .text	000000b0 OSSemAccept
00031de4 g     F .text	000000d8 OSMemPut
0003191c g     F .text	000001d4 OSMemCreate
0003b7d0 g     O .bss	00000004 OSIdleCtrMax
000200fc g     F .exceptions	000000d4 alt_irq_handler
00038938 g     O .rwdata	00000028 alt_dev_null
00039be0 g     O .rwdata	00000002 OSTicksPerSec
00037150 g       .text	00000000 OSIntCtxSw
00036738 g     F .text	00000048 alt_dcache_flush_all
000270d4 g     F .text	00000068 __hi0bits
0002d1b0 g     F .text	00000080 .hidden __fixdfsi
0003b7d4 g     O .bss	00000004 OSTCBFreeList
00039c08 g       *ABS*	00000000 __ram_rwdata_end
00033748 g     F .text	0000016c OSSemPendAbort
00039b6c g     O .rwdata	00000008 alt_dev_list
0002dc5c g     F .text	000000f8 write
00027ddc g     F .text	000000a0 _putc_r
00039be4 g     O .rwdata	00000002 OSVersionNbr
00038094 g       *ABS*	00000000 __ram_rodata_end
0002d58c g     F .text	000000b0 fstat
0002c0a8 g     F .text	000000f4 .hidden __ledf2
000206dc g     F .text	0000010c printCapture
00020514 g     F .text	00000134 vectorDelete
00039b8c g     O .rwdata	00000004 OSEndiannessTest
00027420 g     F .text	00000140 __pow5mult
000282e4 g     F .text	0000145c ___vfiprintf_internal_r
0003b794 g     O .bss	00000004 __nlocale_changed
0002ad58 g     F .text	00000058 .hidden __umodsi3
00039b9e g     O .rwdata	00000002 OSFlagGrpSize
0003eb64 g       *ABS*	00000000 end
00035a44 g     F .text	00000148 altera_avalon_jtag_uart_init
0002fc0c g     F .text	000000cc OS_TaskStat
000201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00037bdc g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
0002d3b4 g     F .text	00000064 .hidden __clzsi2
00036348 g     F .text	000002c4 altera_avalon_jtag_uart_write
00025d08 g     F .text	00000004 __sfp_lock_acquire
00026a58 g     F .text	000000e4 memchr
0002f8e8 g     F .text	00000054 OS_MemClr
00021a54 g     F .text	000021f8 ___vfprintf_internal_r
00037220 g     F .text	0000015c OSTaskStkInit
00025e6c g     F .text	00000310 _free_r
00026848 g     F .text	00000010 __locale_mb_cur_max
0002ef58 g     F .text	00000198 OS_EventTaskRdy
00037a28 g     F .text	00000180 __call_exitprocs
0003b7d8 g     O .bss	00000001 OSCPUUsage
0003b790 g     O .bss	00000004 __mlocale_changed
00039b4c g     O .rwdata	00000004 __malloc_sbrk_base
00020244 g     F .text	0000004c _start
0003b80c g     O .bss	00000004 _alt_tick_rate
00032694 g     F .text	0000028c OSQPend
00035340 g     F .text	00000104 OSTimeDly
00027560 g     F .text	00000148 __lshift
0003b810 g     O .bss	00000004 _alt_nticks
0002da10 g     F .text	000000fc read
00035898 g     F .text	00000048 alt_sys_init
00037910 g     F .text	00000118 __register_exitproc
0003b7d9 g     O .bss	00000001 OSTaskCtr
00035444 g     F .text	00000158 OSTimeDlyHMSM
00027228 g     F .text	000001f8 __multiply
00035f34 g     F .text	00000068 altera_avalon_jtag_uart_close
00038094 g       *ABS*	00000000 __ram_rwdata_start
00037bdc g       *ABS*	00000000 __ram_rodata_start
0003b818 g     O .bss	00000028 __malloc_current_mallinfo
00039b92 g     O .rwdata	00000002 OSEventMax
00027a74 g     F .text	0000014c __d2b
000338b4 g     F .text	00000110 OSSemPost
0002eafc g     F .text	000000dc OSSchedUnlock
000213ec g     F .text	00000018 realloc
000358e0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00037640 g     F .text	000000dc alt_get_fd
0003b7dc g     O .bss	00000004 OSMemFreeList
0002ec48 g     F .text	000000b0 OSStatInit
00031480 g     F .text	000000c4 OSFlagQuery
00039bc8 g     O .rwdata	00000002 OSTaskCreateExtEn
000299d0 g     F .text	00000054 _close_r
00037894 g     F .text	0000007c memcmp
0002ef38 g     F .text	00000020 OS_Dummy
000359a0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0003eb64 g       *ABS*	00000000 __alt_stack_base
000359f0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00023d24 g     F .text	00000154 __swsetup_r
0003cfe0 g     O .bss	000001e0 OSQTbl
0002b65c g     F .text	000008e8 .hidden __divdf3
00025bc8 g     F .text	00000118 __sfp
00027cd8 g     F .text	00000078 __copybits
0002033c g     F .text	00000120 vectorAdd
00038094 g     O .rwdata	00000408 __malloc_av_
00025d14 g     F .text	00000004 __sinit_lock_release
0003b7e0 g     O .bss	00000004 OSTCBHighRdy
0002c19c g     F .text	00000718 .hidden __muldf3
00027fb8 g     F .text	00000054 __sread
0003b7e4 g     O .bss	00000004 OSQFreeList
00037538 g     F .text	00000108 alt_find_file
000367bc g     F .text	000000a4 alt_dev_llist_insert
0002de78 g     F .text	00000120 __malloc_lock
0002db70 g     F .text	000000b0 sbrk
0002e184 g     F .text	00000140 OSEventNameSet
0002591c g     F .text	0000005c _fflush_r
00029a24 g     F .text	000000c4 _calloc_r
0003b7e8 g     O .bss	00000001 OSRdyGrp
0003b77c g       *ABS*	00000000 __bss_start
00021164 g     F .text	00000128 memset
00020290 g     F .text	00000038 main
0003b7a4 g     O .bss	00000004 alt_envp
0003b77c g     O .bss	00000004 __malloc_max_total_mem
00035940 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00029958 g     F .text	00000018 __swbuf
00037f5c g     O .rodata	00000100 OSUnMapTbl
00039bc2 g     O .rwdata	00000002 OSSemEn
000310ec g     F .text	00000394 OSFlagPost
000280ec g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
00029bd8 g     F .text	00000014 fclose
0002f0f0 g     F .text	00000110 OS_EventTaskWait
0002fcd8 g     F .text	000000cc OS_TaskStatStkChk
00034798 g     F .text	00000150 OSTaskDelReq
00024078 g     F .text	00001688 _dtoa_r
00020958 g     F .text	0000080c _malloc_r
0002a0c0 g     F .text	00000030 __ascii_wctomb
00039b78 g     O .rwdata	00000004 alt_errno
0002ebd8 g     F .text	00000070 OSStart
0002de18 g     F .text	00000060 __env_unlock
00026638 g     F .text	000000c4 _fwalk
00034c34 g     F .text	000001d4 OSTaskResume
00031ebc g     F .text	000000e8 OSMemQuery
00039bd4 g     O .rwdata	00000002 OSTaskStatEn
00020648 g     F .text	0000003c vectorFree
00039bae g     O .rwdata	00000002 OSMemMax
00032bf4 g     F .text	00000170 OSQPostFront
00027e7c g     F .text	000000c8 putc
0002abfc g     F .text	00000084 .hidden __divsi3
0003b7e9 g     O .bss	00000003 OSRdyTbl
00039b88 g     O .rwdata	00000002 OSDebugEn
00025d48 g     F .text	00000124 _malloc_trim_r
00037bdc g       *ABS*	00000000 __CTOR_END__
00039ba0 g     O .rwdata	00000002 OSFlagNodeSize
00039be8 g     O .rwdata	00000002 OSTmrCfgMax
000280f4 g     F .text	000000dc strcmp
000321b0 g     F .text	000001ac OSQCreate
000348e8 g     F .text	00000198 OSTaskNameGet
00037bdc g       *ABS*	00000000 __flash_rodata_start
00032d64 g     F .text	0000020c OSQPostOpt
0002ecf8 g     F .text	00000220 OSTimeTick
00039bd0 g     O .rwdata	00000002 OSTaskMax
00037bdc g       *ABS*	00000000 __DTOR_LIST__
00033224 g     F .text	000000d8 OSSemCreate
00039bf4 g     O .rwdata	00000002 OSTmrWheelSize
0002bf44 g     F .text	00000088 .hidden __nedf2
00039bca g     O .rwdata	00000002 OSTaskDelEn
000339c4 g     F .text	00000110 OSSemQuery
0003235c g     F .text	00000280 OSQDel
00032920 g     F .text	0000016c OSQPendAbort
00035860 g     F .text	00000038 alt_irq_init
0002db0c g     F .text	00000064 alt_release_fd
00037e3c g     O .rodata	00000100 .hidden __clz_tab
0003b78c g     O .bss	00000004 _PathLocale
00037848 g     F .text	00000014 atexit
00029970 g     F .text	00000060 _write_r
0002ea70 g     F .text	0000008c OSSchedLock
00026878 g     F .text	00000018 setlocale
00030510 g     F .text	00000108 OSFlagCreate
00039b58 g     O .rwdata	00000004 _impure_ptr
0003b79c g     O .bss	00000004 alt_argc
00025700 g     F .text	0000021c __sflush_r
000368c0 g     F .text	00000060 _do_dtors
00026864 g     F .text	00000008 __locale_cjk_lang
00039b9a g     O .rwdata	00000002 OSEventMultiEn
00030618 g     F .text	00000248 OSFlagDel
0003b7ec g     O .bss	00000004 OSEventFreeList
00020020 g       .exceptions	00000000 alt_irq_entry
00020314 g     F .text	00000028 vectorCount
00027904 g     F .text	00000064 __ulp
00030ad4 g     F .text	000005b8 OSFlagPend
00039be6 g     O .rwdata	00000002 OSTmrEn
00025d30 g     F .text	00000018 __fp_unlock_all
00039b64 g     O .rwdata	00000008 alt_fs_list
0002fae8 g     F .text	00000074 OS_StrCopy
0002045c g     F .text	00000060 vectorSet
00039bb0 g     O .rwdata	00000002 OSMemNameSize
00037444 g     F .text	00000020 OSInitHookEnd
00020020 g       *ABS*	00000000 __ram_exceptions_start
00039bdc g     O .rwdata	00000002 OSTCBPrioTblMax
00026890 g     F .text	0000000c localeconv
00039bd8 g     O .rwdata	00000002 OSTaskStatStkChkEn
00036954 g     F .text	00000050 alt_ic_isr_register
00039bac g     O .rwdata	00000002 OSMemEn
00039bb6 g     O .rwdata	00000002 OSMutexEn
00039c08 g       *ABS*	00000000 _edata
0003eb64 g       *ABS*	00000000 _end
0003b7f0 g     O .bss	00000001 OSIntNesting
00029bec g     F .text	00000164 __fputwc
00020244 g       *ABS*	00000000 __ram_exceptions_end
00035f9c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0003559c g     F .text	000001d4 OSTimeDlyResume
00030988 g     F .text	0000014c OSFlagNameSet
00034e08 g     F .text	000001c0 OSTaskStkChk
00036a2c g     F .text	0000008c alt_ic_irq_disable
000202c8 g     F .text	0000004c vectorInit
00039bb2 g     O .rwdata	00000002 OSMemSize
00028014 g     F .text	0000007c __swrite
00039b50 g     O .rwdata	00000004 __malloc_trim_threshold
00026858 g     F .text	0000000c __locale_msgcharset
0003b7f4 g     O .bss	00000004 OSTCBCur
0003785c g     F .text	00000038 exit
00039bb4 g     O .rwdata	00000002 OSMemTblSize
000266fc g     F .text	000000c4 _fwalk_reent
00027708 g     F .text	000001fc __mdiff
0002ac80 g     F .text	00000074 .hidden __modsi3
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00025d0c g     F .text	00000004 __sfp_lock_release
0002e8d4 g     F .text	00000058 OSInit
000351ac g     F .text	00000124 OSTaskQuery
000330cc g     F .text	000000a8 OS_QInit
0002fb5c g     F .text	00000054 OS_StrLen
00031cd0 g     F .text	00000114 OSMemNameSet
00039bce g     O .rwdata	00000002 OSTaskProfileEn
0003b7f8 g     O .bss	00000004 OSTime
0003d1c0 g     O .bss	00000800 OSTaskIdleStk
00037ba8 g     F .text	00000034 _exit
0003660c g     F .text	0000012c alt_alarm_start
00030860 g     F .text	00000128 OSFlagNameGet
00035770 g     F .text	0000005c OSTimeGet
0002689c g     F .text	000001bc __smakebuf_r
000219bc g     F .text	00000098 strlen
000373c4 g     F .text	00000020 OSTaskSwHook
00036e34 g     F .text	00000154 open
0003d9c0 g     O .bss	00000b40 OSEventTbl
0002bfcc g     F .text	000000dc .hidden __gedf2
0003e500 g     O .bss	00000510 OSTCBTbl
00033ad4 g     F .text	00000100 OSSemSet
00039b60 g     O .rwdata	00000004 __wctomb
000282cc g     F .text	00000018 __sprint_r
00036920 g     F .text	00000034 alt_icache_flush_all
00039bfc g     O .rwdata	00000004 alt_priority_mask
000332fc g     F .text	00000240 OSSemDel
0003b7fc g     O .bss	00000004 OSFlagFreeList
000369a4 g     F .text	00000088 alt_ic_irq_enable
00039b94 g     O .rwdata	00000002 OSEventNameSize
00023c4c g     F .text	0000001c __vfprintf_internal
0003b800 g     O .bss	00000001 OSStatRdy
0003ea10 g     O .bss	00000054 OSTCBPrioTbl
0002a0f0 g     F .text	0000005c _wctomb_r
0002dd54 g     F .text	000000c4 __env_lock
00039bda g     O .rwdata	00000002 OSTaskSwHookEn
0002c8b4 g     F .text	000008fc .hidden __subdf3
0002713c g     F .text	000000b0 __lo0bits
00039c00 g     O .rwdata	00000008 alt_alarm_list
00039ba2 g     O .rwdata	00000002 OSFlagWidth
00036860 g     F .text	00000060 _do_ctors
0002a000 g     F .text	000000c0 wcrtomb
0002d454 g     F .text	000000d0 close
0003b7ac g     O .bss	00000004 alt_envsem
0003b804 g     O .bss	00000004 OSIdleCtrRun
0002ef18 g     F .text	00000020 OSVersion
00039bec g     O .rwdata	00000002 OSTmrCfgWheelSize
0002d784 g     F .text	00000084 alt_load
000352d0 g     F .text	00000070 OS_TaskStkClr
00039bc6 g     O .rwdata	00000002 OSTaskCreateEn
0002f508 g     F .text	00000068 OS_EventWaitListInit
00029d74 g     F .text	00000080 fputwc
00037464 g     F .text	00000020 OSTaskIdleHook
00020944 g     F .text	00000014 free
00025d10 g     F .text	00000004 __sinit_lock_acquire
00026eb0 g     F .text	00000120 __multadd
00034fc8 g     F .text	000001e4 OSTaskSuspend
00026e88 g     F .text	00000028 _Bfree
0002fbb0 g     F .text	0000005c OS_TaskIdle
00039bf2 g     O .rwdata	00000002 OSTmrTblSize
00032f70 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <_gp+0xfffde4b8>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08409114 	ori	at,at,580
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	002e92c0 	call	2e92c <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	00800134 	movhi	r2,4
   20140:	10ba9904 	addi	r2,r2,-5532
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	00800134 	movhi	r2,4
   20158:	10ba9904 	addi	r2,r2,-5532
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <_gp+0xfffde5e0>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <_gp+0xfffde5d4>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	002e9780 	call	2e978 <OSIntExit>
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e4:	000531fa 	rdctl	r2,exception
   201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201ec:	e0bffd17 	ldw	r2,-12(fp)
   201f0:	10801f0c 	andi	r2,r2,124
   201f4:	1004d0ba 	srli	r2,r2,2
   201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   201fc:	0005333a 	rdctl	r2,badaddr
   20200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20204:	d0a73217 	ldw	r2,-25400(gp)
   20208:	10000726 	beq	r2,zero,20228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   2020c:	d0a73217 	ldw	r2,-25400(gp)
   20210:	e0fffd17 	ldw	r3,-12(fp)
   20214:	e1bffe17 	ldw	r6,-8(fp)
   20218:	e17fff17 	ldw	r5,-4(fp)
   2021c:	1809883a 	mov	r4,r3
   20220:	103ee83a 	callr	r2
   20224:	00000206 	br	20230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2022c:	0005883a 	mov	r2,zero
}
   20230:	e037883a 	mov	sp,fp
   20234:	dfc00117 	ldw	ra,4(sp)
   20238:	df000017 	ldw	fp,0(sp)
   2023c:	dec00204 	addi	sp,sp,8
   20240:	f800283a 	ret

Disassembly of section .text:

00020244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   20244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   20248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   2024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   20250:	00bffd16 	blt	zero,r2,20248 <_gp+0xfffde6fc>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20254:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   2025c:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   20260:	d686d314 	ori	gp,gp,6988
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20264:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   20268:	10addf14 	ori	r2,r2,46972

    movhi r3, %hi(__bss_end)
   2026c:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   20270:	18fad914 	ori	r3,r3,60260

    beq r2, r3, 1f
   20274:	10c00326 	beq	r2,r3,20284 <_start+0x40>

0:
    stw zero, (r2)
   20278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20280:	10fffd36 	bltu	r2,r3,20278 <_gp+0xfffde72c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20284:	002d7840 	call	2d784 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20288:	002d9180 	call	2d918 <alt_main>

0002028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2028c:	003fff06 	br	2028c <_gp+0xfffde740>

00020290 <main>:
}
/* The main function creates two task and starts multi-tasking
 */

int main(void)
{
   20290:	defffe04 	addi	sp,sp,-8
   20294:	dfc00115 	stw	ra,4(sp)
   20298:	df000015 	stw	fp,0(sp)
   2029c:	d839883a 	mov	fp,sp
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);*/
	printf("dikkekoenk");
   202a0:	010000f4 	movhi	r4,3
   202a4:	211ef704 	addi	r4,r4,31708
   202a8:	00212bc0 	call	212bc <printf>
  OSStart();
   202ac:	002ebd80 	call	2ebd8 <OSStart>
  return 0;
   202b0:	0005883a 	mov	r2,zero
}
   202b4:	e037883a 	mov	sp,fp
   202b8:	dfc00117 	ldw	ra,4(sp)
   202bc:	df000017 	ldw	fp,0(sp)
   202c0:	dec00204 	addi	sp,sp,8
   202c4:	f800283a 	ret

000202c8 <vectorInit>:

#include "vector.h"
#include "constants.h"

Vector * vectorInit()
{
   202c8:	defffd04 	addi	sp,sp,-12
   202cc:	dfc00215 	stw	ra,8(sp)
   202d0:	df000115 	stw	fp,4(sp)
   202d4:	df000104 	addi	fp,sp,4
	Vector *v = malloc(sizeof(Vector));
   202d8:	01000304 	movi	r4,12
   202dc:	00209300 	call	20930 <malloc>
   202e0:	e0bfff15 	stw	r2,-4(fp)
	v->data = NULL;
   202e4:	e0bfff17 	ldw	r2,-4(fp)
   202e8:	10000015 	stw	zero,0(r2)
	v->size = 0;
   202ec:	e0bfff17 	ldw	r2,-4(fp)
   202f0:	10000115 	stw	zero,4(r2)
	v->count = 0;
   202f4:	e0bfff17 	ldw	r2,-4(fp)
   202f8:	10000215 	stw	zero,8(r2)
	return v;
   202fc:	e0bfff17 	ldw	r2,-4(fp)
}
   20300:	e037883a 	mov	sp,fp
   20304:	dfc00117 	ldw	ra,4(sp)
   20308:	df000017 	ldw	fp,0(sp)
   2030c:	dec00204 	addi	sp,sp,8
   20310:	f800283a 	ret

00020314 <vectorCount>:

int vectorCount(Vector * v)
{
   20314:	defffe04 	addi	sp,sp,-8
   20318:	df000115 	stw	fp,4(sp)
   2031c:	df000104 	addi	fp,sp,4
   20320:	e13fff15 	stw	r4,-4(fp)
	return v->count;
   20324:	e0bfff17 	ldw	r2,-4(fp)
   20328:	10800217 	ldw	r2,8(r2)
}
   2032c:	e037883a 	mov	sp,fp
   20330:	df000017 	ldw	fp,0(sp)
   20334:	dec00104 	addi	sp,sp,4
   20338:	f800283a 	ret

0002033c <vectorAdd>:

void vectorAdd(Vector * v, void * e)
{
   2033c:	defffc04 	addi	sp,sp,-16
   20340:	dfc00315 	stw	ra,12(sp)
   20344:	df000215 	stw	fp,8(sp)
   20348:	df000204 	addi	fp,sp,8
   2034c:	e13ffe15 	stw	r4,-8(fp)
   20350:	e17fff15 	stw	r5,-4(fp)
	if (v->size == 0) {
   20354:	e0bffe17 	ldw	r2,-8(fp)
   20358:	10800117 	ldw	r2,4(r2)
   2035c:	1000141e 	bne	r2,zero,203b0 <vectorAdd+0x74>
		v->size = 10;
   20360:	e0bffe17 	ldw	r2,-8(fp)
   20364:	00c00284 	movi	r3,10
   20368:	10c00115 	stw	r3,4(r2)
		v->data = malloc(sizeof(void*) * v->size);
   2036c:	e0bffe17 	ldw	r2,-8(fp)
   20370:	10800117 	ldw	r2,4(r2)
   20374:	1085883a 	add	r2,r2,r2
   20378:	1085883a 	add	r2,r2,r2
   2037c:	1009883a 	mov	r4,r2
   20380:	00209300 	call	20930 <malloc>
   20384:	1007883a 	mov	r3,r2
   20388:	e0bffe17 	ldw	r2,-8(fp)
   2038c:	10c00015 	stw	r3,0(r2)
		memset(v->data, '\0', sizeof(void) * v->size);
   20390:	e0bffe17 	ldw	r2,-8(fp)
   20394:	10c00017 	ldw	r3,0(r2)
   20398:	e0bffe17 	ldw	r2,-8(fp)
   2039c:	10800117 	ldw	r2,4(r2)
   203a0:	100d883a 	mov	r6,r2
   203a4:	000b883a 	mov	r5,zero
   203a8:	1809883a 	mov	r4,r3
   203ac:	00211640 	call	21164 <memset>
	}

	// condition to increase v->data:
	// last slot exhausted
	if (v->size == v->count) {
   203b0:	e0bffe17 	ldw	r2,-8(fp)
   203b4:	10c00117 	ldw	r3,4(r2)
   203b8:	e0bffe17 	ldw	r2,-8(fp)
   203bc:	10800217 	ldw	r2,8(r2)
   203c0:	1880121e 	bne	r3,r2,2040c <vectorAdd+0xd0>
		v->size *= 2;
   203c4:	e0bffe17 	ldw	r2,-8(fp)
   203c8:	10800117 	ldw	r2,4(r2)
   203cc:	1085883a 	add	r2,r2,r2
   203d0:	1007883a 	mov	r3,r2
   203d4:	e0bffe17 	ldw	r2,-8(fp)
   203d8:	10c00115 	stw	r3,4(r2)
		v->data = realloc(v->data, sizeof(void*) * v->size);
   203dc:	e0bffe17 	ldw	r2,-8(fp)
   203e0:	10c00017 	ldw	r3,0(r2)
   203e4:	e0bffe17 	ldw	r2,-8(fp)
   203e8:	10800117 	ldw	r2,4(r2)
   203ec:	1085883a 	add	r2,r2,r2
   203f0:	1085883a 	add	r2,r2,r2
   203f4:	100b883a 	mov	r5,r2
   203f8:	1809883a 	mov	r4,r3
   203fc:	00213ec0 	call	213ec <realloc>
   20400:	1007883a 	mov	r3,r2
   20404:	e0bffe17 	ldw	r2,-8(fp)
   20408:	10c00015 	stw	r3,0(r2)
	}

	v->data[v->count] = e;
   2040c:	e0bffe17 	ldw	r2,-8(fp)
   20410:	10c00017 	ldw	r3,0(r2)
   20414:	e0bffe17 	ldw	r2,-8(fp)
   20418:	10800217 	ldw	r2,8(r2)
   2041c:	1085883a 	add	r2,r2,r2
   20420:	1085883a 	add	r2,r2,r2
   20424:	1885883a 	add	r2,r3,r2
   20428:	e0ffff17 	ldw	r3,-4(fp)
   2042c:	10c00015 	stw	r3,0(r2)
	v->count++;
   20430:	e0bffe17 	ldw	r2,-8(fp)
   20434:	10800217 	ldw	r2,8(r2)
   20438:	10c00044 	addi	r3,r2,1
   2043c:	e0bffe17 	ldw	r2,-8(fp)
   20440:	10c00215 	stw	r3,8(r2)
}
   20444:	0001883a 	nop
   20448:	e037883a 	mov	sp,fp
   2044c:	dfc00117 	ldw	ra,4(sp)
   20450:	df000017 	ldw	fp,0(sp)
   20454:	dec00204 	addi	sp,sp,8
   20458:	f800283a 	ret

0002045c <vectorSet>:

void vectorSet(Vector *v, int index, void *e)
{
   2045c:	defffc04 	addi	sp,sp,-16
   20460:	df000315 	stw	fp,12(sp)
   20464:	df000304 	addi	fp,sp,12
   20468:	e13ffd15 	stw	r4,-12(fp)
   2046c:	e17ffe15 	stw	r5,-8(fp)
   20470:	e1bfff15 	stw	r6,-4(fp)
	if (index >= v->count) {
   20474:	e0bffd17 	ldw	r2,-12(fp)
   20478:	10800217 	ldw	r2,8(r2)
   2047c:	e0fffe17 	ldw	r3,-8(fp)
   20480:	1880090e 	bge	r3,r2,204a8 <vectorSet+0x4c>
		return;
	}

	v->data[index] = e;
   20484:	e0bffd17 	ldw	r2,-12(fp)
   20488:	10c00017 	ldw	r3,0(r2)
   2048c:	e0bffe17 	ldw	r2,-8(fp)
   20490:	1085883a 	add	r2,r2,r2
   20494:	1085883a 	add	r2,r2,r2
   20498:	1885883a 	add	r2,r3,r2
   2049c:	e0ffff17 	ldw	r3,-4(fp)
   204a0:	10c00015 	stw	r3,0(r2)
   204a4:	00000106 	br	204ac <vectorSet+0x50>
}

void vectorSet(Vector *v, int index, void *e)
{
	if (index >= v->count) {
		return;
   204a8:	0001883a 	nop
	}

	v->data[index] = e;
}
   204ac:	e037883a 	mov	sp,fp
   204b0:	df000017 	ldw	fp,0(sp)
   204b4:	dec00104 	addi	sp,sp,4
   204b8:	f800283a 	ret

000204bc <vectorGet>:

void * vectorGet(Vector *v, int index)
{
   204bc:	defffd04 	addi	sp,sp,-12
   204c0:	df000215 	stw	fp,8(sp)
   204c4:	df000204 	addi	fp,sp,8
   204c8:	e13ffe15 	stw	r4,-8(fp)
   204cc:	e17fff15 	stw	r5,-4(fp)
	if (index >= v->count) {
   204d0:	e0bffe17 	ldw	r2,-8(fp)
   204d4:	10800217 	ldw	r2,8(r2)
   204d8:	e0ffff17 	ldw	r3,-4(fp)
   204dc:	18800216 	blt	r3,r2,204e8 <vectorGet+0x2c>
		return NULL;
   204e0:	0005883a 	mov	r2,zero
   204e4:	00000706 	br	20504 <vectorGet+0x48>
	}

	return v->data[index];
   204e8:	e0bffe17 	ldw	r2,-8(fp)
   204ec:	10c00017 	ldw	r3,0(r2)
   204f0:	e0bfff17 	ldw	r2,-4(fp)
   204f4:	1085883a 	add	r2,r2,r2
   204f8:	1085883a 	add	r2,r2,r2
   204fc:	1885883a 	add	r2,r3,r2
   20500:	10800017 	ldw	r2,0(r2)
}
   20504:	e037883a 	mov	sp,fp
   20508:	df000017 	ldw	fp,0(sp)
   2050c:	dec00104 	addi	sp,sp,4
   20510:	f800283a 	ret

00020514 <vectorDelete>:

void vectorDelete(Vector *v, int index)
{
   20514:	defff904 	addi	sp,sp,-28
   20518:	dfc00615 	stw	ra,24(sp)
   2051c:	df000515 	stw	fp,20(sp)
   20520:	df000504 	addi	fp,sp,20
   20524:	e13ffe15 	stw	r4,-8(fp)
   20528:	e17fff15 	stw	r5,-4(fp)
	if (index >= v->count) {
   2052c:	e0bffe17 	ldw	r2,-8(fp)
   20530:	10800217 	ldw	r2,8(r2)
   20534:	e0ffff17 	ldw	r3,-4(fp)
   20538:	18803d0e 	bge	r3,r2,20630 <vectorDelete+0x11c>
		return;
	}

	v->data[index] = NULL;
   2053c:	e0bffe17 	ldw	r2,-8(fp)
   20540:	10c00017 	ldw	r3,0(r2)
   20544:	e0bfff17 	ldw	r2,-4(fp)
   20548:	1085883a 	add	r2,r2,r2
   2054c:	1085883a 	add	r2,r2,r2
   20550:	1885883a 	add	r2,r3,r2
   20554:	10000015 	stw	zero,0(r2)

	int i, j;
	void **newarr = (void**)malloc(sizeof(void*) * v->count * 2);
   20558:	e0bffe17 	ldw	r2,-8(fp)
   2055c:	10800217 	ldw	r2,8(r2)
   20560:	100490fa 	slli	r2,r2,3
   20564:	1009883a 	mov	r4,r2
   20568:	00209300 	call	20930 <malloc>
   2056c:	e0bffd15 	stw	r2,-12(fp)
	for (i = 0, j = 0; i < v->count; i++) {
   20570:	e03ffb15 	stw	zero,-20(fp)
   20574:	e03ffc15 	stw	zero,-16(fp)
   20578:	00001c06 	br	205ec <vectorDelete+0xd8>
		if (v->data[i] != NULL) {
   2057c:	e0bffe17 	ldw	r2,-8(fp)
   20580:	10c00017 	ldw	r3,0(r2)
   20584:	e0bffb17 	ldw	r2,-20(fp)
   20588:	1085883a 	add	r2,r2,r2
   2058c:	1085883a 	add	r2,r2,r2
   20590:	1885883a 	add	r2,r3,r2
   20594:	10800017 	ldw	r2,0(r2)
   20598:	10001126 	beq	r2,zero,205e0 <vectorDelete+0xcc>
			newarr[j] = v->data[i];
   2059c:	e0bffc17 	ldw	r2,-16(fp)
   205a0:	1085883a 	add	r2,r2,r2
   205a4:	1085883a 	add	r2,r2,r2
   205a8:	1007883a 	mov	r3,r2
   205ac:	e0bffd17 	ldw	r2,-12(fp)
   205b0:	10c7883a 	add	r3,r2,r3
   205b4:	e0bffe17 	ldw	r2,-8(fp)
   205b8:	11000017 	ldw	r4,0(r2)
   205bc:	e0bffb17 	ldw	r2,-20(fp)
   205c0:	1085883a 	add	r2,r2,r2
   205c4:	1085883a 	add	r2,r2,r2
   205c8:	2085883a 	add	r2,r4,r2
   205cc:	10800017 	ldw	r2,0(r2)
   205d0:	18800015 	stw	r2,0(r3)
			j++;
   205d4:	e0bffc17 	ldw	r2,-16(fp)
   205d8:	10800044 	addi	r2,r2,1
   205dc:	e0bffc15 	stw	r2,-16(fp)

	v->data[index] = NULL;

	int i, j;
	void **newarr = (void**)malloc(sizeof(void*) * v->count * 2);
	for (i = 0, j = 0; i < v->count; i++) {
   205e0:	e0bffb17 	ldw	r2,-20(fp)
   205e4:	10800044 	addi	r2,r2,1
   205e8:	e0bffb15 	stw	r2,-20(fp)
   205ec:	e0bffe17 	ldw	r2,-8(fp)
   205f0:	10800217 	ldw	r2,8(r2)
   205f4:	e0fffb17 	ldw	r3,-20(fp)
   205f8:	18bfe016 	blt	r3,r2,2057c <_gp+0xfffdea30>
			newarr[j] = v->data[i];
			j++;
		}
	}

	free(v->data);
   205fc:	e0bffe17 	ldw	r2,-8(fp)
   20600:	10800017 	ldw	r2,0(r2)
   20604:	1009883a 	mov	r4,r2
   20608:	00209440 	call	20944 <free>

	v->data = newarr;
   2060c:	e0bffe17 	ldw	r2,-8(fp)
   20610:	e0fffd17 	ldw	r3,-12(fp)
   20614:	10c00015 	stw	r3,0(r2)
	v->count--;
   20618:	e0bffe17 	ldw	r2,-8(fp)
   2061c:	10800217 	ldw	r2,8(r2)
   20620:	10ffffc4 	addi	r3,r2,-1
   20624:	e0bffe17 	ldw	r2,-8(fp)
   20628:	10c00215 	stw	r3,8(r2)
   2062c:	00000106 	br	20634 <vectorDelete+0x120>
}

void vectorDelete(Vector *v, int index)
{
	if (index >= v->count) {
		return;
   20630:	0001883a 	nop

	free(v->data);

	v->data = newarr;
	v->count--;
}
   20634:	e037883a 	mov	sp,fp
   20638:	dfc00117 	ldw	ra,4(sp)
   2063c:	df000017 	ldw	fp,0(sp)
   20640:	dec00204 	addi	sp,sp,8
   20644:	f800283a 	ret

00020648 <vectorFree>:

void vectorFree(Vector *v)
{
   20648:	defffd04 	addi	sp,sp,-12
   2064c:	dfc00215 	stw	ra,8(sp)
   20650:	df000115 	stw	fp,4(sp)
   20654:	df000104 	addi	fp,sp,4
   20658:	e13fff15 	stw	r4,-4(fp)
	free(v->data);
   2065c:	e0bfff17 	ldw	r2,-4(fp)
   20660:	10800017 	ldw	r2,0(r2)
   20664:	1009883a 	mov	r4,r2
   20668:	00209440 	call	20944 <free>
}
   2066c:	0001883a 	nop
   20670:	e037883a 	mov	sp,fp
   20674:	dfc00117 	ldw	ra,4(sp)
   20678:	df000017 	ldw	fp,0(sp)
   2067c:	dec00204 	addi	sp,sp,8
   20680:	f800283a 	ret

00020684 <printLocation>:
}
void vectorFree(Vector *vector) {
	free(vector->captures);
}*/

void printLocation(Location *location){
   20684:	defffd04 	addi	sp,sp,-12
   20688:	dfc00215 	stw	ra,8(sp)
   2068c:	df000115 	stw	fp,4(sp)
   20690:	df000104 	addi	fp,sp,4
   20694:	e13fff15 	stw	r4,-4(fp)
	printf("Row: %d Field: %d\n", location->row, location->field);
   20698:	e0bfff17 	ldw	r2,-4(fp)
   2069c:	10800043 	ldbu	r2,1(r2)
   206a0:	10c03fcc 	andi	r3,r2,255
   206a4:	e0bfff17 	ldw	r2,-4(fp)
   206a8:	10800003 	ldbu	r2,0(r2)
   206ac:	10803fcc 	andi	r2,r2,255
   206b0:	100d883a 	mov	r6,r2
   206b4:	180b883a 	mov	r5,r3
   206b8:	010000f4 	movhi	r4,3
   206bc:	211efa04 	addi	r4,r4,31720
   206c0:	00212bc0 	call	212bc <printf>
}
   206c4:	0001883a 	nop
   206c8:	e037883a 	mov	sp,fp
   206cc:	dfc00117 	ldw	ra,4(sp)
   206d0:	df000017 	ldw	fp,0(sp)
   206d4:	dec00204 	addi	sp,sp,8
   206d8:	f800283a 	ret

000206dc <printCapture>:

void printCapture(VectorCapture *capture){
   206dc:	defffd04 	addi	sp,sp,-12
   206e0:	dfc00215 	stw	ra,8(sp)
   206e4:	df000115 	stw	fp,4(sp)
   206e8:	df000104 	addi	fp,sp,4
   206ec:	e13fff15 	stw	r4,-4(fp)
	printf("Old ");
   206f0:	010000f4 	movhi	r4,3
   206f4:	211eff04 	addi	r4,r4,31740
   206f8:	00212bc0 	call	212bc <printf>
	printLocation(&capture->oldLocation);
   206fc:	e0bfff17 	ldw	r2,-4(fp)
   20700:	10800104 	addi	r2,r2,4
   20704:	1009883a 	mov	r4,r2
   20708:	00206840 	call	20684 <printLocation>
	printf("Capture ");
   2070c:	010000f4 	movhi	r4,3
   20710:	211f0104 	addi	r4,r4,31748
   20714:	00212bc0 	call	212bc <printf>
	printLocation(&capture->captureLocation);
   20718:	e0bfff17 	ldw	r2,-4(fp)
   2071c:	10800184 	addi	r2,r2,6
   20720:	1009883a 	mov	r4,r2
   20724:	00206840 	call	20684 <printLocation>
	printf("New ");
   20728:	010000f4 	movhi	r4,3
   2072c:	211f0404 	addi	r4,r4,31760
   20730:	00212bc0 	call	212bc <printf>
	printLocation(&capture->newLocation);
   20734:	e0bfff17 	ldw	r2,-4(fp)
   20738:	10800204 	addi	r2,r2,8
   2073c:	1009883a 	mov	r4,r2
   20740:	00206840 	call	20684 <printLocation>
	printf("Piece: ");
   20744:	010000f4 	movhi	r4,3
   20748:	211f0604 	addi	r4,r4,31768
   2074c:	00212bc0 	call	212bc <printf>
	switch(capture->piece){
   20750:	e0bfff17 	ldw	r2,-4(fp)
   20754:	10800283 	ldbu	r2,10(r2)
   20758:	10803fcc 	andi	r2,r2,255
   2075c:	10c000e0 	cmpeqi	r3,r2,3
   20760:	1800141e 	bne	r3,zero,207b4 <printCapture+0xd8>
   20764:	10c00108 	cmpgei	r3,r2,4
   20768:	1800031e 	bne	r3,zero,20778 <printCapture+0x9c>
   2076c:	108000a0 	cmpeqi	r2,r2,2
   20770:	10000d1e 	bne	r2,zero,207a8 <printCapture+0xcc>
   20774:	00001306 	br	207c4 <printCapture+0xe8>
   20778:	10c00120 	cmpeqi	r3,r2,4
   2077c:	1800031e 	bne	r3,zero,2078c <printCapture+0xb0>
   20780:	10800160 	cmpeqi	r2,r2,5
   20784:	1000041e 	bne	r2,zero,20798 <printCapture+0xbc>
   20788:	00000e06 	br	207c4 <printCapture+0xe8>
		case ENEMY :
			printf("E");
   2078c:	01001144 	movi	r4,69
   20790:	00213000 	call	21300 <putchar>
			break;
   20794:	00000b06 	br	207c4 <printCapture+0xe8>
		case ENEMYKING :
			printf("EK");
   20798:	010000f4 	movhi	r4,3
   2079c:	211f0804 	addi	r4,r4,31776
   207a0:	00212bc0 	call	212bc <printf>
			break;
   207a4:	00000706 	br	207c4 <printCapture+0xe8>
		case FRIENDLY :
			printf("F");
   207a8:	01001184 	movi	r4,70
   207ac:	00213000 	call	21300 <putchar>
			break;
   207b0:	00000406 	br	207c4 <printCapture+0xe8>
		case FRIENDLYKING :
			printf("FK");
   207b4:	010000f4 	movhi	r4,3
   207b8:	211f0904 	addi	r4,r4,31780
   207bc:	00212bc0 	call	212bc <printf>
			break;
   207c0:	0001883a 	nop
	}
	printf("\n\n");
   207c4:	010000f4 	movhi	r4,3
   207c8:	211f0a04 	addi	r4,r4,31784
   207cc:	00213d80 	call	213d8 <puts>
}
   207d0:	0001883a 	nop
   207d4:	e037883a 	mov	sp,fp
   207d8:	dfc00117 	ldw	ra,4(sp)
   207dc:	df000017 	ldw	fp,0(sp)
   207e0:	dec00204 	addi	sp,sp,8
   207e4:	f800283a 	ret

000207e8 <printVector>:

void printVector(Vector *vector, unsigned char depth){
   207e8:	defffa04 	addi	sp,sp,-24
   207ec:	dfc00515 	stw	ra,20(sp)
   207f0:	df000415 	stw	fp,16(sp)
   207f4:	df000404 	addi	fp,sp,16
   207f8:	e13ffe15 	stw	r4,-8(fp)
   207fc:	2805883a 	mov	r2,r5
   20800:	e0bfff05 	stb	r2,-4(fp)
	depth++;
   20804:	e0bfff03 	ldbu	r2,-4(fp)
   20808:	10800044 	addi	r2,r2,1
   2080c:	e0bfff05 	stb	r2,-4(fp)
	printf("Count: %d\n Capacity: %d\n", vector->count, vector->size);
   20810:	e0bffe17 	ldw	r2,-8(fp)
   20814:	10c00217 	ldw	r3,8(r2)
   20818:	e0bffe17 	ldw	r2,-8(fp)
   2081c:	10800117 	ldw	r2,4(r2)
   20820:	100d883a 	mov	r6,r2
   20824:	180b883a 	mov	r5,r3
   20828:	010000f4 	movhi	r4,3
   2082c:	211f0b04 	addi	r4,r4,31788
   20830:	00212bc0 	call	212bc <printf>
	for(unsigned char i = 0; i < vector->count; i++){
   20834:	e03ffc05 	stb	zero,-16(fp)
   20838:	00003006 	br	208fc <printVector+0x114>
		if(vector->data[i] != NULL){
   2083c:	e0bffe17 	ldw	r2,-8(fp)
   20840:	10c00017 	ldw	r3,0(r2)
   20844:	e0bffc03 	ldbu	r2,-16(fp)
   20848:	1085883a 	add	r2,r2,r2
   2084c:	1085883a 	add	r2,r2,r2
   20850:	1885883a 	add	r2,r3,r2
   20854:	10800017 	ldw	r2,0(r2)
   20858:	10002226 	beq	r2,zero,208e4 <printVector+0xfc>
			printf("Depth: %d\n", depth);
   2085c:	e0bfff03 	ldbu	r2,-4(fp)
   20860:	100b883a 	mov	r5,r2
   20864:	010000f4 	movhi	r4,3
   20868:	211f1204 	addi	r4,r4,31816
   2086c:	00212bc0 	call	212bc <printf>
			printf("Current Count: %d\n", i);
   20870:	e0bffc03 	ldbu	r2,-16(fp)
   20874:	100b883a 	mov	r5,r2
   20878:	010000f4 	movhi	r4,3
   2087c:	211f1504 	addi	r4,r4,31828
   20880:	00212bc0 	call	212bc <printf>
			VectorCapture * capture = (VectorCapture *)vector->data[i];
   20884:	e0bffe17 	ldw	r2,-8(fp)
   20888:	10c00017 	ldw	r3,0(r2)
   2088c:	e0bffc03 	ldbu	r2,-16(fp)
   20890:	1085883a 	add	r2,r2,r2
   20894:	1085883a 	add	r2,r2,r2
   20898:	1885883a 	add	r2,r3,r2
   2089c:	10800017 	ldw	r2,0(r2)
   208a0:	e0bffd15 	stw	r2,-12(fp)
			printCapture(capture);
   208a4:	e13ffd17 	ldw	r4,-12(fp)
   208a8:	00206dc0 	call	206dc <printCapture>
			if(capture->nextCaptures != NULL){
   208ac:	e0bffd17 	ldw	r2,-12(fp)
   208b0:	10800017 	ldw	r2,0(r2)
   208b4:	10000726 	beq	r2,zero,208d4 <printVector+0xec>
				printVector(capture->nextCaptures, depth);
   208b8:	e0bffd17 	ldw	r2,-12(fp)
   208bc:	10800017 	ldw	r2,0(r2)
   208c0:	e0ffff03 	ldbu	r3,-4(fp)
   208c4:	180b883a 	mov	r5,r3
   208c8:	1009883a 	mov	r4,r2
   208cc:	00207e80 	call	207e8 <printVector>
   208d0:	00000706 	br	208f0 <printVector+0x108>
			}else{
				printf("\nNULL\n");
   208d4:	010000f4 	movhi	r4,3
   208d8:	211f1a04 	addi	r4,r4,31848
   208dc:	00213d80 	call	213d8 <puts>
   208e0:	00000306 	br	208f0 <printVector+0x108>
			}
		}else{
			printf("\nNULL\n");
   208e4:	010000f4 	movhi	r4,3
   208e8:	211f1a04 	addi	r4,r4,31848
   208ec:	00213d80 	call	213d8 <puts>
}

void printVector(Vector *vector, unsigned char depth){
	depth++;
	printf("Count: %d\n Capacity: %d\n", vector->count, vector->size);
	for(unsigned char i = 0; i < vector->count; i++){
   208f0:	e0bffc03 	ldbu	r2,-16(fp)
   208f4:	10800044 	addi	r2,r2,1
   208f8:	e0bffc05 	stb	r2,-16(fp)
   208fc:	e0fffc03 	ldbu	r3,-16(fp)
   20900:	e0bffe17 	ldw	r2,-8(fp)
   20904:	10800217 	ldw	r2,8(r2)
   20908:	18bfcc16 	blt	r3,r2,2083c <_gp+0xfffdecf0>
			}
		}else{
			printf("\nNULL\n");
		}
	}
	printf("\n\n");
   2090c:	010000f4 	movhi	r4,3
   20910:	211f0a04 	addi	r4,r4,31784
   20914:	00213d80 	call	213d8 <puts>
}
   20918:	0001883a 	nop
   2091c:	e037883a 	mov	sp,fp
   20920:	dfc00117 	ldw	ra,4(sp)
   20924:	df000017 	ldw	fp,0(sp)
   20928:	dec00204 	addi	sp,sp,8
   2092c:	f800283a 	ret

00020930 <malloc>:
   20930:	00800134 	movhi	r2,4
   20934:	10a6d604 	addi	r2,r2,-25768
   20938:	200b883a 	mov	r5,r4
   2093c:	11000017 	ldw	r4,0(r2)
   20940:	00209581 	jmpi	20958 <_malloc_r>

00020944 <free>:
   20944:	00800134 	movhi	r2,4
   20948:	10a6d604 	addi	r2,r2,-25768
   2094c:	200b883a 	mov	r5,r4
   20950:	11000017 	ldw	r4,0(r2)
   20954:	0025e6c1 	jmpi	25e6c <_free_r>

00020958 <_malloc_r>:
   20958:	defff504 	addi	sp,sp,-44
   2095c:	dc800315 	stw	r18,12(sp)
   20960:	dfc00a15 	stw	ra,40(sp)
   20964:	df000915 	stw	fp,36(sp)
   20968:	ddc00815 	stw	r23,32(sp)
   2096c:	dd800715 	stw	r22,28(sp)
   20970:	dd400615 	stw	r21,24(sp)
   20974:	dd000515 	stw	r20,20(sp)
   20978:	dcc00415 	stw	r19,16(sp)
   2097c:	dc400215 	stw	r17,8(sp)
   20980:	dc000115 	stw	r16,4(sp)
   20984:	288002c4 	addi	r2,r5,11
   20988:	00c00584 	movi	r3,22
   2098c:	2025883a 	mov	r18,r4
   20990:	18807f2e 	bgeu	r3,r2,20b90 <_malloc_r+0x238>
   20994:	047ffe04 	movi	r17,-8
   20998:	1462703a 	and	r17,r2,r17
   2099c:	8800a316 	blt	r17,zero,20c2c <_malloc_r+0x2d4>
   209a0:	8940a236 	bltu	r17,r5,20c2c <_malloc_r+0x2d4>
   209a4:	002de780 	call	2de78 <__malloc_lock>
   209a8:	00807dc4 	movi	r2,503
   209ac:	1441e92e 	bgeu	r2,r17,21154 <_malloc_r+0x7fc>
   209b0:	8804d27a 	srli	r2,r17,9
   209b4:	1000a126 	beq	r2,zero,20c3c <_malloc_r+0x2e4>
   209b8:	00c00104 	movi	r3,4
   209bc:	18811e36 	bltu	r3,r2,20e38 <_malloc_r+0x4e0>
   209c0:	8804d1ba 	srli	r2,r17,6
   209c4:	12000e44 	addi	r8,r2,57
   209c8:	11c00e04 	addi	r7,r2,56
   209cc:	4209883a 	add	r4,r8,r8
   209d0:	04c00134 	movhi	r19,4
   209d4:	2109883a 	add	r4,r4,r4
   209d8:	9ce02504 	addi	r19,r19,-32620
   209dc:	2109883a 	add	r4,r4,r4
   209e0:	9909883a 	add	r4,r19,r4
   209e4:	24000117 	ldw	r16,4(r4)
   209e8:	213ffe04 	addi	r4,r4,-8
   209ec:	24009726 	beq	r4,r16,20c4c <_malloc_r+0x2f4>
   209f0:	80800117 	ldw	r2,4(r16)
   209f4:	01bfff04 	movi	r6,-4
   209f8:	014003c4 	movi	r5,15
   209fc:	1184703a 	and	r2,r2,r6
   20a00:	1447c83a 	sub	r3,r2,r17
   20a04:	28c00716 	blt	r5,r3,20a24 <_malloc_r+0xcc>
   20a08:	1800920e 	bge	r3,zero,20c54 <_malloc_r+0x2fc>
   20a0c:	84000317 	ldw	r16,12(r16)
   20a10:	24008e26 	beq	r4,r16,20c4c <_malloc_r+0x2f4>
   20a14:	80800117 	ldw	r2,4(r16)
   20a18:	1184703a 	and	r2,r2,r6
   20a1c:	1447c83a 	sub	r3,r2,r17
   20a20:	28fff90e 	bge	r5,r3,20a08 <_gp+0xfffdeebc>
   20a24:	3809883a 	mov	r4,r7
   20a28:	01800134 	movhi	r6,4
   20a2c:	9c000417 	ldw	r16,16(r19)
   20a30:	31a02504 	addi	r6,r6,-32620
   20a34:	32000204 	addi	r8,r6,8
   20a38:	82013426 	beq	r16,r8,20f0c <_malloc_r+0x5b4>
   20a3c:	80c00117 	ldw	r3,4(r16)
   20a40:	00bfff04 	movi	r2,-4
   20a44:	188e703a 	and	r7,r3,r2
   20a48:	3c45c83a 	sub	r2,r7,r17
   20a4c:	00c003c4 	movi	r3,15
   20a50:	18811f16 	blt	r3,r2,20ed0 <_malloc_r+0x578>
   20a54:	32000515 	stw	r8,20(r6)
   20a58:	32000415 	stw	r8,16(r6)
   20a5c:	10007f0e 	bge	r2,zero,20c5c <_malloc_r+0x304>
   20a60:	00807fc4 	movi	r2,511
   20a64:	11c0fd36 	bltu	r2,r7,20e5c <_malloc_r+0x504>
   20a68:	3806d0fa 	srli	r3,r7,3
   20a6c:	01c00044 	movi	r7,1
   20a70:	30800117 	ldw	r2,4(r6)
   20a74:	19400044 	addi	r5,r3,1
   20a78:	294b883a 	add	r5,r5,r5
   20a7c:	1807d0ba 	srai	r3,r3,2
   20a80:	294b883a 	add	r5,r5,r5
   20a84:	294b883a 	add	r5,r5,r5
   20a88:	298b883a 	add	r5,r5,r6
   20a8c:	38c6983a 	sll	r3,r7,r3
   20a90:	29c00017 	ldw	r7,0(r5)
   20a94:	2a7ffe04 	addi	r9,r5,-8
   20a98:	1886b03a 	or	r3,r3,r2
   20a9c:	82400315 	stw	r9,12(r16)
   20aa0:	81c00215 	stw	r7,8(r16)
   20aa4:	30c00115 	stw	r3,4(r6)
   20aa8:	2c000015 	stw	r16,0(r5)
   20aac:	3c000315 	stw	r16,12(r7)
   20ab0:	2005d0ba 	srai	r2,r4,2
   20ab4:	01400044 	movi	r5,1
   20ab8:	288a983a 	sll	r5,r5,r2
   20abc:	19406f36 	bltu	r3,r5,20c7c <_malloc_r+0x324>
   20ac0:	28c4703a 	and	r2,r5,r3
   20ac4:	10000a1e 	bne	r2,zero,20af0 <_malloc_r+0x198>
   20ac8:	00bfff04 	movi	r2,-4
   20acc:	294b883a 	add	r5,r5,r5
   20ad0:	2088703a 	and	r4,r4,r2
   20ad4:	28c4703a 	and	r2,r5,r3
   20ad8:	21000104 	addi	r4,r4,4
   20adc:	1000041e 	bne	r2,zero,20af0 <_malloc_r+0x198>
   20ae0:	294b883a 	add	r5,r5,r5
   20ae4:	28c4703a 	and	r2,r5,r3
   20ae8:	21000104 	addi	r4,r4,4
   20aec:	103ffc26 	beq	r2,zero,20ae0 <_gp+0xfffdef94>
   20af0:	02bfff04 	movi	r10,-4
   20af4:	024003c4 	movi	r9,15
   20af8:	21800044 	addi	r6,r4,1
   20afc:	318d883a 	add	r6,r6,r6
   20b00:	318d883a 	add	r6,r6,r6
   20b04:	318d883a 	add	r6,r6,r6
   20b08:	998d883a 	add	r6,r19,r6
   20b0c:	333ffe04 	addi	r12,r6,-8
   20b10:	2017883a 	mov	r11,r4
   20b14:	31800104 	addi	r6,r6,4
   20b18:	34000017 	ldw	r16,0(r6)
   20b1c:	31fffd04 	addi	r7,r6,-12
   20b20:	81c0041e 	bne	r16,r7,20b34 <_malloc_r+0x1dc>
   20b24:	0000fb06 	br	20f14 <_malloc_r+0x5bc>
   20b28:	1801030e 	bge	r3,zero,20f38 <_malloc_r+0x5e0>
   20b2c:	84000317 	ldw	r16,12(r16)
   20b30:	81c0f826 	beq	r16,r7,20f14 <_malloc_r+0x5bc>
   20b34:	80800117 	ldw	r2,4(r16)
   20b38:	1284703a 	and	r2,r2,r10
   20b3c:	1447c83a 	sub	r3,r2,r17
   20b40:	48fff90e 	bge	r9,r3,20b28 <_gp+0xfffdefdc>
   20b44:	80800317 	ldw	r2,12(r16)
   20b48:	81000217 	ldw	r4,8(r16)
   20b4c:	89400054 	ori	r5,r17,1
   20b50:	81400115 	stw	r5,4(r16)
   20b54:	20800315 	stw	r2,12(r4)
   20b58:	11000215 	stw	r4,8(r2)
   20b5c:	8463883a 	add	r17,r16,r17
   20b60:	9c400515 	stw	r17,20(r19)
   20b64:	9c400415 	stw	r17,16(r19)
   20b68:	18800054 	ori	r2,r3,1
   20b6c:	88800115 	stw	r2,4(r17)
   20b70:	8a000315 	stw	r8,12(r17)
   20b74:	8a000215 	stw	r8,8(r17)
   20b78:	88e3883a 	add	r17,r17,r3
   20b7c:	88c00015 	stw	r3,0(r17)
   20b80:	9009883a 	mov	r4,r18
   20b84:	002df980 	call	2df98 <__malloc_unlock>
   20b88:	80800204 	addi	r2,r16,8
   20b8c:	00001b06 	br	20bfc <_malloc_r+0x2a4>
   20b90:	04400404 	movi	r17,16
   20b94:	89402536 	bltu	r17,r5,20c2c <_malloc_r+0x2d4>
   20b98:	002de780 	call	2de78 <__malloc_lock>
   20b9c:	00800184 	movi	r2,6
   20ba0:	01000084 	movi	r4,2
   20ba4:	04c00134 	movhi	r19,4
   20ba8:	1085883a 	add	r2,r2,r2
   20bac:	9ce02504 	addi	r19,r19,-32620
   20bb0:	1085883a 	add	r2,r2,r2
   20bb4:	9885883a 	add	r2,r19,r2
   20bb8:	14000117 	ldw	r16,4(r2)
   20bbc:	10fffe04 	addi	r3,r2,-8
   20bc0:	80c0d926 	beq	r16,r3,20f28 <_malloc_r+0x5d0>
   20bc4:	80c00117 	ldw	r3,4(r16)
   20bc8:	81000317 	ldw	r4,12(r16)
   20bcc:	00bfff04 	movi	r2,-4
   20bd0:	1884703a 	and	r2,r3,r2
   20bd4:	81400217 	ldw	r5,8(r16)
   20bd8:	8085883a 	add	r2,r16,r2
   20bdc:	10c00117 	ldw	r3,4(r2)
   20be0:	29000315 	stw	r4,12(r5)
   20be4:	21400215 	stw	r5,8(r4)
   20be8:	18c00054 	ori	r3,r3,1
   20bec:	10c00115 	stw	r3,4(r2)
   20bf0:	9009883a 	mov	r4,r18
   20bf4:	002df980 	call	2df98 <__malloc_unlock>
   20bf8:	80800204 	addi	r2,r16,8
   20bfc:	dfc00a17 	ldw	ra,40(sp)
   20c00:	df000917 	ldw	fp,36(sp)
   20c04:	ddc00817 	ldw	r23,32(sp)
   20c08:	dd800717 	ldw	r22,28(sp)
   20c0c:	dd400617 	ldw	r21,24(sp)
   20c10:	dd000517 	ldw	r20,20(sp)
   20c14:	dcc00417 	ldw	r19,16(sp)
   20c18:	dc800317 	ldw	r18,12(sp)
   20c1c:	dc400217 	ldw	r17,8(sp)
   20c20:	dc000117 	ldw	r16,4(sp)
   20c24:	dec00b04 	addi	sp,sp,44
   20c28:	f800283a 	ret
   20c2c:	00800304 	movi	r2,12
   20c30:	90800015 	stw	r2,0(r18)
   20c34:	0005883a 	mov	r2,zero
   20c38:	003ff006 	br	20bfc <_gp+0xfffdf0b0>
   20c3c:	01002004 	movi	r4,128
   20c40:	02001004 	movi	r8,64
   20c44:	01c00fc4 	movi	r7,63
   20c48:	003f6106 	br	209d0 <_gp+0xfffdee84>
   20c4c:	4009883a 	mov	r4,r8
   20c50:	003f7506 	br	20a28 <_gp+0xfffdeedc>
   20c54:	81000317 	ldw	r4,12(r16)
   20c58:	003fde06 	br	20bd4 <_gp+0xfffdf088>
   20c5c:	81c5883a 	add	r2,r16,r7
   20c60:	11400117 	ldw	r5,4(r2)
   20c64:	9009883a 	mov	r4,r18
   20c68:	29400054 	ori	r5,r5,1
   20c6c:	11400115 	stw	r5,4(r2)
   20c70:	002df980 	call	2df98 <__malloc_unlock>
   20c74:	80800204 	addi	r2,r16,8
   20c78:	003fe006 	br	20bfc <_gp+0xfffdf0b0>
   20c7c:	9c000217 	ldw	r16,8(r19)
   20c80:	00bfff04 	movi	r2,-4
   20c84:	85800117 	ldw	r22,4(r16)
   20c88:	b0ac703a 	and	r22,r22,r2
   20c8c:	b4400336 	bltu	r22,r17,20c9c <_malloc_r+0x344>
   20c90:	b445c83a 	sub	r2,r22,r17
   20c94:	00c003c4 	movi	r3,15
   20c98:	18805d16 	blt	r3,r2,20e10 <_malloc_r+0x4b8>
   20c9c:	05c00134 	movhi	r23,4
   20ca0:	00800134 	movhi	r2,4
   20ca4:	10ade104 	addi	r2,r2,-18556
   20ca8:	bde6d304 	addi	r23,r23,-25780
   20cac:	15400017 	ldw	r21,0(r2)
   20cb0:	b8c00017 	ldw	r3,0(r23)
   20cb4:	00bfffc4 	movi	r2,-1
   20cb8:	858d883a 	add	r6,r16,r22
   20cbc:	8d6b883a 	add	r21,r17,r21
   20cc0:	1880ea26 	beq	r3,r2,2106c <_malloc_r+0x714>
   20cc4:	ad4403c4 	addi	r21,r21,4111
   20cc8:	00bc0004 	movi	r2,-4096
   20ccc:	a8aa703a 	and	r21,r21,r2
   20cd0:	a80b883a 	mov	r5,r21
   20cd4:	9009883a 	mov	r4,r18
   20cd8:	d9800015 	stw	r6,0(sp)
   20cdc:	00219680 	call	21968 <_sbrk_r>
   20ce0:	1029883a 	mov	r20,r2
   20ce4:	00bfffc4 	movi	r2,-1
   20ce8:	d9800017 	ldw	r6,0(sp)
   20cec:	a080e826 	beq	r20,r2,21090 <_malloc_r+0x738>
   20cf0:	a180a636 	bltu	r20,r6,20f8c <_malloc_r+0x634>
   20cf4:	07000134 	movhi	fp,4
   20cf8:	e72e0604 	addi	fp,fp,-18408
   20cfc:	e0800017 	ldw	r2,0(fp)
   20d00:	a887883a 	add	r3,r21,r2
   20d04:	e0c00015 	stw	r3,0(fp)
   20d08:	3500e626 	beq	r6,r20,210a4 <_malloc_r+0x74c>
   20d0c:	b9000017 	ldw	r4,0(r23)
   20d10:	00bfffc4 	movi	r2,-1
   20d14:	2080ee26 	beq	r4,r2,210d0 <_malloc_r+0x778>
   20d18:	a185c83a 	sub	r2,r20,r6
   20d1c:	10c5883a 	add	r2,r2,r3
   20d20:	e0800015 	stw	r2,0(fp)
   20d24:	a0c001cc 	andi	r3,r20,7
   20d28:	1800bc26 	beq	r3,zero,2101c <_malloc_r+0x6c4>
   20d2c:	a0e9c83a 	sub	r20,r20,r3
   20d30:	00840204 	movi	r2,4104
   20d34:	a5000204 	addi	r20,r20,8
   20d38:	10c7c83a 	sub	r3,r2,r3
   20d3c:	a545883a 	add	r2,r20,r21
   20d40:	1083ffcc 	andi	r2,r2,4095
   20d44:	18abc83a 	sub	r21,r3,r2
   20d48:	a80b883a 	mov	r5,r21
   20d4c:	9009883a 	mov	r4,r18
   20d50:	00219680 	call	21968 <_sbrk_r>
   20d54:	00ffffc4 	movi	r3,-1
   20d58:	10c0e126 	beq	r2,r3,210e0 <_malloc_r+0x788>
   20d5c:	1505c83a 	sub	r2,r2,r20
   20d60:	1545883a 	add	r2,r2,r21
   20d64:	10800054 	ori	r2,r2,1
   20d68:	e0c00017 	ldw	r3,0(fp)
   20d6c:	9d000215 	stw	r20,8(r19)
   20d70:	a0800115 	stw	r2,4(r20)
   20d74:	a8c7883a 	add	r3,r21,r3
   20d78:	e0c00015 	stw	r3,0(fp)
   20d7c:	84c00e26 	beq	r16,r19,20db8 <_malloc_r+0x460>
   20d80:	018003c4 	movi	r6,15
   20d84:	3580a72e 	bgeu	r6,r22,21024 <_malloc_r+0x6cc>
   20d88:	81400117 	ldw	r5,4(r16)
   20d8c:	013ffe04 	movi	r4,-8
   20d90:	b0bffd04 	addi	r2,r22,-12
   20d94:	1104703a 	and	r2,r2,r4
   20d98:	2900004c 	andi	r4,r5,1
   20d9c:	2088b03a 	or	r4,r4,r2
   20da0:	81000115 	stw	r4,4(r16)
   20da4:	01400144 	movi	r5,5
   20da8:	8089883a 	add	r4,r16,r2
   20dac:	21400115 	stw	r5,4(r4)
   20db0:	21400215 	stw	r5,8(r4)
   20db4:	3080cd36 	bltu	r6,r2,210ec <_malloc_r+0x794>
   20db8:	00800134 	movhi	r2,4
   20dbc:	10ade004 	addi	r2,r2,-18560
   20dc0:	11000017 	ldw	r4,0(r2)
   20dc4:	20c0012e 	bgeu	r4,r3,20dcc <_malloc_r+0x474>
   20dc8:	10c00015 	stw	r3,0(r2)
   20dcc:	00800134 	movhi	r2,4
   20dd0:	10addf04 	addi	r2,r2,-18564
   20dd4:	11000017 	ldw	r4,0(r2)
   20dd8:	9c000217 	ldw	r16,8(r19)
   20ddc:	20c0012e 	bgeu	r4,r3,20de4 <_malloc_r+0x48c>
   20de0:	10c00015 	stw	r3,0(r2)
   20de4:	80c00117 	ldw	r3,4(r16)
   20de8:	00bfff04 	movi	r2,-4
   20dec:	1886703a 	and	r3,r3,r2
   20df0:	1c45c83a 	sub	r2,r3,r17
   20df4:	1c400236 	bltu	r3,r17,20e00 <_malloc_r+0x4a8>
   20df8:	00c003c4 	movi	r3,15
   20dfc:	18800416 	blt	r3,r2,20e10 <_malloc_r+0x4b8>
   20e00:	9009883a 	mov	r4,r18
   20e04:	002df980 	call	2df98 <__malloc_unlock>
   20e08:	0005883a 	mov	r2,zero
   20e0c:	003f7b06 	br	20bfc <_gp+0xfffdf0b0>
   20e10:	88c00054 	ori	r3,r17,1
   20e14:	80c00115 	stw	r3,4(r16)
   20e18:	8463883a 	add	r17,r16,r17
   20e1c:	10800054 	ori	r2,r2,1
   20e20:	9c400215 	stw	r17,8(r19)
   20e24:	88800115 	stw	r2,4(r17)
   20e28:	9009883a 	mov	r4,r18
   20e2c:	002df980 	call	2df98 <__malloc_unlock>
   20e30:	80800204 	addi	r2,r16,8
   20e34:	003f7106 	br	20bfc <_gp+0xfffdf0b0>
   20e38:	00c00504 	movi	r3,20
   20e3c:	18804a2e 	bgeu	r3,r2,20f68 <_malloc_r+0x610>
   20e40:	00c01504 	movi	r3,84
   20e44:	18806e36 	bltu	r3,r2,21000 <_malloc_r+0x6a8>
   20e48:	8804d33a 	srli	r2,r17,12
   20e4c:	12001bc4 	addi	r8,r2,111
   20e50:	11c01b84 	addi	r7,r2,110
   20e54:	4209883a 	add	r4,r8,r8
   20e58:	003edd06 	br	209d0 <_gp+0xfffdee84>
   20e5c:	3804d27a 	srli	r2,r7,9
   20e60:	00c00104 	movi	r3,4
   20e64:	1880442e 	bgeu	r3,r2,20f78 <_malloc_r+0x620>
   20e68:	00c00504 	movi	r3,20
   20e6c:	18808136 	bltu	r3,r2,21074 <_malloc_r+0x71c>
   20e70:	11401704 	addi	r5,r2,92
   20e74:	10c016c4 	addi	r3,r2,91
   20e78:	294b883a 	add	r5,r5,r5
   20e7c:	294b883a 	add	r5,r5,r5
   20e80:	294b883a 	add	r5,r5,r5
   20e84:	994b883a 	add	r5,r19,r5
   20e88:	28800017 	ldw	r2,0(r5)
   20e8c:	01800134 	movhi	r6,4
   20e90:	297ffe04 	addi	r5,r5,-8
   20e94:	31a02504 	addi	r6,r6,-32620
   20e98:	28806526 	beq	r5,r2,21030 <_malloc_r+0x6d8>
   20e9c:	01bfff04 	movi	r6,-4
   20ea0:	10c00117 	ldw	r3,4(r2)
   20ea4:	1986703a 	and	r3,r3,r6
   20ea8:	38c0022e 	bgeu	r7,r3,20eb4 <_malloc_r+0x55c>
   20eac:	10800217 	ldw	r2,8(r2)
   20eb0:	28bffb1e 	bne	r5,r2,20ea0 <_gp+0xfffdf354>
   20eb4:	11400317 	ldw	r5,12(r2)
   20eb8:	98c00117 	ldw	r3,4(r19)
   20ebc:	81400315 	stw	r5,12(r16)
   20ec0:	80800215 	stw	r2,8(r16)
   20ec4:	2c000215 	stw	r16,8(r5)
   20ec8:	14000315 	stw	r16,12(r2)
   20ecc:	003ef806 	br	20ab0 <_gp+0xfffdef64>
   20ed0:	88c00054 	ori	r3,r17,1
   20ed4:	80c00115 	stw	r3,4(r16)
   20ed8:	8463883a 	add	r17,r16,r17
   20edc:	34400515 	stw	r17,20(r6)
   20ee0:	34400415 	stw	r17,16(r6)
   20ee4:	10c00054 	ori	r3,r2,1
   20ee8:	8a000315 	stw	r8,12(r17)
   20eec:	8a000215 	stw	r8,8(r17)
   20ef0:	88c00115 	stw	r3,4(r17)
   20ef4:	88a3883a 	add	r17,r17,r2
   20ef8:	88800015 	stw	r2,0(r17)
   20efc:	9009883a 	mov	r4,r18
   20f00:	002df980 	call	2df98 <__malloc_unlock>
   20f04:	80800204 	addi	r2,r16,8
   20f08:	003f3c06 	br	20bfc <_gp+0xfffdf0b0>
   20f0c:	30c00117 	ldw	r3,4(r6)
   20f10:	003ee706 	br	20ab0 <_gp+0xfffdef64>
   20f14:	5ac00044 	addi	r11,r11,1
   20f18:	588000cc 	andi	r2,r11,3
   20f1c:	31800204 	addi	r6,r6,8
   20f20:	103efd1e 	bne	r2,zero,20b18 <_gp+0xfffdefcc>
   20f24:	00002406 	br	20fb8 <_malloc_r+0x660>
   20f28:	14000317 	ldw	r16,12(r2)
   20f2c:	143f251e 	bne	r2,r16,20bc4 <_gp+0xfffdf078>
   20f30:	21000084 	addi	r4,r4,2
   20f34:	003ebc06 	br	20a28 <_gp+0xfffdeedc>
   20f38:	8085883a 	add	r2,r16,r2
   20f3c:	10c00117 	ldw	r3,4(r2)
   20f40:	81000317 	ldw	r4,12(r16)
   20f44:	81400217 	ldw	r5,8(r16)
   20f48:	18c00054 	ori	r3,r3,1
   20f4c:	10c00115 	stw	r3,4(r2)
   20f50:	29000315 	stw	r4,12(r5)
   20f54:	21400215 	stw	r5,8(r4)
   20f58:	9009883a 	mov	r4,r18
   20f5c:	002df980 	call	2df98 <__malloc_unlock>
   20f60:	80800204 	addi	r2,r16,8
   20f64:	003f2506 	br	20bfc <_gp+0xfffdf0b0>
   20f68:	12001704 	addi	r8,r2,92
   20f6c:	11c016c4 	addi	r7,r2,91
   20f70:	4209883a 	add	r4,r8,r8
   20f74:	003e9606 	br	209d0 <_gp+0xfffdee84>
   20f78:	3804d1ba 	srli	r2,r7,6
   20f7c:	11400e44 	addi	r5,r2,57
   20f80:	10c00e04 	addi	r3,r2,56
   20f84:	294b883a 	add	r5,r5,r5
   20f88:	003fbc06 	br	20e7c <_gp+0xfffdf330>
   20f8c:	84ff5926 	beq	r16,r19,20cf4 <_gp+0xfffdf1a8>
   20f90:	00800134 	movhi	r2,4
   20f94:	10a02504 	addi	r2,r2,-32620
   20f98:	14000217 	ldw	r16,8(r2)
   20f9c:	00bfff04 	movi	r2,-4
   20fa0:	80c00117 	ldw	r3,4(r16)
   20fa4:	1886703a 	and	r3,r3,r2
   20fa8:	003f9106 	br	20df0 <_gp+0xfffdf2a4>
   20fac:	60800217 	ldw	r2,8(r12)
   20fb0:	213fffc4 	addi	r4,r4,-1
   20fb4:	1300651e 	bne	r2,r12,2114c <_malloc_r+0x7f4>
   20fb8:	208000cc 	andi	r2,r4,3
   20fbc:	633ffe04 	addi	r12,r12,-8
   20fc0:	103ffa1e 	bne	r2,zero,20fac <_gp+0xfffdf460>
   20fc4:	98800117 	ldw	r2,4(r19)
   20fc8:	0146303a 	nor	r3,zero,r5
   20fcc:	1884703a 	and	r2,r3,r2
   20fd0:	98800115 	stw	r2,4(r19)
   20fd4:	294b883a 	add	r5,r5,r5
   20fd8:	117f2836 	bltu	r2,r5,20c7c <_gp+0xfffdf130>
   20fdc:	283f2726 	beq	r5,zero,20c7c <_gp+0xfffdf130>
   20fe0:	2886703a 	and	r3,r5,r2
   20fe4:	5809883a 	mov	r4,r11
   20fe8:	183ec31e 	bne	r3,zero,20af8 <_gp+0xfffdefac>
   20fec:	294b883a 	add	r5,r5,r5
   20ff0:	2886703a 	and	r3,r5,r2
   20ff4:	21000104 	addi	r4,r4,4
   20ff8:	183ffc26 	beq	r3,zero,20fec <_gp+0xfffdf4a0>
   20ffc:	003ebe06 	br	20af8 <_gp+0xfffdefac>
   21000:	00c05504 	movi	r3,340
   21004:	18801236 	bltu	r3,r2,21050 <_malloc_r+0x6f8>
   21008:	8804d3fa 	srli	r2,r17,15
   2100c:	12001e04 	addi	r8,r2,120
   21010:	11c01dc4 	addi	r7,r2,119
   21014:	4209883a 	add	r4,r8,r8
   21018:	003e6d06 	br	209d0 <_gp+0xfffdee84>
   2101c:	00c40004 	movi	r3,4096
   21020:	003f4606 	br	20d3c <_gp+0xfffdf1f0>
   21024:	00800044 	movi	r2,1
   21028:	a0800115 	stw	r2,4(r20)
   2102c:	003f7406 	br	20e00 <_gp+0xfffdf2b4>
   21030:	1805d0ba 	srai	r2,r3,2
   21034:	01c00044 	movi	r7,1
   21038:	30c00117 	ldw	r3,4(r6)
   2103c:	388e983a 	sll	r7,r7,r2
   21040:	2805883a 	mov	r2,r5
   21044:	38c6b03a 	or	r3,r7,r3
   21048:	30c00115 	stw	r3,4(r6)
   2104c:	003f9b06 	br	20ebc <_gp+0xfffdf370>
   21050:	00c15504 	movi	r3,1364
   21054:	18801a36 	bltu	r3,r2,210c0 <_malloc_r+0x768>
   21058:	8804d4ba 	srli	r2,r17,18
   2105c:	12001f44 	addi	r8,r2,125
   21060:	11c01f04 	addi	r7,r2,124
   21064:	4209883a 	add	r4,r8,r8
   21068:	003e5906 	br	209d0 <_gp+0xfffdee84>
   2106c:	ad400404 	addi	r21,r21,16
   21070:	003f1706 	br	20cd0 <_gp+0xfffdf184>
   21074:	00c01504 	movi	r3,84
   21078:	18802336 	bltu	r3,r2,21108 <_malloc_r+0x7b0>
   2107c:	3804d33a 	srli	r2,r7,12
   21080:	11401bc4 	addi	r5,r2,111
   21084:	10c01b84 	addi	r3,r2,110
   21088:	294b883a 	add	r5,r5,r5
   2108c:	003f7b06 	br	20e7c <_gp+0xfffdf330>
   21090:	9c000217 	ldw	r16,8(r19)
   21094:	00bfff04 	movi	r2,-4
   21098:	80c00117 	ldw	r3,4(r16)
   2109c:	1886703a 	and	r3,r3,r2
   210a0:	003f5306 	br	20df0 <_gp+0xfffdf2a4>
   210a4:	3083ffcc 	andi	r2,r6,4095
   210a8:	103f181e 	bne	r2,zero,20d0c <_gp+0xfffdf1c0>
   210ac:	99000217 	ldw	r4,8(r19)
   210b0:	b545883a 	add	r2,r22,r21
   210b4:	10800054 	ori	r2,r2,1
   210b8:	20800115 	stw	r2,4(r4)
   210bc:	003f3e06 	br	20db8 <_gp+0xfffdf26c>
   210c0:	01003f84 	movi	r4,254
   210c4:	02001fc4 	movi	r8,127
   210c8:	01c01f84 	movi	r7,126
   210cc:	003e4006 	br	209d0 <_gp+0xfffdee84>
   210d0:	00800134 	movhi	r2,4
   210d4:	10a6d304 	addi	r2,r2,-25780
   210d8:	15000015 	stw	r20,0(r2)
   210dc:	003f1106 	br	20d24 <_gp+0xfffdf1d8>
   210e0:	00800044 	movi	r2,1
   210e4:	002b883a 	mov	r21,zero
   210e8:	003f1f06 	br	20d68 <_gp+0xfffdf21c>
   210ec:	81400204 	addi	r5,r16,8
   210f0:	9009883a 	mov	r4,r18
   210f4:	0025e6c0 	call	25e6c <_free_r>
   210f8:	00800134 	movhi	r2,4
   210fc:	10ae0604 	addi	r2,r2,-18408
   21100:	10c00017 	ldw	r3,0(r2)
   21104:	003f2c06 	br	20db8 <_gp+0xfffdf26c>
   21108:	00c05504 	movi	r3,340
   2110c:	18800536 	bltu	r3,r2,21124 <_malloc_r+0x7cc>
   21110:	3804d3fa 	srli	r2,r7,15
   21114:	11401e04 	addi	r5,r2,120
   21118:	10c01dc4 	addi	r3,r2,119
   2111c:	294b883a 	add	r5,r5,r5
   21120:	003f5606 	br	20e7c <_gp+0xfffdf330>
   21124:	00c15504 	movi	r3,1364
   21128:	18800536 	bltu	r3,r2,21140 <_malloc_r+0x7e8>
   2112c:	3804d4ba 	srli	r2,r7,18
   21130:	11401f44 	addi	r5,r2,125
   21134:	10c01f04 	addi	r3,r2,124
   21138:	294b883a 	add	r5,r5,r5
   2113c:	003f4f06 	br	20e7c <_gp+0xfffdf330>
   21140:	01403f84 	movi	r5,254
   21144:	00c01f84 	movi	r3,126
   21148:	003f4c06 	br	20e7c <_gp+0xfffdf330>
   2114c:	98800117 	ldw	r2,4(r19)
   21150:	003fa006 	br	20fd4 <_gp+0xfffdf488>
   21154:	8808d0fa 	srli	r4,r17,3
   21158:	20800044 	addi	r2,r4,1
   2115c:	1085883a 	add	r2,r2,r2
   21160:	003e9006 	br	20ba4 <_gp+0xfffdf058>

00021164 <memset>:
   21164:	20c000cc 	andi	r3,r4,3
   21168:	2005883a 	mov	r2,r4
   2116c:	18004426 	beq	r3,zero,21280 <memset+0x11c>
   21170:	31ffffc4 	addi	r7,r6,-1
   21174:	30004026 	beq	r6,zero,21278 <memset+0x114>
   21178:	2813883a 	mov	r9,r5
   2117c:	200d883a 	mov	r6,r4
   21180:	2007883a 	mov	r3,r4
   21184:	00000406 	br	21198 <memset+0x34>
   21188:	3a3fffc4 	addi	r8,r7,-1
   2118c:	31800044 	addi	r6,r6,1
   21190:	38003926 	beq	r7,zero,21278 <memset+0x114>
   21194:	400f883a 	mov	r7,r8
   21198:	18c00044 	addi	r3,r3,1
   2119c:	32400005 	stb	r9,0(r6)
   211a0:	1a0000cc 	andi	r8,r3,3
   211a4:	403ff81e 	bne	r8,zero,21188 <_gp+0xfffdf63c>
   211a8:	010000c4 	movi	r4,3
   211ac:	21c02d2e 	bgeu	r4,r7,21264 <memset+0x100>
   211b0:	29003fcc 	andi	r4,r5,255
   211b4:	200c923a 	slli	r6,r4,8
   211b8:	3108b03a 	or	r4,r6,r4
   211bc:	200c943a 	slli	r6,r4,16
   211c0:	218cb03a 	or	r6,r4,r6
   211c4:	010003c4 	movi	r4,15
   211c8:	21c0182e 	bgeu	r4,r7,2122c <memset+0xc8>
   211cc:	3b3ffc04 	addi	r12,r7,-16
   211d0:	6018d13a 	srli	r12,r12,4
   211d4:	1a000104 	addi	r8,r3,4
   211d8:	1ac00204 	addi	r11,r3,8
   211dc:	6008913a 	slli	r4,r12,4
   211e0:	1a800304 	addi	r10,r3,12
   211e4:	1813883a 	mov	r9,r3
   211e8:	21000504 	addi	r4,r4,20
   211ec:	1909883a 	add	r4,r3,r4
   211f0:	49800015 	stw	r6,0(r9)
   211f4:	41800015 	stw	r6,0(r8)
   211f8:	59800015 	stw	r6,0(r11)
   211fc:	51800015 	stw	r6,0(r10)
   21200:	42000404 	addi	r8,r8,16
   21204:	4a400404 	addi	r9,r9,16
   21208:	5ac00404 	addi	r11,r11,16
   2120c:	52800404 	addi	r10,r10,16
   21210:	413ff71e 	bne	r8,r4,211f0 <_gp+0xfffdf6a4>
   21214:	63000044 	addi	r12,r12,1
   21218:	6018913a 	slli	r12,r12,4
   2121c:	39c003cc 	andi	r7,r7,15
   21220:	010000c4 	movi	r4,3
   21224:	1b07883a 	add	r3,r3,r12
   21228:	21c00e2e 	bgeu	r4,r7,21264 <memset+0x100>
   2122c:	1813883a 	mov	r9,r3
   21230:	3811883a 	mov	r8,r7
   21234:	010000c4 	movi	r4,3
   21238:	49800015 	stw	r6,0(r9)
   2123c:	423fff04 	addi	r8,r8,-4
   21240:	4a400104 	addi	r9,r9,4
   21244:	223ffc36 	bltu	r4,r8,21238 <_gp+0xfffdf6ec>
   21248:	393fff04 	addi	r4,r7,-4
   2124c:	2008d0ba 	srli	r4,r4,2
   21250:	39c000cc 	andi	r7,r7,3
   21254:	21000044 	addi	r4,r4,1
   21258:	2109883a 	add	r4,r4,r4
   2125c:	2109883a 	add	r4,r4,r4
   21260:	1907883a 	add	r3,r3,r4
   21264:	38000526 	beq	r7,zero,2127c <memset+0x118>
   21268:	19cf883a 	add	r7,r3,r7
   2126c:	19400005 	stb	r5,0(r3)
   21270:	18c00044 	addi	r3,r3,1
   21274:	38fffd1e 	bne	r7,r3,2126c <_gp+0xfffdf720>
   21278:	f800283a 	ret
   2127c:	f800283a 	ret
   21280:	2007883a 	mov	r3,r4
   21284:	300f883a 	mov	r7,r6
   21288:	003fc706 	br	211a8 <_gp+0xfffdf65c>

0002128c <_printf_r>:
   2128c:	defffd04 	addi	sp,sp,-12
   21290:	2805883a 	mov	r2,r5
   21294:	dfc00015 	stw	ra,0(sp)
   21298:	d9800115 	stw	r6,4(sp)
   2129c:	d9c00215 	stw	r7,8(sp)
   212a0:	21400217 	ldw	r5,8(r4)
   212a4:	d9c00104 	addi	r7,sp,4
   212a8:	100d883a 	mov	r6,r2
   212ac:	0021a540 	call	21a54 <___vfprintf_internal_r>
   212b0:	dfc00017 	ldw	ra,0(sp)
   212b4:	dec00304 	addi	sp,sp,12
   212b8:	f800283a 	ret

000212bc <printf>:
   212bc:	defffc04 	addi	sp,sp,-16
   212c0:	dfc00015 	stw	ra,0(sp)
   212c4:	d9400115 	stw	r5,4(sp)
   212c8:	d9800215 	stw	r6,8(sp)
   212cc:	d9c00315 	stw	r7,12(sp)
   212d0:	00800134 	movhi	r2,4
   212d4:	10a6d604 	addi	r2,r2,-25768
   212d8:	10800017 	ldw	r2,0(r2)
   212dc:	200b883a 	mov	r5,r4
   212e0:	d9800104 	addi	r6,sp,4
   212e4:	11000217 	ldw	r4,8(r2)
   212e8:	0023c4c0 	call	23c4c <__vfprintf_internal>
   212ec:	dfc00017 	ldw	ra,0(sp)
   212f0:	dec00404 	addi	sp,sp,16
   212f4:	f800283a 	ret

000212f8 <_putchar_r>:
   212f8:	21800217 	ldw	r6,8(r4)
   212fc:	0027ddc1 	jmpi	27ddc <_putc_r>

00021300 <putchar>:
   21300:	00800134 	movhi	r2,4
   21304:	10a6d604 	addi	r2,r2,-25768
   21308:	200b883a 	mov	r5,r4
   2130c:	11000017 	ldw	r4,0(r2)
   21310:	21800217 	ldw	r6,8(r4)
   21314:	0027ddc1 	jmpi	27ddc <_putc_r>

00021318 <_puts_r>:
   21318:	defff604 	addi	sp,sp,-40
   2131c:	dc000715 	stw	r16,28(sp)
   21320:	2021883a 	mov	r16,r4
   21324:	2809883a 	mov	r4,r5
   21328:	dc400815 	stw	r17,32(sp)
   2132c:	dfc00915 	stw	ra,36(sp)
   21330:	2823883a 	mov	r17,r5
   21334:	00219bc0 	call	219bc <strlen>
   21338:	10c00044 	addi	r3,r2,1
   2133c:	d8800115 	stw	r2,4(sp)
   21340:	008000f4 	movhi	r2,3
   21344:	109f1c04 	addi	r2,r2,31856
   21348:	d8800215 	stw	r2,8(sp)
   2134c:	00800044 	movi	r2,1
   21350:	d8800315 	stw	r2,12(sp)
   21354:	00800084 	movi	r2,2
   21358:	dc400015 	stw	r17,0(sp)
   2135c:	d8c00615 	stw	r3,24(sp)
   21360:	dec00415 	stw	sp,16(sp)
   21364:	d8800515 	stw	r2,20(sp)
   21368:	80000226 	beq	r16,zero,21374 <_puts_r+0x5c>
   2136c:	80800e17 	ldw	r2,56(r16)
   21370:	10001426 	beq	r2,zero,213c4 <_puts_r+0xac>
   21374:	81400217 	ldw	r5,8(r16)
   21378:	2880030b 	ldhu	r2,12(r5)
   2137c:	10c8000c 	andi	r3,r2,8192
   21380:	1800061e 	bne	r3,zero,2139c <_puts_r+0x84>
   21384:	29001917 	ldw	r4,100(r5)
   21388:	00f7ffc4 	movi	r3,-8193
   2138c:	10880014 	ori	r2,r2,8192
   21390:	20c6703a 	and	r3,r4,r3
   21394:	2880030d 	sth	r2,12(r5)
   21398:	28c01915 	stw	r3,100(r5)
   2139c:	d9800404 	addi	r6,sp,16
   213a0:	8009883a 	mov	r4,r16
   213a4:	002617c0 	call	2617c <__sfvwrite_r>
   213a8:	1000091e 	bne	r2,zero,213d0 <_puts_r+0xb8>
   213ac:	00800284 	movi	r2,10
   213b0:	dfc00917 	ldw	ra,36(sp)
   213b4:	dc400817 	ldw	r17,32(sp)
   213b8:	dc000717 	ldw	r16,28(sp)
   213bc:	dec00a04 	addi	sp,sp,40
   213c0:	f800283a 	ret
   213c4:	8009883a 	mov	r4,r16
   213c8:	0025cf80 	call	25cf8 <__sinit>
   213cc:	003fe906 	br	21374 <_gp+0xfffdf828>
   213d0:	00bfffc4 	movi	r2,-1
   213d4:	003ff606 	br	213b0 <_gp+0xfffdf864>

000213d8 <puts>:
   213d8:	00800134 	movhi	r2,4
   213dc:	10a6d604 	addi	r2,r2,-25768
   213e0:	200b883a 	mov	r5,r4
   213e4:	11000017 	ldw	r4,0(r2)
   213e8:	00213181 	jmpi	21318 <_puts_r>

000213ec <realloc>:
   213ec:	00800134 	movhi	r2,4
   213f0:	10a6d604 	addi	r2,r2,-25768
   213f4:	280d883a 	mov	r6,r5
   213f8:	200b883a 	mov	r5,r4
   213fc:	11000017 	ldw	r4,0(r2)
   21400:	00214041 	jmpi	21404 <_realloc_r>

00021404 <_realloc_r>:
   21404:	defff604 	addi	sp,sp,-40
   21408:	dc800215 	stw	r18,8(sp)
   2140c:	dfc00915 	stw	ra,36(sp)
   21410:	df000815 	stw	fp,32(sp)
   21414:	ddc00715 	stw	r23,28(sp)
   21418:	dd800615 	stw	r22,24(sp)
   2141c:	dd400515 	stw	r21,20(sp)
   21420:	dd000415 	stw	r20,16(sp)
   21424:	dcc00315 	stw	r19,12(sp)
   21428:	dc400115 	stw	r17,4(sp)
   2142c:	dc000015 	stw	r16,0(sp)
   21430:	3025883a 	mov	r18,r6
   21434:	2800b726 	beq	r5,zero,21714 <_realloc_r+0x310>
   21438:	282b883a 	mov	r21,r5
   2143c:	2029883a 	mov	r20,r4
   21440:	002de780 	call	2de78 <__malloc_lock>
   21444:	a8bfff17 	ldw	r2,-4(r21)
   21448:	043fff04 	movi	r16,-4
   2144c:	90c002c4 	addi	r3,r18,11
   21450:	01000584 	movi	r4,22
   21454:	acfffe04 	addi	r19,r21,-8
   21458:	1420703a 	and	r16,r2,r16
   2145c:	20c0332e 	bgeu	r4,r3,2152c <_realloc_r+0x128>
   21460:	047ffe04 	movi	r17,-8
   21464:	1c62703a 	and	r17,r3,r17
   21468:	8807883a 	mov	r3,r17
   2146c:	88005816 	blt	r17,zero,215d0 <_realloc_r+0x1cc>
   21470:	8c805736 	bltu	r17,r18,215d0 <_realloc_r+0x1cc>
   21474:	80c0300e 	bge	r16,r3,21538 <_realloc_r+0x134>
   21478:	07000134 	movhi	fp,4
   2147c:	e7202504 	addi	fp,fp,-32620
   21480:	e1c00217 	ldw	r7,8(fp)
   21484:	9c09883a 	add	r4,r19,r16
   21488:	22000117 	ldw	r8,4(r4)
   2148c:	21c06326 	beq	r4,r7,2161c <_realloc_r+0x218>
   21490:	017fff84 	movi	r5,-2
   21494:	414a703a 	and	r5,r8,r5
   21498:	214b883a 	add	r5,r4,r5
   2149c:	29800117 	ldw	r6,4(r5)
   214a0:	3180004c 	andi	r6,r6,1
   214a4:	30003f26 	beq	r6,zero,215a4 <_realloc_r+0x1a0>
   214a8:	1080004c 	andi	r2,r2,1
   214ac:	10008326 	beq	r2,zero,216bc <_realloc_r+0x2b8>
   214b0:	900b883a 	mov	r5,r18
   214b4:	a009883a 	mov	r4,r20
   214b8:	00209580 	call	20958 <_malloc_r>
   214bc:	1025883a 	mov	r18,r2
   214c0:	10011e26 	beq	r2,zero,2193c <_realloc_r+0x538>
   214c4:	a93fff17 	ldw	r4,-4(r21)
   214c8:	10fffe04 	addi	r3,r2,-8
   214cc:	00bfff84 	movi	r2,-2
   214d0:	2084703a 	and	r2,r4,r2
   214d4:	9885883a 	add	r2,r19,r2
   214d8:	1880ee26 	beq	r3,r2,21894 <_realloc_r+0x490>
   214dc:	81bfff04 	addi	r6,r16,-4
   214e0:	00800904 	movi	r2,36
   214e4:	1180b836 	bltu	r2,r6,217c8 <_realloc_r+0x3c4>
   214e8:	00c004c4 	movi	r3,19
   214ec:	19809636 	bltu	r3,r6,21748 <_realloc_r+0x344>
   214f0:	9005883a 	mov	r2,r18
   214f4:	a807883a 	mov	r3,r21
   214f8:	19000017 	ldw	r4,0(r3)
   214fc:	11000015 	stw	r4,0(r2)
   21500:	19000117 	ldw	r4,4(r3)
   21504:	11000115 	stw	r4,4(r2)
   21508:	18c00217 	ldw	r3,8(r3)
   2150c:	10c00215 	stw	r3,8(r2)
   21510:	a80b883a 	mov	r5,r21
   21514:	a009883a 	mov	r4,r20
   21518:	0025e6c0 	call	25e6c <_free_r>
   2151c:	a009883a 	mov	r4,r20
   21520:	002df980 	call	2df98 <__malloc_unlock>
   21524:	9005883a 	mov	r2,r18
   21528:	00001206 	br	21574 <_realloc_r+0x170>
   2152c:	00c00404 	movi	r3,16
   21530:	1823883a 	mov	r17,r3
   21534:	003fce06 	br	21470 <_gp+0xfffdf924>
   21538:	a825883a 	mov	r18,r21
   2153c:	8445c83a 	sub	r2,r16,r17
   21540:	00c003c4 	movi	r3,15
   21544:	18802636 	bltu	r3,r2,215e0 <_realloc_r+0x1dc>
   21548:	99800117 	ldw	r6,4(r19)
   2154c:	9c07883a 	add	r3,r19,r16
   21550:	3180004c 	andi	r6,r6,1
   21554:	3420b03a 	or	r16,r6,r16
   21558:	9c000115 	stw	r16,4(r19)
   2155c:	18800117 	ldw	r2,4(r3)
   21560:	10800054 	ori	r2,r2,1
   21564:	18800115 	stw	r2,4(r3)
   21568:	a009883a 	mov	r4,r20
   2156c:	002df980 	call	2df98 <__malloc_unlock>
   21570:	9005883a 	mov	r2,r18
   21574:	dfc00917 	ldw	ra,36(sp)
   21578:	df000817 	ldw	fp,32(sp)
   2157c:	ddc00717 	ldw	r23,28(sp)
   21580:	dd800617 	ldw	r22,24(sp)
   21584:	dd400517 	ldw	r21,20(sp)
   21588:	dd000417 	ldw	r20,16(sp)
   2158c:	dcc00317 	ldw	r19,12(sp)
   21590:	dc800217 	ldw	r18,8(sp)
   21594:	dc400117 	ldw	r17,4(sp)
   21598:	dc000017 	ldw	r16,0(sp)
   2159c:	dec00a04 	addi	sp,sp,40
   215a0:	f800283a 	ret
   215a4:	017fff04 	movi	r5,-4
   215a8:	414a703a 	and	r5,r8,r5
   215ac:	814d883a 	add	r6,r16,r5
   215b0:	30c01f16 	blt	r6,r3,21630 <_realloc_r+0x22c>
   215b4:	20800317 	ldw	r2,12(r4)
   215b8:	20c00217 	ldw	r3,8(r4)
   215bc:	a825883a 	mov	r18,r21
   215c0:	3021883a 	mov	r16,r6
   215c4:	18800315 	stw	r2,12(r3)
   215c8:	10c00215 	stw	r3,8(r2)
   215cc:	003fdb06 	br	2153c <_gp+0xfffdf9f0>
   215d0:	00800304 	movi	r2,12
   215d4:	a0800015 	stw	r2,0(r20)
   215d8:	0005883a 	mov	r2,zero
   215dc:	003fe506 	br	21574 <_gp+0xfffdfa28>
   215e0:	98c00117 	ldw	r3,4(r19)
   215e4:	9c4b883a 	add	r5,r19,r17
   215e8:	11000054 	ori	r4,r2,1
   215ec:	18c0004c 	andi	r3,r3,1
   215f0:	1c62b03a 	or	r17,r3,r17
   215f4:	9c400115 	stw	r17,4(r19)
   215f8:	29000115 	stw	r4,4(r5)
   215fc:	2885883a 	add	r2,r5,r2
   21600:	10c00117 	ldw	r3,4(r2)
   21604:	29400204 	addi	r5,r5,8
   21608:	a009883a 	mov	r4,r20
   2160c:	18c00054 	ori	r3,r3,1
   21610:	10c00115 	stw	r3,4(r2)
   21614:	0025e6c0 	call	25e6c <_free_r>
   21618:	003fd306 	br	21568 <_gp+0xfffdfa1c>
   2161c:	017fff04 	movi	r5,-4
   21620:	414a703a 	and	r5,r8,r5
   21624:	89800404 	addi	r6,r17,16
   21628:	8151883a 	add	r8,r16,r5
   2162c:	4180590e 	bge	r8,r6,21794 <_realloc_r+0x390>
   21630:	1080004c 	andi	r2,r2,1
   21634:	103f9e1e 	bne	r2,zero,214b0 <_gp+0xfffdf964>
   21638:	adbffe17 	ldw	r22,-8(r21)
   2163c:	00bfff04 	movi	r2,-4
   21640:	9dadc83a 	sub	r22,r19,r22
   21644:	b1800117 	ldw	r6,4(r22)
   21648:	3084703a 	and	r2,r6,r2
   2164c:	20002026 	beq	r4,zero,216d0 <_realloc_r+0x2cc>
   21650:	80af883a 	add	r23,r16,r2
   21654:	b96f883a 	add	r23,r23,r5
   21658:	21c05f26 	beq	r4,r7,217d8 <_realloc_r+0x3d4>
   2165c:	b8c01c16 	blt	r23,r3,216d0 <_realloc_r+0x2cc>
   21660:	20800317 	ldw	r2,12(r4)
   21664:	20c00217 	ldw	r3,8(r4)
   21668:	81bfff04 	addi	r6,r16,-4
   2166c:	01000904 	movi	r4,36
   21670:	18800315 	stw	r2,12(r3)
   21674:	10c00215 	stw	r3,8(r2)
   21678:	b0c00217 	ldw	r3,8(r22)
   2167c:	b0800317 	ldw	r2,12(r22)
   21680:	b4800204 	addi	r18,r22,8
   21684:	18800315 	stw	r2,12(r3)
   21688:	10c00215 	stw	r3,8(r2)
   2168c:	21801b36 	bltu	r4,r6,216fc <_realloc_r+0x2f8>
   21690:	008004c4 	movi	r2,19
   21694:	1180352e 	bgeu	r2,r6,2176c <_realloc_r+0x368>
   21698:	a8800017 	ldw	r2,0(r21)
   2169c:	b0800215 	stw	r2,8(r22)
   216a0:	a8800117 	ldw	r2,4(r21)
   216a4:	b0800315 	stw	r2,12(r22)
   216a8:	008006c4 	movi	r2,27
   216ac:	11807f36 	bltu	r2,r6,218ac <_realloc_r+0x4a8>
   216b0:	b0800404 	addi	r2,r22,16
   216b4:	ad400204 	addi	r21,r21,8
   216b8:	00002d06 	br	21770 <_realloc_r+0x36c>
   216bc:	adbffe17 	ldw	r22,-8(r21)
   216c0:	00bfff04 	movi	r2,-4
   216c4:	9dadc83a 	sub	r22,r19,r22
   216c8:	b1000117 	ldw	r4,4(r22)
   216cc:	2084703a 	and	r2,r4,r2
   216d0:	b03f7726 	beq	r22,zero,214b0 <_gp+0xfffdf964>
   216d4:	80af883a 	add	r23,r16,r2
   216d8:	b8ff7516 	blt	r23,r3,214b0 <_gp+0xfffdf964>
   216dc:	b0800317 	ldw	r2,12(r22)
   216e0:	b0c00217 	ldw	r3,8(r22)
   216e4:	81bfff04 	addi	r6,r16,-4
   216e8:	01000904 	movi	r4,36
   216ec:	18800315 	stw	r2,12(r3)
   216f0:	10c00215 	stw	r3,8(r2)
   216f4:	b4800204 	addi	r18,r22,8
   216f8:	21bfe52e 	bgeu	r4,r6,21690 <_gp+0xfffdfb44>
   216fc:	a80b883a 	mov	r5,r21
   21700:	9009883a 	mov	r4,r18
   21704:	0026c840 	call	26c84 <memmove>
   21708:	b821883a 	mov	r16,r23
   2170c:	b027883a 	mov	r19,r22
   21710:	003f8a06 	br	2153c <_gp+0xfffdf9f0>
   21714:	300b883a 	mov	r5,r6
   21718:	dfc00917 	ldw	ra,36(sp)
   2171c:	df000817 	ldw	fp,32(sp)
   21720:	ddc00717 	ldw	r23,28(sp)
   21724:	dd800617 	ldw	r22,24(sp)
   21728:	dd400517 	ldw	r21,20(sp)
   2172c:	dd000417 	ldw	r20,16(sp)
   21730:	dcc00317 	ldw	r19,12(sp)
   21734:	dc800217 	ldw	r18,8(sp)
   21738:	dc400117 	ldw	r17,4(sp)
   2173c:	dc000017 	ldw	r16,0(sp)
   21740:	dec00a04 	addi	sp,sp,40
   21744:	00209581 	jmpi	20958 <_malloc_r>
   21748:	a8c00017 	ldw	r3,0(r21)
   2174c:	90c00015 	stw	r3,0(r18)
   21750:	a8c00117 	ldw	r3,4(r21)
   21754:	90c00115 	stw	r3,4(r18)
   21758:	00c006c4 	movi	r3,27
   2175c:	19804536 	bltu	r3,r6,21874 <_realloc_r+0x470>
   21760:	90800204 	addi	r2,r18,8
   21764:	a8c00204 	addi	r3,r21,8
   21768:	003f6306 	br	214f8 <_gp+0xfffdf9ac>
   2176c:	9005883a 	mov	r2,r18
   21770:	a8c00017 	ldw	r3,0(r21)
   21774:	b821883a 	mov	r16,r23
   21778:	b027883a 	mov	r19,r22
   2177c:	10c00015 	stw	r3,0(r2)
   21780:	a8c00117 	ldw	r3,4(r21)
   21784:	10c00115 	stw	r3,4(r2)
   21788:	a8c00217 	ldw	r3,8(r21)
   2178c:	10c00215 	stw	r3,8(r2)
   21790:	003f6a06 	br	2153c <_gp+0xfffdf9f0>
   21794:	9c67883a 	add	r19,r19,r17
   21798:	4445c83a 	sub	r2,r8,r17
   2179c:	e4c00215 	stw	r19,8(fp)
   217a0:	10800054 	ori	r2,r2,1
   217a4:	98800115 	stw	r2,4(r19)
   217a8:	a8bfff17 	ldw	r2,-4(r21)
   217ac:	a009883a 	mov	r4,r20
   217b0:	1080004c 	andi	r2,r2,1
   217b4:	1462b03a 	or	r17,r2,r17
   217b8:	ac7fff15 	stw	r17,-4(r21)
   217bc:	002df980 	call	2df98 <__malloc_unlock>
   217c0:	a805883a 	mov	r2,r21
   217c4:	003f6b06 	br	21574 <_gp+0xfffdfa28>
   217c8:	a80b883a 	mov	r5,r21
   217cc:	9009883a 	mov	r4,r18
   217d0:	0026c840 	call	26c84 <memmove>
   217d4:	003f4e06 	br	21510 <_gp+0xfffdf9c4>
   217d8:	89000404 	addi	r4,r17,16
   217dc:	b93fbc16 	blt	r23,r4,216d0 <_gp+0xfffdfb84>
   217e0:	b0800317 	ldw	r2,12(r22)
   217e4:	b0c00217 	ldw	r3,8(r22)
   217e8:	81bfff04 	addi	r6,r16,-4
   217ec:	01000904 	movi	r4,36
   217f0:	18800315 	stw	r2,12(r3)
   217f4:	10c00215 	stw	r3,8(r2)
   217f8:	b4800204 	addi	r18,r22,8
   217fc:	21804336 	bltu	r4,r6,2190c <_realloc_r+0x508>
   21800:	008004c4 	movi	r2,19
   21804:	11803f2e 	bgeu	r2,r6,21904 <_realloc_r+0x500>
   21808:	a8800017 	ldw	r2,0(r21)
   2180c:	b0800215 	stw	r2,8(r22)
   21810:	a8800117 	ldw	r2,4(r21)
   21814:	b0800315 	stw	r2,12(r22)
   21818:	008006c4 	movi	r2,27
   2181c:	11803f36 	bltu	r2,r6,2191c <_realloc_r+0x518>
   21820:	b0800404 	addi	r2,r22,16
   21824:	ad400204 	addi	r21,r21,8
   21828:	a8c00017 	ldw	r3,0(r21)
   2182c:	10c00015 	stw	r3,0(r2)
   21830:	a8c00117 	ldw	r3,4(r21)
   21834:	10c00115 	stw	r3,4(r2)
   21838:	a8c00217 	ldw	r3,8(r21)
   2183c:	10c00215 	stw	r3,8(r2)
   21840:	b447883a 	add	r3,r22,r17
   21844:	bc45c83a 	sub	r2,r23,r17
   21848:	e0c00215 	stw	r3,8(fp)
   2184c:	10800054 	ori	r2,r2,1
   21850:	18800115 	stw	r2,4(r3)
   21854:	b0800117 	ldw	r2,4(r22)
   21858:	a009883a 	mov	r4,r20
   2185c:	1080004c 	andi	r2,r2,1
   21860:	1462b03a 	or	r17,r2,r17
   21864:	b4400115 	stw	r17,4(r22)
   21868:	002df980 	call	2df98 <__malloc_unlock>
   2186c:	9005883a 	mov	r2,r18
   21870:	003f4006 	br	21574 <_gp+0xfffdfa28>
   21874:	a8c00217 	ldw	r3,8(r21)
   21878:	90c00215 	stw	r3,8(r18)
   2187c:	a8c00317 	ldw	r3,12(r21)
   21880:	90c00315 	stw	r3,12(r18)
   21884:	30801126 	beq	r6,r2,218cc <_realloc_r+0x4c8>
   21888:	90800404 	addi	r2,r18,16
   2188c:	a8c00404 	addi	r3,r21,16
   21890:	003f1906 	br	214f8 <_gp+0xfffdf9ac>
   21894:	90ffff17 	ldw	r3,-4(r18)
   21898:	00bfff04 	movi	r2,-4
   2189c:	a825883a 	mov	r18,r21
   218a0:	1884703a 	and	r2,r3,r2
   218a4:	80a1883a 	add	r16,r16,r2
   218a8:	003f2406 	br	2153c <_gp+0xfffdf9f0>
   218ac:	a8800217 	ldw	r2,8(r21)
   218b0:	b0800415 	stw	r2,16(r22)
   218b4:	a8800317 	ldw	r2,12(r21)
   218b8:	b0800515 	stw	r2,20(r22)
   218bc:	31000a26 	beq	r6,r4,218e8 <_realloc_r+0x4e4>
   218c0:	b0800604 	addi	r2,r22,24
   218c4:	ad400404 	addi	r21,r21,16
   218c8:	003fa906 	br	21770 <_gp+0xfffdfc24>
   218cc:	a9000417 	ldw	r4,16(r21)
   218d0:	90800604 	addi	r2,r18,24
   218d4:	a8c00604 	addi	r3,r21,24
   218d8:	91000415 	stw	r4,16(r18)
   218dc:	a9000517 	ldw	r4,20(r21)
   218e0:	91000515 	stw	r4,20(r18)
   218e4:	003f0406 	br	214f8 <_gp+0xfffdf9ac>
   218e8:	a8c00417 	ldw	r3,16(r21)
   218ec:	ad400604 	addi	r21,r21,24
   218f0:	b0800804 	addi	r2,r22,32
   218f4:	b0c00615 	stw	r3,24(r22)
   218f8:	a8ffff17 	ldw	r3,-4(r21)
   218fc:	b0c00715 	stw	r3,28(r22)
   21900:	003f9b06 	br	21770 <_gp+0xfffdfc24>
   21904:	9005883a 	mov	r2,r18
   21908:	003fc706 	br	21828 <_gp+0xfffdfcdc>
   2190c:	a80b883a 	mov	r5,r21
   21910:	9009883a 	mov	r4,r18
   21914:	0026c840 	call	26c84 <memmove>
   21918:	003fc906 	br	21840 <_gp+0xfffdfcf4>
   2191c:	a8800217 	ldw	r2,8(r21)
   21920:	b0800415 	stw	r2,16(r22)
   21924:	a8800317 	ldw	r2,12(r21)
   21928:	b0800515 	stw	r2,20(r22)
   2192c:	31000726 	beq	r6,r4,2194c <_realloc_r+0x548>
   21930:	b0800604 	addi	r2,r22,24
   21934:	ad400404 	addi	r21,r21,16
   21938:	003fbb06 	br	21828 <_gp+0xfffdfcdc>
   2193c:	a009883a 	mov	r4,r20
   21940:	002df980 	call	2df98 <__malloc_unlock>
   21944:	0005883a 	mov	r2,zero
   21948:	003f0a06 	br	21574 <_gp+0xfffdfa28>
   2194c:	a8c00417 	ldw	r3,16(r21)
   21950:	ad400604 	addi	r21,r21,24
   21954:	b0800804 	addi	r2,r22,32
   21958:	b0c00615 	stw	r3,24(r22)
   2195c:	a8ffff17 	ldw	r3,-4(r21)
   21960:	b0c00715 	stw	r3,28(r22)
   21964:	003fb006 	br	21828 <_gp+0xfffdfcdc>

00021968 <_sbrk_r>:
   21968:	defffd04 	addi	sp,sp,-12
   2196c:	dc000015 	stw	r16,0(sp)
   21970:	04000134 	movhi	r16,4
   21974:	dc400115 	stw	r17,4(sp)
   21978:	842de204 	addi	r16,r16,-18552
   2197c:	2023883a 	mov	r17,r4
   21980:	2809883a 	mov	r4,r5
   21984:	dfc00215 	stw	ra,8(sp)
   21988:	80000015 	stw	zero,0(r16)
   2198c:	002db700 	call	2db70 <sbrk>
   21990:	00ffffc4 	movi	r3,-1
   21994:	10c00526 	beq	r2,r3,219ac <_sbrk_r+0x44>
   21998:	dfc00217 	ldw	ra,8(sp)
   2199c:	dc400117 	ldw	r17,4(sp)
   219a0:	dc000017 	ldw	r16,0(sp)
   219a4:	dec00304 	addi	sp,sp,12
   219a8:	f800283a 	ret
   219ac:	80c00017 	ldw	r3,0(r16)
   219b0:	183ff926 	beq	r3,zero,21998 <_gp+0xfffdfe4c>
   219b4:	88c00015 	stw	r3,0(r17)
   219b8:	003ff706 	br	21998 <_gp+0xfffdfe4c>

000219bc <strlen>:
   219bc:	208000cc 	andi	r2,r4,3
   219c0:	10002026 	beq	r2,zero,21a44 <strlen+0x88>
   219c4:	20800007 	ldb	r2,0(r4)
   219c8:	10002026 	beq	r2,zero,21a4c <strlen+0x90>
   219cc:	2005883a 	mov	r2,r4
   219d0:	00000206 	br	219dc <strlen+0x20>
   219d4:	10c00007 	ldb	r3,0(r2)
   219d8:	18001826 	beq	r3,zero,21a3c <strlen+0x80>
   219dc:	10800044 	addi	r2,r2,1
   219e0:	10c000cc 	andi	r3,r2,3
   219e4:	183ffb1e 	bne	r3,zero,219d4 <_gp+0xfffdfe88>
   219e8:	10c00017 	ldw	r3,0(r2)
   219ec:	01ffbff4 	movhi	r7,65279
   219f0:	39ffbfc4 	addi	r7,r7,-257
   219f4:	00ca303a 	nor	r5,zero,r3
   219f8:	01a02074 	movhi	r6,32897
   219fc:	19c7883a 	add	r3,r3,r7
   21a00:	31a02004 	addi	r6,r6,-32640
   21a04:	1946703a 	and	r3,r3,r5
   21a08:	1986703a 	and	r3,r3,r6
   21a0c:	1800091e 	bne	r3,zero,21a34 <strlen+0x78>
   21a10:	10800104 	addi	r2,r2,4
   21a14:	10c00017 	ldw	r3,0(r2)
   21a18:	19cb883a 	add	r5,r3,r7
   21a1c:	00c6303a 	nor	r3,zero,r3
   21a20:	28c6703a 	and	r3,r5,r3
   21a24:	1986703a 	and	r3,r3,r6
   21a28:	183ff926 	beq	r3,zero,21a10 <_gp+0xfffdfec4>
   21a2c:	00000106 	br	21a34 <strlen+0x78>
   21a30:	10800044 	addi	r2,r2,1
   21a34:	10c00007 	ldb	r3,0(r2)
   21a38:	183ffd1e 	bne	r3,zero,21a30 <_gp+0xfffdfee4>
   21a3c:	1105c83a 	sub	r2,r2,r4
   21a40:	f800283a 	ret
   21a44:	2005883a 	mov	r2,r4
   21a48:	003fe706 	br	219e8 <_gp+0xfffdfe9c>
   21a4c:	0005883a 	mov	r2,zero
   21a50:	f800283a 	ret

00021a54 <___vfprintf_internal_r>:
   21a54:	deffb804 	addi	sp,sp,-288
   21a58:	dfc04715 	stw	ra,284(sp)
   21a5c:	ddc04515 	stw	r23,276(sp)
   21a60:	dd404315 	stw	r21,268(sp)
   21a64:	d9002c15 	stw	r4,176(sp)
   21a68:	282f883a 	mov	r23,r5
   21a6c:	302b883a 	mov	r21,r6
   21a70:	d9c02d15 	stw	r7,180(sp)
   21a74:	df004615 	stw	fp,280(sp)
   21a78:	dd804415 	stw	r22,272(sp)
   21a7c:	dd004215 	stw	r20,264(sp)
   21a80:	dcc04115 	stw	r19,260(sp)
   21a84:	dc804015 	stw	r18,256(sp)
   21a88:	dc403f15 	stw	r17,252(sp)
   21a8c:	dc003e15 	stw	r16,248(sp)
   21a90:	002686c0 	call	2686c <_localeconv_r>
   21a94:	10800017 	ldw	r2,0(r2)
   21a98:	1009883a 	mov	r4,r2
   21a9c:	d8803415 	stw	r2,208(sp)
   21aa0:	00219bc0 	call	219bc <strlen>
   21aa4:	d8803715 	stw	r2,220(sp)
   21aa8:	d8802c17 	ldw	r2,176(sp)
   21aac:	10000226 	beq	r2,zero,21ab8 <___vfprintf_internal_r+0x64>
   21ab0:	10800e17 	ldw	r2,56(r2)
   21ab4:	1000f926 	beq	r2,zero,21e9c <___vfprintf_internal_r+0x448>
   21ab8:	b880030b 	ldhu	r2,12(r23)
   21abc:	10c8000c 	andi	r3,r2,8192
   21ac0:	1800061e 	bne	r3,zero,21adc <___vfprintf_internal_r+0x88>
   21ac4:	b9001917 	ldw	r4,100(r23)
   21ac8:	00f7ffc4 	movi	r3,-8193
   21acc:	10880014 	ori	r2,r2,8192
   21ad0:	20c6703a 	and	r3,r4,r3
   21ad4:	b880030d 	sth	r2,12(r23)
   21ad8:	b8c01915 	stw	r3,100(r23)
   21adc:	10c0020c 	andi	r3,r2,8
   21ae0:	1800c126 	beq	r3,zero,21de8 <___vfprintf_internal_r+0x394>
   21ae4:	b8c00417 	ldw	r3,16(r23)
   21ae8:	1800bf26 	beq	r3,zero,21de8 <___vfprintf_internal_r+0x394>
   21aec:	1080068c 	andi	r2,r2,26
   21af0:	00c00284 	movi	r3,10
   21af4:	10c0c426 	beq	r2,r3,21e08 <___vfprintf_internal_r+0x3b4>
   21af8:	d8c00404 	addi	r3,sp,16
   21afc:	050000f4 	movhi	r20,3
   21b00:	d9001e04 	addi	r4,sp,120
   21b04:	a51f2d84 	addi	r20,r20,31926
   21b08:	d8c01e15 	stw	r3,120(sp)
   21b0c:	d8002015 	stw	zero,128(sp)
   21b10:	d8001f15 	stw	zero,124(sp)
   21b14:	d8003315 	stw	zero,204(sp)
   21b18:	d8003615 	stw	zero,216(sp)
   21b1c:	d8003815 	stw	zero,224(sp)
   21b20:	1811883a 	mov	r8,r3
   21b24:	d8003915 	stw	zero,228(sp)
   21b28:	d8003a15 	stw	zero,232(sp)
   21b2c:	d8002f15 	stw	zero,188(sp)
   21b30:	d9002815 	stw	r4,160(sp)
   21b34:	a8800007 	ldb	r2,0(r21)
   21b38:	10027b26 	beq	r2,zero,22528 <___vfprintf_internal_r+0xad4>
   21b3c:	00c00944 	movi	r3,37
   21b40:	a821883a 	mov	r16,r21
   21b44:	10c0021e 	bne	r2,r3,21b50 <___vfprintf_internal_r+0xfc>
   21b48:	00001406 	br	21b9c <___vfprintf_internal_r+0x148>
   21b4c:	10c00326 	beq	r2,r3,21b5c <___vfprintf_internal_r+0x108>
   21b50:	84000044 	addi	r16,r16,1
   21b54:	80800007 	ldb	r2,0(r16)
   21b58:	103ffc1e 	bne	r2,zero,21b4c <_gp+0xfffe0000>
   21b5c:	8563c83a 	sub	r17,r16,r21
   21b60:	88000e26 	beq	r17,zero,21b9c <___vfprintf_internal_r+0x148>
   21b64:	d8c02017 	ldw	r3,128(sp)
   21b68:	d8801f17 	ldw	r2,124(sp)
   21b6c:	45400015 	stw	r21,0(r8)
   21b70:	1c47883a 	add	r3,r3,r17
   21b74:	10800044 	addi	r2,r2,1
   21b78:	d8c02015 	stw	r3,128(sp)
   21b7c:	44400115 	stw	r17,4(r8)
   21b80:	d8801f15 	stw	r2,124(sp)
   21b84:	00c001c4 	movi	r3,7
   21b88:	1880a716 	blt	r3,r2,21e28 <___vfprintf_internal_r+0x3d4>
   21b8c:	42000204 	addi	r8,r8,8
   21b90:	d9402f17 	ldw	r5,188(sp)
   21b94:	2c4b883a 	add	r5,r5,r17
   21b98:	d9402f15 	stw	r5,188(sp)
   21b9c:	80800007 	ldb	r2,0(r16)
   21ba0:	1000a826 	beq	r2,zero,21e44 <___vfprintf_internal_r+0x3f0>
   21ba4:	84400047 	ldb	r17,1(r16)
   21ba8:	00bfffc4 	movi	r2,-1
   21bac:	85400044 	addi	r21,r16,1
   21bb0:	d8002785 	stb	zero,158(sp)
   21bb4:	0007883a 	mov	r3,zero
   21bb8:	000f883a 	mov	r7,zero
   21bbc:	d8802915 	stw	r2,164(sp)
   21bc0:	d8003115 	stw	zero,196(sp)
   21bc4:	0025883a 	mov	r18,zero
   21bc8:	01401604 	movi	r5,88
   21bcc:	01800244 	movi	r6,9
   21bd0:	02800a84 	movi	r10,42
   21bd4:	02401b04 	movi	r9,108
   21bd8:	ad400044 	addi	r21,r21,1
   21bdc:	88bff804 	addi	r2,r17,-32
   21be0:	28830436 	bltu	r5,r2,227f4 <___vfprintf_internal_r+0xda0>
   21be4:	100490ba 	slli	r2,r2,2
   21be8:	010000b4 	movhi	r4,2
   21bec:	2106ff04 	addi	r4,r4,7164
   21bf0:	1105883a 	add	r2,r2,r4
   21bf4:	10800017 	ldw	r2,0(r2)
   21bf8:	1000683a 	jmp	r2
   21bfc:	00022714 	movui	zero,2204
   21c00:	000227f4 	movhi	zero,2207
   21c04:	000227f4 	movhi	zero,2207
   21c08:	00022734 	movhi	zero,2204
   21c0c:	000227f4 	movhi	zero,2207
   21c10:	000227f4 	movhi	zero,2207
   21c14:	000227f4 	movhi	zero,2207
   21c18:	000227f4 	movhi	zero,2207
   21c1c:	000227f4 	movhi	zero,2207
   21c20:	000227f4 	movhi	zero,2207
   21c24:	00021ea8 	cmpgeui	zero,zero,2170
   21c28:	00022650 	cmplti	zero,zero,2201
   21c2c:	000227f4 	movhi	zero,2207
   21c30:	00021d70 	cmpltui	zero,zero,2165
   21c34:	00021ed0 	cmplti	zero,zero,2171
   21c38:	000227f4 	movhi	zero,2207
   21c3c:	00021f10 	cmplti	zero,zero,2172
   21c40:	00021f1c 	xori	zero,zero,2172
   21c44:	00021f1c 	xori	zero,zero,2172
   21c48:	00021f1c 	xori	zero,zero,2172
   21c4c:	00021f1c 	xori	zero,zero,2172
   21c50:	00021f1c 	xori	zero,zero,2172
   21c54:	00021f1c 	xori	zero,zero,2172
   21c58:	00021f1c 	xori	zero,zero,2172
   21c5c:	00021f1c 	xori	zero,zero,2172
   21c60:	00021f1c 	xori	zero,zero,2172
   21c64:	000227f4 	movhi	zero,2207
   21c68:	000227f4 	movhi	zero,2207
   21c6c:	000227f4 	movhi	zero,2207
   21c70:	000227f4 	movhi	zero,2207
   21c74:	000227f4 	movhi	zero,2207
   21c78:	000227f4 	movhi	zero,2207
   21c7c:	000227f4 	movhi	zero,2207
   21c80:	000227f4 	movhi	zero,2207
   21c84:	000227f4 	movhi	zero,2207
   21c88:	000227f4 	movhi	zero,2207
   21c8c:	00021f50 	cmplti	zero,zero,2173
   21c90:	0002200c 	andi	zero,zero,2176
   21c94:	000227f4 	movhi	zero,2207
   21c98:	0002200c 	andi	zero,zero,2176
   21c9c:	000227f4 	movhi	zero,2207
   21ca0:	000227f4 	movhi	zero,2207
   21ca4:	000227f4 	movhi	zero,2207
   21ca8:	000227f4 	movhi	zero,2207
   21cac:	000220ac 	andhi	zero,zero,2178
   21cb0:	000227f4 	movhi	zero,2207
   21cb4:	000227f4 	movhi	zero,2207
   21cb8:	000220b8 	rdprs	zero,zero,2178
   21cbc:	000227f4 	movhi	zero,2207
   21cc0:	000227f4 	movhi	zero,2207
   21cc4:	000227f4 	movhi	zero,2207
   21cc8:	000227f4 	movhi	zero,2207
   21ccc:	000227f4 	movhi	zero,2207
   21cd0:	00022530 	cmpltui	zero,zero,2196
   21cd4:	000227f4 	movhi	zero,2207
   21cd8:	000227f4 	movhi	zero,2207
   21cdc:	00022590 	cmplti	zero,zero,2198
   21ce0:	000227f4 	movhi	zero,2207
   21ce4:	000227f4 	movhi	zero,2207
   21ce8:	000227f4 	movhi	zero,2207
   21cec:	000227f4 	movhi	zero,2207
   21cf0:	000227f4 	movhi	zero,2207
   21cf4:	000227f4 	movhi	zero,2207
   21cf8:	000227f4 	movhi	zero,2207
   21cfc:	000227f4 	movhi	zero,2207
   21d00:	000227f4 	movhi	zero,2207
   21d04:	000227f4 	movhi	zero,2207
   21d08:	000227a0 	cmpeqi	zero,zero,2206
   21d0c:	00022740 	call	2274 <OSCtxSw_SWITCH_PC+0x2234>
   21d10:	0002200c 	andi	zero,zero,2176
   21d14:	0002200c 	andi	zero,zero,2176
   21d18:	0002200c 	andi	zero,zero,2176
   21d1c:	00022750 	cmplti	zero,zero,2205
   21d20:	00022740 	call	2274 <OSCtxSw_SWITCH_PC+0x2234>
   21d24:	000227f4 	movhi	zero,2207
   21d28:	000227f4 	movhi	zero,2207
   21d2c:	0002275c 	xori	zero,zero,2205
   21d30:	000227f4 	movhi	zero,2207
   21d34:	0002276c 	andhi	zero,zero,2205
   21d38:	00022640 	call	2264 <OSCtxSw_SWITCH_PC+0x2224>
   21d3c:	00021d7c 	xorhi	zero,zero,2165
   21d40:	00022660 	cmpeqi	zero,zero,2201
   21d44:	000227f4 	movhi	zero,2207
   21d48:	0002266c 	andhi	zero,zero,2201
   21d4c:	000227f4 	movhi	zero,2207
   21d50:	000226c8 	cmpgei	zero,zero,2203
   21d54:	000227f4 	movhi	zero,2207
   21d58:	000227f4 	movhi	zero,2207
   21d5c:	000226d8 	cmpnei	zero,zero,2203
   21d60:	d9003117 	ldw	r4,196(sp)
   21d64:	d8802d15 	stw	r2,180(sp)
   21d68:	0109c83a 	sub	r4,zero,r4
   21d6c:	d9003115 	stw	r4,196(sp)
   21d70:	94800114 	ori	r18,r18,4
   21d74:	ac400007 	ldb	r17,0(r21)
   21d78:	003f9706 	br	21bd8 <_gp+0xfffe008c>
   21d7c:	00800c04 	movi	r2,48
   21d80:	d9002d17 	ldw	r4,180(sp)
   21d84:	d9402917 	ldw	r5,164(sp)
   21d88:	d8802705 	stb	r2,156(sp)
   21d8c:	00801e04 	movi	r2,120
   21d90:	d8802745 	stb	r2,157(sp)
   21d94:	d8002785 	stb	zero,158(sp)
   21d98:	20c00104 	addi	r3,r4,4
   21d9c:	24c00017 	ldw	r19,0(r4)
   21da0:	002d883a 	mov	r22,zero
   21da4:	90800094 	ori	r2,r18,2
   21da8:	28029a16 	blt	r5,zero,22814 <___vfprintf_internal_r+0xdc0>
   21dac:	00bfdfc4 	movi	r2,-129
   21db0:	90a4703a 	and	r18,r18,r2
   21db4:	d8c02d15 	stw	r3,180(sp)
   21db8:	94800094 	ori	r18,r18,2
   21dbc:	9802871e 	bne	r19,zero,227dc <___vfprintf_internal_r+0xd88>
   21dc0:	008000f4 	movhi	r2,3
   21dc4:	109f2604 	addi	r2,r2,31896
   21dc8:	d8803915 	stw	r2,228(sp)
   21dcc:	04401e04 	movi	r17,120
   21dd0:	d8802917 	ldw	r2,164(sp)
   21dd4:	0039883a 	mov	fp,zero
   21dd8:	1001e926 	beq	r2,zero,22580 <___vfprintf_internal_r+0xb2c>
   21ddc:	0027883a 	mov	r19,zero
   21de0:	002d883a 	mov	r22,zero
   21de4:	00020506 	br	225fc <___vfprintf_internal_r+0xba8>
   21de8:	d9002c17 	ldw	r4,176(sp)
   21dec:	b80b883a 	mov	r5,r23
   21df0:	0023d240 	call	23d24 <__swsetup_r>
   21df4:	1005ac1e 	bne	r2,zero,234a8 <___vfprintf_internal_r+0x1a54>
   21df8:	b880030b 	ldhu	r2,12(r23)
   21dfc:	00c00284 	movi	r3,10
   21e00:	1080068c 	andi	r2,r2,26
   21e04:	10ff3c1e 	bne	r2,r3,21af8 <_gp+0xfffdffac>
   21e08:	b880038f 	ldh	r2,14(r23)
   21e0c:	103f3a16 	blt	r2,zero,21af8 <_gp+0xfffdffac>
   21e10:	d9c02d17 	ldw	r7,180(sp)
   21e14:	d9002c17 	ldw	r4,176(sp)
   21e18:	a80d883a 	mov	r6,r21
   21e1c:	b80b883a 	mov	r5,r23
   21e20:	0023c680 	call	23c68 <__sbprintf>
   21e24:	00001106 	br	21e6c <___vfprintf_internal_r+0x418>
   21e28:	d9002c17 	ldw	r4,176(sp)
   21e2c:	d9801e04 	addi	r6,sp,120
   21e30:	b80b883a 	mov	r5,r23
   21e34:	00282cc0 	call	282cc <__sprint_r>
   21e38:	1000081e 	bne	r2,zero,21e5c <___vfprintf_internal_r+0x408>
   21e3c:	da000404 	addi	r8,sp,16
   21e40:	003f5306 	br	21b90 <_gp+0xfffe0044>
   21e44:	d8802017 	ldw	r2,128(sp)
   21e48:	10000426 	beq	r2,zero,21e5c <___vfprintf_internal_r+0x408>
   21e4c:	d9002c17 	ldw	r4,176(sp)
   21e50:	d9801e04 	addi	r6,sp,120
   21e54:	b80b883a 	mov	r5,r23
   21e58:	00282cc0 	call	282cc <__sprint_r>
   21e5c:	b880030b 	ldhu	r2,12(r23)
   21e60:	1080100c 	andi	r2,r2,64
   21e64:	1005901e 	bne	r2,zero,234a8 <___vfprintf_internal_r+0x1a54>
   21e68:	d8802f17 	ldw	r2,188(sp)
   21e6c:	dfc04717 	ldw	ra,284(sp)
   21e70:	df004617 	ldw	fp,280(sp)
   21e74:	ddc04517 	ldw	r23,276(sp)
   21e78:	dd804417 	ldw	r22,272(sp)
   21e7c:	dd404317 	ldw	r21,268(sp)
   21e80:	dd004217 	ldw	r20,264(sp)
   21e84:	dcc04117 	ldw	r19,260(sp)
   21e88:	dc804017 	ldw	r18,256(sp)
   21e8c:	dc403f17 	ldw	r17,252(sp)
   21e90:	dc003e17 	ldw	r16,248(sp)
   21e94:	dec04804 	addi	sp,sp,288
   21e98:	f800283a 	ret
   21e9c:	d9002c17 	ldw	r4,176(sp)
   21ea0:	0025cf80 	call	25cf8 <__sinit>
   21ea4:	003f0406 	br	21ab8 <_gp+0xfffdff6c>
   21ea8:	d8802d17 	ldw	r2,180(sp)
   21eac:	d9002d17 	ldw	r4,180(sp)
   21eb0:	10800017 	ldw	r2,0(r2)
   21eb4:	d8803115 	stw	r2,196(sp)
   21eb8:	20800104 	addi	r2,r4,4
   21ebc:	d9003117 	ldw	r4,196(sp)
   21ec0:	203fa716 	blt	r4,zero,21d60 <_gp+0xfffe0214>
   21ec4:	d8802d15 	stw	r2,180(sp)
   21ec8:	ac400007 	ldb	r17,0(r21)
   21ecc:	003f4206 	br	21bd8 <_gp+0xfffe008c>
   21ed0:	ac400007 	ldb	r17,0(r21)
   21ed4:	aac00044 	addi	r11,r21,1
   21ed8:	8a872826 	beq	r17,r10,23b7c <___vfprintf_internal_r+0x2128>
   21edc:	88bff404 	addi	r2,r17,-48
   21ee0:	0009883a 	mov	r4,zero
   21ee4:	30867d36 	bltu	r6,r2,238dc <___vfprintf_internal_r+0x1e88>
   21ee8:	5c400007 	ldb	r17,0(r11)
   21eec:	210002a4 	muli	r4,r4,10
   21ef0:	5d400044 	addi	r21,r11,1
   21ef4:	a817883a 	mov	r11,r21
   21ef8:	2089883a 	add	r4,r4,r2
   21efc:	88bff404 	addi	r2,r17,-48
   21f00:	30bff92e 	bgeu	r6,r2,21ee8 <_gp+0xfffe039c>
   21f04:	2005c916 	blt	r4,zero,2362c <___vfprintf_internal_r+0x1bd8>
   21f08:	d9002915 	stw	r4,164(sp)
   21f0c:	003f3306 	br	21bdc <_gp+0xfffe0090>
   21f10:	94802014 	ori	r18,r18,128
   21f14:	ac400007 	ldb	r17,0(r21)
   21f18:	003f2f06 	br	21bd8 <_gp+0xfffe008c>
   21f1c:	a809883a 	mov	r4,r21
   21f20:	d8003115 	stw	zero,196(sp)
   21f24:	88bff404 	addi	r2,r17,-48
   21f28:	0017883a 	mov	r11,zero
   21f2c:	24400007 	ldb	r17,0(r4)
   21f30:	5ac002a4 	muli	r11,r11,10
   21f34:	ad400044 	addi	r21,r21,1
   21f38:	a809883a 	mov	r4,r21
   21f3c:	12d7883a 	add	r11,r2,r11
   21f40:	88bff404 	addi	r2,r17,-48
   21f44:	30bff92e 	bgeu	r6,r2,21f2c <_gp+0xfffe03e0>
   21f48:	dac03115 	stw	r11,196(sp)
   21f4c:	003f2306 	br	21bdc <_gp+0xfffe0090>
   21f50:	18c03fcc 	andi	r3,r3,255
   21f54:	18072b1e 	bne	r3,zero,23c04 <___vfprintf_internal_r+0x21b0>
   21f58:	94800414 	ori	r18,r18,16
   21f5c:	9080080c 	andi	r2,r18,32
   21f60:	10037b26 	beq	r2,zero,22d50 <___vfprintf_internal_r+0x12fc>
   21f64:	d9402d17 	ldw	r5,180(sp)
   21f68:	28800117 	ldw	r2,4(r5)
   21f6c:	2cc00017 	ldw	r19,0(r5)
   21f70:	29400204 	addi	r5,r5,8
   21f74:	d9402d15 	stw	r5,180(sp)
   21f78:	102d883a 	mov	r22,r2
   21f7c:	10044b16 	blt	r2,zero,230ac <___vfprintf_internal_r+0x1658>
   21f80:	d9402917 	ldw	r5,164(sp)
   21f84:	df002783 	ldbu	fp,158(sp)
   21f88:	2803bc16 	blt	r5,zero,22e7c <___vfprintf_internal_r+0x1428>
   21f8c:	00ffdfc4 	movi	r3,-129
   21f90:	9d84b03a 	or	r2,r19,r22
   21f94:	90e4703a 	and	r18,r18,r3
   21f98:	10017726 	beq	r2,zero,22578 <___vfprintf_internal_r+0xb24>
   21f9c:	b0038326 	beq	r22,zero,22dac <___vfprintf_internal_r+0x1358>
   21fa0:	dc402a15 	stw	r17,168(sp)
   21fa4:	dc001e04 	addi	r16,sp,120
   21fa8:	b023883a 	mov	r17,r22
   21fac:	402d883a 	mov	r22,r8
   21fb0:	9809883a 	mov	r4,r19
   21fb4:	880b883a 	mov	r5,r17
   21fb8:	01800284 	movi	r6,10
   21fbc:	000f883a 	mov	r7,zero
   21fc0:	002a6c40 	call	2a6c4 <__umoddi3>
   21fc4:	10800c04 	addi	r2,r2,48
   21fc8:	843fffc4 	addi	r16,r16,-1
   21fcc:	9809883a 	mov	r4,r19
   21fd0:	880b883a 	mov	r5,r17
   21fd4:	80800005 	stb	r2,0(r16)
   21fd8:	01800284 	movi	r6,10
   21fdc:	000f883a 	mov	r7,zero
   21fe0:	002a14c0 	call	2a14c <__udivdi3>
   21fe4:	1027883a 	mov	r19,r2
   21fe8:	10c4b03a 	or	r2,r2,r3
   21fec:	1823883a 	mov	r17,r3
   21ff0:	103fef1e 	bne	r2,zero,21fb0 <_gp+0xfffe0464>
   21ff4:	d8c02817 	ldw	r3,160(sp)
   21ff8:	dc402a17 	ldw	r17,168(sp)
   21ffc:	b011883a 	mov	r8,r22
   22000:	1c07c83a 	sub	r3,r3,r16
   22004:	d8c02e15 	stw	r3,184(sp)
   22008:	00005906 	br	22170 <___vfprintf_internal_r+0x71c>
   2200c:	18c03fcc 	andi	r3,r3,255
   22010:	1806fa1e 	bne	r3,zero,23bfc <___vfprintf_internal_r+0x21a8>
   22014:	9080020c 	andi	r2,r18,8
   22018:	10048a26 	beq	r2,zero,23244 <___vfprintf_internal_r+0x17f0>
   2201c:	d8c02d17 	ldw	r3,180(sp)
   22020:	d9002d17 	ldw	r4,180(sp)
   22024:	d9402d17 	ldw	r5,180(sp)
   22028:	18c00017 	ldw	r3,0(r3)
   2202c:	21000117 	ldw	r4,4(r4)
   22030:	29400204 	addi	r5,r5,8
   22034:	d8c03615 	stw	r3,216(sp)
   22038:	d9003815 	stw	r4,224(sp)
   2203c:	d9402d15 	stw	r5,180(sp)
   22040:	d9003617 	ldw	r4,216(sp)
   22044:	d9403817 	ldw	r5,224(sp)
   22048:	da003d15 	stw	r8,244(sp)
   2204c:	04000044 	movi	r16,1
   22050:	0027f440 	call	27f44 <__fpclassifyd>
   22054:	da003d17 	ldw	r8,244(sp)
   22058:	14041f1e 	bne	r2,r16,230d8 <___vfprintf_internal_r+0x1684>
   2205c:	d9003617 	ldw	r4,216(sp)
   22060:	d9403817 	ldw	r5,224(sp)
   22064:	000d883a 	mov	r6,zero
   22068:	000f883a 	mov	r7,zero
   2206c:	002c0a80 	call	2c0a8 <__ledf2>
   22070:	da003d17 	ldw	r8,244(sp)
   22074:	1005be16 	blt	r2,zero,23770 <___vfprintf_internal_r+0x1d1c>
   22078:	df002783 	ldbu	fp,158(sp)
   2207c:	008011c4 	movi	r2,71
   22080:	1445330e 	bge	r2,r17,23550 <___vfprintf_internal_r+0x1afc>
   22084:	040000f4 	movhi	r16,3
   22088:	841f1e04 	addi	r16,r16,31864
   2208c:	00c000c4 	movi	r3,3
   22090:	00bfdfc4 	movi	r2,-129
   22094:	d8c02a15 	stw	r3,168(sp)
   22098:	90a4703a 	and	r18,r18,r2
   2209c:	d8c02e15 	stw	r3,184(sp)
   220a0:	d8002915 	stw	zero,164(sp)
   220a4:	d8003215 	stw	zero,200(sp)
   220a8:	00003706 	br	22188 <___vfprintf_internal_r+0x734>
   220ac:	94800214 	ori	r18,r18,8
   220b0:	ac400007 	ldb	r17,0(r21)
   220b4:	003ec806 	br	21bd8 <_gp+0xfffe008c>
   220b8:	18c03fcc 	andi	r3,r3,255
   220bc:	1806db1e 	bne	r3,zero,23c2c <___vfprintf_internal_r+0x21d8>
   220c0:	94800414 	ori	r18,r18,16
   220c4:	9080080c 	andi	r2,r18,32
   220c8:	1002d826 	beq	r2,zero,22c2c <___vfprintf_internal_r+0x11d8>
   220cc:	d9402d17 	ldw	r5,180(sp)
   220d0:	d8c02917 	ldw	r3,164(sp)
   220d4:	d8002785 	stb	zero,158(sp)
   220d8:	28800204 	addi	r2,r5,8
   220dc:	2cc00017 	ldw	r19,0(r5)
   220e0:	2d800117 	ldw	r22,4(r5)
   220e4:	18048f16 	blt	r3,zero,23324 <___vfprintf_internal_r+0x18d0>
   220e8:	013fdfc4 	movi	r4,-129
   220ec:	9d86b03a 	or	r3,r19,r22
   220f0:	d8802d15 	stw	r2,180(sp)
   220f4:	9124703a 	and	r18,r18,r4
   220f8:	1802d91e 	bne	r3,zero,22c60 <___vfprintf_internal_r+0x120c>
   220fc:	d8c02917 	ldw	r3,164(sp)
   22100:	0039883a 	mov	fp,zero
   22104:	1805c326 	beq	r3,zero,23814 <___vfprintf_internal_r+0x1dc0>
   22108:	0027883a 	mov	r19,zero
   2210c:	002d883a 	mov	r22,zero
   22110:	dc001e04 	addi	r16,sp,120
   22114:	9806d0fa 	srli	r3,r19,3
   22118:	b008977a 	slli	r4,r22,29
   2211c:	b02cd0fa 	srli	r22,r22,3
   22120:	9cc001cc 	andi	r19,r19,7
   22124:	98800c04 	addi	r2,r19,48
   22128:	843fffc4 	addi	r16,r16,-1
   2212c:	20e6b03a 	or	r19,r4,r3
   22130:	80800005 	stb	r2,0(r16)
   22134:	9d86b03a 	or	r3,r19,r22
   22138:	183ff61e 	bne	r3,zero,22114 <_gp+0xfffe05c8>
   2213c:	90c0004c 	andi	r3,r18,1
   22140:	18013b26 	beq	r3,zero,22630 <___vfprintf_internal_r+0xbdc>
   22144:	10803fcc 	andi	r2,r2,255
   22148:	1080201c 	xori	r2,r2,128
   2214c:	10bfe004 	addi	r2,r2,-128
   22150:	00c00c04 	movi	r3,48
   22154:	10c13626 	beq	r2,r3,22630 <___vfprintf_internal_r+0xbdc>
   22158:	80ffffc5 	stb	r3,-1(r16)
   2215c:	d8c02817 	ldw	r3,160(sp)
   22160:	80bfffc4 	addi	r2,r16,-1
   22164:	1021883a 	mov	r16,r2
   22168:	1887c83a 	sub	r3,r3,r2
   2216c:	d8c02e15 	stw	r3,184(sp)
   22170:	d8802e17 	ldw	r2,184(sp)
   22174:	d9002917 	ldw	r4,164(sp)
   22178:	1100010e 	bge	r2,r4,22180 <___vfprintf_internal_r+0x72c>
   2217c:	2005883a 	mov	r2,r4
   22180:	d8802a15 	stw	r2,168(sp)
   22184:	d8003215 	stw	zero,200(sp)
   22188:	e7003fcc 	andi	fp,fp,255
   2218c:	e700201c 	xori	fp,fp,128
   22190:	e73fe004 	addi	fp,fp,-128
   22194:	e0000326 	beq	fp,zero,221a4 <___vfprintf_internal_r+0x750>
   22198:	d8c02a17 	ldw	r3,168(sp)
   2219c:	18c00044 	addi	r3,r3,1
   221a0:	d8c02a15 	stw	r3,168(sp)
   221a4:	90c0008c 	andi	r3,r18,2
   221a8:	d8c02b15 	stw	r3,172(sp)
   221ac:	18000326 	beq	r3,zero,221bc <___vfprintf_internal_r+0x768>
   221b0:	d8c02a17 	ldw	r3,168(sp)
   221b4:	18c00084 	addi	r3,r3,2
   221b8:	d8c02a15 	stw	r3,168(sp)
   221bc:	90c0210c 	andi	r3,r18,132
   221c0:	d8c03015 	stw	r3,192(sp)
   221c4:	1801a31e 	bne	r3,zero,22854 <___vfprintf_internal_r+0xe00>
   221c8:	d9003117 	ldw	r4,196(sp)
   221cc:	d8c02a17 	ldw	r3,168(sp)
   221d0:	20e7c83a 	sub	r19,r4,r3
   221d4:	04c19f0e 	bge	zero,r19,22854 <___vfprintf_internal_r+0xe00>
   221d8:	02400404 	movi	r9,16
   221dc:	d8c02017 	ldw	r3,128(sp)
   221e0:	d8801f17 	ldw	r2,124(sp)
   221e4:	4cc50d0e 	bge	r9,r19,2361c <___vfprintf_internal_r+0x1bc8>
   221e8:	014000f4 	movhi	r5,3
   221ec:	295f3184 	addi	r5,r5,31942
   221f0:	dc403b15 	stw	r17,236(sp)
   221f4:	d9403515 	stw	r5,212(sp)
   221f8:	9823883a 	mov	r17,r19
   221fc:	482d883a 	mov	r22,r9
   22200:	9027883a 	mov	r19,r18
   22204:	070001c4 	movi	fp,7
   22208:	8025883a 	mov	r18,r16
   2220c:	dc002c17 	ldw	r16,176(sp)
   22210:	00000306 	br	22220 <___vfprintf_internal_r+0x7cc>
   22214:	8c7ffc04 	addi	r17,r17,-16
   22218:	42000204 	addi	r8,r8,8
   2221c:	b440130e 	bge	r22,r17,2226c <___vfprintf_internal_r+0x818>
   22220:	010000f4 	movhi	r4,3
   22224:	18c00404 	addi	r3,r3,16
   22228:	10800044 	addi	r2,r2,1
   2222c:	211f3184 	addi	r4,r4,31942
   22230:	41000015 	stw	r4,0(r8)
   22234:	45800115 	stw	r22,4(r8)
   22238:	d8c02015 	stw	r3,128(sp)
   2223c:	d8801f15 	stw	r2,124(sp)
   22240:	e0bff40e 	bge	fp,r2,22214 <_gp+0xfffe06c8>
   22244:	d9801e04 	addi	r6,sp,120
   22248:	b80b883a 	mov	r5,r23
   2224c:	8009883a 	mov	r4,r16
   22250:	00282cc0 	call	282cc <__sprint_r>
   22254:	103f011e 	bne	r2,zero,21e5c <_gp+0xfffe0310>
   22258:	8c7ffc04 	addi	r17,r17,-16
   2225c:	d8c02017 	ldw	r3,128(sp)
   22260:	d8801f17 	ldw	r2,124(sp)
   22264:	da000404 	addi	r8,sp,16
   22268:	b47fed16 	blt	r22,r17,22220 <_gp+0xfffe06d4>
   2226c:	9021883a 	mov	r16,r18
   22270:	9825883a 	mov	r18,r19
   22274:	8827883a 	mov	r19,r17
   22278:	dc403b17 	ldw	r17,236(sp)
   2227c:	d9403517 	ldw	r5,212(sp)
   22280:	98c7883a 	add	r3,r19,r3
   22284:	10800044 	addi	r2,r2,1
   22288:	41400015 	stw	r5,0(r8)
   2228c:	44c00115 	stw	r19,4(r8)
   22290:	d8c02015 	stw	r3,128(sp)
   22294:	d8801f15 	stw	r2,124(sp)
   22298:	010001c4 	movi	r4,7
   2229c:	2082a316 	blt	r4,r2,22d2c <___vfprintf_internal_r+0x12d8>
   222a0:	df002787 	ldb	fp,158(sp)
   222a4:	42000204 	addi	r8,r8,8
   222a8:	e0000c26 	beq	fp,zero,222dc <___vfprintf_internal_r+0x888>
   222ac:	d8801f17 	ldw	r2,124(sp)
   222b0:	d9002784 	addi	r4,sp,158
   222b4:	18c00044 	addi	r3,r3,1
   222b8:	10800044 	addi	r2,r2,1
   222bc:	41000015 	stw	r4,0(r8)
   222c0:	01000044 	movi	r4,1
   222c4:	41000115 	stw	r4,4(r8)
   222c8:	d8c02015 	stw	r3,128(sp)
   222cc:	d8801f15 	stw	r2,124(sp)
   222d0:	010001c4 	movi	r4,7
   222d4:	20823c16 	blt	r4,r2,22bc8 <___vfprintf_internal_r+0x1174>
   222d8:	42000204 	addi	r8,r8,8
   222dc:	d8802b17 	ldw	r2,172(sp)
   222e0:	10000c26 	beq	r2,zero,22314 <___vfprintf_internal_r+0x8c0>
   222e4:	d8801f17 	ldw	r2,124(sp)
   222e8:	d9002704 	addi	r4,sp,156
   222ec:	18c00084 	addi	r3,r3,2
   222f0:	10800044 	addi	r2,r2,1
   222f4:	41000015 	stw	r4,0(r8)
   222f8:	01000084 	movi	r4,2
   222fc:	41000115 	stw	r4,4(r8)
   22300:	d8c02015 	stw	r3,128(sp)
   22304:	d8801f15 	stw	r2,124(sp)
   22308:	010001c4 	movi	r4,7
   2230c:	20823616 	blt	r4,r2,22be8 <___vfprintf_internal_r+0x1194>
   22310:	42000204 	addi	r8,r8,8
   22314:	d9003017 	ldw	r4,192(sp)
   22318:	00802004 	movi	r2,128
   2231c:	20819926 	beq	r4,r2,22984 <___vfprintf_internal_r+0xf30>
   22320:	d9402917 	ldw	r5,164(sp)
   22324:	d8802e17 	ldw	r2,184(sp)
   22328:	28adc83a 	sub	r22,r5,r2
   2232c:	0580310e 	bge	zero,r22,223f4 <___vfprintf_internal_r+0x9a0>
   22330:	07000404 	movi	fp,16
   22334:	d8801f17 	ldw	r2,124(sp)
   22338:	e584140e 	bge	fp,r22,2338c <___vfprintf_internal_r+0x1938>
   2233c:	014000f4 	movhi	r5,3
   22340:	295f2d84 	addi	r5,r5,31926
   22344:	dc402915 	stw	r17,164(sp)
   22348:	d9402b15 	stw	r5,172(sp)
   2234c:	b023883a 	mov	r17,r22
   22350:	04c001c4 	movi	r19,7
   22354:	a82d883a 	mov	r22,r21
   22358:	902b883a 	mov	r21,r18
   2235c:	8025883a 	mov	r18,r16
   22360:	dc002c17 	ldw	r16,176(sp)
   22364:	00000306 	br	22374 <___vfprintf_internal_r+0x920>
   22368:	8c7ffc04 	addi	r17,r17,-16
   2236c:	42000204 	addi	r8,r8,8
   22370:	e440110e 	bge	fp,r17,223b8 <___vfprintf_internal_r+0x964>
   22374:	18c00404 	addi	r3,r3,16
   22378:	10800044 	addi	r2,r2,1
   2237c:	45000015 	stw	r20,0(r8)
   22380:	47000115 	stw	fp,4(r8)
   22384:	d8c02015 	stw	r3,128(sp)
   22388:	d8801f15 	stw	r2,124(sp)
   2238c:	98bff60e 	bge	r19,r2,22368 <_gp+0xfffe081c>
   22390:	d9801e04 	addi	r6,sp,120
   22394:	b80b883a 	mov	r5,r23
   22398:	8009883a 	mov	r4,r16
   2239c:	00282cc0 	call	282cc <__sprint_r>
   223a0:	103eae1e 	bne	r2,zero,21e5c <_gp+0xfffe0310>
   223a4:	8c7ffc04 	addi	r17,r17,-16
   223a8:	d8c02017 	ldw	r3,128(sp)
   223ac:	d8801f17 	ldw	r2,124(sp)
   223b0:	da000404 	addi	r8,sp,16
   223b4:	e47fef16 	blt	fp,r17,22374 <_gp+0xfffe0828>
   223b8:	9021883a 	mov	r16,r18
   223bc:	a825883a 	mov	r18,r21
   223c0:	b02b883a 	mov	r21,r22
   223c4:	882d883a 	mov	r22,r17
   223c8:	dc402917 	ldw	r17,164(sp)
   223cc:	d9002b17 	ldw	r4,172(sp)
   223d0:	1d87883a 	add	r3,r3,r22
   223d4:	10800044 	addi	r2,r2,1
   223d8:	41000015 	stw	r4,0(r8)
   223dc:	45800115 	stw	r22,4(r8)
   223e0:	d8c02015 	stw	r3,128(sp)
   223e4:	d8801f15 	stw	r2,124(sp)
   223e8:	010001c4 	movi	r4,7
   223ec:	2081ee16 	blt	r4,r2,22ba8 <___vfprintf_internal_r+0x1154>
   223f0:	42000204 	addi	r8,r8,8
   223f4:	9080400c 	andi	r2,r18,256
   223f8:	1001181e 	bne	r2,zero,2285c <___vfprintf_internal_r+0xe08>
   223fc:	d9402e17 	ldw	r5,184(sp)
   22400:	d8801f17 	ldw	r2,124(sp)
   22404:	44000015 	stw	r16,0(r8)
   22408:	1947883a 	add	r3,r3,r5
   2240c:	10800044 	addi	r2,r2,1
   22410:	41400115 	stw	r5,4(r8)
   22414:	d8c02015 	stw	r3,128(sp)
   22418:	d8801f15 	stw	r2,124(sp)
   2241c:	010001c4 	movi	r4,7
   22420:	2081d316 	blt	r4,r2,22b70 <___vfprintf_internal_r+0x111c>
   22424:	42000204 	addi	r8,r8,8
   22428:	9480010c 	andi	r18,r18,4
   2242c:	90003226 	beq	r18,zero,224f8 <___vfprintf_internal_r+0xaa4>
   22430:	d9403117 	ldw	r5,196(sp)
   22434:	d8802a17 	ldw	r2,168(sp)
   22438:	28a1c83a 	sub	r16,r5,r2
   2243c:	04002e0e 	bge	zero,r16,224f8 <___vfprintf_internal_r+0xaa4>
   22440:	04400404 	movi	r17,16
   22444:	d8801f17 	ldw	r2,124(sp)
   22448:	8c04a20e 	bge	r17,r16,236d4 <___vfprintf_internal_r+0x1c80>
   2244c:	014000f4 	movhi	r5,3
   22450:	295f3184 	addi	r5,r5,31942
   22454:	d9403515 	stw	r5,212(sp)
   22458:	048001c4 	movi	r18,7
   2245c:	dcc02c17 	ldw	r19,176(sp)
   22460:	00000306 	br	22470 <___vfprintf_internal_r+0xa1c>
   22464:	843ffc04 	addi	r16,r16,-16
   22468:	42000204 	addi	r8,r8,8
   2246c:	8c00130e 	bge	r17,r16,224bc <___vfprintf_internal_r+0xa68>
   22470:	010000f4 	movhi	r4,3
   22474:	18c00404 	addi	r3,r3,16
   22478:	10800044 	addi	r2,r2,1
   2247c:	211f3184 	addi	r4,r4,31942
   22480:	41000015 	stw	r4,0(r8)
   22484:	44400115 	stw	r17,4(r8)
   22488:	d8c02015 	stw	r3,128(sp)
   2248c:	d8801f15 	stw	r2,124(sp)
   22490:	90bff40e 	bge	r18,r2,22464 <_gp+0xfffe0918>
   22494:	d9801e04 	addi	r6,sp,120
   22498:	b80b883a 	mov	r5,r23
   2249c:	9809883a 	mov	r4,r19
   224a0:	00282cc0 	call	282cc <__sprint_r>
   224a4:	103e6d1e 	bne	r2,zero,21e5c <_gp+0xfffe0310>
   224a8:	843ffc04 	addi	r16,r16,-16
   224ac:	d8c02017 	ldw	r3,128(sp)
   224b0:	d8801f17 	ldw	r2,124(sp)
   224b4:	da000404 	addi	r8,sp,16
   224b8:	8c3fed16 	blt	r17,r16,22470 <_gp+0xfffe0924>
   224bc:	d9403517 	ldw	r5,212(sp)
   224c0:	1c07883a 	add	r3,r3,r16
   224c4:	10800044 	addi	r2,r2,1
   224c8:	41400015 	stw	r5,0(r8)
   224cc:	44000115 	stw	r16,4(r8)
   224d0:	d8c02015 	stw	r3,128(sp)
   224d4:	d8801f15 	stw	r2,124(sp)
   224d8:	010001c4 	movi	r4,7
   224dc:	2080060e 	bge	r4,r2,224f8 <___vfprintf_internal_r+0xaa4>
   224e0:	d9002c17 	ldw	r4,176(sp)
   224e4:	d9801e04 	addi	r6,sp,120
   224e8:	b80b883a 	mov	r5,r23
   224ec:	00282cc0 	call	282cc <__sprint_r>
   224f0:	103e5a1e 	bne	r2,zero,21e5c <_gp+0xfffe0310>
   224f4:	d8c02017 	ldw	r3,128(sp)
   224f8:	d8803117 	ldw	r2,196(sp)
   224fc:	d9002a17 	ldw	r4,168(sp)
   22500:	1100010e 	bge	r2,r4,22508 <___vfprintf_internal_r+0xab4>
   22504:	2005883a 	mov	r2,r4
   22508:	d9402f17 	ldw	r5,188(sp)
   2250c:	288b883a 	add	r5,r5,r2
   22510:	d9402f15 	stw	r5,188(sp)
   22514:	18019e1e 	bne	r3,zero,22b90 <___vfprintf_internal_r+0x113c>
   22518:	a8800007 	ldb	r2,0(r21)
   2251c:	d8001f15 	stw	zero,124(sp)
   22520:	da000404 	addi	r8,sp,16
   22524:	103d851e 	bne	r2,zero,21b3c <_gp+0xfffdfff0>
   22528:	a821883a 	mov	r16,r21
   2252c:	003d9b06 	br	21b9c <_gp+0xfffe0050>
   22530:	18c03fcc 	andi	r3,r3,255
   22534:	1805c11e 	bne	r3,zero,23c3c <___vfprintf_internal_r+0x21e8>
   22538:	94800414 	ori	r18,r18,16
   2253c:	9080080c 	andi	r2,r18,32
   22540:	10020c26 	beq	r2,zero,22d74 <___vfprintf_internal_r+0x1320>
   22544:	d8802d17 	ldw	r2,180(sp)
   22548:	d9002917 	ldw	r4,164(sp)
   2254c:	d8002785 	stb	zero,158(sp)
   22550:	10c00204 	addi	r3,r2,8
   22554:	14c00017 	ldw	r19,0(r2)
   22558:	15800117 	ldw	r22,4(r2)
   2255c:	20040f16 	blt	r4,zero,2359c <___vfprintf_internal_r+0x1b48>
   22560:	013fdfc4 	movi	r4,-129
   22564:	9d84b03a 	or	r2,r19,r22
   22568:	d8c02d15 	stw	r3,180(sp)
   2256c:	9124703a 	and	r18,r18,r4
   22570:	0039883a 	mov	fp,zero
   22574:	103e891e 	bne	r2,zero,21f9c <_gp+0xfffe0450>
   22578:	d9002917 	ldw	r4,164(sp)
   2257c:	2002c11e 	bne	r4,zero,23084 <___vfprintf_internal_r+0x1630>
   22580:	d8002915 	stw	zero,164(sp)
   22584:	d8002e15 	stw	zero,184(sp)
   22588:	dc001e04 	addi	r16,sp,120
   2258c:	003ef806 	br	22170 <_gp+0xfffe0624>
   22590:	18c03fcc 	andi	r3,r3,255
   22594:	18059d1e 	bne	r3,zero,23c0c <___vfprintf_internal_r+0x21b8>
   22598:	014000f4 	movhi	r5,3
   2259c:	295f2104 	addi	r5,r5,31876
   225a0:	d9403915 	stw	r5,228(sp)
   225a4:	9080080c 	andi	r2,r18,32
   225a8:	10005226 	beq	r2,zero,226f4 <___vfprintf_internal_r+0xca0>
   225ac:	d8802d17 	ldw	r2,180(sp)
   225b0:	14c00017 	ldw	r19,0(r2)
   225b4:	15800117 	ldw	r22,4(r2)
   225b8:	10800204 	addi	r2,r2,8
   225bc:	d8802d15 	stw	r2,180(sp)
   225c0:	9080004c 	andi	r2,r18,1
   225c4:	10019026 	beq	r2,zero,22c08 <___vfprintf_internal_r+0x11b4>
   225c8:	9d84b03a 	or	r2,r19,r22
   225cc:	10036926 	beq	r2,zero,23374 <___vfprintf_internal_r+0x1920>
   225d0:	d8c02917 	ldw	r3,164(sp)
   225d4:	00800c04 	movi	r2,48
   225d8:	d8802705 	stb	r2,156(sp)
   225dc:	dc402745 	stb	r17,157(sp)
   225e0:	d8002785 	stb	zero,158(sp)
   225e4:	90800094 	ori	r2,r18,2
   225e8:	18045d16 	blt	r3,zero,23760 <___vfprintf_internal_r+0x1d0c>
   225ec:	00bfdfc4 	movi	r2,-129
   225f0:	90a4703a 	and	r18,r18,r2
   225f4:	94800094 	ori	r18,r18,2
   225f8:	0039883a 	mov	fp,zero
   225fc:	d9003917 	ldw	r4,228(sp)
   22600:	dc001e04 	addi	r16,sp,120
   22604:	988003cc 	andi	r2,r19,15
   22608:	b006973a 	slli	r3,r22,28
   2260c:	2085883a 	add	r2,r4,r2
   22610:	9826d13a 	srli	r19,r19,4
   22614:	10800003 	ldbu	r2,0(r2)
   22618:	b02cd13a 	srli	r22,r22,4
   2261c:	843fffc4 	addi	r16,r16,-1
   22620:	1ce6b03a 	or	r19,r3,r19
   22624:	80800005 	stb	r2,0(r16)
   22628:	9d84b03a 	or	r2,r19,r22
   2262c:	103ff51e 	bne	r2,zero,22604 <_gp+0xfffe0ab8>
   22630:	d8c02817 	ldw	r3,160(sp)
   22634:	1c07c83a 	sub	r3,r3,r16
   22638:	d8c02e15 	stw	r3,184(sp)
   2263c:	003ecc06 	br	22170 <_gp+0xfffe0624>
   22640:	18c03fcc 	andi	r3,r3,255
   22644:	183e9f26 	beq	r3,zero,220c4 <_gp+0xfffe0578>
   22648:	d9c02785 	stb	r7,158(sp)
   2264c:	003e9d06 	br	220c4 <_gp+0xfffe0578>
   22650:	00c00044 	movi	r3,1
   22654:	01c00ac4 	movi	r7,43
   22658:	ac400007 	ldb	r17,0(r21)
   2265c:	003d5e06 	br	21bd8 <_gp+0xfffe008c>
   22660:	94800814 	ori	r18,r18,32
   22664:	ac400007 	ldb	r17,0(r21)
   22668:	003d5b06 	br	21bd8 <_gp+0xfffe008c>
   2266c:	d8c02d17 	ldw	r3,180(sp)
   22670:	d8002785 	stb	zero,158(sp)
   22674:	1c000017 	ldw	r16,0(r3)
   22678:	1cc00104 	addi	r19,r3,4
   2267c:	80041926 	beq	r16,zero,236e4 <___vfprintf_internal_r+0x1c90>
   22680:	d9002917 	ldw	r4,164(sp)
   22684:	2003d016 	blt	r4,zero,235c8 <___vfprintf_internal_r+0x1b74>
   22688:	200d883a 	mov	r6,r4
   2268c:	000b883a 	mov	r5,zero
   22690:	8009883a 	mov	r4,r16
   22694:	da003d15 	stw	r8,244(sp)
   22698:	0026a580 	call	26a58 <memchr>
   2269c:	da003d17 	ldw	r8,244(sp)
   226a0:	10045426 	beq	r2,zero,237f4 <___vfprintf_internal_r+0x1da0>
   226a4:	1405c83a 	sub	r2,r2,r16
   226a8:	d8802e15 	stw	r2,184(sp)
   226ac:	1003cc16 	blt	r2,zero,235e0 <___vfprintf_internal_r+0x1b8c>
   226b0:	df002783 	ldbu	fp,158(sp)
   226b4:	d8802a15 	stw	r2,168(sp)
   226b8:	dcc02d15 	stw	r19,180(sp)
   226bc:	d8002915 	stw	zero,164(sp)
   226c0:	d8003215 	stw	zero,200(sp)
   226c4:	003eb006 	br	22188 <_gp+0xfffe063c>
   226c8:	18c03fcc 	andi	r3,r3,255
   226cc:	183f9b26 	beq	r3,zero,2253c <_gp+0xfffe09f0>
   226d0:	d9c02785 	stb	r7,158(sp)
   226d4:	003f9906 	br	2253c <_gp+0xfffe09f0>
   226d8:	18c03fcc 	andi	r3,r3,255
   226dc:	1805551e 	bne	r3,zero,23c34 <___vfprintf_internal_r+0x21e0>
   226e0:	014000f4 	movhi	r5,3
   226e4:	295f2604 	addi	r5,r5,31896
   226e8:	d9403915 	stw	r5,228(sp)
   226ec:	9080080c 	andi	r2,r18,32
   226f0:	103fae1e 	bne	r2,zero,225ac <_gp+0xfffe0a60>
   226f4:	9080040c 	andi	r2,r18,16
   226f8:	1002de26 	beq	r2,zero,23274 <___vfprintf_internal_r+0x1820>
   226fc:	d8c02d17 	ldw	r3,180(sp)
   22700:	002d883a 	mov	r22,zero
   22704:	1cc00017 	ldw	r19,0(r3)
   22708:	18c00104 	addi	r3,r3,4
   2270c:	d8c02d15 	stw	r3,180(sp)
   22710:	003fab06 	br	225c0 <_gp+0xfffe0a74>
   22714:	38803fcc 	andi	r2,r7,255
   22718:	1080201c 	xori	r2,r2,128
   2271c:	10bfe004 	addi	r2,r2,-128
   22720:	1002d21e 	bne	r2,zero,2326c <___vfprintf_internal_r+0x1818>
   22724:	00c00044 	movi	r3,1
   22728:	01c00804 	movi	r7,32
   2272c:	ac400007 	ldb	r17,0(r21)
   22730:	003d2906 	br	21bd8 <_gp+0xfffe008c>
   22734:	94800054 	ori	r18,r18,1
   22738:	ac400007 	ldb	r17,0(r21)
   2273c:	003d2606 	br	21bd8 <_gp+0xfffe008c>
   22740:	18c03fcc 	andi	r3,r3,255
   22744:	183e0526 	beq	r3,zero,21f5c <_gp+0xfffe0410>
   22748:	d9c02785 	stb	r7,158(sp)
   2274c:	003e0306 	br	21f5c <_gp+0xfffe0410>
   22750:	94801014 	ori	r18,r18,64
   22754:	ac400007 	ldb	r17,0(r21)
   22758:	003d1f06 	br	21bd8 <_gp+0xfffe008c>
   2275c:	ac400007 	ldb	r17,0(r21)
   22760:	8a438726 	beq	r17,r9,23580 <___vfprintf_internal_r+0x1b2c>
   22764:	94800414 	ori	r18,r18,16
   22768:	003d1b06 	br	21bd8 <_gp+0xfffe008c>
   2276c:	18c03fcc 	andi	r3,r3,255
   22770:	1805341e 	bne	r3,zero,23c44 <___vfprintf_internal_r+0x21f0>
   22774:	9080080c 	andi	r2,r18,32
   22778:	1002cd26 	beq	r2,zero,232b0 <___vfprintf_internal_r+0x185c>
   2277c:	d9402d17 	ldw	r5,180(sp)
   22780:	d9002f17 	ldw	r4,188(sp)
   22784:	28800017 	ldw	r2,0(r5)
   22788:	2007d7fa 	srai	r3,r4,31
   2278c:	29400104 	addi	r5,r5,4
   22790:	d9402d15 	stw	r5,180(sp)
   22794:	11000015 	stw	r4,0(r2)
   22798:	10c00115 	stw	r3,4(r2)
   2279c:	003ce506 	br	21b34 <_gp+0xfffdffe8>
   227a0:	d8c02d17 	ldw	r3,180(sp)
   227a4:	d9002d17 	ldw	r4,180(sp)
   227a8:	d8002785 	stb	zero,158(sp)
   227ac:	18800017 	ldw	r2,0(r3)
   227b0:	21000104 	addi	r4,r4,4
   227b4:	00c00044 	movi	r3,1
   227b8:	d8c02a15 	stw	r3,168(sp)
   227bc:	d8801405 	stb	r2,80(sp)
   227c0:	d9002d15 	stw	r4,180(sp)
   227c4:	d8c02e15 	stw	r3,184(sp)
   227c8:	d8002915 	stw	zero,164(sp)
   227cc:	d8003215 	stw	zero,200(sp)
   227d0:	dc001404 	addi	r16,sp,80
   227d4:	0039883a 	mov	fp,zero
   227d8:	003e7206 	br	221a4 <_gp+0xfffe0658>
   227dc:	010000f4 	movhi	r4,3
   227e0:	211f2604 	addi	r4,r4,31896
   227e4:	0039883a 	mov	fp,zero
   227e8:	d9003915 	stw	r4,228(sp)
   227ec:	04401e04 	movi	r17,120
   227f0:	003f8206 	br	225fc <_gp+0xfffe0ab0>
   227f4:	18c03fcc 	andi	r3,r3,255
   227f8:	1805061e 	bne	r3,zero,23c14 <___vfprintf_internal_r+0x21c0>
   227fc:	883d9126 	beq	r17,zero,21e44 <_gp+0xfffe02f8>
   22800:	00c00044 	movi	r3,1
   22804:	d8c02a15 	stw	r3,168(sp)
   22808:	dc401405 	stb	r17,80(sp)
   2280c:	d8002785 	stb	zero,158(sp)
   22810:	003fec06 	br	227c4 <_gp+0xfffe0c78>
   22814:	014000f4 	movhi	r5,3
   22818:	295f2604 	addi	r5,r5,31896
   2281c:	d9403915 	stw	r5,228(sp)
   22820:	d8c02d15 	stw	r3,180(sp)
   22824:	1025883a 	mov	r18,r2
   22828:	04401e04 	movi	r17,120
   2282c:	9d84b03a 	or	r2,r19,r22
   22830:	1000fc1e 	bne	r2,zero,22c24 <___vfprintf_internal_r+0x11d0>
   22834:	0039883a 	mov	fp,zero
   22838:	00800084 	movi	r2,2
   2283c:	10803fcc 	andi	r2,r2,255
   22840:	00c00044 	movi	r3,1
   22844:	10c20f26 	beq	r2,r3,23084 <___vfprintf_internal_r+0x1630>
   22848:	00c00084 	movi	r3,2
   2284c:	10fd6326 	beq	r2,r3,21ddc <_gp+0xfffe0290>
   22850:	003e2d06 	br	22108 <_gp+0xfffe05bc>
   22854:	d8c02017 	ldw	r3,128(sp)
   22858:	003e9306 	br	222a8 <_gp+0xfffe075c>
   2285c:	00801944 	movi	r2,101
   22860:	14407e0e 	bge	r2,r17,22a5c <___vfprintf_internal_r+0x1008>
   22864:	d9003617 	ldw	r4,216(sp)
   22868:	d9403817 	ldw	r5,224(sp)
   2286c:	000d883a 	mov	r6,zero
   22870:	000f883a 	mov	r7,zero
   22874:	d8c03c15 	stw	r3,240(sp)
   22878:	da003d15 	stw	r8,244(sp)
   2287c:	002bf440 	call	2bf44 <__eqdf2>
   22880:	d8c03c17 	ldw	r3,240(sp)
   22884:	da003d17 	ldw	r8,244(sp)
   22888:	1000f71e 	bne	r2,zero,22c68 <___vfprintf_internal_r+0x1214>
   2288c:	d8801f17 	ldw	r2,124(sp)
   22890:	010000f4 	movhi	r4,3
   22894:	211f2d04 	addi	r4,r4,31924
   22898:	18c00044 	addi	r3,r3,1
   2289c:	10800044 	addi	r2,r2,1
   228a0:	41000015 	stw	r4,0(r8)
   228a4:	01000044 	movi	r4,1
   228a8:	41000115 	stw	r4,4(r8)
   228ac:	d8c02015 	stw	r3,128(sp)
   228b0:	d8801f15 	stw	r2,124(sp)
   228b4:	010001c4 	movi	r4,7
   228b8:	2082b816 	blt	r4,r2,2339c <___vfprintf_internal_r+0x1948>
   228bc:	42000204 	addi	r8,r8,8
   228c0:	d8802617 	ldw	r2,152(sp)
   228c4:	d9403317 	ldw	r5,204(sp)
   228c8:	11400216 	blt	r2,r5,228d4 <___vfprintf_internal_r+0xe80>
   228cc:	9080004c 	andi	r2,r18,1
   228d0:	103ed526 	beq	r2,zero,22428 <_gp+0xfffe08dc>
   228d4:	d8803717 	ldw	r2,220(sp)
   228d8:	d9003417 	ldw	r4,208(sp)
   228dc:	d9403717 	ldw	r5,220(sp)
   228e0:	1887883a 	add	r3,r3,r2
   228e4:	d8801f17 	ldw	r2,124(sp)
   228e8:	41000015 	stw	r4,0(r8)
   228ec:	41400115 	stw	r5,4(r8)
   228f0:	10800044 	addi	r2,r2,1
   228f4:	d8c02015 	stw	r3,128(sp)
   228f8:	d8801f15 	stw	r2,124(sp)
   228fc:	010001c4 	movi	r4,7
   22900:	20832916 	blt	r4,r2,235a8 <___vfprintf_internal_r+0x1b54>
   22904:	42000204 	addi	r8,r8,8
   22908:	d8803317 	ldw	r2,204(sp)
   2290c:	143fffc4 	addi	r16,r2,-1
   22910:	043ec50e 	bge	zero,r16,22428 <_gp+0xfffe08dc>
   22914:	04400404 	movi	r17,16
   22918:	d8801f17 	ldw	r2,124(sp)
   2291c:	8c00880e 	bge	r17,r16,22b40 <___vfprintf_internal_r+0x10ec>
   22920:	014000f4 	movhi	r5,3
   22924:	295f2d84 	addi	r5,r5,31926
   22928:	d9402b15 	stw	r5,172(sp)
   2292c:	058001c4 	movi	r22,7
   22930:	dcc02c17 	ldw	r19,176(sp)
   22934:	00000306 	br	22944 <___vfprintf_internal_r+0xef0>
   22938:	42000204 	addi	r8,r8,8
   2293c:	843ffc04 	addi	r16,r16,-16
   22940:	8c00820e 	bge	r17,r16,22b4c <___vfprintf_internal_r+0x10f8>
   22944:	18c00404 	addi	r3,r3,16
   22948:	10800044 	addi	r2,r2,1
   2294c:	45000015 	stw	r20,0(r8)
   22950:	44400115 	stw	r17,4(r8)
   22954:	d8c02015 	stw	r3,128(sp)
   22958:	d8801f15 	stw	r2,124(sp)
   2295c:	b0bff60e 	bge	r22,r2,22938 <_gp+0xfffe0dec>
   22960:	d9801e04 	addi	r6,sp,120
   22964:	b80b883a 	mov	r5,r23
   22968:	9809883a 	mov	r4,r19
   2296c:	00282cc0 	call	282cc <__sprint_r>
   22970:	103d3a1e 	bne	r2,zero,21e5c <_gp+0xfffe0310>
   22974:	d8c02017 	ldw	r3,128(sp)
   22978:	d8801f17 	ldw	r2,124(sp)
   2297c:	da000404 	addi	r8,sp,16
   22980:	003fee06 	br	2293c <_gp+0xfffe0df0>
   22984:	d9403117 	ldw	r5,196(sp)
   22988:	d8802a17 	ldw	r2,168(sp)
   2298c:	28adc83a 	sub	r22,r5,r2
   22990:	05be630e 	bge	zero,r22,22320 <_gp+0xfffe07d4>
   22994:	07000404 	movi	fp,16
   22998:	d8801f17 	ldw	r2,124(sp)
   2299c:	e5838f0e 	bge	fp,r22,237dc <___vfprintf_internal_r+0x1d88>
   229a0:	014000f4 	movhi	r5,3
   229a4:	295f2d84 	addi	r5,r5,31926
   229a8:	dc403015 	stw	r17,192(sp)
   229ac:	d9402b15 	stw	r5,172(sp)
   229b0:	b023883a 	mov	r17,r22
   229b4:	04c001c4 	movi	r19,7
   229b8:	a82d883a 	mov	r22,r21
   229bc:	902b883a 	mov	r21,r18
   229c0:	8025883a 	mov	r18,r16
   229c4:	dc002c17 	ldw	r16,176(sp)
   229c8:	00000306 	br	229d8 <___vfprintf_internal_r+0xf84>
   229cc:	8c7ffc04 	addi	r17,r17,-16
   229d0:	42000204 	addi	r8,r8,8
   229d4:	e440110e 	bge	fp,r17,22a1c <___vfprintf_internal_r+0xfc8>
   229d8:	18c00404 	addi	r3,r3,16
   229dc:	10800044 	addi	r2,r2,1
   229e0:	45000015 	stw	r20,0(r8)
   229e4:	47000115 	stw	fp,4(r8)
   229e8:	d8c02015 	stw	r3,128(sp)
   229ec:	d8801f15 	stw	r2,124(sp)
   229f0:	98bff60e 	bge	r19,r2,229cc <_gp+0xfffe0e80>
   229f4:	d9801e04 	addi	r6,sp,120
   229f8:	b80b883a 	mov	r5,r23
   229fc:	8009883a 	mov	r4,r16
   22a00:	00282cc0 	call	282cc <__sprint_r>
   22a04:	103d151e 	bne	r2,zero,21e5c <_gp+0xfffe0310>
   22a08:	8c7ffc04 	addi	r17,r17,-16
   22a0c:	d8c02017 	ldw	r3,128(sp)
   22a10:	d8801f17 	ldw	r2,124(sp)
   22a14:	da000404 	addi	r8,sp,16
   22a18:	e47fef16 	blt	fp,r17,229d8 <_gp+0xfffe0e8c>
   22a1c:	9021883a 	mov	r16,r18
   22a20:	a825883a 	mov	r18,r21
   22a24:	b02b883a 	mov	r21,r22
   22a28:	882d883a 	mov	r22,r17
   22a2c:	dc403017 	ldw	r17,192(sp)
   22a30:	d9002b17 	ldw	r4,172(sp)
   22a34:	1d87883a 	add	r3,r3,r22
   22a38:	10800044 	addi	r2,r2,1
   22a3c:	41000015 	stw	r4,0(r8)
   22a40:	45800115 	stw	r22,4(r8)
   22a44:	d8c02015 	stw	r3,128(sp)
   22a48:	d8801f15 	stw	r2,124(sp)
   22a4c:	010001c4 	movi	r4,7
   22a50:	20818e16 	blt	r4,r2,2308c <___vfprintf_internal_r+0x1638>
   22a54:	42000204 	addi	r8,r8,8
   22a58:	003e3106 	br	22320 <_gp+0xfffe07d4>
   22a5c:	d9403317 	ldw	r5,204(sp)
   22a60:	00800044 	movi	r2,1
   22a64:	18c00044 	addi	r3,r3,1
   22a68:	1141530e 	bge	r2,r5,22fb8 <___vfprintf_internal_r+0x1564>
   22a6c:	dc401f17 	ldw	r17,124(sp)
   22a70:	00800044 	movi	r2,1
   22a74:	40800115 	stw	r2,4(r8)
   22a78:	8c400044 	addi	r17,r17,1
   22a7c:	44000015 	stw	r16,0(r8)
   22a80:	d8c02015 	stw	r3,128(sp)
   22a84:	dc401f15 	stw	r17,124(sp)
   22a88:	008001c4 	movi	r2,7
   22a8c:	14416b16 	blt	r2,r17,2303c <___vfprintf_internal_r+0x15e8>
   22a90:	42000204 	addi	r8,r8,8
   22a94:	d8803717 	ldw	r2,220(sp)
   22a98:	d9003417 	ldw	r4,208(sp)
   22a9c:	8c400044 	addi	r17,r17,1
   22aa0:	10c7883a 	add	r3,r2,r3
   22aa4:	40800115 	stw	r2,4(r8)
   22aa8:	41000015 	stw	r4,0(r8)
   22aac:	d8c02015 	stw	r3,128(sp)
   22ab0:	dc401f15 	stw	r17,124(sp)
   22ab4:	008001c4 	movi	r2,7
   22ab8:	14416916 	blt	r2,r17,23060 <___vfprintf_internal_r+0x160c>
   22abc:	45800204 	addi	r22,r8,8
   22ac0:	d9003617 	ldw	r4,216(sp)
   22ac4:	d9403817 	ldw	r5,224(sp)
   22ac8:	000d883a 	mov	r6,zero
   22acc:	000f883a 	mov	r7,zero
   22ad0:	d8c03c15 	stw	r3,240(sp)
   22ad4:	002bf440 	call	2bf44 <__eqdf2>
   22ad8:	d8c03c17 	ldw	r3,240(sp)
   22adc:	1000bc26 	beq	r2,zero,22dd0 <___vfprintf_internal_r+0x137c>
   22ae0:	d9403317 	ldw	r5,204(sp)
   22ae4:	84000044 	addi	r16,r16,1
   22ae8:	8c400044 	addi	r17,r17,1
   22aec:	28bfffc4 	addi	r2,r5,-1
   22af0:	1887883a 	add	r3,r3,r2
   22af4:	b0800115 	stw	r2,4(r22)
   22af8:	b4000015 	stw	r16,0(r22)
   22afc:	d8c02015 	stw	r3,128(sp)
   22b00:	dc401f15 	stw	r17,124(sp)
   22b04:	008001c4 	movi	r2,7
   22b08:	14414316 	blt	r2,r17,23018 <___vfprintf_internal_r+0x15c4>
   22b0c:	b5800204 	addi	r22,r22,8
   22b10:	d9003a17 	ldw	r4,232(sp)
   22b14:	df0022c4 	addi	fp,sp,139
   22b18:	8c400044 	addi	r17,r17,1
   22b1c:	20c7883a 	add	r3,r4,r3
   22b20:	b7000015 	stw	fp,0(r22)
   22b24:	b1000115 	stw	r4,4(r22)
   22b28:	d8c02015 	stw	r3,128(sp)
   22b2c:	dc401f15 	stw	r17,124(sp)
   22b30:	008001c4 	movi	r2,7
   22b34:	14400e16 	blt	r2,r17,22b70 <___vfprintf_internal_r+0x111c>
   22b38:	b2000204 	addi	r8,r22,8
   22b3c:	003e3a06 	br	22428 <_gp+0xfffe08dc>
   22b40:	010000f4 	movhi	r4,3
   22b44:	211f2d84 	addi	r4,r4,31926
   22b48:	d9002b15 	stw	r4,172(sp)
   22b4c:	d9002b17 	ldw	r4,172(sp)
   22b50:	1c07883a 	add	r3,r3,r16
   22b54:	44000115 	stw	r16,4(r8)
   22b58:	41000015 	stw	r4,0(r8)
   22b5c:	10800044 	addi	r2,r2,1
   22b60:	d8c02015 	stw	r3,128(sp)
   22b64:	d8801f15 	stw	r2,124(sp)
   22b68:	010001c4 	movi	r4,7
   22b6c:	20be2d0e 	bge	r4,r2,22424 <_gp+0xfffe08d8>
   22b70:	d9002c17 	ldw	r4,176(sp)
   22b74:	d9801e04 	addi	r6,sp,120
   22b78:	b80b883a 	mov	r5,r23
   22b7c:	00282cc0 	call	282cc <__sprint_r>
   22b80:	103cb61e 	bne	r2,zero,21e5c <_gp+0xfffe0310>
   22b84:	d8c02017 	ldw	r3,128(sp)
   22b88:	da000404 	addi	r8,sp,16
   22b8c:	003e2606 	br	22428 <_gp+0xfffe08dc>
   22b90:	d9002c17 	ldw	r4,176(sp)
   22b94:	d9801e04 	addi	r6,sp,120
   22b98:	b80b883a 	mov	r5,r23
   22b9c:	00282cc0 	call	282cc <__sprint_r>
   22ba0:	103e5d26 	beq	r2,zero,22518 <_gp+0xfffe09cc>
   22ba4:	003cad06 	br	21e5c <_gp+0xfffe0310>
   22ba8:	d9002c17 	ldw	r4,176(sp)
   22bac:	d9801e04 	addi	r6,sp,120
   22bb0:	b80b883a 	mov	r5,r23
   22bb4:	00282cc0 	call	282cc <__sprint_r>
   22bb8:	103ca81e 	bne	r2,zero,21e5c <_gp+0xfffe0310>
   22bbc:	d8c02017 	ldw	r3,128(sp)
   22bc0:	da000404 	addi	r8,sp,16
   22bc4:	003e0b06 	br	223f4 <_gp+0xfffe08a8>
   22bc8:	d9002c17 	ldw	r4,176(sp)
   22bcc:	d9801e04 	addi	r6,sp,120
   22bd0:	b80b883a 	mov	r5,r23
   22bd4:	00282cc0 	call	282cc <__sprint_r>
   22bd8:	103ca01e 	bne	r2,zero,21e5c <_gp+0xfffe0310>
   22bdc:	d8c02017 	ldw	r3,128(sp)
   22be0:	da000404 	addi	r8,sp,16
   22be4:	003dbd06 	br	222dc <_gp+0xfffe0790>
   22be8:	d9002c17 	ldw	r4,176(sp)
   22bec:	d9801e04 	addi	r6,sp,120
   22bf0:	b80b883a 	mov	r5,r23
   22bf4:	00282cc0 	call	282cc <__sprint_r>
   22bf8:	103c981e 	bne	r2,zero,21e5c <_gp+0xfffe0310>
   22bfc:	d8c02017 	ldw	r3,128(sp)
   22c00:	da000404 	addi	r8,sp,16
   22c04:	003dc306 	br	22314 <_gp+0xfffe07c8>
   22c08:	d8802917 	ldw	r2,164(sp)
   22c0c:	d8002785 	stb	zero,158(sp)
   22c10:	103f0616 	blt	r2,zero,2282c <_gp+0xfffe0ce0>
   22c14:	00ffdfc4 	movi	r3,-129
   22c18:	9d84b03a 	or	r2,r19,r22
   22c1c:	90e4703a 	and	r18,r18,r3
   22c20:	103c6b26 	beq	r2,zero,21dd0 <_gp+0xfffe0284>
   22c24:	0039883a 	mov	fp,zero
   22c28:	003e7406 	br	225fc <_gp+0xfffe0ab0>
   22c2c:	9080040c 	andi	r2,r18,16
   22c30:	1001b326 	beq	r2,zero,23300 <___vfprintf_internal_r+0x18ac>
   22c34:	d9002d17 	ldw	r4,180(sp)
   22c38:	d9402917 	ldw	r5,164(sp)
   22c3c:	d8002785 	stb	zero,158(sp)
   22c40:	20800104 	addi	r2,r4,4
   22c44:	24c00017 	ldw	r19,0(r4)
   22c48:	002d883a 	mov	r22,zero
   22c4c:	2801b516 	blt	r5,zero,23324 <___vfprintf_internal_r+0x18d0>
   22c50:	00ffdfc4 	movi	r3,-129
   22c54:	d8802d15 	stw	r2,180(sp)
   22c58:	90e4703a 	and	r18,r18,r3
   22c5c:	983d2726 	beq	r19,zero,220fc <_gp+0xfffe05b0>
   22c60:	0039883a 	mov	fp,zero
   22c64:	003d2a06 	br	22110 <_gp+0xfffe05c4>
   22c68:	dc402617 	ldw	r17,152(sp)
   22c6c:	0441d30e 	bge	zero,r17,233bc <___vfprintf_internal_r+0x1968>
   22c70:	dc403217 	ldw	r17,200(sp)
   22c74:	d8803317 	ldw	r2,204(sp)
   22c78:	1440010e 	bge	r2,r17,22c80 <___vfprintf_internal_r+0x122c>
   22c7c:	1023883a 	mov	r17,r2
   22c80:	04400a0e 	bge	zero,r17,22cac <___vfprintf_internal_r+0x1258>
   22c84:	d8801f17 	ldw	r2,124(sp)
   22c88:	1c47883a 	add	r3,r3,r17
   22c8c:	44000015 	stw	r16,0(r8)
   22c90:	10800044 	addi	r2,r2,1
   22c94:	44400115 	stw	r17,4(r8)
   22c98:	d8c02015 	stw	r3,128(sp)
   22c9c:	d8801f15 	stw	r2,124(sp)
   22ca0:	010001c4 	movi	r4,7
   22ca4:	20826516 	blt	r4,r2,2363c <___vfprintf_internal_r+0x1be8>
   22ca8:	42000204 	addi	r8,r8,8
   22cac:	88026116 	blt	r17,zero,23634 <___vfprintf_internal_r+0x1be0>
   22cb0:	d9003217 	ldw	r4,200(sp)
   22cb4:	2463c83a 	sub	r17,r4,r17
   22cb8:	04407b0e 	bge	zero,r17,22ea8 <___vfprintf_internal_r+0x1454>
   22cbc:	05800404 	movi	r22,16
   22cc0:	d8801f17 	ldw	r2,124(sp)
   22cc4:	b4419d0e 	bge	r22,r17,2333c <___vfprintf_internal_r+0x18e8>
   22cc8:	010000f4 	movhi	r4,3
   22ccc:	211f2d84 	addi	r4,r4,31926
   22cd0:	d9002b15 	stw	r4,172(sp)
   22cd4:	070001c4 	movi	fp,7
   22cd8:	dcc02c17 	ldw	r19,176(sp)
   22cdc:	00000306 	br	22cec <___vfprintf_internal_r+0x1298>
   22ce0:	42000204 	addi	r8,r8,8
   22ce4:	8c7ffc04 	addi	r17,r17,-16
   22ce8:	b441970e 	bge	r22,r17,23348 <___vfprintf_internal_r+0x18f4>
   22cec:	18c00404 	addi	r3,r3,16
   22cf0:	10800044 	addi	r2,r2,1
   22cf4:	45000015 	stw	r20,0(r8)
   22cf8:	45800115 	stw	r22,4(r8)
   22cfc:	d8c02015 	stw	r3,128(sp)
   22d00:	d8801f15 	stw	r2,124(sp)
   22d04:	e0bff60e 	bge	fp,r2,22ce0 <_gp+0xfffe1194>
   22d08:	d9801e04 	addi	r6,sp,120
   22d0c:	b80b883a 	mov	r5,r23
   22d10:	9809883a 	mov	r4,r19
   22d14:	00282cc0 	call	282cc <__sprint_r>
   22d18:	103c501e 	bne	r2,zero,21e5c <_gp+0xfffe0310>
   22d1c:	d8c02017 	ldw	r3,128(sp)
   22d20:	d8801f17 	ldw	r2,124(sp)
   22d24:	da000404 	addi	r8,sp,16
   22d28:	003fee06 	br	22ce4 <_gp+0xfffe1198>
   22d2c:	d9002c17 	ldw	r4,176(sp)
   22d30:	d9801e04 	addi	r6,sp,120
   22d34:	b80b883a 	mov	r5,r23
   22d38:	00282cc0 	call	282cc <__sprint_r>
   22d3c:	103c471e 	bne	r2,zero,21e5c <_gp+0xfffe0310>
   22d40:	d8c02017 	ldw	r3,128(sp)
   22d44:	df002787 	ldb	fp,158(sp)
   22d48:	da000404 	addi	r8,sp,16
   22d4c:	003d5606 	br	222a8 <_gp+0xfffe075c>
   22d50:	9080040c 	andi	r2,r18,16
   22d54:	10016126 	beq	r2,zero,232dc <___vfprintf_internal_r+0x1888>
   22d58:	d8802d17 	ldw	r2,180(sp)
   22d5c:	14c00017 	ldw	r19,0(r2)
   22d60:	10800104 	addi	r2,r2,4
   22d64:	d8802d15 	stw	r2,180(sp)
   22d68:	982dd7fa 	srai	r22,r19,31
   22d6c:	b005883a 	mov	r2,r22
   22d70:	003c8206 	br	21f7c <_gp+0xfffe0430>
   22d74:	9080040c 	andi	r2,r18,16
   22d78:	10003526 	beq	r2,zero,22e50 <___vfprintf_internal_r+0x13fc>
   22d7c:	d9402d17 	ldw	r5,180(sp)
   22d80:	d8c02917 	ldw	r3,164(sp)
   22d84:	d8002785 	stb	zero,158(sp)
   22d88:	28800104 	addi	r2,r5,4
   22d8c:	2cc00017 	ldw	r19,0(r5)
   22d90:	002d883a 	mov	r22,zero
   22d94:	18003716 	blt	r3,zero,22e74 <___vfprintf_internal_r+0x1420>
   22d98:	00ffdfc4 	movi	r3,-129
   22d9c:	d8802d15 	stw	r2,180(sp)
   22da0:	90e4703a 	and	r18,r18,r3
   22da4:	0039883a 	mov	fp,zero
   22da8:	983df326 	beq	r19,zero,22578 <_gp+0xfffe0a2c>
   22dac:	00800244 	movi	r2,9
   22db0:	14fc7b36 	bltu	r2,r19,21fa0 <_gp+0xfffe0454>
   22db4:	d8c02817 	ldw	r3,160(sp)
   22db8:	dc001dc4 	addi	r16,sp,119
   22dbc:	9cc00c04 	addi	r19,r19,48
   22dc0:	1c07c83a 	sub	r3,r3,r16
   22dc4:	dcc01dc5 	stb	r19,119(sp)
   22dc8:	d8c02e15 	stw	r3,184(sp)
   22dcc:	003ce806 	br	22170 <_gp+0xfffe0624>
   22dd0:	d8803317 	ldw	r2,204(sp)
   22dd4:	143fffc4 	addi	r16,r2,-1
   22dd8:	043f4d0e 	bge	zero,r16,22b10 <_gp+0xfffe0fc4>
   22ddc:	07000404 	movi	fp,16
   22de0:	e400810e 	bge	fp,r16,22fe8 <___vfprintf_internal_r+0x1594>
   22de4:	014000f4 	movhi	r5,3
   22de8:	295f2d84 	addi	r5,r5,31926
   22dec:	d9402b15 	stw	r5,172(sp)
   22df0:	01c001c4 	movi	r7,7
   22df4:	dcc02c17 	ldw	r19,176(sp)
   22df8:	00000306 	br	22e08 <___vfprintf_internal_r+0x13b4>
   22dfc:	b5800204 	addi	r22,r22,8
   22e00:	843ffc04 	addi	r16,r16,-16
   22e04:	e4007b0e 	bge	fp,r16,22ff4 <___vfprintf_internal_r+0x15a0>
   22e08:	18c00404 	addi	r3,r3,16
   22e0c:	8c400044 	addi	r17,r17,1
   22e10:	b5000015 	stw	r20,0(r22)
   22e14:	b7000115 	stw	fp,4(r22)
   22e18:	d8c02015 	stw	r3,128(sp)
   22e1c:	dc401f15 	stw	r17,124(sp)
   22e20:	3c7ff60e 	bge	r7,r17,22dfc <_gp+0xfffe12b0>
   22e24:	d9801e04 	addi	r6,sp,120
   22e28:	b80b883a 	mov	r5,r23
   22e2c:	9809883a 	mov	r4,r19
   22e30:	d9c03c15 	stw	r7,240(sp)
   22e34:	00282cc0 	call	282cc <__sprint_r>
   22e38:	d9c03c17 	ldw	r7,240(sp)
   22e3c:	103c071e 	bne	r2,zero,21e5c <_gp+0xfffe0310>
   22e40:	d8c02017 	ldw	r3,128(sp)
   22e44:	dc401f17 	ldw	r17,124(sp)
   22e48:	dd800404 	addi	r22,sp,16
   22e4c:	003fec06 	br	22e00 <_gp+0xfffe12b4>
   22e50:	9080100c 	andi	r2,r18,64
   22e54:	d8002785 	stb	zero,158(sp)
   22e58:	10010e26 	beq	r2,zero,23294 <___vfprintf_internal_r+0x1840>
   22e5c:	d9002d17 	ldw	r4,180(sp)
   22e60:	d9402917 	ldw	r5,164(sp)
   22e64:	002d883a 	mov	r22,zero
   22e68:	20800104 	addi	r2,r4,4
   22e6c:	24c0000b 	ldhu	r19,0(r4)
   22e70:	283fc90e 	bge	r5,zero,22d98 <_gp+0xfffe124c>
   22e74:	d8802d15 	stw	r2,180(sp)
   22e78:	0039883a 	mov	fp,zero
   22e7c:	9d84b03a 	or	r2,r19,r22
   22e80:	103c461e 	bne	r2,zero,21f9c <_gp+0xfffe0450>
   22e84:	00800044 	movi	r2,1
   22e88:	003e6c06 	br	2283c <_gp+0xfffe0cf0>
   22e8c:	d9002c17 	ldw	r4,176(sp)
   22e90:	d9801e04 	addi	r6,sp,120
   22e94:	b80b883a 	mov	r5,r23
   22e98:	00282cc0 	call	282cc <__sprint_r>
   22e9c:	103bef1e 	bne	r2,zero,21e5c <_gp+0xfffe0310>
   22ea0:	d8c02017 	ldw	r3,128(sp)
   22ea4:	da000404 	addi	r8,sp,16
   22ea8:	d9003217 	ldw	r4,200(sp)
   22eac:	d8802617 	ldw	r2,152(sp)
   22eb0:	d9403317 	ldw	r5,204(sp)
   22eb4:	8123883a 	add	r17,r16,r4
   22eb8:	11400216 	blt	r2,r5,22ec4 <___vfprintf_internal_r+0x1470>
   22ebc:	9100004c 	andi	r4,r18,1
   22ec0:	20000d26 	beq	r4,zero,22ef8 <___vfprintf_internal_r+0x14a4>
   22ec4:	d9003717 	ldw	r4,220(sp)
   22ec8:	d9403417 	ldw	r5,208(sp)
   22ecc:	1907883a 	add	r3,r3,r4
   22ed0:	d9001f17 	ldw	r4,124(sp)
   22ed4:	41400015 	stw	r5,0(r8)
   22ed8:	d9403717 	ldw	r5,220(sp)
   22edc:	21000044 	addi	r4,r4,1
   22ee0:	d8c02015 	stw	r3,128(sp)
   22ee4:	41400115 	stw	r5,4(r8)
   22ee8:	d9001f15 	stw	r4,124(sp)
   22eec:	014001c4 	movi	r5,7
   22ef0:	2901e816 	blt	r5,r4,23694 <___vfprintf_internal_r+0x1c40>
   22ef4:	42000204 	addi	r8,r8,8
   22ef8:	d9003317 	ldw	r4,204(sp)
   22efc:	8121883a 	add	r16,r16,r4
   22f00:	2085c83a 	sub	r2,r4,r2
   22f04:	8461c83a 	sub	r16,r16,r17
   22f08:	1400010e 	bge	r2,r16,22f10 <___vfprintf_internal_r+0x14bc>
   22f0c:	1021883a 	mov	r16,r2
   22f10:	04000a0e 	bge	zero,r16,22f3c <___vfprintf_internal_r+0x14e8>
   22f14:	d9001f17 	ldw	r4,124(sp)
   22f18:	1c07883a 	add	r3,r3,r16
   22f1c:	44400015 	stw	r17,0(r8)
   22f20:	21000044 	addi	r4,r4,1
   22f24:	44000115 	stw	r16,4(r8)
   22f28:	d8c02015 	stw	r3,128(sp)
   22f2c:	d9001f15 	stw	r4,124(sp)
   22f30:	014001c4 	movi	r5,7
   22f34:	2901fb16 	blt	r5,r4,23724 <___vfprintf_internal_r+0x1cd0>
   22f38:	42000204 	addi	r8,r8,8
   22f3c:	8001f716 	blt	r16,zero,2371c <___vfprintf_internal_r+0x1cc8>
   22f40:	1421c83a 	sub	r16,r2,r16
   22f44:	043d380e 	bge	zero,r16,22428 <_gp+0xfffe08dc>
   22f48:	04400404 	movi	r17,16
   22f4c:	d8801f17 	ldw	r2,124(sp)
   22f50:	8c3efb0e 	bge	r17,r16,22b40 <_gp+0xfffe0ff4>
   22f54:	014000f4 	movhi	r5,3
   22f58:	295f2d84 	addi	r5,r5,31926
   22f5c:	d9402b15 	stw	r5,172(sp)
   22f60:	058001c4 	movi	r22,7
   22f64:	dcc02c17 	ldw	r19,176(sp)
   22f68:	00000306 	br	22f78 <___vfprintf_internal_r+0x1524>
   22f6c:	42000204 	addi	r8,r8,8
   22f70:	843ffc04 	addi	r16,r16,-16
   22f74:	8c3ef50e 	bge	r17,r16,22b4c <_gp+0xfffe1000>
   22f78:	18c00404 	addi	r3,r3,16
   22f7c:	10800044 	addi	r2,r2,1
   22f80:	45000015 	stw	r20,0(r8)
   22f84:	44400115 	stw	r17,4(r8)
   22f88:	d8c02015 	stw	r3,128(sp)
   22f8c:	d8801f15 	stw	r2,124(sp)
   22f90:	b0bff60e 	bge	r22,r2,22f6c <_gp+0xfffe1420>
   22f94:	d9801e04 	addi	r6,sp,120
   22f98:	b80b883a 	mov	r5,r23
   22f9c:	9809883a 	mov	r4,r19
   22fa0:	00282cc0 	call	282cc <__sprint_r>
   22fa4:	103bad1e 	bne	r2,zero,21e5c <_gp+0xfffe0310>
   22fa8:	d8c02017 	ldw	r3,128(sp)
   22fac:	d8801f17 	ldw	r2,124(sp)
   22fb0:	da000404 	addi	r8,sp,16
   22fb4:	003fee06 	br	22f70 <_gp+0xfffe1424>
   22fb8:	9088703a 	and	r4,r18,r2
   22fbc:	203eab1e 	bne	r4,zero,22a6c <_gp+0xfffe0f20>
   22fc0:	dc401f17 	ldw	r17,124(sp)
   22fc4:	40800115 	stw	r2,4(r8)
   22fc8:	44000015 	stw	r16,0(r8)
   22fcc:	8c400044 	addi	r17,r17,1
   22fd0:	d8c02015 	stw	r3,128(sp)
   22fd4:	dc401f15 	stw	r17,124(sp)
   22fd8:	008001c4 	movi	r2,7
   22fdc:	14400e16 	blt	r2,r17,23018 <___vfprintf_internal_r+0x15c4>
   22fe0:	45800204 	addi	r22,r8,8
   22fe4:	003eca06 	br	22b10 <_gp+0xfffe0fc4>
   22fe8:	010000f4 	movhi	r4,3
   22fec:	211f2d84 	addi	r4,r4,31926
   22ff0:	d9002b15 	stw	r4,172(sp)
   22ff4:	d8802b17 	ldw	r2,172(sp)
   22ff8:	1c07883a 	add	r3,r3,r16
   22ffc:	8c400044 	addi	r17,r17,1
   23000:	b0800015 	stw	r2,0(r22)
   23004:	b4000115 	stw	r16,4(r22)
   23008:	d8c02015 	stw	r3,128(sp)
   2300c:	dc401f15 	stw	r17,124(sp)
   23010:	008001c4 	movi	r2,7
   23014:	147ebd0e 	bge	r2,r17,22b0c <_gp+0xfffe0fc0>
   23018:	d9002c17 	ldw	r4,176(sp)
   2301c:	d9801e04 	addi	r6,sp,120
   23020:	b80b883a 	mov	r5,r23
   23024:	00282cc0 	call	282cc <__sprint_r>
   23028:	103b8c1e 	bne	r2,zero,21e5c <_gp+0xfffe0310>
   2302c:	d8c02017 	ldw	r3,128(sp)
   23030:	dc401f17 	ldw	r17,124(sp)
   23034:	dd800404 	addi	r22,sp,16
   23038:	003eb506 	br	22b10 <_gp+0xfffe0fc4>
   2303c:	d9002c17 	ldw	r4,176(sp)
   23040:	d9801e04 	addi	r6,sp,120
   23044:	b80b883a 	mov	r5,r23
   23048:	00282cc0 	call	282cc <__sprint_r>
   2304c:	103b831e 	bne	r2,zero,21e5c <_gp+0xfffe0310>
   23050:	d8c02017 	ldw	r3,128(sp)
   23054:	dc401f17 	ldw	r17,124(sp)
   23058:	da000404 	addi	r8,sp,16
   2305c:	003e8d06 	br	22a94 <_gp+0xfffe0f48>
   23060:	d9002c17 	ldw	r4,176(sp)
   23064:	d9801e04 	addi	r6,sp,120
   23068:	b80b883a 	mov	r5,r23
   2306c:	00282cc0 	call	282cc <__sprint_r>
   23070:	103b7a1e 	bne	r2,zero,21e5c <_gp+0xfffe0310>
   23074:	d8c02017 	ldw	r3,128(sp)
   23078:	dc401f17 	ldw	r17,124(sp)
   2307c:	dd800404 	addi	r22,sp,16
   23080:	003e8f06 	br	22ac0 <_gp+0xfffe0f74>
   23084:	0027883a 	mov	r19,zero
   23088:	003f4a06 	br	22db4 <_gp+0xfffe1268>
   2308c:	d9002c17 	ldw	r4,176(sp)
   23090:	d9801e04 	addi	r6,sp,120
   23094:	b80b883a 	mov	r5,r23
   23098:	00282cc0 	call	282cc <__sprint_r>
   2309c:	103b6f1e 	bne	r2,zero,21e5c <_gp+0xfffe0310>
   230a0:	d8c02017 	ldw	r3,128(sp)
   230a4:	da000404 	addi	r8,sp,16
   230a8:	003c9d06 	br	22320 <_gp+0xfffe07d4>
   230ac:	04e7c83a 	sub	r19,zero,r19
   230b0:	9804c03a 	cmpne	r2,r19,zero
   230b4:	05adc83a 	sub	r22,zero,r22
   230b8:	b0adc83a 	sub	r22,r22,r2
   230bc:	d8802917 	ldw	r2,164(sp)
   230c0:	07000b44 	movi	fp,45
   230c4:	df002785 	stb	fp,158(sp)
   230c8:	10017b16 	blt	r2,zero,236b8 <___vfprintf_internal_r+0x1c64>
   230cc:	00bfdfc4 	movi	r2,-129
   230d0:	90a4703a 	and	r18,r18,r2
   230d4:	003bb106 	br	21f9c <_gp+0xfffe0450>
   230d8:	d9003617 	ldw	r4,216(sp)
   230dc:	d9403817 	ldw	r5,224(sp)
   230e0:	da003d15 	stw	r8,244(sp)
   230e4:	0027f440 	call	27f44 <__fpclassifyd>
   230e8:	da003d17 	ldw	r8,244(sp)
   230ec:	1000f026 	beq	r2,zero,234b0 <___vfprintf_internal_r+0x1a5c>
   230f0:	d9002917 	ldw	r4,164(sp)
   230f4:	05bff7c4 	movi	r22,-33
   230f8:	00bfffc4 	movi	r2,-1
   230fc:	8dac703a 	and	r22,r17,r22
   23100:	20820026 	beq	r4,r2,23904 <___vfprintf_internal_r+0x1eb0>
   23104:	008011c4 	movi	r2,71
   23108:	b081f726 	beq	r22,r2,238e8 <___vfprintf_internal_r+0x1e94>
   2310c:	d9003817 	ldw	r4,224(sp)
   23110:	90c04014 	ori	r3,r18,256
   23114:	d8c02b15 	stw	r3,172(sp)
   23118:	20021516 	blt	r4,zero,23970 <___vfprintf_internal_r+0x1f1c>
   2311c:	dcc03817 	ldw	r19,224(sp)
   23120:	d8002a05 	stb	zero,168(sp)
   23124:	00801984 	movi	r2,102
   23128:	8881f926 	beq	r17,r2,23910 <___vfprintf_internal_r+0x1ebc>
   2312c:	00801184 	movi	r2,70
   23130:	88821c26 	beq	r17,r2,239a4 <___vfprintf_internal_r+0x1f50>
   23134:	00801144 	movi	r2,69
   23138:	b081ef26 	beq	r22,r2,238f8 <___vfprintf_internal_r+0x1ea4>
   2313c:	d8c02917 	ldw	r3,164(sp)
   23140:	d8802104 	addi	r2,sp,132
   23144:	d8800315 	stw	r2,12(sp)
   23148:	d9403617 	ldw	r5,216(sp)
   2314c:	d8802504 	addi	r2,sp,148
   23150:	d9002c17 	ldw	r4,176(sp)
   23154:	d8800215 	stw	r2,8(sp)
   23158:	d8802604 	addi	r2,sp,152
   2315c:	d8c00015 	stw	r3,0(sp)
   23160:	d8800115 	stw	r2,4(sp)
   23164:	01c00084 	movi	r7,2
   23168:	980d883a 	mov	r6,r19
   2316c:	d8c03c15 	stw	r3,240(sp)
   23170:	da003d15 	stw	r8,244(sp)
   23174:	00240780 	call	24078 <_dtoa_r>
   23178:	1021883a 	mov	r16,r2
   2317c:	008019c4 	movi	r2,103
   23180:	d8c03c17 	ldw	r3,240(sp)
   23184:	da003d17 	ldw	r8,244(sp)
   23188:	88817126 	beq	r17,r2,23750 <___vfprintf_internal_r+0x1cfc>
   2318c:	008011c4 	movi	r2,71
   23190:	88829226 	beq	r17,r2,23bdc <___vfprintf_internal_r+0x2188>
   23194:	80f9883a 	add	fp,r16,r3
   23198:	d9003617 	ldw	r4,216(sp)
   2319c:	000d883a 	mov	r6,zero
   231a0:	000f883a 	mov	r7,zero
   231a4:	980b883a 	mov	r5,r19
   231a8:	da003d15 	stw	r8,244(sp)
   231ac:	002bf440 	call	2bf44 <__eqdf2>
   231b0:	da003d17 	ldw	r8,244(sp)
   231b4:	10018d26 	beq	r2,zero,237ec <___vfprintf_internal_r+0x1d98>
   231b8:	d8802117 	ldw	r2,132(sp)
   231bc:	1700062e 	bgeu	r2,fp,231d8 <___vfprintf_internal_r+0x1784>
   231c0:	01000c04 	movi	r4,48
   231c4:	10c00044 	addi	r3,r2,1
   231c8:	d8c02115 	stw	r3,132(sp)
   231cc:	11000005 	stb	r4,0(r2)
   231d0:	d8802117 	ldw	r2,132(sp)
   231d4:	173ffb36 	bltu	r2,fp,231c4 <_gp+0xfffe1678>
   231d8:	1405c83a 	sub	r2,r2,r16
   231dc:	d8803315 	stw	r2,204(sp)
   231e0:	008011c4 	movi	r2,71
   231e4:	b0817626 	beq	r22,r2,237c0 <___vfprintf_internal_r+0x1d6c>
   231e8:	00801944 	movi	r2,101
   231ec:	1442810e 	bge	r2,r17,23bf4 <___vfprintf_internal_r+0x21a0>
   231f0:	d8c02617 	ldw	r3,152(sp)
   231f4:	00801984 	movi	r2,102
   231f8:	d8c03215 	stw	r3,200(sp)
   231fc:	8881fe26 	beq	r17,r2,239f8 <___vfprintf_internal_r+0x1fa4>
   23200:	d8c03217 	ldw	r3,200(sp)
   23204:	d9003317 	ldw	r4,204(sp)
   23208:	1901dd16 	blt	r3,r4,23980 <___vfprintf_internal_r+0x1f2c>
   2320c:	9480004c 	andi	r18,r18,1
   23210:	90022b1e 	bne	r18,zero,23ac0 <___vfprintf_internal_r+0x206c>
   23214:	1805883a 	mov	r2,r3
   23218:	18028016 	blt	r3,zero,23c1c <___vfprintf_internal_r+0x21c8>
   2321c:	d8c03217 	ldw	r3,200(sp)
   23220:	044019c4 	movi	r17,103
   23224:	d8c02e15 	stw	r3,184(sp)
   23228:	df002a07 	ldb	fp,168(sp)
   2322c:	e001531e 	bne	fp,zero,2377c <___vfprintf_internal_r+0x1d28>
   23230:	df002783 	ldbu	fp,158(sp)
   23234:	d8802a15 	stw	r2,168(sp)
   23238:	dc802b17 	ldw	r18,172(sp)
   2323c:	d8002915 	stw	zero,164(sp)
   23240:	003bd106 	br	22188 <_gp+0xfffe063c>
   23244:	d8802d17 	ldw	r2,180(sp)
   23248:	d8c02d17 	ldw	r3,180(sp)
   2324c:	d9002d17 	ldw	r4,180(sp)
   23250:	10800017 	ldw	r2,0(r2)
   23254:	18c00117 	ldw	r3,4(r3)
   23258:	21000204 	addi	r4,r4,8
   2325c:	d8803615 	stw	r2,216(sp)
   23260:	d8c03815 	stw	r3,224(sp)
   23264:	d9002d15 	stw	r4,180(sp)
   23268:	003b7506 	br	22040 <_gp+0xfffe04f4>
   2326c:	ac400007 	ldb	r17,0(r21)
   23270:	003a5906 	br	21bd8 <_gp+0xfffe008c>
   23274:	9080100c 	andi	r2,r18,64
   23278:	1000a826 	beq	r2,zero,2351c <___vfprintf_internal_r+0x1ac8>
   2327c:	d9002d17 	ldw	r4,180(sp)
   23280:	002d883a 	mov	r22,zero
   23284:	24c0000b 	ldhu	r19,0(r4)
   23288:	21000104 	addi	r4,r4,4
   2328c:	d9002d15 	stw	r4,180(sp)
   23290:	003ccb06 	br	225c0 <_gp+0xfffe0a74>
   23294:	d8c02d17 	ldw	r3,180(sp)
   23298:	d9002917 	ldw	r4,164(sp)
   2329c:	002d883a 	mov	r22,zero
   232a0:	18800104 	addi	r2,r3,4
   232a4:	1cc00017 	ldw	r19,0(r3)
   232a8:	203ebb0e 	bge	r4,zero,22d98 <_gp+0xfffe124c>
   232ac:	003ef106 	br	22e74 <_gp+0xfffe1328>
   232b0:	9080040c 	andi	r2,r18,16
   232b4:	1000921e 	bne	r2,zero,23500 <___vfprintf_internal_r+0x1aac>
   232b8:	9480100c 	andi	r18,r18,64
   232bc:	90013926 	beq	r18,zero,237a4 <___vfprintf_internal_r+0x1d50>
   232c0:	d9002d17 	ldw	r4,180(sp)
   232c4:	d9402f17 	ldw	r5,188(sp)
   232c8:	20800017 	ldw	r2,0(r4)
   232cc:	21000104 	addi	r4,r4,4
   232d0:	d9002d15 	stw	r4,180(sp)
   232d4:	1140000d 	sth	r5,0(r2)
   232d8:	003a1606 	br	21b34 <_gp+0xfffdffe8>
   232dc:	9080100c 	andi	r2,r18,64
   232e0:	10008026 	beq	r2,zero,234e4 <___vfprintf_internal_r+0x1a90>
   232e4:	d8c02d17 	ldw	r3,180(sp)
   232e8:	1cc0000f 	ldh	r19,0(r3)
   232ec:	18c00104 	addi	r3,r3,4
   232f0:	d8c02d15 	stw	r3,180(sp)
   232f4:	982dd7fa 	srai	r22,r19,31
   232f8:	b005883a 	mov	r2,r22
   232fc:	003b1f06 	br	21f7c <_gp+0xfffe0430>
   23300:	9080100c 	andi	r2,r18,64
   23304:	d8002785 	stb	zero,158(sp)
   23308:	10008a1e 	bne	r2,zero,23534 <___vfprintf_internal_r+0x1ae0>
   2330c:	d9402d17 	ldw	r5,180(sp)
   23310:	d8c02917 	ldw	r3,164(sp)
   23314:	002d883a 	mov	r22,zero
   23318:	28800104 	addi	r2,r5,4
   2331c:	2cc00017 	ldw	r19,0(r5)
   23320:	183e4b0e 	bge	r3,zero,22c50 <_gp+0xfffe1104>
   23324:	9d86b03a 	or	r3,r19,r22
   23328:	d8802d15 	stw	r2,180(sp)
   2332c:	183e4c1e 	bne	r3,zero,22c60 <_gp+0xfffe1114>
   23330:	0039883a 	mov	fp,zero
   23334:	0005883a 	mov	r2,zero
   23338:	003d4006 	br	2283c <_gp+0xfffe0cf0>
   2333c:	014000f4 	movhi	r5,3
   23340:	295f2d84 	addi	r5,r5,31926
   23344:	d9402b15 	stw	r5,172(sp)
   23348:	d9402b17 	ldw	r5,172(sp)
   2334c:	1c47883a 	add	r3,r3,r17
   23350:	10800044 	addi	r2,r2,1
   23354:	41400015 	stw	r5,0(r8)
   23358:	44400115 	stw	r17,4(r8)
   2335c:	d8c02015 	stw	r3,128(sp)
   23360:	d8801f15 	stw	r2,124(sp)
   23364:	010001c4 	movi	r4,7
   23368:	20bec816 	blt	r4,r2,22e8c <_gp+0xfffe1340>
   2336c:	42000204 	addi	r8,r8,8
   23370:	003ecd06 	br	22ea8 <_gp+0xfffe135c>
   23374:	d9002917 	ldw	r4,164(sp)
   23378:	d8002785 	stb	zero,158(sp)
   2337c:	203d2d16 	blt	r4,zero,22834 <_gp+0xfffe0ce8>
   23380:	00bfdfc4 	movi	r2,-129
   23384:	90a4703a 	and	r18,r18,r2
   23388:	003a9106 	br	21dd0 <_gp+0xfffe0284>
   2338c:	010000f4 	movhi	r4,3
   23390:	211f2d84 	addi	r4,r4,31926
   23394:	d9002b15 	stw	r4,172(sp)
   23398:	003c0c06 	br	223cc <_gp+0xfffe0880>
   2339c:	d9002c17 	ldw	r4,176(sp)
   233a0:	d9801e04 	addi	r6,sp,120
   233a4:	b80b883a 	mov	r5,r23
   233a8:	00282cc0 	call	282cc <__sprint_r>
   233ac:	103aab1e 	bne	r2,zero,21e5c <_gp+0xfffe0310>
   233b0:	d8c02017 	ldw	r3,128(sp)
   233b4:	da000404 	addi	r8,sp,16
   233b8:	003d4106 	br	228c0 <_gp+0xfffe0d74>
   233bc:	d8801f17 	ldw	r2,124(sp)
   233c0:	014000f4 	movhi	r5,3
   233c4:	01000044 	movi	r4,1
   233c8:	18c00044 	addi	r3,r3,1
   233cc:	10800044 	addi	r2,r2,1
   233d0:	295f2d04 	addi	r5,r5,31924
   233d4:	41000115 	stw	r4,4(r8)
   233d8:	41400015 	stw	r5,0(r8)
   233dc:	d8c02015 	stw	r3,128(sp)
   233e0:	d8801f15 	stw	r2,124(sp)
   233e4:	010001c4 	movi	r4,7
   233e8:	20805c16 	blt	r4,r2,2355c <___vfprintf_internal_r+0x1b08>
   233ec:	42000204 	addi	r8,r8,8
   233f0:	8800041e 	bne	r17,zero,23404 <___vfprintf_internal_r+0x19b0>
   233f4:	d8803317 	ldw	r2,204(sp)
   233f8:	1000021e 	bne	r2,zero,23404 <___vfprintf_internal_r+0x19b0>
   233fc:	9080004c 	andi	r2,r18,1
   23400:	103c0926 	beq	r2,zero,22428 <_gp+0xfffe08dc>
   23404:	d9003717 	ldw	r4,220(sp)
   23408:	d8801f17 	ldw	r2,124(sp)
   2340c:	d9403417 	ldw	r5,208(sp)
   23410:	20c7883a 	add	r3,r4,r3
   23414:	10800044 	addi	r2,r2,1
   23418:	41000115 	stw	r4,4(r8)
   2341c:	41400015 	stw	r5,0(r8)
   23420:	d8c02015 	stw	r3,128(sp)
   23424:	d8801f15 	stw	r2,124(sp)
   23428:	010001c4 	movi	r4,7
   2342c:	20812116 	blt	r4,r2,238b4 <___vfprintf_internal_r+0x1e60>
   23430:	42000204 	addi	r8,r8,8
   23434:	0463c83a 	sub	r17,zero,r17
   23438:	0440730e 	bge	zero,r17,23608 <___vfprintf_internal_r+0x1bb4>
   2343c:	05800404 	movi	r22,16
   23440:	b440860e 	bge	r22,r17,2365c <___vfprintf_internal_r+0x1c08>
   23444:	014000f4 	movhi	r5,3
   23448:	295f2d84 	addi	r5,r5,31926
   2344c:	d9402b15 	stw	r5,172(sp)
   23450:	070001c4 	movi	fp,7
   23454:	dcc02c17 	ldw	r19,176(sp)
   23458:	00000306 	br	23468 <___vfprintf_internal_r+0x1a14>
   2345c:	42000204 	addi	r8,r8,8
   23460:	8c7ffc04 	addi	r17,r17,-16
   23464:	b440800e 	bge	r22,r17,23668 <___vfprintf_internal_r+0x1c14>
   23468:	18c00404 	addi	r3,r3,16
   2346c:	10800044 	addi	r2,r2,1
   23470:	45000015 	stw	r20,0(r8)
   23474:	45800115 	stw	r22,4(r8)
   23478:	d8c02015 	stw	r3,128(sp)
   2347c:	d8801f15 	stw	r2,124(sp)
   23480:	e0bff60e 	bge	fp,r2,2345c <_gp+0xfffe1910>
   23484:	d9801e04 	addi	r6,sp,120
   23488:	b80b883a 	mov	r5,r23
   2348c:	9809883a 	mov	r4,r19
   23490:	00282cc0 	call	282cc <__sprint_r>
   23494:	103a711e 	bne	r2,zero,21e5c <_gp+0xfffe0310>
   23498:	d8c02017 	ldw	r3,128(sp)
   2349c:	d8801f17 	ldw	r2,124(sp)
   234a0:	da000404 	addi	r8,sp,16
   234a4:	003fee06 	br	23460 <_gp+0xfffe1914>
   234a8:	00bfffc4 	movi	r2,-1
   234ac:	003a6f06 	br	21e6c <_gp+0xfffe0320>
   234b0:	008011c4 	movi	r2,71
   234b4:	1440b816 	blt	r2,r17,23798 <___vfprintf_internal_r+0x1d44>
   234b8:	040000f4 	movhi	r16,3
   234bc:	841f1f04 	addi	r16,r16,31868
   234c0:	00c000c4 	movi	r3,3
   234c4:	00bfdfc4 	movi	r2,-129
   234c8:	d8c02a15 	stw	r3,168(sp)
   234cc:	90a4703a 	and	r18,r18,r2
   234d0:	df002783 	ldbu	fp,158(sp)
   234d4:	d8c02e15 	stw	r3,184(sp)
   234d8:	d8002915 	stw	zero,164(sp)
   234dc:	d8003215 	stw	zero,200(sp)
   234e0:	003b2906 	br	22188 <_gp+0xfffe063c>
   234e4:	d9002d17 	ldw	r4,180(sp)
   234e8:	24c00017 	ldw	r19,0(r4)
   234ec:	21000104 	addi	r4,r4,4
   234f0:	d9002d15 	stw	r4,180(sp)
   234f4:	982dd7fa 	srai	r22,r19,31
   234f8:	b005883a 	mov	r2,r22
   234fc:	003a9f06 	br	21f7c <_gp+0xfffe0430>
   23500:	d9402d17 	ldw	r5,180(sp)
   23504:	d8c02f17 	ldw	r3,188(sp)
   23508:	28800017 	ldw	r2,0(r5)
   2350c:	29400104 	addi	r5,r5,4
   23510:	d9402d15 	stw	r5,180(sp)
   23514:	10c00015 	stw	r3,0(r2)
   23518:	00398606 	br	21b34 <_gp+0xfffdffe8>
   2351c:	d9402d17 	ldw	r5,180(sp)
   23520:	002d883a 	mov	r22,zero
   23524:	2cc00017 	ldw	r19,0(r5)
   23528:	29400104 	addi	r5,r5,4
   2352c:	d9402d15 	stw	r5,180(sp)
   23530:	003c2306 	br	225c0 <_gp+0xfffe0a74>
   23534:	d8c02d17 	ldw	r3,180(sp)
   23538:	d9002917 	ldw	r4,164(sp)
   2353c:	002d883a 	mov	r22,zero
   23540:	18800104 	addi	r2,r3,4
   23544:	1cc0000b 	ldhu	r19,0(r3)
   23548:	203dc10e 	bge	r4,zero,22c50 <_gp+0xfffe1104>
   2354c:	003f7506 	br	23324 <_gp+0xfffe17d8>
   23550:	040000f4 	movhi	r16,3
   23554:	841f1d04 	addi	r16,r16,31860
   23558:	003acc06 	br	2208c <_gp+0xfffe0540>
   2355c:	d9002c17 	ldw	r4,176(sp)
   23560:	d9801e04 	addi	r6,sp,120
   23564:	b80b883a 	mov	r5,r23
   23568:	00282cc0 	call	282cc <__sprint_r>
   2356c:	103a3b1e 	bne	r2,zero,21e5c <_gp+0xfffe0310>
   23570:	dc402617 	ldw	r17,152(sp)
   23574:	d8c02017 	ldw	r3,128(sp)
   23578:	da000404 	addi	r8,sp,16
   2357c:	003f9c06 	br	233f0 <_gp+0xfffe18a4>
   23580:	ac400043 	ldbu	r17,1(r21)
   23584:	94800814 	ori	r18,r18,32
   23588:	ad400044 	addi	r21,r21,1
   2358c:	8c403fcc 	andi	r17,r17,255
   23590:	8c40201c 	xori	r17,r17,128
   23594:	8c7fe004 	addi	r17,r17,-128
   23598:	00398f06 	br	21bd8 <_gp+0xfffe008c>
   2359c:	d8c02d15 	stw	r3,180(sp)
   235a0:	0039883a 	mov	fp,zero
   235a4:	003e3506 	br	22e7c <_gp+0xfffe1330>
   235a8:	d9002c17 	ldw	r4,176(sp)
   235ac:	d9801e04 	addi	r6,sp,120
   235b0:	b80b883a 	mov	r5,r23
   235b4:	00282cc0 	call	282cc <__sprint_r>
   235b8:	103a281e 	bne	r2,zero,21e5c <_gp+0xfffe0310>
   235bc:	d8c02017 	ldw	r3,128(sp)
   235c0:	da000404 	addi	r8,sp,16
   235c4:	003cd006 	br	22908 <_gp+0xfffe0dbc>
   235c8:	8009883a 	mov	r4,r16
   235cc:	da003d15 	stw	r8,244(sp)
   235d0:	00219bc0 	call	219bc <strlen>
   235d4:	d8802e15 	stw	r2,184(sp)
   235d8:	da003d17 	ldw	r8,244(sp)
   235dc:	103c340e 	bge	r2,zero,226b0 <_gp+0xfffe0b64>
   235e0:	0005883a 	mov	r2,zero
   235e4:	003c3206 	br	226b0 <_gp+0xfffe0b64>
   235e8:	d9002c17 	ldw	r4,176(sp)
   235ec:	d9801e04 	addi	r6,sp,120
   235f0:	b80b883a 	mov	r5,r23
   235f4:	00282cc0 	call	282cc <__sprint_r>
   235f8:	103a181e 	bne	r2,zero,21e5c <_gp+0xfffe0310>
   235fc:	d8c02017 	ldw	r3,128(sp)
   23600:	d8801f17 	ldw	r2,124(sp)
   23604:	da000404 	addi	r8,sp,16
   23608:	d9403317 	ldw	r5,204(sp)
   2360c:	10800044 	addi	r2,r2,1
   23610:	44000015 	stw	r16,0(r8)
   23614:	28c7883a 	add	r3,r5,r3
   23618:	003b7d06 	br	22410 <_gp+0xfffe08c4>
   2361c:	010000f4 	movhi	r4,3
   23620:	211f3184 	addi	r4,r4,31942
   23624:	d9003515 	stw	r4,212(sp)
   23628:	003b1406 	br	2227c <_gp+0xfffe0730>
   2362c:	013fffc4 	movi	r4,-1
   23630:	003a3506 	br	21f08 <_gp+0xfffe03bc>
   23634:	0023883a 	mov	r17,zero
   23638:	003d9d06 	br	22cb0 <_gp+0xfffe1164>
   2363c:	d9002c17 	ldw	r4,176(sp)
   23640:	d9801e04 	addi	r6,sp,120
   23644:	b80b883a 	mov	r5,r23
   23648:	00282cc0 	call	282cc <__sprint_r>
   2364c:	103a031e 	bne	r2,zero,21e5c <_gp+0xfffe0310>
   23650:	d8c02017 	ldw	r3,128(sp)
   23654:	da000404 	addi	r8,sp,16
   23658:	003d9406 	br	22cac <_gp+0xfffe1160>
   2365c:	010000f4 	movhi	r4,3
   23660:	211f2d84 	addi	r4,r4,31926
   23664:	d9002b15 	stw	r4,172(sp)
   23668:	d9002b17 	ldw	r4,172(sp)
   2366c:	1c47883a 	add	r3,r3,r17
   23670:	10800044 	addi	r2,r2,1
   23674:	41000015 	stw	r4,0(r8)
   23678:	44400115 	stw	r17,4(r8)
   2367c:	d8c02015 	stw	r3,128(sp)
   23680:	d8801f15 	stw	r2,124(sp)
   23684:	010001c4 	movi	r4,7
   23688:	20bfd716 	blt	r4,r2,235e8 <_gp+0xfffe1a9c>
   2368c:	42000204 	addi	r8,r8,8
   23690:	003fdd06 	br	23608 <_gp+0xfffe1abc>
   23694:	d9002c17 	ldw	r4,176(sp)
   23698:	d9801e04 	addi	r6,sp,120
   2369c:	b80b883a 	mov	r5,r23
   236a0:	00282cc0 	call	282cc <__sprint_r>
   236a4:	1039ed1e 	bne	r2,zero,21e5c <_gp+0xfffe0310>
   236a8:	d8802617 	ldw	r2,152(sp)
   236ac:	d8c02017 	ldw	r3,128(sp)
   236b0:	da000404 	addi	r8,sp,16
   236b4:	003e1006 	br	22ef8 <_gp+0xfffe13ac>
   236b8:	00800044 	movi	r2,1
   236bc:	10803fcc 	andi	r2,r2,255
   236c0:	00c00044 	movi	r3,1
   236c4:	10fa3526 	beq	r2,r3,21f9c <_gp+0xfffe0450>
   236c8:	00c00084 	movi	r3,2
   236cc:	10fbcb26 	beq	r2,r3,225fc <_gp+0xfffe0ab0>
   236d0:	003a8f06 	br	22110 <_gp+0xfffe05c4>
   236d4:	010000f4 	movhi	r4,3
   236d8:	211f3184 	addi	r4,r4,31942
   236dc:	d9003515 	stw	r4,212(sp)
   236e0:	003b7606 	br	224bc <_gp+0xfffe0970>
   236e4:	d8802917 	ldw	r2,164(sp)
   236e8:	00c00184 	movi	r3,6
   236ec:	1880012e 	bgeu	r3,r2,236f4 <___vfprintf_internal_r+0x1ca0>
   236f0:	1805883a 	mov	r2,r3
   236f4:	d8802e15 	stw	r2,184(sp)
   236f8:	1000ef16 	blt	r2,zero,23ab8 <___vfprintf_internal_r+0x2064>
   236fc:	040000f4 	movhi	r16,3
   23700:	d8802a15 	stw	r2,168(sp)
   23704:	dcc02d15 	stw	r19,180(sp)
   23708:	d8002915 	stw	zero,164(sp)
   2370c:	d8003215 	stw	zero,200(sp)
   23710:	841f2b04 	addi	r16,r16,31916
   23714:	0039883a 	mov	fp,zero
   23718:	003aa206 	br	221a4 <_gp+0xfffe0658>
   2371c:	0021883a 	mov	r16,zero
   23720:	003e0706 	br	22f40 <_gp+0xfffe13f4>
   23724:	d9002c17 	ldw	r4,176(sp)
   23728:	d9801e04 	addi	r6,sp,120
   2372c:	b80b883a 	mov	r5,r23
   23730:	00282cc0 	call	282cc <__sprint_r>
   23734:	1039c91e 	bne	r2,zero,21e5c <_gp+0xfffe0310>
   23738:	d8802617 	ldw	r2,152(sp)
   2373c:	d9403317 	ldw	r5,204(sp)
   23740:	d8c02017 	ldw	r3,128(sp)
   23744:	da000404 	addi	r8,sp,16
   23748:	2885c83a 	sub	r2,r5,r2
   2374c:	003dfb06 	br	22f3c <_gp+0xfffe13f0>
   23750:	9080004c 	andi	r2,r18,1
   23754:	103e8f1e 	bne	r2,zero,23194 <_gp+0xfffe1648>
   23758:	d8802117 	ldw	r2,132(sp)
   2375c:	003e9e06 	br	231d8 <_gp+0xfffe168c>
   23760:	1025883a 	mov	r18,r2
   23764:	0039883a 	mov	fp,zero
   23768:	00800084 	movi	r2,2
   2376c:	003fd306 	br	236bc <_gp+0xfffe1b70>
   23770:	07000b44 	movi	fp,45
   23774:	df002785 	stb	fp,158(sp)
   23778:	003a4006 	br	2207c <_gp+0xfffe0530>
   2377c:	00c00b44 	movi	r3,45
   23780:	d8c02785 	stb	r3,158(sp)
   23784:	d8802a15 	stw	r2,168(sp)
   23788:	dc802b17 	ldw	r18,172(sp)
   2378c:	d8002915 	stw	zero,164(sp)
   23790:	07000b44 	movi	fp,45
   23794:	003a8006 	br	22198 <_gp+0xfffe064c>
   23798:	040000f4 	movhi	r16,3
   2379c:	841f2004 	addi	r16,r16,31872
   237a0:	003f4706 	br	234c0 <_gp+0xfffe1974>
   237a4:	d8c02d17 	ldw	r3,180(sp)
   237a8:	d9002f17 	ldw	r4,188(sp)
   237ac:	18800017 	ldw	r2,0(r3)
   237b0:	18c00104 	addi	r3,r3,4
   237b4:	d8c02d15 	stw	r3,180(sp)
   237b8:	11000015 	stw	r4,0(r2)
   237bc:	0038dd06 	br	21b34 <_gp+0xfffdffe8>
   237c0:	dd802617 	ldw	r22,152(sp)
   237c4:	00bfff44 	movi	r2,-3
   237c8:	b0801c16 	blt	r22,r2,2383c <___vfprintf_internal_r+0x1de8>
   237cc:	d9402917 	ldw	r5,164(sp)
   237d0:	2d801a16 	blt	r5,r22,2383c <___vfprintf_internal_r+0x1de8>
   237d4:	dd803215 	stw	r22,200(sp)
   237d8:	003e8906 	br	23200 <_gp+0xfffe16b4>
   237dc:	010000f4 	movhi	r4,3
   237e0:	211f2d84 	addi	r4,r4,31926
   237e4:	d9002b15 	stw	r4,172(sp)
   237e8:	003c9106 	br	22a30 <_gp+0xfffe0ee4>
   237ec:	e005883a 	mov	r2,fp
   237f0:	003e7906 	br	231d8 <_gp+0xfffe168c>
   237f4:	d9402917 	ldw	r5,164(sp)
   237f8:	df002783 	ldbu	fp,158(sp)
   237fc:	dcc02d15 	stw	r19,180(sp)
   23800:	d9402a15 	stw	r5,168(sp)
   23804:	d9402e15 	stw	r5,184(sp)
   23808:	d8002915 	stw	zero,164(sp)
   2380c:	d8003215 	stw	zero,200(sp)
   23810:	003a5d06 	br	22188 <_gp+0xfffe063c>
   23814:	9080004c 	andi	r2,r18,1
   23818:	0039883a 	mov	fp,zero
   2381c:	10000426 	beq	r2,zero,23830 <___vfprintf_internal_r+0x1ddc>
   23820:	00800c04 	movi	r2,48
   23824:	dc001dc4 	addi	r16,sp,119
   23828:	d8801dc5 	stb	r2,119(sp)
   2382c:	003b8006 	br	22630 <_gp+0xfffe0ae4>
   23830:	d8002e15 	stw	zero,184(sp)
   23834:	dc001e04 	addi	r16,sp,120
   23838:	003a4d06 	br	22170 <_gp+0xfffe0624>
   2383c:	8c7fff84 	addi	r17,r17,-2
   23840:	b5bfffc4 	addi	r22,r22,-1
   23844:	dd802615 	stw	r22,152(sp)
   23848:	dc4022c5 	stb	r17,139(sp)
   2384c:	b000bf16 	blt	r22,zero,23b4c <___vfprintf_internal_r+0x20f8>
   23850:	00800ac4 	movi	r2,43
   23854:	d8802305 	stb	r2,140(sp)
   23858:	00800244 	movi	r2,9
   2385c:	15807016 	blt	r2,r22,23a20 <___vfprintf_internal_r+0x1fcc>
   23860:	00800c04 	movi	r2,48
   23864:	b5800c04 	addi	r22,r22,48
   23868:	d8802345 	stb	r2,141(sp)
   2386c:	dd802385 	stb	r22,142(sp)
   23870:	d88023c4 	addi	r2,sp,143
   23874:	df0022c4 	addi	fp,sp,139
   23878:	d8c03317 	ldw	r3,204(sp)
   2387c:	1739c83a 	sub	fp,r2,fp
   23880:	d9003317 	ldw	r4,204(sp)
   23884:	e0c7883a 	add	r3,fp,r3
   23888:	df003a15 	stw	fp,232(sp)
   2388c:	d8c02e15 	stw	r3,184(sp)
   23890:	00800044 	movi	r2,1
   23894:	1100b30e 	bge	r2,r4,23b64 <___vfprintf_internal_r+0x2110>
   23898:	d8c02e17 	ldw	r3,184(sp)
   2389c:	18c00044 	addi	r3,r3,1
   238a0:	d8c02e15 	stw	r3,184(sp)
   238a4:	1805883a 	mov	r2,r3
   238a8:	1800ac16 	blt	r3,zero,23b5c <___vfprintf_internal_r+0x2108>
   238ac:	d8003215 	stw	zero,200(sp)
   238b0:	003e5d06 	br	23228 <_gp+0xfffe16dc>
   238b4:	d9002c17 	ldw	r4,176(sp)
   238b8:	d9801e04 	addi	r6,sp,120
   238bc:	b80b883a 	mov	r5,r23
   238c0:	00282cc0 	call	282cc <__sprint_r>
   238c4:	1039651e 	bne	r2,zero,21e5c <_gp+0xfffe0310>
   238c8:	dc402617 	ldw	r17,152(sp)
   238cc:	d8c02017 	ldw	r3,128(sp)
   238d0:	d8801f17 	ldw	r2,124(sp)
   238d4:	da000404 	addi	r8,sp,16
   238d8:	003ed606 	br	23434 <_gp+0xfffe18e8>
   238dc:	582b883a 	mov	r21,r11
   238e0:	d8002915 	stw	zero,164(sp)
   238e4:	0038bd06 	br	21bdc <_gp+0xfffe0090>
   238e8:	d8802917 	ldw	r2,164(sp)
   238ec:	103e071e 	bne	r2,zero,2310c <_gp+0xfffe15c0>
   238f0:	dc002915 	stw	r16,164(sp)
   238f4:	003e0506 	br	2310c <_gp+0xfffe15c0>
   238f8:	d9002917 	ldw	r4,164(sp)
   238fc:	20c00044 	addi	r3,r4,1
   23900:	003e0f06 	br	23140 <_gp+0xfffe15f4>
   23904:	01400184 	movi	r5,6
   23908:	d9402915 	stw	r5,164(sp)
   2390c:	003dff06 	br	2310c <_gp+0xfffe15c0>
   23910:	d8802104 	addi	r2,sp,132
   23914:	d8800315 	stw	r2,12(sp)
   23918:	d8802504 	addi	r2,sp,148
   2391c:	d8800215 	stw	r2,8(sp)
   23920:	d8802604 	addi	r2,sp,152
   23924:	d8800115 	stw	r2,4(sp)
   23928:	d8802917 	ldw	r2,164(sp)
   2392c:	d9403617 	ldw	r5,216(sp)
   23930:	d9002c17 	ldw	r4,176(sp)
   23934:	d8800015 	stw	r2,0(sp)
   23938:	01c000c4 	movi	r7,3
   2393c:	980d883a 	mov	r6,r19
   23940:	da003d15 	stw	r8,244(sp)
   23944:	00240780 	call	24078 <_dtoa_r>
   23948:	d8c02917 	ldw	r3,164(sp)
   2394c:	da003d17 	ldw	r8,244(sp)
   23950:	1021883a 	mov	r16,r2
   23954:	10f9883a 	add	fp,r2,r3
   23958:	81000007 	ldb	r4,0(r16)
   2395c:	00800c04 	movi	r2,48
   23960:	20805e26 	beq	r4,r2,23adc <___vfprintf_internal_r+0x2088>
   23964:	d8c02617 	ldw	r3,152(sp)
   23968:	e0f9883a 	add	fp,fp,r3
   2396c:	003e0a06 	br	23198 <_gp+0xfffe164c>
   23970:	00c00b44 	movi	r3,45
   23974:	24e0003c 	xorhi	r19,r4,32768
   23978:	d8c02a05 	stb	r3,168(sp)
   2397c:	003de906 	br	23124 <_gp+0xfffe15d8>
   23980:	d8c03217 	ldw	r3,200(sp)
   23984:	00c07a0e 	bge	zero,r3,23b70 <___vfprintf_internal_r+0x211c>
   23988:	00800044 	movi	r2,1
   2398c:	d9003317 	ldw	r4,204(sp)
   23990:	1105883a 	add	r2,r2,r4
   23994:	d8802e15 	stw	r2,184(sp)
   23998:	10004e16 	blt	r2,zero,23ad4 <___vfprintf_internal_r+0x2080>
   2399c:	044019c4 	movi	r17,103
   239a0:	003e2106 	br	23228 <_gp+0xfffe16dc>
   239a4:	d9002917 	ldw	r4,164(sp)
   239a8:	d8802104 	addi	r2,sp,132
   239ac:	d8800315 	stw	r2,12(sp)
   239b0:	d9000015 	stw	r4,0(sp)
   239b4:	d8802504 	addi	r2,sp,148
   239b8:	d9403617 	ldw	r5,216(sp)
   239bc:	d9002c17 	ldw	r4,176(sp)
   239c0:	d8800215 	stw	r2,8(sp)
   239c4:	d8802604 	addi	r2,sp,152
   239c8:	d8800115 	stw	r2,4(sp)
   239cc:	01c000c4 	movi	r7,3
   239d0:	980d883a 	mov	r6,r19
   239d4:	da003d15 	stw	r8,244(sp)
   239d8:	00240780 	call	24078 <_dtoa_r>
   239dc:	d8c02917 	ldw	r3,164(sp)
   239e0:	da003d17 	ldw	r8,244(sp)
   239e4:	1021883a 	mov	r16,r2
   239e8:	00801184 	movi	r2,70
   239ec:	80f9883a 	add	fp,r16,r3
   239f0:	88bfd926 	beq	r17,r2,23958 <_gp+0xfffe1e0c>
   239f4:	003de806 	br	23198 <_gp+0xfffe164c>
   239f8:	d9002917 	ldw	r4,164(sp)
   239fc:	00c04d0e 	bge	zero,r3,23b34 <___vfprintf_internal_r+0x20e0>
   23a00:	2000441e 	bne	r4,zero,23b14 <___vfprintf_internal_r+0x20c0>
   23a04:	9480004c 	andi	r18,r18,1
   23a08:	9000421e 	bne	r18,zero,23b14 <___vfprintf_internal_r+0x20c0>
   23a0c:	1805883a 	mov	r2,r3
   23a10:	18007016 	blt	r3,zero,23bd4 <___vfprintf_internal_r+0x2180>
   23a14:	d8c03217 	ldw	r3,200(sp)
   23a18:	d8c02e15 	stw	r3,184(sp)
   23a1c:	003e0206 	br	23228 <_gp+0xfffe16dc>
   23a20:	df0022c4 	addi	fp,sp,139
   23a24:	dc002915 	stw	r16,164(sp)
   23a28:	4027883a 	mov	r19,r8
   23a2c:	e021883a 	mov	r16,fp
   23a30:	b009883a 	mov	r4,r22
   23a34:	01400284 	movi	r5,10
   23a38:	002ac800 	call	2ac80 <__modsi3>
   23a3c:	10800c04 	addi	r2,r2,48
   23a40:	843fffc4 	addi	r16,r16,-1
   23a44:	b009883a 	mov	r4,r22
   23a48:	01400284 	movi	r5,10
   23a4c:	80800005 	stb	r2,0(r16)
   23a50:	002abfc0 	call	2abfc <__divsi3>
   23a54:	102d883a 	mov	r22,r2
   23a58:	00800244 	movi	r2,9
   23a5c:	15bff416 	blt	r2,r22,23a30 <_gp+0xfffe1ee4>
   23a60:	9811883a 	mov	r8,r19
   23a64:	b0800c04 	addi	r2,r22,48
   23a68:	8027883a 	mov	r19,r16
   23a6c:	997fffc4 	addi	r5,r19,-1
   23a70:	98bfffc5 	stb	r2,-1(r19)
   23a74:	dc002917 	ldw	r16,164(sp)
   23a78:	2f006a2e 	bgeu	r5,fp,23c24 <___vfprintf_internal_r+0x21d0>
   23a7c:	d9c02384 	addi	r7,sp,142
   23a80:	3ccfc83a 	sub	r7,r7,r19
   23a84:	d9002344 	addi	r4,sp,141
   23a88:	e1cf883a 	add	r7,fp,r7
   23a8c:	00000106 	br	23a94 <___vfprintf_internal_r+0x2040>
   23a90:	28800003 	ldbu	r2,0(r5)
   23a94:	20800005 	stb	r2,0(r4)
   23a98:	21000044 	addi	r4,r4,1
   23a9c:	29400044 	addi	r5,r5,1
   23aa0:	393ffb1e 	bne	r7,r4,23a90 <_gp+0xfffe1f44>
   23aa4:	d8802304 	addi	r2,sp,140
   23aa8:	14c5c83a 	sub	r2,r2,r19
   23aac:	d8c02344 	addi	r3,sp,141
   23ab0:	1885883a 	add	r2,r3,r2
   23ab4:	003f7006 	br	23878 <_gp+0xfffe1d2c>
   23ab8:	0005883a 	mov	r2,zero
   23abc:	003f0f06 	br	236fc <_gp+0xfffe1bb0>
   23ac0:	d8c03217 	ldw	r3,200(sp)
   23ac4:	18c00044 	addi	r3,r3,1
   23ac8:	d8c02e15 	stw	r3,184(sp)
   23acc:	1805883a 	mov	r2,r3
   23ad0:	183fb20e 	bge	r3,zero,2399c <_gp+0xfffe1e50>
   23ad4:	0005883a 	mov	r2,zero
   23ad8:	003fb006 	br	2399c <_gp+0xfffe1e50>
   23adc:	d9003617 	ldw	r4,216(sp)
   23ae0:	000d883a 	mov	r6,zero
   23ae4:	000f883a 	mov	r7,zero
   23ae8:	980b883a 	mov	r5,r19
   23aec:	d8c03c15 	stw	r3,240(sp)
   23af0:	da003d15 	stw	r8,244(sp)
   23af4:	002bf440 	call	2bf44 <__eqdf2>
   23af8:	d8c03c17 	ldw	r3,240(sp)
   23afc:	da003d17 	ldw	r8,244(sp)
   23b00:	103f9826 	beq	r2,zero,23964 <_gp+0xfffe1e18>
   23b04:	00800044 	movi	r2,1
   23b08:	10c7c83a 	sub	r3,r2,r3
   23b0c:	d8c02615 	stw	r3,152(sp)
   23b10:	003f9506 	br	23968 <_gp+0xfffe1e1c>
   23b14:	d9002917 	ldw	r4,164(sp)
   23b18:	d8c03217 	ldw	r3,200(sp)
   23b1c:	20800044 	addi	r2,r4,1
   23b20:	1885883a 	add	r2,r3,r2
   23b24:	d8802e15 	stw	r2,184(sp)
   23b28:	103dbf0e 	bge	r2,zero,23228 <_gp+0xfffe16dc>
   23b2c:	0005883a 	mov	r2,zero
   23b30:	003dbd06 	br	23228 <_gp+0xfffe16dc>
   23b34:	2000211e 	bne	r4,zero,23bbc <___vfprintf_internal_r+0x2168>
   23b38:	9480004c 	andi	r18,r18,1
   23b3c:	90001f1e 	bne	r18,zero,23bbc <___vfprintf_internal_r+0x2168>
   23b40:	00800044 	movi	r2,1
   23b44:	d8802e15 	stw	r2,184(sp)
   23b48:	003db706 	br	23228 <_gp+0xfffe16dc>
   23b4c:	00800b44 	movi	r2,45
   23b50:	05adc83a 	sub	r22,zero,r22
   23b54:	d8802305 	stb	r2,140(sp)
   23b58:	003f3f06 	br	23858 <_gp+0xfffe1d0c>
   23b5c:	0005883a 	mov	r2,zero
   23b60:	003f5206 	br	238ac <_gp+0xfffe1d60>
   23b64:	90a4703a 	and	r18,r18,r2
   23b68:	903f4e26 	beq	r18,zero,238a4 <_gp+0xfffe1d58>
   23b6c:	003f4a06 	br	23898 <_gp+0xfffe1d4c>
   23b70:	00800084 	movi	r2,2
   23b74:	10c5c83a 	sub	r2,r2,r3
   23b78:	003f8406 	br	2398c <_gp+0xfffe1e40>
   23b7c:	d8802d17 	ldw	r2,180(sp)
   23b80:	d9002d17 	ldw	r4,180(sp)
   23b84:	ac400043 	ldbu	r17,1(r21)
   23b88:	10800017 	ldw	r2,0(r2)
   23b8c:	582b883a 	mov	r21,r11
   23b90:	d8802915 	stw	r2,164(sp)
   23b94:	20800104 	addi	r2,r4,4
   23b98:	d9002917 	ldw	r4,164(sp)
   23b9c:	d8802d15 	stw	r2,180(sp)
   23ba0:	203e7a0e 	bge	r4,zero,2358c <_gp+0xfffe1a40>
   23ba4:	8c403fcc 	andi	r17,r17,255
   23ba8:	00bfffc4 	movi	r2,-1
   23bac:	8c40201c 	xori	r17,r17,128
   23bb0:	d8802915 	stw	r2,164(sp)
   23bb4:	8c7fe004 	addi	r17,r17,-128
   23bb8:	00380706 	br	21bd8 <_gp+0xfffe008c>
   23bbc:	d8c02917 	ldw	r3,164(sp)
   23bc0:	18c00084 	addi	r3,r3,2
   23bc4:	d8c02e15 	stw	r3,184(sp)
   23bc8:	1805883a 	mov	r2,r3
   23bcc:	183d960e 	bge	r3,zero,23228 <_gp+0xfffe16dc>
   23bd0:	003fd606 	br	23b2c <_gp+0xfffe1fe0>
   23bd4:	0005883a 	mov	r2,zero
   23bd8:	003f8e06 	br	23a14 <_gp+0xfffe1ec8>
   23bdc:	9080004c 	andi	r2,r18,1
   23be0:	103f811e 	bne	r2,zero,239e8 <_gp+0xfffe1e9c>
   23be4:	d8802117 	ldw	r2,132(sp)
   23be8:	1405c83a 	sub	r2,r2,r16
   23bec:	d8803315 	stw	r2,204(sp)
   23bf0:	b47ef326 	beq	r22,r17,237c0 <_gp+0xfffe1c74>
   23bf4:	dd802617 	ldw	r22,152(sp)
   23bf8:	003f1106 	br	23840 <_gp+0xfffe1cf4>
   23bfc:	d9c02785 	stb	r7,158(sp)
   23c00:	00390406 	br	22014 <_gp+0xfffe04c8>
   23c04:	d9c02785 	stb	r7,158(sp)
   23c08:	0038d306 	br	21f58 <_gp+0xfffe040c>
   23c0c:	d9c02785 	stb	r7,158(sp)
   23c10:	003a6106 	br	22598 <_gp+0xfffe0a4c>
   23c14:	d9c02785 	stb	r7,158(sp)
   23c18:	003af806 	br	227fc <_gp+0xfffe0cb0>
   23c1c:	0005883a 	mov	r2,zero
   23c20:	003d7e06 	br	2321c <_gp+0xfffe16d0>
   23c24:	d8802344 	addi	r2,sp,141
   23c28:	003f1306 	br	23878 <_gp+0xfffe1d2c>
   23c2c:	d9c02785 	stb	r7,158(sp)
   23c30:	00392306 	br	220c0 <_gp+0xfffe0574>
   23c34:	d9c02785 	stb	r7,158(sp)
   23c38:	003aa906 	br	226e0 <_gp+0xfffe0b94>
   23c3c:	d9c02785 	stb	r7,158(sp)
   23c40:	003a3d06 	br	22538 <_gp+0xfffe09ec>
   23c44:	d9c02785 	stb	r7,158(sp)
   23c48:	003aca06 	br	22774 <_gp+0xfffe0c28>

00023c4c <__vfprintf_internal>:
   23c4c:	00800134 	movhi	r2,4
   23c50:	10a6d604 	addi	r2,r2,-25768
   23c54:	300f883a 	mov	r7,r6
   23c58:	280d883a 	mov	r6,r5
   23c5c:	200b883a 	mov	r5,r4
   23c60:	11000017 	ldw	r4,0(r2)
   23c64:	0021a541 	jmpi	21a54 <___vfprintf_internal_r>

00023c68 <__sbprintf>:
   23c68:	2880030b 	ldhu	r2,12(r5)
   23c6c:	2ac01917 	ldw	r11,100(r5)
   23c70:	2a80038b 	ldhu	r10,14(r5)
   23c74:	2a400717 	ldw	r9,28(r5)
   23c78:	2a000917 	ldw	r8,36(r5)
   23c7c:	defee204 	addi	sp,sp,-1144
   23c80:	00c10004 	movi	r3,1024
   23c84:	dc011a15 	stw	r16,1128(sp)
   23c88:	10bfff4c 	andi	r2,r2,65533
   23c8c:	2821883a 	mov	r16,r5
   23c90:	d8cb883a 	add	r5,sp,r3
   23c94:	dc811c15 	stw	r18,1136(sp)
   23c98:	dc411b15 	stw	r17,1132(sp)
   23c9c:	dfc11d15 	stw	ra,1140(sp)
   23ca0:	2025883a 	mov	r18,r4
   23ca4:	d881030d 	sth	r2,1036(sp)
   23ca8:	dac11915 	stw	r11,1124(sp)
   23cac:	da81038d 	sth	r10,1038(sp)
   23cb0:	da410715 	stw	r9,1052(sp)
   23cb4:	da010915 	stw	r8,1060(sp)
   23cb8:	dec10015 	stw	sp,1024(sp)
   23cbc:	dec10415 	stw	sp,1040(sp)
   23cc0:	d8c10215 	stw	r3,1032(sp)
   23cc4:	d8c10515 	stw	r3,1044(sp)
   23cc8:	d8010615 	stw	zero,1048(sp)
   23ccc:	0021a540 	call	21a54 <___vfprintf_internal_r>
   23cd0:	1023883a 	mov	r17,r2
   23cd4:	10000416 	blt	r2,zero,23ce8 <__sbprintf+0x80>
   23cd8:	d9410004 	addi	r5,sp,1024
   23cdc:	9009883a 	mov	r4,r18
   23ce0:	002591c0 	call	2591c <_fflush_r>
   23ce4:	10000d1e 	bne	r2,zero,23d1c <__sbprintf+0xb4>
   23ce8:	d881030b 	ldhu	r2,1036(sp)
   23cec:	1080100c 	andi	r2,r2,64
   23cf0:	10000326 	beq	r2,zero,23d00 <__sbprintf+0x98>
   23cf4:	8080030b 	ldhu	r2,12(r16)
   23cf8:	10801014 	ori	r2,r2,64
   23cfc:	8080030d 	sth	r2,12(r16)
   23d00:	8805883a 	mov	r2,r17
   23d04:	dfc11d17 	ldw	ra,1140(sp)
   23d08:	dc811c17 	ldw	r18,1136(sp)
   23d0c:	dc411b17 	ldw	r17,1132(sp)
   23d10:	dc011a17 	ldw	r16,1128(sp)
   23d14:	dec11e04 	addi	sp,sp,1144
   23d18:	f800283a 	ret
   23d1c:	047fffc4 	movi	r17,-1
   23d20:	003ff106 	br	23ce8 <_gp+0xfffe219c>

00023d24 <__swsetup_r>:
   23d24:	00800134 	movhi	r2,4
   23d28:	defffd04 	addi	sp,sp,-12
   23d2c:	10a6d604 	addi	r2,r2,-25768
   23d30:	dc400115 	stw	r17,4(sp)
   23d34:	2023883a 	mov	r17,r4
   23d38:	11000017 	ldw	r4,0(r2)
   23d3c:	dc000015 	stw	r16,0(sp)
   23d40:	dfc00215 	stw	ra,8(sp)
   23d44:	2821883a 	mov	r16,r5
   23d48:	20000226 	beq	r4,zero,23d54 <__swsetup_r+0x30>
   23d4c:	20800e17 	ldw	r2,56(r4)
   23d50:	10003126 	beq	r2,zero,23e18 <__swsetup_r+0xf4>
   23d54:	8080030b 	ldhu	r2,12(r16)
   23d58:	10c0020c 	andi	r3,r2,8
   23d5c:	1009883a 	mov	r4,r2
   23d60:	18000f26 	beq	r3,zero,23da0 <__swsetup_r+0x7c>
   23d64:	80c00417 	ldw	r3,16(r16)
   23d68:	18001526 	beq	r3,zero,23dc0 <__swsetup_r+0x9c>
   23d6c:	1100004c 	andi	r4,r2,1
   23d70:	20001c1e 	bne	r4,zero,23de4 <__swsetup_r+0xc0>
   23d74:	1080008c 	andi	r2,r2,2
   23d78:	1000291e 	bne	r2,zero,23e20 <__swsetup_r+0xfc>
   23d7c:	80800517 	ldw	r2,20(r16)
   23d80:	80800215 	stw	r2,8(r16)
   23d84:	18001c26 	beq	r3,zero,23df8 <__swsetup_r+0xd4>
   23d88:	0005883a 	mov	r2,zero
   23d8c:	dfc00217 	ldw	ra,8(sp)
   23d90:	dc400117 	ldw	r17,4(sp)
   23d94:	dc000017 	ldw	r16,0(sp)
   23d98:	dec00304 	addi	sp,sp,12
   23d9c:	f800283a 	ret
   23da0:	2080040c 	andi	r2,r4,16
   23da4:	10002e26 	beq	r2,zero,23e60 <__swsetup_r+0x13c>
   23da8:	2080010c 	andi	r2,r4,4
   23dac:	10001e1e 	bne	r2,zero,23e28 <__swsetup_r+0x104>
   23db0:	80c00417 	ldw	r3,16(r16)
   23db4:	20800214 	ori	r2,r4,8
   23db8:	8080030d 	sth	r2,12(r16)
   23dbc:	183feb1e 	bne	r3,zero,23d6c <_gp+0xfffe2220>
   23dc0:	1100a00c 	andi	r4,r2,640
   23dc4:	01408004 	movi	r5,512
   23dc8:	217fe826 	beq	r4,r5,23d6c <_gp+0xfffe2220>
   23dcc:	800b883a 	mov	r5,r16
   23dd0:	8809883a 	mov	r4,r17
   23dd4:	002689c0 	call	2689c <__smakebuf_r>
   23dd8:	8080030b 	ldhu	r2,12(r16)
   23ddc:	80c00417 	ldw	r3,16(r16)
   23de0:	003fe206 	br	23d6c <_gp+0xfffe2220>
   23de4:	80800517 	ldw	r2,20(r16)
   23de8:	80000215 	stw	zero,8(r16)
   23dec:	0085c83a 	sub	r2,zero,r2
   23df0:	80800615 	stw	r2,24(r16)
   23df4:	183fe41e 	bne	r3,zero,23d88 <_gp+0xfffe223c>
   23df8:	80c0030b 	ldhu	r3,12(r16)
   23dfc:	0005883a 	mov	r2,zero
   23e00:	1900200c 	andi	r4,r3,128
   23e04:	203fe126 	beq	r4,zero,23d8c <_gp+0xfffe2240>
   23e08:	18c01014 	ori	r3,r3,64
   23e0c:	80c0030d 	sth	r3,12(r16)
   23e10:	00bfffc4 	movi	r2,-1
   23e14:	003fdd06 	br	23d8c <_gp+0xfffe2240>
   23e18:	0025cf80 	call	25cf8 <__sinit>
   23e1c:	003fcd06 	br	23d54 <_gp+0xfffe2208>
   23e20:	0005883a 	mov	r2,zero
   23e24:	003fd606 	br	23d80 <_gp+0xfffe2234>
   23e28:	81400c17 	ldw	r5,48(r16)
   23e2c:	28000626 	beq	r5,zero,23e48 <__swsetup_r+0x124>
   23e30:	80801004 	addi	r2,r16,64
   23e34:	28800326 	beq	r5,r2,23e44 <__swsetup_r+0x120>
   23e38:	8809883a 	mov	r4,r17
   23e3c:	0025e6c0 	call	25e6c <_free_r>
   23e40:	8100030b 	ldhu	r4,12(r16)
   23e44:	80000c15 	stw	zero,48(r16)
   23e48:	80c00417 	ldw	r3,16(r16)
   23e4c:	00bff6c4 	movi	r2,-37
   23e50:	1108703a 	and	r4,r2,r4
   23e54:	80000115 	stw	zero,4(r16)
   23e58:	80c00015 	stw	r3,0(r16)
   23e5c:	003fd506 	br	23db4 <_gp+0xfffe2268>
   23e60:	00800244 	movi	r2,9
   23e64:	88800015 	stw	r2,0(r17)
   23e68:	20801014 	ori	r2,r4,64
   23e6c:	8080030d 	sth	r2,12(r16)
   23e70:	00bfffc4 	movi	r2,-1
   23e74:	003fc506 	br	23d8c <_gp+0xfffe2240>

00023e78 <quorem>:
   23e78:	defff704 	addi	sp,sp,-36
   23e7c:	dc800215 	stw	r18,8(sp)
   23e80:	20800417 	ldw	r2,16(r4)
   23e84:	2c800417 	ldw	r18,16(r5)
   23e88:	dfc00815 	stw	ra,32(sp)
   23e8c:	ddc00715 	stw	r23,28(sp)
   23e90:	dd800615 	stw	r22,24(sp)
   23e94:	dd400515 	stw	r21,20(sp)
   23e98:	dd000415 	stw	r20,16(sp)
   23e9c:	dcc00315 	stw	r19,12(sp)
   23ea0:	dc400115 	stw	r17,4(sp)
   23ea4:	dc000015 	stw	r16,0(sp)
   23ea8:	14807116 	blt	r2,r18,24070 <quorem+0x1f8>
   23eac:	94bfffc4 	addi	r18,r18,-1
   23eb0:	94ad883a 	add	r22,r18,r18
   23eb4:	b5ad883a 	add	r22,r22,r22
   23eb8:	2c400504 	addi	r17,r5,20
   23ebc:	8da9883a 	add	r20,r17,r22
   23ec0:	25400504 	addi	r21,r4,20
   23ec4:	282f883a 	mov	r23,r5
   23ec8:	adad883a 	add	r22,r21,r22
   23ecc:	a1400017 	ldw	r5,0(r20)
   23ed0:	2021883a 	mov	r16,r4
   23ed4:	b1000017 	ldw	r4,0(r22)
   23ed8:	29400044 	addi	r5,r5,1
   23edc:	002acf40 	call	2acf4 <__udivsi3>
   23ee0:	1027883a 	mov	r19,r2
   23ee4:	10002c26 	beq	r2,zero,23f98 <quorem+0x120>
   23ee8:	a813883a 	mov	r9,r21
   23eec:	880b883a 	mov	r5,r17
   23ef0:	0009883a 	mov	r4,zero
   23ef4:	000d883a 	mov	r6,zero
   23ef8:	2a000017 	ldw	r8,0(r5)
   23efc:	49c00017 	ldw	r7,0(r9)
   23f00:	29400104 	addi	r5,r5,4
   23f04:	40bfffcc 	andi	r2,r8,65535
   23f08:	14c5383a 	mul	r2,r2,r19
   23f0c:	4010d43a 	srli	r8,r8,16
   23f10:	38ffffcc 	andi	r3,r7,65535
   23f14:	1105883a 	add	r2,r2,r4
   23f18:	1008d43a 	srli	r4,r2,16
   23f1c:	44d1383a 	mul	r8,r8,r19
   23f20:	198d883a 	add	r6,r3,r6
   23f24:	10ffffcc 	andi	r3,r2,65535
   23f28:	30c7c83a 	sub	r3,r6,r3
   23f2c:	380ed43a 	srli	r7,r7,16
   23f30:	4105883a 	add	r2,r8,r4
   23f34:	180dd43a 	srai	r6,r3,16
   23f38:	113fffcc 	andi	r4,r2,65535
   23f3c:	390fc83a 	sub	r7,r7,r4
   23f40:	398d883a 	add	r6,r7,r6
   23f44:	300e943a 	slli	r7,r6,16
   23f48:	18ffffcc 	andi	r3,r3,65535
   23f4c:	1008d43a 	srli	r4,r2,16
   23f50:	38ceb03a 	or	r7,r7,r3
   23f54:	49c00015 	stw	r7,0(r9)
   23f58:	300dd43a 	srai	r6,r6,16
   23f5c:	4a400104 	addi	r9,r9,4
   23f60:	a17fe52e 	bgeu	r20,r5,23ef8 <_gp+0xfffe23ac>
   23f64:	b0800017 	ldw	r2,0(r22)
   23f68:	10000b1e 	bne	r2,zero,23f98 <quorem+0x120>
   23f6c:	b0bfff04 	addi	r2,r22,-4
   23f70:	a880082e 	bgeu	r21,r2,23f94 <quorem+0x11c>
   23f74:	b0ffff17 	ldw	r3,-4(r22)
   23f78:	18000326 	beq	r3,zero,23f88 <quorem+0x110>
   23f7c:	00000506 	br	23f94 <quorem+0x11c>
   23f80:	10c00017 	ldw	r3,0(r2)
   23f84:	1800031e 	bne	r3,zero,23f94 <quorem+0x11c>
   23f88:	10bfff04 	addi	r2,r2,-4
   23f8c:	94bfffc4 	addi	r18,r18,-1
   23f90:	a8bffb36 	bltu	r21,r2,23f80 <_gp+0xfffe2434>
   23f94:	84800415 	stw	r18,16(r16)
   23f98:	b80b883a 	mov	r5,r23
   23f9c:	8009883a 	mov	r4,r16
   23fa0:	00276a80 	call	276a8 <__mcmp>
   23fa4:	10002616 	blt	r2,zero,24040 <quorem+0x1c8>
   23fa8:	9cc00044 	addi	r19,r19,1
   23fac:	a805883a 	mov	r2,r21
   23fb0:	000b883a 	mov	r5,zero
   23fb4:	11000017 	ldw	r4,0(r2)
   23fb8:	89800017 	ldw	r6,0(r17)
   23fbc:	10800104 	addi	r2,r2,4
   23fc0:	20ffffcc 	andi	r3,r4,65535
   23fc4:	194b883a 	add	r5,r3,r5
   23fc8:	30ffffcc 	andi	r3,r6,65535
   23fcc:	28c7c83a 	sub	r3,r5,r3
   23fd0:	300cd43a 	srli	r6,r6,16
   23fd4:	2008d43a 	srli	r4,r4,16
   23fd8:	180bd43a 	srai	r5,r3,16
   23fdc:	18ffffcc 	andi	r3,r3,65535
   23fe0:	2189c83a 	sub	r4,r4,r6
   23fe4:	2149883a 	add	r4,r4,r5
   23fe8:	200c943a 	slli	r6,r4,16
   23fec:	8c400104 	addi	r17,r17,4
   23ff0:	200bd43a 	srai	r5,r4,16
   23ff4:	30c6b03a 	or	r3,r6,r3
   23ff8:	10ffff15 	stw	r3,-4(r2)
   23ffc:	a47fed2e 	bgeu	r20,r17,23fb4 <_gp+0xfffe2468>
   24000:	9485883a 	add	r2,r18,r18
   24004:	1085883a 	add	r2,r2,r2
   24008:	a887883a 	add	r3,r21,r2
   2400c:	18800017 	ldw	r2,0(r3)
   24010:	10000b1e 	bne	r2,zero,24040 <quorem+0x1c8>
   24014:	18bfff04 	addi	r2,r3,-4
   24018:	a880082e 	bgeu	r21,r2,2403c <quorem+0x1c4>
   2401c:	18ffff17 	ldw	r3,-4(r3)
   24020:	18000326 	beq	r3,zero,24030 <quorem+0x1b8>
   24024:	00000506 	br	2403c <quorem+0x1c4>
   24028:	10c00017 	ldw	r3,0(r2)
   2402c:	1800031e 	bne	r3,zero,2403c <quorem+0x1c4>
   24030:	10bfff04 	addi	r2,r2,-4
   24034:	94bfffc4 	addi	r18,r18,-1
   24038:	a8bffb36 	bltu	r21,r2,24028 <_gp+0xfffe24dc>
   2403c:	84800415 	stw	r18,16(r16)
   24040:	9805883a 	mov	r2,r19
   24044:	dfc00817 	ldw	ra,32(sp)
   24048:	ddc00717 	ldw	r23,28(sp)
   2404c:	dd800617 	ldw	r22,24(sp)
   24050:	dd400517 	ldw	r21,20(sp)
   24054:	dd000417 	ldw	r20,16(sp)
   24058:	dcc00317 	ldw	r19,12(sp)
   2405c:	dc800217 	ldw	r18,8(sp)
   24060:	dc400117 	ldw	r17,4(sp)
   24064:	dc000017 	ldw	r16,0(sp)
   24068:	dec00904 	addi	sp,sp,36
   2406c:	f800283a 	ret
   24070:	0005883a 	mov	r2,zero
   24074:	003ff306 	br	24044 <_gp+0xfffe24f8>

00024078 <_dtoa_r>:
   24078:	20801017 	ldw	r2,64(r4)
   2407c:	deffde04 	addi	sp,sp,-136
   24080:	df002015 	stw	fp,128(sp)
   24084:	dcc01b15 	stw	r19,108(sp)
   24088:	dc801a15 	stw	r18,104(sp)
   2408c:	dc401915 	stw	r17,100(sp)
   24090:	dc001815 	stw	r16,96(sp)
   24094:	dfc02115 	stw	ra,132(sp)
   24098:	ddc01f15 	stw	r23,124(sp)
   2409c:	dd801e15 	stw	r22,120(sp)
   240a0:	dd401d15 	stw	r21,116(sp)
   240a4:	dd001c15 	stw	r20,112(sp)
   240a8:	d9c00315 	stw	r7,12(sp)
   240ac:	2039883a 	mov	fp,r4
   240b0:	3023883a 	mov	r17,r6
   240b4:	2825883a 	mov	r18,r5
   240b8:	dc002417 	ldw	r16,144(sp)
   240bc:	3027883a 	mov	r19,r6
   240c0:	10000826 	beq	r2,zero,240e4 <_dtoa_r+0x6c>
   240c4:	21801117 	ldw	r6,68(r4)
   240c8:	00c00044 	movi	r3,1
   240cc:	100b883a 	mov	r5,r2
   240d0:	1986983a 	sll	r3,r3,r6
   240d4:	11800115 	stw	r6,4(r2)
   240d8:	10c00215 	stw	r3,8(r2)
   240dc:	0026e880 	call	26e88 <_Bfree>
   240e0:	e0001015 	stw	zero,64(fp)
   240e4:	88002e16 	blt	r17,zero,241a0 <_dtoa_r+0x128>
   240e8:	80000015 	stw	zero,0(r16)
   240ec:	889ffc2c 	andhi	r2,r17,32752
   240f0:	00dffc34 	movhi	r3,32752
   240f4:	10c01c26 	beq	r2,r3,24168 <_dtoa_r+0xf0>
   240f8:	000d883a 	mov	r6,zero
   240fc:	000f883a 	mov	r7,zero
   24100:	9009883a 	mov	r4,r18
   24104:	980b883a 	mov	r5,r19
   24108:	002bf440 	call	2bf44 <__eqdf2>
   2410c:	10002b1e 	bne	r2,zero,241bc <_dtoa_r+0x144>
   24110:	d9c02317 	ldw	r7,140(sp)
   24114:	00800044 	movi	r2,1
   24118:	38800015 	stw	r2,0(r7)
   2411c:	d8802517 	ldw	r2,148(sp)
   24120:	10019e26 	beq	r2,zero,2479c <_dtoa_r+0x724>
   24124:	d8c02517 	ldw	r3,148(sp)
   24128:	008000f4 	movhi	r2,3
   2412c:	109f2d44 	addi	r2,r2,31925
   24130:	18800015 	stw	r2,0(r3)
   24134:	10bfffc4 	addi	r2,r2,-1
   24138:	dfc02117 	ldw	ra,132(sp)
   2413c:	df002017 	ldw	fp,128(sp)
   24140:	ddc01f17 	ldw	r23,124(sp)
   24144:	dd801e17 	ldw	r22,120(sp)
   24148:	dd401d17 	ldw	r21,116(sp)
   2414c:	dd001c17 	ldw	r20,112(sp)
   24150:	dcc01b17 	ldw	r19,108(sp)
   24154:	dc801a17 	ldw	r18,104(sp)
   24158:	dc401917 	ldw	r17,100(sp)
   2415c:	dc001817 	ldw	r16,96(sp)
   24160:	dec02204 	addi	sp,sp,136
   24164:	f800283a 	ret
   24168:	d8c02317 	ldw	r3,140(sp)
   2416c:	0089c3c4 	movi	r2,9999
   24170:	18800015 	stw	r2,0(r3)
   24174:	90017726 	beq	r18,zero,24754 <_dtoa_r+0x6dc>
   24178:	008000f4 	movhi	r2,3
   2417c:	109f3904 	addi	r2,r2,31972
   24180:	d9002517 	ldw	r4,148(sp)
   24184:	203fec26 	beq	r4,zero,24138 <_gp+0xfffe25ec>
   24188:	10c000c7 	ldb	r3,3(r2)
   2418c:	1801781e 	bne	r3,zero,24770 <_dtoa_r+0x6f8>
   24190:	10c000c4 	addi	r3,r2,3
   24194:	d9802517 	ldw	r6,148(sp)
   24198:	30c00015 	stw	r3,0(r6)
   2419c:	003fe606 	br	24138 <_gp+0xfffe25ec>
   241a0:	04e00034 	movhi	r19,32768
   241a4:	9cffffc4 	addi	r19,r19,-1
   241a8:	00800044 	movi	r2,1
   241ac:	8ce6703a 	and	r19,r17,r19
   241b0:	80800015 	stw	r2,0(r16)
   241b4:	9823883a 	mov	r17,r19
   241b8:	003fcc06 	br	240ec <_gp+0xfffe25a0>
   241bc:	d8800204 	addi	r2,sp,8
   241c0:	d8800015 	stw	r2,0(sp)
   241c4:	d9c00104 	addi	r7,sp,4
   241c8:	900b883a 	mov	r5,r18
   241cc:	980d883a 	mov	r6,r19
   241d0:	e009883a 	mov	r4,fp
   241d4:	8820d53a 	srli	r16,r17,20
   241d8:	0027a740 	call	27a74 <__d2b>
   241dc:	d8800915 	stw	r2,36(sp)
   241e0:	8001651e 	bne	r16,zero,24778 <_dtoa_r+0x700>
   241e4:	dd800217 	ldw	r22,8(sp)
   241e8:	dc000117 	ldw	r16,4(sp)
   241ec:	00800804 	movi	r2,32
   241f0:	b421883a 	add	r16,r22,r16
   241f4:	80c10c84 	addi	r3,r16,1074
   241f8:	10c2d10e 	bge	r2,r3,24d40 <_dtoa_r+0xcc8>
   241fc:	00801004 	movi	r2,64
   24200:	81010484 	addi	r4,r16,1042
   24204:	10c7c83a 	sub	r3,r2,r3
   24208:	9108d83a 	srl	r4,r18,r4
   2420c:	88e2983a 	sll	r17,r17,r3
   24210:	2448b03a 	or	r4,r4,r17
   24214:	002d30c0 	call	2d30c <__floatunsidf>
   24218:	017f8434 	movhi	r5,65040
   2421c:	01800044 	movi	r6,1
   24220:	1009883a 	mov	r4,r2
   24224:	194b883a 	add	r5,r3,r5
   24228:	843fffc4 	addi	r16,r16,-1
   2422c:	d9801115 	stw	r6,68(sp)
   24230:	000d883a 	mov	r6,zero
   24234:	01cffe34 	movhi	r7,16376
   24238:	002c8b40 	call	2c8b4 <__subdf3>
   2423c:	0198dbf4 	movhi	r6,25455
   24240:	01cff4f4 	movhi	r7,16339
   24244:	3190d844 	addi	r6,r6,17249
   24248:	39e1e9c4 	addi	r7,r7,-30809
   2424c:	1009883a 	mov	r4,r2
   24250:	180b883a 	mov	r5,r3
   24254:	002c19c0 	call	2c19c <__muldf3>
   24258:	01a2d874 	movhi	r6,35681
   2425c:	01cff1f4 	movhi	r7,16327
   24260:	31b22cc4 	addi	r6,r6,-14157
   24264:	39e28a04 	addi	r7,r7,-30168
   24268:	180b883a 	mov	r5,r3
   2426c:	1009883a 	mov	r4,r2
   24270:	002adb00 	call	2adb0 <__adddf3>
   24274:	8009883a 	mov	r4,r16
   24278:	1029883a 	mov	r20,r2
   2427c:	1823883a 	mov	r17,r3
   24280:	002d2300 	call	2d230 <__floatsidf>
   24284:	019427f4 	movhi	r6,20639
   24288:	01cff4f4 	movhi	r7,16339
   2428c:	319e7ec4 	addi	r6,r6,31227
   24290:	39d104c4 	addi	r7,r7,17427
   24294:	1009883a 	mov	r4,r2
   24298:	180b883a 	mov	r5,r3
   2429c:	002c19c0 	call	2c19c <__muldf3>
   242a0:	100d883a 	mov	r6,r2
   242a4:	180f883a 	mov	r7,r3
   242a8:	a009883a 	mov	r4,r20
   242ac:	880b883a 	mov	r5,r17
   242b0:	002adb00 	call	2adb0 <__adddf3>
   242b4:	1009883a 	mov	r4,r2
   242b8:	180b883a 	mov	r5,r3
   242bc:	1029883a 	mov	r20,r2
   242c0:	1823883a 	mov	r17,r3
   242c4:	002d1b00 	call	2d1b0 <__fixdfsi>
   242c8:	000d883a 	mov	r6,zero
   242cc:	000f883a 	mov	r7,zero
   242d0:	a009883a 	mov	r4,r20
   242d4:	880b883a 	mov	r5,r17
   242d8:	d8800515 	stw	r2,20(sp)
   242dc:	002c0a80 	call	2c0a8 <__ledf2>
   242e0:	10028716 	blt	r2,zero,24d00 <_dtoa_r+0xc88>
   242e4:	d8c00517 	ldw	r3,20(sp)
   242e8:	00800584 	movi	r2,22
   242ec:	10c27536 	bltu	r2,r3,24cc4 <_dtoa_r+0xc4c>
   242f0:	180490fa 	slli	r2,r3,3
   242f4:	00c000f4 	movhi	r3,3
   242f8:	18df5504 	addi	r3,r3,32084
   242fc:	1885883a 	add	r2,r3,r2
   24300:	11000017 	ldw	r4,0(r2)
   24304:	11400117 	ldw	r5,4(r2)
   24308:	900d883a 	mov	r6,r18
   2430c:	980f883a 	mov	r7,r19
   24310:	002bfcc0 	call	2bfcc <__gedf2>
   24314:	00828d0e 	bge	zero,r2,24d4c <_dtoa_r+0xcd4>
   24318:	d9000517 	ldw	r4,20(sp)
   2431c:	d8000e15 	stw	zero,56(sp)
   24320:	213fffc4 	addi	r4,r4,-1
   24324:	d9000515 	stw	r4,20(sp)
   24328:	b42dc83a 	sub	r22,r22,r16
   2432c:	b5bfffc4 	addi	r22,r22,-1
   24330:	b0026f16 	blt	r22,zero,24cf0 <_dtoa_r+0xc78>
   24334:	d8000815 	stw	zero,32(sp)
   24338:	d9c00517 	ldw	r7,20(sp)
   2433c:	38026416 	blt	r7,zero,24cd0 <_dtoa_r+0xc58>
   24340:	b1ed883a 	add	r22,r22,r7
   24344:	d9c00d15 	stw	r7,52(sp)
   24348:	d8000a15 	stw	zero,40(sp)
   2434c:	d9800317 	ldw	r6,12(sp)
   24350:	00800244 	movi	r2,9
   24354:	11811436 	bltu	r2,r6,247a8 <_dtoa_r+0x730>
   24358:	00800144 	movi	r2,5
   2435c:	1184e10e 	bge	r2,r6,256e4 <_dtoa_r+0x166c>
   24360:	31bfff04 	addi	r6,r6,-4
   24364:	d9800315 	stw	r6,12(sp)
   24368:	0023883a 	mov	r17,zero
   2436c:	d9800317 	ldw	r6,12(sp)
   24370:	008000c4 	movi	r2,3
   24374:	30836726 	beq	r6,r2,25114 <_dtoa_r+0x109c>
   24378:	1183410e 	bge	r2,r6,25080 <_dtoa_r+0x1008>
   2437c:	d9c00317 	ldw	r7,12(sp)
   24380:	00800104 	movi	r2,4
   24384:	38827c26 	beq	r7,r2,24d78 <_dtoa_r+0xd00>
   24388:	00800144 	movi	r2,5
   2438c:	3884c41e 	bne	r7,r2,256a0 <_dtoa_r+0x1628>
   24390:	00800044 	movi	r2,1
   24394:	d8800b15 	stw	r2,44(sp)
   24398:	d8c00517 	ldw	r3,20(sp)
   2439c:	d9002217 	ldw	r4,136(sp)
   243a0:	1907883a 	add	r3,r3,r4
   243a4:	19800044 	addi	r6,r3,1
   243a8:	d8c00c15 	stw	r3,48(sp)
   243ac:	d9800615 	stw	r6,24(sp)
   243b0:	0183a40e 	bge	zero,r6,25244 <_dtoa_r+0x11cc>
   243b4:	d9800617 	ldw	r6,24(sp)
   243b8:	3021883a 	mov	r16,r6
   243bc:	e0001115 	stw	zero,68(fp)
   243c0:	008005c4 	movi	r2,23
   243c4:	1184c92e 	bgeu	r2,r6,256ec <_dtoa_r+0x1674>
   243c8:	00c00044 	movi	r3,1
   243cc:	00800104 	movi	r2,4
   243d0:	1085883a 	add	r2,r2,r2
   243d4:	11000504 	addi	r4,r2,20
   243d8:	180b883a 	mov	r5,r3
   243dc:	18c00044 	addi	r3,r3,1
   243e0:	313ffb2e 	bgeu	r6,r4,243d0 <_gp+0xfffe2884>
   243e4:	e1401115 	stw	r5,68(fp)
   243e8:	e009883a 	mov	r4,fp
   243ec:	0026de00 	call	26de0 <_Balloc>
   243f0:	d8800715 	stw	r2,28(sp)
   243f4:	e0801015 	stw	r2,64(fp)
   243f8:	00800384 	movi	r2,14
   243fc:	1400f736 	bltu	r2,r16,247dc <_dtoa_r+0x764>
   24400:	8800f626 	beq	r17,zero,247dc <_dtoa_r+0x764>
   24404:	d9c00517 	ldw	r7,20(sp)
   24408:	01c39a0e 	bge	zero,r7,25274 <_dtoa_r+0x11fc>
   2440c:	388003cc 	andi	r2,r7,15
   24410:	100490fa 	slli	r2,r2,3
   24414:	382bd13a 	srai	r21,r7,4
   24418:	00c000f4 	movhi	r3,3
   2441c:	18df5504 	addi	r3,r3,32084
   24420:	1885883a 	add	r2,r3,r2
   24424:	a8c0040c 	andi	r3,r21,16
   24428:	12400017 	ldw	r9,0(r2)
   2442c:	12000117 	ldw	r8,4(r2)
   24430:	18037926 	beq	r3,zero,25218 <_dtoa_r+0x11a0>
   24434:	008000f4 	movhi	r2,3
   24438:	109f4b04 	addi	r2,r2,32044
   2443c:	11800817 	ldw	r6,32(r2)
   24440:	11c00917 	ldw	r7,36(r2)
   24444:	9009883a 	mov	r4,r18
   24448:	980b883a 	mov	r5,r19
   2444c:	da001715 	stw	r8,92(sp)
   24450:	da401615 	stw	r9,88(sp)
   24454:	002b65c0 	call	2b65c <__divdf3>
   24458:	da001717 	ldw	r8,92(sp)
   2445c:	da401617 	ldw	r9,88(sp)
   24460:	ad4003cc 	andi	r21,r21,15
   24464:	040000c4 	movi	r16,3
   24468:	1023883a 	mov	r17,r2
   2446c:	1829883a 	mov	r20,r3
   24470:	a8001126 	beq	r21,zero,244b8 <_dtoa_r+0x440>
   24474:	05c000f4 	movhi	r23,3
   24478:	bddf4b04 	addi	r23,r23,32044
   2447c:	4805883a 	mov	r2,r9
   24480:	4007883a 	mov	r3,r8
   24484:	a980004c 	andi	r6,r21,1
   24488:	1009883a 	mov	r4,r2
   2448c:	a82bd07a 	srai	r21,r21,1
   24490:	180b883a 	mov	r5,r3
   24494:	30000426 	beq	r6,zero,244a8 <_dtoa_r+0x430>
   24498:	b9800017 	ldw	r6,0(r23)
   2449c:	b9c00117 	ldw	r7,4(r23)
   244a0:	84000044 	addi	r16,r16,1
   244a4:	002c19c0 	call	2c19c <__muldf3>
   244a8:	bdc00204 	addi	r23,r23,8
   244ac:	a83ff51e 	bne	r21,zero,24484 <_gp+0xfffe2938>
   244b0:	1013883a 	mov	r9,r2
   244b4:	1811883a 	mov	r8,r3
   244b8:	480d883a 	mov	r6,r9
   244bc:	400f883a 	mov	r7,r8
   244c0:	8809883a 	mov	r4,r17
   244c4:	a00b883a 	mov	r5,r20
   244c8:	002b65c0 	call	2b65c <__divdf3>
   244cc:	d8800f15 	stw	r2,60(sp)
   244d0:	d8c01015 	stw	r3,64(sp)
   244d4:	d8c00e17 	ldw	r3,56(sp)
   244d8:	18000626 	beq	r3,zero,244f4 <_dtoa_r+0x47c>
   244dc:	d9000f17 	ldw	r4,60(sp)
   244e0:	d9401017 	ldw	r5,64(sp)
   244e4:	000d883a 	mov	r6,zero
   244e8:	01cffc34 	movhi	r7,16368
   244ec:	002c0a80 	call	2c0a8 <__ledf2>
   244f0:	10040b16 	blt	r2,zero,25520 <_dtoa_r+0x14a8>
   244f4:	8009883a 	mov	r4,r16
   244f8:	002d2300 	call	2d230 <__floatsidf>
   244fc:	d9800f17 	ldw	r6,60(sp)
   24500:	d9c01017 	ldw	r7,64(sp)
   24504:	1009883a 	mov	r4,r2
   24508:	180b883a 	mov	r5,r3
   2450c:	002c19c0 	call	2c19c <__muldf3>
   24510:	000d883a 	mov	r6,zero
   24514:	01d00734 	movhi	r7,16412
   24518:	1009883a 	mov	r4,r2
   2451c:	180b883a 	mov	r5,r3
   24520:	002adb00 	call	2adb0 <__adddf3>
   24524:	1021883a 	mov	r16,r2
   24528:	d8800617 	ldw	r2,24(sp)
   2452c:	047f3034 	movhi	r17,64704
   24530:	1c63883a 	add	r17,r3,r17
   24534:	10031826 	beq	r2,zero,25198 <_dtoa_r+0x1120>
   24538:	d8c00517 	ldw	r3,20(sp)
   2453c:	db000617 	ldw	r12,24(sp)
   24540:	d8c01315 	stw	r3,76(sp)
   24544:	d9000b17 	ldw	r4,44(sp)
   24548:	20038f26 	beq	r4,zero,25388 <_dtoa_r+0x1310>
   2454c:	60bfffc4 	addi	r2,r12,-1
   24550:	100490fa 	slli	r2,r2,3
   24554:	00c000f4 	movhi	r3,3
   24558:	18df5504 	addi	r3,r3,32084
   2455c:	1885883a 	add	r2,r3,r2
   24560:	11800017 	ldw	r6,0(r2)
   24564:	11c00117 	ldw	r7,4(r2)
   24568:	d8800717 	ldw	r2,28(sp)
   2456c:	0009883a 	mov	r4,zero
   24570:	014ff834 	movhi	r5,16352
   24574:	db001615 	stw	r12,88(sp)
   24578:	15c00044 	addi	r23,r2,1
   2457c:	002b65c0 	call	2b65c <__divdf3>
   24580:	800d883a 	mov	r6,r16
   24584:	880f883a 	mov	r7,r17
   24588:	1009883a 	mov	r4,r2
   2458c:	180b883a 	mov	r5,r3
   24590:	002c8b40 	call	2c8b4 <__subdf3>
   24594:	d9401017 	ldw	r5,64(sp)
   24598:	d9000f17 	ldw	r4,60(sp)
   2459c:	102b883a 	mov	r21,r2
   245a0:	d8c01215 	stw	r3,72(sp)
   245a4:	002d1b00 	call	2d1b0 <__fixdfsi>
   245a8:	1009883a 	mov	r4,r2
   245ac:	1029883a 	mov	r20,r2
   245b0:	002d2300 	call	2d230 <__floatsidf>
   245b4:	d9000f17 	ldw	r4,60(sp)
   245b8:	d9401017 	ldw	r5,64(sp)
   245bc:	100d883a 	mov	r6,r2
   245c0:	180f883a 	mov	r7,r3
   245c4:	002c8b40 	call	2c8b4 <__subdf3>
   245c8:	1823883a 	mov	r17,r3
   245cc:	d8c00717 	ldw	r3,28(sp)
   245d0:	d9401217 	ldw	r5,72(sp)
   245d4:	a2000c04 	addi	r8,r20,48
   245d8:	1021883a 	mov	r16,r2
   245dc:	1a000005 	stb	r8,0(r3)
   245e0:	800d883a 	mov	r6,r16
   245e4:	880f883a 	mov	r7,r17
   245e8:	a809883a 	mov	r4,r21
   245ec:	4029883a 	mov	r20,r8
   245f0:	002bfcc0 	call	2bfcc <__gedf2>
   245f4:	00841d16 	blt	zero,r2,2566c <_dtoa_r+0x15f4>
   245f8:	800d883a 	mov	r6,r16
   245fc:	880f883a 	mov	r7,r17
   24600:	0009883a 	mov	r4,zero
   24604:	014ffc34 	movhi	r5,16368
   24608:	002c8b40 	call	2c8b4 <__subdf3>
   2460c:	d9401217 	ldw	r5,72(sp)
   24610:	100d883a 	mov	r6,r2
   24614:	180f883a 	mov	r7,r3
   24618:	a809883a 	mov	r4,r21
   2461c:	002bfcc0 	call	2bfcc <__gedf2>
   24620:	db001617 	ldw	r12,88(sp)
   24624:	00840e16 	blt	zero,r2,25660 <_dtoa_r+0x15e8>
   24628:	00800044 	movi	r2,1
   2462c:	13006b0e 	bge	r2,r12,247dc <_dtoa_r+0x764>
   24630:	d9000717 	ldw	r4,28(sp)
   24634:	dd800f15 	stw	r22,60(sp)
   24638:	dcc01015 	stw	r19,64(sp)
   2463c:	2319883a 	add	r12,r4,r12
   24640:	dcc01217 	ldw	r19,72(sp)
   24644:	602d883a 	mov	r22,r12
   24648:	dc801215 	stw	r18,72(sp)
   2464c:	b825883a 	mov	r18,r23
   24650:	00000906 	br	24678 <_dtoa_r+0x600>
   24654:	002c8b40 	call	2c8b4 <__subdf3>
   24658:	a80d883a 	mov	r6,r21
   2465c:	980f883a 	mov	r7,r19
   24660:	1009883a 	mov	r4,r2
   24664:	180b883a 	mov	r5,r3
   24668:	002c0a80 	call	2c0a8 <__ledf2>
   2466c:	1003e816 	blt	r2,zero,25610 <_dtoa_r+0x1598>
   24670:	b825883a 	mov	r18,r23
   24674:	bd83e926 	beq	r23,r22,2561c <_dtoa_r+0x15a4>
   24678:	a809883a 	mov	r4,r21
   2467c:	980b883a 	mov	r5,r19
   24680:	000d883a 	mov	r6,zero
   24684:	01d00934 	movhi	r7,16420
   24688:	002c19c0 	call	2c19c <__muldf3>
   2468c:	000d883a 	mov	r6,zero
   24690:	01d00934 	movhi	r7,16420
   24694:	8009883a 	mov	r4,r16
   24698:	880b883a 	mov	r5,r17
   2469c:	102b883a 	mov	r21,r2
   246a0:	1827883a 	mov	r19,r3
   246a4:	002c19c0 	call	2c19c <__muldf3>
   246a8:	180b883a 	mov	r5,r3
   246ac:	1009883a 	mov	r4,r2
   246b0:	1821883a 	mov	r16,r3
   246b4:	1023883a 	mov	r17,r2
   246b8:	002d1b00 	call	2d1b0 <__fixdfsi>
   246bc:	1009883a 	mov	r4,r2
   246c0:	1029883a 	mov	r20,r2
   246c4:	002d2300 	call	2d230 <__floatsidf>
   246c8:	8809883a 	mov	r4,r17
   246cc:	800b883a 	mov	r5,r16
   246d0:	100d883a 	mov	r6,r2
   246d4:	180f883a 	mov	r7,r3
   246d8:	002c8b40 	call	2c8b4 <__subdf3>
   246dc:	a5000c04 	addi	r20,r20,48
   246e0:	a80d883a 	mov	r6,r21
   246e4:	980f883a 	mov	r7,r19
   246e8:	1009883a 	mov	r4,r2
   246ec:	180b883a 	mov	r5,r3
   246f0:	95000005 	stb	r20,0(r18)
   246f4:	1021883a 	mov	r16,r2
   246f8:	1823883a 	mov	r17,r3
   246fc:	002c0a80 	call	2c0a8 <__ledf2>
   24700:	bdc00044 	addi	r23,r23,1
   24704:	800d883a 	mov	r6,r16
   24708:	880f883a 	mov	r7,r17
   2470c:	0009883a 	mov	r4,zero
   24710:	014ffc34 	movhi	r5,16368
   24714:	103fcf0e 	bge	r2,zero,24654 <_gp+0xfffe2b08>
   24718:	d8c01317 	ldw	r3,76(sp)
   2471c:	d8c00515 	stw	r3,20(sp)
   24720:	d9400917 	ldw	r5,36(sp)
   24724:	e009883a 	mov	r4,fp
   24728:	0026e880 	call	26e88 <_Bfree>
   2472c:	d9000517 	ldw	r4,20(sp)
   24730:	d9802317 	ldw	r6,140(sp)
   24734:	d9c02517 	ldw	r7,148(sp)
   24738:	b8000005 	stb	zero,0(r23)
   2473c:	20800044 	addi	r2,r4,1
   24740:	30800015 	stw	r2,0(r6)
   24744:	3802aa26 	beq	r7,zero,251f0 <_dtoa_r+0x1178>
   24748:	3dc00015 	stw	r23,0(r7)
   2474c:	d8800717 	ldw	r2,28(sp)
   24750:	003e7906 	br	24138 <_gp+0xfffe25ec>
   24754:	00800434 	movhi	r2,16
   24758:	10bfffc4 	addi	r2,r2,-1
   2475c:	88a2703a 	and	r17,r17,r2
   24760:	883e851e 	bne	r17,zero,24178 <_gp+0xfffe262c>
   24764:	008000f4 	movhi	r2,3
   24768:	109f3604 	addi	r2,r2,31960
   2476c:	003e8406 	br	24180 <_gp+0xfffe2634>
   24770:	10c00204 	addi	r3,r2,8
   24774:	003e8706 	br	24194 <_gp+0xfffe2648>
   24778:	01400434 	movhi	r5,16
   2477c:	297fffc4 	addi	r5,r5,-1
   24780:	994a703a 	and	r5,r19,r5
   24784:	9009883a 	mov	r4,r18
   24788:	843f0044 	addi	r16,r16,-1023
   2478c:	294ffc34 	orhi	r5,r5,16368
   24790:	dd800217 	ldw	r22,8(sp)
   24794:	d8001115 	stw	zero,68(sp)
   24798:	003ea506 	br	24230 <_gp+0xfffe26e4>
   2479c:	008000f4 	movhi	r2,3
   247a0:	109f2d04 	addi	r2,r2,31924
   247a4:	003e6406 	br	24138 <_gp+0xfffe25ec>
   247a8:	e0001115 	stw	zero,68(fp)
   247ac:	000b883a 	mov	r5,zero
   247b0:	e009883a 	mov	r4,fp
   247b4:	0026de00 	call	26de0 <_Balloc>
   247b8:	01bfffc4 	movi	r6,-1
   247bc:	01c00044 	movi	r7,1
   247c0:	d8800715 	stw	r2,28(sp)
   247c4:	d9800c15 	stw	r6,48(sp)
   247c8:	e0801015 	stw	r2,64(fp)
   247cc:	d8000315 	stw	zero,12(sp)
   247d0:	d9c00b15 	stw	r7,44(sp)
   247d4:	d9800615 	stw	r6,24(sp)
   247d8:	d8002215 	stw	zero,136(sp)
   247dc:	d8800117 	ldw	r2,4(sp)
   247e0:	10008916 	blt	r2,zero,24a08 <_dtoa_r+0x990>
   247e4:	d9000517 	ldw	r4,20(sp)
   247e8:	00c00384 	movi	r3,14
   247ec:	19008616 	blt	r3,r4,24a08 <_dtoa_r+0x990>
   247f0:	200490fa 	slli	r2,r4,3
   247f4:	00c000f4 	movhi	r3,3
   247f8:	d9802217 	ldw	r6,136(sp)
   247fc:	18df5504 	addi	r3,r3,32084
   24800:	1885883a 	add	r2,r3,r2
   24804:	14000017 	ldw	r16,0(r2)
   24808:	14400117 	ldw	r17,4(r2)
   2480c:	30016316 	blt	r6,zero,24d9c <_dtoa_r+0xd24>
   24810:	800d883a 	mov	r6,r16
   24814:	880f883a 	mov	r7,r17
   24818:	9009883a 	mov	r4,r18
   2481c:	980b883a 	mov	r5,r19
   24820:	002b65c0 	call	2b65c <__divdf3>
   24824:	180b883a 	mov	r5,r3
   24828:	1009883a 	mov	r4,r2
   2482c:	002d1b00 	call	2d1b0 <__fixdfsi>
   24830:	1009883a 	mov	r4,r2
   24834:	102b883a 	mov	r21,r2
   24838:	002d2300 	call	2d230 <__floatsidf>
   2483c:	800d883a 	mov	r6,r16
   24840:	880f883a 	mov	r7,r17
   24844:	1009883a 	mov	r4,r2
   24848:	180b883a 	mov	r5,r3
   2484c:	002c19c0 	call	2c19c <__muldf3>
   24850:	100d883a 	mov	r6,r2
   24854:	180f883a 	mov	r7,r3
   24858:	9009883a 	mov	r4,r18
   2485c:	980b883a 	mov	r5,r19
   24860:	002c8b40 	call	2c8b4 <__subdf3>
   24864:	d9c00717 	ldw	r7,28(sp)
   24868:	1009883a 	mov	r4,r2
   2486c:	a8800c04 	addi	r2,r21,48
   24870:	38800005 	stb	r2,0(r7)
   24874:	3dc00044 	addi	r23,r7,1
   24878:	d9c00617 	ldw	r7,24(sp)
   2487c:	01800044 	movi	r6,1
   24880:	180b883a 	mov	r5,r3
   24884:	2005883a 	mov	r2,r4
   24888:	39803826 	beq	r7,r6,2496c <_dtoa_r+0x8f4>
   2488c:	000d883a 	mov	r6,zero
   24890:	01d00934 	movhi	r7,16420
   24894:	002c19c0 	call	2c19c <__muldf3>
   24898:	000d883a 	mov	r6,zero
   2489c:	000f883a 	mov	r7,zero
   248a0:	1009883a 	mov	r4,r2
   248a4:	180b883a 	mov	r5,r3
   248a8:	1025883a 	mov	r18,r2
   248ac:	1827883a 	mov	r19,r3
   248b0:	002bf440 	call	2bf44 <__eqdf2>
   248b4:	103f9a26 	beq	r2,zero,24720 <_gp+0xfffe2bd4>
   248b8:	d9c00617 	ldw	r7,24(sp)
   248bc:	d8c00717 	ldw	r3,28(sp)
   248c0:	b829883a 	mov	r20,r23
   248c4:	38bfffc4 	addi	r2,r7,-1
   248c8:	18ad883a 	add	r22,r3,r2
   248cc:	00000a06 	br	248f8 <_dtoa_r+0x880>
   248d0:	002c19c0 	call	2c19c <__muldf3>
   248d4:	000d883a 	mov	r6,zero
   248d8:	000f883a 	mov	r7,zero
   248dc:	1009883a 	mov	r4,r2
   248e0:	180b883a 	mov	r5,r3
   248e4:	1025883a 	mov	r18,r2
   248e8:	1827883a 	mov	r19,r3
   248ec:	b829883a 	mov	r20,r23
   248f0:	002bf440 	call	2bf44 <__eqdf2>
   248f4:	103f8a26 	beq	r2,zero,24720 <_gp+0xfffe2bd4>
   248f8:	800d883a 	mov	r6,r16
   248fc:	880f883a 	mov	r7,r17
   24900:	9009883a 	mov	r4,r18
   24904:	980b883a 	mov	r5,r19
   24908:	002b65c0 	call	2b65c <__divdf3>
   2490c:	180b883a 	mov	r5,r3
   24910:	1009883a 	mov	r4,r2
   24914:	002d1b00 	call	2d1b0 <__fixdfsi>
   24918:	1009883a 	mov	r4,r2
   2491c:	102b883a 	mov	r21,r2
   24920:	002d2300 	call	2d230 <__floatsidf>
   24924:	800d883a 	mov	r6,r16
   24928:	880f883a 	mov	r7,r17
   2492c:	1009883a 	mov	r4,r2
   24930:	180b883a 	mov	r5,r3
   24934:	002c19c0 	call	2c19c <__muldf3>
   24938:	100d883a 	mov	r6,r2
   2493c:	180f883a 	mov	r7,r3
   24940:	9009883a 	mov	r4,r18
   24944:	980b883a 	mov	r5,r19
   24948:	002c8b40 	call	2c8b4 <__subdf3>
   2494c:	aa000c04 	addi	r8,r21,48
   24950:	a2000005 	stb	r8,0(r20)
   24954:	000d883a 	mov	r6,zero
   24958:	01d00934 	movhi	r7,16420
   2495c:	1009883a 	mov	r4,r2
   24960:	180b883a 	mov	r5,r3
   24964:	a5c00044 	addi	r23,r20,1
   24968:	b53fd91e 	bne	r22,r20,248d0 <_gp+0xfffe2d84>
   2496c:	100d883a 	mov	r6,r2
   24970:	180f883a 	mov	r7,r3
   24974:	1009883a 	mov	r4,r2
   24978:	180b883a 	mov	r5,r3
   2497c:	002adb00 	call	2adb0 <__adddf3>
   24980:	100d883a 	mov	r6,r2
   24984:	180f883a 	mov	r7,r3
   24988:	8009883a 	mov	r4,r16
   2498c:	880b883a 	mov	r5,r17
   24990:	1027883a 	mov	r19,r2
   24994:	1825883a 	mov	r18,r3
   24998:	002c0a80 	call	2c0a8 <__ledf2>
   2499c:	10000816 	blt	r2,zero,249c0 <_dtoa_r+0x948>
   249a0:	980d883a 	mov	r6,r19
   249a4:	900f883a 	mov	r7,r18
   249a8:	8009883a 	mov	r4,r16
   249ac:	880b883a 	mov	r5,r17
   249b0:	002bf440 	call	2bf44 <__eqdf2>
   249b4:	103f5a1e 	bne	r2,zero,24720 <_gp+0xfffe2bd4>
   249b8:	ad40004c 	andi	r21,r21,1
   249bc:	a83f5826 	beq	r21,zero,24720 <_gp+0xfffe2bd4>
   249c0:	bd3fffc3 	ldbu	r20,-1(r23)
   249c4:	b8bfffc4 	addi	r2,r23,-1
   249c8:	1007883a 	mov	r3,r2
   249cc:	01400e44 	movi	r5,57
   249d0:	d9800717 	ldw	r6,28(sp)
   249d4:	00000506 	br	249ec <_dtoa_r+0x974>
   249d8:	18ffffc4 	addi	r3,r3,-1
   249dc:	11824726 	beq	r2,r6,252fc <_dtoa_r+0x1284>
   249e0:	1d000003 	ldbu	r20,0(r3)
   249e4:	102f883a 	mov	r23,r2
   249e8:	10bfffc4 	addi	r2,r2,-1
   249ec:	a1003fcc 	andi	r4,r20,255
   249f0:	2100201c 	xori	r4,r4,128
   249f4:	213fe004 	addi	r4,r4,-128
   249f8:	217ff726 	beq	r4,r5,249d8 <_gp+0xfffe2e8c>
   249fc:	a2000044 	addi	r8,r20,1
   24a00:	12000005 	stb	r8,0(r2)
   24a04:	003f4606 	br	24720 <_gp+0xfffe2bd4>
   24a08:	d9000b17 	ldw	r4,44(sp)
   24a0c:	2000c826 	beq	r4,zero,24d30 <_dtoa_r+0xcb8>
   24a10:	d9800317 	ldw	r6,12(sp)
   24a14:	00c00044 	movi	r3,1
   24a18:	1980f90e 	bge	r3,r6,24e00 <_dtoa_r+0xd88>
   24a1c:	d8800617 	ldw	r2,24(sp)
   24a20:	d8c00a17 	ldw	r3,40(sp)
   24a24:	157fffc4 	addi	r21,r2,-1
   24a28:	1d41f316 	blt	r3,r21,251f8 <_dtoa_r+0x1180>
   24a2c:	1d6bc83a 	sub	r21,r3,r21
   24a30:	d9c00617 	ldw	r7,24(sp)
   24a34:	3802aa16 	blt	r7,zero,254e0 <_dtoa_r+0x1468>
   24a38:	dd000817 	ldw	r20,32(sp)
   24a3c:	d8800617 	ldw	r2,24(sp)
   24a40:	d8c00817 	ldw	r3,32(sp)
   24a44:	01400044 	movi	r5,1
   24a48:	e009883a 	mov	r4,fp
   24a4c:	1887883a 	add	r3,r3,r2
   24a50:	d8c00815 	stw	r3,32(sp)
   24a54:	b0ad883a 	add	r22,r22,r2
   24a58:	00271ec0 	call	271ec <__i2b>
   24a5c:	1023883a 	mov	r17,r2
   24a60:	a0000826 	beq	r20,zero,24a84 <_dtoa_r+0xa0c>
   24a64:	0580070e 	bge	zero,r22,24a84 <_dtoa_r+0xa0c>
   24a68:	a005883a 	mov	r2,r20
   24a6c:	b500b916 	blt	r22,r20,24d54 <_dtoa_r+0xcdc>
   24a70:	d9000817 	ldw	r4,32(sp)
   24a74:	a0a9c83a 	sub	r20,r20,r2
   24a78:	b0adc83a 	sub	r22,r22,r2
   24a7c:	2089c83a 	sub	r4,r4,r2
   24a80:	d9000815 	stw	r4,32(sp)
   24a84:	d9800a17 	ldw	r6,40(sp)
   24a88:	0181810e 	bge	zero,r6,25090 <_dtoa_r+0x1018>
   24a8c:	d9c00b17 	ldw	r7,44(sp)
   24a90:	3800b326 	beq	r7,zero,24d60 <_dtoa_r+0xce8>
   24a94:	a800b226 	beq	r21,zero,24d60 <_dtoa_r+0xce8>
   24a98:	880b883a 	mov	r5,r17
   24a9c:	a80d883a 	mov	r6,r21
   24aa0:	e009883a 	mov	r4,fp
   24aa4:	00274200 	call	27420 <__pow5mult>
   24aa8:	d9800917 	ldw	r6,36(sp)
   24aac:	100b883a 	mov	r5,r2
   24ab0:	e009883a 	mov	r4,fp
   24ab4:	1023883a 	mov	r17,r2
   24ab8:	00272280 	call	27228 <__multiply>
   24abc:	1021883a 	mov	r16,r2
   24ac0:	d8800a17 	ldw	r2,40(sp)
   24ac4:	d9400917 	ldw	r5,36(sp)
   24ac8:	e009883a 	mov	r4,fp
   24acc:	1545c83a 	sub	r2,r2,r21
   24ad0:	d8800a15 	stw	r2,40(sp)
   24ad4:	0026e880 	call	26e88 <_Bfree>
   24ad8:	d8c00a17 	ldw	r3,40(sp)
   24adc:	18009f1e 	bne	r3,zero,24d5c <_dtoa_r+0xce4>
   24ae0:	05c00044 	movi	r23,1
   24ae4:	e009883a 	mov	r4,fp
   24ae8:	b80b883a 	mov	r5,r23
   24aec:	00271ec0 	call	271ec <__i2b>
   24af0:	d9000d17 	ldw	r4,52(sp)
   24af4:	102b883a 	mov	r21,r2
   24af8:	2000ce26 	beq	r4,zero,24e34 <_dtoa_r+0xdbc>
   24afc:	200d883a 	mov	r6,r4
   24b00:	100b883a 	mov	r5,r2
   24b04:	e009883a 	mov	r4,fp
   24b08:	00274200 	call	27420 <__pow5mult>
   24b0c:	d9800317 	ldw	r6,12(sp)
   24b10:	102b883a 	mov	r21,r2
   24b14:	b981810e 	bge	r23,r6,2511c <_dtoa_r+0x10a4>
   24b18:	0027883a 	mov	r19,zero
   24b1c:	a8800417 	ldw	r2,16(r21)
   24b20:	05c00804 	movi	r23,32
   24b24:	10800104 	addi	r2,r2,4
   24b28:	1085883a 	add	r2,r2,r2
   24b2c:	1085883a 	add	r2,r2,r2
   24b30:	a885883a 	add	r2,r21,r2
   24b34:	11000017 	ldw	r4,0(r2)
   24b38:	00270d40 	call	270d4 <__hi0bits>
   24b3c:	b885c83a 	sub	r2,r23,r2
   24b40:	1585883a 	add	r2,r2,r22
   24b44:	108007cc 	andi	r2,r2,31
   24b48:	1000b326 	beq	r2,zero,24e18 <_dtoa_r+0xda0>
   24b4c:	00c00804 	movi	r3,32
   24b50:	1887c83a 	sub	r3,r3,r2
   24b54:	01000104 	movi	r4,4
   24b58:	20c2cd0e 	bge	r4,r3,25690 <_dtoa_r+0x1618>
   24b5c:	00c00704 	movi	r3,28
   24b60:	1885c83a 	sub	r2,r3,r2
   24b64:	d8c00817 	ldw	r3,32(sp)
   24b68:	a0a9883a 	add	r20,r20,r2
   24b6c:	b0ad883a 	add	r22,r22,r2
   24b70:	1887883a 	add	r3,r3,r2
   24b74:	d8c00815 	stw	r3,32(sp)
   24b78:	d9800817 	ldw	r6,32(sp)
   24b7c:	0180040e 	bge	zero,r6,24b90 <_dtoa_r+0xb18>
   24b80:	800b883a 	mov	r5,r16
   24b84:	e009883a 	mov	r4,fp
   24b88:	00275600 	call	27560 <__lshift>
   24b8c:	1021883a 	mov	r16,r2
   24b90:	0580050e 	bge	zero,r22,24ba8 <_dtoa_r+0xb30>
   24b94:	a80b883a 	mov	r5,r21
   24b98:	b00d883a 	mov	r6,r22
   24b9c:	e009883a 	mov	r4,fp
   24ba0:	00275600 	call	27560 <__lshift>
   24ba4:	102b883a 	mov	r21,r2
   24ba8:	d9c00e17 	ldw	r7,56(sp)
   24bac:	3801211e 	bne	r7,zero,25034 <_dtoa_r+0xfbc>
   24bb0:	d9800617 	ldw	r6,24(sp)
   24bb4:	0181380e 	bge	zero,r6,25098 <_dtoa_r+0x1020>
   24bb8:	d8c00b17 	ldw	r3,44(sp)
   24bbc:	1800ab1e 	bne	r3,zero,24e6c <_dtoa_r+0xdf4>
   24bc0:	dc800717 	ldw	r18,28(sp)
   24bc4:	dcc00617 	ldw	r19,24(sp)
   24bc8:	9029883a 	mov	r20,r18
   24bcc:	00000206 	br	24bd8 <_dtoa_r+0xb60>
   24bd0:	0026eb00 	call	26eb0 <__multadd>
   24bd4:	1021883a 	mov	r16,r2
   24bd8:	a80b883a 	mov	r5,r21
   24bdc:	8009883a 	mov	r4,r16
   24be0:	0023e780 	call	23e78 <quorem>
   24be4:	10800c04 	addi	r2,r2,48
   24be8:	90800005 	stb	r2,0(r18)
   24bec:	94800044 	addi	r18,r18,1
   24bf0:	9507c83a 	sub	r3,r18,r20
   24bf4:	000f883a 	mov	r7,zero
   24bf8:	01800284 	movi	r6,10
   24bfc:	800b883a 	mov	r5,r16
   24c00:	e009883a 	mov	r4,fp
   24c04:	1cfff216 	blt	r3,r19,24bd0 <_gp+0xfffe3084>
   24c08:	1011883a 	mov	r8,r2
   24c0c:	d8800617 	ldw	r2,24(sp)
   24c10:	0082370e 	bge	zero,r2,254f0 <_dtoa_r+0x1478>
   24c14:	d9000717 	ldw	r4,28(sp)
   24c18:	0025883a 	mov	r18,zero
   24c1c:	20af883a 	add	r23,r4,r2
   24c20:	01800044 	movi	r6,1
   24c24:	800b883a 	mov	r5,r16
   24c28:	e009883a 	mov	r4,fp
   24c2c:	da001715 	stw	r8,92(sp)
   24c30:	00275600 	call	27560 <__lshift>
   24c34:	a80b883a 	mov	r5,r21
   24c38:	1009883a 	mov	r4,r2
   24c3c:	d8800915 	stw	r2,36(sp)
   24c40:	00276a80 	call	276a8 <__mcmp>
   24c44:	da001717 	ldw	r8,92(sp)
   24c48:	0081800e 	bge	zero,r2,2524c <_dtoa_r+0x11d4>
   24c4c:	b93fffc3 	ldbu	r4,-1(r23)
   24c50:	b8bfffc4 	addi	r2,r23,-1
   24c54:	1007883a 	mov	r3,r2
   24c58:	01800e44 	movi	r6,57
   24c5c:	d9c00717 	ldw	r7,28(sp)
   24c60:	00000506 	br	24c78 <_dtoa_r+0xc00>
   24c64:	18ffffc4 	addi	r3,r3,-1
   24c68:	11c12326 	beq	r2,r7,250f8 <_dtoa_r+0x1080>
   24c6c:	19000003 	ldbu	r4,0(r3)
   24c70:	102f883a 	mov	r23,r2
   24c74:	10bfffc4 	addi	r2,r2,-1
   24c78:	21403fcc 	andi	r5,r4,255
   24c7c:	2940201c 	xori	r5,r5,128
   24c80:	297fe004 	addi	r5,r5,-128
   24c84:	29bff726 	beq	r5,r6,24c64 <_gp+0xfffe3118>
   24c88:	21000044 	addi	r4,r4,1
   24c8c:	11000005 	stb	r4,0(r2)
   24c90:	a80b883a 	mov	r5,r21
   24c94:	e009883a 	mov	r4,fp
   24c98:	0026e880 	call	26e88 <_Bfree>
   24c9c:	883ea026 	beq	r17,zero,24720 <_gp+0xfffe2bd4>
   24ca0:	90000426 	beq	r18,zero,24cb4 <_dtoa_r+0xc3c>
   24ca4:	94400326 	beq	r18,r17,24cb4 <_dtoa_r+0xc3c>
   24ca8:	900b883a 	mov	r5,r18
   24cac:	e009883a 	mov	r4,fp
   24cb0:	0026e880 	call	26e88 <_Bfree>
   24cb4:	880b883a 	mov	r5,r17
   24cb8:	e009883a 	mov	r4,fp
   24cbc:	0026e880 	call	26e88 <_Bfree>
   24cc0:	003e9706 	br	24720 <_gp+0xfffe2bd4>
   24cc4:	01800044 	movi	r6,1
   24cc8:	d9800e15 	stw	r6,56(sp)
   24ccc:	003d9606 	br	24328 <_gp+0xfffe27dc>
   24cd0:	d8800817 	ldw	r2,32(sp)
   24cd4:	d8c00517 	ldw	r3,20(sp)
   24cd8:	d8000d15 	stw	zero,52(sp)
   24cdc:	10c5c83a 	sub	r2,r2,r3
   24ce0:	00c9c83a 	sub	r4,zero,r3
   24ce4:	d8800815 	stw	r2,32(sp)
   24ce8:	d9000a15 	stw	r4,40(sp)
   24cec:	003d9706 	br	2434c <_gp+0xfffe2800>
   24cf0:	05adc83a 	sub	r22,zero,r22
   24cf4:	dd800815 	stw	r22,32(sp)
   24cf8:	002d883a 	mov	r22,zero
   24cfc:	003d8e06 	br	24338 <_gp+0xfffe27ec>
   24d00:	d9000517 	ldw	r4,20(sp)
   24d04:	002d2300 	call	2d230 <__floatsidf>
   24d08:	100d883a 	mov	r6,r2
   24d0c:	180f883a 	mov	r7,r3
   24d10:	a009883a 	mov	r4,r20
   24d14:	880b883a 	mov	r5,r17
   24d18:	002bf440 	call	2bf44 <__eqdf2>
   24d1c:	103d7126 	beq	r2,zero,242e4 <_gp+0xfffe2798>
   24d20:	d9c00517 	ldw	r7,20(sp)
   24d24:	39ffffc4 	addi	r7,r7,-1
   24d28:	d9c00515 	stw	r7,20(sp)
   24d2c:	003d6d06 	br	242e4 <_gp+0xfffe2798>
   24d30:	dd400a17 	ldw	r21,40(sp)
   24d34:	dd000817 	ldw	r20,32(sp)
   24d38:	0023883a 	mov	r17,zero
   24d3c:	003f4806 	br	24a60 <_gp+0xfffe2f14>
   24d40:	10e3c83a 	sub	r17,r2,r3
   24d44:	9448983a 	sll	r4,r18,r17
   24d48:	003d3206 	br	24214 <_gp+0xfffe26c8>
   24d4c:	d8000e15 	stw	zero,56(sp)
   24d50:	003d7506 	br	24328 <_gp+0xfffe27dc>
   24d54:	b005883a 	mov	r2,r22
   24d58:	003f4506 	br	24a70 <_gp+0xfffe2f24>
   24d5c:	dc000915 	stw	r16,36(sp)
   24d60:	d9800a17 	ldw	r6,40(sp)
   24d64:	d9400917 	ldw	r5,36(sp)
   24d68:	e009883a 	mov	r4,fp
   24d6c:	00274200 	call	27420 <__pow5mult>
   24d70:	1021883a 	mov	r16,r2
   24d74:	003f5a06 	br	24ae0 <_gp+0xfffe2f94>
   24d78:	01c00044 	movi	r7,1
   24d7c:	d9c00b15 	stw	r7,44(sp)
   24d80:	d8802217 	ldw	r2,136(sp)
   24d84:	0081280e 	bge	zero,r2,25228 <_dtoa_r+0x11b0>
   24d88:	100d883a 	mov	r6,r2
   24d8c:	1021883a 	mov	r16,r2
   24d90:	d8800c15 	stw	r2,48(sp)
   24d94:	d8800615 	stw	r2,24(sp)
   24d98:	003d8806 	br	243bc <_gp+0xfffe2870>
   24d9c:	d8800617 	ldw	r2,24(sp)
   24da0:	00be9b16 	blt	zero,r2,24810 <_gp+0xfffe2cc4>
   24da4:	10010f1e 	bne	r2,zero,251e4 <_dtoa_r+0x116c>
   24da8:	880b883a 	mov	r5,r17
   24dac:	000d883a 	mov	r6,zero
   24db0:	01d00534 	movhi	r7,16404
   24db4:	8009883a 	mov	r4,r16
   24db8:	002c19c0 	call	2c19c <__muldf3>
   24dbc:	900d883a 	mov	r6,r18
   24dc0:	980f883a 	mov	r7,r19
   24dc4:	1009883a 	mov	r4,r2
   24dc8:	180b883a 	mov	r5,r3
   24dcc:	002bfcc0 	call	2bfcc <__gedf2>
   24dd0:	002b883a 	mov	r21,zero
   24dd4:	0023883a 	mov	r17,zero
   24dd8:	1000bf16 	blt	r2,zero,250d8 <_dtoa_r+0x1060>
   24ddc:	d9802217 	ldw	r6,136(sp)
   24de0:	ddc00717 	ldw	r23,28(sp)
   24de4:	018c303a 	nor	r6,zero,r6
   24de8:	d9800515 	stw	r6,20(sp)
   24dec:	a80b883a 	mov	r5,r21
   24df0:	e009883a 	mov	r4,fp
   24df4:	0026e880 	call	26e88 <_Bfree>
   24df8:	883e4926 	beq	r17,zero,24720 <_gp+0xfffe2bd4>
   24dfc:	003fad06 	br	24cb4 <_gp+0xfffe3168>
   24e00:	d9c01117 	ldw	r7,68(sp)
   24e04:	3801bc26 	beq	r7,zero,254f8 <_dtoa_r+0x1480>
   24e08:	10810cc4 	addi	r2,r2,1075
   24e0c:	dd400a17 	ldw	r21,40(sp)
   24e10:	dd000817 	ldw	r20,32(sp)
   24e14:	003f0a06 	br	24a40 <_gp+0xfffe2ef4>
   24e18:	00800704 	movi	r2,28
   24e1c:	d9000817 	ldw	r4,32(sp)
   24e20:	a0a9883a 	add	r20,r20,r2
   24e24:	b0ad883a 	add	r22,r22,r2
   24e28:	2089883a 	add	r4,r4,r2
   24e2c:	d9000815 	stw	r4,32(sp)
   24e30:	003f5106 	br	24b78 <_gp+0xfffe302c>
   24e34:	d8c00317 	ldw	r3,12(sp)
   24e38:	b8c1fc0e 	bge	r23,r3,2562c <_dtoa_r+0x15b4>
   24e3c:	0027883a 	mov	r19,zero
   24e40:	b805883a 	mov	r2,r23
   24e44:	003f3e06 	br	24b40 <_gp+0xfffe2ff4>
   24e48:	880b883a 	mov	r5,r17
   24e4c:	e009883a 	mov	r4,fp
   24e50:	000f883a 	mov	r7,zero
   24e54:	01800284 	movi	r6,10
   24e58:	0026eb00 	call	26eb0 <__multadd>
   24e5c:	d9000c17 	ldw	r4,48(sp)
   24e60:	1023883a 	mov	r17,r2
   24e64:	0102040e 	bge	zero,r4,25678 <_dtoa_r+0x1600>
   24e68:	d9000615 	stw	r4,24(sp)
   24e6c:	0500050e 	bge	zero,r20,24e84 <_dtoa_r+0xe0c>
   24e70:	880b883a 	mov	r5,r17
   24e74:	a00d883a 	mov	r6,r20
   24e78:	e009883a 	mov	r4,fp
   24e7c:	00275600 	call	27560 <__lshift>
   24e80:	1023883a 	mov	r17,r2
   24e84:	9801241e 	bne	r19,zero,25318 <_dtoa_r+0x12a0>
   24e88:	8829883a 	mov	r20,r17
   24e8c:	d9000617 	ldw	r4,24(sp)
   24e90:	dcc00717 	ldw	r19,28(sp)
   24e94:	9480004c 	andi	r18,r18,1
   24e98:	20bfffc4 	addi	r2,r4,-1
   24e9c:	9885883a 	add	r2,r19,r2
   24ea0:	d8800415 	stw	r2,16(sp)
   24ea4:	dc800615 	stw	r18,24(sp)
   24ea8:	a80b883a 	mov	r5,r21
   24eac:	8009883a 	mov	r4,r16
   24eb0:	0023e780 	call	23e78 <quorem>
   24eb4:	880b883a 	mov	r5,r17
   24eb8:	8009883a 	mov	r4,r16
   24ebc:	102f883a 	mov	r23,r2
   24ec0:	00276a80 	call	276a8 <__mcmp>
   24ec4:	a80b883a 	mov	r5,r21
   24ec8:	a00d883a 	mov	r6,r20
   24ecc:	e009883a 	mov	r4,fp
   24ed0:	102d883a 	mov	r22,r2
   24ed4:	00277080 	call	27708 <__mdiff>
   24ed8:	1007883a 	mov	r3,r2
   24edc:	10800317 	ldw	r2,12(r2)
   24ee0:	bc800c04 	addi	r18,r23,48
   24ee4:	180b883a 	mov	r5,r3
   24ee8:	10004e1e 	bne	r2,zero,25024 <_dtoa_r+0xfac>
   24eec:	8009883a 	mov	r4,r16
   24ef0:	d8c01615 	stw	r3,88(sp)
   24ef4:	00276a80 	call	276a8 <__mcmp>
   24ef8:	d8c01617 	ldw	r3,88(sp)
   24efc:	e009883a 	mov	r4,fp
   24f00:	d8801615 	stw	r2,88(sp)
   24f04:	180b883a 	mov	r5,r3
   24f08:	0026e880 	call	26e88 <_Bfree>
   24f0c:	d8801617 	ldw	r2,88(sp)
   24f10:	1000041e 	bne	r2,zero,24f24 <_dtoa_r+0xeac>
   24f14:	d9800317 	ldw	r6,12(sp)
   24f18:	3000021e 	bne	r6,zero,24f24 <_dtoa_r+0xeac>
   24f1c:	d8c00617 	ldw	r3,24(sp)
   24f20:	18003726 	beq	r3,zero,25000 <_dtoa_r+0xf88>
   24f24:	b0002016 	blt	r22,zero,24fa8 <_dtoa_r+0xf30>
   24f28:	b000041e 	bne	r22,zero,24f3c <_dtoa_r+0xec4>
   24f2c:	d9000317 	ldw	r4,12(sp)
   24f30:	2000021e 	bne	r4,zero,24f3c <_dtoa_r+0xec4>
   24f34:	d8c00617 	ldw	r3,24(sp)
   24f38:	18001b26 	beq	r3,zero,24fa8 <_dtoa_r+0xf30>
   24f3c:	00810716 	blt	zero,r2,2535c <_dtoa_r+0x12e4>
   24f40:	d8c00417 	ldw	r3,16(sp)
   24f44:	9d800044 	addi	r22,r19,1
   24f48:	9c800005 	stb	r18,0(r19)
   24f4c:	b02f883a 	mov	r23,r22
   24f50:	98c10626 	beq	r19,r3,2536c <_dtoa_r+0x12f4>
   24f54:	800b883a 	mov	r5,r16
   24f58:	000f883a 	mov	r7,zero
   24f5c:	01800284 	movi	r6,10
   24f60:	e009883a 	mov	r4,fp
   24f64:	0026eb00 	call	26eb0 <__multadd>
   24f68:	1021883a 	mov	r16,r2
   24f6c:	000f883a 	mov	r7,zero
   24f70:	01800284 	movi	r6,10
   24f74:	880b883a 	mov	r5,r17
   24f78:	e009883a 	mov	r4,fp
   24f7c:	8d002526 	beq	r17,r20,25014 <_dtoa_r+0xf9c>
   24f80:	0026eb00 	call	26eb0 <__multadd>
   24f84:	a00b883a 	mov	r5,r20
   24f88:	000f883a 	mov	r7,zero
   24f8c:	01800284 	movi	r6,10
   24f90:	e009883a 	mov	r4,fp
   24f94:	1023883a 	mov	r17,r2
   24f98:	0026eb00 	call	26eb0 <__multadd>
   24f9c:	1029883a 	mov	r20,r2
   24fa0:	b027883a 	mov	r19,r22
   24fa4:	003fc006 	br	24ea8 <_gp+0xfffe335c>
   24fa8:	9011883a 	mov	r8,r18
   24fac:	00800e0e 	bge	zero,r2,24fe8 <_dtoa_r+0xf70>
   24fb0:	800b883a 	mov	r5,r16
   24fb4:	01800044 	movi	r6,1
   24fb8:	e009883a 	mov	r4,fp
   24fbc:	da001715 	stw	r8,92(sp)
   24fc0:	00275600 	call	27560 <__lshift>
   24fc4:	a80b883a 	mov	r5,r21
   24fc8:	1009883a 	mov	r4,r2
   24fcc:	1021883a 	mov	r16,r2
   24fd0:	00276a80 	call	276a8 <__mcmp>
   24fd4:	da001717 	ldw	r8,92(sp)
   24fd8:	0081960e 	bge	zero,r2,25634 <_dtoa_r+0x15bc>
   24fdc:	00800e44 	movi	r2,57
   24fe0:	40817026 	beq	r8,r2,255a4 <_dtoa_r+0x152c>
   24fe4:	ba000c44 	addi	r8,r23,49
   24fe8:	8825883a 	mov	r18,r17
   24fec:	9dc00044 	addi	r23,r19,1
   24ff0:	9a000005 	stb	r8,0(r19)
   24ff4:	a023883a 	mov	r17,r20
   24ff8:	dc000915 	stw	r16,36(sp)
   24ffc:	003f2406 	br	24c90 <_gp+0xfffe3144>
   25000:	00800e44 	movi	r2,57
   25004:	9011883a 	mov	r8,r18
   25008:	90816626 	beq	r18,r2,255a4 <_dtoa_r+0x152c>
   2500c:	05bff516 	blt	zero,r22,24fe4 <_gp+0xfffe3498>
   25010:	003ff506 	br	24fe8 <_gp+0xfffe349c>
   25014:	0026eb00 	call	26eb0 <__multadd>
   25018:	1023883a 	mov	r17,r2
   2501c:	1029883a 	mov	r20,r2
   25020:	003fdf06 	br	24fa0 <_gp+0xfffe3454>
   25024:	e009883a 	mov	r4,fp
   25028:	0026e880 	call	26e88 <_Bfree>
   2502c:	00800044 	movi	r2,1
   25030:	003fbc06 	br	24f24 <_gp+0xfffe33d8>
   25034:	a80b883a 	mov	r5,r21
   25038:	8009883a 	mov	r4,r16
   2503c:	00276a80 	call	276a8 <__mcmp>
   25040:	103edb0e 	bge	r2,zero,24bb0 <_gp+0xfffe3064>
   25044:	800b883a 	mov	r5,r16
   25048:	000f883a 	mov	r7,zero
   2504c:	01800284 	movi	r6,10
   25050:	e009883a 	mov	r4,fp
   25054:	0026eb00 	call	26eb0 <__multadd>
   25058:	1021883a 	mov	r16,r2
   2505c:	d8800517 	ldw	r2,20(sp)
   25060:	d8c00b17 	ldw	r3,44(sp)
   25064:	10bfffc4 	addi	r2,r2,-1
   25068:	d8800515 	stw	r2,20(sp)
   2506c:	183f761e 	bne	r3,zero,24e48 <_gp+0xfffe32fc>
   25070:	d9000c17 	ldw	r4,48(sp)
   25074:	0101730e 	bge	zero,r4,25644 <_dtoa_r+0x15cc>
   25078:	d9000615 	stw	r4,24(sp)
   2507c:	003ed006 	br	24bc0 <_gp+0xfffe3074>
   25080:	00800084 	movi	r2,2
   25084:	3081861e 	bne	r6,r2,256a0 <_dtoa_r+0x1628>
   25088:	d8000b15 	stw	zero,44(sp)
   2508c:	003f3c06 	br	24d80 <_gp+0xfffe3234>
   25090:	dc000917 	ldw	r16,36(sp)
   25094:	003e9206 	br	24ae0 <_gp+0xfffe2f94>
   25098:	d9c00317 	ldw	r7,12(sp)
   2509c:	00800084 	movi	r2,2
   250a0:	11fec50e 	bge	r2,r7,24bb8 <_gp+0xfffe306c>
   250a4:	d9000617 	ldw	r4,24(sp)
   250a8:	20013c1e 	bne	r4,zero,2559c <_dtoa_r+0x1524>
   250ac:	a80b883a 	mov	r5,r21
   250b0:	000f883a 	mov	r7,zero
   250b4:	01800144 	movi	r6,5
   250b8:	e009883a 	mov	r4,fp
   250bc:	0026eb00 	call	26eb0 <__multadd>
   250c0:	100b883a 	mov	r5,r2
   250c4:	8009883a 	mov	r4,r16
   250c8:	102b883a 	mov	r21,r2
   250cc:	00276a80 	call	276a8 <__mcmp>
   250d0:	dc000915 	stw	r16,36(sp)
   250d4:	00bf410e 	bge	zero,r2,24ddc <_gp+0xfffe3290>
   250d8:	d9c00717 	ldw	r7,28(sp)
   250dc:	00800c44 	movi	r2,49
   250e0:	38800005 	stb	r2,0(r7)
   250e4:	d8800517 	ldw	r2,20(sp)
   250e8:	3dc00044 	addi	r23,r7,1
   250ec:	10800044 	addi	r2,r2,1
   250f0:	d8800515 	stw	r2,20(sp)
   250f4:	003f3d06 	br	24dec <_gp+0xfffe32a0>
   250f8:	d9800517 	ldw	r6,20(sp)
   250fc:	d9c00717 	ldw	r7,28(sp)
   25100:	00800c44 	movi	r2,49
   25104:	31800044 	addi	r6,r6,1
   25108:	d9800515 	stw	r6,20(sp)
   2510c:	38800005 	stb	r2,0(r7)
   25110:	003edf06 	br	24c90 <_gp+0xfffe3144>
   25114:	d8000b15 	stw	zero,44(sp)
   25118:	003c9f06 	br	24398 <_gp+0xfffe284c>
   2511c:	903e7e1e 	bne	r18,zero,24b18 <_gp+0xfffe2fcc>
   25120:	00800434 	movhi	r2,16
   25124:	10bfffc4 	addi	r2,r2,-1
   25128:	9884703a 	and	r2,r19,r2
   2512c:	1000ea1e 	bne	r2,zero,254d8 <_dtoa_r+0x1460>
   25130:	9cdffc2c 	andhi	r19,r19,32752
   25134:	9800e826 	beq	r19,zero,254d8 <_dtoa_r+0x1460>
   25138:	d9c00817 	ldw	r7,32(sp)
   2513c:	b5800044 	addi	r22,r22,1
   25140:	04c00044 	movi	r19,1
   25144:	39c00044 	addi	r7,r7,1
   25148:	d9c00815 	stw	r7,32(sp)
   2514c:	d8800d17 	ldw	r2,52(sp)
   25150:	103e721e 	bne	r2,zero,24b1c <_gp+0xfffe2fd0>
   25154:	00800044 	movi	r2,1
   25158:	003e7906 	br	24b40 <_gp+0xfffe2ff4>
   2515c:	8009883a 	mov	r4,r16
   25160:	002d2300 	call	2d230 <__floatsidf>
   25164:	d9800f17 	ldw	r6,60(sp)
   25168:	d9c01017 	ldw	r7,64(sp)
   2516c:	1009883a 	mov	r4,r2
   25170:	180b883a 	mov	r5,r3
   25174:	002c19c0 	call	2c19c <__muldf3>
   25178:	000d883a 	mov	r6,zero
   2517c:	01d00734 	movhi	r7,16412
   25180:	1009883a 	mov	r4,r2
   25184:	180b883a 	mov	r5,r3
   25188:	002adb00 	call	2adb0 <__adddf3>
   2518c:	047f3034 	movhi	r17,64704
   25190:	1021883a 	mov	r16,r2
   25194:	1c63883a 	add	r17,r3,r17
   25198:	d9000f17 	ldw	r4,60(sp)
   2519c:	d9401017 	ldw	r5,64(sp)
   251a0:	000d883a 	mov	r6,zero
   251a4:	01d00534 	movhi	r7,16404
   251a8:	002c8b40 	call	2c8b4 <__subdf3>
   251ac:	800d883a 	mov	r6,r16
   251b0:	880f883a 	mov	r7,r17
   251b4:	1009883a 	mov	r4,r2
   251b8:	180b883a 	mov	r5,r3
   251bc:	102b883a 	mov	r21,r2
   251c0:	1829883a 	mov	r20,r3
   251c4:	002bfcc0 	call	2bfcc <__gedf2>
   251c8:	00806c16 	blt	zero,r2,2537c <_dtoa_r+0x1304>
   251cc:	89e0003c 	xorhi	r7,r17,32768
   251d0:	800d883a 	mov	r6,r16
   251d4:	a809883a 	mov	r4,r21
   251d8:	a00b883a 	mov	r5,r20
   251dc:	002c0a80 	call	2c0a8 <__ledf2>
   251e0:	103d7e0e 	bge	r2,zero,247dc <_gp+0xfffe2c90>
   251e4:	002b883a 	mov	r21,zero
   251e8:	0023883a 	mov	r17,zero
   251ec:	003efb06 	br	24ddc <_gp+0xfffe3290>
   251f0:	d8800717 	ldw	r2,28(sp)
   251f4:	003bd006 	br	24138 <_gp+0xfffe25ec>
   251f8:	d9000a17 	ldw	r4,40(sp)
   251fc:	d9800d17 	ldw	r6,52(sp)
   25200:	dd400a15 	stw	r21,40(sp)
   25204:	a905c83a 	sub	r2,r21,r4
   25208:	308d883a 	add	r6,r6,r2
   2520c:	d9800d15 	stw	r6,52(sp)
   25210:	002b883a 	mov	r21,zero
   25214:	003e0606 	br	24a30 <_gp+0xfffe2ee4>
   25218:	9023883a 	mov	r17,r18
   2521c:	9829883a 	mov	r20,r19
   25220:	04000084 	movi	r16,2
   25224:	003c9206 	br	24470 <_gp+0xfffe2924>
   25228:	04000044 	movi	r16,1
   2522c:	dc000c15 	stw	r16,48(sp)
   25230:	dc000615 	stw	r16,24(sp)
   25234:	dc002215 	stw	r16,136(sp)
   25238:	e0001115 	stw	zero,68(fp)
   2523c:	000b883a 	mov	r5,zero
   25240:	003c6906 	br	243e8 <_gp+0xfffe289c>
   25244:	3021883a 	mov	r16,r6
   25248:	003ffb06 	br	25238 <_gp+0xfffe36ec>
   2524c:	1000021e 	bne	r2,zero,25258 <_dtoa_r+0x11e0>
   25250:	4200004c 	andi	r8,r8,1
   25254:	403e7d1e 	bne	r8,zero,24c4c <_gp+0xfffe3100>
   25258:	01000c04 	movi	r4,48
   2525c:	00000106 	br	25264 <_dtoa_r+0x11ec>
   25260:	102f883a 	mov	r23,r2
   25264:	b8bfffc4 	addi	r2,r23,-1
   25268:	10c00007 	ldb	r3,0(r2)
   2526c:	193ffc26 	beq	r3,r4,25260 <_gp+0xfffe3714>
   25270:	003e8706 	br	24c90 <_gp+0xfffe3144>
   25274:	d8800517 	ldw	r2,20(sp)
   25278:	00a3c83a 	sub	r17,zero,r2
   2527c:	8800a426 	beq	r17,zero,25510 <_dtoa_r+0x1498>
   25280:	888003cc 	andi	r2,r17,15
   25284:	100490fa 	slli	r2,r2,3
   25288:	00c000f4 	movhi	r3,3
   2528c:	18df5504 	addi	r3,r3,32084
   25290:	1885883a 	add	r2,r3,r2
   25294:	11800017 	ldw	r6,0(r2)
   25298:	11c00117 	ldw	r7,4(r2)
   2529c:	9009883a 	mov	r4,r18
   252a0:	980b883a 	mov	r5,r19
   252a4:	8823d13a 	srai	r17,r17,4
   252a8:	002c19c0 	call	2c19c <__muldf3>
   252ac:	d8800f15 	stw	r2,60(sp)
   252b0:	d8c01015 	stw	r3,64(sp)
   252b4:	8800e826 	beq	r17,zero,25658 <_dtoa_r+0x15e0>
   252b8:	050000f4 	movhi	r20,3
   252bc:	a51f4b04 	addi	r20,r20,32044
   252c0:	04000084 	movi	r16,2
   252c4:	8980004c 	andi	r6,r17,1
   252c8:	1009883a 	mov	r4,r2
   252cc:	8823d07a 	srai	r17,r17,1
   252d0:	180b883a 	mov	r5,r3
   252d4:	30000426 	beq	r6,zero,252e8 <_dtoa_r+0x1270>
   252d8:	a1800017 	ldw	r6,0(r20)
   252dc:	a1c00117 	ldw	r7,4(r20)
   252e0:	84000044 	addi	r16,r16,1
   252e4:	002c19c0 	call	2c19c <__muldf3>
   252e8:	a5000204 	addi	r20,r20,8
   252ec:	883ff51e 	bne	r17,zero,252c4 <_gp+0xfffe3778>
   252f0:	d8800f15 	stw	r2,60(sp)
   252f4:	d8c01015 	stw	r3,64(sp)
   252f8:	003c7606 	br	244d4 <_gp+0xfffe2988>
   252fc:	00c00c04 	movi	r3,48
   25300:	10c00005 	stb	r3,0(r2)
   25304:	d8c00517 	ldw	r3,20(sp)
   25308:	bd3fffc3 	ldbu	r20,-1(r23)
   2530c:	18c00044 	addi	r3,r3,1
   25310:	d8c00515 	stw	r3,20(sp)
   25314:	003db906 	br	249fc <_gp+0xfffe2eb0>
   25318:	89400117 	ldw	r5,4(r17)
   2531c:	e009883a 	mov	r4,fp
   25320:	0026de00 	call	26de0 <_Balloc>
   25324:	89800417 	ldw	r6,16(r17)
   25328:	89400304 	addi	r5,r17,12
   2532c:	11000304 	addi	r4,r2,12
   25330:	31800084 	addi	r6,r6,2
   25334:	318d883a 	add	r6,r6,r6
   25338:	318d883a 	add	r6,r6,r6
   2533c:	1027883a 	mov	r19,r2
   25340:	0026b3c0 	call	26b3c <memcpy>
   25344:	01800044 	movi	r6,1
   25348:	980b883a 	mov	r5,r19
   2534c:	e009883a 	mov	r4,fp
   25350:	00275600 	call	27560 <__lshift>
   25354:	1029883a 	mov	r20,r2
   25358:	003ecc06 	br	24e8c <_gp+0xfffe3340>
   2535c:	00800e44 	movi	r2,57
   25360:	90809026 	beq	r18,r2,255a4 <_dtoa_r+0x152c>
   25364:	92000044 	addi	r8,r18,1
   25368:	003f1f06 	br	24fe8 <_gp+0xfffe349c>
   2536c:	9011883a 	mov	r8,r18
   25370:	8825883a 	mov	r18,r17
   25374:	a023883a 	mov	r17,r20
   25378:	003e2906 	br	24c20 <_gp+0xfffe30d4>
   2537c:	002b883a 	mov	r21,zero
   25380:	0023883a 	mov	r17,zero
   25384:	003f5406 	br	250d8 <_gp+0xfffe358c>
   25388:	61bfffc4 	addi	r6,r12,-1
   2538c:	300490fa 	slli	r2,r6,3
   25390:	00c000f4 	movhi	r3,3
   25394:	18df5504 	addi	r3,r3,32084
   25398:	1885883a 	add	r2,r3,r2
   2539c:	11000017 	ldw	r4,0(r2)
   253a0:	11400117 	ldw	r5,4(r2)
   253a4:	d8800717 	ldw	r2,28(sp)
   253a8:	880f883a 	mov	r7,r17
   253ac:	d9801215 	stw	r6,72(sp)
   253b0:	800d883a 	mov	r6,r16
   253b4:	db001615 	stw	r12,88(sp)
   253b8:	15c00044 	addi	r23,r2,1
   253bc:	002c19c0 	call	2c19c <__muldf3>
   253c0:	d9401017 	ldw	r5,64(sp)
   253c4:	d9000f17 	ldw	r4,60(sp)
   253c8:	d8c01515 	stw	r3,84(sp)
   253cc:	d8801415 	stw	r2,80(sp)
   253d0:	002d1b00 	call	2d1b0 <__fixdfsi>
   253d4:	1009883a 	mov	r4,r2
   253d8:	1021883a 	mov	r16,r2
   253dc:	002d2300 	call	2d230 <__floatsidf>
   253e0:	d9000f17 	ldw	r4,60(sp)
   253e4:	d9401017 	ldw	r5,64(sp)
   253e8:	100d883a 	mov	r6,r2
   253ec:	180f883a 	mov	r7,r3
   253f0:	002c8b40 	call	2c8b4 <__subdf3>
   253f4:	1829883a 	mov	r20,r3
   253f8:	d8c00717 	ldw	r3,28(sp)
   253fc:	84000c04 	addi	r16,r16,48
   25400:	1023883a 	mov	r17,r2
   25404:	1c000005 	stb	r16,0(r3)
   25408:	db001617 	ldw	r12,88(sp)
   2540c:	00800044 	movi	r2,1
   25410:	60802226 	beq	r12,r2,2549c <_dtoa_r+0x1424>
   25414:	d9c00717 	ldw	r7,28(sp)
   25418:	8805883a 	mov	r2,r17
   2541c:	b82b883a 	mov	r21,r23
   25420:	3b19883a 	add	r12,r7,r12
   25424:	6023883a 	mov	r17,r12
   25428:	a007883a 	mov	r3,r20
   2542c:	dc800f15 	stw	r18,60(sp)
   25430:	000d883a 	mov	r6,zero
   25434:	01d00934 	movhi	r7,16420
   25438:	1009883a 	mov	r4,r2
   2543c:	180b883a 	mov	r5,r3
   25440:	002c19c0 	call	2c19c <__muldf3>
   25444:	180b883a 	mov	r5,r3
   25448:	1009883a 	mov	r4,r2
   2544c:	1829883a 	mov	r20,r3
   25450:	1025883a 	mov	r18,r2
   25454:	002d1b00 	call	2d1b0 <__fixdfsi>
   25458:	1009883a 	mov	r4,r2
   2545c:	1021883a 	mov	r16,r2
   25460:	002d2300 	call	2d230 <__floatsidf>
   25464:	100d883a 	mov	r6,r2
   25468:	180f883a 	mov	r7,r3
   2546c:	9009883a 	mov	r4,r18
   25470:	a00b883a 	mov	r5,r20
   25474:	84000c04 	addi	r16,r16,48
   25478:	002c8b40 	call	2c8b4 <__subdf3>
   2547c:	ad400044 	addi	r21,r21,1
   25480:	ac3fffc5 	stb	r16,-1(r21)
   25484:	ac7fea1e 	bne	r21,r17,25430 <_gp+0xfffe38e4>
   25488:	1023883a 	mov	r17,r2
   2548c:	d8801217 	ldw	r2,72(sp)
   25490:	dc800f17 	ldw	r18,60(sp)
   25494:	1829883a 	mov	r20,r3
   25498:	b8af883a 	add	r23,r23,r2
   2549c:	d9001417 	ldw	r4,80(sp)
   254a0:	d9401517 	ldw	r5,84(sp)
   254a4:	000d883a 	mov	r6,zero
   254a8:	01cff834 	movhi	r7,16352
   254ac:	002adb00 	call	2adb0 <__adddf3>
   254b0:	880d883a 	mov	r6,r17
   254b4:	a00f883a 	mov	r7,r20
   254b8:	1009883a 	mov	r4,r2
   254bc:	180b883a 	mov	r5,r3
   254c0:	002c0a80 	call	2c0a8 <__ledf2>
   254c4:	10003e0e 	bge	r2,zero,255c0 <_dtoa_r+0x1548>
   254c8:	d9001317 	ldw	r4,76(sp)
   254cc:	bd3fffc3 	ldbu	r20,-1(r23)
   254d0:	d9000515 	stw	r4,20(sp)
   254d4:	003d3b06 	br	249c4 <_gp+0xfffe2e78>
   254d8:	0027883a 	mov	r19,zero
   254dc:	003f1b06 	br	2514c <_gp+0xfffe3600>
   254e0:	d8800817 	ldw	r2,32(sp)
   254e4:	11e9c83a 	sub	r20,r2,r7
   254e8:	0005883a 	mov	r2,zero
   254ec:	003d5406 	br	24a40 <_gp+0xfffe2ef4>
   254f0:	00800044 	movi	r2,1
   254f4:	003dc706 	br	24c14 <_gp+0xfffe30c8>
   254f8:	d8c00217 	ldw	r3,8(sp)
   254fc:	00800d84 	movi	r2,54
   25500:	dd400a17 	ldw	r21,40(sp)
   25504:	10c5c83a 	sub	r2,r2,r3
   25508:	dd000817 	ldw	r20,32(sp)
   2550c:	003d4c06 	br	24a40 <_gp+0xfffe2ef4>
   25510:	dc800f15 	stw	r18,60(sp)
   25514:	dcc01015 	stw	r19,64(sp)
   25518:	04000084 	movi	r16,2
   2551c:	003bed06 	br	244d4 <_gp+0xfffe2988>
   25520:	d9000617 	ldw	r4,24(sp)
   25524:	203f0d26 	beq	r4,zero,2515c <_gp+0xfffe3610>
   25528:	d9800c17 	ldw	r6,48(sp)
   2552c:	01bcab0e 	bge	zero,r6,247dc <_gp+0xfffe2c90>
   25530:	d9401017 	ldw	r5,64(sp)
   25534:	d9000f17 	ldw	r4,60(sp)
   25538:	000d883a 	mov	r6,zero
   2553c:	01d00934 	movhi	r7,16420
   25540:	002c19c0 	call	2c19c <__muldf3>
   25544:	81000044 	addi	r4,r16,1
   25548:	d8800f15 	stw	r2,60(sp)
   2554c:	d8c01015 	stw	r3,64(sp)
   25550:	002d2300 	call	2d230 <__floatsidf>
   25554:	d9800f17 	ldw	r6,60(sp)
   25558:	d9c01017 	ldw	r7,64(sp)
   2555c:	1009883a 	mov	r4,r2
   25560:	180b883a 	mov	r5,r3
   25564:	002c19c0 	call	2c19c <__muldf3>
   25568:	01d00734 	movhi	r7,16412
   2556c:	000d883a 	mov	r6,zero
   25570:	1009883a 	mov	r4,r2
   25574:	180b883a 	mov	r5,r3
   25578:	002adb00 	call	2adb0 <__adddf3>
   2557c:	d9c00517 	ldw	r7,20(sp)
   25580:	047f3034 	movhi	r17,64704
   25584:	1021883a 	mov	r16,r2
   25588:	39ffffc4 	addi	r7,r7,-1
   2558c:	d9c01315 	stw	r7,76(sp)
   25590:	1c63883a 	add	r17,r3,r17
   25594:	db000c17 	ldw	r12,48(sp)
   25598:	003bea06 	br	24544 <_gp+0xfffe29f8>
   2559c:	dc000915 	stw	r16,36(sp)
   255a0:	003e0e06 	br	24ddc <_gp+0xfffe3290>
   255a4:	01000e44 	movi	r4,57
   255a8:	8825883a 	mov	r18,r17
   255ac:	9dc00044 	addi	r23,r19,1
   255b0:	99000005 	stb	r4,0(r19)
   255b4:	a023883a 	mov	r17,r20
   255b8:	dc000915 	stw	r16,36(sp)
   255bc:	003da406 	br	24c50 <_gp+0xfffe3104>
   255c0:	d9801417 	ldw	r6,80(sp)
   255c4:	d9c01517 	ldw	r7,84(sp)
   255c8:	0009883a 	mov	r4,zero
   255cc:	014ff834 	movhi	r5,16352
   255d0:	002c8b40 	call	2c8b4 <__subdf3>
   255d4:	880d883a 	mov	r6,r17
   255d8:	a00f883a 	mov	r7,r20
   255dc:	1009883a 	mov	r4,r2
   255e0:	180b883a 	mov	r5,r3
   255e4:	002bfcc0 	call	2bfcc <__gedf2>
   255e8:	00bc7c0e 	bge	zero,r2,247dc <_gp+0xfffe2c90>
   255ec:	01000c04 	movi	r4,48
   255f0:	00000106 	br	255f8 <_dtoa_r+0x1580>
   255f4:	102f883a 	mov	r23,r2
   255f8:	b8bfffc4 	addi	r2,r23,-1
   255fc:	10c00007 	ldb	r3,0(r2)
   25600:	193ffc26 	beq	r3,r4,255f4 <_gp+0xfffe3aa8>
   25604:	d9801317 	ldw	r6,76(sp)
   25608:	d9800515 	stw	r6,20(sp)
   2560c:	003c4406 	br	24720 <_gp+0xfffe2bd4>
   25610:	d9801317 	ldw	r6,76(sp)
   25614:	d9800515 	stw	r6,20(sp)
   25618:	003cea06 	br	249c4 <_gp+0xfffe2e78>
   2561c:	dd800f17 	ldw	r22,60(sp)
   25620:	dcc01017 	ldw	r19,64(sp)
   25624:	dc801217 	ldw	r18,72(sp)
   25628:	003c6c06 	br	247dc <_gp+0xfffe2c90>
   2562c:	903e031e 	bne	r18,zero,24e3c <_gp+0xfffe32f0>
   25630:	003ebb06 	br	25120 <_gp+0xfffe35d4>
   25634:	103e6c1e 	bne	r2,zero,24fe8 <_gp+0xfffe349c>
   25638:	4080004c 	andi	r2,r8,1
   2563c:	103e6a26 	beq	r2,zero,24fe8 <_gp+0xfffe349c>
   25640:	003e6606 	br	24fdc <_gp+0xfffe3490>
   25644:	d8c00317 	ldw	r3,12(sp)
   25648:	00800084 	movi	r2,2
   2564c:	10c02916 	blt	r2,r3,256f4 <_dtoa_r+0x167c>
   25650:	d9000c17 	ldw	r4,48(sp)
   25654:	003e8806 	br	25078 <_gp+0xfffe352c>
   25658:	04000084 	movi	r16,2
   2565c:	003b9d06 	br	244d4 <_gp+0xfffe2988>
   25660:	d9001317 	ldw	r4,76(sp)
   25664:	d9000515 	stw	r4,20(sp)
   25668:	003cd606 	br	249c4 <_gp+0xfffe2e78>
   2566c:	d8801317 	ldw	r2,76(sp)
   25670:	d8800515 	stw	r2,20(sp)
   25674:	003c2a06 	br	24720 <_gp+0xfffe2bd4>
   25678:	d9800317 	ldw	r6,12(sp)
   2567c:	00800084 	movi	r2,2
   25680:	11801516 	blt	r2,r6,256d8 <_dtoa_r+0x1660>
   25684:	d9c00c17 	ldw	r7,48(sp)
   25688:	d9c00615 	stw	r7,24(sp)
   2568c:	003df706 	br	24e6c <_gp+0xfffe3320>
   25690:	193d3926 	beq	r3,r4,24b78 <_gp+0xfffe302c>
   25694:	00c00f04 	movi	r3,60
   25698:	1885c83a 	sub	r2,r3,r2
   2569c:	003ddf06 	br	24e1c <_gp+0xfffe32d0>
   256a0:	e009883a 	mov	r4,fp
   256a4:	e0001115 	stw	zero,68(fp)
   256a8:	000b883a 	mov	r5,zero
   256ac:	0026de00 	call	26de0 <_Balloc>
   256b0:	d8800715 	stw	r2,28(sp)
   256b4:	d8c00717 	ldw	r3,28(sp)
   256b8:	00bfffc4 	movi	r2,-1
   256bc:	01000044 	movi	r4,1
   256c0:	d8800c15 	stw	r2,48(sp)
   256c4:	e0c01015 	stw	r3,64(fp)
   256c8:	d9000b15 	stw	r4,44(sp)
   256cc:	d8800615 	stw	r2,24(sp)
   256d0:	d8002215 	stw	zero,136(sp)
   256d4:	003c4106 	br	247dc <_gp+0xfffe2c90>
   256d8:	d8c00c17 	ldw	r3,48(sp)
   256dc:	d8c00615 	stw	r3,24(sp)
   256e0:	003e7006 	br	250a4 <_gp+0xfffe3558>
   256e4:	04400044 	movi	r17,1
   256e8:	003b2006 	br	2436c <_gp+0xfffe2820>
   256ec:	000b883a 	mov	r5,zero
   256f0:	003b3d06 	br	243e8 <_gp+0xfffe289c>
   256f4:	d8800c17 	ldw	r2,48(sp)
   256f8:	d8800615 	stw	r2,24(sp)
   256fc:	003e6906 	br	250a4 <_gp+0xfffe3558>

00025700 <__sflush_r>:
   25700:	2880030b 	ldhu	r2,12(r5)
   25704:	defffb04 	addi	sp,sp,-20
   25708:	dcc00315 	stw	r19,12(sp)
   2570c:	dc400115 	stw	r17,4(sp)
   25710:	dfc00415 	stw	ra,16(sp)
   25714:	dc800215 	stw	r18,8(sp)
   25718:	dc000015 	stw	r16,0(sp)
   2571c:	10c0020c 	andi	r3,r2,8
   25720:	2823883a 	mov	r17,r5
   25724:	2027883a 	mov	r19,r4
   25728:	1800311e 	bne	r3,zero,257f0 <__sflush_r+0xf0>
   2572c:	28c00117 	ldw	r3,4(r5)
   25730:	10820014 	ori	r2,r2,2048
   25734:	2880030d 	sth	r2,12(r5)
   25738:	00c04b0e 	bge	zero,r3,25868 <__sflush_r+0x168>
   2573c:	8a000a17 	ldw	r8,40(r17)
   25740:	40002326 	beq	r8,zero,257d0 <__sflush_r+0xd0>
   25744:	9c000017 	ldw	r16,0(r19)
   25748:	10c4000c 	andi	r3,r2,4096
   2574c:	98000015 	stw	zero,0(r19)
   25750:	18004826 	beq	r3,zero,25874 <__sflush_r+0x174>
   25754:	89801417 	ldw	r6,80(r17)
   25758:	10c0010c 	andi	r3,r2,4
   2575c:	18000626 	beq	r3,zero,25778 <__sflush_r+0x78>
   25760:	88c00117 	ldw	r3,4(r17)
   25764:	88800c17 	ldw	r2,48(r17)
   25768:	30cdc83a 	sub	r6,r6,r3
   2576c:	10000226 	beq	r2,zero,25778 <__sflush_r+0x78>
   25770:	88800f17 	ldw	r2,60(r17)
   25774:	308dc83a 	sub	r6,r6,r2
   25778:	89400717 	ldw	r5,28(r17)
   2577c:	000f883a 	mov	r7,zero
   25780:	9809883a 	mov	r4,r19
   25784:	403ee83a 	callr	r8
   25788:	00ffffc4 	movi	r3,-1
   2578c:	10c04426 	beq	r2,r3,258a0 <__sflush_r+0x1a0>
   25790:	88c0030b 	ldhu	r3,12(r17)
   25794:	89000417 	ldw	r4,16(r17)
   25798:	88000115 	stw	zero,4(r17)
   2579c:	197dffcc 	andi	r5,r3,63487
   257a0:	8940030d 	sth	r5,12(r17)
   257a4:	89000015 	stw	r4,0(r17)
   257a8:	18c4000c 	andi	r3,r3,4096
   257ac:	18002c1e 	bne	r3,zero,25860 <__sflush_r+0x160>
   257b0:	89400c17 	ldw	r5,48(r17)
   257b4:	9c000015 	stw	r16,0(r19)
   257b8:	28000526 	beq	r5,zero,257d0 <__sflush_r+0xd0>
   257bc:	88801004 	addi	r2,r17,64
   257c0:	28800226 	beq	r5,r2,257cc <__sflush_r+0xcc>
   257c4:	9809883a 	mov	r4,r19
   257c8:	0025e6c0 	call	25e6c <_free_r>
   257cc:	88000c15 	stw	zero,48(r17)
   257d0:	0005883a 	mov	r2,zero
   257d4:	dfc00417 	ldw	ra,16(sp)
   257d8:	dcc00317 	ldw	r19,12(sp)
   257dc:	dc800217 	ldw	r18,8(sp)
   257e0:	dc400117 	ldw	r17,4(sp)
   257e4:	dc000017 	ldw	r16,0(sp)
   257e8:	dec00504 	addi	sp,sp,20
   257ec:	f800283a 	ret
   257f0:	2c800417 	ldw	r18,16(r5)
   257f4:	903ff626 	beq	r18,zero,257d0 <_gp+0xfffe3c84>
   257f8:	2c000017 	ldw	r16,0(r5)
   257fc:	108000cc 	andi	r2,r2,3
   25800:	2c800015 	stw	r18,0(r5)
   25804:	84a1c83a 	sub	r16,r16,r18
   25808:	1000131e 	bne	r2,zero,25858 <__sflush_r+0x158>
   2580c:	28800517 	ldw	r2,20(r5)
   25810:	88800215 	stw	r2,8(r17)
   25814:	04000316 	blt	zero,r16,25824 <__sflush_r+0x124>
   25818:	003fed06 	br	257d0 <_gp+0xfffe3c84>
   2581c:	90a5883a 	add	r18,r18,r2
   25820:	043feb0e 	bge	zero,r16,257d0 <_gp+0xfffe3c84>
   25824:	88800917 	ldw	r2,36(r17)
   25828:	89400717 	ldw	r5,28(r17)
   2582c:	800f883a 	mov	r7,r16
   25830:	900d883a 	mov	r6,r18
   25834:	9809883a 	mov	r4,r19
   25838:	103ee83a 	callr	r2
   2583c:	80a1c83a 	sub	r16,r16,r2
   25840:	00bff616 	blt	zero,r2,2581c <_gp+0xfffe3cd0>
   25844:	88c0030b 	ldhu	r3,12(r17)
   25848:	00bfffc4 	movi	r2,-1
   2584c:	18c01014 	ori	r3,r3,64
   25850:	88c0030d 	sth	r3,12(r17)
   25854:	003fdf06 	br	257d4 <_gp+0xfffe3c88>
   25858:	0005883a 	mov	r2,zero
   2585c:	003fec06 	br	25810 <_gp+0xfffe3cc4>
   25860:	88801415 	stw	r2,80(r17)
   25864:	003fd206 	br	257b0 <_gp+0xfffe3c64>
   25868:	28c00f17 	ldw	r3,60(r5)
   2586c:	00ffb316 	blt	zero,r3,2573c <_gp+0xfffe3bf0>
   25870:	003fd706 	br	257d0 <_gp+0xfffe3c84>
   25874:	89400717 	ldw	r5,28(r17)
   25878:	000d883a 	mov	r6,zero
   2587c:	01c00044 	movi	r7,1
   25880:	9809883a 	mov	r4,r19
   25884:	403ee83a 	callr	r8
   25888:	100d883a 	mov	r6,r2
   2588c:	00bfffc4 	movi	r2,-1
   25890:	30801426 	beq	r6,r2,258e4 <__sflush_r+0x1e4>
   25894:	8880030b 	ldhu	r2,12(r17)
   25898:	8a000a17 	ldw	r8,40(r17)
   2589c:	003fae06 	br	25758 <_gp+0xfffe3c0c>
   258a0:	98c00017 	ldw	r3,0(r19)
   258a4:	183fba26 	beq	r3,zero,25790 <_gp+0xfffe3c44>
   258a8:	01000744 	movi	r4,29
   258ac:	19000626 	beq	r3,r4,258c8 <__sflush_r+0x1c8>
   258b0:	01000584 	movi	r4,22
   258b4:	19000426 	beq	r3,r4,258c8 <__sflush_r+0x1c8>
   258b8:	88c0030b 	ldhu	r3,12(r17)
   258bc:	18c01014 	ori	r3,r3,64
   258c0:	88c0030d 	sth	r3,12(r17)
   258c4:	003fc306 	br	257d4 <_gp+0xfffe3c88>
   258c8:	8880030b 	ldhu	r2,12(r17)
   258cc:	88c00417 	ldw	r3,16(r17)
   258d0:	88000115 	stw	zero,4(r17)
   258d4:	10bdffcc 	andi	r2,r2,63487
   258d8:	8880030d 	sth	r2,12(r17)
   258dc:	88c00015 	stw	r3,0(r17)
   258e0:	003fb306 	br	257b0 <_gp+0xfffe3c64>
   258e4:	98800017 	ldw	r2,0(r19)
   258e8:	103fea26 	beq	r2,zero,25894 <_gp+0xfffe3d48>
   258ec:	00c00744 	movi	r3,29
   258f0:	10c00226 	beq	r2,r3,258fc <__sflush_r+0x1fc>
   258f4:	00c00584 	movi	r3,22
   258f8:	10c0031e 	bne	r2,r3,25908 <__sflush_r+0x208>
   258fc:	9c000015 	stw	r16,0(r19)
   25900:	0005883a 	mov	r2,zero
   25904:	003fb306 	br	257d4 <_gp+0xfffe3c88>
   25908:	88c0030b 	ldhu	r3,12(r17)
   2590c:	3005883a 	mov	r2,r6
   25910:	18c01014 	ori	r3,r3,64
   25914:	88c0030d 	sth	r3,12(r17)
   25918:	003fae06 	br	257d4 <_gp+0xfffe3c88>

0002591c <_fflush_r>:
   2591c:	defffd04 	addi	sp,sp,-12
   25920:	dc000115 	stw	r16,4(sp)
   25924:	dfc00215 	stw	ra,8(sp)
   25928:	2021883a 	mov	r16,r4
   2592c:	20000226 	beq	r4,zero,25938 <_fflush_r+0x1c>
   25930:	20800e17 	ldw	r2,56(r4)
   25934:	10000c26 	beq	r2,zero,25968 <_fflush_r+0x4c>
   25938:	2880030f 	ldh	r2,12(r5)
   2593c:	1000051e 	bne	r2,zero,25954 <_fflush_r+0x38>
   25940:	0005883a 	mov	r2,zero
   25944:	dfc00217 	ldw	ra,8(sp)
   25948:	dc000117 	ldw	r16,4(sp)
   2594c:	dec00304 	addi	sp,sp,12
   25950:	f800283a 	ret
   25954:	8009883a 	mov	r4,r16
   25958:	dfc00217 	ldw	ra,8(sp)
   2595c:	dc000117 	ldw	r16,4(sp)
   25960:	dec00304 	addi	sp,sp,12
   25964:	00257001 	jmpi	25700 <__sflush_r>
   25968:	d9400015 	stw	r5,0(sp)
   2596c:	0025cf80 	call	25cf8 <__sinit>
   25970:	d9400017 	ldw	r5,0(sp)
   25974:	003ff006 	br	25938 <_gp+0xfffe3dec>

00025978 <fflush>:
   25978:	20000526 	beq	r4,zero,25990 <fflush+0x18>
   2597c:	00800134 	movhi	r2,4
   25980:	10a6d604 	addi	r2,r2,-25768
   25984:	200b883a 	mov	r5,r4
   25988:	11000017 	ldw	r4,0(r2)
   2598c:	002591c1 	jmpi	2591c <_fflush_r>
   25990:	00800134 	movhi	r2,4
   25994:	10a6d504 	addi	r2,r2,-25772
   25998:	11000017 	ldw	r4,0(r2)
   2599c:	014000b4 	movhi	r5,2
   259a0:	29564704 	addi	r5,r5,22812
   259a4:	00266fc1 	jmpi	266fc <_fwalk_reent>

000259a8 <__fp_unlock>:
   259a8:	0005883a 	mov	r2,zero
   259ac:	f800283a 	ret

000259b0 <_cleanup_r>:
   259b0:	014000f4 	movhi	r5,3
   259b4:	2966ba04 	addi	r5,r5,-25880
   259b8:	00266fc1 	jmpi	266fc <_fwalk_reent>

000259bc <__sinit.part.1>:
   259bc:	defff704 	addi	sp,sp,-36
   259c0:	00c000b4 	movhi	r3,2
   259c4:	dfc00815 	stw	ra,32(sp)
   259c8:	ddc00715 	stw	r23,28(sp)
   259cc:	dd800615 	stw	r22,24(sp)
   259d0:	dd400515 	stw	r21,20(sp)
   259d4:	dd000415 	stw	r20,16(sp)
   259d8:	dcc00315 	stw	r19,12(sp)
   259dc:	dc800215 	stw	r18,8(sp)
   259e0:	dc400115 	stw	r17,4(sp)
   259e4:	dc000015 	stw	r16,0(sp)
   259e8:	18d66c04 	addi	r3,r3,22960
   259ec:	24000117 	ldw	r16,4(r4)
   259f0:	20c00f15 	stw	r3,60(r4)
   259f4:	2080bb04 	addi	r2,r4,748
   259f8:	00c000c4 	movi	r3,3
   259fc:	20c0b915 	stw	r3,740(r4)
   25a00:	2080ba15 	stw	r2,744(r4)
   25a04:	2000b815 	stw	zero,736(r4)
   25a08:	05c00204 	movi	r23,8
   25a0c:	00800104 	movi	r2,4
   25a10:	2025883a 	mov	r18,r4
   25a14:	b80d883a 	mov	r6,r23
   25a18:	81001704 	addi	r4,r16,92
   25a1c:	000b883a 	mov	r5,zero
   25a20:	80000015 	stw	zero,0(r16)
   25a24:	80000115 	stw	zero,4(r16)
   25a28:	80000215 	stw	zero,8(r16)
   25a2c:	8080030d 	sth	r2,12(r16)
   25a30:	80001915 	stw	zero,100(r16)
   25a34:	8000038d 	sth	zero,14(r16)
   25a38:	80000415 	stw	zero,16(r16)
   25a3c:	80000515 	stw	zero,20(r16)
   25a40:	80000615 	stw	zero,24(r16)
   25a44:	00211640 	call	21164 <memset>
   25a48:	058000b4 	movhi	r22,2
   25a4c:	94400217 	ldw	r17,8(r18)
   25a50:	054000f4 	movhi	r21,3
   25a54:	050000f4 	movhi	r20,3
   25a58:	04c000f4 	movhi	r19,3
   25a5c:	b59fee04 	addi	r22,r22,32696
   25a60:	ad600504 	addi	r21,r21,-32748
   25a64:	a5202404 	addi	r20,r20,-32624
   25a68:	9ce03b04 	addi	r19,r19,-32532
   25a6c:	85800815 	stw	r22,32(r16)
   25a70:	85400915 	stw	r21,36(r16)
   25a74:	85000a15 	stw	r20,40(r16)
   25a78:	84c00b15 	stw	r19,44(r16)
   25a7c:	84000715 	stw	r16,28(r16)
   25a80:	00800284 	movi	r2,10
   25a84:	8880030d 	sth	r2,12(r17)
   25a88:	00800044 	movi	r2,1
   25a8c:	b80d883a 	mov	r6,r23
   25a90:	89001704 	addi	r4,r17,92
   25a94:	000b883a 	mov	r5,zero
   25a98:	88000015 	stw	zero,0(r17)
   25a9c:	88000115 	stw	zero,4(r17)
   25aa0:	88000215 	stw	zero,8(r17)
   25aa4:	88001915 	stw	zero,100(r17)
   25aa8:	8880038d 	sth	r2,14(r17)
   25aac:	88000415 	stw	zero,16(r17)
   25ab0:	88000515 	stw	zero,20(r17)
   25ab4:	88000615 	stw	zero,24(r17)
   25ab8:	00211640 	call	21164 <memset>
   25abc:	94000317 	ldw	r16,12(r18)
   25ac0:	00800484 	movi	r2,18
   25ac4:	8c400715 	stw	r17,28(r17)
   25ac8:	8d800815 	stw	r22,32(r17)
   25acc:	8d400915 	stw	r21,36(r17)
   25ad0:	8d000a15 	stw	r20,40(r17)
   25ad4:	8cc00b15 	stw	r19,44(r17)
   25ad8:	8080030d 	sth	r2,12(r16)
   25adc:	00800084 	movi	r2,2
   25ae0:	80000015 	stw	zero,0(r16)
   25ae4:	80000115 	stw	zero,4(r16)
   25ae8:	80000215 	stw	zero,8(r16)
   25aec:	80001915 	stw	zero,100(r16)
   25af0:	8080038d 	sth	r2,14(r16)
   25af4:	80000415 	stw	zero,16(r16)
   25af8:	80000515 	stw	zero,20(r16)
   25afc:	80000615 	stw	zero,24(r16)
   25b00:	b80d883a 	mov	r6,r23
   25b04:	000b883a 	mov	r5,zero
   25b08:	81001704 	addi	r4,r16,92
   25b0c:	00211640 	call	21164 <memset>
   25b10:	00800044 	movi	r2,1
   25b14:	84000715 	stw	r16,28(r16)
   25b18:	85800815 	stw	r22,32(r16)
   25b1c:	85400915 	stw	r21,36(r16)
   25b20:	85000a15 	stw	r20,40(r16)
   25b24:	84c00b15 	stw	r19,44(r16)
   25b28:	90800e15 	stw	r2,56(r18)
   25b2c:	dfc00817 	ldw	ra,32(sp)
   25b30:	ddc00717 	ldw	r23,28(sp)
   25b34:	dd800617 	ldw	r22,24(sp)
   25b38:	dd400517 	ldw	r21,20(sp)
   25b3c:	dd000417 	ldw	r20,16(sp)
   25b40:	dcc00317 	ldw	r19,12(sp)
   25b44:	dc800217 	ldw	r18,8(sp)
   25b48:	dc400117 	ldw	r17,4(sp)
   25b4c:	dc000017 	ldw	r16,0(sp)
   25b50:	dec00904 	addi	sp,sp,36
   25b54:	f800283a 	ret

00025b58 <__fp_lock>:
   25b58:	0005883a 	mov	r2,zero
   25b5c:	f800283a 	ret

00025b60 <__sfmoreglue>:
   25b60:	defffc04 	addi	sp,sp,-16
   25b64:	dc400115 	stw	r17,4(sp)
   25b68:	2c7fffc4 	addi	r17,r5,-1
   25b6c:	8c401a24 	muli	r17,r17,104
   25b70:	dc800215 	stw	r18,8(sp)
   25b74:	2825883a 	mov	r18,r5
   25b78:	89401d04 	addi	r5,r17,116
   25b7c:	dc000015 	stw	r16,0(sp)
   25b80:	dfc00315 	stw	ra,12(sp)
   25b84:	00209580 	call	20958 <_malloc_r>
   25b88:	1021883a 	mov	r16,r2
   25b8c:	10000726 	beq	r2,zero,25bac <__sfmoreglue+0x4c>
   25b90:	11000304 	addi	r4,r2,12
   25b94:	10000015 	stw	zero,0(r2)
   25b98:	14800115 	stw	r18,4(r2)
   25b9c:	11000215 	stw	r4,8(r2)
   25ba0:	89801a04 	addi	r6,r17,104
   25ba4:	000b883a 	mov	r5,zero
   25ba8:	00211640 	call	21164 <memset>
   25bac:	8005883a 	mov	r2,r16
   25bb0:	dfc00317 	ldw	ra,12(sp)
   25bb4:	dc800217 	ldw	r18,8(sp)
   25bb8:	dc400117 	ldw	r17,4(sp)
   25bbc:	dc000017 	ldw	r16,0(sp)
   25bc0:	dec00404 	addi	sp,sp,16
   25bc4:	f800283a 	ret

00025bc8 <__sfp>:
   25bc8:	defffb04 	addi	sp,sp,-20
   25bcc:	dc000015 	stw	r16,0(sp)
   25bd0:	04000134 	movhi	r16,4
   25bd4:	8426d504 	addi	r16,r16,-25772
   25bd8:	dcc00315 	stw	r19,12(sp)
   25bdc:	2027883a 	mov	r19,r4
   25be0:	81000017 	ldw	r4,0(r16)
   25be4:	dfc00415 	stw	ra,16(sp)
   25be8:	dc800215 	stw	r18,8(sp)
   25bec:	20800e17 	ldw	r2,56(r4)
   25bf0:	dc400115 	stw	r17,4(sp)
   25bf4:	1000021e 	bne	r2,zero,25c00 <__sfp+0x38>
   25bf8:	00259bc0 	call	259bc <__sinit.part.1>
   25bfc:	81000017 	ldw	r4,0(r16)
   25c00:	2480b804 	addi	r18,r4,736
   25c04:	047fffc4 	movi	r17,-1
   25c08:	91000117 	ldw	r4,4(r18)
   25c0c:	94000217 	ldw	r16,8(r18)
   25c10:	213fffc4 	addi	r4,r4,-1
   25c14:	20000a16 	blt	r4,zero,25c40 <__sfp+0x78>
   25c18:	8080030f 	ldh	r2,12(r16)
   25c1c:	10000c26 	beq	r2,zero,25c50 <__sfp+0x88>
   25c20:	80c01d04 	addi	r3,r16,116
   25c24:	00000206 	br	25c30 <__sfp+0x68>
   25c28:	18bfe60f 	ldh	r2,-104(r3)
   25c2c:	10000826 	beq	r2,zero,25c50 <__sfp+0x88>
   25c30:	213fffc4 	addi	r4,r4,-1
   25c34:	1c3ffd04 	addi	r16,r3,-12
   25c38:	18c01a04 	addi	r3,r3,104
   25c3c:	247ffa1e 	bne	r4,r17,25c28 <_gp+0xfffe40dc>
   25c40:	90800017 	ldw	r2,0(r18)
   25c44:	10001d26 	beq	r2,zero,25cbc <__sfp+0xf4>
   25c48:	1025883a 	mov	r18,r2
   25c4c:	003fee06 	br	25c08 <_gp+0xfffe40bc>
   25c50:	00bfffc4 	movi	r2,-1
   25c54:	8080038d 	sth	r2,14(r16)
   25c58:	00800044 	movi	r2,1
   25c5c:	8080030d 	sth	r2,12(r16)
   25c60:	80001915 	stw	zero,100(r16)
   25c64:	80000015 	stw	zero,0(r16)
   25c68:	80000215 	stw	zero,8(r16)
   25c6c:	80000115 	stw	zero,4(r16)
   25c70:	80000415 	stw	zero,16(r16)
   25c74:	80000515 	stw	zero,20(r16)
   25c78:	80000615 	stw	zero,24(r16)
   25c7c:	01800204 	movi	r6,8
   25c80:	000b883a 	mov	r5,zero
   25c84:	81001704 	addi	r4,r16,92
   25c88:	00211640 	call	21164 <memset>
   25c8c:	8005883a 	mov	r2,r16
   25c90:	80000c15 	stw	zero,48(r16)
   25c94:	80000d15 	stw	zero,52(r16)
   25c98:	80001115 	stw	zero,68(r16)
   25c9c:	80001215 	stw	zero,72(r16)
   25ca0:	dfc00417 	ldw	ra,16(sp)
   25ca4:	dcc00317 	ldw	r19,12(sp)
   25ca8:	dc800217 	ldw	r18,8(sp)
   25cac:	dc400117 	ldw	r17,4(sp)
   25cb0:	dc000017 	ldw	r16,0(sp)
   25cb4:	dec00504 	addi	sp,sp,20
   25cb8:	f800283a 	ret
   25cbc:	01400104 	movi	r5,4
   25cc0:	9809883a 	mov	r4,r19
   25cc4:	0025b600 	call	25b60 <__sfmoreglue>
   25cc8:	90800015 	stw	r2,0(r18)
   25ccc:	103fde1e 	bne	r2,zero,25c48 <_gp+0xfffe40fc>
   25cd0:	00800304 	movi	r2,12
   25cd4:	98800015 	stw	r2,0(r19)
   25cd8:	0005883a 	mov	r2,zero
   25cdc:	003ff006 	br	25ca0 <_gp+0xfffe4154>

00025ce0 <_cleanup>:
   25ce0:	00800134 	movhi	r2,4
   25ce4:	10a6d504 	addi	r2,r2,-25772
   25ce8:	11000017 	ldw	r4,0(r2)
   25cec:	014000f4 	movhi	r5,3
   25cf0:	2966ba04 	addi	r5,r5,-25880
   25cf4:	00266fc1 	jmpi	266fc <_fwalk_reent>

00025cf8 <__sinit>:
   25cf8:	20800e17 	ldw	r2,56(r4)
   25cfc:	10000126 	beq	r2,zero,25d04 <__sinit+0xc>
   25d00:	f800283a 	ret
   25d04:	00259bc1 	jmpi	259bc <__sinit.part.1>

00025d08 <__sfp_lock_acquire>:
   25d08:	f800283a 	ret

00025d0c <__sfp_lock_release>:
   25d0c:	f800283a 	ret

00025d10 <__sinit_lock_acquire>:
   25d10:	f800283a 	ret

00025d14 <__sinit_lock_release>:
   25d14:	f800283a 	ret

00025d18 <__fp_lock_all>:
   25d18:	00800134 	movhi	r2,4
   25d1c:	10a6d604 	addi	r2,r2,-25768
   25d20:	11000017 	ldw	r4,0(r2)
   25d24:	014000b4 	movhi	r5,2
   25d28:	2956d604 	addi	r5,r5,23384
   25d2c:	00266381 	jmpi	26638 <_fwalk>

00025d30 <__fp_unlock_all>:
   25d30:	00800134 	movhi	r2,4
   25d34:	10a6d604 	addi	r2,r2,-25768
   25d38:	11000017 	ldw	r4,0(r2)
   25d3c:	014000b4 	movhi	r5,2
   25d40:	29566a04 	addi	r5,r5,22952
   25d44:	00266381 	jmpi	26638 <_fwalk>

00025d48 <_malloc_trim_r>:
   25d48:	defffb04 	addi	sp,sp,-20
   25d4c:	dcc00315 	stw	r19,12(sp)
   25d50:	04c00134 	movhi	r19,4
   25d54:	dc800215 	stw	r18,8(sp)
   25d58:	dc400115 	stw	r17,4(sp)
   25d5c:	dc000015 	stw	r16,0(sp)
   25d60:	dfc00415 	stw	ra,16(sp)
   25d64:	2821883a 	mov	r16,r5
   25d68:	9ce02504 	addi	r19,r19,-32620
   25d6c:	2025883a 	mov	r18,r4
   25d70:	002de780 	call	2de78 <__malloc_lock>
   25d74:	98800217 	ldw	r2,8(r19)
   25d78:	14400117 	ldw	r17,4(r2)
   25d7c:	00bfff04 	movi	r2,-4
   25d80:	88a2703a 	and	r17,r17,r2
   25d84:	8c21c83a 	sub	r16,r17,r16
   25d88:	8403fbc4 	addi	r16,r16,4079
   25d8c:	8020d33a 	srli	r16,r16,12
   25d90:	0083ffc4 	movi	r2,4095
   25d94:	843fffc4 	addi	r16,r16,-1
   25d98:	8020933a 	slli	r16,r16,12
   25d9c:	1400060e 	bge	r2,r16,25db8 <_malloc_trim_r+0x70>
   25da0:	000b883a 	mov	r5,zero
   25da4:	9009883a 	mov	r4,r18
   25da8:	00219680 	call	21968 <_sbrk_r>
   25dac:	98c00217 	ldw	r3,8(r19)
   25db0:	1c47883a 	add	r3,r3,r17
   25db4:	10c00a26 	beq	r2,r3,25de0 <_malloc_trim_r+0x98>
   25db8:	9009883a 	mov	r4,r18
   25dbc:	002df980 	call	2df98 <__malloc_unlock>
   25dc0:	0005883a 	mov	r2,zero
   25dc4:	dfc00417 	ldw	ra,16(sp)
   25dc8:	dcc00317 	ldw	r19,12(sp)
   25dcc:	dc800217 	ldw	r18,8(sp)
   25dd0:	dc400117 	ldw	r17,4(sp)
   25dd4:	dc000017 	ldw	r16,0(sp)
   25dd8:	dec00504 	addi	sp,sp,20
   25ddc:	f800283a 	ret
   25de0:	040bc83a 	sub	r5,zero,r16
   25de4:	9009883a 	mov	r4,r18
   25de8:	00219680 	call	21968 <_sbrk_r>
   25dec:	00ffffc4 	movi	r3,-1
   25df0:	10c00d26 	beq	r2,r3,25e28 <_malloc_trim_r+0xe0>
   25df4:	00c00134 	movhi	r3,4
   25df8:	18ee0604 	addi	r3,r3,-18408
   25dfc:	18800017 	ldw	r2,0(r3)
   25e00:	99000217 	ldw	r4,8(r19)
   25e04:	8c23c83a 	sub	r17,r17,r16
   25e08:	8c400054 	ori	r17,r17,1
   25e0c:	1421c83a 	sub	r16,r2,r16
   25e10:	24400115 	stw	r17,4(r4)
   25e14:	9009883a 	mov	r4,r18
   25e18:	1c000015 	stw	r16,0(r3)
   25e1c:	002df980 	call	2df98 <__malloc_unlock>
   25e20:	00800044 	movi	r2,1
   25e24:	003fe706 	br	25dc4 <_gp+0xfffe4278>
   25e28:	000b883a 	mov	r5,zero
   25e2c:	9009883a 	mov	r4,r18
   25e30:	00219680 	call	21968 <_sbrk_r>
   25e34:	99000217 	ldw	r4,8(r19)
   25e38:	014003c4 	movi	r5,15
   25e3c:	1107c83a 	sub	r3,r2,r4
   25e40:	28ffdd0e 	bge	r5,r3,25db8 <_gp+0xfffe426c>
   25e44:	01400134 	movhi	r5,4
   25e48:	2966d304 	addi	r5,r5,-25780
   25e4c:	29400017 	ldw	r5,0(r5)
   25e50:	18c00054 	ori	r3,r3,1
   25e54:	20c00115 	stw	r3,4(r4)
   25e58:	00c00134 	movhi	r3,4
   25e5c:	1145c83a 	sub	r2,r2,r5
   25e60:	18ee0604 	addi	r3,r3,-18408
   25e64:	18800015 	stw	r2,0(r3)
   25e68:	003fd306 	br	25db8 <_gp+0xfffe426c>

00025e6c <_free_r>:
   25e6c:	28004126 	beq	r5,zero,25f74 <_free_r+0x108>
   25e70:	defffd04 	addi	sp,sp,-12
   25e74:	dc400115 	stw	r17,4(sp)
   25e78:	dc000015 	stw	r16,0(sp)
   25e7c:	2023883a 	mov	r17,r4
   25e80:	2821883a 	mov	r16,r5
   25e84:	dfc00215 	stw	ra,8(sp)
   25e88:	002de780 	call	2de78 <__malloc_lock>
   25e8c:	81ffff17 	ldw	r7,-4(r16)
   25e90:	00bfff84 	movi	r2,-2
   25e94:	01000134 	movhi	r4,4
   25e98:	81bffe04 	addi	r6,r16,-8
   25e9c:	3884703a 	and	r2,r7,r2
   25ea0:	21202504 	addi	r4,r4,-32620
   25ea4:	308b883a 	add	r5,r6,r2
   25ea8:	2a400117 	ldw	r9,4(r5)
   25eac:	22000217 	ldw	r8,8(r4)
   25eb0:	00ffff04 	movi	r3,-4
   25eb4:	48c6703a 	and	r3,r9,r3
   25eb8:	2a005726 	beq	r5,r8,26018 <_free_r+0x1ac>
   25ebc:	28c00115 	stw	r3,4(r5)
   25ec0:	39c0004c 	andi	r7,r7,1
   25ec4:	3800091e 	bne	r7,zero,25eec <_free_r+0x80>
   25ec8:	823ffe17 	ldw	r8,-8(r16)
   25ecc:	22400204 	addi	r9,r4,8
   25ed0:	320dc83a 	sub	r6,r6,r8
   25ed4:	31c00217 	ldw	r7,8(r6)
   25ed8:	1205883a 	add	r2,r2,r8
   25edc:	3a406526 	beq	r7,r9,26074 <_free_r+0x208>
   25ee0:	32000317 	ldw	r8,12(r6)
   25ee4:	3a000315 	stw	r8,12(r7)
   25ee8:	41c00215 	stw	r7,8(r8)
   25eec:	28cf883a 	add	r7,r5,r3
   25ef0:	39c00117 	ldw	r7,4(r7)
   25ef4:	39c0004c 	andi	r7,r7,1
   25ef8:	38003a26 	beq	r7,zero,25fe4 <_free_r+0x178>
   25efc:	10c00054 	ori	r3,r2,1
   25f00:	30c00115 	stw	r3,4(r6)
   25f04:	3087883a 	add	r3,r6,r2
   25f08:	18800015 	stw	r2,0(r3)
   25f0c:	00c07fc4 	movi	r3,511
   25f10:	18801936 	bltu	r3,r2,25f78 <_free_r+0x10c>
   25f14:	1004d0fa 	srli	r2,r2,3
   25f18:	01c00044 	movi	r7,1
   25f1c:	21400117 	ldw	r5,4(r4)
   25f20:	10c00044 	addi	r3,r2,1
   25f24:	18c7883a 	add	r3,r3,r3
   25f28:	1005d0ba 	srai	r2,r2,2
   25f2c:	18c7883a 	add	r3,r3,r3
   25f30:	18c7883a 	add	r3,r3,r3
   25f34:	1907883a 	add	r3,r3,r4
   25f38:	3884983a 	sll	r2,r7,r2
   25f3c:	19c00017 	ldw	r7,0(r3)
   25f40:	1a3ffe04 	addi	r8,r3,-8
   25f44:	1144b03a 	or	r2,r2,r5
   25f48:	32000315 	stw	r8,12(r6)
   25f4c:	31c00215 	stw	r7,8(r6)
   25f50:	20800115 	stw	r2,4(r4)
   25f54:	19800015 	stw	r6,0(r3)
   25f58:	39800315 	stw	r6,12(r7)
   25f5c:	8809883a 	mov	r4,r17
   25f60:	dfc00217 	ldw	ra,8(sp)
   25f64:	dc400117 	ldw	r17,4(sp)
   25f68:	dc000017 	ldw	r16,0(sp)
   25f6c:	dec00304 	addi	sp,sp,12
   25f70:	002df981 	jmpi	2df98 <__malloc_unlock>
   25f74:	f800283a 	ret
   25f78:	100ad27a 	srli	r5,r2,9
   25f7c:	00c00104 	movi	r3,4
   25f80:	19404a36 	bltu	r3,r5,260ac <_free_r+0x240>
   25f84:	100ad1ba 	srli	r5,r2,6
   25f88:	28c00e44 	addi	r3,r5,57
   25f8c:	18c7883a 	add	r3,r3,r3
   25f90:	29400e04 	addi	r5,r5,56
   25f94:	18c7883a 	add	r3,r3,r3
   25f98:	18c7883a 	add	r3,r3,r3
   25f9c:	1909883a 	add	r4,r3,r4
   25fa0:	20c00017 	ldw	r3,0(r4)
   25fa4:	01c00134 	movhi	r7,4
   25fa8:	213ffe04 	addi	r4,r4,-8
   25fac:	39e02504 	addi	r7,r7,-32620
   25fb0:	20c04426 	beq	r4,r3,260c4 <_free_r+0x258>
   25fb4:	01ffff04 	movi	r7,-4
   25fb8:	19400117 	ldw	r5,4(r3)
   25fbc:	29ca703a 	and	r5,r5,r7
   25fc0:	1140022e 	bgeu	r2,r5,25fcc <_free_r+0x160>
   25fc4:	18c00217 	ldw	r3,8(r3)
   25fc8:	20fffb1e 	bne	r4,r3,25fb8 <_gp+0xfffe446c>
   25fcc:	19000317 	ldw	r4,12(r3)
   25fd0:	31000315 	stw	r4,12(r6)
   25fd4:	30c00215 	stw	r3,8(r6)
   25fd8:	21800215 	stw	r6,8(r4)
   25fdc:	19800315 	stw	r6,12(r3)
   25fe0:	003fde06 	br	25f5c <_gp+0xfffe4410>
   25fe4:	29c00217 	ldw	r7,8(r5)
   25fe8:	10c5883a 	add	r2,r2,r3
   25fec:	00c00134 	movhi	r3,4
   25ff0:	18e02704 	addi	r3,r3,-32612
   25ff4:	38c03b26 	beq	r7,r3,260e4 <_free_r+0x278>
   25ff8:	2a000317 	ldw	r8,12(r5)
   25ffc:	11400054 	ori	r5,r2,1
   26000:	3087883a 	add	r3,r6,r2
   26004:	3a000315 	stw	r8,12(r7)
   26008:	41c00215 	stw	r7,8(r8)
   2600c:	31400115 	stw	r5,4(r6)
   26010:	18800015 	stw	r2,0(r3)
   26014:	003fbd06 	br	25f0c <_gp+0xfffe43c0>
   26018:	39c0004c 	andi	r7,r7,1
   2601c:	10c5883a 	add	r2,r2,r3
   26020:	3800071e 	bne	r7,zero,26040 <_free_r+0x1d4>
   26024:	81fffe17 	ldw	r7,-8(r16)
   26028:	31cdc83a 	sub	r6,r6,r7
   2602c:	30c00317 	ldw	r3,12(r6)
   26030:	31400217 	ldw	r5,8(r6)
   26034:	11c5883a 	add	r2,r2,r7
   26038:	28c00315 	stw	r3,12(r5)
   2603c:	19400215 	stw	r5,8(r3)
   26040:	10c00054 	ori	r3,r2,1
   26044:	30c00115 	stw	r3,4(r6)
   26048:	00c00134 	movhi	r3,4
   2604c:	18e6d404 	addi	r3,r3,-25776
   26050:	18c00017 	ldw	r3,0(r3)
   26054:	21800215 	stw	r6,8(r4)
   26058:	10ffc036 	bltu	r2,r3,25f5c <_gp+0xfffe4410>
   2605c:	00800134 	movhi	r2,4
   26060:	10ade104 	addi	r2,r2,-18556
   26064:	11400017 	ldw	r5,0(r2)
   26068:	8809883a 	mov	r4,r17
   2606c:	0025d480 	call	25d48 <_malloc_trim_r>
   26070:	003fba06 	br	25f5c <_gp+0xfffe4410>
   26074:	28c9883a 	add	r4,r5,r3
   26078:	21000117 	ldw	r4,4(r4)
   2607c:	2100004c 	andi	r4,r4,1
   26080:	2000391e 	bne	r4,zero,26168 <_free_r+0x2fc>
   26084:	29c00217 	ldw	r7,8(r5)
   26088:	29000317 	ldw	r4,12(r5)
   2608c:	1885883a 	add	r2,r3,r2
   26090:	10c00054 	ori	r3,r2,1
   26094:	39000315 	stw	r4,12(r7)
   26098:	21c00215 	stw	r7,8(r4)
   2609c:	30c00115 	stw	r3,4(r6)
   260a0:	308d883a 	add	r6,r6,r2
   260a4:	30800015 	stw	r2,0(r6)
   260a8:	003fac06 	br	25f5c <_gp+0xfffe4410>
   260ac:	00c00504 	movi	r3,20
   260b0:	19401536 	bltu	r3,r5,26108 <_free_r+0x29c>
   260b4:	28c01704 	addi	r3,r5,92
   260b8:	18c7883a 	add	r3,r3,r3
   260bc:	294016c4 	addi	r5,r5,91
   260c0:	003fb406 	br	25f94 <_gp+0xfffe4448>
   260c4:	280bd0ba 	srai	r5,r5,2
   260c8:	00c00044 	movi	r3,1
   260cc:	38800117 	ldw	r2,4(r7)
   260d0:	194a983a 	sll	r5,r3,r5
   260d4:	2007883a 	mov	r3,r4
   260d8:	2884b03a 	or	r2,r5,r2
   260dc:	38800115 	stw	r2,4(r7)
   260e0:	003fbb06 	br	25fd0 <_gp+0xfffe4484>
   260e4:	21800515 	stw	r6,20(r4)
   260e8:	21800415 	stw	r6,16(r4)
   260ec:	10c00054 	ori	r3,r2,1
   260f0:	31c00315 	stw	r7,12(r6)
   260f4:	31c00215 	stw	r7,8(r6)
   260f8:	30c00115 	stw	r3,4(r6)
   260fc:	308d883a 	add	r6,r6,r2
   26100:	30800015 	stw	r2,0(r6)
   26104:	003f9506 	br	25f5c <_gp+0xfffe4410>
   26108:	00c01504 	movi	r3,84
   2610c:	19400536 	bltu	r3,r5,26124 <_free_r+0x2b8>
   26110:	100ad33a 	srli	r5,r2,12
   26114:	28c01bc4 	addi	r3,r5,111
   26118:	18c7883a 	add	r3,r3,r3
   2611c:	29401b84 	addi	r5,r5,110
   26120:	003f9c06 	br	25f94 <_gp+0xfffe4448>
   26124:	00c05504 	movi	r3,340
   26128:	19400536 	bltu	r3,r5,26140 <_free_r+0x2d4>
   2612c:	100ad3fa 	srli	r5,r2,15
   26130:	28c01e04 	addi	r3,r5,120
   26134:	18c7883a 	add	r3,r3,r3
   26138:	29401dc4 	addi	r5,r5,119
   2613c:	003f9506 	br	25f94 <_gp+0xfffe4448>
   26140:	00c15504 	movi	r3,1364
   26144:	19400536 	bltu	r3,r5,2615c <_free_r+0x2f0>
   26148:	100ad4ba 	srli	r5,r2,18
   2614c:	28c01f44 	addi	r3,r5,125
   26150:	18c7883a 	add	r3,r3,r3
   26154:	29401f04 	addi	r5,r5,124
   26158:	003f8e06 	br	25f94 <_gp+0xfffe4448>
   2615c:	00c03f84 	movi	r3,254
   26160:	01401f84 	movi	r5,126
   26164:	003f8b06 	br	25f94 <_gp+0xfffe4448>
   26168:	10c00054 	ori	r3,r2,1
   2616c:	30c00115 	stw	r3,4(r6)
   26170:	308d883a 	add	r6,r6,r2
   26174:	30800015 	stw	r2,0(r6)
   26178:	003f7806 	br	25f5c <_gp+0xfffe4410>

0002617c <__sfvwrite_r>:
   2617c:	30800217 	ldw	r2,8(r6)
   26180:	10006726 	beq	r2,zero,26320 <__sfvwrite_r+0x1a4>
   26184:	28c0030b 	ldhu	r3,12(r5)
   26188:	defff404 	addi	sp,sp,-48
   2618c:	dd400715 	stw	r21,28(sp)
   26190:	dd000615 	stw	r20,24(sp)
   26194:	dc000215 	stw	r16,8(sp)
   26198:	dfc00b15 	stw	ra,44(sp)
   2619c:	df000a15 	stw	fp,40(sp)
   261a0:	ddc00915 	stw	r23,36(sp)
   261a4:	dd800815 	stw	r22,32(sp)
   261a8:	dcc00515 	stw	r19,20(sp)
   261ac:	dc800415 	stw	r18,16(sp)
   261b0:	dc400315 	stw	r17,12(sp)
   261b4:	1880020c 	andi	r2,r3,8
   261b8:	2821883a 	mov	r16,r5
   261bc:	202b883a 	mov	r21,r4
   261c0:	3029883a 	mov	r20,r6
   261c4:	10002726 	beq	r2,zero,26264 <__sfvwrite_r+0xe8>
   261c8:	28800417 	ldw	r2,16(r5)
   261cc:	10002526 	beq	r2,zero,26264 <__sfvwrite_r+0xe8>
   261d0:	1880008c 	andi	r2,r3,2
   261d4:	a4400017 	ldw	r17,0(r20)
   261d8:	10002a26 	beq	r2,zero,26284 <__sfvwrite_r+0x108>
   261dc:	05a00034 	movhi	r22,32768
   261e0:	0027883a 	mov	r19,zero
   261e4:	0025883a 	mov	r18,zero
   261e8:	b5bf0004 	addi	r22,r22,-1024
   261ec:	980d883a 	mov	r6,r19
   261f0:	a809883a 	mov	r4,r21
   261f4:	90004626 	beq	r18,zero,26310 <__sfvwrite_r+0x194>
   261f8:	900f883a 	mov	r7,r18
   261fc:	b480022e 	bgeu	r22,r18,26208 <__sfvwrite_r+0x8c>
   26200:	01e00034 	movhi	r7,32768
   26204:	39ff0004 	addi	r7,r7,-1024
   26208:	80800917 	ldw	r2,36(r16)
   2620c:	81400717 	ldw	r5,28(r16)
   26210:	103ee83a 	callr	r2
   26214:	0080570e 	bge	zero,r2,26374 <__sfvwrite_r+0x1f8>
   26218:	a0c00217 	ldw	r3,8(r20)
   2621c:	98a7883a 	add	r19,r19,r2
   26220:	90a5c83a 	sub	r18,r18,r2
   26224:	1885c83a 	sub	r2,r3,r2
   26228:	a0800215 	stw	r2,8(r20)
   2622c:	103fef1e 	bne	r2,zero,261ec <_gp+0xfffe46a0>
   26230:	0005883a 	mov	r2,zero
   26234:	dfc00b17 	ldw	ra,44(sp)
   26238:	df000a17 	ldw	fp,40(sp)
   2623c:	ddc00917 	ldw	r23,36(sp)
   26240:	dd800817 	ldw	r22,32(sp)
   26244:	dd400717 	ldw	r21,28(sp)
   26248:	dd000617 	ldw	r20,24(sp)
   2624c:	dcc00517 	ldw	r19,20(sp)
   26250:	dc800417 	ldw	r18,16(sp)
   26254:	dc400317 	ldw	r17,12(sp)
   26258:	dc000217 	ldw	r16,8(sp)
   2625c:	dec00c04 	addi	sp,sp,48
   26260:	f800283a 	ret
   26264:	800b883a 	mov	r5,r16
   26268:	a809883a 	mov	r4,r21
   2626c:	0023d240 	call	23d24 <__swsetup_r>
   26270:	1000eb1e 	bne	r2,zero,26620 <__sfvwrite_r+0x4a4>
   26274:	80c0030b 	ldhu	r3,12(r16)
   26278:	a4400017 	ldw	r17,0(r20)
   2627c:	1880008c 	andi	r2,r3,2
   26280:	103fd61e 	bne	r2,zero,261dc <_gp+0xfffe4690>
   26284:	1880004c 	andi	r2,r3,1
   26288:	10003f1e 	bne	r2,zero,26388 <__sfvwrite_r+0x20c>
   2628c:	0039883a 	mov	fp,zero
   26290:	0025883a 	mov	r18,zero
   26294:	90001a26 	beq	r18,zero,26300 <__sfvwrite_r+0x184>
   26298:	1880800c 	andi	r2,r3,512
   2629c:	84c00217 	ldw	r19,8(r16)
   262a0:	10002126 	beq	r2,zero,26328 <__sfvwrite_r+0x1ac>
   262a4:	982f883a 	mov	r23,r19
   262a8:	94c09336 	bltu	r18,r19,264f8 <__sfvwrite_r+0x37c>
   262ac:	1881200c 	andi	r2,r3,1152
   262b0:	10009e1e 	bne	r2,zero,2652c <__sfvwrite_r+0x3b0>
   262b4:	81000017 	ldw	r4,0(r16)
   262b8:	b80d883a 	mov	r6,r23
   262bc:	e00b883a 	mov	r5,fp
   262c0:	0026c840 	call	26c84 <memmove>
   262c4:	80c00217 	ldw	r3,8(r16)
   262c8:	81000017 	ldw	r4,0(r16)
   262cc:	9005883a 	mov	r2,r18
   262d0:	1ce7c83a 	sub	r19,r3,r19
   262d4:	25cf883a 	add	r7,r4,r23
   262d8:	84c00215 	stw	r19,8(r16)
   262dc:	81c00015 	stw	r7,0(r16)
   262e0:	a0c00217 	ldw	r3,8(r20)
   262e4:	e0b9883a 	add	fp,fp,r2
   262e8:	90a5c83a 	sub	r18,r18,r2
   262ec:	18a7c83a 	sub	r19,r3,r2
   262f0:	a4c00215 	stw	r19,8(r20)
   262f4:	983fce26 	beq	r19,zero,26230 <_gp+0xfffe46e4>
   262f8:	80c0030b 	ldhu	r3,12(r16)
   262fc:	903fe61e 	bne	r18,zero,26298 <_gp+0xfffe474c>
   26300:	8f000017 	ldw	fp,0(r17)
   26304:	8c800117 	ldw	r18,4(r17)
   26308:	8c400204 	addi	r17,r17,8
   2630c:	003fe106 	br	26294 <_gp+0xfffe4748>
   26310:	8cc00017 	ldw	r19,0(r17)
   26314:	8c800117 	ldw	r18,4(r17)
   26318:	8c400204 	addi	r17,r17,8
   2631c:	003fb306 	br	261ec <_gp+0xfffe46a0>
   26320:	0005883a 	mov	r2,zero
   26324:	f800283a 	ret
   26328:	81000017 	ldw	r4,0(r16)
   2632c:	80800417 	ldw	r2,16(r16)
   26330:	11005736 	bltu	r2,r4,26490 <__sfvwrite_r+0x314>
   26334:	85c00517 	ldw	r23,20(r16)
   26338:	95c05536 	bltu	r18,r23,26490 <__sfvwrite_r+0x314>
   2633c:	00a00034 	movhi	r2,32768
   26340:	10bfffc4 	addi	r2,r2,-1
   26344:	9009883a 	mov	r4,r18
   26348:	1480012e 	bgeu	r2,r18,26350 <__sfvwrite_r+0x1d4>
   2634c:	1009883a 	mov	r4,r2
   26350:	b80b883a 	mov	r5,r23
   26354:	002abfc0 	call	2abfc <__divsi3>
   26358:	15cf383a 	mul	r7,r2,r23
   2635c:	81400717 	ldw	r5,28(r16)
   26360:	80800917 	ldw	r2,36(r16)
   26364:	e00d883a 	mov	r6,fp
   26368:	a809883a 	mov	r4,r21
   2636c:	103ee83a 	callr	r2
   26370:	00bfdb16 	blt	zero,r2,262e0 <_gp+0xfffe4794>
   26374:	8080030b 	ldhu	r2,12(r16)
   26378:	10801014 	ori	r2,r2,64
   2637c:	8080030d 	sth	r2,12(r16)
   26380:	00bfffc4 	movi	r2,-1
   26384:	003fab06 	br	26234 <_gp+0xfffe46e8>
   26388:	0027883a 	mov	r19,zero
   2638c:	0011883a 	mov	r8,zero
   26390:	0039883a 	mov	fp,zero
   26394:	0025883a 	mov	r18,zero
   26398:	90001f26 	beq	r18,zero,26418 <__sfvwrite_r+0x29c>
   2639c:	40005a26 	beq	r8,zero,26508 <__sfvwrite_r+0x38c>
   263a0:	982d883a 	mov	r22,r19
   263a4:	94c0012e 	bgeu	r18,r19,263ac <__sfvwrite_r+0x230>
   263a8:	902d883a 	mov	r22,r18
   263ac:	81000017 	ldw	r4,0(r16)
   263b0:	80800417 	ldw	r2,16(r16)
   263b4:	b02f883a 	mov	r23,r22
   263b8:	81c00517 	ldw	r7,20(r16)
   263bc:	1100032e 	bgeu	r2,r4,263cc <__sfvwrite_r+0x250>
   263c0:	80c00217 	ldw	r3,8(r16)
   263c4:	38c7883a 	add	r3,r7,r3
   263c8:	1d801816 	blt	r3,r22,2642c <__sfvwrite_r+0x2b0>
   263cc:	b1c03e16 	blt	r22,r7,264c8 <__sfvwrite_r+0x34c>
   263d0:	80800917 	ldw	r2,36(r16)
   263d4:	81400717 	ldw	r5,28(r16)
   263d8:	e00d883a 	mov	r6,fp
   263dc:	da000115 	stw	r8,4(sp)
   263e0:	a809883a 	mov	r4,r21
   263e4:	103ee83a 	callr	r2
   263e8:	102f883a 	mov	r23,r2
   263ec:	da000117 	ldw	r8,4(sp)
   263f0:	00bfe00e 	bge	zero,r2,26374 <_gp+0xfffe4828>
   263f4:	9de7c83a 	sub	r19,r19,r23
   263f8:	98001f26 	beq	r19,zero,26478 <__sfvwrite_r+0x2fc>
   263fc:	a0800217 	ldw	r2,8(r20)
   26400:	e5f9883a 	add	fp,fp,r23
   26404:	95e5c83a 	sub	r18,r18,r23
   26408:	15efc83a 	sub	r23,r2,r23
   2640c:	a5c00215 	stw	r23,8(r20)
   26410:	b83f8726 	beq	r23,zero,26230 <_gp+0xfffe46e4>
   26414:	903fe11e 	bne	r18,zero,2639c <_gp+0xfffe4850>
   26418:	8f000017 	ldw	fp,0(r17)
   2641c:	8c800117 	ldw	r18,4(r17)
   26420:	0011883a 	mov	r8,zero
   26424:	8c400204 	addi	r17,r17,8
   26428:	003fdb06 	br	26398 <_gp+0xfffe484c>
   2642c:	180d883a 	mov	r6,r3
   26430:	e00b883a 	mov	r5,fp
   26434:	da000115 	stw	r8,4(sp)
   26438:	d8c00015 	stw	r3,0(sp)
   2643c:	0026c840 	call	26c84 <memmove>
   26440:	d8c00017 	ldw	r3,0(sp)
   26444:	80800017 	ldw	r2,0(r16)
   26448:	800b883a 	mov	r5,r16
   2644c:	a809883a 	mov	r4,r21
   26450:	10c5883a 	add	r2,r2,r3
   26454:	80800015 	stw	r2,0(r16)
   26458:	d8c00015 	stw	r3,0(sp)
   2645c:	002591c0 	call	2591c <_fflush_r>
   26460:	d8c00017 	ldw	r3,0(sp)
   26464:	da000117 	ldw	r8,4(sp)
   26468:	103fc21e 	bne	r2,zero,26374 <_gp+0xfffe4828>
   2646c:	182f883a 	mov	r23,r3
   26470:	9de7c83a 	sub	r19,r19,r23
   26474:	983fe11e 	bne	r19,zero,263fc <_gp+0xfffe48b0>
   26478:	800b883a 	mov	r5,r16
   2647c:	a809883a 	mov	r4,r21
   26480:	002591c0 	call	2591c <_fflush_r>
   26484:	103fbb1e 	bne	r2,zero,26374 <_gp+0xfffe4828>
   26488:	0011883a 	mov	r8,zero
   2648c:	003fdb06 	br	263fc <_gp+0xfffe48b0>
   26490:	94c0012e 	bgeu	r18,r19,26498 <__sfvwrite_r+0x31c>
   26494:	9027883a 	mov	r19,r18
   26498:	980d883a 	mov	r6,r19
   2649c:	e00b883a 	mov	r5,fp
   264a0:	0026c840 	call	26c84 <memmove>
   264a4:	80800217 	ldw	r2,8(r16)
   264a8:	80c00017 	ldw	r3,0(r16)
   264ac:	14c5c83a 	sub	r2,r2,r19
   264b0:	1cc7883a 	add	r3,r3,r19
   264b4:	80800215 	stw	r2,8(r16)
   264b8:	80c00015 	stw	r3,0(r16)
   264bc:	10004326 	beq	r2,zero,265cc <__sfvwrite_r+0x450>
   264c0:	9805883a 	mov	r2,r19
   264c4:	003f8606 	br	262e0 <_gp+0xfffe4794>
   264c8:	b00d883a 	mov	r6,r22
   264cc:	e00b883a 	mov	r5,fp
   264d0:	da000115 	stw	r8,4(sp)
   264d4:	0026c840 	call	26c84 <memmove>
   264d8:	80800217 	ldw	r2,8(r16)
   264dc:	80c00017 	ldw	r3,0(r16)
   264e0:	da000117 	ldw	r8,4(sp)
   264e4:	1585c83a 	sub	r2,r2,r22
   264e8:	1dad883a 	add	r22,r3,r22
   264ec:	80800215 	stw	r2,8(r16)
   264f0:	85800015 	stw	r22,0(r16)
   264f4:	003fbf06 	br	263f4 <_gp+0xfffe48a8>
   264f8:	81000017 	ldw	r4,0(r16)
   264fc:	9027883a 	mov	r19,r18
   26500:	902f883a 	mov	r23,r18
   26504:	003f6c06 	br	262b8 <_gp+0xfffe476c>
   26508:	900d883a 	mov	r6,r18
   2650c:	01400284 	movi	r5,10
   26510:	e009883a 	mov	r4,fp
   26514:	0026a580 	call	26a58 <memchr>
   26518:	10003e26 	beq	r2,zero,26614 <__sfvwrite_r+0x498>
   2651c:	10800044 	addi	r2,r2,1
   26520:	1727c83a 	sub	r19,r2,fp
   26524:	02000044 	movi	r8,1
   26528:	003f9d06 	br	263a0 <_gp+0xfffe4854>
   2652c:	80800517 	ldw	r2,20(r16)
   26530:	81400417 	ldw	r5,16(r16)
   26534:	81c00017 	ldw	r7,0(r16)
   26538:	10a7883a 	add	r19,r2,r2
   2653c:	9885883a 	add	r2,r19,r2
   26540:	1026d7fa 	srli	r19,r2,31
   26544:	396dc83a 	sub	r22,r7,r5
   26548:	b1000044 	addi	r4,r22,1
   2654c:	9885883a 	add	r2,r19,r2
   26550:	1027d07a 	srai	r19,r2,1
   26554:	2485883a 	add	r2,r4,r18
   26558:	980d883a 	mov	r6,r19
   2655c:	9880022e 	bgeu	r19,r2,26568 <__sfvwrite_r+0x3ec>
   26560:	1027883a 	mov	r19,r2
   26564:	100d883a 	mov	r6,r2
   26568:	18c1000c 	andi	r3,r3,1024
   2656c:	18001c26 	beq	r3,zero,265e0 <__sfvwrite_r+0x464>
   26570:	300b883a 	mov	r5,r6
   26574:	a809883a 	mov	r4,r21
   26578:	00209580 	call	20958 <_malloc_r>
   2657c:	102f883a 	mov	r23,r2
   26580:	10002926 	beq	r2,zero,26628 <__sfvwrite_r+0x4ac>
   26584:	81400417 	ldw	r5,16(r16)
   26588:	b00d883a 	mov	r6,r22
   2658c:	1009883a 	mov	r4,r2
   26590:	0026b3c0 	call	26b3c <memcpy>
   26594:	8080030b 	ldhu	r2,12(r16)
   26598:	00fedfc4 	movi	r3,-1153
   2659c:	10c4703a 	and	r2,r2,r3
   265a0:	10802014 	ori	r2,r2,128
   265a4:	8080030d 	sth	r2,12(r16)
   265a8:	bd89883a 	add	r4,r23,r22
   265ac:	9d8fc83a 	sub	r7,r19,r22
   265b0:	85c00415 	stw	r23,16(r16)
   265b4:	84c00515 	stw	r19,20(r16)
   265b8:	81000015 	stw	r4,0(r16)
   265bc:	9027883a 	mov	r19,r18
   265c0:	81c00215 	stw	r7,8(r16)
   265c4:	902f883a 	mov	r23,r18
   265c8:	003f3b06 	br	262b8 <_gp+0xfffe476c>
   265cc:	800b883a 	mov	r5,r16
   265d0:	a809883a 	mov	r4,r21
   265d4:	002591c0 	call	2591c <_fflush_r>
   265d8:	103fb926 	beq	r2,zero,264c0 <_gp+0xfffe4974>
   265dc:	003f6506 	br	26374 <_gp+0xfffe4828>
   265e0:	a809883a 	mov	r4,r21
   265e4:	00214040 	call	21404 <_realloc_r>
   265e8:	102f883a 	mov	r23,r2
   265ec:	103fee1e 	bne	r2,zero,265a8 <_gp+0xfffe4a5c>
   265f0:	81400417 	ldw	r5,16(r16)
   265f4:	a809883a 	mov	r4,r21
   265f8:	0025e6c0 	call	25e6c <_free_r>
   265fc:	8080030b 	ldhu	r2,12(r16)
   26600:	00ffdfc4 	movi	r3,-129
   26604:	1884703a 	and	r2,r3,r2
   26608:	00c00304 	movi	r3,12
   2660c:	a8c00015 	stw	r3,0(r21)
   26610:	003f5906 	br	26378 <_gp+0xfffe482c>
   26614:	94c00044 	addi	r19,r18,1
   26618:	02000044 	movi	r8,1
   2661c:	003f6006 	br	263a0 <_gp+0xfffe4854>
   26620:	00bfffc4 	movi	r2,-1
   26624:	003f0306 	br	26234 <_gp+0xfffe46e8>
   26628:	00800304 	movi	r2,12
   2662c:	a8800015 	stw	r2,0(r21)
   26630:	8080030b 	ldhu	r2,12(r16)
   26634:	003f5006 	br	26378 <_gp+0xfffe482c>

00026638 <_fwalk>:
   26638:	defff704 	addi	sp,sp,-36
   2663c:	dd000415 	stw	r20,16(sp)
   26640:	dfc00815 	stw	ra,32(sp)
   26644:	ddc00715 	stw	r23,28(sp)
   26648:	dd800615 	stw	r22,24(sp)
   2664c:	dd400515 	stw	r21,20(sp)
   26650:	dcc00315 	stw	r19,12(sp)
   26654:	dc800215 	stw	r18,8(sp)
   26658:	dc400115 	stw	r17,4(sp)
   2665c:	dc000015 	stw	r16,0(sp)
   26660:	2500b804 	addi	r20,r4,736
   26664:	a0002326 	beq	r20,zero,266f4 <_fwalk+0xbc>
   26668:	282b883a 	mov	r21,r5
   2666c:	002f883a 	mov	r23,zero
   26670:	05800044 	movi	r22,1
   26674:	04ffffc4 	movi	r19,-1
   26678:	a4400117 	ldw	r17,4(r20)
   2667c:	a4800217 	ldw	r18,8(r20)
   26680:	8c7fffc4 	addi	r17,r17,-1
   26684:	88000d16 	blt	r17,zero,266bc <_fwalk+0x84>
   26688:	94000304 	addi	r16,r18,12
   2668c:	94800384 	addi	r18,r18,14
   26690:	8080000b 	ldhu	r2,0(r16)
   26694:	8c7fffc4 	addi	r17,r17,-1
   26698:	813ffd04 	addi	r4,r16,-12
   2669c:	b080042e 	bgeu	r22,r2,266b0 <_fwalk+0x78>
   266a0:	9080000f 	ldh	r2,0(r18)
   266a4:	14c00226 	beq	r2,r19,266b0 <_fwalk+0x78>
   266a8:	a83ee83a 	callr	r21
   266ac:	b8aeb03a 	or	r23,r23,r2
   266b0:	84001a04 	addi	r16,r16,104
   266b4:	94801a04 	addi	r18,r18,104
   266b8:	8cfff51e 	bne	r17,r19,26690 <_gp+0xfffe4b44>
   266bc:	a5000017 	ldw	r20,0(r20)
   266c0:	a03fed1e 	bne	r20,zero,26678 <_gp+0xfffe4b2c>
   266c4:	b805883a 	mov	r2,r23
   266c8:	dfc00817 	ldw	ra,32(sp)
   266cc:	ddc00717 	ldw	r23,28(sp)
   266d0:	dd800617 	ldw	r22,24(sp)
   266d4:	dd400517 	ldw	r21,20(sp)
   266d8:	dd000417 	ldw	r20,16(sp)
   266dc:	dcc00317 	ldw	r19,12(sp)
   266e0:	dc800217 	ldw	r18,8(sp)
   266e4:	dc400117 	ldw	r17,4(sp)
   266e8:	dc000017 	ldw	r16,0(sp)
   266ec:	dec00904 	addi	sp,sp,36
   266f0:	f800283a 	ret
   266f4:	002f883a 	mov	r23,zero
   266f8:	003ff206 	br	266c4 <_gp+0xfffe4b78>

000266fc <_fwalk_reent>:
   266fc:	defff704 	addi	sp,sp,-36
   26700:	dd000415 	stw	r20,16(sp)
   26704:	dfc00815 	stw	ra,32(sp)
   26708:	ddc00715 	stw	r23,28(sp)
   2670c:	dd800615 	stw	r22,24(sp)
   26710:	dd400515 	stw	r21,20(sp)
   26714:	dcc00315 	stw	r19,12(sp)
   26718:	dc800215 	stw	r18,8(sp)
   2671c:	dc400115 	stw	r17,4(sp)
   26720:	dc000015 	stw	r16,0(sp)
   26724:	2500b804 	addi	r20,r4,736
   26728:	a0002326 	beq	r20,zero,267b8 <_fwalk_reent+0xbc>
   2672c:	282b883a 	mov	r21,r5
   26730:	2027883a 	mov	r19,r4
   26734:	002f883a 	mov	r23,zero
   26738:	05800044 	movi	r22,1
   2673c:	04bfffc4 	movi	r18,-1
   26740:	a4400117 	ldw	r17,4(r20)
   26744:	a4000217 	ldw	r16,8(r20)
   26748:	8c7fffc4 	addi	r17,r17,-1
   2674c:	88000c16 	blt	r17,zero,26780 <_fwalk_reent+0x84>
   26750:	84000304 	addi	r16,r16,12
   26754:	8080000b 	ldhu	r2,0(r16)
   26758:	8c7fffc4 	addi	r17,r17,-1
   2675c:	817ffd04 	addi	r5,r16,-12
   26760:	b080052e 	bgeu	r22,r2,26778 <_fwalk_reent+0x7c>
   26764:	8080008f 	ldh	r2,2(r16)
   26768:	9809883a 	mov	r4,r19
   2676c:	14800226 	beq	r2,r18,26778 <_fwalk_reent+0x7c>
   26770:	a83ee83a 	callr	r21
   26774:	b8aeb03a 	or	r23,r23,r2
   26778:	84001a04 	addi	r16,r16,104
   2677c:	8cbff51e 	bne	r17,r18,26754 <_gp+0xfffe4c08>
   26780:	a5000017 	ldw	r20,0(r20)
   26784:	a03fee1e 	bne	r20,zero,26740 <_gp+0xfffe4bf4>
   26788:	b805883a 	mov	r2,r23
   2678c:	dfc00817 	ldw	ra,32(sp)
   26790:	ddc00717 	ldw	r23,28(sp)
   26794:	dd800617 	ldw	r22,24(sp)
   26798:	dd400517 	ldw	r21,20(sp)
   2679c:	dd000417 	ldw	r20,16(sp)
   267a0:	dcc00317 	ldw	r19,12(sp)
   267a4:	dc800217 	ldw	r18,8(sp)
   267a8:	dc400117 	ldw	r17,4(sp)
   267ac:	dc000017 	ldw	r16,0(sp)
   267b0:	dec00904 	addi	sp,sp,36
   267b4:	f800283a 	ret
   267b8:	002f883a 	mov	r23,zero
   267bc:	003ff206 	br	26788 <_gp+0xfffe4c3c>

000267c0 <_setlocale_r>:
   267c0:	30001b26 	beq	r6,zero,26830 <_setlocale_r+0x70>
   267c4:	014000f4 	movhi	r5,3
   267c8:	defffe04 	addi	sp,sp,-8
   267cc:	295f3b04 	addi	r5,r5,31980
   267d0:	3009883a 	mov	r4,r6
   267d4:	dc000015 	stw	r16,0(sp)
   267d8:	dfc00115 	stw	ra,4(sp)
   267dc:	3021883a 	mov	r16,r6
   267e0:	00280f40 	call	280f4 <strcmp>
   267e4:	1000061e 	bne	r2,zero,26800 <_setlocale_r+0x40>
   267e8:	008000f4 	movhi	r2,3
   267ec:	109f3a04 	addi	r2,r2,31976
   267f0:	dfc00117 	ldw	ra,4(sp)
   267f4:	dc000017 	ldw	r16,0(sp)
   267f8:	dec00204 	addi	sp,sp,8
   267fc:	f800283a 	ret
   26800:	014000f4 	movhi	r5,3
   26804:	295f3a04 	addi	r5,r5,31976
   26808:	8009883a 	mov	r4,r16
   2680c:	00280f40 	call	280f4 <strcmp>
   26810:	103ff526 	beq	r2,zero,267e8 <_gp+0xfffe4c9c>
   26814:	014000f4 	movhi	r5,3
   26818:	295f2504 	addi	r5,r5,31892
   2681c:	8009883a 	mov	r4,r16
   26820:	00280f40 	call	280f4 <strcmp>
   26824:	103ff026 	beq	r2,zero,267e8 <_gp+0xfffe4c9c>
   26828:	0005883a 	mov	r2,zero
   2682c:	003ff006 	br	267f0 <_gp+0xfffe4ca4>
   26830:	008000f4 	movhi	r2,3
   26834:	109f3a04 	addi	r2,r2,31976
   26838:	f800283a 	ret

0002683c <__locale_charset>:
   2683c:	00800134 	movhi	r2,4
   26840:	10a23804 	addi	r2,r2,-30496
   26844:	f800283a 	ret

00026848 <__locale_mb_cur_max>:
   26848:	00800134 	movhi	r2,4
   2684c:	10a6d704 	addi	r2,r2,-25764
   26850:	10800017 	ldw	r2,0(r2)
   26854:	f800283a 	ret

00026858 <__locale_msgcharset>:
   26858:	00800134 	movhi	r2,4
   2685c:	10a23004 	addi	r2,r2,-30528
   26860:	f800283a 	ret

00026864 <__locale_cjk_lang>:
   26864:	0005883a 	mov	r2,zero
   26868:	f800283a 	ret

0002686c <_localeconv_r>:
   2686c:	00800134 	movhi	r2,4
   26870:	10a24004 	addi	r2,r2,-30464
   26874:	f800283a 	ret

00026878 <setlocale>:
   26878:	00800134 	movhi	r2,4
   2687c:	10a6d604 	addi	r2,r2,-25768
   26880:	280d883a 	mov	r6,r5
   26884:	200b883a 	mov	r5,r4
   26888:	11000017 	ldw	r4,0(r2)
   2688c:	00267c01 	jmpi	267c0 <_setlocale_r>

00026890 <localeconv>:
   26890:	00800134 	movhi	r2,4
   26894:	10a24004 	addi	r2,r2,-30464
   26898:	f800283a 	ret

0002689c <__smakebuf_r>:
   2689c:	2880030b 	ldhu	r2,12(r5)
   268a0:	10c0008c 	andi	r3,r2,2
   268a4:	1800411e 	bne	r3,zero,269ac <__smakebuf_r+0x110>
   268a8:	deffec04 	addi	sp,sp,-80
   268ac:	dc000f15 	stw	r16,60(sp)
   268b0:	2821883a 	mov	r16,r5
   268b4:	2940038f 	ldh	r5,14(r5)
   268b8:	dc401015 	stw	r17,64(sp)
   268bc:	dfc01315 	stw	ra,76(sp)
   268c0:	dcc01215 	stw	r19,72(sp)
   268c4:	dc801115 	stw	r18,68(sp)
   268c8:	2023883a 	mov	r17,r4
   268cc:	28001c16 	blt	r5,zero,26940 <__smakebuf_r+0xa4>
   268d0:	d80d883a 	mov	r6,sp
   268d4:	0029df40 	call	29df4 <_fstat_r>
   268d8:	10001816 	blt	r2,zero,2693c <__smakebuf_r+0xa0>
   268dc:	d8800117 	ldw	r2,4(sp)
   268e0:	00e00014 	movui	r3,32768
   268e4:	10bc000c 	andi	r2,r2,61440
   268e8:	14c80020 	cmpeqi	r19,r2,8192
   268ec:	10c03726 	beq	r2,r3,269cc <__smakebuf_r+0x130>
   268f0:	80c0030b 	ldhu	r3,12(r16)
   268f4:	18c20014 	ori	r3,r3,2048
   268f8:	80c0030d 	sth	r3,12(r16)
   268fc:	00c80004 	movi	r3,8192
   26900:	10c0521e 	bne	r2,r3,26a4c <__smakebuf_r+0x1b0>
   26904:	8140038f 	ldh	r5,14(r16)
   26908:	8809883a 	mov	r4,r17
   2690c:	0029e500 	call	29e50 <_isatty_r>
   26910:	10004c26 	beq	r2,zero,26a44 <__smakebuf_r+0x1a8>
   26914:	8080030b 	ldhu	r2,12(r16)
   26918:	80c010c4 	addi	r3,r16,67
   2691c:	80c00015 	stw	r3,0(r16)
   26920:	10800054 	ori	r2,r2,1
   26924:	8080030d 	sth	r2,12(r16)
   26928:	00800044 	movi	r2,1
   2692c:	80c00415 	stw	r3,16(r16)
   26930:	80800515 	stw	r2,20(r16)
   26934:	04810004 	movi	r18,1024
   26938:	00000706 	br	26958 <__smakebuf_r+0xbc>
   2693c:	8080030b 	ldhu	r2,12(r16)
   26940:	10c0200c 	andi	r3,r2,128
   26944:	18001f1e 	bne	r3,zero,269c4 <__smakebuf_r+0x128>
   26948:	04810004 	movi	r18,1024
   2694c:	10820014 	ori	r2,r2,2048
   26950:	8080030d 	sth	r2,12(r16)
   26954:	0027883a 	mov	r19,zero
   26958:	900b883a 	mov	r5,r18
   2695c:	8809883a 	mov	r4,r17
   26960:	00209580 	call	20958 <_malloc_r>
   26964:	10002c26 	beq	r2,zero,26a18 <__smakebuf_r+0x17c>
   26968:	80c0030b 	ldhu	r3,12(r16)
   2696c:	010000b4 	movhi	r4,2
   26970:	21166c04 	addi	r4,r4,22960
   26974:	89000f15 	stw	r4,60(r17)
   26978:	18c02014 	ori	r3,r3,128
   2697c:	80c0030d 	sth	r3,12(r16)
   26980:	80800015 	stw	r2,0(r16)
   26984:	80800415 	stw	r2,16(r16)
   26988:	84800515 	stw	r18,20(r16)
   2698c:	98001a1e 	bne	r19,zero,269f8 <__smakebuf_r+0x15c>
   26990:	dfc01317 	ldw	ra,76(sp)
   26994:	dcc01217 	ldw	r19,72(sp)
   26998:	dc801117 	ldw	r18,68(sp)
   2699c:	dc401017 	ldw	r17,64(sp)
   269a0:	dc000f17 	ldw	r16,60(sp)
   269a4:	dec01404 	addi	sp,sp,80
   269a8:	f800283a 	ret
   269ac:	288010c4 	addi	r2,r5,67
   269b0:	28800015 	stw	r2,0(r5)
   269b4:	28800415 	stw	r2,16(r5)
   269b8:	00800044 	movi	r2,1
   269bc:	28800515 	stw	r2,20(r5)
   269c0:	f800283a 	ret
   269c4:	04801004 	movi	r18,64
   269c8:	003fe006 	br	2694c <_gp+0xfffe4e00>
   269cc:	81000a17 	ldw	r4,40(r16)
   269d0:	00c000f4 	movhi	r3,3
   269d4:	18e02404 	addi	r3,r3,-32624
   269d8:	20ffc51e 	bne	r4,r3,268f0 <_gp+0xfffe4da4>
   269dc:	8080030b 	ldhu	r2,12(r16)
   269e0:	04810004 	movi	r18,1024
   269e4:	84801315 	stw	r18,76(r16)
   269e8:	1484b03a 	or	r2,r2,r18
   269ec:	8080030d 	sth	r2,12(r16)
   269f0:	0027883a 	mov	r19,zero
   269f4:	003fd806 	br	26958 <_gp+0xfffe4e0c>
   269f8:	8140038f 	ldh	r5,14(r16)
   269fc:	8809883a 	mov	r4,r17
   26a00:	0029e500 	call	29e50 <_isatty_r>
   26a04:	103fe226 	beq	r2,zero,26990 <_gp+0xfffe4e44>
   26a08:	8080030b 	ldhu	r2,12(r16)
   26a0c:	10800054 	ori	r2,r2,1
   26a10:	8080030d 	sth	r2,12(r16)
   26a14:	003fde06 	br	26990 <_gp+0xfffe4e44>
   26a18:	8080030b 	ldhu	r2,12(r16)
   26a1c:	10c0800c 	andi	r3,r2,512
   26a20:	183fdb1e 	bne	r3,zero,26990 <_gp+0xfffe4e44>
   26a24:	10800094 	ori	r2,r2,2
   26a28:	80c010c4 	addi	r3,r16,67
   26a2c:	8080030d 	sth	r2,12(r16)
   26a30:	00800044 	movi	r2,1
   26a34:	80c00015 	stw	r3,0(r16)
   26a38:	80c00415 	stw	r3,16(r16)
   26a3c:	80800515 	stw	r2,20(r16)
   26a40:	003fd306 	br	26990 <_gp+0xfffe4e44>
   26a44:	04810004 	movi	r18,1024
   26a48:	003fc306 	br	26958 <_gp+0xfffe4e0c>
   26a4c:	0027883a 	mov	r19,zero
   26a50:	04810004 	movi	r18,1024
   26a54:	003fc006 	br	26958 <_gp+0xfffe4e0c>

00026a58 <memchr>:
   26a58:	208000cc 	andi	r2,r4,3
   26a5c:	280f883a 	mov	r7,r5
   26a60:	10003426 	beq	r2,zero,26b34 <memchr+0xdc>
   26a64:	30bfffc4 	addi	r2,r6,-1
   26a68:	30001a26 	beq	r6,zero,26ad4 <memchr+0x7c>
   26a6c:	20c00003 	ldbu	r3,0(r4)
   26a70:	29803fcc 	andi	r6,r5,255
   26a74:	30c0051e 	bne	r6,r3,26a8c <memchr+0x34>
   26a78:	00001806 	br	26adc <memchr+0x84>
   26a7c:	10001526 	beq	r2,zero,26ad4 <memchr+0x7c>
   26a80:	20c00003 	ldbu	r3,0(r4)
   26a84:	10bfffc4 	addi	r2,r2,-1
   26a88:	30c01426 	beq	r6,r3,26adc <memchr+0x84>
   26a8c:	21000044 	addi	r4,r4,1
   26a90:	20c000cc 	andi	r3,r4,3
   26a94:	183ff91e 	bne	r3,zero,26a7c <_gp+0xfffe4f30>
   26a98:	020000c4 	movi	r8,3
   26a9c:	40801136 	bltu	r8,r2,26ae4 <memchr+0x8c>
   26aa0:	10000c26 	beq	r2,zero,26ad4 <memchr+0x7c>
   26aa4:	20c00003 	ldbu	r3,0(r4)
   26aa8:	29403fcc 	andi	r5,r5,255
   26aac:	28c00b26 	beq	r5,r3,26adc <memchr+0x84>
   26ab0:	20c00044 	addi	r3,r4,1
   26ab4:	39803fcc 	andi	r6,r7,255
   26ab8:	2089883a 	add	r4,r4,r2
   26abc:	00000306 	br	26acc <memchr+0x74>
   26ac0:	18c00044 	addi	r3,r3,1
   26ac4:	197fffc3 	ldbu	r5,-1(r3)
   26ac8:	31400526 	beq	r6,r5,26ae0 <memchr+0x88>
   26acc:	1805883a 	mov	r2,r3
   26ad0:	20fffb1e 	bne	r4,r3,26ac0 <_gp+0xfffe4f74>
   26ad4:	0005883a 	mov	r2,zero
   26ad8:	f800283a 	ret
   26adc:	2005883a 	mov	r2,r4
   26ae0:	f800283a 	ret
   26ae4:	28c03fcc 	andi	r3,r5,255
   26ae8:	1812923a 	slli	r9,r3,8
   26aec:	02ffbff4 	movhi	r11,65279
   26af0:	02a02074 	movhi	r10,32897
   26af4:	48d2b03a 	or	r9,r9,r3
   26af8:	4806943a 	slli	r3,r9,16
   26afc:	5affbfc4 	addi	r11,r11,-257
   26b00:	52a02004 	addi	r10,r10,-32640
   26b04:	48d2b03a 	or	r9,r9,r3
   26b08:	20c00017 	ldw	r3,0(r4)
   26b0c:	48c6f03a 	xor	r3,r9,r3
   26b10:	1acd883a 	add	r6,r3,r11
   26b14:	00c6303a 	nor	r3,zero,r3
   26b18:	30c6703a 	and	r3,r6,r3
   26b1c:	1a86703a 	and	r3,r3,r10
   26b20:	183fe01e 	bne	r3,zero,26aa4 <_gp+0xfffe4f58>
   26b24:	10bfff04 	addi	r2,r2,-4
   26b28:	21000104 	addi	r4,r4,4
   26b2c:	40bff636 	bltu	r8,r2,26b08 <_gp+0xfffe4fbc>
   26b30:	003fdb06 	br	26aa0 <_gp+0xfffe4f54>
   26b34:	3005883a 	mov	r2,r6
   26b38:	003fd706 	br	26a98 <_gp+0xfffe4f4c>

00026b3c <memcpy>:
   26b3c:	defffd04 	addi	sp,sp,-12
   26b40:	dfc00215 	stw	ra,8(sp)
   26b44:	dc400115 	stw	r17,4(sp)
   26b48:	dc000015 	stw	r16,0(sp)
   26b4c:	00c003c4 	movi	r3,15
   26b50:	2005883a 	mov	r2,r4
   26b54:	1980452e 	bgeu	r3,r6,26c6c <memcpy+0x130>
   26b58:	2906b03a 	or	r3,r5,r4
   26b5c:	18c000cc 	andi	r3,r3,3
   26b60:	1800441e 	bne	r3,zero,26c74 <memcpy+0x138>
   26b64:	347ffc04 	addi	r17,r6,-16
   26b68:	8822d13a 	srli	r17,r17,4
   26b6c:	28c00104 	addi	r3,r5,4
   26b70:	23400104 	addi	r13,r4,4
   26b74:	8820913a 	slli	r16,r17,4
   26b78:	2b000204 	addi	r12,r5,8
   26b7c:	22c00204 	addi	r11,r4,8
   26b80:	84000504 	addi	r16,r16,20
   26b84:	2a800304 	addi	r10,r5,12
   26b88:	22400304 	addi	r9,r4,12
   26b8c:	2c21883a 	add	r16,r5,r16
   26b90:	2811883a 	mov	r8,r5
   26b94:	200f883a 	mov	r7,r4
   26b98:	41000017 	ldw	r4,0(r8)
   26b9c:	1fc00017 	ldw	ra,0(r3)
   26ba0:	63c00017 	ldw	r15,0(r12)
   26ba4:	39000015 	stw	r4,0(r7)
   26ba8:	53800017 	ldw	r14,0(r10)
   26bac:	6fc00015 	stw	ra,0(r13)
   26bb0:	5bc00015 	stw	r15,0(r11)
   26bb4:	4b800015 	stw	r14,0(r9)
   26bb8:	18c00404 	addi	r3,r3,16
   26bbc:	39c00404 	addi	r7,r7,16
   26bc0:	42000404 	addi	r8,r8,16
   26bc4:	6b400404 	addi	r13,r13,16
   26bc8:	63000404 	addi	r12,r12,16
   26bcc:	5ac00404 	addi	r11,r11,16
   26bd0:	52800404 	addi	r10,r10,16
   26bd4:	4a400404 	addi	r9,r9,16
   26bd8:	1c3fef1e 	bne	r3,r16,26b98 <_gp+0xfffe504c>
   26bdc:	89c00044 	addi	r7,r17,1
   26be0:	380e913a 	slli	r7,r7,4
   26be4:	310003cc 	andi	r4,r6,15
   26be8:	02c000c4 	movi	r11,3
   26bec:	11c7883a 	add	r3,r2,r7
   26bf0:	29cb883a 	add	r5,r5,r7
   26bf4:	5900212e 	bgeu	r11,r4,26c7c <memcpy+0x140>
   26bf8:	1813883a 	mov	r9,r3
   26bfc:	2811883a 	mov	r8,r5
   26c00:	200f883a 	mov	r7,r4
   26c04:	42800017 	ldw	r10,0(r8)
   26c08:	4a400104 	addi	r9,r9,4
   26c0c:	39ffff04 	addi	r7,r7,-4
   26c10:	4abfff15 	stw	r10,-4(r9)
   26c14:	42000104 	addi	r8,r8,4
   26c18:	59fffa36 	bltu	r11,r7,26c04 <_gp+0xfffe50b8>
   26c1c:	213fff04 	addi	r4,r4,-4
   26c20:	2008d0ba 	srli	r4,r4,2
   26c24:	318000cc 	andi	r6,r6,3
   26c28:	21000044 	addi	r4,r4,1
   26c2c:	2109883a 	add	r4,r4,r4
   26c30:	2109883a 	add	r4,r4,r4
   26c34:	1907883a 	add	r3,r3,r4
   26c38:	290b883a 	add	r5,r5,r4
   26c3c:	30000626 	beq	r6,zero,26c58 <memcpy+0x11c>
   26c40:	198d883a 	add	r6,r3,r6
   26c44:	29c00003 	ldbu	r7,0(r5)
   26c48:	18c00044 	addi	r3,r3,1
   26c4c:	29400044 	addi	r5,r5,1
   26c50:	19ffffc5 	stb	r7,-1(r3)
   26c54:	19bffb1e 	bne	r3,r6,26c44 <_gp+0xfffe50f8>
   26c58:	dfc00217 	ldw	ra,8(sp)
   26c5c:	dc400117 	ldw	r17,4(sp)
   26c60:	dc000017 	ldw	r16,0(sp)
   26c64:	dec00304 	addi	sp,sp,12
   26c68:	f800283a 	ret
   26c6c:	2007883a 	mov	r3,r4
   26c70:	003ff206 	br	26c3c <_gp+0xfffe50f0>
   26c74:	2007883a 	mov	r3,r4
   26c78:	003ff106 	br	26c40 <_gp+0xfffe50f4>
   26c7c:	200d883a 	mov	r6,r4
   26c80:	003fee06 	br	26c3c <_gp+0xfffe50f0>

00026c84 <memmove>:
   26c84:	2005883a 	mov	r2,r4
   26c88:	29000b2e 	bgeu	r5,r4,26cb8 <memmove+0x34>
   26c8c:	298f883a 	add	r7,r5,r6
   26c90:	21c0092e 	bgeu	r4,r7,26cb8 <memmove+0x34>
   26c94:	2187883a 	add	r3,r4,r6
   26c98:	198bc83a 	sub	r5,r3,r6
   26c9c:	30004826 	beq	r6,zero,26dc0 <memmove+0x13c>
   26ca0:	39ffffc4 	addi	r7,r7,-1
   26ca4:	39000003 	ldbu	r4,0(r7)
   26ca8:	18ffffc4 	addi	r3,r3,-1
   26cac:	19000005 	stb	r4,0(r3)
   26cb0:	28fffb1e 	bne	r5,r3,26ca0 <_gp+0xfffe5154>
   26cb4:	f800283a 	ret
   26cb8:	00c003c4 	movi	r3,15
   26cbc:	1980412e 	bgeu	r3,r6,26dc4 <memmove+0x140>
   26cc0:	2886b03a 	or	r3,r5,r2
   26cc4:	18c000cc 	andi	r3,r3,3
   26cc8:	1800401e 	bne	r3,zero,26dcc <memmove+0x148>
   26ccc:	33fffc04 	addi	r15,r6,-16
   26cd0:	781ed13a 	srli	r15,r15,4
   26cd4:	28c00104 	addi	r3,r5,4
   26cd8:	13400104 	addi	r13,r2,4
   26cdc:	781c913a 	slli	r14,r15,4
   26ce0:	2b000204 	addi	r12,r5,8
   26ce4:	12c00204 	addi	r11,r2,8
   26ce8:	73800504 	addi	r14,r14,20
   26cec:	2a800304 	addi	r10,r5,12
   26cf0:	12400304 	addi	r9,r2,12
   26cf4:	2b9d883a 	add	r14,r5,r14
   26cf8:	2811883a 	mov	r8,r5
   26cfc:	100f883a 	mov	r7,r2
   26d00:	41000017 	ldw	r4,0(r8)
   26d04:	39c00404 	addi	r7,r7,16
   26d08:	18c00404 	addi	r3,r3,16
   26d0c:	393ffc15 	stw	r4,-16(r7)
   26d10:	193ffc17 	ldw	r4,-16(r3)
   26d14:	6b400404 	addi	r13,r13,16
   26d18:	5ac00404 	addi	r11,r11,16
   26d1c:	693ffc15 	stw	r4,-16(r13)
   26d20:	61000017 	ldw	r4,0(r12)
   26d24:	4a400404 	addi	r9,r9,16
   26d28:	42000404 	addi	r8,r8,16
   26d2c:	593ffc15 	stw	r4,-16(r11)
   26d30:	51000017 	ldw	r4,0(r10)
   26d34:	63000404 	addi	r12,r12,16
   26d38:	52800404 	addi	r10,r10,16
   26d3c:	493ffc15 	stw	r4,-16(r9)
   26d40:	1bbfef1e 	bne	r3,r14,26d00 <_gp+0xfffe51b4>
   26d44:	79000044 	addi	r4,r15,1
   26d48:	2008913a 	slli	r4,r4,4
   26d4c:	328003cc 	andi	r10,r6,15
   26d50:	02c000c4 	movi	r11,3
   26d54:	1107883a 	add	r3,r2,r4
   26d58:	290b883a 	add	r5,r5,r4
   26d5c:	5a801e2e 	bgeu	r11,r10,26dd8 <memmove+0x154>
   26d60:	1813883a 	mov	r9,r3
   26d64:	2811883a 	mov	r8,r5
   26d68:	500f883a 	mov	r7,r10
   26d6c:	41000017 	ldw	r4,0(r8)
   26d70:	4a400104 	addi	r9,r9,4
   26d74:	39ffff04 	addi	r7,r7,-4
   26d78:	493fff15 	stw	r4,-4(r9)
   26d7c:	42000104 	addi	r8,r8,4
   26d80:	59fffa36 	bltu	r11,r7,26d6c <_gp+0xfffe5220>
   26d84:	513fff04 	addi	r4,r10,-4
   26d88:	2008d0ba 	srli	r4,r4,2
   26d8c:	318000cc 	andi	r6,r6,3
   26d90:	21000044 	addi	r4,r4,1
   26d94:	2109883a 	add	r4,r4,r4
   26d98:	2109883a 	add	r4,r4,r4
   26d9c:	1907883a 	add	r3,r3,r4
   26da0:	290b883a 	add	r5,r5,r4
   26da4:	30000b26 	beq	r6,zero,26dd4 <memmove+0x150>
   26da8:	198d883a 	add	r6,r3,r6
   26dac:	29c00003 	ldbu	r7,0(r5)
   26db0:	18c00044 	addi	r3,r3,1
   26db4:	29400044 	addi	r5,r5,1
   26db8:	19ffffc5 	stb	r7,-1(r3)
   26dbc:	19bffb1e 	bne	r3,r6,26dac <_gp+0xfffe5260>
   26dc0:	f800283a 	ret
   26dc4:	1007883a 	mov	r3,r2
   26dc8:	003ff606 	br	26da4 <_gp+0xfffe5258>
   26dcc:	1007883a 	mov	r3,r2
   26dd0:	003ff506 	br	26da8 <_gp+0xfffe525c>
   26dd4:	f800283a 	ret
   26dd8:	500d883a 	mov	r6,r10
   26ddc:	003ff106 	br	26da4 <_gp+0xfffe5258>

00026de0 <_Balloc>:
   26de0:	20801317 	ldw	r2,76(r4)
   26de4:	defffc04 	addi	sp,sp,-16
   26de8:	dc400115 	stw	r17,4(sp)
   26dec:	dc000015 	stw	r16,0(sp)
   26df0:	dfc00315 	stw	ra,12(sp)
   26df4:	dc800215 	stw	r18,8(sp)
   26df8:	2023883a 	mov	r17,r4
   26dfc:	2821883a 	mov	r16,r5
   26e00:	10000f26 	beq	r2,zero,26e40 <_Balloc+0x60>
   26e04:	8407883a 	add	r3,r16,r16
   26e08:	18c7883a 	add	r3,r3,r3
   26e0c:	10c7883a 	add	r3,r2,r3
   26e10:	18800017 	ldw	r2,0(r3)
   26e14:	10001126 	beq	r2,zero,26e5c <_Balloc+0x7c>
   26e18:	11000017 	ldw	r4,0(r2)
   26e1c:	19000015 	stw	r4,0(r3)
   26e20:	10000415 	stw	zero,16(r2)
   26e24:	10000315 	stw	zero,12(r2)
   26e28:	dfc00317 	ldw	ra,12(sp)
   26e2c:	dc800217 	ldw	r18,8(sp)
   26e30:	dc400117 	ldw	r17,4(sp)
   26e34:	dc000017 	ldw	r16,0(sp)
   26e38:	dec00404 	addi	sp,sp,16
   26e3c:	f800283a 	ret
   26e40:	01800844 	movi	r6,33
   26e44:	01400104 	movi	r5,4
   26e48:	0029a240 	call	29a24 <_calloc_r>
   26e4c:	88801315 	stw	r2,76(r17)
   26e50:	103fec1e 	bne	r2,zero,26e04 <_gp+0xfffe52b8>
   26e54:	0005883a 	mov	r2,zero
   26e58:	003ff306 	br	26e28 <_gp+0xfffe52dc>
   26e5c:	01400044 	movi	r5,1
   26e60:	2c24983a 	sll	r18,r5,r16
   26e64:	8809883a 	mov	r4,r17
   26e68:	91800144 	addi	r6,r18,5
   26e6c:	318d883a 	add	r6,r6,r6
   26e70:	318d883a 	add	r6,r6,r6
   26e74:	0029a240 	call	29a24 <_calloc_r>
   26e78:	103ff626 	beq	r2,zero,26e54 <_gp+0xfffe5308>
   26e7c:	14000115 	stw	r16,4(r2)
   26e80:	14800215 	stw	r18,8(r2)
   26e84:	003fe606 	br	26e20 <_gp+0xfffe52d4>

00026e88 <_Bfree>:
   26e88:	28000826 	beq	r5,zero,26eac <_Bfree+0x24>
   26e8c:	28c00117 	ldw	r3,4(r5)
   26e90:	20801317 	ldw	r2,76(r4)
   26e94:	18c7883a 	add	r3,r3,r3
   26e98:	18c7883a 	add	r3,r3,r3
   26e9c:	10c5883a 	add	r2,r2,r3
   26ea0:	10c00017 	ldw	r3,0(r2)
   26ea4:	28c00015 	stw	r3,0(r5)
   26ea8:	11400015 	stw	r5,0(r2)
   26eac:	f800283a 	ret

00026eb0 <__multadd>:
   26eb0:	defffa04 	addi	sp,sp,-24
   26eb4:	dc800315 	stw	r18,12(sp)
   26eb8:	dc400215 	stw	r17,8(sp)
   26ebc:	dc000115 	stw	r16,4(sp)
   26ec0:	2823883a 	mov	r17,r5
   26ec4:	2c000417 	ldw	r16,16(r5)
   26ec8:	dfc00515 	stw	ra,20(sp)
   26ecc:	dcc00415 	stw	r19,16(sp)
   26ed0:	2025883a 	mov	r18,r4
   26ed4:	29400504 	addi	r5,r5,20
   26ed8:	0011883a 	mov	r8,zero
   26edc:	28c00017 	ldw	r3,0(r5)
   26ee0:	29400104 	addi	r5,r5,4
   26ee4:	42000044 	addi	r8,r8,1
   26ee8:	18bfffcc 	andi	r2,r3,65535
   26eec:	1185383a 	mul	r2,r2,r6
   26ef0:	1806d43a 	srli	r3,r3,16
   26ef4:	11cf883a 	add	r7,r2,r7
   26ef8:	3808d43a 	srli	r4,r7,16
   26efc:	1987383a 	mul	r3,r3,r6
   26f00:	38bfffcc 	andi	r2,r7,65535
   26f04:	1907883a 	add	r3,r3,r4
   26f08:	1808943a 	slli	r4,r3,16
   26f0c:	180ed43a 	srli	r7,r3,16
   26f10:	2085883a 	add	r2,r4,r2
   26f14:	28bfff15 	stw	r2,-4(r5)
   26f18:	443ff016 	blt	r8,r16,26edc <_gp+0xfffe5390>
   26f1c:	38000926 	beq	r7,zero,26f44 <__multadd+0x94>
   26f20:	88800217 	ldw	r2,8(r17)
   26f24:	80800f0e 	bge	r16,r2,26f64 <__multadd+0xb4>
   26f28:	80800144 	addi	r2,r16,5
   26f2c:	1085883a 	add	r2,r2,r2
   26f30:	1085883a 	add	r2,r2,r2
   26f34:	8885883a 	add	r2,r17,r2
   26f38:	11c00015 	stw	r7,0(r2)
   26f3c:	84000044 	addi	r16,r16,1
   26f40:	8c000415 	stw	r16,16(r17)
   26f44:	8805883a 	mov	r2,r17
   26f48:	dfc00517 	ldw	ra,20(sp)
   26f4c:	dcc00417 	ldw	r19,16(sp)
   26f50:	dc800317 	ldw	r18,12(sp)
   26f54:	dc400217 	ldw	r17,8(sp)
   26f58:	dc000117 	ldw	r16,4(sp)
   26f5c:	dec00604 	addi	sp,sp,24
   26f60:	f800283a 	ret
   26f64:	89400117 	ldw	r5,4(r17)
   26f68:	9009883a 	mov	r4,r18
   26f6c:	d9c00015 	stw	r7,0(sp)
   26f70:	29400044 	addi	r5,r5,1
   26f74:	0026de00 	call	26de0 <_Balloc>
   26f78:	89800417 	ldw	r6,16(r17)
   26f7c:	89400304 	addi	r5,r17,12
   26f80:	11000304 	addi	r4,r2,12
   26f84:	31800084 	addi	r6,r6,2
   26f88:	318d883a 	add	r6,r6,r6
   26f8c:	318d883a 	add	r6,r6,r6
   26f90:	1027883a 	mov	r19,r2
   26f94:	0026b3c0 	call	26b3c <memcpy>
   26f98:	d9c00017 	ldw	r7,0(sp)
   26f9c:	88000a26 	beq	r17,zero,26fc8 <__multadd+0x118>
   26fa0:	88c00117 	ldw	r3,4(r17)
   26fa4:	90801317 	ldw	r2,76(r18)
   26fa8:	18c7883a 	add	r3,r3,r3
   26fac:	18c7883a 	add	r3,r3,r3
   26fb0:	10c5883a 	add	r2,r2,r3
   26fb4:	10c00017 	ldw	r3,0(r2)
   26fb8:	88c00015 	stw	r3,0(r17)
   26fbc:	14400015 	stw	r17,0(r2)
   26fc0:	9823883a 	mov	r17,r19
   26fc4:	003fd806 	br	26f28 <_gp+0xfffe53dc>
   26fc8:	9823883a 	mov	r17,r19
   26fcc:	003fd606 	br	26f28 <_gp+0xfffe53dc>

00026fd0 <__s2b>:
   26fd0:	defff904 	addi	sp,sp,-28
   26fd4:	dc400115 	stw	r17,4(sp)
   26fd8:	dc000015 	stw	r16,0(sp)
   26fdc:	2023883a 	mov	r17,r4
   26fe0:	2821883a 	mov	r16,r5
   26fe4:	39000204 	addi	r4,r7,8
   26fe8:	01400244 	movi	r5,9
   26fec:	dcc00315 	stw	r19,12(sp)
   26ff0:	dc800215 	stw	r18,8(sp)
   26ff4:	dfc00615 	stw	ra,24(sp)
   26ff8:	dd400515 	stw	r21,20(sp)
   26ffc:	dd000415 	stw	r20,16(sp)
   27000:	3825883a 	mov	r18,r7
   27004:	3027883a 	mov	r19,r6
   27008:	002abfc0 	call	2abfc <__divsi3>
   2700c:	00c00044 	movi	r3,1
   27010:	000b883a 	mov	r5,zero
   27014:	1880030e 	bge	r3,r2,27024 <__s2b+0x54>
   27018:	18c7883a 	add	r3,r3,r3
   2701c:	29400044 	addi	r5,r5,1
   27020:	18bffd16 	blt	r3,r2,27018 <_gp+0xfffe54cc>
   27024:	8809883a 	mov	r4,r17
   27028:	0026de00 	call	26de0 <_Balloc>
   2702c:	d8c00717 	ldw	r3,28(sp)
   27030:	10c00515 	stw	r3,20(r2)
   27034:	00c00044 	movi	r3,1
   27038:	10c00415 	stw	r3,16(r2)
   2703c:	00c00244 	movi	r3,9
   27040:	1cc0210e 	bge	r3,r19,270c8 <__s2b+0xf8>
   27044:	80eb883a 	add	r21,r16,r3
   27048:	a829883a 	mov	r20,r21
   2704c:	84e1883a 	add	r16,r16,r19
   27050:	a1c00007 	ldb	r7,0(r20)
   27054:	01800284 	movi	r6,10
   27058:	a5000044 	addi	r20,r20,1
   2705c:	100b883a 	mov	r5,r2
   27060:	39fff404 	addi	r7,r7,-48
   27064:	8809883a 	mov	r4,r17
   27068:	0026eb00 	call	26eb0 <__multadd>
   2706c:	a43ff81e 	bne	r20,r16,27050 <_gp+0xfffe5504>
   27070:	ace1883a 	add	r16,r21,r19
   27074:	843ffe04 	addi	r16,r16,-8
   27078:	9c800a0e 	bge	r19,r18,270a4 <__s2b+0xd4>
   2707c:	94e5c83a 	sub	r18,r18,r19
   27080:	84a5883a 	add	r18,r16,r18
   27084:	81c00007 	ldb	r7,0(r16)
   27088:	01800284 	movi	r6,10
   2708c:	84000044 	addi	r16,r16,1
   27090:	100b883a 	mov	r5,r2
   27094:	39fff404 	addi	r7,r7,-48
   27098:	8809883a 	mov	r4,r17
   2709c:	0026eb00 	call	26eb0 <__multadd>
   270a0:	84bff81e 	bne	r16,r18,27084 <_gp+0xfffe5538>
   270a4:	dfc00617 	ldw	ra,24(sp)
   270a8:	dd400517 	ldw	r21,20(sp)
   270ac:	dd000417 	ldw	r20,16(sp)
   270b0:	dcc00317 	ldw	r19,12(sp)
   270b4:	dc800217 	ldw	r18,8(sp)
   270b8:	dc400117 	ldw	r17,4(sp)
   270bc:	dc000017 	ldw	r16,0(sp)
   270c0:	dec00704 	addi	sp,sp,28
   270c4:	f800283a 	ret
   270c8:	84000284 	addi	r16,r16,10
   270cc:	1827883a 	mov	r19,r3
   270d0:	003fe906 	br	27078 <_gp+0xfffe552c>

000270d4 <__hi0bits>:
   270d4:	20bfffec 	andhi	r2,r4,65535
   270d8:	1000141e 	bne	r2,zero,2712c <__hi0bits+0x58>
   270dc:	2008943a 	slli	r4,r4,16
   270e0:	00800404 	movi	r2,16
   270e4:	20ffc02c 	andhi	r3,r4,65280
   270e8:	1800021e 	bne	r3,zero,270f4 <__hi0bits+0x20>
   270ec:	2008923a 	slli	r4,r4,8
   270f0:	10800204 	addi	r2,r2,8
   270f4:	20fc002c 	andhi	r3,r4,61440
   270f8:	1800021e 	bne	r3,zero,27104 <__hi0bits+0x30>
   270fc:	2008913a 	slli	r4,r4,4
   27100:	10800104 	addi	r2,r2,4
   27104:	20f0002c 	andhi	r3,r4,49152
   27108:	1800031e 	bne	r3,zero,27118 <__hi0bits+0x44>
   2710c:	2109883a 	add	r4,r4,r4
   27110:	10800084 	addi	r2,r2,2
   27114:	2109883a 	add	r4,r4,r4
   27118:	20000316 	blt	r4,zero,27128 <__hi0bits+0x54>
   2711c:	2110002c 	andhi	r4,r4,16384
   27120:	2000041e 	bne	r4,zero,27134 <__hi0bits+0x60>
   27124:	00800804 	movi	r2,32
   27128:	f800283a 	ret
   2712c:	0005883a 	mov	r2,zero
   27130:	003fec06 	br	270e4 <_gp+0xfffe5598>
   27134:	10800044 	addi	r2,r2,1
   27138:	f800283a 	ret

0002713c <__lo0bits>:
   2713c:	20c00017 	ldw	r3,0(r4)
   27140:	188001cc 	andi	r2,r3,7
   27144:	10000826 	beq	r2,zero,27168 <__lo0bits+0x2c>
   27148:	1880004c 	andi	r2,r3,1
   2714c:	1000211e 	bne	r2,zero,271d4 <__lo0bits+0x98>
   27150:	1880008c 	andi	r2,r3,2
   27154:	1000211e 	bne	r2,zero,271dc <__lo0bits+0xa0>
   27158:	1806d0ba 	srli	r3,r3,2
   2715c:	00800084 	movi	r2,2
   27160:	20c00015 	stw	r3,0(r4)
   27164:	f800283a 	ret
   27168:	18bfffcc 	andi	r2,r3,65535
   2716c:	10001326 	beq	r2,zero,271bc <__lo0bits+0x80>
   27170:	0005883a 	mov	r2,zero
   27174:	19403fcc 	andi	r5,r3,255
   27178:	2800021e 	bne	r5,zero,27184 <__lo0bits+0x48>
   2717c:	1806d23a 	srli	r3,r3,8
   27180:	10800204 	addi	r2,r2,8
   27184:	194003cc 	andi	r5,r3,15
   27188:	2800021e 	bne	r5,zero,27194 <__lo0bits+0x58>
   2718c:	1806d13a 	srli	r3,r3,4
   27190:	10800104 	addi	r2,r2,4
   27194:	194000cc 	andi	r5,r3,3
   27198:	2800021e 	bne	r5,zero,271a4 <__lo0bits+0x68>
   2719c:	1806d0ba 	srli	r3,r3,2
   271a0:	10800084 	addi	r2,r2,2
   271a4:	1940004c 	andi	r5,r3,1
   271a8:	2800081e 	bne	r5,zero,271cc <__lo0bits+0x90>
   271ac:	1806d07a 	srli	r3,r3,1
   271b0:	1800051e 	bne	r3,zero,271c8 <__lo0bits+0x8c>
   271b4:	00800804 	movi	r2,32
   271b8:	f800283a 	ret
   271bc:	1806d43a 	srli	r3,r3,16
   271c0:	00800404 	movi	r2,16
   271c4:	003feb06 	br	27174 <_gp+0xfffe5628>
   271c8:	10800044 	addi	r2,r2,1
   271cc:	20c00015 	stw	r3,0(r4)
   271d0:	f800283a 	ret
   271d4:	0005883a 	mov	r2,zero
   271d8:	f800283a 	ret
   271dc:	1806d07a 	srli	r3,r3,1
   271e0:	00800044 	movi	r2,1
   271e4:	20c00015 	stw	r3,0(r4)
   271e8:	f800283a 	ret

000271ec <__i2b>:
   271ec:	defffd04 	addi	sp,sp,-12
   271f0:	dc000015 	stw	r16,0(sp)
   271f4:	04000044 	movi	r16,1
   271f8:	dc400115 	stw	r17,4(sp)
   271fc:	2823883a 	mov	r17,r5
   27200:	800b883a 	mov	r5,r16
   27204:	dfc00215 	stw	ra,8(sp)
   27208:	0026de00 	call	26de0 <_Balloc>
   2720c:	14400515 	stw	r17,20(r2)
   27210:	14000415 	stw	r16,16(r2)
   27214:	dfc00217 	ldw	ra,8(sp)
   27218:	dc400117 	ldw	r17,4(sp)
   2721c:	dc000017 	ldw	r16,0(sp)
   27220:	dec00304 	addi	sp,sp,12
   27224:	f800283a 	ret

00027228 <__multiply>:
   27228:	defffa04 	addi	sp,sp,-24
   2722c:	dcc00315 	stw	r19,12(sp)
   27230:	dc800215 	stw	r18,8(sp)
   27234:	34c00417 	ldw	r19,16(r6)
   27238:	2c800417 	ldw	r18,16(r5)
   2723c:	dd000415 	stw	r20,16(sp)
   27240:	dc400115 	stw	r17,4(sp)
   27244:	dfc00515 	stw	ra,20(sp)
   27248:	dc000015 	stw	r16,0(sp)
   2724c:	2829883a 	mov	r20,r5
   27250:	3023883a 	mov	r17,r6
   27254:	94c0050e 	bge	r18,r19,2726c <__multiply+0x44>
   27258:	9007883a 	mov	r3,r18
   2725c:	3029883a 	mov	r20,r6
   27260:	9825883a 	mov	r18,r19
   27264:	2823883a 	mov	r17,r5
   27268:	1827883a 	mov	r19,r3
   2726c:	a0800217 	ldw	r2,8(r20)
   27270:	94e1883a 	add	r16,r18,r19
   27274:	a1400117 	ldw	r5,4(r20)
   27278:	1400010e 	bge	r2,r16,27280 <__multiply+0x58>
   2727c:	29400044 	addi	r5,r5,1
   27280:	0026de00 	call	26de0 <_Balloc>
   27284:	8415883a 	add	r10,r16,r16
   27288:	12c00504 	addi	r11,r2,20
   2728c:	5295883a 	add	r10,r10,r10
   27290:	5a95883a 	add	r10,r11,r10
   27294:	5807883a 	mov	r3,r11
   27298:	5a80032e 	bgeu	r11,r10,272a8 <__multiply+0x80>
   2729c:	18000015 	stw	zero,0(r3)
   272a0:	18c00104 	addi	r3,r3,4
   272a4:	1abffd36 	bltu	r3,r10,2729c <_gp+0xfffe5750>
   272a8:	9ce7883a 	add	r19,r19,r19
   272ac:	94a5883a 	add	r18,r18,r18
   272b0:	89800504 	addi	r6,r17,20
   272b4:	9ce7883a 	add	r19,r19,r19
   272b8:	a3400504 	addi	r13,r20,20
   272bc:	94a5883a 	add	r18,r18,r18
   272c0:	34d9883a 	add	r12,r6,r19
   272c4:	6c93883a 	add	r9,r13,r18
   272c8:	3300422e 	bgeu	r6,r12,273d4 <__multiply+0x1ac>
   272cc:	37c00017 	ldw	ra,0(r6)
   272d0:	fbffffcc 	andi	r15,ra,65535
   272d4:	78001b26 	beq	r15,zero,27344 <__multiply+0x11c>
   272d8:	5811883a 	mov	r8,r11
   272dc:	681d883a 	mov	r14,r13
   272e0:	000f883a 	mov	r7,zero
   272e4:	71000017 	ldw	r4,0(r14)
   272e8:	40c00017 	ldw	r3,0(r8)
   272ec:	73800104 	addi	r14,r14,4
   272f0:	217fffcc 	andi	r5,r4,65535
   272f4:	2bcb383a 	mul	r5,r5,r15
   272f8:	2008d43a 	srli	r4,r4,16
   272fc:	1c7fffcc 	andi	r17,r3,65535
   27300:	2c4b883a 	add	r5,r5,r17
   27304:	29cb883a 	add	r5,r5,r7
   27308:	23c9383a 	mul	r4,r4,r15
   2730c:	1806d43a 	srli	r3,r3,16
   27310:	280ed43a 	srli	r7,r5,16
   27314:	297fffcc 	andi	r5,r5,65535
   27318:	20c7883a 	add	r3,r4,r3
   2731c:	19c7883a 	add	r3,r3,r7
   27320:	1808943a 	slli	r4,r3,16
   27324:	4023883a 	mov	r17,r8
   27328:	180ed43a 	srli	r7,r3,16
   2732c:	214ab03a 	or	r5,r4,r5
   27330:	41400015 	stw	r5,0(r8)
   27334:	42000104 	addi	r8,r8,4
   27338:	727fea36 	bltu	r14,r9,272e4 <_gp+0xfffe5798>
   2733c:	89c00115 	stw	r7,4(r17)
   27340:	37c00017 	ldw	ra,0(r6)
   27344:	f83ed43a 	srli	ra,ra,16
   27348:	f8001f26 	beq	ra,zero,273c8 <__multiply+0x1a0>
   2734c:	58c00017 	ldw	r3,0(r11)
   27350:	681d883a 	mov	r14,r13
   27354:	581f883a 	mov	r15,r11
   27358:	1811883a 	mov	r8,r3
   2735c:	5825883a 	mov	r18,r11
   27360:	000f883a 	mov	r7,zero
   27364:	00000106 	br	2736c <__multiply+0x144>
   27368:	8825883a 	mov	r18,r17
   2736c:	7140000b 	ldhu	r5,0(r14)
   27370:	4010d43a 	srli	r8,r8,16
   27374:	193fffcc 	andi	r4,r3,65535
   27378:	2fcb383a 	mul	r5,r5,ra
   2737c:	7bc00104 	addi	r15,r15,4
   27380:	73800104 	addi	r14,r14,4
   27384:	2a0b883a 	add	r5,r5,r8
   27388:	29cb883a 	add	r5,r5,r7
   2738c:	2806943a 	slli	r3,r5,16
   27390:	94400104 	addi	r17,r18,4
   27394:	280ad43a 	srli	r5,r5,16
   27398:	1908b03a 	or	r4,r3,r4
   2739c:	793fff15 	stw	r4,-4(r15)
   273a0:	70ffff17 	ldw	r3,-4(r14)
   273a4:	8a000017 	ldw	r8,0(r17)
   273a8:	1806d43a 	srli	r3,r3,16
   273ac:	413fffcc 	andi	r4,r8,65535
   273b0:	1fc7383a 	mul	r3,r3,ra
   273b4:	1907883a 	add	r3,r3,r4
   273b8:	1947883a 	add	r3,r3,r5
   273bc:	180ed43a 	srli	r7,r3,16
   273c0:	727fe936 	bltu	r14,r9,27368 <_gp+0xfffe581c>
   273c4:	90c00115 	stw	r3,4(r18)
   273c8:	31800104 	addi	r6,r6,4
   273cc:	5ac00104 	addi	r11,r11,4
   273d0:	333fbe36 	bltu	r6,r12,272cc <_gp+0xfffe5780>
   273d4:	0400090e 	bge	zero,r16,273fc <__multiply+0x1d4>
   273d8:	50ffff17 	ldw	r3,-4(r10)
   273dc:	52bfff04 	addi	r10,r10,-4
   273e0:	18000326 	beq	r3,zero,273f0 <__multiply+0x1c8>
   273e4:	00000506 	br	273fc <__multiply+0x1d4>
   273e8:	50c00017 	ldw	r3,0(r10)
   273ec:	1800031e 	bne	r3,zero,273fc <__multiply+0x1d4>
   273f0:	843fffc4 	addi	r16,r16,-1
   273f4:	52bfff04 	addi	r10,r10,-4
   273f8:	803ffb1e 	bne	r16,zero,273e8 <_gp+0xfffe589c>
   273fc:	14000415 	stw	r16,16(r2)
   27400:	dfc00517 	ldw	ra,20(sp)
   27404:	dd000417 	ldw	r20,16(sp)
   27408:	dcc00317 	ldw	r19,12(sp)
   2740c:	dc800217 	ldw	r18,8(sp)
   27410:	dc400117 	ldw	r17,4(sp)
   27414:	dc000017 	ldw	r16,0(sp)
   27418:	dec00604 	addi	sp,sp,24
   2741c:	f800283a 	ret

00027420 <__pow5mult>:
   27420:	defffa04 	addi	sp,sp,-24
   27424:	dcc00315 	stw	r19,12(sp)
   27428:	dc000015 	stw	r16,0(sp)
   2742c:	dfc00515 	stw	ra,20(sp)
   27430:	dd000415 	stw	r20,16(sp)
   27434:	dc800215 	stw	r18,8(sp)
   27438:	dc400115 	stw	r17,4(sp)
   2743c:	308000cc 	andi	r2,r6,3
   27440:	3021883a 	mov	r16,r6
   27444:	2027883a 	mov	r19,r4
   27448:	10002f1e 	bne	r2,zero,27508 <__pow5mult+0xe8>
   2744c:	2825883a 	mov	r18,r5
   27450:	8021d0ba 	srai	r16,r16,2
   27454:	80001a26 	beq	r16,zero,274c0 <__pow5mult+0xa0>
   27458:	9c401217 	ldw	r17,72(r19)
   2745c:	8800061e 	bne	r17,zero,27478 <__pow5mult+0x58>
   27460:	00003406 	br	27534 <__pow5mult+0x114>
   27464:	8021d07a 	srai	r16,r16,1
   27468:	80001526 	beq	r16,zero,274c0 <__pow5mult+0xa0>
   2746c:	88800017 	ldw	r2,0(r17)
   27470:	10001c26 	beq	r2,zero,274e4 <__pow5mult+0xc4>
   27474:	1023883a 	mov	r17,r2
   27478:	8080004c 	andi	r2,r16,1
   2747c:	103ff926 	beq	r2,zero,27464 <_gp+0xfffe5918>
   27480:	880d883a 	mov	r6,r17
   27484:	900b883a 	mov	r5,r18
   27488:	9809883a 	mov	r4,r19
   2748c:	00272280 	call	27228 <__multiply>
   27490:	90001b26 	beq	r18,zero,27500 <__pow5mult+0xe0>
   27494:	91000117 	ldw	r4,4(r18)
   27498:	98c01317 	ldw	r3,76(r19)
   2749c:	8021d07a 	srai	r16,r16,1
   274a0:	2109883a 	add	r4,r4,r4
   274a4:	2109883a 	add	r4,r4,r4
   274a8:	1907883a 	add	r3,r3,r4
   274ac:	19000017 	ldw	r4,0(r3)
   274b0:	91000015 	stw	r4,0(r18)
   274b4:	1c800015 	stw	r18,0(r3)
   274b8:	1025883a 	mov	r18,r2
   274bc:	803feb1e 	bne	r16,zero,2746c <_gp+0xfffe5920>
   274c0:	9005883a 	mov	r2,r18
   274c4:	dfc00517 	ldw	ra,20(sp)
   274c8:	dd000417 	ldw	r20,16(sp)
   274cc:	dcc00317 	ldw	r19,12(sp)
   274d0:	dc800217 	ldw	r18,8(sp)
   274d4:	dc400117 	ldw	r17,4(sp)
   274d8:	dc000017 	ldw	r16,0(sp)
   274dc:	dec00604 	addi	sp,sp,24
   274e0:	f800283a 	ret
   274e4:	880d883a 	mov	r6,r17
   274e8:	880b883a 	mov	r5,r17
   274ec:	9809883a 	mov	r4,r19
   274f0:	00272280 	call	27228 <__multiply>
   274f4:	88800015 	stw	r2,0(r17)
   274f8:	10000015 	stw	zero,0(r2)
   274fc:	003fdd06 	br	27474 <_gp+0xfffe5928>
   27500:	1025883a 	mov	r18,r2
   27504:	003fd706 	br	27464 <_gp+0xfffe5918>
   27508:	10bfffc4 	addi	r2,r2,-1
   2750c:	1085883a 	add	r2,r2,r2
   27510:	00c000f4 	movhi	r3,3
   27514:	18df3e04 	addi	r3,r3,31992
   27518:	1085883a 	add	r2,r2,r2
   2751c:	1885883a 	add	r2,r3,r2
   27520:	11800017 	ldw	r6,0(r2)
   27524:	000f883a 	mov	r7,zero
   27528:	0026eb00 	call	26eb0 <__multadd>
   2752c:	1025883a 	mov	r18,r2
   27530:	003fc706 	br	27450 <_gp+0xfffe5904>
   27534:	05000044 	movi	r20,1
   27538:	a00b883a 	mov	r5,r20
   2753c:	9809883a 	mov	r4,r19
   27540:	0026de00 	call	26de0 <_Balloc>
   27544:	1023883a 	mov	r17,r2
   27548:	00809c44 	movi	r2,625
   2754c:	88800515 	stw	r2,20(r17)
   27550:	8d000415 	stw	r20,16(r17)
   27554:	9c401215 	stw	r17,72(r19)
   27558:	88000015 	stw	zero,0(r17)
   2755c:	003fc606 	br	27478 <_gp+0xfffe592c>

00027560 <__lshift>:
   27560:	defff904 	addi	sp,sp,-28
   27564:	dd400515 	stw	r21,20(sp)
   27568:	dcc00315 	stw	r19,12(sp)
   2756c:	302bd17a 	srai	r21,r6,5
   27570:	2cc00417 	ldw	r19,16(r5)
   27574:	28800217 	ldw	r2,8(r5)
   27578:	dd000415 	stw	r20,16(sp)
   2757c:	ace7883a 	add	r19,r21,r19
   27580:	dc800215 	stw	r18,8(sp)
   27584:	dc400115 	stw	r17,4(sp)
   27588:	dc000015 	stw	r16,0(sp)
   2758c:	dfc00615 	stw	ra,24(sp)
   27590:	9c000044 	addi	r16,r19,1
   27594:	2823883a 	mov	r17,r5
   27598:	3029883a 	mov	r20,r6
   2759c:	2025883a 	mov	r18,r4
   275a0:	29400117 	ldw	r5,4(r5)
   275a4:	1400030e 	bge	r2,r16,275b4 <__lshift+0x54>
   275a8:	1085883a 	add	r2,r2,r2
   275ac:	29400044 	addi	r5,r5,1
   275b0:	143ffd16 	blt	r2,r16,275a8 <_gp+0xfffe5a5c>
   275b4:	9009883a 	mov	r4,r18
   275b8:	0026de00 	call	26de0 <_Balloc>
   275bc:	10c00504 	addi	r3,r2,20
   275c0:	0540070e 	bge	zero,r21,275e0 <__lshift+0x80>
   275c4:	ad6b883a 	add	r21,r21,r21
   275c8:	ad6b883a 	add	r21,r21,r21
   275cc:	1809883a 	mov	r4,r3
   275d0:	1d47883a 	add	r3,r3,r21
   275d4:	20000015 	stw	zero,0(r4)
   275d8:	21000104 	addi	r4,r4,4
   275dc:	193ffd1e 	bne	r3,r4,275d4 <_gp+0xfffe5a88>
   275e0:	8a000417 	ldw	r8,16(r17)
   275e4:	89000504 	addi	r4,r17,20
   275e8:	a18007cc 	andi	r6,r20,31
   275ec:	4211883a 	add	r8,r8,r8
   275f0:	4211883a 	add	r8,r8,r8
   275f4:	2211883a 	add	r8,r4,r8
   275f8:	30002326 	beq	r6,zero,27688 <__lshift+0x128>
   275fc:	02400804 	movi	r9,32
   27600:	4993c83a 	sub	r9,r9,r6
   27604:	000b883a 	mov	r5,zero
   27608:	21c00017 	ldw	r7,0(r4)
   2760c:	1815883a 	mov	r10,r3
   27610:	18c00104 	addi	r3,r3,4
   27614:	398e983a 	sll	r7,r7,r6
   27618:	21000104 	addi	r4,r4,4
   2761c:	394ab03a 	or	r5,r7,r5
   27620:	197fff15 	stw	r5,-4(r3)
   27624:	217fff17 	ldw	r5,-4(r4)
   27628:	2a4ad83a 	srl	r5,r5,r9
   2762c:	223ff636 	bltu	r4,r8,27608 <_gp+0xfffe5abc>
   27630:	51400115 	stw	r5,4(r10)
   27634:	28001a1e 	bne	r5,zero,276a0 <__lshift+0x140>
   27638:	843fffc4 	addi	r16,r16,-1
   2763c:	14000415 	stw	r16,16(r2)
   27640:	88000826 	beq	r17,zero,27664 <__lshift+0x104>
   27644:	89000117 	ldw	r4,4(r17)
   27648:	90c01317 	ldw	r3,76(r18)
   2764c:	2109883a 	add	r4,r4,r4
   27650:	2109883a 	add	r4,r4,r4
   27654:	1907883a 	add	r3,r3,r4
   27658:	19000017 	ldw	r4,0(r3)
   2765c:	89000015 	stw	r4,0(r17)
   27660:	1c400015 	stw	r17,0(r3)
   27664:	dfc00617 	ldw	ra,24(sp)
   27668:	dd400517 	ldw	r21,20(sp)
   2766c:	dd000417 	ldw	r20,16(sp)
   27670:	dcc00317 	ldw	r19,12(sp)
   27674:	dc800217 	ldw	r18,8(sp)
   27678:	dc400117 	ldw	r17,4(sp)
   2767c:	dc000017 	ldw	r16,0(sp)
   27680:	dec00704 	addi	sp,sp,28
   27684:	f800283a 	ret
   27688:	21400017 	ldw	r5,0(r4)
   2768c:	18c00104 	addi	r3,r3,4
   27690:	21000104 	addi	r4,r4,4
   27694:	197fff15 	stw	r5,-4(r3)
   27698:	223ffb36 	bltu	r4,r8,27688 <_gp+0xfffe5b3c>
   2769c:	003fe606 	br	27638 <_gp+0xfffe5aec>
   276a0:	9c000084 	addi	r16,r19,2
   276a4:	003fe406 	br	27638 <_gp+0xfffe5aec>

000276a8 <__mcmp>:
   276a8:	20800417 	ldw	r2,16(r4)
   276ac:	28c00417 	ldw	r3,16(r5)
   276b0:	10c5c83a 	sub	r2,r2,r3
   276b4:	1000111e 	bne	r2,zero,276fc <__mcmp+0x54>
   276b8:	18c7883a 	add	r3,r3,r3
   276bc:	18c7883a 	add	r3,r3,r3
   276c0:	21000504 	addi	r4,r4,20
   276c4:	29400504 	addi	r5,r5,20
   276c8:	20c5883a 	add	r2,r4,r3
   276cc:	28cb883a 	add	r5,r5,r3
   276d0:	00000106 	br	276d8 <__mcmp+0x30>
   276d4:	20800a2e 	bgeu	r4,r2,27700 <__mcmp+0x58>
   276d8:	10bfff04 	addi	r2,r2,-4
   276dc:	297fff04 	addi	r5,r5,-4
   276e0:	11800017 	ldw	r6,0(r2)
   276e4:	28c00017 	ldw	r3,0(r5)
   276e8:	30fffa26 	beq	r6,r3,276d4 <_gp+0xfffe5b88>
   276ec:	30c00236 	bltu	r6,r3,276f8 <__mcmp+0x50>
   276f0:	00800044 	movi	r2,1
   276f4:	f800283a 	ret
   276f8:	00bfffc4 	movi	r2,-1
   276fc:	f800283a 	ret
   27700:	0005883a 	mov	r2,zero
   27704:	f800283a 	ret

00027708 <__mdiff>:
   27708:	28c00417 	ldw	r3,16(r5)
   2770c:	30800417 	ldw	r2,16(r6)
   27710:	defffa04 	addi	sp,sp,-24
   27714:	dcc00315 	stw	r19,12(sp)
   27718:	dc800215 	stw	r18,8(sp)
   2771c:	dfc00515 	stw	ra,20(sp)
   27720:	dd000415 	stw	r20,16(sp)
   27724:	dc400115 	stw	r17,4(sp)
   27728:	dc000015 	stw	r16,0(sp)
   2772c:	1887c83a 	sub	r3,r3,r2
   27730:	2825883a 	mov	r18,r5
   27734:	3027883a 	mov	r19,r6
   27738:	1800141e 	bne	r3,zero,2778c <__mdiff+0x84>
   2773c:	1085883a 	add	r2,r2,r2
   27740:	1085883a 	add	r2,r2,r2
   27744:	2a000504 	addi	r8,r5,20
   27748:	34000504 	addi	r16,r6,20
   2774c:	4087883a 	add	r3,r8,r2
   27750:	8085883a 	add	r2,r16,r2
   27754:	00000106 	br	2775c <__mdiff+0x54>
   27758:	40c0592e 	bgeu	r8,r3,278c0 <__mdiff+0x1b8>
   2775c:	18ffff04 	addi	r3,r3,-4
   27760:	10bfff04 	addi	r2,r2,-4
   27764:	19c00017 	ldw	r7,0(r3)
   27768:	11400017 	ldw	r5,0(r2)
   2776c:	397ffa26 	beq	r7,r5,27758 <_gp+0xfffe5c0c>
   27770:	3940592e 	bgeu	r7,r5,278d8 <__mdiff+0x1d0>
   27774:	9005883a 	mov	r2,r18
   27778:	4023883a 	mov	r17,r8
   2777c:	9825883a 	mov	r18,r19
   27780:	05000044 	movi	r20,1
   27784:	1027883a 	mov	r19,r2
   27788:	00000406 	br	2779c <__mdiff+0x94>
   2778c:	18005616 	blt	r3,zero,278e8 <__mdiff+0x1e0>
   27790:	34400504 	addi	r17,r6,20
   27794:	2c000504 	addi	r16,r5,20
   27798:	0029883a 	mov	r20,zero
   2779c:	91400117 	ldw	r5,4(r18)
   277a0:	0026de00 	call	26de0 <_Balloc>
   277a4:	92400417 	ldw	r9,16(r18)
   277a8:	9b000417 	ldw	r12,16(r19)
   277ac:	12c00504 	addi	r11,r2,20
   277b0:	4a51883a 	add	r8,r9,r9
   277b4:	6319883a 	add	r12,r12,r12
   277b8:	4211883a 	add	r8,r8,r8
   277bc:	6319883a 	add	r12,r12,r12
   277c0:	15000315 	stw	r20,12(r2)
   277c4:	8211883a 	add	r8,r16,r8
   277c8:	8b19883a 	add	r12,r17,r12
   277cc:	0007883a 	mov	r3,zero
   277d0:	81400017 	ldw	r5,0(r16)
   277d4:	89c00017 	ldw	r7,0(r17)
   277d8:	59800104 	addi	r6,r11,4
   277dc:	293fffcc 	andi	r4,r5,65535
   277e0:	20c7883a 	add	r3,r4,r3
   277e4:	393fffcc 	andi	r4,r7,65535
   277e8:	1909c83a 	sub	r4,r3,r4
   277ec:	280ad43a 	srli	r5,r5,16
   277f0:	380ed43a 	srli	r7,r7,16
   277f4:	2007d43a 	srai	r3,r4,16
   277f8:	213fffcc 	andi	r4,r4,65535
   277fc:	29cbc83a 	sub	r5,r5,r7
   27800:	28c7883a 	add	r3,r5,r3
   27804:	180a943a 	slli	r5,r3,16
   27808:	8c400104 	addi	r17,r17,4
   2780c:	84000104 	addi	r16,r16,4
   27810:	2908b03a 	or	r4,r5,r4
   27814:	59000015 	stw	r4,0(r11)
   27818:	1807d43a 	srai	r3,r3,16
   2781c:	3015883a 	mov	r10,r6
   27820:	3017883a 	mov	r11,r6
   27824:	8b3fea36 	bltu	r17,r12,277d0 <_gp+0xfffe5c84>
   27828:	8200162e 	bgeu	r16,r8,27884 <__mdiff+0x17c>
   2782c:	8017883a 	mov	r11,r16
   27830:	59400017 	ldw	r5,0(r11)
   27834:	31800104 	addi	r6,r6,4
   27838:	5ac00104 	addi	r11,r11,4
   2783c:	293fffcc 	andi	r4,r5,65535
   27840:	20c7883a 	add	r3,r4,r3
   27844:	280ed43a 	srli	r7,r5,16
   27848:	180bd43a 	srai	r5,r3,16
   2784c:	193fffcc 	andi	r4,r3,65535
   27850:	3947883a 	add	r3,r7,r5
   27854:	180a943a 	slli	r5,r3,16
   27858:	1807d43a 	srai	r3,r3,16
   2785c:	2908b03a 	or	r4,r5,r4
   27860:	313fff15 	stw	r4,-4(r6)
   27864:	5a3ff236 	bltu	r11,r8,27830 <_gp+0xfffe5ce4>
   27868:	0406303a 	nor	r3,zero,r16
   2786c:	1a07883a 	add	r3,r3,r8
   27870:	1806d0ba 	srli	r3,r3,2
   27874:	18c00044 	addi	r3,r3,1
   27878:	18c7883a 	add	r3,r3,r3
   2787c:	18c7883a 	add	r3,r3,r3
   27880:	50d5883a 	add	r10,r10,r3
   27884:	50ffff04 	addi	r3,r10,-4
   27888:	2000041e 	bne	r4,zero,2789c <__mdiff+0x194>
   2788c:	18ffff04 	addi	r3,r3,-4
   27890:	19000017 	ldw	r4,0(r3)
   27894:	4a7fffc4 	addi	r9,r9,-1
   27898:	203ffc26 	beq	r4,zero,2788c <_gp+0xfffe5d40>
   2789c:	12400415 	stw	r9,16(r2)
   278a0:	dfc00517 	ldw	ra,20(sp)
   278a4:	dd000417 	ldw	r20,16(sp)
   278a8:	dcc00317 	ldw	r19,12(sp)
   278ac:	dc800217 	ldw	r18,8(sp)
   278b0:	dc400117 	ldw	r17,4(sp)
   278b4:	dc000017 	ldw	r16,0(sp)
   278b8:	dec00604 	addi	sp,sp,24
   278bc:	f800283a 	ret
   278c0:	000b883a 	mov	r5,zero
   278c4:	0026de00 	call	26de0 <_Balloc>
   278c8:	00c00044 	movi	r3,1
   278cc:	10c00415 	stw	r3,16(r2)
   278d0:	10000515 	stw	zero,20(r2)
   278d4:	003ff206 	br	278a0 <_gp+0xfffe5d54>
   278d8:	8023883a 	mov	r17,r16
   278dc:	0029883a 	mov	r20,zero
   278e0:	4021883a 	mov	r16,r8
   278e4:	003fad06 	br	2779c <_gp+0xfffe5c50>
   278e8:	9005883a 	mov	r2,r18
   278ec:	94400504 	addi	r17,r18,20
   278f0:	9c000504 	addi	r16,r19,20
   278f4:	9825883a 	mov	r18,r19
   278f8:	05000044 	movi	r20,1
   278fc:	1027883a 	mov	r19,r2
   27900:	003fa606 	br	2779c <_gp+0xfffe5c50>

00027904 <__ulp>:
   27904:	295ffc2c 	andhi	r5,r5,32752
   27908:	00bf3034 	movhi	r2,64704
   2790c:	2887883a 	add	r3,r5,r2
   27910:	00c0020e 	bge	zero,r3,2791c <__ulp+0x18>
   27914:	0005883a 	mov	r2,zero
   27918:	f800283a 	ret
   2791c:	00c7c83a 	sub	r3,zero,r3
   27920:	1807d53a 	srai	r3,r3,20
   27924:	008004c4 	movi	r2,19
   27928:	10c00b0e 	bge	r2,r3,27958 <__ulp+0x54>
   2792c:	18bffb04 	addi	r2,r3,-20
   27930:	01000784 	movi	r4,30
   27934:	0007883a 	mov	r3,zero
   27938:	20800516 	blt	r4,r2,27950 <__ulp+0x4c>
   2793c:	010007c4 	movi	r4,31
   27940:	2089c83a 	sub	r4,r4,r2
   27944:	00800044 	movi	r2,1
   27948:	1104983a 	sll	r2,r2,r4
   2794c:	f800283a 	ret
   27950:	00800044 	movi	r2,1
   27954:	f800283a 	ret
   27958:	01400234 	movhi	r5,8
   2795c:	28c7d83a 	sra	r3,r5,r3
   27960:	0005883a 	mov	r2,zero
   27964:	f800283a 	ret

00027968 <__b2d>:
   27968:	defffa04 	addi	sp,sp,-24
   2796c:	dc000015 	stw	r16,0(sp)
   27970:	24000417 	ldw	r16,16(r4)
   27974:	dc400115 	stw	r17,4(sp)
   27978:	24400504 	addi	r17,r4,20
   2797c:	8421883a 	add	r16,r16,r16
   27980:	8421883a 	add	r16,r16,r16
   27984:	8c21883a 	add	r16,r17,r16
   27988:	dc800215 	stw	r18,8(sp)
   2798c:	84bfff17 	ldw	r18,-4(r16)
   27990:	dd000415 	stw	r20,16(sp)
   27994:	dcc00315 	stw	r19,12(sp)
   27998:	9009883a 	mov	r4,r18
   2799c:	2829883a 	mov	r20,r5
   279a0:	dfc00515 	stw	ra,20(sp)
   279a4:	00270d40 	call	270d4 <__hi0bits>
   279a8:	00c00804 	movi	r3,32
   279ac:	1889c83a 	sub	r4,r3,r2
   279b0:	a1000015 	stw	r4,0(r20)
   279b4:	01000284 	movi	r4,10
   279b8:	84ffff04 	addi	r19,r16,-4
   279bc:	20801216 	blt	r4,r2,27a08 <__b2d+0xa0>
   279c0:	018002c4 	movi	r6,11
   279c4:	308dc83a 	sub	r6,r6,r2
   279c8:	9186d83a 	srl	r3,r18,r6
   279cc:	18cffc34 	orhi	r3,r3,16368
   279d0:	8cc0212e 	bgeu	r17,r19,27a58 <__b2d+0xf0>
   279d4:	813ffe17 	ldw	r4,-8(r16)
   279d8:	218cd83a 	srl	r6,r4,r6
   279dc:	10800544 	addi	r2,r2,21
   279e0:	9084983a 	sll	r2,r18,r2
   279e4:	1184b03a 	or	r2,r2,r6
   279e8:	dfc00517 	ldw	ra,20(sp)
   279ec:	dd000417 	ldw	r20,16(sp)
   279f0:	dcc00317 	ldw	r19,12(sp)
   279f4:	dc800217 	ldw	r18,8(sp)
   279f8:	dc400117 	ldw	r17,4(sp)
   279fc:	dc000017 	ldw	r16,0(sp)
   27a00:	dec00604 	addi	sp,sp,24
   27a04:	f800283a 	ret
   27a08:	8cc00f2e 	bgeu	r17,r19,27a48 <__b2d+0xe0>
   27a0c:	117ffd44 	addi	r5,r2,-11
   27a10:	80bffe17 	ldw	r2,-8(r16)
   27a14:	28000e26 	beq	r5,zero,27a50 <__b2d+0xe8>
   27a18:	1949c83a 	sub	r4,r3,r5
   27a1c:	9164983a 	sll	r18,r18,r5
   27a20:	1106d83a 	srl	r3,r2,r4
   27a24:	81bffe04 	addi	r6,r16,-8
   27a28:	948ffc34 	orhi	r18,r18,16368
   27a2c:	90c6b03a 	or	r3,r18,r3
   27a30:	89800e2e 	bgeu	r17,r6,27a6c <__b2d+0x104>
   27a34:	81bffd17 	ldw	r6,-12(r16)
   27a38:	1144983a 	sll	r2,r2,r5
   27a3c:	310ad83a 	srl	r5,r6,r4
   27a40:	2884b03a 	or	r2,r5,r2
   27a44:	003fe806 	br	279e8 <_gp+0xfffe5e9c>
   27a48:	10bffd44 	addi	r2,r2,-11
   27a4c:	1000041e 	bne	r2,zero,27a60 <__b2d+0xf8>
   27a50:	90cffc34 	orhi	r3,r18,16368
   27a54:	003fe406 	br	279e8 <_gp+0xfffe5e9c>
   27a58:	000d883a 	mov	r6,zero
   27a5c:	003fdf06 	br	279dc <_gp+0xfffe5e90>
   27a60:	90a4983a 	sll	r18,r18,r2
   27a64:	0005883a 	mov	r2,zero
   27a68:	003ff906 	br	27a50 <_gp+0xfffe5f04>
   27a6c:	1144983a 	sll	r2,r2,r5
   27a70:	003fdd06 	br	279e8 <_gp+0xfffe5e9c>

00027a74 <__d2b>:
   27a74:	defff804 	addi	sp,sp,-32
   27a78:	dc000215 	stw	r16,8(sp)
   27a7c:	3021883a 	mov	r16,r6
   27a80:	dc400315 	stw	r17,12(sp)
   27a84:	8022907a 	slli	r17,r16,1
   27a88:	dd000615 	stw	r20,24(sp)
   27a8c:	2829883a 	mov	r20,r5
   27a90:	01400044 	movi	r5,1
   27a94:	dcc00515 	stw	r19,20(sp)
   27a98:	dc800415 	stw	r18,16(sp)
   27a9c:	dfc00715 	stw	ra,28(sp)
   27aa0:	3825883a 	mov	r18,r7
   27aa4:	8822d57a 	srli	r17,r17,21
   27aa8:	0026de00 	call	26de0 <_Balloc>
   27aac:	1027883a 	mov	r19,r2
   27ab0:	00800434 	movhi	r2,16
   27ab4:	10bfffc4 	addi	r2,r2,-1
   27ab8:	808c703a 	and	r6,r16,r2
   27abc:	88000126 	beq	r17,zero,27ac4 <__d2b+0x50>
   27ac0:	31800434 	orhi	r6,r6,16
   27ac4:	d9800015 	stw	r6,0(sp)
   27ac8:	a0002426 	beq	r20,zero,27b5c <__d2b+0xe8>
   27acc:	d9000104 	addi	r4,sp,4
   27ad0:	dd000115 	stw	r20,4(sp)
   27ad4:	002713c0 	call	2713c <__lo0bits>
   27ad8:	d8c00017 	ldw	r3,0(sp)
   27adc:	10002f1e 	bne	r2,zero,27b9c <__d2b+0x128>
   27ae0:	d9000117 	ldw	r4,4(sp)
   27ae4:	99000515 	stw	r4,20(r19)
   27ae8:	1821003a 	cmpeq	r16,r3,zero
   27aec:	01000084 	movi	r4,2
   27af0:	2421c83a 	sub	r16,r4,r16
   27af4:	98c00615 	stw	r3,24(r19)
   27af8:	9c000415 	stw	r16,16(r19)
   27afc:	88001f1e 	bne	r17,zero,27b7c <__d2b+0x108>
   27b00:	10bef384 	addi	r2,r2,-1074
   27b04:	90800015 	stw	r2,0(r18)
   27b08:	00900034 	movhi	r2,16384
   27b0c:	10bfffc4 	addi	r2,r2,-1
   27b10:	8085883a 	add	r2,r16,r2
   27b14:	1085883a 	add	r2,r2,r2
   27b18:	1085883a 	add	r2,r2,r2
   27b1c:	9885883a 	add	r2,r19,r2
   27b20:	11000517 	ldw	r4,20(r2)
   27b24:	8020917a 	slli	r16,r16,5
   27b28:	00270d40 	call	270d4 <__hi0bits>
   27b2c:	d8c00817 	ldw	r3,32(sp)
   27b30:	8085c83a 	sub	r2,r16,r2
   27b34:	18800015 	stw	r2,0(r3)
   27b38:	9805883a 	mov	r2,r19
   27b3c:	dfc00717 	ldw	ra,28(sp)
   27b40:	dd000617 	ldw	r20,24(sp)
   27b44:	dcc00517 	ldw	r19,20(sp)
   27b48:	dc800417 	ldw	r18,16(sp)
   27b4c:	dc400317 	ldw	r17,12(sp)
   27b50:	dc000217 	ldw	r16,8(sp)
   27b54:	dec00804 	addi	sp,sp,32
   27b58:	f800283a 	ret
   27b5c:	d809883a 	mov	r4,sp
   27b60:	002713c0 	call	2713c <__lo0bits>
   27b64:	d8c00017 	ldw	r3,0(sp)
   27b68:	04000044 	movi	r16,1
   27b6c:	9c000415 	stw	r16,16(r19)
   27b70:	98c00515 	stw	r3,20(r19)
   27b74:	10800804 	addi	r2,r2,32
   27b78:	883fe126 	beq	r17,zero,27b00 <_gp+0xfffe5fb4>
   27b7c:	00c00d44 	movi	r3,53
   27b80:	8c7ef344 	addi	r17,r17,-1075
   27b84:	88a3883a 	add	r17,r17,r2
   27b88:	1885c83a 	sub	r2,r3,r2
   27b8c:	d8c00817 	ldw	r3,32(sp)
   27b90:	94400015 	stw	r17,0(r18)
   27b94:	18800015 	stw	r2,0(r3)
   27b98:	003fe706 	br	27b38 <_gp+0xfffe5fec>
   27b9c:	01000804 	movi	r4,32
   27ba0:	2089c83a 	sub	r4,r4,r2
   27ba4:	1908983a 	sll	r4,r3,r4
   27ba8:	d9400117 	ldw	r5,4(sp)
   27bac:	1886d83a 	srl	r3,r3,r2
   27bb0:	2148b03a 	or	r4,r4,r5
   27bb4:	99000515 	stw	r4,20(r19)
   27bb8:	d8c00015 	stw	r3,0(sp)
   27bbc:	003fca06 	br	27ae8 <_gp+0xfffe5f9c>

00027bc0 <__ratio>:
   27bc0:	defff904 	addi	sp,sp,-28
   27bc4:	dc400315 	stw	r17,12(sp)
   27bc8:	2823883a 	mov	r17,r5
   27bcc:	d9400104 	addi	r5,sp,4
   27bd0:	dfc00615 	stw	ra,24(sp)
   27bd4:	dcc00515 	stw	r19,20(sp)
   27bd8:	dc800415 	stw	r18,16(sp)
   27bdc:	2027883a 	mov	r19,r4
   27be0:	dc000215 	stw	r16,8(sp)
   27be4:	00279680 	call	27968 <__b2d>
   27be8:	d80b883a 	mov	r5,sp
   27bec:	8809883a 	mov	r4,r17
   27bf0:	1025883a 	mov	r18,r2
   27bf4:	1821883a 	mov	r16,r3
   27bf8:	00279680 	call	27968 <__b2d>
   27bfc:	8a000417 	ldw	r8,16(r17)
   27c00:	99000417 	ldw	r4,16(r19)
   27c04:	d9400117 	ldw	r5,4(sp)
   27c08:	2209c83a 	sub	r4,r4,r8
   27c0c:	2010917a 	slli	r8,r4,5
   27c10:	d9000017 	ldw	r4,0(sp)
   27c14:	2909c83a 	sub	r4,r5,r4
   27c18:	4109883a 	add	r4,r8,r4
   27c1c:	01000e0e 	bge	zero,r4,27c58 <__ratio+0x98>
   27c20:	2008953a 	slli	r4,r4,20
   27c24:	2421883a 	add	r16,r4,r16
   27c28:	100d883a 	mov	r6,r2
   27c2c:	180f883a 	mov	r7,r3
   27c30:	9009883a 	mov	r4,r18
   27c34:	800b883a 	mov	r5,r16
   27c38:	002b65c0 	call	2b65c <__divdf3>
   27c3c:	dfc00617 	ldw	ra,24(sp)
   27c40:	dcc00517 	ldw	r19,20(sp)
   27c44:	dc800417 	ldw	r18,16(sp)
   27c48:	dc400317 	ldw	r17,12(sp)
   27c4c:	dc000217 	ldw	r16,8(sp)
   27c50:	dec00704 	addi	sp,sp,28
   27c54:	f800283a 	ret
   27c58:	2008953a 	slli	r4,r4,20
   27c5c:	1907c83a 	sub	r3,r3,r4
   27c60:	003ff106 	br	27c28 <_gp+0xfffe60dc>

00027c64 <_mprec_log10>:
   27c64:	defffe04 	addi	sp,sp,-8
   27c68:	dc000015 	stw	r16,0(sp)
   27c6c:	dfc00115 	stw	ra,4(sp)
   27c70:	008005c4 	movi	r2,23
   27c74:	2021883a 	mov	r16,r4
   27c78:	11000d0e 	bge	r2,r4,27cb0 <_mprec_log10+0x4c>
   27c7c:	0005883a 	mov	r2,zero
   27c80:	00cffc34 	movhi	r3,16368
   27c84:	843fffc4 	addi	r16,r16,-1
   27c88:	000d883a 	mov	r6,zero
   27c8c:	01d00934 	movhi	r7,16420
   27c90:	1009883a 	mov	r4,r2
   27c94:	180b883a 	mov	r5,r3
   27c98:	002c19c0 	call	2c19c <__muldf3>
   27c9c:	803ff91e 	bne	r16,zero,27c84 <_gp+0xfffe6138>
   27ca0:	dfc00117 	ldw	ra,4(sp)
   27ca4:	dc000017 	ldw	r16,0(sp)
   27ca8:	dec00204 	addi	sp,sp,8
   27cac:	f800283a 	ret
   27cb0:	202090fa 	slli	r16,r4,3
   27cb4:	008000f4 	movhi	r2,3
   27cb8:	109f5504 	addi	r2,r2,32084
   27cbc:	1421883a 	add	r16,r2,r16
   27cc0:	80800017 	ldw	r2,0(r16)
   27cc4:	80c00117 	ldw	r3,4(r16)
   27cc8:	dfc00117 	ldw	ra,4(sp)
   27ccc:	dc000017 	ldw	r16,0(sp)
   27cd0:	dec00204 	addi	sp,sp,8
   27cd4:	f800283a 	ret

00027cd8 <__copybits>:
   27cd8:	297fffc4 	addi	r5,r5,-1
   27cdc:	280fd17a 	srai	r7,r5,5
   27ce0:	30c00417 	ldw	r3,16(r6)
   27ce4:	30800504 	addi	r2,r6,20
   27ce8:	39c00044 	addi	r7,r7,1
   27cec:	18c7883a 	add	r3,r3,r3
   27cf0:	39cf883a 	add	r7,r7,r7
   27cf4:	18c7883a 	add	r3,r3,r3
   27cf8:	39cf883a 	add	r7,r7,r7
   27cfc:	10c7883a 	add	r3,r2,r3
   27d00:	21cf883a 	add	r7,r4,r7
   27d04:	10c00d2e 	bgeu	r2,r3,27d3c <__copybits+0x64>
   27d08:	200b883a 	mov	r5,r4
   27d0c:	12000017 	ldw	r8,0(r2)
   27d10:	29400104 	addi	r5,r5,4
   27d14:	10800104 	addi	r2,r2,4
   27d18:	2a3fff15 	stw	r8,-4(r5)
   27d1c:	10fffb36 	bltu	r2,r3,27d0c <_gp+0xfffe61c0>
   27d20:	1985c83a 	sub	r2,r3,r6
   27d24:	10bffac4 	addi	r2,r2,-21
   27d28:	1004d0ba 	srli	r2,r2,2
   27d2c:	10800044 	addi	r2,r2,1
   27d30:	1085883a 	add	r2,r2,r2
   27d34:	1085883a 	add	r2,r2,r2
   27d38:	2089883a 	add	r4,r4,r2
   27d3c:	21c0032e 	bgeu	r4,r7,27d4c <__copybits+0x74>
   27d40:	20000015 	stw	zero,0(r4)
   27d44:	21000104 	addi	r4,r4,4
   27d48:	21fffd36 	bltu	r4,r7,27d40 <_gp+0xfffe61f4>
   27d4c:	f800283a 	ret

00027d50 <__any_on>:
   27d50:	20c00417 	ldw	r3,16(r4)
   27d54:	2805d17a 	srai	r2,r5,5
   27d58:	21000504 	addi	r4,r4,20
   27d5c:	18800d0e 	bge	r3,r2,27d94 <__any_on+0x44>
   27d60:	18c7883a 	add	r3,r3,r3
   27d64:	18c7883a 	add	r3,r3,r3
   27d68:	20c7883a 	add	r3,r4,r3
   27d6c:	20c0192e 	bgeu	r4,r3,27dd4 <__any_on+0x84>
   27d70:	18bfff17 	ldw	r2,-4(r3)
   27d74:	18ffff04 	addi	r3,r3,-4
   27d78:	1000041e 	bne	r2,zero,27d8c <__any_on+0x3c>
   27d7c:	20c0142e 	bgeu	r4,r3,27dd0 <__any_on+0x80>
   27d80:	18ffff04 	addi	r3,r3,-4
   27d84:	19400017 	ldw	r5,0(r3)
   27d88:	283ffc26 	beq	r5,zero,27d7c <_gp+0xfffe6230>
   27d8c:	00800044 	movi	r2,1
   27d90:	f800283a 	ret
   27d94:	10c00a0e 	bge	r2,r3,27dc0 <__any_on+0x70>
   27d98:	1085883a 	add	r2,r2,r2
   27d9c:	1085883a 	add	r2,r2,r2
   27da0:	294007cc 	andi	r5,r5,31
   27da4:	2087883a 	add	r3,r4,r2
   27da8:	283ff026 	beq	r5,zero,27d6c <_gp+0xfffe6220>
   27dac:	19800017 	ldw	r6,0(r3)
   27db0:	3144d83a 	srl	r2,r6,r5
   27db4:	114a983a 	sll	r5,r2,r5
   27db8:	317ff41e 	bne	r6,r5,27d8c <_gp+0xfffe6240>
   27dbc:	003feb06 	br	27d6c <_gp+0xfffe6220>
   27dc0:	1085883a 	add	r2,r2,r2
   27dc4:	1085883a 	add	r2,r2,r2
   27dc8:	2087883a 	add	r3,r4,r2
   27dcc:	003fe706 	br	27d6c <_gp+0xfffe6220>
   27dd0:	f800283a 	ret
   27dd4:	0005883a 	mov	r2,zero
   27dd8:	f800283a 	ret

00027ddc <_putc_r>:
   27ddc:	defffc04 	addi	sp,sp,-16
   27de0:	dc000215 	stw	r16,8(sp)
   27de4:	dfc00315 	stw	ra,12(sp)
   27de8:	2021883a 	mov	r16,r4
   27dec:	20000226 	beq	r4,zero,27df8 <_putc_r+0x1c>
   27df0:	20800e17 	ldw	r2,56(r4)
   27df4:	10001b26 	beq	r2,zero,27e64 <_putc_r+0x88>
   27df8:	30800217 	ldw	r2,8(r6)
   27dfc:	10bfffc4 	addi	r2,r2,-1
   27e00:	30800215 	stw	r2,8(r6)
   27e04:	10000a16 	blt	r2,zero,27e30 <_putc_r+0x54>
   27e08:	30800017 	ldw	r2,0(r6)
   27e0c:	11400005 	stb	r5,0(r2)
   27e10:	30800017 	ldw	r2,0(r6)
   27e14:	10c00044 	addi	r3,r2,1
   27e18:	30c00015 	stw	r3,0(r6)
   27e1c:	10800003 	ldbu	r2,0(r2)
   27e20:	dfc00317 	ldw	ra,12(sp)
   27e24:	dc000217 	ldw	r16,8(sp)
   27e28:	dec00404 	addi	sp,sp,16
   27e2c:	f800283a 	ret
   27e30:	30c00617 	ldw	r3,24(r6)
   27e34:	10c00616 	blt	r2,r3,27e50 <_putc_r+0x74>
   27e38:	30800017 	ldw	r2,0(r6)
   27e3c:	00c00284 	movi	r3,10
   27e40:	11400005 	stb	r5,0(r2)
   27e44:	30800017 	ldw	r2,0(r6)
   27e48:	11400003 	ldbu	r5,0(r2)
   27e4c:	28fff11e 	bne	r5,r3,27e14 <_gp+0xfffe62c8>
   27e50:	8009883a 	mov	r4,r16
   27e54:	dfc00317 	ldw	ra,12(sp)
   27e58:	dc000217 	ldw	r16,8(sp)
   27e5c:	dec00404 	addi	sp,sp,16
   27e60:	00298181 	jmpi	29818 <__swbuf_r>
   27e64:	d9400015 	stw	r5,0(sp)
   27e68:	d9800115 	stw	r6,4(sp)
   27e6c:	0025cf80 	call	25cf8 <__sinit>
   27e70:	d9800117 	ldw	r6,4(sp)
   27e74:	d9400017 	ldw	r5,0(sp)
   27e78:	003fdf06 	br	27df8 <_gp+0xfffe62ac>

00027e7c <putc>:
   27e7c:	00800134 	movhi	r2,4
   27e80:	defffc04 	addi	sp,sp,-16
   27e84:	10a6d604 	addi	r2,r2,-25768
   27e88:	dc000115 	stw	r16,4(sp)
   27e8c:	14000017 	ldw	r16,0(r2)
   27e90:	dc400215 	stw	r17,8(sp)
   27e94:	dfc00315 	stw	ra,12(sp)
   27e98:	2023883a 	mov	r17,r4
   27e9c:	80000226 	beq	r16,zero,27ea8 <putc+0x2c>
   27ea0:	80800e17 	ldw	r2,56(r16)
   27ea4:	10001a26 	beq	r2,zero,27f10 <putc+0x94>
   27ea8:	28800217 	ldw	r2,8(r5)
   27eac:	10bfffc4 	addi	r2,r2,-1
   27eb0:	28800215 	stw	r2,8(r5)
   27eb4:	10000b16 	blt	r2,zero,27ee4 <putc+0x68>
   27eb8:	28800017 	ldw	r2,0(r5)
   27ebc:	14400005 	stb	r17,0(r2)
   27ec0:	28800017 	ldw	r2,0(r5)
   27ec4:	10c00044 	addi	r3,r2,1
   27ec8:	28c00015 	stw	r3,0(r5)
   27ecc:	10800003 	ldbu	r2,0(r2)
   27ed0:	dfc00317 	ldw	ra,12(sp)
   27ed4:	dc400217 	ldw	r17,8(sp)
   27ed8:	dc000117 	ldw	r16,4(sp)
   27edc:	dec00404 	addi	sp,sp,16
   27ee0:	f800283a 	ret
   27ee4:	28c00617 	ldw	r3,24(r5)
   27ee8:	10c00e16 	blt	r2,r3,27f24 <putc+0xa8>
   27eec:	28800017 	ldw	r2,0(r5)
   27ef0:	01000284 	movi	r4,10
   27ef4:	14400005 	stb	r17,0(r2)
   27ef8:	28800017 	ldw	r2,0(r5)
   27efc:	10c00003 	ldbu	r3,0(r2)
   27f00:	193ff01e 	bne	r3,r4,27ec4 <_gp+0xfffe6378>
   27f04:	280d883a 	mov	r6,r5
   27f08:	180b883a 	mov	r5,r3
   27f0c:	00000706 	br	27f2c <putc+0xb0>
   27f10:	8009883a 	mov	r4,r16
   27f14:	d9400015 	stw	r5,0(sp)
   27f18:	0025cf80 	call	25cf8 <__sinit>
   27f1c:	d9400017 	ldw	r5,0(sp)
   27f20:	003fe106 	br	27ea8 <_gp+0xfffe635c>
   27f24:	280d883a 	mov	r6,r5
   27f28:	880b883a 	mov	r5,r17
   27f2c:	8009883a 	mov	r4,r16
   27f30:	dfc00317 	ldw	ra,12(sp)
   27f34:	dc400217 	ldw	r17,8(sp)
   27f38:	dc000117 	ldw	r16,4(sp)
   27f3c:	dec00404 	addi	sp,sp,16
   27f40:	00298181 	jmpi	29818 <__swbuf_r>

00027f44 <__fpclassifyd>:
   27f44:	00a00034 	movhi	r2,32768
   27f48:	10bfffc4 	addi	r2,r2,-1
   27f4c:	2884703a 	and	r2,r5,r2
   27f50:	10000726 	beq	r2,zero,27f70 <__fpclassifyd+0x2c>
   27f54:	00fffc34 	movhi	r3,65520
   27f58:	019ff834 	movhi	r6,32736
   27f5c:	28c7883a 	add	r3,r5,r3
   27f60:	31bfffc4 	addi	r6,r6,-1
   27f64:	30c00536 	bltu	r6,r3,27f7c <__fpclassifyd+0x38>
   27f68:	00800104 	movi	r2,4
   27f6c:	f800283a 	ret
   27f70:	2000021e 	bne	r4,zero,27f7c <__fpclassifyd+0x38>
   27f74:	00800084 	movi	r2,2
   27f78:	f800283a 	ret
   27f7c:	00dffc34 	movhi	r3,32752
   27f80:	019ff834 	movhi	r6,32736
   27f84:	28cb883a 	add	r5,r5,r3
   27f88:	31bfffc4 	addi	r6,r6,-1
   27f8c:	317ff62e 	bgeu	r6,r5,27f68 <_gp+0xfffe641c>
   27f90:	01400434 	movhi	r5,16
   27f94:	297fffc4 	addi	r5,r5,-1
   27f98:	28800236 	bltu	r5,r2,27fa4 <__fpclassifyd+0x60>
   27f9c:	008000c4 	movi	r2,3
   27fa0:	f800283a 	ret
   27fa4:	10c00226 	beq	r2,r3,27fb0 <__fpclassifyd+0x6c>
   27fa8:	0005883a 	mov	r2,zero
   27fac:	f800283a 	ret
   27fb0:	2005003a 	cmpeq	r2,r4,zero
   27fb4:	f800283a 	ret

00027fb8 <__sread>:
   27fb8:	defffe04 	addi	sp,sp,-8
   27fbc:	dc000015 	stw	r16,0(sp)
   27fc0:	2821883a 	mov	r16,r5
   27fc4:	2940038f 	ldh	r5,14(r5)
   27fc8:	dfc00115 	stw	ra,4(sp)
   27fcc:	0029f040 	call	29f04 <_read_r>
   27fd0:	10000716 	blt	r2,zero,27ff0 <__sread+0x38>
   27fd4:	80c01417 	ldw	r3,80(r16)
   27fd8:	1887883a 	add	r3,r3,r2
   27fdc:	80c01415 	stw	r3,80(r16)
   27fe0:	dfc00117 	ldw	ra,4(sp)
   27fe4:	dc000017 	ldw	r16,0(sp)
   27fe8:	dec00204 	addi	sp,sp,8
   27fec:	f800283a 	ret
   27ff0:	80c0030b 	ldhu	r3,12(r16)
   27ff4:	18fbffcc 	andi	r3,r3,61439
   27ff8:	80c0030d 	sth	r3,12(r16)
   27ffc:	dfc00117 	ldw	ra,4(sp)
   28000:	dc000017 	ldw	r16,0(sp)
   28004:	dec00204 	addi	sp,sp,8
   28008:	f800283a 	ret

0002800c <__seofread>:
   2800c:	0005883a 	mov	r2,zero
   28010:	f800283a 	ret

00028014 <__swrite>:
   28014:	2880030b 	ldhu	r2,12(r5)
   28018:	defffb04 	addi	sp,sp,-20
   2801c:	dcc00315 	stw	r19,12(sp)
   28020:	dc800215 	stw	r18,8(sp)
   28024:	dc400115 	stw	r17,4(sp)
   28028:	dc000015 	stw	r16,0(sp)
   2802c:	dfc00415 	stw	ra,16(sp)
   28030:	10c0400c 	andi	r3,r2,256
   28034:	2821883a 	mov	r16,r5
   28038:	2023883a 	mov	r17,r4
   2803c:	3025883a 	mov	r18,r6
   28040:	3827883a 	mov	r19,r7
   28044:	18000526 	beq	r3,zero,2805c <__swrite+0x48>
   28048:	2940038f 	ldh	r5,14(r5)
   2804c:	01c00084 	movi	r7,2
   28050:	000d883a 	mov	r6,zero
   28054:	0029ea40 	call	29ea4 <_lseek_r>
   28058:	8080030b 	ldhu	r2,12(r16)
   2805c:	8140038f 	ldh	r5,14(r16)
   28060:	10bbffcc 	andi	r2,r2,61439
   28064:	980f883a 	mov	r7,r19
   28068:	900d883a 	mov	r6,r18
   2806c:	8809883a 	mov	r4,r17
   28070:	8080030d 	sth	r2,12(r16)
   28074:	dfc00417 	ldw	ra,16(sp)
   28078:	dcc00317 	ldw	r19,12(sp)
   2807c:	dc800217 	ldw	r18,8(sp)
   28080:	dc400117 	ldw	r17,4(sp)
   28084:	dc000017 	ldw	r16,0(sp)
   28088:	dec00504 	addi	sp,sp,20
   2808c:	00299701 	jmpi	29970 <_write_r>

00028090 <__sseek>:
   28090:	defffe04 	addi	sp,sp,-8
   28094:	dc000015 	stw	r16,0(sp)
   28098:	2821883a 	mov	r16,r5
   2809c:	2940038f 	ldh	r5,14(r5)
   280a0:	dfc00115 	stw	ra,4(sp)
   280a4:	0029ea40 	call	29ea4 <_lseek_r>
   280a8:	00ffffc4 	movi	r3,-1
   280ac:	10c00826 	beq	r2,r3,280d0 <__sseek+0x40>
   280b0:	80c0030b 	ldhu	r3,12(r16)
   280b4:	80801415 	stw	r2,80(r16)
   280b8:	18c40014 	ori	r3,r3,4096
   280bc:	80c0030d 	sth	r3,12(r16)
   280c0:	dfc00117 	ldw	ra,4(sp)
   280c4:	dc000017 	ldw	r16,0(sp)
   280c8:	dec00204 	addi	sp,sp,8
   280cc:	f800283a 	ret
   280d0:	80c0030b 	ldhu	r3,12(r16)
   280d4:	18fbffcc 	andi	r3,r3,61439
   280d8:	80c0030d 	sth	r3,12(r16)
   280dc:	dfc00117 	ldw	ra,4(sp)
   280e0:	dc000017 	ldw	r16,0(sp)
   280e4:	dec00204 	addi	sp,sp,8
   280e8:	f800283a 	ret

000280ec <__sclose>:
   280ec:	2940038f 	ldh	r5,14(r5)
   280f0:	00299d01 	jmpi	299d0 <_close_r>

000280f4 <strcmp>:
   280f4:	2144b03a 	or	r2,r4,r5
   280f8:	108000cc 	andi	r2,r2,3
   280fc:	1000171e 	bne	r2,zero,2815c <strcmp+0x68>
   28100:	20800017 	ldw	r2,0(r4)
   28104:	28c00017 	ldw	r3,0(r5)
   28108:	10c0141e 	bne	r2,r3,2815c <strcmp+0x68>
   2810c:	027fbff4 	movhi	r9,65279
   28110:	4a7fbfc4 	addi	r9,r9,-257
   28114:	0086303a 	nor	r3,zero,r2
   28118:	02202074 	movhi	r8,32897
   2811c:	1245883a 	add	r2,r2,r9
   28120:	42202004 	addi	r8,r8,-32640
   28124:	10c4703a 	and	r2,r2,r3
   28128:	1204703a 	and	r2,r2,r8
   2812c:	10000226 	beq	r2,zero,28138 <strcmp+0x44>
   28130:	00002306 	br	281c0 <strcmp+0xcc>
   28134:	1000221e 	bne	r2,zero,281c0 <strcmp+0xcc>
   28138:	21000104 	addi	r4,r4,4
   2813c:	20c00017 	ldw	r3,0(r4)
   28140:	29400104 	addi	r5,r5,4
   28144:	29800017 	ldw	r6,0(r5)
   28148:	1a4f883a 	add	r7,r3,r9
   2814c:	00c4303a 	nor	r2,zero,r3
   28150:	3884703a 	and	r2,r7,r2
   28154:	1204703a 	and	r2,r2,r8
   28158:	19bff626 	beq	r3,r6,28134 <_gp+0xfffe65e8>
   2815c:	20800003 	ldbu	r2,0(r4)
   28160:	10c03fcc 	andi	r3,r2,255
   28164:	18c0201c 	xori	r3,r3,128
   28168:	18ffe004 	addi	r3,r3,-128
   2816c:	18000c26 	beq	r3,zero,281a0 <strcmp+0xac>
   28170:	29800007 	ldb	r6,0(r5)
   28174:	19800326 	beq	r3,r6,28184 <strcmp+0x90>
   28178:	00001306 	br	281c8 <strcmp+0xd4>
   2817c:	29800007 	ldb	r6,0(r5)
   28180:	11800b1e 	bne	r2,r6,281b0 <strcmp+0xbc>
   28184:	21000044 	addi	r4,r4,1
   28188:	20c00003 	ldbu	r3,0(r4)
   2818c:	29400044 	addi	r5,r5,1
   28190:	18803fcc 	andi	r2,r3,255
   28194:	1080201c 	xori	r2,r2,128
   28198:	10bfe004 	addi	r2,r2,-128
   2819c:	103ff71e 	bne	r2,zero,2817c <_gp+0xfffe6630>
   281a0:	0007883a 	mov	r3,zero
   281a4:	28800003 	ldbu	r2,0(r5)
   281a8:	1885c83a 	sub	r2,r3,r2
   281ac:	f800283a 	ret
   281b0:	28800003 	ldbu	r2,0(r5)
   281b4:	18c03fcc 	andi	r3,r3,255
   281b8:	1885c83a 	sub	r2,r3,r2
   281bc:	f800283a 	ret
   281c0:	0005883a 	mov	r2,zero
   281c4:	f800283a 	ret
   281c8:	10c03fcc 	andi	r3,r2,255
   281cc:	003ff506 	br	281a4 <_gp+0xfffe6658>

000281d0 <__sprint_r.part.0>:
   281d0:	28801917 	ldw	r2,100(r5)
   281d4:	defff604 	addi	sp,sp,-40
   281d8:	dd400515 	stw	r21,20(sp)
   281dc:	dfc00915 	stw	ra,36(sp)
   281e0:	df000815 	stw	fp,32(sp)
   281e4:	ddc00715 	stw	r23,28(sp)
   281e8:	dd800615 	stw	r22,24(sp)
   281ec:	dd000415 	stw	r20,16(sp)
   281f0:	dcc00315 	stw	r19,12(sp)
   281f4:	dc800215 	stw	r18,8(sp)
   281f8:	dc400115 	stw	r17,4(sp)
   281fc:	dc000015 	stw	r16,0(sp)
   28200:	1088000c 	andi	r2,r2,8192
   28204:	302b883a 	mov	r21,r6
   28208:	10002e26 	beq	r2,zero,282c4 <__sprint_r.part.0+0xf4>
   2820c:	30800217 	ldw	r2,8(r6)
   28210:	35800017 	ldw	r22,0(r6)
   28214:	10002926 	beq	r2,zero,282bc <__sprint_r.part.0+0xec>
   28218:	2827883a 	mov	r19,r5
   2821c:	2029883a 	mov	r20,r4
   28220:	b5c00104 	addi	r23,r22,4
   28224:	04bfffc4 	movi	r18,-1
   28228:	bc400017 	ldw	r17,0(r23)
   2822c:	b4000017 	ldw	r16,0(r22)
   28230:	0039883a 	mov	fp,zero
   28234:	8822d0ba 	srli	r17,r17,2
   28238:	8800031e 	bne	r17,zero,28248 <__sprint_r.part.0+0x78>
   2823c:	00001806 	br	282a0 <__sprint_r.part.0+0xd0>
   28240:	84000104 	addi	r16,r16,4
   28244:	8f001526 	beq	r17,fp,2829c <__sprint_r.part.0+0xcc>
   28248:	81400017 	ldw	r5,0(r16)
   2824c:	980d883a 	mov	r6,r19
   28250:	a009883a 	mov	r4,r20
   28254:	0029d500 	call	29d50 <_fputwc_r>
   28258:	e7000044 	addi	fp,fp,1
   2825c:	14bff81e 	bne	r2,r18,28240 <_gp+0xfffe66f4>
   28260:	9005883a 	mov	r2,r18
   28264:	a8000215 	stw	zero,8(r21)
   28268:	a8000115 	stw	zero,4(r21)
   2826c:	dfc00917 	ldw	ra,36(sp)
   28270:	df000817 	ldw	fp,32(sp)
   28274:	ddc00717 	ldw	r23,28(sp)
   28278:	dd800617 	ldw	r22,24(sp)
   2827c:	dd400517 	ldw	r21,20(sp)
   28280:	dd000417 	ldw	r20,16(sp)
   28284:	dcc00317 	ldw	r19,12(sp)
   28288:	dc800217 	ldw	r18,8(sp)
   2828c:	dc400117 	ldw	r17,4(sp)
   28290:	dc000017 	ldw	r16,0(sp)
   28294:	dec00a04 	addi	sp,sp,40
   28298:	f800283a 	ret
   2829c:	a8800217 	ldw	r2,8(r21)
   282a0:	8c63883a 	add	r17,r17,r17
   282a4:	8c63883a 	add	r17,r17,r17
   282a8:	1445c83a 	sub	r2,r2,r17
   282ac:	a8800215 	stw	r2,8(r21)
   282b0:	b5800204 	addi	r22,r22,8
   282b4:	bdc00204 	addi	r23,r23,8
   282b8:	103fdb1e 	bne	r2,zero,28228 <_gp+0xfffe66dc>
   282bc:	0005883a 	mov	r2,zero
   282c0:	003fe806 	br	28264 <_gp+0xfffe6718>
   282c4:	002617c0 	call	2617c <__sfvwrite_r>
   282c8:	003fe606 	br	28264 <_gp+0xfffe6718>

000282cc <__sprint_r>:
   282cc:	30c00217 	ldw	r3,8(r6)
   282d0:	18000126 	beq	r3,zero,282d8 <__sprint_r+0xc>
   282d4:	00281d01 	jmpi	281d0 <__sprint_r.part.0>
   282d8:	30000115 	stw	zero,4(r6)
   282dc:	0005883a 	mov	r2,zero
   282e0:	f800283a 	ret

000282e4 <___vfiprintf_internal_r>:
   282e4:	deffc904 	addi	sp,sp,-220
   282e8:	df003515 	stw	fp,212(sp)
   282ec:	dd003115 	stw	r20,196(sp)
   282f0:	dfc03615 	stw	ra,216(sp)
   282f4:	ddc03415 	stw	r23,208(sp)
   282f8:	dd803315 	stw	r22,204(sp)
   282fc:	dd403215 	stw	r21,200(sp)
   28300:	dcc03015 	stw	r19,192(sp)
   28304:	dc802f15 	stw	r18,188(sp)
   28308:	dc402e15 	stw	r17,184(sp)
   2830c:	dc002d15 	stw	r16,180(sp)
   28310:	d9002015 	stw	r4,128(sp)
   28314:	d9c02215 	stw	r7,136(sp)
   28318:	2829883a 	mov	r20,r5
   2831c:	3039883a 	mov	fp,r6
   28320:	20000226 	beq	r4,zero,2832c <___vfiprintf_internal_r+0x48>
   28324:	20800e17 	ldw	r2,56(r4)
   28328:	1000cf26 	beq	r2,zero,28668 <___vfiprintf_internal_r+0x384>
   2832c:	a080030b 	ldhu	r2,12(r20)
   28330:	10c8000c 	andi	r3,r2,8192
   28334:	1800061e 	bne	r3,zero,28350 <___vfiprintf_internal_r+0x6c>
   28338:	a1001917 	ldw	r4,100(r20)
   2833c:	00f7ffc4 	movi	r3,-8193
   28340:	10880014 	ori	r2,r2,8192
   28344:	20c6703a 	and	r3,r4,r3
   28348:	a080030d 	sth	r2,12(r20)
   2834c:	a0c01915 	stw	r3,100(r20)
   28350:	10c0020c 	andi	r3,r2,8
   28354:	1800a926 	beq	r3,zero,285fc <___vfiprintf_internal_r+0x318>
   28358:	a0c00417 	ldw	r3,16(r20)
   2835c:	1800a726 	beq	r3,zero,285fc <___vfiprintf_internal_r+0x318>
   28360:	1080068c 	andi	r2,r2,26
   28364:	00c00284 	movi	r3,10
   28368:	10c0ac26 	beq	r2,r3,2861c <___vfiprintf_internal_r+0x338>
   2836c:	da801a04 	addi	r10,sp,104
   28370:	da801e15 	stw	r10,120(sp)
   28374:	d8801e17 	ldw	r2,120(sp)
   28378:	da8019c4 	addi	r10,sp,103
   2837c:	058000f4 	movhi	r22,3
   28380:	05c000f4 	movhi	r23,3
   28384:	da801f15 	stw	r10,124(sp)
   28388:	1295c83a 	sub	r10,r2,r10
   2838c:	b59f8b04 	addi	r22,r22,32300
   28390:	bddf8704 	addi	r23,r23,32284
   28394:	dec01a15 	stw	sp,104(sp)
   28398:	d8001c15 	stw	zero,112(sp)
   2839c:	d8001b15 	stw	zero,108(sp)
   283a0:	d8002615 	stw	zero,152(sp)
   283a4:	d8002315 	stw	zero,140(sp)
   283a8:	da802715 	stw	r10,156(sp)
   283ac:	d811883a 	mov	r8,sp
   283b0:	dd002115 	stw	r20,132(sp)
   283b4:	e021883a 	mov	r16,fp
   283b8:	80800007 	ldb	r2,0(r16)
   283bc:	1003ea26 	beq	r2,zero,29368 <___vfiprintf_internal_r+0x1084>
   283c0:	00c00944 	movi	r3,37
   283c4:	8025883a 	mov	r18,r16
   283c8:	10c0021e 	bne	r2,r3,283d4 <___vfiprintf_internal_r+0xf0>
   283cc:	00001606 	br	28428 <___vfiprintf_internal_r+0x144>
   283d0:	10c00326 	beq	r2,r3,283e0 <___vfiprintf_internal_r+0xfc>
   283d4:	94800044 	addi	r18,r18,1
   283d8:	90800007 	ldb	r2,0(r18)
   283dc:	103ffc1e 	bne	r2,zero,283d0 <_gp+0xfffe6884>
   283e0:	9423c83a 	sub	r17,r18,r16
   283e4:	88001026 	beq	r17,zero,28428 <___vfiprintf_internal_r+0x144>
   283e8:	d8c01c17 	ldw	r3,112(sp)
   283ec:	d8801b17 	ldw	r2,108(sp)
   283f0:	44000015 	stw	r16,0(r8)
   283f4:	88c7883a 	add	r3,r17,r3
   283f8:	10800044 	addi	r2,r2,1
   283fc:	44400115 	stw	r17,4(r8)
   28400:	d8c01c15 	stw	r3,112(sp)
   28404:	d8801b15 	stw	r2,108(sp)
   28408:	010001c4 	movi	r4,7
   2840c:	2080760e 	bge	r4,r2,285e8 <___vfiprintf_internal_r+0x304>
   28410:	1803821e 	bne	r3,zero,2921c <___vfiprintf_internal_r+0xf38>
   28414:	da802317 	ldw	r10,140(sp)
   28418:	d8001b15 	stw	zero,108(sp)
   2841c:	d811883a 	mov	r8,sp
   28420:	5455883a 	add	r10,r10,r17
   28424:	da802315 	stw	r10,140(sp)
   28428:	90800007 	ldb	r2,0(r18)
   2842c:	10044626 	beq	r2,zero,29548 <___vfiprintf_internal_r+0x1264>
   28430:	90c00047 	ldb	r3,1(r18)
   28434:	94000044 	addi	r16,r18,1
   28438:	d8001d85 	stb	zero,118(sp)
   2843c:	0009883a 	mov	r4,zero
   28440:	000f883a 	mov	r7,zero
   28444:	027fffc4 	movi	r9,-1
   28448:	0023883a 	mov	r17,zero
   2844c:	0029883a 	mov	r20,zero
   28450:	01401604 	movi	r5,88
   28454:	01800244 	movi	r6,9
   28458:	03400a84 	movi	r13,42
   2845c:	03001b04 	movi	r12,108
   28460:	84000044 	addi	r16,r16,1
   28464:	18bff804 	addi	r2,r3,-32
   28468:	28827336 	bltu	r5,r2,28e38 <___vfiprintf_internal_r+0xb54>
   2846c:	100490ba 	slli	r2,r2,2
   28470:	028000f4 	movhi	r10,3
   28474:	52a12104 	addi	r10,r10,-31612
   28478:	1285883a 	add	r2,r2,r10
   2847c:	10800017 	ldw	r2,0(r2)
   28480:	1000683a 	jmp	r2
   28484:	00028b6c 	andhi	zero,zero,2605
   28488:	00028e38 	rdprs	zero,zero,2616
   2848c:	00028e38 	rdprs	zero,zero,2616
   28490:	00028b8c 	andi	zero,zero,2606
   28494:	00028e38 	rdprs	zero,zero,2616
   28498:	00028e38 	rdprs	zero,zero,2616
   2849c:	00028e38 	rdprs	zero,zero,2616
   284a0:	00028e38 	rdprs	zero,zero,2616
   284a4:	00028e38 	rdprs	zero,zero,2616
   284a8:	00028e38 	rdprs	zero,zero,2616
   284ac:	00028d74 	movhi	zero,2613
   284b0:	00028d90 	cmplti	zero,zero,2614
   284b4:	00028e38 	rdprs	zero,zero,2616
   284b8:	00028678 	rdprs	zero,zero,2585
   284bc:	00028da0 	cmpeqi	zero,zero,2614
   284c0:	00028e38 	rdprs	zero,zero,2616
   284c4:	00028b98 	cmpnei	zero,zero,2606
   284c8:	00028ba4 	muli	zero,zero,2606
   284cc:	00028ba4 	muli	zero,zero,2606
   284d0:	00028ba4 	muli	zero,zero,2606
   284d4:	00028ba4 	muli	zero,zero,2606
   284d8:	00028ba4 	muli	zero,zero,2606
   284dc:	00028ba4 	muli	zero,zero,2606
   284e0:	00028ba4 	muli	zero,zero,2606
   284e4:	00028ba4 	muli	zero,zero,2606
   284e8:	00028ba4 	muli	zero,zero,2606
   284ec:	00028e38 	rdprs	zero,zero,2616
   284f0:	00028e38 	rdprs	zero,zero,2616
   284f4:	00028e38 	rdprs	zero,zero,2616
   284f8:	00028e38 	rdprs	zero,zero,2616
   284fc:	00028e38 	rdprs	zero,zero,2616
   28500:	00028e38 	rdprs	zero,zero,2616
   28504:	00028e38 	rdprs	zero,zero,2616
   28508:	00028e38 	rdprs	zero,zero,2616
   2850c:	00028e38 	rdprs	zero,zero,2616
   28510:	00028e38 	rdprs	zero,zero,2616
   28514:	00028bd0 	cmplti	zero,zero,2607
   28518:	00028e38 	rdprs	zero,zero,2616
   2851c:	00028e38 	rdprs	zero,zero,2616
   28520:	00028e38 	rdprs	zero,zero,2616
   28524:	00028e38 	rdprs	zero,zero,2616
   28528:	00028e38 	rdprs	zero,zero,2616
   2852c:	00028e38 	rdprs	zero,zero,2616
   28530:	00028e38 	rdprs	zero,zero,2616
   28534:	00028e38 	rdprs	zero,zero,2616
   28538:	00028e38 	rdprs	zero,zero,2616
   2853c:	00028e38 	rdprs	zero,zero,2616
   28540:	00028c08 	cmpgei	zero,zero,2608
   28544:	00028e38 	rdprs	zero,zero,2616
   28548:	00028e38 	rdprs	zero,zero,2616
   2854c:	00028e38 	rdprs	zero,zero,2616
   28550:	00028e38 	rdprs	zero,zero,2616
   28554:	00028e38 	rdprs	zero,zero,2616
   28558:	00028c60 	cmpeqi	zero,zero,2609
   2855c:	00028e38 	rdprs	zero,zero,2616
   28560:	00028e38 	rdprs	zero,zero,2616
   28564:	00028cd0 	cmplti	zero,zero,2611
   28568:	00028e38 	rdprs	zero,zero,2616
   2856c:	00028e38 	rdprs	zero,zero,2616
   28570:	00028e38 	rdprs	zero,zero,2616
   28574:	00028e38 	rdprs	zero,zero,2616
   28578:	00028e38 	rdprs	zero,zero,2616
   2857c:	00028e38 	rdprs	zero,zero,2616
   28580:	00028e38 	rdprs	zero,zero,2616
   28584:	00028e38 	rdprs	zero,zero,2616
   28588:	00028e38 	rdprs	zero,zero,2616
   2858c:	00028e38 	rdprs	zero,zero,2616
   28590:	00028a7c 	xorhi	zero,zero,2601
   28594:	00028aa8 	cmpgeui	zero,zero,2602
   28598:	00028e38 	rdprs	zero,zero,2616
   2859c:	00028e38 	rdprs	zero,zero,2616
   285a0:	00028e38 	rdprs	zero,zero,2616
   285a4:	00028de0 	cmpeqi	zero,zero,2615
   285a8:	00028aa8 	cmpgeui	zero,zero,2602
   285ac:	00028e38 	rdprs	zero,zero,2616
   285b0:	00028e38 	rdprs	zero,zero,2616
   285b4:	0002893c 	xorhi	zero,zero,2596
   285b8:	00028e38 	rdprs	zero,zero,2616
   285bc:	0002894c 	andi	zero,zero,2597
   285c0:	00028988 	cmpgei	zero,zero,2598
   285c4:	00028684 	movi	zero,2586
   285c8:	00028930 	cmpltui	zero,zero,2596
   285cc:	00028e38 	rdprs	zero,zero,2616
   285d0:	00028d0c 	andi	zero,zero,2612
   285d4:	00028e38 	rdprs	zero,zero,2616
   285d8:	00028d64 	muli	zero,zero,2613
   285dc:	00028e38 	rdprs	zero,zero,2616
   285e0:	00028e38 	rdprs	zero,zero,2616
   285e4:	00028a28 	cmpgeui	zero,zero,2600
   285e8:	42000204 	addi	r8,r8,8
   285ec:	da802317 	ldw	r10,140(sp)
   285f0:	5455883a 	add	r10,r10,r17
   285f4:	da802315 	stw	r10,140(sp)
   285f8:	003f8b06 	br	28428 <_gp+0xfffe68dc>
   285fc:	d9002017 	ldw	r4,128(sp)
   28600:	a00b883a 	mov	r5,r20
   28604:	0023d240 	call	23d24 <__swsetup_r>
   28608:	1003b11e 	bne	r2,zero,294d0 <___vfiprintf_internal_r+0x11ec>
   2860c:	a080030b 	ldhu	r2,12(r20)
   28610:	00c00284 	movi	r3,10
   28614:	1080068c 	andi	r2,r2,26
   28618:	10ff541e 	bne	r2,r3,2836c <_gp+0xfffe6820>
   2861c:	a080038f 	ldh	r2,14(r20)
   28620:	103f5216 	blt	r2,zero,2836c <_gp+0xfffe6820>
   28624:	d9c02217 	ldw	r7,136(sp)
   28628:	d9002017 	ldw	r4,128(sp)
   2862c:	e00d883a 	mov	r6,fp
   28630:	a00b883a 	mov	r5,r20
   28634:	002975c0 	call	2975c <__sbprintf>
   28638:	dfc03617 	ldw	ra,216(sp)
   2863c:	df003517 	ldw	fp,212(sp)
   28640:	ddc03417 	ldw	r23,208(sp)
   28644:	dd803317 	ldw	r22,204(sp)
   28648:	dd403217 	ldw	r21,200(sp)
   2864c:	dd003117 	ldw	r20,196(sp)
   28650:	dcc03017 	ldw	r19,192(sp)
   28654:	dc802f17 	ldw	r18,188(sp)
   28658:	dc402e17 	ldw	r17,184(sp)
   2865c:	dc002d17 	ldw	r16,180(sp)
   28660:	dec03704 	addi	sp,sp,220
   28664:	f800283a 	ret
   28668:	0025cf80 	call	25cf8 <__sinit>
   2866c:	003f2f06 	br	2832c <_gp+0xfffe67e0>
   28670:	0463c83a 	sub	r17,zero,r17
   28674:	d8802215 	stw	r2,136(sp)
   28678:	a5000114 	ori	r20,r20,4
   2867c:	80c00007 	ldb	r3,0(r16)
   28680:	003f7706 	br	28460 <_gp+0xfffe6914>
   28684:	00800c04 	movi	r2,48
   28688:	da802217 	ldw	r10,136(sp)
   2868c:	d8801d05 	stb	r2,116(sp)
   28690:	00801e04 	movi	r2,120
   28694:	d8801d45 	stb	r2,117(sp)
   28698:	d8001d85 	stb	zero,118(sp)
   2869c:	50c00104 	addi	r3,r10,4
   286a0:	54800017 	ldw	r18,0(r10)
   286a4:	0027883a 	mov	r19,zero
   286a8:	a0800094 	ori	r2,r20,2
   286ac:	48030b16 	blt	r9,zero,292dc <___vfiprintf_internal_r+0xff8>
   286b0:	00bfdfc4 	movi	r2,-129
   286b4:	a096703a 	and	r11,r20,r2
   286b8:	d8c02215 	stw	r3,136(sp)
   286bc:	5d000094 	ori	r20,r11,2
   286c0:	90032b1e 	bne	r18,zero,29370 <___vfiprintf_internal_r+0x108c>
   286c4:	008000f4 	movhi	r2,3
   286c8:	109f2604 	addi	r2,r2,31896
   286cc:	d8802615 	stw	r2,152(sp)
   286d0:	0039883a 	mov	fp,zero
   286d4:	48017b1e 	bne	r9,zero,28cc4 <___vfiprintf_internal_r+0x9e0>
   286d8:	0013883a 	mov	r9,zero
   286dc:	0027883a 	mov	r19,zero
   286e0:	dd401a04 	addi	r21,sp,104
   286e4:	4825883a 	mov	r18,r9
   286e8:	4cc0010e 	bge	r9,r19,286f0 <___vfiprintf_internal_r+0x40c>
   286ec:	9825883a 	mov	r18,r19
   286f0:	e7003fcc 	andi	fp,fp,255
   286f4:	e700201c 	xori	fp,fp,128
   286f8:	e73fe004 	addi	fp,fp,-128
   286fc:	e0000126 	beq	fp,zero,28704 <___vfiprintf_internal_r+0x420>
   28700:	94800044 	addi	r18,r18,1
   28704:	a380008c 	andi	r14,r20,2
   28708:	70000126 	beq	r14,zero,28710 <___vfiprintf_internal_r+0x42c>
   2870c:	94800084 	addi	r18,r18,2
   28710:	a700210c 	andi	fp,r20,132
   28714:	e001df1e 	bne	fp,zero,28e94 <___vfiprintf_internal_r+0xbb0>
   28718:	8c87c83a 	sub	r3,r17,r18
   2871c:	00c1dd0e 	bge	zero,r3,28e94 <___vfiprintf_internal_r+0xbb0>
   28720:	01c00404 	movi	r7,16
   28724:	d8801c17 	ldw	r2,112(sp)
   28728:	38c3ad0e 	bge	r7,r3,295e0 <___vfiprintf_internal_r+0x12fc>
   2872c:	028000f4 	movhi	r10,3
   28730:	529f8b04 	addi	r10,r10,32300
   28734:	dc002915 	stw	r16,164(sp)
   28738:	d9801b17 	ldw	r6,108(sp)
   2873c:	da802415 	stw	r10,144(sp)
   28740:	03c001c4 	movi	r15,7
   28744:	da402515 	stw	r9,148(sp)
   28748:	db802815 	stw	r14,160(sp)
   2874c:	1821883a 	mov	r16,r3
   28750:	00000506 	br	28768 <___vfiprintf_internal_r+0x484>
   28754:	31400084 	addi	r5,r6,2
   28758:	42000204 	addi	r8,r8,8
   2875c:	200d883a 	mov	r6,r4
   28760:	843ffc04 	addi	r16,r16,-16
   28764:	3c000d0e 	bge	r7,r16,2879c <___vfiprintf_internal_r+0x4b8>
   28768:	10800404 	addi	r2,r2,16
   2876c:	31000044 	addi	r4,r6,1
   28770:	45800015 	stw	r22,0(r8)
   28774:	41c00115 	stw	r7,4(r8)
   28778:	d8801c15 	stw	r2,112(sp)
   2877c:	d9001b15 	stw	r4,108(sp)
   28780:	793ff40e 	bge	r15,r4,28754 <_gp+0xfffe6c08>
   28784:	1001b51e 	bne	r2,zero,28e5c <___vfiprintf_internal_r+0xb78>
   28788:	843ffc04 	addi	r16,r16,-16
   2878c:	000d883a 	mov	r6,zero
   28790:	01400044 	movi	r5,1
   28794:	d811883a 	mov	r8,sp
   28798:	3c3ff316 	blt	r7,r16,28768 <_gp+0xfffe6c1c>
   2879c:	8007883a 	mov	r3,r16
   287a0:	da402517 	ldw	r9,148(sp)
   287a4:	db802817 	ldw	r14,160(sp)
   287a8:	dc002917 	ldw	r16,164(sp)
   287ac:	da802417 	ldw	r10,144(sp)
   287b0:	1885883a 	add	r2,r3,r2
   287b4:	40c00115 	stw	r3,4(r8)
   287b8:	42800015 	stw	r10,0(r8)
   287bc:	d8801c15 	stw	r2,112(sp)
   287c0:	d9401b15 	stw	r5,108(sp)
   287c4:	00c001c4 	movi	r3,7
   287c8:	19426016 	blt	r3,r5,2914c <___vfiprintf_internal_r+0xe68>
   287cc:	d8c01d87 	ldb	r3,118(sp)
   287d0:	42000204 	addi	r8,r8,8
   287d4:	29000044 	addi	r4,r5,1
   287d8:	1801b31e 	bne	r3,zero,28ea8 <___vfiprintf_internal_r+0xbc4>
   287dc:	7001c026 	beq	r14,zero,28ee0 <___vfiprintf_internal_r+0xbfc>
   287e0:	d8c01d04 	addi	r3,sp,116
   287e4:	10800084 	addi	r2,r2,2
   287e8:	40c00015 	stw	r3,0(r8)
   287ec:	00c00084 	movi	r3,2
   287f0:	40c00115 	stw	r3,4(r8)
   287f4:	d8801c15 	stw	r2,112(sp)
   287f8:	d9001b15 	stw	r4,108(sp)
   287fc:	00c001c4 	movi	r3,7
   28800:	1902650e 	bge	r3,r4,29198 <___vfiprintf_internal_r+0xeb4>
   28804:	10029a1e 	bne	r2,zero,29270 <___vfiprintf_internal_r+0xf8c>
   28808:	00c02004 	movi	r3,128
   2880c:	01000044 	movi	r4,1
   28810:	000b883a 	mov	r5,zero
   28814:	d811883a 	mov	r8,sp
   28818:	e0c1b31e 	bne	fp,r3,28ee8 <___vfiprintf_internal_r+0xc04>
   2881c:	8cb9c83a 	sub	fp,r17,r18
   28820:	0701b10e 	bge	zero,fp,28ee8 <___vfiprintf_internal_r+0xc04>
   28824:	01c00404 	movi	r7,16
   28828:	3f03890e 	bge	r7,fp,29650 <___vfiprintf_internal_r+0x136c>
   2882c:	00c000f4 	movhi	r3,3
   28830:	18df8704 	addi	r3,r3,32284
   28834:	d8c02415 	stw	r3,144(sp)
   28838:	8007883a 	mov	r3,r16
   2883c:	034001c4 	movi	r13,7
   28840:	e021883a 	mov	r16,fp
   28844:	da402515 	stw	r9,148(sp)
   28848:	1839883a 	mov	fp,r3
   2884c:	00000506 	br	28864 <___vfiprintf_internal_r+0x580>
   28850:	29800084 	addi	r6,r5,2
   28854:	42000204 	addi	r8,r8,8
   28858:	180b883a 	mov	r5,r3
   2885c:	843ffc04 	addi	r16,r16,-16
   28860:	3c000d0e 	bge	r7,r16,28898 <___vfiprintf_internal_r+0x5b4>
   28864:	10800404 	addi	r2,r2,16
   28868:	28c00044 	addi	r3,r5,1
   2886c:	45c00015 	stw	r23,0(r8)
   28870:	41c00115 	stw	r7,4(r8)
   28874:	d8801c15 	stw	r2,112(sp)
   28878:	d8c01b15 	stw	r3,108(sp)
   2887c:	68fff40e 	bge	r13,r3,28850 <_gp+0xfffe6d04>
   28880:	1002241e 	bne	r2,zero,29114 <___vfiprintf_internal_r+0xe30>
   28884:	843ffc04 	addi	r16,r16,-16
   28888:	01800044 	movi	r6,1
   2888c:	000b883a 	mov	r5,zero
   28890:	d811883a 	mov	r8,sp
   28894:	3c3ff316 	blt	r7,r16,28864 <_gp+0xfffe6d18>
   28898:	da402517 	ldw	r9,148(sp)
   2889c:	e007883a 	mov	r3,fp
   288a0:	8039883a 	mov	fp,r16
   288a4:	1821883a 	mov	r16,r3
   288a8:	d8c02417 	ldw	r3,144(sp)
   288ac:	1705883a 	add	r2,r2,fp
   288b0:	47000115 	stw	fp,4(r8)
   288b4:	40c00015 	stw	r3,0(r8)
   288b8:	d8801c15 	stw	r2,112(sp)
   288bc:	d9801b15 	stw	r6,108(sp)
   288c0:	00c001c4 	movi	r3,7
   288c4:	19827616 	blt	r3,r6,292a0 <___vfiprintf_internal_r+0xfbc>
   288c8:	4cf9c83a 	sub	fp,r9,r19
   288cc:	42000204 	addi	r8,r8,8
   288d0:	31000044 	addi	r4,r6,1
   288d4:	300b883a 	mov	r5,r6
   288d8:	07018516 	blt	zero,fp,28ef0 <___vfiprintf_internal_r+0xc0c>
   288dc:	9885883a 	add	r2,r19,r2
   288e0:	45400015 	stw	r21,0(r8)
   288e4:	44c00115 	stw	r19,4(r8)
   288e8:	d8801c15 	stw	r2,112(sp)
   288ec:	d9001b15 	stw	r4,108(sp)
   288f0:	00c001c4 	movi	r3,7
   288f4:	1901dd0e 	bge	r3,r4,2906c <___vfiprintf_internal_r+0xd88>
   288f8:	1002401e 	bne	r2,zero,291fc <___vfiprintf_internal_r+0xf18>
   288fc:	d8001b15 	stw	zero,108(sp)
   28900:	a2c0010c 	andi	r11,r20,4
   28904:	58000226 	beq	r11,zero,28910 <___vfiprintf_internal_r+0x62c>
   28908:	8ca7c83a 	sub	r19,r17,r18
   2890c:	04c2f216 	blt	zero,r19,294d8 <___vfiprintf_internal_r+0x11f4>
   28910:	8c80010e 	bge	r17,r18,28918 <___vfiprintf_internal_r+0x634>
   28914:	9023883a 	mov	r17,r18
   28918:	da802317 	ldw	r10,140(sp)
   2891c:	5455883a 	add	r10,r10,r17
   28920:	da802315 	stw	r10,140(sp)
   28924:	d8001b15 	stw	zero,108(sp)
   28928:	d811883a 	mov	r8,sp
   2892c:	003ea206 	br	283b8 <_gp+0xfffe686c>
   28930:	a5000814 	ori	r20,r20,32
   28934:	80c00007 	ldb	r3,0(r16)
   28938:	003ec906 	br	28460 <_gp+0xfffe6914>
   2893c:	80c00007 	ldb	r3,0(r16)
   28940:	1b030926 	beq	r3,r12,29568 <___vfiprintf_internal_r+0x1284>
   28944:	a5000414 	ori	r20,r20,16
   28948:	003ec506 	br	28460 <_gp+0xfffe6914>
   2894c:	21003fcc 	andi	r4,r4,255
   28950:	20035e1e 	bne	r4,zero,296cc <___vfiprintf_internal_r+0x13e8>
   28954:	a080080c 	andi	r2,r20,32
   28958:	1002a526 	beq	r2,zero,293f0 <___vfiprintf_internal_r+0x110c>
   2895c:	da802217 	ldw	r10,136(sp)
   28960:	50800017 	ldw	r2,0(r10)
   28964:	da802317 	ldw	r10,140(sp)
   28968:	5007d7fa 	srai	r3,r10,31
   2896c:	da802217 	ldw	r10,136(sp)
   28970:	10c00115 	stw	r3,4(r2)
   28974:	52800104 	addi	r10,r10,4
   28978:	da802215 	stw	r10,136(sp)
   2897c:	da802317 	ldw	r10,140(sp)
   28980:	12800015 	stw	r10,0(r2)
   28984:	003e8c06 	br	283b8 <_gp+0xfffe686c>
   28988:	21003fcc 	andi	r4,r4,255
   2898c:	2003511e 	bne	r4,zero,296d4 <___vfiprintf_internal_r+0x13f0>
   28990:	a080080c 	andi	r2,r20,32
   28994:	1000a126 	beq	r2,zero,28c1c <___vfiprintf_internal_r+0x938>
   28998:	da802217 	ldw	r10,136(sp)
   2899c:	d8001d85 	stb	zero,118(sp)
   289a0:	50800204 	addi	r2,r10,8
   289a4:	54800017 	ldw	r18,0(r10)
   289a8:	54c00117 	ldw	r19,4(r10)
   289ac:	4802b416 	blt	r9,zero,29480 <___vfiprintf_internal_r+0x119c>
   289b0:	013fdfc4 	movi	r4,-129
   289b4:	94c6b03a 	or	r3,r18,r19
   289b8:	d8802215 	stw	r2,136(sp)
   289bc:	a128703a 	and	r20,r20,r4
   289c0:	1800a226 	beq	r3,zero,28c4c <___vfiprintf_internal_r+0x968>
   289c4:	0039883a 	mov	fp,zero
   289c8:	dd401a04 	addi	r21,sp,104
   289cc:	9006d0fa 	srli	r3,r18,3
   289d0:	9808977a 	slli	r4,r19,29
   289d4:	9826d0fa 	srli	r19,r19,3
   289d8:	948001cc 	andi	r18,r18,7
   289dc:	90800c04 	addi	r2,r18,48
   289e0:	ad7fffc4 	addi	r21,r21,-1
   289e4:	20e4b03a 	or	r18,r4,r3
   289e8:	a8800005 	stb	r2,0(r21)
   289ec:	94c6b03a 	or	r3,r18,r19
   289f0:	183ff61e 	bne	r3,zero,289cc <_gp+0xfffe6e80>
   289f4:	a0c0004c 	andi	r3,r20,1
   289f8:	18005926 	beq	r3,zero,28b60 <___vfiprintf_internal_r+0x87c>
   289fc:	10803fcc 	andi	r2,r2,255
   28a00:	1080201c 	xori	r2,r2,128
   28a04:	10bfe004 	addi	r2,r2,-128
   28a08:	00c00c04 	movi	r3,48
   28a0c:	10c05426 	beq	r2,r3,28b60 <___vfiprintf_internal_r+0x87c>
   28a10:	da801e17 	ldw	r10,120(sp)
   28a14:	a8bfffc4 	addi	r2,r21,-1
   28a18:	a8ffffc5 	stb	r3,-1(r21)
   28a1c:	50a7c83a 	sub	r19,r10,r2
   28a20:	102b883a 	mov	r21,r2
   28a24:	003f2f06 	br	286e4 <_gp+0xfffe6b98>
   28a28:	21003fcc 	andi	r4,r4,255
   28a2c:	2003421e 	bne	r4,zero,29738 <___vfiprintf_internal_r+0x1454>
   28a30:	008000f4 	movhi	r2,3
   28a34:	109f2604 	addi	r2,r2,31896
   28a38:	d8802615 	stw	r2,152(sp)
   28a3c:	a080080c 	andi	r2,r20,32
   28a40:	1000aa26 	beq	r2,zero,28cec <___vfiprintf_internal_r+0xa08>
   28a44:	da802217 	ldw	r10,136(sp)
   28a48:	54800017 	ldw	r18,0(r10)
   28a4c:	54c00117 	ldw	r19,4(r10)
   28a50:	52800204 	addi	r10,r10,8
   28a54:	da802215 	stw	r10,136(sp)
   28a58:	a080004c 	andi	r2,r20,1
   28a5c:	1001d226 	beq	r2,zero,291a8 <___vfiprintf_internal_r+0xec4>
   28a60:	94c4b03a 	or	r2,r18,r19
   28a64:	1002351e 	bne	r2,zero,2933c <___vfiprintf_internal_r+0x1058>
   28a68:	d8001d85 	stb	zero,118(sp)
   28a6c:	48022216 	blt	r9,zero,292f8 <___vfiprintf_internal_r+0x1014>
   28a70:	00bfdfc4 	movi	r2,-129
   28a74:	a0a8703a 	and	r20,r20,r2
   28a78:	003f1506 	br	286d0 <_gp+0xfffe6b84>
   28a7c:	da802217 	ldw	r10,136(sp)
   28a80:	04800044 	movi	r18,1
   28a84:	d8001d85 	stb	zero,118(sp)
   28a88:	50800017 	ldw	r2,0(r10)
   28a8c:	52800104 	addi	r10,r10,4
   28a90:	da802215 	stw	r10,136(sp)
   28a94:	d8801005 	stb	r2,64(sp)
   28a98:	9027883a 	mov	r19,r18
   28a9c:	dd401004 	addi	r21,sp,64
   28aa0:	0013883a 	mov	r9,zero
   28aa4:	003f1706 	br	28704 <_gp+0xfffe6bb8>
   28aa8:	21003fcc 	andi	r4,r4,255
   28aac:	2003201e 	bne	r4,zero,29730 <___vfiprintf_internal_r+0x144c>
   28ab0:	a080080c 	andi	r2,r20,32
   28ab4:	10004b26 	beq	r2,zero,28be4 <___vfiprintf_internal_r+0x900>
   28ab8:	da802217 	ldw	r10,136(sp)
   28abc:	50800117 	ldw	r2,4(r10)
   28ac0:	54800017 	ldw	r18,0(r10)
   28ac4:	52800204 	addi	r10,r10,8
   28ac8:	da802215 	stw	r10,136(sp)
   28acc:	1027883a 	mov	r19,r2
   28ad0:	10022c16 	blt	r2,zero,29384 <___vfiprintf_internal_r+0x10a0>
   28ad4:	df001d83 	ldbu	fp,118(sp)
   28ad8:	48007216 	blt	r9,zero,28ca4 <___vfiprintf_internal_r+0x9c0>
   28adc:	00ffdfc4 	movi	r3,-129
   28ae0:	94c4b03a 	or	r2,r18,r19
   28ae4:	a0e8703a 	and	r20,r20,r3
   28ae8:	1000cc26 	beq	r2,zero,28e1c <___vfiprintf_internal_r+0xb38>
   28aec:	98021026 	beq	r19,zero,29330 <___vfiprintf_internal_r+0x104c>
   28af0:	dc402415 	stw	r17,144(sp)
   28af4:	dc002515 	stw	r16,148(sp)
   28af8:	9823883a 	mov	r17,r19
   28afc:	9021883a 	mov	r16,r18
   28b00:	dd401a04 	addi	r21,sp,104
   28b04:	4825883a 	mov	r18,r9
   28b08:	4027883a 	mov	r19,r8
   28b0c:	8009883a 	mov	r4,r16
   28b10:	880b883a 	mov	r5,r17
   28b14:	01800284 	movi	r6,10
   28b18:	000f883a 	mov	r7,zero
   28b1c:	002a6c40 	call	2a6c4 <__umoddi3>
   28b20:	10800c04 	addi	r2,r2,48
   28b24:	ad7fffc4 	addi	r21,r21,-1
   28b28:	8009883a 	mov	r4,r16
   28b2c:	880b883a 	mov	r5,r17
   28b30:	a8800005 	stb	r2,0(r21)
   28b34:	01800284 	movi	r6,10
   28b38:	000f883a 	mov	r7,zero
   28b3c:	002a14c0 	call	2a14c <__udivdi3>
   28b40:	1021883a 	mov	r16,r2
   28b44:	10c4b03a 	or	r2,r2,r3
   28b48:	1823883a 	mov	r17,r3
   28b4c:	103fef1e 	bne	r2,zero,28b0c <_gp+0xfffe6fc0>
   28b50:	dc402417 	ldw	r17,144(sp)
   28b54:	dc002517 	ldw	r16,148(sp)
   28b58:	9013883a 	mov	r9,r18
   28b5c:	9811883a 	mov	r8,r19
   28b60:	da801e17 	ldw	r10,120(sp)
   28b64:	5567c83a 	sub	r19,r10,r21
   28b68:	003ede06 	br	286e4 <_gp+0xfffe6b98>
   28b6c:	38803fcc 	andi	r2,r7,255
   28b70:	1080201c 	xori	r2,r2,128
   28b74:	10bfe004 	addi	r2,r2,-128
   28b78:	1002371e 	bne	r2,zero,29458 <___vfiprintf_internal_r+0x1174>
   28b7c:	01000044 	movi	r4,1
   28b80:	01c00804 	movi	r7,32
   28b84:	80c00007 	ldb	r3,0(r16)
   28b88:	003e3506 	br	28460 <_gp+0xfffe6914>
   28b8c:	a5000054 	ori	r20,r20,1
   28b90:	80c00007 	ldb	r3,0(r16)
   28b94:	003e3206 	br	28460 <_gp+0xfffe6914>
   28b98:	a5002014 	ori	r20,r20,128
   28b9c:	80c00007 	ldb	r3,0(r16)
   28ba0:	003e2f06 	br	28460 <_gp+0xfffe6914>
   28ba4:	8015883a 	mov	r10,r16
   28ba8:	0023883a 	mov	r17,zero
   28bac:	18bff404 	addi	r2,r3,-48
   28bb0:	50c00007 	ldb	r3,0(r10)
   28bb4:	8c4002a4 	muli	r17,r17,10
   28bb8:	84000044 	addi	r16,r16,1
   28bbc:	8015883a 	mov	r10,r16
   28bc0:	1463883a 	add	r17,r2,r17
   28bc4:	18bff404 	addi	r2,r3,-48
   28bc8:	30bff92e 	bgeu	r6,r2,28bb0 <_gp+0xfffe7064>
   28bcc:	003e2506 	br	28464 <_gp+0xfffe6918>
   28bd0:	21003fcc 	andi	r4,r4,255
   28bd4:	2002d41e 	bne	r4,zero,29728 <___vfiprintf_internal_r+0x1444>
   28bd8:	a5000414 	ori	r20,r20,16
   28bdc:	a080080c 	andi	r2,r20,32
   28be0:	103fb51e 	bne	r2,zero,28ab8 <_gp+0xfffe6f6c>
   28be4:	a080040c 	andi	r2,r20,16
   28be8:	1001f826 	beq	r2,zero,293cc <___vfiprintf_internal_r+0x10e8>
   28bec:	da802217 	ldw	r10,136(sp)
   28bf0:	54800017 	ldw	r18,0(r10)
   28bf4:	52800104 	addi	r10,r10,4
   28bf8:	da802215 	stw	r10,136(sp)
   28bfc:	9027d7fa 	srai	r19,r18,31
   28c00:	9805883a 	mov	r2,r19
   28c04:	003fb206 	br	28ad0 <_gp+0xfffe6f84>
   28c08:	21003fcc 	andi	r4,r4,255
   28c0c:	2002c41e 	bne	r4,zero,29720 <___vfiprintf_internal_r+0x143c>
   28c10:	a5000414 	ori	r20,r20,16
   28c14:	a080080c 	andi	r2,r20,32
   28c18:	103f5f1e 	bne	r2,zero,28998 <_gp+0xfffe6e4c>
   28c1c:	a080040c 	andi	r2,r20,16
   28c20:	10020f26 	beq	r2,zero,29460 <___vfiprintf_internal_r+0x117c>
   28c24:	da802217 	ldw	r10,136(sp)
   28c28:	d8001d85 	stb	zero,118(sp)
   28c2c:	0027883a 	mov	r19,zero
   28c30:	50800104 	addi	r2,r10,4
   28c34:	54800017 	ldw	r18,0(r10)
   28c38:	48021116 	blt	r9,zero,29480 <___vfiprintf_internal_r+0x119c>
   28c3c:	00ffdfc4 	movi	r3,-129
   28c40:	d8802215 	stw	r2,136(sp)
   28c44:	a0e8703a 	and	r20,r20,r3
   28c48:	903f5e1e 	bne	r18,zero,289c4 <_gp+0xfffe6e78>
   28c4c:	0039883a 	mov	fp,zero
   28c50:	4802a626 	beq	r9,zero,296ec <___vfiprintf_internal_r+0x1408>
   28c54:	0025883a 	mov	r18,zero
   28c58:	0027883a 	mov	r19,zero
   28c5c:	003f5a06 	br	289c8 <_gp+0xfffe6e7c>
   28c60:	21003fcc 	andi	r4,r4,255
   28c64:	20029f1e 	bne	r4,zero,296e4 <___vfiprintf_internal_r+0x1400>
   28c68:	a5000414 	ori	r20,r20,16
   28c6c:	a080080c 	andi	r2,r20,32
   28c70:	10005e1e 	bne	r2,zero,28dec <___vfiprintf_internal_r+0xb08>
   28c74:	a080040c 	andi	r2,r20,16
   28c78:	1001a21e 	bne	r2,zero,29304 <___vfiprintf_internal_r+0x1020>
   28c7c:	a080100c 	andi	r2,r20,64
   28c80:	d8001d85 	stb	zero,118(sp)
   28c84:	da802217 	ldw	r10,136(sp)
   28c88:	1002231e 	bne	r2,zero,29518 <___vfiprintf_internal_r+0x1234>
   28c8c:	50800104 	addi	r2,r10,4
   28c90:	54800017 	ldw	r18,0(r10)
   28c94:	0027883a 	mov	r19,zero
   28c98:	4801a00e 	bge	r9,zero,2931c <___vfiprintf_internal_r+0x1038>
   28c9c:	d8802215 	stw	r2,136(sp)
   28ca0:	0039883a 	mov	fp,zero
   28ca4:	94c4b03a 	or	r2,r18,r19
   28ca8:	103f901e 	bne	r2,zero,28aec <_gp+0xfffe6fa0>
   28cac:	00800044 	movi	r2,1
   28cb0:	10803fcc 	andi	r2,r2,255
   28cb4:	00c00044 	movi	r3,1
   28cb8:	10c05926 	beq	r2,r3,28e20 <___vfiprintf_internal_r+0xb3c>
   28cbc:	00c00084 	movi	r3,2
   28cc0:	10ffe41e 	bne	r2,r3,28c54 <_gp+0xfffe7108>
   28cc4:	0025883a 	mov	r18,zero
   28cc8:	0027883a 	mov	r19,zero
   28ccc:	00013d06 	br	291c4 <___vfiprintf_internal_r+0xee0>
   28cd0:	21003fcc 	andi	r4,r4,255
   28cd4:	2002811e 	bne	r4,zero,296dc <___vfiprintf_internal_r+0x13f8>
   28cd8:	008000f4 	movhi	r2,3
   28cdc:	109f2104 	addi	r2,r2,31876
   28ce0:	d8802615 	stw	r2,152(sp)
   28ce4:	a080080c 	andi	r2,r20,32
   28ce8:	103f561e 	bne	r2,zero,28a44 <_gp+0xfffe6ef8>
   28cec:	a080040c 	andi	r2,r20,16
   28cf0:	1001d126 	beq	r2,zero,29438 <___vfiprintf_internal_r+0x1154>
   28cf4:	da802217 	ldw	r10,136(sp)
   28cf8:	0027883a 	mov	r19,zero
   28cfc:	54800017 	ldw	r18,0(r10)
   28d00:	52800104 	addi	r10,r10,4
   28d04:	da802215 	stw	r10,136(sp)
   28d08:	003f5306 	br	28a58 <_gp+0xfffe6f0c>
   28d0c:	da802217 	ldw	r10,136(sp)
   28d10:	d8001d85 	stb	zero,118(sp)
   28d14:	55400017 	ldw	r21,0(r10)
   28d18:	50c00104 	addi	r3,r10,4
   28d1c:	a8024226 	beq	r21,zero,29628 <___vfiprintf_internal_r+0x1344>
   28d20:	48021816 	blt	r9,zero,29584 <___vfiprintf_internal_r+0x12a0>
   28d24:	480d883a 	mov	r6,r9
   28d28:	000b883a 	mov	r5,zero
   28d2c:	a809883a 	mov	r4,r21
   28d30:	d8c02a15 	stw	r3,168(sp)
   28d34:	da002b15 	stw	r8,172(sp)
   28d38:	da402c15 	stw	r9,176(sp)
   28d3c:	0026a580 	call	26a58 <memchr>
   28d40:	d8c02a17 	ldw	r3,168(sp)
   28d44:	da002b17 	ldw	r8,172(sp)
   28d48:	da402c17 	ldw	r9,176(sp)
   28d4c:	10024826 	beq	r2,zero,29670 <___vfiprintf_internal_r+0x138c>
   28d50:	1567c83a 	sub	r19,r2,r21
   28d54:	df001d83 	ldbu	fp,118(sp)
   28d58:	d8c02215 	stw	r3,136(sp)
   28d5c:	0013883a 	mov	r9,zero
   28d60:	003e6006 	br	286e4 <_gp+0xfffe6b98>
   28d64:	21003fcc 	andi	r4,r4,255
   28d68:	203fc026 	beq	r4,zero,28c6c <_gp+0xfffe7120>
   28d6c:	d9c01d85 	stb	r7,118(sp)
   28d70:	003fbe06 	br	28c6c <_gp+0xfffe7120>
   28d74:	da802217 	ldw	r10,136(sp)
   28d78:	54400017 	ldw	r17,0(r10)
   28d7c:	50800104 	addi	r2,r10,4
   28d80:	883e3b16 	blt	r17,zero,28670 <_gp+0xfffe6b24>
   28d84:	d8802215 	stw	r2,136(sp)
   28d88:	80c00007 	ldb	r3,0(r16)
   28d8c:	003db406 	br	28460 <_gp+0xfffe6914>
   28d90:	01000044 	movi	r4,1
   28d94:	01c00ac4 	movi	r7,43
   28d98:	80c00007 	ldb	r3,0(r16)
   28d9c:	003db006 	br	28460 <_gp+0xfffe6914>
   28da0:	80c00007 	ldb	r3,0(r16)
   28da4:	82800044 	addi	r10,r16,1
   28da8:	1b423c26 	beq	r3,r13,2969c <___vfiprintf_internal_r+0x13b8>
   28dac:	18bff404 	addi	r2,r3,-48
   28db0:	0013883a 	mov	r9,zero
   28db4:	30822b36 	bltu	r6,r2,29664 <___vfiprintf_internal_r+0x1380>
   28db8:	50c00007 	ldb	r3,0(r10)
   28dbc:	4a4002a4 	muli	r9,r9,10
   28dc0:	54000044 	addi	r16,r10,1
   28dc4:	8015883a 	mov	r10,r16
   28dc8:	4893883a 	add	r9,r9,r2
   28dcc:	18bff404 	addi	r2,r3,-48
   28dd0:	30bff92e 	bgeu	r6,r2,28db8 <_gp+0xfffe726c>
   28dd4:	483da30e 	bge	r9,zero,28464 <_gp+0xfffe6918>
   28dd8:	027fffc4 	movi	r9,-1
   28ddc:	003da106 	br	28464 <_gp+0xfffe6918>
   28de0:	a5001014 	ori	r20,r20,64
   28de4:	80c00007 	ldb	r3,0(r16)
   28de8:	003d9d06 	br	28460 <_gp+0xfffe6914>
   28dec:	da802217 	ldw	r10,136(sp)
   28df0:	d8001d85 	stb	zero,118(sp)
   28df4:	50c00204 	addi	r3,r10,8
   28df8:	54800017 	ldw	r18,0(r10)
   28dfc:	54c00117 	ldw	r19,4(r10)
   28e00:	4801ca16 	blt	r9,zero,2952c <___vfiprintf_internal_r+0x1248>
   28e04:	013fdfc4 	movi	r4,-129
   28e08:	94c4b03a 	or	r2,r18,r19
   28e0c:	d8c02215 	stw	r3,136(sp)
   28e10:	a128703a 	and	r20,r20,r4
   28e14:	0039883a 	mov	fp,zero
   28e18:	103f341e 	bne	r2,zero,28aec <_gp+0xfffe6fa0>
   28e1c:	483e2e26 	beq	r9,zero,286d8 <_gp+0xfffe6b8c>
   28e20:	0025883a 	mov	r18,zero
   28e24:	94800c04 	addi	r18,r18,48
   28e28:	dc8019c5 	stb	r18,103(sp)
   28e2c:	dcc02717 	ldw	r19,156(sp)
   28e30:	dd4019c4 	addi	r21,sp,103
   28e34:	003e2b06 	br	286e4 <_gp+0xfffe6b98>
   28e38:	21003fcc 	andi	r4,r4,255
   28e3c:	2002361e 	bne	r4,zero,29718 <___vfiprintf_internal_r+0x1434>
   28e40:	1801c126 	beq	r3,zero,29548 <___vfiprintf_internal_r+0x1264>
   28e44:	04800044 	movi	r18,1
   28e48:	d8c01005 	stb	r3,64(sp)
   28e4c:	d8001d85 	stb	zero,118(sp)
   28e50:	9027883a 	mov	r19,r18
   28e54:	dd401004 	addi	r21,sp,64
   28e58:	003f1106 	br	28aa0 <_gp+0xfffe6f54>
   28e5c:	d9402117 	ldw	r5,132(sp)
   28e60:	d9002017 	ldw	r4,128(sp)
   28e64:	d9801a04 	addi	r6,sp,104
   28e68:	d9c02b15 	stw	r7,172(sp)
   28e6c:	dbc02a15 	stw	r15,168(sp)
   28e70:	00281d00 	call	281d0 <__sprint_r.part.0>
   28e74:	d9c02b17 	ldw	r7,172(sp)
   28e78:	dbc02a17 	ldw	r15,168(sp)
   28e7c:	10006d1e 	bne	r2,zero,29034 <___vfiprintf_internal_r+0xd50>
   28e80:	d9801b17 	ldw	r6,108(sp)
   28e84:	d8801c17 	ldw	r2,112(sp)
   28e88:	d811883a 	mov	r8,sp
   28e8c:	31400044 	addi	r5,r6,1
   28e90:	003e3306 	br	28760 <_gp+0xfffe6c14>
   28e94:	d9401b17 	ldw	r5,108(sp)
   28e98:	d8801c17 	ldw	r2,112(sp)
   28e9c:	29000044 	addi	r4,r5,1
   28ea0:	d8c01d87 	ldb	r3,118(sp)
   28ea4:	183e4d26 	beq	r3,zero,287dc <_gp+0xfffe6c90>
   28ea8:	00c00044 	movi	r3,1
   28eac:	d9401d84 	addi	r5,sp,118
   28eb0:	10c5883a 	add	r2,r2,r3
   28eb4:	41400015 	stw	r5,0(r8)
   28eb8:	40c00115 	stw	r3,4(r8)
   28ebc:	d8801c15 	stw	r2,112(sp)
   28ec0:	d9001b15 	stw	r4,108(sp)
   28ec4:	014001c4 	movi	r5,7
   28ec8:	2900a90e 	bge	r5,r4,29170 <___vfiprintf_internal_r+0xe8c>
   28ecc:	1000da1e 	bne	r2,zero,29238 <___vfiprintf_internal_r+0xf54>
   28ed0:	7000ab1e 	bne	r14,zero,29180 <___vfiprintf_internal_r+0xe9c>
   28ed4:	000b883a 	mov	r5,zero
   28ed8:	1809883a 	mov	r4,r3
   28edc:	d811883a 	mov	r8,sp
   28ee0:	00c02004 	movi	r3,128
   28ee4:	e0fe4d26 	beq	fp,r3,2881c <_gp+0xfffe6cd0>
   28ee8:	4cf9c83a 	sub	fp,r9,r19
   28eec:	073e7b0e 	bge	zero,fp,288dc <_gp+0xfffe6d90>
   28ef0:	01c00404 	movi	r7,16
   28ef4:	3f01900e 	bge	r7,fp,29538 <___vfiprintf_internal_r+0x1254>
   28ef8:	00c000f4 	movhi	r3,3
   28efc:	18df8704 	addi	r3,r3,32284
   28f00:	d8c02415 	stw	r3,144(sp)
   28f04:	034001c4 	movi	r13,7
   28f08:	00000506 	br	28f20 <___vfiprintf_internal_r+0xc3c>
   28f0c:	29000084 	addi	r4,r5,2
   28f10:	42000204 	addi	r8,r8,8
   28f14:	180b883a 	mov	r5,r3
   28f18:	e73ffc04 	addi	fp,fp,-16
   28f1c:	3f000d0e 	bge	r7,fp,28f54 <___vfiprintf_internal_r+0xc70>
   28f20:	10800404 	addi	r2,r2,16
   28f24:	28c00044 	addi	r3,r5,1
   28f28:	45c00015 	stw	r23,0(r8)
   28f2c:	41c00115 	stw	r7,4(r8)
   28f30:	d8801c15 	stw	r2,112(sp)
   28f34:	d8c01b15 	stw	r3,108(sp)
   28f38:	68fff40e 	bge	r13,r3,28f0c <_gp+0xfffe73c0>
   28f3c:	1000101e 	bne	r2,zero,28f80 <___vfiprintf_internal_r+0xc9c>
   28f40:	e73ffc04 	addi	fp,fp,-16
   28f44:	01000044 	movi	r4,1
   28f48:	000b883a 	mov	r5,zero
   28f4c:	d811883a 	mov	r8,sp
   28f50:	3f3ff316 	blt	r7,fp,28f20 <_gp+0xfffe73d4>
   28f54:	da802417 	ldw	r10,144(sp)
   28f58:	1705883a 	add	r2,r2,fp
   28f5c:	47000115 	stw	fp,4(r8)
   28f60:	42800015 	stw	r10,0(r8)
   28f64:	d8801c15 	stw	r2,112(sp)
   28f68:	d9001b15 	stw	r4,108(sp)
   28f6c:	00c001c4 	movi	r3,7
   28f70:	19003616 	blt	r3,r4,2904c <___vfiprintf_internal_r+0xd68>
   28f74:	42000204 	addi	r8,r8,8
   28f78:	21000044 	addi	r4,r4,1
   28f7c:	003e5706 	br	288dc <_gp+0xfffe6d90>
   28f80:	d9402117 	ldw	r5,132(sp)
   28f84:	d9002017 	ldw	r4,128(sp)
   28f88:	d9801a04 	addi	r6,sp,104
   28f8c:	d9c02b15 	stw	r7,172(sp)
   28f90:	db402a15 	stw	r13,168(sp)
   28f94:	00281d00 	call	281d0 <__sprint_r.part.0>
   28f98:	d9c02b17 	ldw	r7,172(sp)
   28f9c:	db402a17 	ldw	r13,168(sp)
   28fa0:	1000241e 	bne	r2,zero,29034 <___vfiprintf_internal_r+0xd50>
   28fa4:	d9401b17 	ldw	r5,108(sp)
   28fa8:	d8801c17 	ldw	r2,112(sp)
   28fac:	d811883a 	mov	r8,sp
   28fb0:	29000044 	addi	r4,r5,1
   28fb4:	003fd806 	br	28f18 <_gp+0xfffe73cc>
   28fb8:	d9401b17 	ldw	r5,108(sp)
   28fbc:	00c000f4 	movhi	r3,3
   28fc0:	18df8b04 	addi	r3,r3,32300
   28fc4:	d8c02415 	stw	r3,144(sp)
   28fc8:	29400044 	addi	r5,r5,1
   28fcc:	d8c02417 	ldw	r3,144(sp)
   28fd0:	14c5883a 	add	r2,r2,r19
   28fd4:	44c00115 	stw	r19,4(r8)
   28fd8:	40c00015 	stw	r3,0(r8)
   28fdc:	d8801c15 	stw	r2,112(sp)
   28fe0:	d9401b15 	stw	r5,108(sp)
   28fe4:	00c001c4 	movi	r3,7
   28fe8:	1940070e 	bge	r3,r5,29008 <___vfiprintf_internal_r+0xd24>
   28fec:	103e4826 	beq	r2,zero,28910 <_gp+0xfffe6dc4>
   28ff0:	d9402117 	ldw	r5,132(sp)
   28ff4:	d9002017 	ldw	r4,128(sp)
   28ff8:	d9801a04 	addi	r6,sp,104
   28ffc:	00281d00 	call	281d0 <__sprint_r.part.0>
   29000:	10000c1e 	bne	r2,zero,29034 <___vfiprintf_internal_r+0xd50>
   29004:	d8801c17 	ldw	r2,112(sp)
   29008:	8c80010e 	bge	r17,r18,29010 <___vfiprintf_internal_r+0xd2c>
   2900c:	9023883a 	mov	r17,r18
   29010:	da802317 	ldw	r10,140(sp)
   29014:	5455883a 	add	r10,r10,r17
   29018:	da802315 	stw	r10,140(sp)
   2901c:	103e4126 	beq	r2,zero,28924 <_gp+0xfffe6dd8>
   29020:	d9402117 	ldw	r5,132(sp)
   29024:	d9002017 	ldw	r4,128(sp)
   29028:	d9801a04 	addi	r6,sp,104
   2902c:	00281d00 	call	281d0 <__sprint_r.part.0>
   29030:	103e3c26 	beq	r2,zero,28924 <_gp+0xfffe6dd8>
   29034:	dd002117 	ldw	r20,132(sp)
   29038:	a080030b 	ldhu	r2,12(r20)
   2903c:	1080100c 	andi	r2,r2,64
   29040:	1001231e 	bne	r2,zero,294d0 <___vfiprintf_internal_r+0x11ec>
   29044:	d8802317 	ldw	r2,140(sp)
   29048:	003d7b06 	br	28638 <_gp+0xfffe6aec>
   2904c:	1000991e 	bne	r2,zero,292b4 <___vfiprintf_internal_r+0xfd0>
   29050:	00c00044 	movi	r3,1
   29054:	9805883a 	mov	r2,r19
   29058:	dd400015 	stw	r21,0(sp)
   2905c:	dcc00115 	stw	r19,4(sp)
   29060:	dcc01c15 	stw	r19,112(sp)
   29064:	d8c01b15 	stw	r3,108(sp)
   29068:	d811883a 	mov	r8,sp
   2906c:	42000204 	addi	r8,r8,8
   29070:	a2c0010c 	andi	r11,r20,4
   29074:	583fe426 	beq	r11,zero,29008 <_gp+0xfffe74bc>
   29078:	8ca7c83a 	sub	r19,r17,r18
   2907c:	04ffe20e 	bge	zero,r19,29008 <_gp+0xfffe74bc>
   29080:	01c00404 	movi	r7,16
   29084:	3cffcc0e 	bge	r7,r19,28fb8 <_gp+0xfffe746c>
   29088:	028000f4 	movhi	r10,3
   2908c:	529f8b04 	addi	r10,r10,32300
   29090:	d9001b17 	ldw	r4,108(sp)
   29094:	da802415 	stw	r10,144(sp)
   29098:	382b883a 	mov	r21,r7
   2909c:	050001c4 	movi	r20,7
   290a0:	df002017 	ldw	fp,128(sp)
   290a4:	00000506 	br	290bc <___vfiprintf_internal_r+0xdd8>
   290a8:	21400084 	addi	r5,r4,2
   290ac:	42000204 	addi	r8,r8,8
   290b0:	1809883a 	mov	r4,r3
   290b4:	9cfffc04 	addi	r19,r19,-16
   290b8:	acffc40e 	bge	r21,r19,28fcc <_gp+0xfffe7480>
   290bc:	10800404 	addi	r2,r2,16
   290c0:	20c00044 	addi	r3,r4,1
   290c4:	45800015 	stw	r22,0(r8)
   290c8:	45400115 	stw	r21,4(r8)
   290cc:	d8801c15 	stw	r2,112(sp)
   290d0:	d8c01b15 	stw	r3,108(sp)
   290d4:	a0fff40e 	bge	r20,r3,290a8 <_gp+0xfffe755c>
   290d8:	1000041e 	bne	r2,zero,290ec <___vfiprintf_internal_r+0xe08>
   290dc:	01400044 	movi	r5,1
   290e0:	0009883a 	mov	r4,zero
   290e4:	d811883a 	mov	r8,sp
   290e8:	003ff206 	br	290b4 <_gp+0xfffe7568>
   290ec:	d9402117 	ldw	r5,132(sp)
   290f0:	d9801a04 	addi	r6,sp,104
   290f4:	e009883a 	mov	r4,fp
   290f8:	00281d00 	call	281d0 <__sprint_r.part.0>
   290fc:	103fcd1e 	bne	r2,zero,29034 <_gp+0xfffe74e8>
   29100:	d9001b17 	ldw	r4,108(sp)
   29104:	d8801c17 	ldw	r2,112(sp)
   29108:	d811883a 	mov	r8,sp
   2910c:	21400044 	addi	r5,r4,1
   29110:	003fe806 	br	290b4 <_gp+0xfffe7568>
   29114:	d9402117 	ldw	r5,132(sp)
   29118:	d9002017 	ldw	r4,128(sp)
   2911c:	d9801a04 	addi	r6,sp,104
   29120:	d9c02b15 	stw	r7,172(sp)
   29124:	db402a15 	stw	r13,168(sp)
   29128:	00281d00 	call	281d0 <__sprint_r.part.0>
   2912c:	d9c02b17 	ldw	r7,172(sp)
   29130:	db402a17 	ldw	r13,168(sp)
   29134:	103fbf1e 	bne	r2,zero,29034 <_gp+0xfffe74e8>
   29138:	d9401b17 	ldw	r5,108(sp)
   2913c:	d8801c17 	ldw	r2,112(sp)
   29140:	d811883a 	mov	r8,sp
   29144:	29800044 	addi	r6,r5,1
   29148:	003dc406 	br	2885c <_gp+0xfffe6d10>
   2914c:	1000d21e 	bne	r2,zero,29498 <___vfiprintf_internal_r+0x11b4>
   29150:	d8c01d87 	ldb	r3,118(sp)
   29154:	18009526 	beq	r3,zero,293ac <___vfiprintf_internal_r+0x10c8>
   29158:	00800044 	movi	r2,1
   2915c:	d8c01d84 	addi	r3,sp,118
   29160:	1009883a 	mov	r4,r2
   29164:	d8c00015 	stw	r3,0(sp)
   29168:	d8800115 	stw	r2,4(sp)
   2916c:	d811883a 	mov	r8,sp
   29170:	200b883a 	mov	r5,r4
   29174:	42000204 	addi	r8,r8,8
   29178:	21000044 	addi	r4,r4,1
   2917c:	003d9706 	br	287dc <_gp+0xfffe6c90>
   29180:	d9001d04 	addi	r4,sp,116
   29184:	00800084 	movi	r2,2
   29188:	d9000015 	stw	r4,0(sp)
   2918c:	d8800115 	stw	r2,4(sp)
   29190:	1809883a 	mov	r4,r3
   29194:	d811883a 	mov	r8,sp
   29198:	200b883a 	mov	r5,r4
   2919c:	42000204 	addi	r8,r8,8
   291a0:	21000044 	addi	r4,r4,1
   291a4:	003f4e06 	br	28ee0 <_gp+0xfffe7394>
   291a8:	d8001d85 	stb	zero,118(sp)
   291ac:	48005016 	blt	r9,zero,292f0 <___vfiprintf_internal_r+0x100c>
   291b0:	00ffdfc4 	movi	r3,-129
   291b4:	94c4b03a 	or	r2,r18,r19
   291b8:	a0e8703a 	and	r20,r20,r3
   291bc:	103d4426 	beq	r2,zero,286d0 <_gp+0xfffe6b84>
   291c0:	0039883a 	mov	fp,zero
   291c4:	d9002617 	ldw	r4,152(sp)
   291c8:	dd401a04 	addi	r21,sp,104
   291cc:	908003cc 	andi	r2,r18,15
   291d0:	9806973a 	slli	r3,r19,28
   291d4:	2085883a 	add	r2,r4,r2
   291d8:	9024d13a 	srli	r18,r18,4
   291dc:	10800003 	ldbu	r2,0(r2)
   291e0:	9826d13a 	srli	r19,r19,4
   291e4:	ad7fffc4 	addi	r21,r21,-1
   291e8:	1ca4b03a 	or	r18,r3,r18
   291ec:	a8800005 	stb	r2,0(r21)
   291f0:	94c4b03a 	or	r2,r18,r19
   291f4:	103ff51e 	bne	r2,zero,291cc <_gp+0xfffe7680>
   291f8:	003e5906 	br	28b60 <_gp+0xfffe7014>
   291fc:	d9402117 	ldw	r5,132(sp)
   29200:	d9002017 	ldw	r4,128(sp)
   29204:	d9801a04 	addi	r6,sp,104
   29208:	00281d00 	call	281d0 <__sprint_r.part.0>
   2920c:	103f891e 	bne	r2,zero,29034 <_gp+0xfffe74e8>
   29210:	d8801c17 	ldw	r2,112(sp)
   29214:	d811883a 	mov	r8,sp
   29218:	003f9506 	br	29070 <_gp+0xfffe7524>
   2921c:	d9402117 	ldw	r5,132(sp)
   29220:	d9002017 	ldw	r4,128(sp)
   29224:	d9801a04 	addi	r6,sp,104
   29228:	00281d00 	call	281d0 <__sprint_r.part.0>
   2922c:	103f811e 	bne	r2,zero,29034 <_gp+0xfffe74e8>
   29230:	d811883a 	mov	r8,sp
   29234:	003ced06 	br	285ec <_gp+0xfffe6aa0>
   29238:	d9402117 	ldw	r5,132(sp)
   2923c:	d9002017 	ldw	r4,128(sp)
   29240:	d9801a04 	addi	r6,sp,104
   29244:	da402c15 	stw	r9,176(sp)
   29248:	db802a15 	stw	r14,168(sp)
   2924c:	00281d00 	call	281d0 <__sprint_r.part.0>
   29250:	da402c17 	ldw	r9,176(sp)
   29254:	db802a17 	ldw	r14,168(sp)
   29258:	103f761e 	bne	r2,zero,29034 <_gp+0xfffe74e8>
   2925c:	d9401b17 	ldw	r5,108(sp)
   29260:	d8801c17 	ldw	r2,112(sp)
   29264:	d811883a 	mov	r8,sp
   29268:	29000044 	addi	r4,r5,1
   2926c:	003d5b06 	br	287dc <_gp+0xfffe6c90>
   29270:	d9402117 	ldw	r5,132(sp)
   29274:	d9002017 	ldw	r4,128(sp)
   29278:	d9801a04 	addi	r6,sp,104
   2927c:	da402c15 	stw	r9,176(sp)
   29280:	00281d00 	call	281d0 <__sprint_r.part.0>
   29284:	da402c17 	ldw	r9,176(sp)
   29288:	103f6a1e 	bne	r2,zero,29034 <_gp+0xfffe74e8>
   2928c:	d9401b17 	ldw	r5,108(sp)
   29290:	d8801c17 	ldw	r2,112(sp)
   29294:	d811883a 	mov	r8,sp
   29298:	29000044 	addi	r4,r5,1
   2929c:	003f1006 	br	28ee0 <_gp+0xfffe7394>
   292a0:	1000c31e 	bne	r2,zero,295b0 <___vfiprintf_internal_r+0x12cc>
   292a4:	01000044 	movi	r4,1
   292a8:	000b883a 	mov	r5,zero
   292ac:	d811883a 	mov	r8,sp
   292b0:	003f0d06 	br	28ee8 <_gp+0xfffe739c>
   292b4:	d9402117 	ldw	r5,132(sp)
   292b8:	d9002017 	ldw	r4,128(sp)
   292bc:	d9801a04 	addi	r6,sp,104
   292c0:	00281d00 	call	281d0 <__sprint_r.part.0>
   292c4:	103f5b1e 	bne	r2,zero,29034 <_gp+0xfffe74e8>
   292c8:	d9001b17 	ldw	r4,108(sp)
   292cc:	d8801c17 	ldw	r2,112(sp)
   292d0:	d811883a 	mov	r8,sp
   292d4:	21000044 	addi	r4,r4,1
   292d8:	003d8006 	br	288dc <_gp+0xfffe6d90>
   292dc:	010000f4 	movhi	r4,3
   292e0:	211f2604 	addi	r4,r4,31896
   292e4:	d9002615 	stw	r4,152(sp)
   292e8:	d8c02215 	stw	r3,136(sp)
   292ec:	1029883a 	mov	r20,r2
   292f0:	94c4b03a 	or	r2,r18,r19
   292f4:	103fb21e 	bne	r2,zero,291c0 <_gp+0xfffe7674>
   292f8:	0039883a 	mov	fp,zero
   292fc:	00800084 	movi	r2,2
   29300:	003e6b06 	br	28cb0 <_gp+0xfffe7164>
   29304:	da802217 	ldw	r10,136(sp)
   29308:	d8001d85 	stb	zero,118(sp)
   2930c:	0027883a 	mov	r19,zero
   29310:	50800104 	addi	r2,r10,4
   29314:	54800017 	ldw	r18,0(r10)
   29318:	483e6016 	blt	r9,zero,28c9c <_gp+0xfffe7150>
   2931c:	00ffdfc4 	movi	r3,-129
   29320:	d8802215 	stw	r2,136(sp)
   29324:	a0e8703a 	and	r20,r20,r3
   29328:	0039883a 	mov	fp,zero
   2932c:	903ebb26 	beq	r18,zero,28e1c <_gp+0xfffe72d0>
   29330:	00800244 	movi	r2,9
   29334:	14bdee36 	bltu	r2,r18,28af0 <_gp+0xfffe6fa4>
   29338:	003eba06 	br	28e24 <_gp+0xfffe72d8>
   2933c:	00800c04 	movi	r2,48
   29340:	d8c01d45 	stb	r3,117(sp)
   29344:	d8801d05 	stb	r2,116(sp)
   29348:	d8001d85 	stb	zero,118(sp)
   2934c:	a0c00094 	ori	r3,r20,2
   29350:	4800a916 	blt	r9,zero,295f8 <___vfiprintf_internal_r+0x1314>
   29354:	00bfdfc4 	movi	r2,-129
   29358:	a096703a 	and	r11,r20,r2
   2935c:	5d000094 	ori	r20,r11,2
   29360:	0039883a 	mov	fp,zero
   29364:	003f9706 	br	291c4 <_gp+0xfffe7678>
   29368:	8025883a 	mov	r18,r16
   2936c:	003c2e06 	br	28428 <_gp+0xfffe68dc>
   29370:	008000f4 	movhi	r2,3
   29374:	109f2604 	addi	r2,r2,31896
   29378:	0039883a 	mov	fp,zero
   2937c:	d8802615 	stw	r2,152(sp)
   29380:	003f9006 	br	291c4 <_gp+0xfffe7678>
   29384:	04a5c83a 	sub	r18,zero,r18
   29388:	07000b44 	movi	fp,45
   2938c:	9004c03a 	cmpne	r2,r18,zero
   29390:	04e7c83a 	sub	r19,zero,r19
   29394:	df001d85 	stb	fp,118(sp)
   29398:	98a7c83a 	sub	r19,r19,r2
   2939c:	48009f16 	blt	r9,zero,2961c <___vfiprintf_internal_r+0x1338>
   293a0:	00bfdfc4 	movi	r2,-129
   293a4:	a0a8703a 	and	r20,r20,r2
   293a8:	003dd006 	br	28aec <_gp+0xfffe6fa0>
   293ac:	70004c26 	beq	r14,zero,294e0 <___vfiprintf_internal_r+0x11fc>
   293b0:	00800084 	movi	r2,2
   293b4:	d8c01d04 	addi	r3,sp,116
   293b8:	d8c00015 	stw	r3,0(sp)
   293bc:	d8800115 	stw	r2,4(sp)
   293c0:	01000044 	movi	r4,1
   293c4:	d811883a 	mov	r8,sp
   293c8:	003f7306 	br	29198 <_gp+0xfffe764c>
   293cc:	a080100c 	andi	r2,r20,64
   293d0:	da802217 	ldw	r10,136(sp)
   293d4:	103e0626 	beq	r2,zero,28bf0 <_gp+0xfffe70a4>
   293d8:	5480000f 	ldh	r18,0(r10)
   293dc:	52800104 	addi	r10,r10,4
   293e0:	da802215 	stw	r10,136(sp)
   293e4:	9027d7fa 	srai	r19,r18,31
   293e8:	9805883a 	mov	r2,r19
   293ec:	003db806 	br	28ad0 <_gp+0xfffe6f84>
   293f0:	a080040c 	andi	r2,r20,16
   293f4:	1000091e 	bne	r2,zero,2941c <___vfiprintf_internal_r+0x1138>
   293f8:	a2c0100c 	andi	r11,r20,64
   293fc:	58000726 	beq	r11,zero,2941c <___vfiprintf_internal_r+0x1138>
   29400:	da802217 	ldw	r10,136(sp)
   29404:	50800017 	ldw	r2,0(r10)
   29408:	52800104 	addi	r10,r10,4
   2940c:	da802215 	stw	r10,136(sp)
   29410:	da802317 	ldw	r10,140(sp)
   29414:	1280000d 	sth	r10,0(r2)
   29418:	003be706 	br	283b8 <_gp+0xfffe686c>
   2941c:	da802217 	ldw	r10,136(sp)
   29420:	50800017 	ldw	r2,0(r10)
   29424:	52800104 	addi	r10,r10,4
   29428:	da802215 	stw	r10,136(sp)
   2942c:	da802317 	ldw	r10,140(sp)
   29430:	12800015 	stw	r10,0(r2)
   29434:	003be006 	br	283b8 <_gp+0xfffe686c>
   29438:	a080100c 	andi	r2,r20,64
   2943c:	da802217 	ldw	r10,136(sp)
   29440:	10003026 	beq	r2,zero,29504 <___vfiprintf_internal_r+0x1220>
   29444:	5480000b 	ldhu	r18,0(r10)
   29448:	52800104 	addi	r10,r10,4
   2944c:	0027883a 	mov	r19,zero
   29450:	da802215 	stw	r10,136(sp)
   29454:	003d8006 	br	28a58 <_gp+0xfffe6f0c>
   29458:	80c00007 	ldb	r3,0(r16)
   2945c:	003c0006 	br	28460 <_gp+0xfffe6914>
   29460:	a080100c 	andi	r2,r20,64
   29464:	d8001d85 	stb	zero,118(sp)
   29468:	da802217 	ldw	r10,136(sp)
   2946c:	1000201e 	bne	r2,zero,294f0 <___vfiprintf_internal_r+0x120c>
   29470:	50800104 	addi	r2,r10,4
   29474:	54800017 	ldw	r18,0(r10)
   29478:	0027883a 	mov	r19,zero
   2947c:	483def0e 	bge	r9,zero,28c3c <_gp+0xfffe70f0>
   29480:	94c6b03a 	or	r3,r18,r19
   29484:	d8802215 	stw	r2,136(sp)
   29488:	183d4e1e 	bne	r3,zero,289c4 <_gp+0xfffe6e78>
   2948c:	0039883a 	mov	fp,zero
   29490:	0005883a 	mov	r2,zero
   29494:	003e0606 	br	28cb0 <_gp+0xfffe7164>
   29498:	d9402117 	ldw	r5,132(sp)
   2949c:	d9002017 	ldw	r4,128(sp)
   294a0:	d9801a04 	addi	r6,sp,104
   294a4:	da402c15 	stw	r9,176(sp)
   294a8:	db802a15 	stw	r14,168(sp)
   294ac:	00281d00 	call	281d0 <__sprint_r.part.0>
   294b0:	da402c17 	ldw	r9,176(sp)
   294b4:	db802a17 	ldw	r14,168(sp)
   294b8:	103ede1e 	bne	r2,zero,29034 <_gp+0xfffe74e8>
   294bc:	d9401b17 	ldw	r5,108(sp)
   294c0:	d8801c17 	ldw	r2,112(sp)
   294c4:	d811883a 	mov	r8,sp
   294c8:	29000044 	addi	r4,r5,1
   294cc:	003e7406 	br	28ea0 <_gp+0xfffe7354>
   294d0:	00bfffc4 	movi	r2,-1
   294d4:	003c5806 	br	28638 <_gp+0xfffe6aec>
   294d8:	d811883a 	mov	r8,sp
   294dc:	003ee806 	br	29080 <_gp+0xfffe7534>
   294e0:	000b883a 	mov	r5,zero
   294e4:	01000044 	movi	r4,1
   294e8:	d811883a 	mov	r8,sp
   294ec:	003e7c06 	br	28ee0 <_gp+0xfffe7394>
   294f0:	50800104 	addi	r2,r10,4
   294f4:	5480000b 	ldhu	r18,0(r10)
   294f8:	0027883a 	mov	r19,zero
   294fc:	483dcf0e 	bge	r9,zero,28c3c <_gp+0xfffe70f0>
   29500:	003fdf06 	br	29480 <_gp+0xfffe7934>
   29504:	54800017 	ldw	r18,0(r10)
   29508:	52800104 	addi	r10,r10,4
   2950c:	0027883a 	mov	r19,zero
   29510:	da802215 	stw	r10,136(sp)
   29514:	003d5006 	br	28a58 <_gp+0xfffe6f0c>
   29518:	50800104 	addi	r2,r10,4
   2951c:	5480000b 	ldhu	r18,0(r10)
   29520:	0027883a 	mov	r19,zero
   29524:	483f7d0e 	bge	r9,zero,2931c <_gp+0xfffe77d0>
   29528:	003ddc06 	br	28c9c <_gp+0xfffe7150>
   2952c:	d8c02215 	stw	r3,136(sp)
   29530:	0039883a 	mov	fp,zero
   29534:	003ddb06 	br	28ca4 <_gp+0xfffe7158>
   29538:	028000f4 	movhi	r10,3
   2953c:	529f8704 	addi	r10,r10,32284
   29540:	da802415 	stw	r10,144(sp)
   29544:	003e8306 	br	28f54 <_gp+0xfffe7408>
   29548:	d8801c17 	ldw	r2,112(sp)
   2954c:	dd002117 	ldw	r20,132(sp)
   29550:	103eb926 	beq	r2,zero,29038 <_gp+0xfffe74ec>
   29554:	d9002017 	ldw	r4,128(sp)
   29558:	d9801a04 	addi	r6,sp,104
   2955c:	a00b883a 	mov	r5,r20
   29560:	00281d00 	call	281d0 <__sprint_r.part.0>
   29564:	003eb406 	br	29038 <_gp+0xfffe74ec>
   29568:	80c00043 	ldbu	r3,1(r16)
   2956c:	a5000814 	ori	r20,r20,32
   29570:	84000044 	addi	r16,r16,1
   29574:	18c03fcc 	andi	r3,r3,255
   29578:	18c0201c 	xori	r3,r3,128
   2957c:	18ffe004 	addi	r3,r3,-128
   29580:	003bb706 	br	28460 <_gp+0xfffe6914>
   29584:	a809883a 	mov	r4,r21
   29588:	d8c02a15 	stw	r3,168(sp)
   2958c:	da002b15 	stw	r8,172(sp)
   29590:	00219bc0 	call	219bc <strlen>
   29594:	d8c02a17 	ldw	r3,168(sp)
   29598:	1027883a 	mov	r19,r2
   2959c:	df001d83 	ldbu	fp,118(sp)
   295a0:	d8c02215 	stw	r3,136(sp)
   295a4:	0013883a 	mov	r9,zero
   295a8:	da002b17 	ldw	r8,172(sp)
   295ac:	003c4d06 	br	286e4 <_gp+0xfffe6b98>
   295b0:	d9402117 	ldw	r5,132(sp)
   295b4:	d9002017 	ldw	r4,128(sp)
   295b8:	d9801a04 	addi	r6,sp,104
   295bc:	da402c15 	stw	r9,176(sp)
   295c0:	00281d00 	call	281d0 <__sprint_r.part.0>
   295c4:	da402c17 	ldw	r9,176(sp)
   295c8:	103e9a1e 	bne	r2,zero,29034 <_gp+0xfffe74e8>
   295cc:	d9401b17 	ldw	r5,108(sp)
   295d0:	d8801c17 	ldw	r2,112(sp)
   295d4:	d811883a 	mov	r8,sp
   295d8:	29000044 	addi	r4,r5,1
   295dc:	003e4206 	br	28ee8 <_gp+0xfffe739c>
   295e0:	d9401b17 	ldw	r5,108(sp)
   295e4:	010000f4 	movhi	r4,3
   295e8:	211f8b04 	addi	r4,r4,32300
   295ec:	d9002415 	stw	r4,144(sp)
   295f0:	29400044 	addi	r5,r5,1
   295f4:	003c6d06 	br	287ac <_gp+0xfffe6c60>
   295f8:	0039883a 	mov	fp,zero
   295fc:	00800084 	movi	r2,2
   29600:	10803fcc 	andi	r2,r2,255
   29604:	01000044 	movi	r4,1
   29608:	11001e26 	beq	r2,r4,29684 <___vfiprintf_internal_r+0x13a0>
   2960c:	01000084 	movi	r4,2
   29610:	11001e1e 	bne	r2,r4,2968c <___vfiprintf_internal_r+0x13a8>
   29614:	1829883a 	mov	r20,r3
   29618:	003eea06 	br	291c4 <_gp+0xfffe7678>
   2961c:	a007883a 	mov	r3,r20
   29620:	00800044 	movi	r2,1
   29624:	003ff606 	br	29600 <_gp+0xfffe7ab4>
   29628:	00800184 	movi	r2,6
   2962c:	1240012e 	bgeu	r2,r9,29634 <___vfiprintf_internal_r+0x1350>
   29630:	1013883a 	mov	r9,r2
   29634:	4827883a 	mov	r19,r9
   29638:	4825883a 	mov	r18,r9
   2963c:	48001516 	blt	r9,zero,29694 <___vfiprintf_internal_r+0x13b0>
   29640:	054000f4 	movhi	r21,3
   29644:	d8c02215 	stw	r3,136(sp)
   29648:	ad5f2b04 	addi	r21,r21,31916
   2964c:	003d1406 	br	28aa0 <_gp+0xfffe6f54>
   29650:	028000f4 	movhi	r10,3
   29654:	529f8704 	addi	r10,r10,32284
   29658:	da802415 	stw	r10,144(sp)
   2965c:	200d883a 	mov	r6,r4
   29660:	003c9106 	br	288a8 <_gp+0xfffe6d5c>
   29664:	5021883a 	mov	r16,r10
   29668:	0013883a 	mov	r9,zero
   2966c:	003b7d06 	br	28464 <_gp+0xfffe6918>
   29670:	4827883a 	mov	r19,r9
   29674:	df001d83 	ldbu	fp,118(sp)
   29678:	d8c02215 	stw	r3,136(sp)
   2967c:	0013883a 	mov	r9,zero
   29680:	003c1806 	br	286e4 <_gp+0xfffe6b98>
   29684:	1829883a 	mov	r20,r3
   29688:	003d1806 	br	28aec <_gp+0xfffe6fa0>
   2968c:	1829883a 	mov	r20,r3
   29690:	003ccd06 	br	289c8 <_gp+0xfffe6e7c>
   29694:	0025883a 	mov	r18,zero
   29698:	003fe906 	br	29640 <_gp+0xfffe7af4>
   2969c:	d8802217 	ldw	r2,136(sp)
   296a0:	80c00043 	ldbu	r3,1(r16)
   296a4:	5021883a 	mov	r16,r10
   296a8:	12400017 	ldw	r9,0(r2)
   296ac:	10800104 	addi	r2,r2,4
   296b0:	d8802215 	stw	r2,136(sp)
   296b4:	483faf0e 	bge	r9,zero,29574 <_gp+0xfffe7a28>
   296b8:	18c03fcc 	andi	r3,r3,255
   296bc:	18c0201c 	xori	r3,r3,128
   296c0:	027fffc4 	movi	r9,-1
   296c4:	18ffe004 	addi	r3,r3,-128
   296c8:	003b6506 	br	28460 <_gp+0xfffe6914>
   296cc:	d9c01d85 	stb	r7,118(sp)
   296d0:	003ca006 	br	28954 <_gp+0xfffe6e08>
   296d4:	d9c01d85 	stb	r7,118(sp)
   296d8:	003cad06 	br	28990 <_gp+0xfffe6e44>
   296dc:	d9c01d85 	stb	r7,118(sp)
   296e0:	003d7d06 	br	28cd8 <_gp+0xfffe718c>
   296e4:	d9c01d85 	stb	r7,118(sp)
   296e8:	003d5f06 	br	28c68 <_gp+0xfffe711c>
   296ec:	a080004c 	andi	r2,r20,1
   296f0:	0039883a 	mov	fp,zero
   296f4:	10000526 	beq	r2,zero,2970c <___vfiprintf_internal_r+0x1428>
   296f8:	00800c04 	movi	r2,48
   296fc:	d88019c5 	stb	r2,103(sp)
   29700:	dcc02717 	ldw	r19,156(sp)
   29704:	dd4019c4 	addi	r21,sp,103
   29708:	003bf606 	br	286e4 <_gp+0xfffe6b98>
   2970c:	0027883a 	mov	r19,zero
   29710:	dd401a04 	addi	r21,sp,104
   29714:	003bf306 	br	286e4 <_gp+0xfffe6b98>
   29718:	d9c01d85 	stb	r7,118(sp)
   2971c:	003dc806 	br	28e40 <_gp+0xfffe72f4>
   29720:	d9c01d85 	stb	r7,118(sp)
   29724:	003d3a06 	br	28c10 <_gp+0xfffe70c4>
   29728:	d9c01d85 	stb	r7,118(sp)
   2972c:	003d2a06 	br	28bd8 <_gp+0xfffe708c>
   29730:	d9c01d85 	stb	r7,118(sp)
   29734:	003cde06 	br	28ab0 <_gp+0xfffe6f64>
   29738:	d9c01d85 	stb	r7,118(sp)
   2973c:	003cbc06 	br	28a30 <_gp+0xfffe6ee4>

00029740 <__vfiprintf_internal>:
   29740:	00800134 	movhi	r2,4
   29744:	10a6d604 	addi	r2,r2,-25768
   29748:	300f883a 	mov	r7,r6
   2974c:	280d883a 	mov	r6,r5
   29750:	200b883a 	mov	r5,r4
   29754:	11000017 	ldw	r4,0(r2)
   29758:	00282e41 	jmpi	282e4 <___vfiprintf_internal_r>

0002975c <__sbprintf>:
   2975c:	2880030b 	ldhu	r2,12(r5)
   29760:	2ac01917 	ldw	r11,100(r5)
   29764:	2a80038b 	ldhu	r10,14(r5)
   29768:	2a400717 	ldw	r9,28(r5)
   2976c:	2a000917 	ldw	r8,36(r5)
   29770:	defee204 	addi	sp,sp,-1144
   29774:	00c10004 	movi	r3,1024
   29778:	dc011a15 	stw	r16,1128(sp)
   2977c:	10bfff4c 	andi	r2,r2,65533
   29780:	2821883a 	mov	r16,r5
   29784:	d8cb883a 	add	r5,sp,r3
   29788:	dc811c15 	stw	r18,1136(sp)
   2978c:	dc411b15 	stw	r17,1132(sp)
   29790:	dfc11d15 	stw	ra,1140(sp)
   29794:	2025883a 	mov	r18,r4
   29798:	d881030d 	sth	r2,1036(sp)
   2979c:	dac11915 	stw	r11,1124(sp)
   297a0:	da81038d 	sth	r10,1038(sp)
   297a4:	da410715 	stw	r9,1052(sp)
   297a8:	da010915 	stw	r8,1060(sp)
   297ac:	dec10015 	stw	sp,1024(sp)
   297b0:	dec10415 	stw	sp,1040(sp)
   297b4:	d8c10215 	stw	r3,1032(sp)
   297b8:	d8c10515 	stw	r3,1044(sp)
   297bc:	d8010615 	stw	zero,1048(sp)
   297c0:	00282e40 	call	282e4 <___vfiprintf_internal_r>
   297c4:	1023883a 	mov	r17,r2
   297c8:	10000416 	blt	r2,zero,297dc <__sbprintf+0x80>
   297cc:	d9410004 	addi	r5,sp,1024
   297d0:	9009883a 	mov	r4,r18
   297d4:	002591c0 	call	2591c <_fflush_r>
   297d8:	10000d1e 	bne	r2,zero,29810 <__sbprintf+0xb4>
   297dc:	d881030b 	ldhu	r2,1036(sp)
   297e0:	1080100c 	andi	r2,r2,64
   297e4:	10000326 	beq	r2,zero,297f4 <__sbprintf+0x98>
   297e8:	8080030b 	ldhu	r2,12(r16)
   297ec:	10801014 	ori	r2,r2,64
   297f0:	8080030d 	sth	r2,12(r16)
   297f4:	8805883a 	mov	r2,r17
   297f8:	dfc11d17 	ldw	ra,1140(sp)
   297fc:	dc811c17 	ldw	r18,1136(sp)
   29800:	dc411b17 	ldw	r17,1132(sp)
   29804:	dc011a17 	ldw	r16,1128(sp)
   29808:	dec11e04 	addi	sp,sp,1144
   2980c:	f800283a 	ret
   29810:	047fffc4 	movi	r17,-1
   29814:	003ff106 	br	297dc <_gp+0xfffe7c90>

00029818 <__swbuf_r>:
   29818:	defffb04 	addi	sp,sp,-20
   2981c:	dcc00315 	stw	r19,12(sp)
   29820:	dc800215 	stw	r18,8(sp)
   29824:	dc000015 	stw	r16,0(sp)
   29828:	dfc00415 	stw	ra,16(sp)
   2982c:	dc400115 	stw	r17,4(sp)
   29830:	2025883a 	mov	r18,r4
   29834:	2827883a 	mov	r19,r5
   29838:	3021883a 	mov	r16,r6
   2983c:	20000226 	beq	r4,zero,29848 <__swbuf_r+0x30>
   29840:	20800e17 	ldw	r2,56(r4)
   29844:	10004226 	beq	r2,zero,29950 <__swbuf_r+0x138>
   29848:	80800617 	ldw	r2,24(r16)
   2984c:	8100030b 	ldhu	r4,12(r16)
   29850:	80800215 	stw	r2,8(r16)
   29854:	2080020c 	andi	r2,r4,8
   29858:	10003626 	beq	r2,zero,29934 <__swbuf_r+0x11c>
   2985c:	80c00417 	ldw	r3,16(r16)
   29860:	18003426 	beq	r3,zero,29934 <__swbuf_r+0x11c>
   29864:	2088000c 	andi	r2,r4,8192
   29868:	9c403fcc 	andi	r17,r19,255
   2986c:	10001a26 	beq	r2,zero,298d8 <__swbuf_r+0xc0>
   29870:	80800017 	ldw	r2,0(r16)
   29874:	81000517 	ldw	r4,20(r16)
   29878:	10c7c83a 	sub	r3,r2,r3
   2987c:	1900200e 	bge	r3,r4,29900 <__swbuf_r+0xe8>
   29880:	18c00044 	addi	r3,r3,1
   29884:	81000217 	ldw	r4,8(r16)
   29888:	11400044 	addi	r5,r2,1
   2988c:	81400015 	stw	r5,0(r16)
   29890:	213fffc4 	addi	r4,r4,-1
   29894:	81000215 	stw	r4,8(r16)
   29898:	14c00005 	stb	r19,0(r2)
   2989c:	80800517 	ldw	r2,20(r16)
   298a0:	10c01e26 	beq	r2,r3,2991c <__swbuf_r+0x104>
   298a4:	8080030b 	ldhu	r2,12(r16)
   298a8:	1080004c 	andi	r2,r2,1
   298ac:	10000226 	beq	r2,zero,298b8 <__swbuf_r+0xa0>
   298b0:	00800284 	movi	r2,10
   298b4:	88801926 	beq	r17,r2,2991c <__swbuf_r+0x104>
   298b8:	8805883a 	mov	r2,r17
   298bc:	dfc00417 	ldw	ra,16(sp)
   298c0:	dcc00317 	ldw	r19,12(sp)
   298c4:	dc800217 	ldw	r18,8(sp)
   298c8:	dc400117 	ldw	r17,4(sp)
   298cc:	dc000017 	ldw	r16,0(sp)
   298d0:	dec00504 	addi	sp,sp,20
   298d4:	f800283a 	ret
   298d8:	81401917 	ldw	r5,100(r16)
   298dc:	00b7ffc4 	movi	r2,-8193
   298e0:	21080014 	ori	r4,r4,8192
   298e4:	2884703a 	and	r2,r5,r2
   298e8:	80801915 	stw	r2,100(r16)
   298ec:	80800017 	ldw	r2,0(r16)
   298f0:	8100030d 	sth	r4,12(r16)
   298f4:	81000517 	ldw	r4,20(r16)
   298f8:	10c7c83a 	sub	r3,r2,r3
   298fc:	193fe016 	blt	r3,r4,29880 <_gp+0xfffe7d34>
   29900:	800b883a 	mov	r5,r16
   29904:	9009883a 	mov	r4,r18
   29908:	002591c0 	call	2591c <_fflush_r>
   2990c:	1000071e 	bne	r2,zero,2992c <__swbuf_r+0x114>
   29910:	80800017 	ldw	r2,0(r16)
   29914:	00c00044 	movi	r3,1
   29918:	003fda06 	br	29884 <_gp+0xfffe7d38>
   2991c:	800b883a 	mov	r5,r16
   29920:	9009883a 	mov	r4,r18
   29924:	002591c0 	call	2591c <_fflush_r>
   29928:	103fe326 	beq	r2,zero,298b8 <_gp+0xfffe7d6c>
   2992c:	00bfffc4 	movi	r2,-1
   29930:	003fe206 	br	298bc <_gp+0xfffe7d70>
   29934:	800b883a 	mov	r5,r16
   29938:	9009883a 	mov	r4,r18
   2993c:	0023d240 	call	23d24 <__swsetup_r>
   29940:	103ffa1e 	bne	r2,zero,2992c <_gp+0xfffe7de0>
   29944:	8100030b 	ldhu	r4,12(r16)
   29948:	80c00417 	ldw	r3,16(r16)
   2994c:	003fc506 	br	29864 <_gp+0xfffe7d18>
   29950:	0025cf80 	call	25cf8 <__sinit>
   29954:	003fbc06 	br	29848 <_gp+0xfffe7cfc>

00029958 <__swbuf>:
   29958:	00800134 	movhi	r2,4
   2995c:	10a6d604 	addi	r2,r2,-25768
   29960:	280d883a 	mov	r6,r5
   29964:	200b883a 	mov	r5,r4
   29968:	11000017 	ldw	r4,0(r2)
   2996c:	00298181 	jmpi	29818 <__swbuf_r>

00029970 <_write_r>:
   29970:	defffd04 	addi	sp,sp,-12
   29974:	2805883a 	mov	r2,r5
   29978:	dc000015 	stw	r16,0(sp)
   2997c:	04000134 	movhi	r16,4
   29980:	dc400115 	stw	r17,4(sp)
   29984:	300b883a 	mov	r5,r6
   29988:	842de204 	addi	r16,r16,-18552
   2998c:	2023883a 	mov	r17,r4
   29990:	380d883a 	mov	r6,r7
   29994:	1009883a 	mov	r4,r2
   29998:	dfc00215 	stw	ra,8(sp)
   2999c:	80000015 	stw	zero,0(r16)
   299a0:	002dc5c0 	call	2dc5c <write>
   299a4:	00ffffc4 	movi	r3,-1
   299a8:	10c00526 	beq	r2,r3,299c0 <_write_r+0x50>
   299ac:	dfc00217 	ldw	ra,8(sp)
   299b0:	dc400117 	ldw	r17,4(sp)
   299b4:	dc000017 	ldw	r16,0(sp)
   299b8:	dec00304 	addi	sp,sp,12
   299bc:	f800283a 	ret
   299c0:	80c00017 	ldw	r3,0(r16)
   299c4:	183ff926 	beq	r3,zero,299ac <_gp+0xfffe7e60>
   299c8:	88c00015 	stw	r3,0(r17)
   299cc:	003ff706 	br	299ac <_gp+0xfffe7e60>

000299d0 <_close_r>:
   299d0:	defffd04 	addi	sp,sp,-12
   299d4:	dc000015 	stw	r16,0(sp)
   299d8:	04000134 	movhi	r16,4
   299dc:	dc400115 	stw	r17,4(sp)
   299e0:	842de204 	addi	r16,r16,-18552
   299e4:	2023883a 	mov	r17,r4
   299e8:	2809883a 	mov	r4,r5
   299ec:	dfc00215 	stw	ra,8(sp)
   299f0:	80000015 	stw	zero,0(r16)
   299f4:	002d4540 	call	2d454 <close>
   299f8:	00ffffc4 	movi	r3,-1
   299fc:	10c00526 	beq	r2,r3,29a14 <_close_r+0x44>
   29a00:	dfc00217 	ldw	ra,8(sp)
   29a04:	dc400117 	ldw	r17,4(sp)
   29a08:	dc000017 	ldw	r16,0(sp)
   29a0c:	dec00304 	addi	sp,sp,12
   29a10:	f800283a 	ret
   29a14:	80c00017 	ldw	r3,0(r16)
   29a18:	183ff926 	beq	r3,zero,29a00 <_gp+0xfffe7eb4>
   29a1c:	88c00015 	stw	r3,0(r17)
   29a20:	003ff706 	br	29a00 <_gp+0xfffe7eb4>

00029a24 <_calloc_r>:
   29a24:	298b383a 	mul	r5,r5,r6
   29a28:	defffe04 	addi	sp,sp,-8
   29a2c:	dfc00115 	stw	ra,4(sp)
   29a30:	dc000015 	stw	r16,0(sp)
   29a34:	00209580 	call	20958 <_malloc_r>
   29a38:	10002926 	beq	r2,zero,29ae0 <_calloc_r+0xbc>
   29a3c:	11bfff17 	ldw	r6,-4(r2)
   29a40:	1021883a 	mov	r16,r2
   29a44:	00bfff04 	movi	r2,-4
   29a48:	308c703a 	and	r6,r6,r2
   29a4c:	00c00904 	movi	r3,36
   29a50:	308d883a 	add	r6,r6,r2
   29a54:	19801636 	bltu	r3,r6,29ab0 <_calloc_r+0x8c>
   29a58:	008004c4 	movi	r2,19
   29a5c:	11800b2e 	bgeu	r2,r6,29a8c <_calloc_r+0x68>
   29a60:	80000015 	stw	zero,0(r16)
   29a64:	80000115 	stw	zero,4(r16)
   29a68:	008006c4 	movi	r2,27
   29a6c:	11801a2e 	bgeu	r2,r6,29ad8 <_calloc_r+0xb4>
   29a70:	80000215 	stw	zero,8(r16)
   29a74:	80000315 	stw	zero,12(r16)
   29a78:	30c0151e 	bne	r6,r3,29ad0 <_calloc_r+0xac>
   29a7c:	80000415 	stw	zero,16(r16)
   29a80:	80800604 	addi	r2,r16,24
   29a84:	80000515 	stw	zero,20(r16)
   29a88:	00000106 	br	29a90 <_calloc_r+0x6c>
   29a8c:	8005883a 	mov	r2,r16
   29a90:	10000015 	stw	zero,0(r2)
   29a94:	10000115 	stw	zero,4(r2)
   29a98:	10000215 	stw	zero,8(r2)
   29a9c:	8005883a 	mov	r2,r16
   29aa0:	dfc00117 	ldw	ra,4(sp)
   29aa4:	dc000017 	ldw	r16,0(sp)
   29aa8:	dec00204 	addi	sp,sp,8
   29aac:	f800283a 	ret
   29ab0:	000b883a 	mov	r5,zero
   29ab4:	8009883a 	mov	r4,r16
   29ab8:	00211640 	call	21164 <memset>
   29abc:	8005883a 	mov	r2,r16
   29ac0:	dfc00117 	ldw	ra,4(sp)
   29ac4:	dc000017 	ldw	r16,0(sp)
   29ac8:	dec00204 	addi	sp,sp,8
   29acc:	f800283a 	ret
   29ad0:	80800404 	addi	r2,r16,16
   29ad4:	003fee06 	br	29a90 <_gp+0xfffe7f44>
   29ad8:	80800204 	addi	r2,r16,8
   29adc:	003fec06 	br	29a90 <_gp+0xfffe7f44>
   29ae0:	0005883a 	mov	r2,zero
   29ae4:	003fee06 	br	29aa0 <_gp+0xfffe7f54>

00029ae8 <_fclose_r>:
   29ae8:	28003926 	beq	r5,zero,29bd0 <_fclose_r+0xe8>
   29aec:	defffc04 	addi	sp,sp,-16
   29af0:	dc400115 	stw	r17,4(sp)
   29af4:	dc000015 	stw	r16,0(sp)
   29af8:	dfc00315 	stw	ra,12(sp)
   29afc:	dc800215 	stw	r18,8(sp)
   29b00:	2023883a 	mov	r17,r4
   29b04:	2821883a 	mov	r16,r5
   29b08:	20000226 	beq	r4,zero,29b14 <_fclose_r+0x2c>
   29b0c:	20800e17 	ldw	r2,56(r4)
   29b10:	10002726 	beq	r2,zero,29bb0 <_fclose_r+0xc8>
   29b14:	8080030f 	ldh	r2,12(r16)
   29b18:	1000071e 	bne	r2,zero,29b38 <_fclose_r+0x50>
   29b1c:	0005883a 	mov	r2,zero
   29b20:	dfc00317 	ldw	ra,12(sp)
   29b24:	dc800217 	ldw	r18,8(sp)
   29b28:	dc400117 	ldw	r17,4(sp)
   29b2c:	dc000017 	ldw	r16,0(sp)
   29b30:	dec00404 	addi	sp,sp,16
   29b34:	f800283a 	ret
   29b38:	800b883a 	mov	r5,r16
   29b3c:	8809883a 	mov	r4,r17
   29b40:	00257000 	call	25700 <__sflush_r>
   29b44:	1025883a 	mov	r18,r2
   29b48:	80800b17 	ldw	r2,44(r16)
   29b4c:	10000426 	beq	r2,zero,29b60 <_fclose_r+0x78>
   29b50:	81400717 	ldw	r5,28(r16)
   29b54:	8809883a 	mov	r4,r17
   29b58:	103ee83a 	callr	r2
   29b5c:	10001616 	blt	r2,zero,29bb8 <_fclose_r+0xd0>
   29b60:	8080030b 	ldhu	r2,12(r16)
   29b64:	1080200c 	andi	r2,r2,128
   29b68:	1000151e 	bne	r2,zero,29bc0 <_fclose_r+0xd8>
   29b6c:	81400c17 	ldw	r5,48(r16)
   29b70:	28000526 	beq	r5,zero,29b88 <_fclose_r+0xa0>
   29b74:	80801004 	addi	r2,r16,64
   29b78:	28800226 	beq	r5,r2,29b84 <_fclose_r+0x9c>
   29b7c:	8809883a 	mov	r4,r17
   29b80:	0025e6c0 	call	25e6c <_free_r>
   29b84:	80000c15 	stw	zero,48(r16)
   29b88:	81401117 	ldw	r5,68(r16)
   29b8c:	28000326 	beq	r5,zero,29b9c <_fclose_r+0xb4>
   29b90:	8809883a 	mov	r4,r17
   29b94:	0025e6c0 	call	25e6c <_free_r>
   29b98:	80001115 	stw	zero,68(r16)
   29b9c:	0025d080 	call	25d08 <__sfp_lock_acquire>
   29ba0:	8000030d 	sth	zero,12(r16)
   29ba4:	0025d0c0 	call	25d0c <__sfp_lock_release>
   29ba8:	9005883a 	mov	r2,r18
   29bac:	003fdc06 	br	29b20 <_gp+0xfffe7fd4>
   29bb0:	0025cf80 	call	25cf8 <__sinit>
   29bb4:	003fd706 	br	29b14 <_gp+0xfffe7fc8>
   29bb8:	04bfffc4 	movi	r18,-1
   29bbc:	003fe806 	br	29b60 <_gp+0xfffe8014>
   29bc0:	81400417 	ldw	r5,16(r16)
   29bc4:	8809883a 	mov	r4,r17
   29bc8:	0025e6c0 	call	25e6c <_free_r>
   29bcc:	003fe706 	br	29b6c <_gp+0xfffe8020>
   29bd0:	0005883a 	mov	r2,zero
   29bd4:	f800283a 	ret

00029bd8 <fclose>:
   29bd8:	00800134 	movhi	r2,4
   29bdc:	10a6d604 	addi	r2,r2,-25768
   29be0:	200b883a 	mov	r5,r4
   29be4:	11000017 	ldw	r4,0(r2)
   29be8:	0029ae81 	jmpi	29ae8 <_fclose_r>

00029bec <__fputwc>:
   29bec:	defff804 	addi	sp,sp,-32
   29bf0:	dcc00415 	stw	r19,16(sp)
   29bf4:	dc800315 	stw	r18,12(sp)
   29bf8:	dc000115 	stw	r16,4(sp)
   29bfc:	dfc00715 	stw	ra,28(sp)
   29c00:	dd400615 	stw	r21,24(sp)
   29c04:	dd000515 	stw	r20,20(sp)
   29c08:	dc400215 	stw	r17,8(sp)
   29c0c:	2027883a 	mov	r19,r4
   29c10:	2825883a 	mov	r18,r5
   29c14:	3021883a 	mov	r16,r6
   29c18:	00268480 	call	26848 <__locale_mb_cur_max>
   29c1c:	00c00044 	movi	r3,1
   29c20:	10c03e26 	beq	r2,r3,29d1c <__fputwc+0x130>
   29c24:	81c01704 	addi	r7,r16,92
   29c28:	900d883a 	mov	r6,r18
   29c2c:	d80b883a 	mov	r5,sp
   29c30:	9809883a 	mov	r4,r19
   29c34:	0029f640 	call	29f64 <_wcrtomb_r>
   29c38:	1029883a 	mov	r20,r2
   29c3c:	00bfffc4 	movi	r2,-1
   29c40:	a0802026 	beq	r20,r2,29cc4 <__fputwc+0xd8>
   29c44:	d9400003 	ldbu	r5,0(sp)
   29c48:	a0001c26 	beq	r20,zero,29cbc <__fputwc+0xd0>
   29c4c:	0023883a 	mov	r17,zero
   29c50:	05400284 	movi	r21,10
   29c54:	00000906 	br	29c7c <__fputwc+0x90>
   29c58:	80800017 	ldw	r2,0(r16)
   29c5c:	11400005 	stb	r5,0(r2)
   29c60:	80c00017 	ldw	r3,0(r16)
   29c64:	18c00044 	addi	r3,r3,1
   29c68:	80c00015 	stw	r3,0(r16)
   29c6c:	8c400044 	addi	r17,r17,1
   29c70:	dc45883a 	add	r2,sp,r17
   29c74:	8d00112e 	bgeu	r17,r20,29cbc <__fputwc+0xd0>
   29c78:	11400003 	ldbu	r5,0(r2)
   29c7c:	80c00217 	ldw	r3,8(r16)
   29c80:	18ffffc4 	addi	r3,r3,-1
   29c84:	80c00215 	stw	r3,8(r16)
   29c88:	183ff30e 	bge	r3,zero,29c58 <_gp+0xfffe810c>
   29c8c:	80800617 	ldw	r2,24(r16)
   29c90:	18801916 	blt	r3,r2,29cf8 <__fputwc+0x10c>
   29c94:	80800017 	ldw	r2,0(r16)
   29c98:	11400005 	stb	r5,0(r2)
   29c9c:	80800017 	ldw	r2,0(r16)
   29ca0:	10c00003 	ldbu	r3,0(r2)
   29ca4:	10800044 	addi	r2,r2,1
   29ca8:	1d402326 	beq	r3,r21,29d38 <__fputwc+0x14c>
   29cac:	80800015 	stw	r2,0(r16)
   29cb0:	8c400044 	addi	r17,r17,1
   29cb4:	dc45883a 	add	r2,sp,r17
   29cb8:	8d3fef36 	bltu	r17,r20,29c78 <_gp+0xfffe812c>
   29cbc:	9005883a 	mov	r2,r18
   29cc0:	00000406 	br	29cd4 <__fputwc+0xe8>
   29cc4:	80c0030b 	ldhu	r3,12(r16)
   29cc8:	a005883a 	mov	r2,r20
   29ccc:	18c01014 	ori	r3,r3,64
   29cd0:	80c0030d 	sth	r3,12(r16)
   29cd4:	dfc00717 	ldw	ra,28(sp)
   29cd8:	dd400617 	ldw	r21,24(sp)
   29cdc:	dd000517 	ldw	r20,20(sp)
   29ce0:	dcc00417 	ldw	r19,16(sp)
   29ce4:	dc800317 	ldw	r18,12(sp)
   29ce8:	dc400217 	ldw	r17,8(sp)
   29cec:	dc000117 	ldw	r16,4(sp)
   29cf0:	dec00804 	addi	sp,sp,32
   29cf4:	f800283a 	ret
   29cf8:	800d883a 	mov	r6,r16
   29cfc:	29403fcc 	andi	r5,r5,255
   29d00:	9809883a 	mov	r4,r19
   29d04:	00298180 	call	29818 <__swbuf_r>
   29d08:	10bfffe0 	cmpeqi	r2,r2,-1
   29d0c:	10803fcc 	andi	r2,r2,255
   29d10:	103fd626 	beq	r2,zero,29c6c <_gp+0xfffe8120>
   29d14:	00bfffc4 	movi	r2,-1
   29d18:	003fee06 	br	29cd4 <_gp+0xfffe8188>
   29d1c:	90ffffc4 	addi	r3,r18,-1
   29d20:	01003f84 	movi	r4,254
   29d24:	20ffbf36 	bltu	r4,r3,29c24 <_gp+0xfffe80d8>
   29d28:	900b883a 	mov	r5,r18
   29d2c:	dc800005 	stb	r18,0(sp)
   29d30:	1029883a 	mov	r20,r2
   29d34:	003fc506 	br	29c4c <_gp+0xfffe8100>
   29d38:	800d883a 	mov	r6,r16
   29d3c:	a80b883a 	mov	r5,r21
   29d40:	9809883a 	mov	r4,r19
   29d44:	00298180 	call	29818 <__swbuf_r>
   29d48:	10bfffe0 	cmpeqi	r2,r2,-1
   29d4c:	003fef06 	br	29d0c <_gp+0xfffe81c0>

00029d50 <_fputwc_r>:
   29d50:	3080030b 	ldhu	r2,12(r6)
   29d54:	10c8000c 	andi	r3,r2,8192
   29d58:	1800051e 	bne	r3,zero,29d70 <_fputwc_r+0x20>
   29d5c:	30c01917 	ldw	r3,100(r6)
   29d60:	10880014 	ori	r2,r2,8192
   29d64:	3080030d 	sth	r2,12(r6)
   29d68:	18880014 	ori	r2,r3,8192
   29d6c:	30801915 	stw	r2,100(r6)
   29d70:	0029bec1 	jmpi	29bec <__fputwc>

00029d74 <fputwc>:
   29d74:	00800134 	movhi	r2,4
   29d78:	defffc04 	addi	sp,sp,-16
   29d7c:	10a6d604 	addi	r2,r2,-25768
   29d80:	dc000115 	stw	r16,4(sp)
   29d84:	14000017 	ldw	r16,0(r2)
   29d88:	dc400215 	stw	r17,8(sp)
   29d8c:	dfc00315 	stw	ra,12(sp)
   29d90:	2023883a 	mov	r17,r4
   29d94:	80000226 	beq	r16,zero,29da0 <fputwc+0x2c>
   29d98:	80800e17 	ldw	r2,56(r16)
   29d9c:	10001026 	beq	r2,zero,29de0 <fputwc+0x6c>
   29da0:	2880030b 	ldhu	r2,12(r5)
   29da4:	10c8000c 	andi	r3,r2,8192
   29da8:	1800051e 	bne	r3,zero,29dc0 <fputwc+0x4c>
   29dac:	28c01917 	ldw	r3,100(r5)
   29db0:	10880014 	ori	r2,r2,8192
   29db4:	2880030d 	sth	r2,12(r5)
   29db8:	18880014 	ori	r2,r3,8192
   29dbc:	28801915 	stw	r2,100(r5)
   29dc0:	280d883a 	mov	r6,r5
   29dc4:	8009883a 	mov	r4,r16
   29dc8:	880b883a 	mov	r5,r17
   29dcc:	dfc00317 	ldw	ra,12(sp)
   29dd0:	dc400217 	ldw	r17,8(sp)
   29dd4:	dc000117 	ldw	r16,4(sp)
   29dd8:	dec00404 	addi	sp,sp,16
   29ddc:	0029bec1 	jmpi	29bec <__fputwc>
   29de0:	8009883a 	mov	r4,r16
   29de4:	d9400015 	stw	r5,0(sp)
   29de8:	0025cf80 	call	25cf8 <__sinit>
   29dec:	d9400017 	ldw	r5,0(sp)
   29df0:	003feb06 	br	29da0 <_gp+0xfffe8254>

00029df4 <_fstat_r>:
   29df4:	defffd04 	addi	sp,sp,-12
   29df8:	2805883a 	mov	r2,r5
   29dfc:	dc000015 	stw	r16,0(sp)
   29e00:	04000134 	movhi	r16,4
   29e04:	dc400115 	stw	r17,4(sp)
   29e08:	842de204 	addi	r16,r16,-18552
   29e0c:	2023883a 	mov	r17,r4
   29e10:	300b883a 	mov	r5,r6
   29e14:	1009883a 	mov	r4,r2
   29e18:	dfc00215 	stw	ra,8(sp)
   29e1c:	80000015 	stw	zero,0(r16)
   29e20:	002d58c0 	call	2d58c <fstat>
   29e24:	00ffffc4 	movi	r3,-1
   29e28:	10c00526 	beq	r2,r3,29e40 <_fstat_r+0x4c>
   29e2c:	dfc00217 	ldw	ra,8(sp)
   29e30:	dc400117 	ldw	r17,4(sp)
   29e34:	dc000017 	ldw	r16,0(sp)
   29e38:	dec00304 	addi	sp,sp,12
   29e3c:	f800283a 	ret
   29e40:	80c00017 	ldw	r3,0(r16)
   29e44:	183ff926 	beq	r3,zero,29e2c <_gp+0xfffe82e0>
   29e48:	88c00015 	stw	r3,0(r17)
   29e4c:	003ff706 	br	29e2c <_gp+0xfffe82e0>

00029e50 <_isatty_r>:
   29e50:	defffd04 	addi	sp,sp,-12
   29e54:	dc000015 	stw	r16,0(sp)
   29e58:	04000134 	movhi	r16,4
   29e5c:	dc400115 	stw	r17,4(sp)
   29e60:	842de204 	addi	r16,r16,-18552
   29e64:	2023883a 	mov	r17,r4
   29e68:	2809883a 	mov	r4,r5
   29e6c:	dfc00215 	stw	ra,8(sp)
   29e70:	80000015 	stw	zero,0(r16)
   29e74:	002d6780 	call	2d678 <isatty>
   29e78:	00ffffc4 	movi	r3,-1
   29e7c:	10c00526 	beq	r2,r3,29e94 <_isatty_r+0x44>
   29e80:	dfc00217 	ldw	ra,8(sp)
   29e84:	dc400117 	ldw	r17,4(sp)
   29e88:	dc000017 	ldw	r16,0(sp)
   29e8c:	dec00304 	addi	sp,sp,12
   29e90:	f800283a 	ret
   29e94:	80c00017 	ldw	r3,0(r16)
   29e98:	183ff926 	beq	r3,zero,29e80 <_gp+0xfffe8334>
   29e9c:	88c00015 	stw	r3,0(r17)
   29ea0:	003ff706 	br	29e80 <_gp+0xfffe8334>

00029ea4 <_lseek_r>:
   29ea4:	defffd04 	addi	sp,sp,-12
   29ea8:	2805883a 	mov	r2,r5
   29eac:	dc000015 	stw	r16,0(sp)
   29eb0:	04000134 	movhi	r16,4
   29eb4:	dc400115 	stw	r17,4(sp)
   29eb8:	300b883a 	mov	r5,r6
   29ebc:	842de204 	addi	r16,r16,-18552
   29ec0:	2023883a 	mov	r17,r4
   29ec4:	380d883a 	mov	r6,r7
   29ec8:	1009883a 	mov	r4,r2
   29ecc:	dfc00215 	stw	ra,8(sp)
   29ed0:	80000015 	stw	zero,0(r16)
   29ed4:	002d8440 	call	2d844 <lseek>
   29ed8:	00ffffc4 	movi	r3,-1
   29edc:	10c00526 	beq	r2,r3,29ef4 <_lseek_r+0x50>
   29ee0:	dfc00217 	ldw	ra,8(sp)
   29ee4:	dc400117 	ldw	r17,4(sp)
   29ee8:	dc000017 	ldw	r16,0(sp)
   29eec:	dec00304 	addi	sp,sp,12
   29ef0:	f800283a 	ret
   29ef4:	80c00017 	ldw	r3,0(r16)
   29ef8:	183ff926 	beq	r3,zero,29ee0 <_gp+0xfffe8394>
   29efc:	88c00015 	stw	r3,0(r17)
   29f00:	003ff706 	br	29ee0 <_gp+0xfffe8394>

00029f04 <_read_r>:
   29f04:	defffd04 	addi	sp,sp,-12
   29f08:	2805883a 	mov	r2,r5
   29f0c:	dc000015 	stw	r16,0(sp)
   29f10:	04000134 	movhi	r16,4
   29f14:	dc400115 	stw	r17,4(sp)
   29f18:	300b883a 	mov	r5,r6
   29f1c:	842de204 	addi	r16,r16,-18552
   29f20:	2023883a 	mov	r17,r4
   29f24:	380d883a 	mov	r6,r7
   29f28:	1009883a 	mov	r4,r2
   29f2c:	dfc00215 	stw	ra,8(sp)
   29f30:	80000015 	stw	zero,0(r16)
   29f34:	002da100 	call	2da10 <read>
   29f38:	00ffffc4 	movi	r3,-1
   29f3c:	10c00526 	beq	r2,r3,29f54 <_read_r+0x50>
   29f40:	dfc00217 	ldw	ra,8(sp)
   29f44:	dc400117 	ldw	r17,4(sp)
   29f48:	dc000017 	ldw	r16,0(sp)
   29f4c:	dec00304 	addi	sp,sp,12
   29f50:	f800283a 	ret
   29f54:	80c00017 	ldw	r3,0(r16)
   29f58:	183ff926 	beq	r3,zero,29f40 <_gp+0xfffe83f4>
   29f5c:	88c00015 	stw	r3,0(r17)
   29f60:	003ff706 	br	29f40 <_gp+0xfffe83f4>

00029f64 <_wcrtomb_r>:
   29f64:	defff604 	addi	sp,sp,-40
   29f68:	00800134 	movhi	r2,4
   29f6c:	dc800815 	stw	r18,32(sp)
   29f70:	dc400715 	stw	r17,28(sp)
   29f74:	dc000615 	stw	r16,24(sp)
   29f78:	10a6d804 	addi	r2,r2,-25760
   29f7c:	dfc00915 	stw	ra,36(sp)
   29f80:	2021883a 	mov	r16,r4
   29f84:	3823883a 	mov	r17,r7
   29f88:	14800017 	ldw	r18,0(r2)
   29f8c:	28001426 	beq	r5,zero,29fe0 <_wcrtomb_r+0x7c>
   29f90:	d9400415 	stw	r5,16(sp)
   29f94:	d9800515 	stw	r6,20(sp)
   29f98:	002683c0 	call	2683c <__locale_charset>
   29f9c:	d9800517 	ldw	r6,20(sp)
   29fa0:	d9400417 	ldw	r5,16(sp)
   29fa4:	100f883a 	mov	r7,r2
   29fa8:	dc400015 	stw	r17,0(sp)
   29fac:	8009883a 	mov	r4,r16
   29fb0:	903ee83a 	callr	r18
   29fb4:	00ffffc4 	movi	r3,-1
   29fb8:	10c0031e 	bne	r2,r3,29fc8 <_wcrtomb_r+0x64>
   29fbc:	88000015 	stw	zero,0(r17)
   29fc0:	00c02284 	movi	r3,138
   29fc4:	80c00015 	stw	r3,0(r16)
   29fc8:	dfc00917 	ldw	ra,36(sp)
   29fcc:	dc800817 	ldw	r18,32(sp)
   29fd0:	dc400717 	ldw	r17,28(sp)
   29fd4:	dc000617 	ldw	r16,24(sp)
   29fd8:	dec00a04 	addi	sp,sp,40
   29fdc:	f800283a 	ret
   29fe0:	002683c0 	call	2683c <__locale_charset>
   29fe4:	100f883a 	mov	r7,r2
   29fe8:	dc400015 	stw	r17,0(sp)
   29fec:	000d883a 	mov	r6,zero
   29ff0:	d9400104 	addi	r5,sp,4
   29ff4:	8009883a 	mov	r4,r16
   29ff8:	903ee83a 	callr	r18
   29ffc:	003fed06 	br	29fb4 <_gp+0xfffe8468>

0002a000 <wcrtomb>:
   2a000:	defff604 	addi	sp,sp,-40
   2a004:	00800134 	movhi	r2,4
   2a008:	dc800615 	stw	r18,24(sp)
   2a00c:	dc400515 	stw	r17,20(sp)
   2a010:	10a6d604 	addi	r2,r2,-25768
   2a014:	dfc00915 	stw	ra,36(sp)
   2a018:	dd000815 	stw	r20,32(sp)
   2a01c:	dcc00715 	stw	r19,28(sp)
   2a020:	dc000415 	stw	r16,16(sp)
   2a024:	3025883a 	mov	r18,r6
   2a028:	14400017 	ldw	r17,0(r2)
   2a02c:	20001926 	beq	r4,zero,2a094 <wcrtomb+0x94>
   2a030:	00800134 	movhi	r2,4
   2a034:	10a6d804 	addi	r2,r2,-25760
   2a038:	15000017 	ldw	r20,0(r2)
   2a03c:	2021883a 	mov	r16,r4
   2a040:	2827883a 	mov	r19,r5
   2a044:	002683c0 	call	2683c <__locale_charset>
   2a048:	100f883a 	mov	r7,r2
   2a04c:	dc800015 	stw	r18,0(sp)
   2a050:	980d883a 	mov	r6,r19
   2a054:	800b883a 	mov	r5,r16
   2a058:	8809883a 	mov	r4,r17
   2a05c:	a03ee83a 	callr	r20
   2a060:	00ffffc4 	movi	r3,-1
   2a064:	10c0031e 	bne	r2,r3,2a074 <wcrtomb+0x74>
   2a068:	90000015 	stw	zero,0(r18)
   2a06c:	00c02284 	movi	r3,138
   2a070:	88c00015 	stw	r3,0(r17)
   2a074:	dfc00917 	ldw	ra,36(sp)
   2a078:	dd000817 	ldw	r20,32(sp)
   2a07c:	dcc00717 	ldw	r19,28(sp)
   2a080:	dc800617 	ldw	r18,24(sp)
   2a084:	dc400517 	ldw	r17,20(sp)
   2a088:	dc000417 	ldw	r16,16(sp)
   2a08c:	dec00a04 	addi	sp,sp,40
   2a090:	f800283a 	ret
   2a094:	00800134 	movhi	r2,4
   2a098:	10a6d804 	addi	r2,r2,-25760
   2a09c:	14000017 	ldw	r16,0(r2)
   2a0a0:	002683c0 	call	2683c <__locale_charset>
   2a0a4:	100f883a 	mov	r7,r2
   2a0a8:	dc800015 	stw	r18,0(sp)
   2a0ac:	000d883a 	mov	r6,zero
   2a0b0:	d9400104 	addi	r5,sp,4
   2a0b4:	8809883a 	mov	r4,r17
   2a0b8:	803ee83a 	callr	r16
   2a0bc:	003fe806 	br	2a060 <_gp+0xfffe8514>

0002a0c0 <__ascii_wctomb>:
   2a0c0:	28000526 	beq	r5,zero,2a0d8 <__ascii_wctomb+0x18>
   2a0c4:	00803fc4 	movi	r2,255
   2a0c8:	11800536 	bltu	r2,r6,2a0e0 <__ascii_wctomb+0x20>
   2a0cc:	29800005 	stb	r6,0(r5)
   2a0d0:	00800044 	movi	r2,1
   2a0d4:	f800283a 	ret
   2a0d8:	0005883a 	mov	r2,zero
   2a0dc:	f800283a 	ret
   2a0e0:	00802284 	movi	r2,138
   2a0e4:	20800015 	stw	r2,0(r4)
   2a0e8:	00bfffc4 	movi	r2,-1
   2a0ec:	f800283a 	ret

0002a0f0 <_wctomb_r>:
   2a0f0:	00800134 	movhi	r2,4
   2a0f4:	defff904 	addi	sp,sp,-28
   2a0f8:	10a6d804 	addi	r2,r2,-25760
   2a0fc:	dfc00615 	stw	ra,24(sp)
   2a100:	dc400515 	stw	r17,20(sp)
   2a104:	dc000415 	stw	r16,16(sp)
   2a108:	3823883a 	mov	r17,r7
   2a10c:	14000017 	ldw	r16,0(r2)
   2a110:	d9000115 	stw	r4,4(sp)
   2a114:	d9400215 	stw	r5,8(sp)
   2a118:	d9800315 	stw	r6,12(sp)
   2a11c:	002683c0 	call	2683c <__locale_charset>
   2a120:	d9800317 	ldw	r6,12(sp)
   2a124:	d9400217 	ldw	r5,8(sp)
   2a128:	d9000117 	ldw	r4,4(sp)
   2a12c:	100f883a 	mov	r7,r2
   2a130:	dc400015 	stw	r17,0(sp)
   2a134:	803ee83a 	callr	r16
   2a138:	dfc00617 	ldw	ra,24(sp)
   2a13c:	dc400517 	ldw	r17,20(sp)
   2a140:	dc000417 	ldw	r16,16(sp)
   2a144:	dec00704 	addi	sp,sp,28
   2a148:	f800283a 	ret

0002a14c <__udivdi3>:
   2a14c:	defff504 	addi	sp,sp,-44
   2a150:	dcc00415 	stw	r19,16(sp)
   2a154:	dc000115 	stw	r16,4(sp)
   2a158:	dfc00a15 	stw	ra,40(sp)
   2a15c:	df000915 	stw	fp,36(sp)
   2a160:	ddc00815 	stw	r23,32(sp)
   2a164:	dd800715 	stw	r22,28(sp)
   2a168:	dd400615 	stw	r21,24(sp)
   2a16c:	dd000515 	stw	r20,20(sp)
   2a170:	dc800315 	stw	r18,12(sp)
   2a174:	dc400215 	stw	r17,8(sp)
   2a178:	2027883a 	mov	r19,r4
   2a17c:	2821883a 	mov	r16,r5
   2a180:	3800411e 	bne	r7,zero,2a288 <__udivdi3+0x13c>
   2a184:	3023883a 	mov	r17,r6
   2a188:	2025883a 	mov	r18,r4
   2a18c:	2980522e 	bgeu	r5,r6,2a2d8 <__udivdi3+0x18c>
   2a190:	00bfffd4 	movui	r2,65535
   2a194:	282d883a 	mov	r22,r5
   2a198:	1180a836 	bltu	r2,r6,2a43c <__udivdi3+0x2f0>
   2a19c:	00803fc4 	movi	r2,255
   2a1a0:	1185803a 	cmpltu	r2,r2,r6
   2a1a4:	100490fa 	slli	r2,r2,3
   2a1a8:	3086d83a 	srl	r3,r6,r2
   2a1ac:	010000f4 	movhi	r4,3
   2a1b0:	211f8f04 	addi	r4,r4,32316
   2a1b4:	20c7883a 	add	r3,r4,r3
   2a1b8:	18c00003 	ldbu	r3,0(r3)
   2a1bc:	1885883a 	add	r2,r3,r2
   2a1c0:	00c00804 	movi	r3,32
   2a1c4:	1887c83a 	sub	r3,r3,r2
   2a1c8:	18000526 	beq	r3,zero,2a1e0 <__udivdi3+0x94>
   2a1cc:	80e0983a 	sll	r16,r16,r3
   2a1d0:	9884d83a 	srl	r2,r19,r2
   2a1d4:	30e2983a 	sll	r17,r6,r3
   2a1d8:	98e4983a 	sll	r18,r19,r3
   2a1dc:	142cb03a 	or	r22,r2,r16
   2a1e0:	882ad43a 	srli	r21,r17,16
   2a1e4:	b009883a 	mov	r4,r22
   2a1e8:	8d3fffcc 	andi	r20,r17,65535
   2a1ec:	a80b883a 	mov	r5,r21
   2a1f0:	002ad580 	call	2ad58 <__umodsi3>
   2a1f4:	b009883a 	mov	r4,r22
   2a1f8:	a80b883a 	mov	r5,r21
   2a1fc:	1027883a 	mov	r19,r2
   2a200:	002acf40 	call	2acf4 <__udivsi3>
   2a204:	102d883a 	mov	r22,r2
   2a208:	9826943a 	slli	r19,r19,16
   2a20c:	9004d43a 	srli	r2,r18,16
   2a210:	a5a1383a 	mul	r16,r20,r22
   2a214:	14c4b03a 	or	r2,r2,r19
   2a218:	1400052e 	bgeu	r2,r16,2a230 <__udivdi3+0xe4>
   2a21c:	1445883a 	add	r2,r2,r17
   2a220:	b0ffffc4 	addi	r3,r22,-1
   2a224:	14400136 	bltu	r2,r17,2a22c <__udivdi3+0xe0>
   2a228:	14012336 	bltu	r2,r16,2a6b8 <__udivdi3+0x56c>
   2a22c:	182d883a 	mov	r22,r3
   2a230:	1421c83a 	sub	r16,r2,r16
   2a234:	a80b883a 	mov	r5,r21
   2a238:	8009883a 	mov	r4,r16
   2a23c:	002ad580 	call	2ad58 <__umodsi3>
   2a240:	1027883a 	mov	r19,r2
   2a244:	a80b883a 	mov	r5,r21
   2a248:	8009883a 	mov	r4,r16
   2a24c:	002acf40 	call	2acf4 <__udivsi3>
   2a250:	9826943a 	slli	r19,r19,16
   2a254:	a0a9383a 	mul	r20,r20,r2
   2a258:	94bfffcc 	andi	r18,r18,65535
   2a25c:	94e4b03a 	or	r18,r18,r19
   2a260:	9500052e 	bgeu	r18,r20,2a278 <__udivdi3+0x12c>
   2a264:	8ca5883a 	add	r18,r17,r18
   2a268:	10ffffc4 	addi	r3,r2,-1
   2a26c:	9440f136 	bltu	r18,r17,2a634 <__udivdi3+0x4e8>
   2a270:	9500f02e 	bgeu	r18,r20,2a634 <__udivdi3+0x4e8>
   2a274:	10bfff84 	addi	r2,r2,-2
   2a278:	b00c943a 	slli	r6,r22,16
   2a27c:	0007883a 	mov	r3,zero
   2a280:	3084b03a 	or	r2,r6,r2
   2a284:	00005906 	br	2a3ec <__udivdi3+0x2a0>
   2a288:	29c05636 	bltu	r5,r7,2a3e4 <__udivdi3+0x298>
   2a28c:	00bfffd4 	movui	r2,65535
   2a290:	11c0622e 	bgeu	r2,r7,2a41c <__udivdi3+0x2d0>
   2a294:	00804034 	movhi	r2,256
   2a298:	10bfffc4 	addi	r2,r2,-1
   2a29c:	11c0ee36 	bltu	r2,r7,2a658 <__udivdi3+0x50c>
   2a2a0:	00800404 	movi	r2,16
   2a2a4:	3886d83a 	srl	r3,r7,r2
   2a2a8:	010000f4 	movhi	r4,3
   2a2ac:	211f8f04 	addi	r4,r4,32316
   2a2b0:	20c7883a 	add	r3,r4,r3
   2a2b4:	18c00003 	ldbu	r3,0(r3)
   2a2b8:	05400804 	movi	r21,32
   2a2bc:	1885883a 	add	r2,r3,r2
   2a2c0:	a8abc83a 	sub	r21,r21,r2
   2a2c4:	a800621e 	bne	r21,zero,2a450 <__udivdi3+0x304>
   2a2c8:	3c00e936 	bltu	r7,r16,2a670 <__udivdi3+0x524>
   2a2cc:	9985403a 	cmpgeu	r2,r19,r6
   2a2d0:	0007883a 	mov	r3,zero
   2a2d4:	00004506 	br	2a3ec <__udivdi3+0x2a0>
   2a2d8:	3000041e 	bne	r6,zero,2a2ec <__udivdi3+0x1a0>
   2a2dc:	000b883a 	mov	r5,zero
   2a2e0:	01000044 	movi	r4,1
   2a2e4:	002acf40 	call	2acf4 <__udivsi3>
   2a2e8:	1023883a 	mov	r17,r2
   2a2ec:	00bfffd4 	movui	r2,65535
   2a2f0:	14404e2e 	bgeu	r2,r17,2a42c <__udivdi3+0x2e0>
   2a2f4:	00804034 	movhi	r2,256
   2a2f8:	10bfffc4 	addi	r2,r2,-1
   2a2fc:	1440d836 	bltu	r2,r17,2a660 <__udivdi3+0x514>
   2a300:	00800404 	movi	r2,16
   2a304:	8886d83a 	srl	r3,r17,r2
   2a308:	010000f4 	movhi	r4,3
   2a30c:	211f8f04 	addi	r4,r4,32316
   2a310:	20c7883a 	add	r3,r4,r3
   2a314:	18c00003 	ldbu	r3,0(r3)
   2a318:	1885883a 	add	r2,r3,r2
   2a31c:	00c00804 	movi	r3,32
   2a320:	1887c83a 	sub	r3,r3,r2
   2a324:	18008f1e 	bne	r3,zero,2a564 <__udivdi3+0x418>
   2a328:	882ad43a 	srli	r21,r17,16
   2a32c:	8461c83a 	sub	r16,r16,r17
   2a330:	8d3fffcc 	andi	r20,r17,65535
   2a334:	00c00044 	movi	r3,1
   2a338:	8009883a 	mov	r4,r16
   2a33c:	a80b883a 	mov	r5,r21
   2a340:	d8c00015 	stw	r3,0(sp)
   2a344:	002ad580 	call	2ad58 <__umodsi3>
   2a348:	8009883a 	mov	r4,r16
   2a34c:	a80b883a 	mov	r5,r21
   2a350:	1027883a 	mov	r19,r2
   2a354:	002acf40 	call	2acf4 <__udivsi3>
   2a358:	9826943a 	slli	r19,r19,16
   2a35c:	9008d43a 	srli	r4,r18,16
   2a360:	1521383a 	mul	r16,r2,r20
   2a364:	102d883a 	mov	r22,r2
   2a368:	24c8b03a 	or	r4,r4,r19
   2a36c:	d8c00017 	ldw	r3,0(sp)
   2a370:	2400052e 	bgeu	r4,r16,2a388 <__udivdi3+0x23c>
   2a374:	2449883a 	add	r4,r4,r17
   2a378:	b0bfffc4 	addi	r2,r22,-1
   2a37c:	24400136 	bltu	r4,r17,2a384 <__udivdi3+0x238>
   2a380:	2400ca36 	bltu	r4,r16,2a6ac <__udivdi3+0x560>
   2a384:	102d883a 	mov	r22,r2
   2a388:	2421c83a 	sub	r16,r4,r16
   2a38c:	a80b883a 	mov	r5,r21
   2a390:	8009883a 	mov	r4,r16
   2a394:	d8c00015 	stw	r3,0(sp)
   2a398:	002ad580 	call	2ad58 <__umodsi3>
   2a39c:	1027883a 	mov	r19,r2
   2a3a0:	a80b883a 	mov	r5,r21
   2a3a4:	8009883a 	mov	r4,r16
   2a3a8:	002acf40 	call	2acf4 <__udivsi3>
   2a3ac:	9826943a 	slli	r19,r19,16
   2a3b0:	1529383a 	mul	r20,r2,r20
   2a3b4:	94bfffcc 	andi	r18,r18,65535
   2a3b8:	94e4b03a 	or	r18,r18,r19
   2a3bc:	d8c00017 	ldw	r3,0(sp)
   2a3c0:	9500052e 	bgeu	r18,r20,2a3d8 <__udivdi3+0x28c>
   2a3c4:	8ca5883a 	add	r18,r17,r18
   2a3c8:	113fffc4 	addi	r4,r2,-1
   2a3cc:	94409736 	bltu	r18,r17,2a62c <__udivdi3+0x4e0>
   2a3d0:	9500962e 	bgeu	r18,r20,2a62c <__udivdi3+0x4e0>
   2a3d4:	10bfff84 	addi	r2,r2,-2
   2a3d8:	b00c943a 	slli	r6,r22,16
   2a3dc:	3084b03a 	or	r2,r6,r2
   2a3e0:	00000206 	br	2a3ec <__udivdi3+0x2a0>
   2a3e4:	0007883a 	mov	r3,zero
   2a3e8:	0005883a 	mov	r2,zero
   2a3ec:	dfc00a17 	ldw	ra,40(sp)
   2a3f0:	df000917 	ldw	fp,36(sp)
   2a3f4:	ddc00817 	ldw	r23,32(sp)
   2a3f8:	dd800717 	ldw	r22,28(sp)
   2a3fc:	dd400617 	ldw	r21,24(sp)
   2a400:	dd000517 	ldw	r20,20(sp)
   2a404:	dcc00417 	ldw	r19,16(sp)
   2a408:	dc800317 	ldw	r18,12(sp)
   2a40c:	dc400217 	ldw	r17,8(sp)
   2a410:	dc000117 	ldw	r16,4(sp)
   2a414:	dec00b04 	addi	sp,sp,44
   2a418:	f800283a 	ret
   2a41c:	00803fc4 	movi	r2,255
   2a420:	11c5803a 	cmpltu	r2,r2,r7
   2a424:	100490fa 	slli	r2,r2,3
   2a428:	003f9e06 	br	2a2a4 <_gp+0xfffe8758>
   2a42c:	00803fc4 	movi	r2,255
   2a430:	1445803a 	cmpltu	r2,r2,r17
   2a434:	100490fa 	slli	r2,r2,3
   2a438:	003fb206 	br	2a304 <_gp+0xfffe87b8>
   2a43c:	00804034 	movhi	r2,256
   2a440:	10bfffc4 	addi	r2,r2,-1
   2a444:	11808836 	bltu	r2,r6,2a668 <__udivdi3+0x51c>
   2a448:	00800404 	movi	r2,16
   2a44c:	003f5606 	br	2a1a8 <_gp+0xfffe865c>
   2a450:	30aed83a 	srl	r23,r6,r2
   2a454:	3d4e983a 	sll	r7,r7,r21
   2a458:	80acd83a 	srl	r22,r16,r2
   2a45c:	9884d83a 	srl	r2,r19,r2
   2a460:	3deeb03a 	or	r23,r7,r23
   2a464:	b824d43a 	srli	r18,r23,16
   2a468:	8560983a 	sll	r16,r16,r21
   2a46c:	b009883a 	mov	r4,r22
   2a470:	900b883a 	mov	r5,r18
   2a474:	3568983a 	sll	r20,r6,r21
   2a478:	1420b03a 	or	r16,r2,r16
   2a47c:	002ad580 	call	2ad58 <__umodsi3>
   2a480:	b009883a 	mov	r4,r22
   2a484:	900b883a 	mov	r5,r18
   2a488:	1023883a 	mov	r17,r2
   2a48c:	002acf40 	call	2acf4 <__udivsi3>
   2a490:	8808943a 	slli	r4,r17,16
   2a494:	bf3fffcc 	andi	fp,r23,65535
   2a498:	8006d43a 	srli	r3,r16,16
   2a49c:	e0a3383a 	mul	r17,fp,r2
   2a4a0:	100d883a 	mov	r6,r2
   2a4a4:	1906b03a 	or	r3,r3,r4
   2a4a8:	1c40042e 	bgeu	r3,r17,2a4bc <__udivdi3+0x370>
   2a4ac:	1dc7883a 	add	r3,r3,r23
   2a4b0:	10bfffc4 	addi	r2,r2,-1
   2a4b4:	1dc0752e 	bgeu	r3,r23,2a68c <__udivdi3+0x540>
   2a4b8:	100d883a 	mov	r6,r2
   2a4bc:	1c63c83a 	sub	r17,r3,r17
   2a4c0:	900b883a 	mov	r5,r18
   2a4c4:	8809883a 	mov	r4,r17
   2a4c8:	d9800015 	stw	r6,0(sp)
   2a4cc:	002ad580 	call	2ad58 <__umodsi3>
   2a4d0:	102d883a 	mov	r22,r2
   2a4d4:	8809883a 	mov	r4,r17
   2a4d8:	900b883a 	mov	r5,r18
   2a4dc:	002acf40 	call	2acf4 <__udivsi3>
   2a4e0:	b02c943a 	slli	r22,r22,16
   2a4e4:	e089383a 	mul	r4,fp,r2
   2a4e8:	843fffcc 	andi	r16,r16,65535
   2a4ec:	85a0b03a 	or	r16,r16,r22
   2a4f0:	d9800017 	ldw	r6,0(sp)
   2a4f4:	8100042e 	bgeu	r16,r4,2a508 <__udivdi3+0x3bc>
   2a4f8:	85e1883a 	add	r16,r16,r23
   2a4fc:	10ffffc4 	addi	r3,r2,-1
   2a500:	85c05e2e 	bgeu	r16,r23,2a67c <__udivdi3+0x530>
   2a504:	1805883a 	mov	r2,r3
   2a508:	300c943a 	slli	r6,r6,16
   2a50c:	a17fffcc 	andi	r5,r20,65535
   2a510:	a028d43a 	srli	r20,r20,16
   2a514:	3084b03a 	or	r2,r6,r2
   2a518:	10ffffcc 	andi	r3,r2,65535
   2a51c:	100cd43a 	srli	r6,r2,16
   2a520:	194f383a 	mul	r7,r3,r5
   2a524:	1d07383a 	mul	r3,r3,r20
   2a528:	314b383a 	mul	r5,r6,r5
   2a52c:	3810d43a 	srli	r8,r7,16
   2a530:	8121c83a 	sub	r16,r16,r4
   2a534:	1947883a 	add	r3,r3,r5
   2a538:	40c7883a 	add	r3,r8,r3
   2a53c:	350d383a 	mul	r6,r6,r20
   2a540:	1940022e 	bgeu	r3,r5,2a54c <__udivdi3+0x400>
   2a544:	01000074 	movhi	r4,1
   2a548:	310d883a 	add	r6,r6,r4
   2a54c:	1828d43a 	srli	r20,r3,16
   2a550:	a18d883a 	add	r6,r20,r6
   2a554:	81803e36 	bltu	r16,r6,2a650 <__udivdi3+0x504>
   2a558:	81803826 	beq	r16,r6,2a63c <__udivdi3+0x4f0>
   2a55c:	0007883a 	mov	r3,zero
   2a560:	003fa206 	br	2a3ec <_gp+0xfffe88a0>
   2a564:	88e2983a 	sll	r17,r17,r3
   2a568:	80a8d83a 	srl	r20,r16,r2
   2a56c:	80e0983a 	sll	r16,r16,r3
   2a570:	882ad43a 	srli	r21,r17,16
   2a574:	9884d83a 	srl	r2,r19,r2
   2a578:	a009883a 	mov	r4,r20
   2a57c:	a80b883a 	mov	r5,r21
   2a580:	142eb03a 	or	r23,r2,r16
   2a584:	98e4983a 	sll	r18,r19,r3
   2a588:	002ad580 	call	2ad58 <__umodsi3>
   2a58c:	a009883a 	mov	r4,r20
   2a590:	a80b883a 	mov	r5,r21
   2a594:	1021883a 	mov	r16,r2
   2a598:	002acf40 	call	2acf4 <__udivsi3>
   2a59c:	1039883a 	mov	fp,r2
   2a5a0:	8d3fffcc 	andi	r20,r17,65535
   2a5a4:	8020943a 	slli	r16,r16,16
   2a5a8:	b804d43a 	srli	r2,r23,16
   2a5ac:	a72d383a 	mul	r22,r20,fp
   2a5b0:	1404b03a 	or	r2,r2,r16
   2a5b4:	1580062e 	bgeu	r2,r22,2a5d0 <__udivdi3+0x484>
   2a5b8:	1445883a 	add	r2,r2,r17
   2a5bc:	e0ffffc4 	addi	r3,fp,-1
   2a5c0:	14403836 	bltu	r2,r17,2a6a4 <__udivdi3+0x558>
   2a5c4:	1580372e 	bgeu	r2,r22,2a6a4 <__udivdi3+0x558>
   2a5c8:	e73fff84 	addi	fp,fp,-2
   2a5cc:	1445883a 	add	r2,r2,r17
   2a5d0:	15adc83a 	sub	r22,r2,r22
   2a5d4:	a80b883a 	mov	r5,r21
   2a5d8:	b009883a 	mov	r4,r22
   2a5dc:	002ad580 	call	2ad58 <__umodsi3>
   2a5e0:	1027883a 	mov	r19,r2
   2a5e4:	b009883a 	mov	r4,r22
   2a5e8:	a80b883a 	mov	r5,r21
   2a5ec:	002acf40 	call	2acf4 <__udivsi3>
   2a5f0:	9826943a 	slli	r19,r19,16
   2a5f4:	a0a1383a 	mul	r16,r20,r2
   2a5f8:	b93fffcc 	andi	r4,r23,65535
   2a5fc:	24c8b03a 	or	r4,r4,r19
   2a600:	2400062e 	bgeu	r4,r16,2a61c <__udivdi3+0x4d0>
   2a604:	2449883a 	add	r4,r4,r17
   2a608:	10ffffc4 	addi	r3,r2,-1
   2a60c:	24402336 	bltu	r4,r17,2a69c <__udivdi3+0x550>
   2a610:	2400222e 	bgeu	r4,r16,2a69c <__udivdi3+0x550>
   2a614:	10bfff84 	addi	r2,r2,-2
   2a618:	2449883a 	add	r4,r4,r17
   2a61c:	e038943a 	slli	fp,fp,16
   2a620:	2421c83a 	sub	r16,r4,r16
   2a624:	e086b03a 	or	r3,fp,r2
   2a628:	003f4306 	br	2a338 <_gp+0xfffe87ec>
   2a62c:	2005883a 	mov	r2,r4
   2a630:	003f6906 	br	2a3d8 <_gp+0xfffe888c>
   2a634:	1805883a 	mov	r2,r3
   2a638:	003f0f06 	br	2a278 <_gp+0xfffe872c>
   2a63c:	1806943a 	slli	r3,r3,16
   2a640:	9d66983a 	sll	r19,r19,r21
   2a644:	39ffffcc 	andi	r7,r7,65535
   2a648:	19c7883a 	add	r3,r3,r7
   2a64c:	98ffc32e 	bgeu	r19,r3,2a55c <_gp+0xfffe8a10>
   2a650:	10bfffc4 	addi	r2,r2,-1
   2a654:	003fc106 	br	2a55c <_gp+0xfffe8a10>
   2a658:	00800604 	movi	r2,24
   2a65c:	003f1106 	br	2a2a4 <_gp+0xfffe8758>
   2a660:	00800604 	movi	r2,24
   2a664:	003f2706 	br	2a304 <_gp+0xfffe87b8>
   2a668:	00800604 	movi	r2,24
   2a66c:	003ece06 	br	2a1a8 <_gp+0xfffe865c>
   2a670:	0007883a 	mov	r3,zero
   2a674:	00800044 	movi	r2,1
   2a678:	003f5c06 	br	2a3ec <_gp+0xfffe88a0>
   2a67c:	813fa12e 	bgeu	r16,r4,2a504 <_gp+0xfffe89b8>
   2a680:	10bfff84 	addi	r2,r2,-2
   2a684:	85e1883a 	add	r16,r16,r23
   2a688:	003f9f06 	br	2a508 <_gp+0xfffe89bc>
   2a68c:	1c7f8a2e 	bgeu	r3,r17,2a4b8 <_gp+0xfffe896c>
   2a690:	31bfff84 	addi	r6,r6,-2
   2a694:	1dc7883a 	add	r3,r3,r23
   2a698:	003f8806 	br	2a4bc <_gp+0xfffe8970>
   2a69c:	1805883a 	mov	r2,r3
   2a6a0:	003fde06 	br	2a61c <_gp+0xfffe8ad0>
   2a6a4:	1839883a 	mov	fp,r3
   2a6a8:	003fc906 	br	2a5d0 <_gp+0xfffe8a84>
   2a6ac:	b5bfff84 	addi	r22,r22,-2
   2a6b0:	2449883a 	add	r4,r4,r17
   2a6b4:	003f3406 	br	2a388 <_gp+0xfffe883c>
   2a6b8:	b5bfff84 	addi	r22,r22,-2
   2a6bc:	1445883a 	add	r2,r2,r17
   2a6c0:	003edb06 	br	2a230 <_gp+0xfffe86e4>

0002a6c4 <__umoddi3>:
   2a6c4:	defff404 	addi	sp,sp,-48
   2a6c8:	df000a15 	stw	fp,40(sp)
   2a6cc:	dc400315 	stw	r17,12(sp)
   2a6d0:	dc000215 	stw	r16,8(sp)
   2a6d4:	dfc00b15 	stw	ra,44(sp)
   2a6d8:	ddc00915 	stw	r23,36(sp)
   2a6dc:	dd800815 	stw	r22,32(sp)
   2a6e0:	dd400715 	stw	r21,28(sp)
   2a6e4:	dd000615 	stw	r20,24(sp)
   2a6e8:	dcc00515 	stw	r19,20(sp)
   2a6ec:	dc800415 	stw	r18,16(sp)
   2a6f0:	2021883a 	mov	r16,r4
   2a6f4:	2823883a 	mov	r17,r5
   2a6f8:	2839883a 	mov	fp,r5
   2a6fc:	38003c1e 	bne	r7,zero,2a7f0 <__umoddi3+0x12c>
   2a700:	3027883a 	mov	r19,r6
   2a704:	2029883a 	mov	r20,r4
   2a708:	2980512e 	bgeu	r5,r6,2a850 <__umoddi3+0x18c>
   2a70c:	00bfffd4 	movui	r2,65535
   2a710:	11809a36 	bltu	r2,r6,2a97c <__umoddi3+0x2b8>
   2a714:	01003fc4 	movi	r4,255
   2a718:	2189803a 	cmpltu	r4,r4,r6
   2a71c:	200890fa 	slli	r4,r4,3
   2a720:	3104d83a 	srl	r2,r6,r4
   2a724:	00c000f4 	movhi	r3,3
   2a728:	18df8f04 	addi	r3,r3,32316
   2a72c:	1885883a 	add	r2,r3,r2
   2a730:	10c00003 	ldbu	r3,0(r2)
   2a734:	00800804 	movi	r2,32
   2a738:	1909883a 	add	r4,r3,r4
   2a73c:	1125c83a 	sub	r18,r2,r4
   2a740:	90000526 	beq	r18,zero,2a758 <__umoddi3+0x94>
   2a744:	8ca2983a 	sll	r17,r17,r18
   2a748:	8108d83a 	srl	r4,r16,r4
   2a74c:	34a6983a 	sll	r19,r6,r18
   2a750:	84a8983a 	sll	r20,r16,r18
   2a754:	2478b03a 	or	fp,r4,r17
   2a758:	982ed43a 	srli	r23,r19,16
   2a75c:	e009883a 	mov	r4,fp
   2a760:	9dbfffcc 	andi	r22,r19,65535
   2a764:	b80b883a 	mov	r5,r23
   2a768:	002ad580 	call	2ad58 <__umodsi3>
   2a76c:	e009883a 	mov	r4,fp
   2a770:	b80b883a 	mov	r5,r23
   2a774:	102b883a 	mov	r21,r2
   2a778:	002acf40 	call	2acf4 <__udivsi3>
   2a77c:	a806943a 	slli	r3,r21,16
   2a780:	a008d43a 	srli	r4,r20,16
   2a784:	b085383a 	mul	r2,r22,r2
   2a788:	20c8b03a 	or	r4,r4,r3
   2a78c:	2080032e 	bgeu	r4,r2,2a79c <__umoddi3+0xd8>
   2a790:	24c9883a 	add	r4,r4,r19
   2a794:	24c00136 	bltu	r4,r19,2a79c <__umoddi3+0xd8>
   2a798:	20811036 	bltu	r4,r2,2abdc <__umoddi3+0x518>
   2a79c:	20abc83a 	sub	r21,r4,r2
   2a7a0:	b80b883a 	mov	r5,r23
   2a7a4:	a809883a 	mov	r4,r21
   2a7a8:	002ad580 	call	2ad58 <__umodsi3>
   2a7ac:	1023883a 	mov	r17,r2
   2a7b0:	b80b883a 	mov	r5,r23
   2a7b4:	a809883a 	mov	r4,r21
   2a7b8:	002acf40 	call	2acf4 <__udivsi3>
   2a7bc:	8822943a 	slli	r17,r17,16
   2a7c0:	b085383a 	mul	r2,r22,r2
   2a7c4:	a0ffffcc 	andi	r3,r20,65535
   2a7c8:	1c46b03a 	or	r3,r3,r17
   2a7cc:	1880042e 	bgeu	r3,r2,2a7e0 <__umoddi3+0x11c>
   2a7d0:	1cc7883a 	add	r3,r3,r19
   2a7d4:	1cc00236 	bltu	r3,r19,2a7e0 <__umoddi3+0x11c>
   2a7d8:	1880012e 	bgeu	r3,r2,2a7e0 <__umoddi3+0x11c>
   2a7dc:	1cc7883a 	add	r3,r3,r19
   2a7e0:	1885c83a 	sub	r2,r3,r2
   2a7e4:	1484d83a 	srl	r2,r2,r18
   2a7e8:	0007883a 	mov	r3,zero
   2a7ec:	00004f06 	br	2a92c <__umoddi3+0x268>
   2a7f0:	29c04c36 	bltu	r5,r7,2a924 <__umoddi3+0x260>
   2a7f4:	00bfffd4 	movui	r2,65535
   2a7f8:	11c0582e 	bgeu	r2,r7,2a95c <__umoddi3+0x298>
   2a7fc:	00804034 	movhi	r2,256
   2a800:	10bfffc4 	addi	r2,r2,-1
   2a804:	11c0e736 	bltu	r2,r7,2aba4 <__umoddi3+0x4e0>
   2a808:	01000404 	movi	r4,16
   2a80c:	3904d83a 	srl	r2,r7,r4
   2a810:	00c000f4 	movhi	r3,3
   2a814:	18df8f04 	addi	r3,r3,32316
   2a818:	1885883a 	add	r2,r3,r2
   2a81c:	14c00003 	ldbu	r19,0(r2)
   2a820:	00c00804 	movi	r3,32
   2a824:	9927883a 	add	r19,r19,r4
   2a828:	1ce9c83a 	sub	r20,r3,r19
   2a82c:	a000581e 	bne	r20,zero,2a990 <__umoddi3+0x2cc>
   2a830:	3c400136 	bltu	r7,r17,2a838 <__umoddi3+0x174>
   2a834:	8180eb36 	bltu	r16,r6,2abe4 <__umoddi3+0x520>
   2a838:	8185c83a 	sub	r2,r16,r6
   2a83c:	89e3c83a 	sub	r17,r17,r7
   2a840:	8089803a 	cmpltu	r4,r16,r2
   2a844:	8939c83a 	sub	fp,r17,r4
   2a848:	e007883a 	mov	r3,fp
   2a84c:	00003706 	br	2a92c <__umoddi3+0x268>
   2a850:	3000041e 	bne	r6,zero,2a864 <__umoddi3+0x1a0>
   2a854:	000b883a 	mov	r5,zero
   2a858:	01000044 	movi	r4,1
   2a85c:	002acf40 	call	2acf4 <__udivsi3>
   2a860:	1027883a 	mov	r19,r2
   2a864:	00bfffd4 	movui	r2,65535
   2a868:	14c0402e 	bgeu	r2,r19,2a96c <__umoddi3+0x2a8>
   2a86c:	00804034 	movhi	r2,256
   2a870:	10bfffc4 	addi	r2,r2,-1
   2a874:	14c0cd36 	bltu	r2,r19,2abac <__umoddi3+0x4e8>
   2a878:	00800404 	movi	r2,16
   2a87c:	9886d83a 	srl	r3,r19,r2
   2a880:	010000f4 	movhi	r4,3
   2a884:	211f8f04 	addi	r4,r4,32316
   2a888:	20c7883a 	add	r3,r4,r3
   2a88c:	18c00003 	ldbu	r3,0(r3)
   2a890:	1887883a 	add	r3,r3,r2
   2a894:	00800804 	movi	r2,32
   2a898:	10e5c83a 	sub	r18,r2,r3
   2a89c:	9000901e 	bne	r18,zero,2aae0 <__umoddi3+0x41c>
   2a8a0:	982cd43a 	srli	r22,r19,16
   2a8a4:	8ce3c83a 	sub	r17,r17,r19
   2a8a8:	9d7fffcc 	andi	r21,r19,65535
   2a8ac:	b00b883a 	mov	r5,r22
   2a8b0:	8809883a 	mov	r4,r17
   2a8b4:	002ad580 	call	2ad58 <__umodsi3>
   2a8b8:	8809883a 	mov	r4,r17
   2a8bc:	b00b883a 	mov	r5,r22
   2a8c0:	1021883a 	mov	r16,r2
   2a8c4:	002acf40 	call	2acf4 <__udivsi3>
   2a8c8:	8006943a 	slli	r3,r16,16
   2a8cc:	a008d43a 	srli	r4,r20,16
   2a8d0:	1545383a 	mul	r2,r2,r21
   2a8d4:	20c8b03a 	or	r4,r4,r3
   2a8d8:	2080042e 	bgeu	r4,r2,2a8ec <__umoddi3+0x228>
   2a8dc:	24c9883a 	add	r4,r4,r19
   2a8e0:	24c00236 	bltu	r4,r19,2a8ec <__umoddi3+0x228>
   2a8e4:	2080012e 	bgeu	r4,r2,2a8ec <__umoddi3+0x228>
   2a8e8:	24c9883a 	add	r4,r4,r19
   2a8ec:	20a1c83a 	sub	r16,r4,r2
   2a8f0:	b00b883a 	mov	r5,r22
   2a8f4:	8009883a 	mov	r4,r16
   2a8f8:	002ad580 	call	2ad58 <__umodsi3>
   2a8fc:	1023883a 	mov	r17,r2
   2a900:	b00b883a 	mov	r5,r22
   2a904:	8009883a 	mov	r4,r16
   2a908:	002acf40 	call	2acf4 <__udivsi3>
   2a90c:	8822943a 	slli	r17,r17,16
   2a910:	1545383a 	mul	r2,r2,r21
   2a914:	a53fffcc 	andi	r20,r20,65535
   2a918:	a446b03a 	or	r3,r20,r17
   2a91c:	18bfb02e 	bgeu	r3,r2,2a7e0 <_gp+0xfffe8c94>
   2a920:	003fab06 	br	2a7d0 <_gp+0xfffe8c84>
   2a924:	2005883a 	mov	r2,r4
   2a928:	2807883a 	mov	r3,r5
   2a92c:	dfc00b17 	ldw	ra,44(sp)
   2a930:	df000a17 	ldw	fp,40(sp)
   2a934:	ddc00917 	ldw	r23,36(sp)
   2a938:	dd800817 	ldw	r22,32(sp)
   2a93c:	dd400717 	ldw	r21,28(sp)
   2a940:	dd000617 	ldw	r20,24(sp)
   2a944:	dcc00517 	ldw	r19,20(sp)
   2a948:	dc800417 	ldw	r18,16(sp)
   2a94c:	dc400317 	ldw	r17,12(sp)
   2a950:	dc000217 	ldw	r16,8(sp)
   2a954:	dec00c04 	addi	sp,sp,48
   2a958:	f800283a 	ret
   2a95c:	04c03fc4 	movi	r19,255
   2a960:	99c9803a 	cmpltu	r4,r19,r7
   2a964:	200890fa 	slli	r4,r4,3
   2a968:	003fa806 	br	2a80c <_gp+0xfffe8cc0>
   2a96c:	00803fc4 	movi	r2,255
   2a970:	14c5803a 	cmpltu	r2,r2,r19
   2a974:	100490fa 	slli	r2,r2,3
   2a978:	003fc006 	br	2a87c <_gp+0xfffe8d30>
   2a97c:	00804034 	movhi	r2,256
   2a980:	10bfffc4 	addi	r2,r2,-1
   2a984:	11808b36 	bltu	r2,r6,2abb4 <__umoddi3+0x4f0>
   2a988:	01000404 	movi	r4,16
   2a98c:	003f6406 	br	2a720 <_gp+0xfffe8bd4>
   2a990:	34c4d83a 	srl	r2,r6,r19
   2a994:	3d0e983a 	sll	r7,r7,r20
   2a998:	8cf8d83a 	srl	fp,r17,r19
   2a99c:	8d10983a 	sll	r8,r17,r20
   2a9a0:	38aab03a 	or	r21,r7,r2
   2a9a4:	a82cd43a 	srli	r22,r21,16
   2a9a8:	84e2d83a 	srl	r17,r16,r19
   2a9ac:	e009883a 	mov	r4,fp
   2a9b0:	b00b883a 	mov	r5,r22
   2a9b4:	8a22b03a 	or	r17,r17,r8
   2a9b8:	3524983a 	sll	r18,r6,r20
   2a9bc:	002ad580 	call	2ad58 <__umodsi3>
   2a9c0:	e009883a 	mov	r4,fp
   2a9c4:	b00b883a 	mov	r5,r22
   2a9c8:	102f883a 	mov	r23,r2
   2a9cc:	002acf40 	call	2acf4 <__udivsi3>
   2a9d0:	100d883a 	mov	r6,r2
   2a9d4:	b808943a 	slli	r4,r23,16
   2a9d8:	aa3fffcc 	andi	r8,r21,65535
   2a9dc:	8804d43a 	srli	r2,r17,16
   2a9e0:	41af383a 	mul	r23,r8,r6
   2a9e4:	8520983a 	sll	r16,r16,r20
   2a9e8:	1104b03a 	or	r2,r2,r4
   2a9ec:	15c0042e 	bgeu	r2,r23,2aa00 <__umoddi3+0x33c>
   2a9f0:	1545883a 	add	r2,r2,r21
   2a9f4:	30ffffc4 	addi	r3,r6,-1
   2a9f8:	1540742e 	bgeu	r2,r21,2abcc <__umoddi3+0x508>
   2a9fc:	180d883a 	mov	r6,r3
   2aa00:	15efc83a 	sub	r23,r2,r23
   2aa04:	b00b883a 	mov	r5,r22
   2aa08:	b809883a 	mov	r4,r23
   2aa0c:	d9800115 	stw	r6,4(sp)
   2aa10:	da000015 	stw	r8,0(sp)
   2aa14:	002ad580 	call	2ad58 <__umodsi3>
   2aa18:	b00b883a 	mov	r5,r22
   2aa1c:	b809883a 	mov	r4,r23
   2aa20:	1039883a 	mov	fp,r2
   2aa24:	002acf40 	call	2acf4 <__udivsi3>
   2aa28:	da000017 	ldw	r8,0(sp)
   2aa2c:	e038943a 	slli	fp,fp,16
   2aa30:	100b883a 	mov	r5,r2
   2aa34:	4089383a 	mul	r4,r8,r2
   2aa38:	8a3fffcc 	andi	r8,r17,65535
   2aa3c:	4710b03a 	or	r8,r8,fp
   2aa40:	d9800117 	ldw	r6,4(sp)
   2aa44:	4100042e 	bgeu	r8,r4,2aa58 <__umoddi3+0x394>
   2aa48:	4551883a 	add	r8,r8,r21
   2aa4c:	10bfffc4 	addi	r2,r2,-1
   2aa50:	45405a2e 	bgeu	r8,r21,2abbc <__umoddi3+0x4f8>
   2aa54:	100b883a 	mov	r5,r2
   2aa58:	300c943a 	slli	r6,r6,16
   2aa5c:	91ffffcc 	andi	r7,r18,65535
   2aa60:	9004d43a 	srli	r2,r18,16
   2aa64:	314cb03a 	or	r6,r6,r5
   2aa68:	317fffcc 	andi	r5,r6,65535
   2aa6c:	300cd43a 	srli	r6,r6,16
   2aa70:	29d3383a 	mul	r9,r5,r7
   2aa74:	288b383a 	mul	r5,r5,r2
   2aa78:	31cf383a 	mul	r7,r6,r7
   2aa7c:	4806d43a 	srli	r3,r9,16
   2aa80:	4111c83a 	sub	r8,r8,r4
   2aa84:	29cb883a 	add	r5,r5,r7
   2aa88:	194b883a 	add	r5,r3,r5
   2aa8c:	3085383a 	mul	r2,r6,r2
   2aa90:	29c0022e 	bgeu	r5,r7,2aa9c <__umoddi3+0x3d8>
   2aa94:	00c00074 	movhi	r3,1
   2aa98:	10c5883a 	add	r2,r2,r3
   2aa9c:	2808d43a 	srli	r4,r5,16
   2aaa0:	280a943a 	slli	r5,r5,16
   2aaa4:	4a7fffcc 	andi	r9,r9,65535
   2aaa8:	2085883a 	add	r2,r4,r2
   2aaac:	2a4b883a 	add	r5,r5,r9
   2aab0:	40803636 	bltu	r8,r2,2ab8c <__umoddi3+0x4c8>
   2aab4:	40804d26 	beq	r8,r2,2abec <__umoddi3+0x528>
   2aab8:	4089c83a 	sub	r4,r8,r2
   2aabc:	280f883a 	mov	r7,r5
   2aac0:	81cfc83a 	sub	r7,r16,r7
   2aac4:	81c7803a 	cmpltu	r3,r16,r7
   2aac8:	20c7c83a 	sub	r3,r4,r3
   2aacc:	1cc4983a 	sll	r2,r3,r19
   2aad0:	3d0ed83a 	srl	r7,r7,r20
   2aad4:	1d06d83a 	srl	r3,r3,r20
   2aad8:	11c4b03a 	or	r2,r2,r7
   2aadc:	003f9306 	br	2a92c <_gp+0xfffe8de0>
   2aae0:	9ca6983a 	sll	r19,r19,r18
   2aae4:	88e8d83a 	srl	r20,r17,r3
   2aae8:	80c4d83a 	srl	r2,r16,r3
   2aaec:	982cd43a 	srli	r22,r19,16
   2aaf0:	8ca2983a 	sll	r17,r17,r18
   2aaf4:	a009883a 	mov	r4,r20
   2aaf8:	b00b883a 	mov	r5,r22
   2aafc:	1478b03a 	or	fp,r2,r17
   2ab00:	002ad580 	call	2ad58 <__umodsi3>
   2ab04:	a009883a 	mov	r4,r20
   2ab08:	b00b883a 	mov	r5,r22
   2ab0c:	1023883a 	mov	r17,r2
   2ab10:	002acf40 	call	2acf4 <__udivsi3>
   2ab14:	9d7fffcc 	andi	r21,r19,65535
   2ab18:	880a943a 	slli	r5,r17,16
   2ab1c:	e008d43a 	srli	r4,fp,16
   2ab20:	a885383a 	mul	r2,r21,r2
   2ab24:	84a8983a 	sll	r20,r16,r18
   2ab28:	2148b03a 	or	r4,r4,r5
   2ab2c:	2080042e 	bgeu	r4,r2,2ab40 <__umoddi3+0x47c>
   2ab30:	24c9883a 	add	r4,r4,r19
   2ab34:	24c00236 	bltu	r4,r19,2ab40 <__umoddi3+0x47c>
   2ab38:	2080012e 	bgeu	r4,r2,2ab40 <__umoddi3+0x47c>
   2ab3c:	24c9883a 	add	r4,r4,r19
   2ab40:	20a3c83a 	sub	r17,r4,r2
   2ab44:	b00b883a 	mov	r5,r22
   2ab48:	8809883a 	mov	r4,r17
   2ab4c:	002ad580 	call	2ad58 <__umodsi3>
   2ab50:	102f883a 	mov	r23,r2
   2ab54:	8809883a 	mov	r4,r17
   2ab58:	b00b883a 	mov	r5,r22
   2ab5c:	002acf40 	call	2acf4 <__udivsi3>
   2ab60:	b82e943a 	slli	r23,r23,16
   2ab64:	a885383a 	mul	r2,r21,r2
   2ab68:	e13fffcc 	andi	r4,fp,65535
   2ab6c:	25c8b03a 	or	r4,r4,r23
   2ab70:	2080042e 	bgeu	r4,r2,2ab84 <__umoddi3+0x4c0>
   2ab74:	24c9883a 	add	r4,r4,r19
   2ab78:	24c00236 	bltu	r4,r19,2ab84 <__umoddi3+0x4c0>
   2ab7c:	2080012e 	bgeu	r4,r2,2ab84 <__umoddi3+0x4c0>
   2ab80:	24c9883a 	add	r4,r4,r19
   2ab84:	20a3c83a 	sub	r17,r4,r2
   2ab88:	003f4806 	br	2a8ac <_gp+0xfffe8d60>
   2ab8c:	2c8fc83a 	sub	r7,r5,r18
   2ab90:	1545c83a 	sub	r2,r2,r21
   2ab94:	29cb803a 	cmpltu	r5,r5,r7
   2ab98:	1145c83a 	sub	r2,r2,r5
   2ab9c:	4089c83a 	sub	r4,r8,r2
   2aba0:	003fc706 	br	2aac0 <_gp+0xfffe8f74>
   2aba4:	01000604 	movi	r4,24
   2aba8:	003f1806 	br	2a80c <_gp+0xfffe8cc0>
   2abac:	00800604 	movi	r2,24
   2abb0:	003f3206 	br	2a87c <_gp+0xfffe8d30>
   2abb4:	01000604 	movi	r4,24
   2abb8:	003ed906 	br	2a720 <_gp+0xfffe8bd4>
   2abbc:	413fa52e 	bgeu	r8,r4,2aa54 <_gp+0xfffe8f08>
   2abc0:	297fff84 	addi	r5,r5,-2
   2abc4:	4551883a 	add	r8,r8,r21
   2abc8:	003fa306 	br	2aa58 <_gp+0xfffe8f0c>
   2abcc:	15ff8b2e 	bgeu	r2,r23,2a9fc <_gp+0xfffe8eb0>
   2abd0:	31bfff84 	addi	r6,r6,-2
   2abd4:	1545883a 	add	r2,r2,r21
   2abd8:	003f8906 	br	2aa00 <_gp+0xfffe8eb4>
   2abdc:	24c9883a 	add	r4,r4,r19
   2abe0:	003eee06 	br	2a79c <_gp+0xfffe8c50>
   2abe4:	8005883a 	mov	r2,r16
   2abe8:	003f1706 	br	2a848 <_gp+0xfffe8cfc>
   2abec:	817fe736 	bltu	r16,r5,2ab8c <_gp+0xfffe9040>
   2abf0:	280f883a 	mov	r7,r5
   2abf4:	0009883a 	mov	r4,zero
   2abf8:	003fb106 	br	2aac0 <_gp+0xfffe8f74>

0002abfc <__divsi3>:
   2abfc:	20001b16 	blt	r4,zero,2ac6c <__divsi3+0x70>
   2ac00:	000f883a 	mov	r7,zero
   2ac04:	28001616 	blt	r5,zero,2ac60 <__divsi3+0x64>
   2ac08:	200d883a 	mov	r6,r4
   2ac0c:	29001a2e 	bgeu	r5,r4,2ac78 <__divsi3+0x7c>
   2ac10:	00800804 	movi	r2,32
   2ac14:	00c00044 	movi	r3,1
   2ac18:	00000106 	br	2ac20 <__divsi3+0x24>
   2ac1c:	10000d26 	beq	r2,zero,2ac54 <__divsi3+0x58>
   2ac20:	294b883a 	add	r5,r5,r5
   2ac24:	10bfffc4 	addi	r2,r2,-1
   2ac28:	18c7883a 	add	r3,r3,r3
   2ac2c:	293ffb36 	bltu	r5,r4,2ac1c <_gp+0xfffe90d0>
   2ac30:	0005883a 	mov	r2,zero
   2ac34:	18000726 	beq	r3,zero,2ac54 <__divsi3+0x58>
   2ac38:	0005883a 	mov	r2,zero
   2ac3c:	31400236 	bltu	r6,r5,2ac48 <__divsi3+0x4c>
   2ac40:	314dc83a 	sub	r6,r6,r5
   2ac44:	10c4b03a 	or	r2,r2,r3
   2ac48:	1806d07a 	srli	r3,r3,1
   2ac4c:	280ad07a 	srli	r5,r5,1
   2ac50:	183ffa1e 	bne	r3,zero,2ac3c <_gp+0xfffe90f0>
   2ac54:	38000126 	beq	r7,zero,2ac5c <__divsi3+0x60>
   2ac58:	0085c83a 	sub	r2,zero,r2
   2ac5c:	f800283a 	ret
   2ac60:	014bc83a 	sub	r5,zero,r5
   2ac64:	39c0005c 	xori	r7,r7,1
   2ac68:	003fe706 	br	2ac08 <_gp+0xfffe90bc>
   2ac6c:	0109c83a 	sub	r4,zero,r4
   2ac70:	01c00044 	movi	r7,1
   2ac74:	003fe306 	br	2ac04 <_gp+0xfffe90b8>
   2ac78:	00c00044 	movi	r3,1
   2ac7c:	003fee06 	br	2ac38 <_gp+0xfffe90ec>

0002ac80 <__modsi3>:
   2ac80:	20001716 	blt	r4,zero,2ace0 <__modsi3+0x60>
   2ac84:	000f883a 	mov	r7,zero
   2ac88:	2005883a 	mov	r2,r4
   2ac8c:	28001216 	blt	r5,zero,2acd8 <__modsi3+0x58>
   2ac90:	2900162e 	bgeu	r5,r4,2acec <__modsi3+0x6c>
   2ac94:	01800804 	movi	r6,32
   2ac98:	00c00044 	movi	r3,1
   2ac9c:	00000106 	br	2aca4 <__modsi3+0x24>
   2aca0:	30000a26 	beq	r6,zero,2accc <__modsi3+0x4c>
   2aca4:	294b883a 	add	r5,r5,r5
   2aca8:	31bfffc4 	addi	r6,r6,-1
   2acac:	18c7883a 	add	r3,r3,r3
   2acb0:	293ffb36 	bltu	r5,r4,2aca0 <_gp+0xfffe9154>
   2acb4:	18000526 	beq	r3,zero,2accc <__modsi3+0x4c>
   2acb8:	1806d07a 	srli	r3,r3,1
   2acbc:	11400136 	bltu	r2,r5,2acc4 <__modsi3+0x44>
   2acc0:	1145c83a 	sub	r2,r2,r5
   2acc4:	280ad07a 	srli	r5,r5,1
   2acc8:	183ffb1e 	bne	r3,zero,2acb8 <_gp+0xfffe916c>
   2accc:	38000126 	beq	r7,zero,2acd4 <__modsi3+0x54>
   2acd0:	0085c83a 	sub	r2,zero,r2
   2acd4:	f800283a 	ret
   2acd8:	014bc83a 	sub	r5,zero,r5
   2acdc:	003fec06 	br	2ac90 <_gp+0xfffe9144>
   2ace0:	0109c83a 	sub	r4,zero,r4
   2ace4:	01c00044 	movi	r7,1
   2ace8:	003fe706 	br	2ac88 <_gp+0xfffe913c>
   2acec:	00c00044 	movi	r3,1
   2acf0:	003ff106 	br	2acb8 <_gp+0xfffe916c>

0002acf4 <__udivsi3>:
   2acf4:	200d883a 	mov	r6,r4
   2acf8:	2900152e 	bgeu	r5,r4,2ad50 <__udivsi3+0x5c>
   2acfc:	28001416 	blt	r5,zero,2ad50 <__udivsi3+0x5c>
   2ad00:	00800804 	movi	r2,32
   2ad04:	00c00044 	movi	r3,1
   2ad08:	00000206 	br	2ad14 <__udivsi3+0x20>
   2ad0c:	10000e26 	beq	r2,zero,2ad48 <__udivsi3+0x54>
   2ad10:	28000516 	blt	r5,zero,2ad28 <__udivsi3+0x34>
   2ad14:	294b883a 	add	r5,r5,r5
   2ad18:	10bfffc4 	addi	r2,r2,-1
   2ad1c:	18c7883a 	add	r3,r3,r3
   2ad20:	293ffa36 	bltu	r5,r4,2ad0c <_gp+0xfffe91c0>
   2ad24:	18000826 	beq	r3,zero,2ad48 <__udivsi3+0x54>
   2ad28:	0005883a 	mov	r2,zero
   2ad2c:	31400236 	bltu	r6,r5,2ad38 <__udivsi3+0x44>
   2ad30:	314dc83a 	sub	r6,r6,r5
   2ad34:	10c4b03a 	or	r2,r2,r3
   2ad38:	1806d07a 	srli	r3,r3,1
   2ad3c:	280ad07a 	srli	r5,r5,1
   2ad40:	183ffa1e 	bne	r3,zero,2ad2c <_gp+0xfffe91e0>
   2ad44:	f800283a 	ret
   2ad48:	0005883a 	mov	r2,zero
   2ad4c:	f800283a 	ret
   2ad50:	00c00044 	movi	r3,1
   2ad54:	003ff406 	br	2ad28 <_gp+0xfffe91dc>

0002ad58 <__umodsi3>:
   2ad58:	2005883a 	mov	r2,r4
   2ad5c:	2900122e 	bgeu	r5,r4,2ada8 <__umodsi3+0x50>
   2ad60:	28001116 	blt	r5,zero,2ada8 <__umodsi3+0x50>
   2ad64:	01800804 	movi	r6,32
   2ad68:	00c00044 	movi	r3,1
   2ad6c:	00000206 	br	2ad78 <__umodsi3+0x20>
   2ad70:	30000c26 	beq	r6,zero,2ada4 <__umodsi3+0x4c>
   2ad74:	28000516 	blt	r5,zero,2ad8c <__umodsi3+0x34>
   2ad78:	294b883a 	add	r5,r5,r5
   2ad7c:	31bfffc4 	addi	r6,r6,-1
   2ad80:	18c7883a 	add	r3,r3,r3
   2ad84:	293ffa36 	bltu	r5,r4,2ad70 <_gp+0xfffe9224>
   2ad88:	18000626 	beq	r3,zero,2ada4 <__umodsi3+0x4c>
   2ad8c:	1806d07a 	srli	r3,r3,1
   2ad90:	11400136 	bltu	r2,r5,2ad98 <__umodsi3+0x40>
   2ad94:	1145c83a 	sub	r2,r2,r5
   2ad98:	280ad07a 	srli	r5,r5,1
   2ad9c:	183ffb1e 	bne	r3,zero,2ad8c <_gp+0xfffe9240>
   2ada0:	f800283a 	ret
   2ada4:	f800283a 	ret
   2ada8:	00c00044 	movi	r3,1
   2adac:	003ff706 	br	2ad8c <_gp+0xfffe9240>

0002adb0 <__adddf3>:
   2adb0:	02c00434 	movhi	r11,16
   2adb4:	5affffc4 	addi	r11,r11,-1
   2adb8:	2806d7fa 	srli	r3,r5,31
   2adbc:	2ad4703a 	and	r10,r5,r11
   2adc0:	3ad2703a 	and	r9,r7,r11
   2adc4:	3804d53a 	srli	r2,r7,20
   2adc8:	3018d77a 	srli	r12,r6,29
   2adcc:	280ad53a 	srli	r5,r5,20
   2add0:	501490fa 	slli	r10,r10,3
   2add4:	2010d77a 	srli	r8,r4,29
   2add8:	481290fa 	slli	r9,r9,3
   2addc:	380ed7fa 	srli	r7,r7,31
   2ade0:	defffb04 	addi	sp,sp,-20
   2ade4:	dc800215 	stw	r18,8(sp)
   2ade8:	dc400115 	stw	r17,4(sp)
   2adec:	dc000015 	stw	r16,0(sp)
   2adf0:	dfc00415 	stw	ra,16(sp)
   2adf4:	dcc00315 	stw	r19,12(sp)
   2adf8:	1c803fcc 	andi	r18,r3,255
   2adfc:	2c01ffcc 	andi	r16,r5,2047
   2ae00:	5210b03a 	or	r8,r10,r8
   2ae04:	202290fa 	slli	r17,r4,3
   2ae08:	1081ffcc 	andi	r2,r2,2047
   2ae0c:	4b12b03a 	or	r9,r9,r12
   2ae10:	300c90fa 	slli	r6,r6,3
   2ae14:	91c07526 	beq	r18,r7,2afec <__adddf3+0x23c>
   2ae18:	8087c83a 	sub	r3,r16,r2
   2ae1c:	00c0ab0e 	bge	zero,r3,2b0cc <__adddf3+0x31c>
   2ae20:	10002a1e 	bne	r2,zero,2aecc <__adddf3+0x11c>
   2ae24:	4984b03a 	or	r2,r9,r6
   2ae28:	1000961e 	bne	r2,zero,2b084 <__adddf3+0x2d4>
   2ae2c:	888001cc 	andi	r2,r17,7
   2ae30:	10000726 	beq	r2,zero,2ae50 <__adddf3+0xa0>
   2ae34:	888003cc 	andi	r2,r17,15
   2ae38:	00c00104 	movi	r3,4
   2ae3c:	10c00426 	beq	r2,r3,2ae50 <__adddf3+0xa0>
   2ae40:	88c7883a 	add	r3,r17,r3
   2ae44:	1c63803a 	cmpltu	r17,r3,r17
   2ae48:	4451883a 	add	r8,r8,r17
   2ae4c:	1823883a 	mov	r17,r3
   2ae50:	4080202c 	andhi	r2,r8,128
   2ae54:	10005926 	beq	r2,zero,2afbc <__adddf3+0x20c>
   2ae58:	84000044 	addi	r16,r16,1
   2ae5c:	0081ffc4 	movi	r2,2047
   2ae60:	8080ba26 	beq	r16,r2,2b14c <__adddf3+0x39c>
   2ae64:	00bfe034 	movhi	r2,65408
   2ae68:	10bfffc4 	addi	r2,r2,-1
   2ae6c:	4090703a 	and	r8,r8,r2
   2ae70:	4004977a 	slli	r2,r8,29
   2ae74:	4010927a 	slli	r8,r8,9
   2ae78:	8822d0fa 	srli	r17,r17,3
   2ae7c:	8401ffcc 	andi	r16,r16,2047
   2ae80:	4010d33a 	srli	r8,r8,12
   2ae84:	9007883a 	mov	r3,r18
   2ae88:	1444b03a 	or	r2,r2,r17
   2ae8c:	8401ffcc 	andi	r16,r16,2047
   2ae90:	8020953a 	slli	r16,r16,20
   2ae94:	18c03fcc 	andi	r3,r3,255
   2ae98:	01000434 	movhi	r4,16
   2ae9c:	213fffc4 	addi	r4,r4,-1
   2aea0:	180697fa 	slli	r3,r3,31
   2aea4:	4110703a 	and	r8,r8,r4
   2aea8:	4410b03a 	or	r8,r8,r16
   2aeac:	40c6b03a 	or	r3,r8,r3
   2aeb0:	dfc00417 	ldw	ra,16(sp)
   2aeb4:	dcc00317 	ldw	r19,12(sp)
   2aeb8:	dc800217 	ldw	r18,8(sp)
   2aebc:	dc400117 	ldw	r17,4(sp)
   2aec0:	dc000017 	ldw	r16,0(sp)
   2aec4:	dec00504 	addi	sp,sp,20
   2aec8:	f800283a 	ret
   2aecc:	0081ffc4 	movi	r2,2047
   2aed0:	80bfd626 	beq	r16,r2,2ae2c <_gp+0xfffe92e0>
   2aed4:	4a402034 	orhi	r9,r9,128
   2aed8:	00800e04 	movi	r2,56
   2aedc:	10c09f16 	blt	r2,r3,2b15c <__adddf3+0x3ac>
   2aee0:	008007c4 	movi	r2,31
   2aee4:	10c0c216 	blt	r2,r3,2b1f0 <__adddf3+0x440>
   2aee8:	00800804 	movi	r2,32
   2aeec:	10c5c83a 	sub	r2,r2,r3
   2aef0:	488a983a 	sll	r5,r9,r2
   2aef4:	30c8d83a 	srl	r4,r6,r3
   2aef8:	3084983a 	sll	r2,r6,r2
   2aefc:	48c6d83a 	srl	r3,r9,r3
   2af00:	290cb03a 	or	r6,r5,r4
   2af04:	1004c03a 	cmpne	r2,r2,zero
   2af08:	308cb03a 	or	r6,r6,r2
   2af0c:	898dc83a 	sub	r6,r17,r6
   2af10:	89a3803a 	cmpltu	r17,r17,r6
   2af14:	40d1c83a 	sub	r8,r8,r3
   2af18:	4451c83a 	sub	r8,r8,r17
   2af1c:	3023883a 	mov	r17,r6
   2af20:	4080202c 	andhi	r2,r8,128
   2af24:	10002326 	beq	r2,zero,2afb4 <__adddf3+0x204>
   2af28:	04c02034 	movhi	r19,128
   2af2c:	9cffffc4 	addi	r19,r19,-1
   2af30:	44e6703a 	and	r19,r8,r19
   2af34:	98007626 	beq	r19,zero,2b110 <__adddf3+0x360>
   2af38:	9809883a 	mov	r4,r19
   2af3c:	002d3b40 	call	2d3b4 <__clzsi2>
   2af40:	10fffe04 	addi	r3,r2,-8
   2af44:	010007c4 	movi	r4,31
   2af48:	20c07716 	blt	r4,r3,2b128 <__adddf3+0x378>
   2af4c:	00800804 	movi	r2,32
   2af50:	10c5c83a 	sub	r2,r2,r3
   2af54:	8884d83a 	srl	r2,r17,r2
   2af58:	98d0983a 	sll	r8,r19,r3
   2af5c:	88e2983a 	sll	r17,r17,r3
   2af60:	1204b03a 	or	r2,r2,r8
   2af64:	1c007416 	blt	r3,r16,2b138 <__adddf3+0x388>
   2af68:	1c21c83a 	sub	r16,r3,r16
   2af6c:	82000044 	addi	r8,r16,1
   2af70:	00c007c4 	movi	r3,31
   2af74:	1a009116 	blt	r3,r8,2b1bc <__adddf3+0x40c>
   2af78:	00c00804 	movi	r3,32
   2af7c:	1a07c83a 	sub	r3,r3,r8
   2af80:	8a08d83a 	srl	r4,r17,r8
   2af84:	88e2983a 	sll	r17,r17,r3
   2af88:	10c6983a 	sll	r3,r2,r3
   2af8c:	1210d83a 	srl	r8,r2,r8
   2af90:	8804c03a 	cmpne	r2,r17,zero
   2af94:	1906b03a 	or	r3,r3,r4
   2af98:	18a2b03a 	or	r17,r3,r2
   2af9c:	0021883a 	mov	r16,zero
   2afa0:	003fa206 	br	2ae2c <_gp+0xfffe92e0>
   2afa4:	1890b03a 	or	r8,r3,r2
   2afa8:	40017d26 	beq	r8,zero,2b5a0 <__adddf3+0x7f0>
   2afac:	1011883a 	mov	r8,r2
   2afb0:	1823883a 	mov	r17,r3
   2afb4:	888001cc 	andi	r2,r17,7
   2afb8:	103f9e1e 	bne	r2,zero,2ae34 <_gp+0xfffe92e8>
   2afbc:	4004977a 	slli	r2,r8,29
   2afc0:	8822d0fa 	srli	r17,r17,3
   2afc4:	4010d0fa 	srli	r8,r8,3
   2afc8:	9007883a 	mov	r3,r18
   2afcc:	1444b03a 	or	r2,r2,r17
   2afd0:	0101ffc4 	movi	r4,2047
   2afd4:	81002426 	beq	r16,r4,2b068 <__adddf3+0x2b8>
   2afd8:	8120703a 	and	r16,r16,r4
   2afdc:	01000434 	movhi	r4,16
   2afe0:	213fffc4 	addi	r4,r4,-1
   2afe4:	4110703a 	and	r8,r8,r4
   2afe8:	003fa806 	br	2ae8c <_gp+0xfffe9340>
   2afec:	8089c83a 	sub	r4,r16,r2
   2aff0:	01005e0e 	bge	zero,r4,2b16c <__adddf3+0x3bc>
   2aff4:	10002b26 	beq	r2,zero,2b0a4 <__adddf3+0x2f4>
   2aff8:	0081ffc4 	movi	r2,2047
   2affc:	80bf8b26 	beq	r16,r2,2ae2c <_gp+0xfffe92e0>
   2b000:	4a402034 	orhi	r9,r9,128
   2b004:	00800e04 	movi	r2,56
   2b008:	1100a40e 	bge	r2,r4,2b29c <__adddf3+0x4ec>
   2b00c:	498cb03a 	or	r6,r9,r6
   2b010:	300ac03a 	cmpne	r5,r6,zero
   2b014:	0013883a 	mov	r9,zero
   2b018:	2c4b883a 	add	r5,r5,r17
   2b01c:	2c63803a 	cmpltu	r17,r5,r17
   2b020:	4a11883a 	add	r8,r9,r8
   2b024:	8a11883a 	add	r8,r17,r8
   2b028:	2823883a 	mov	r17,r5
   2b02c:	4080202c 	andhi	r2,r8,128
   2b030:	103fe026 	beq	r2,zero,2afb4 <_gp+0xfffe9468>
   2b034:	84000044 	addi	r16,r16,1
   2b038:	0081ffc4 	movi	r2,2047
   2b03c:	8080d226 	beq	r16,r2,2b388 <__adddf3+0x5d8>
   2b040:	00bfe034 	movhi	r2,65408
   2b044:	10bfffc4 	addi	r2,r2,-1
   2b048:	4090703a 	and	r8,r8,r2
   2b04c:	880ad07a 	srli	r5,r17,1
   2b050:	400897fa 	slli	r4,r8,31
   2b054:	88c0004c 	andi	r3,r17,1
   2b058:	28e2b03a 	or	r17,r5,r3
   2b05c:	4010d07a 	srli	r8,r8,1
   2b060:	2462b03a 	or	r17,r4,r17
   2b064:	003f7106 	br	2ae2c <_gp+0xfffe92e0>
   2b068:	4088b03a 	or	r4,r8,r2
   2b06c:	20014526 	beq	r4,zero,2b584 <__adddf3+0x7d4>
   2b070:	01000434 	movhi	r4,16
   2b074:	42000234 	orhi	r8,r8,8
   2b078:	213fffc4 	addi	r4,r4,-1
   2b07c:	4110703a 	and	r8,r8,r4
   2b080:	003f8206 	br	2ae8c <_gp+0xfffe9340>
   2b084:	18ffffc4 	addi	r3,r3,-1
   2b088:	1800491e 	bne	r3,zero,2b1b0 <__adddf3+0x400>
   2b08c:	898bc83a 	sub	r5,r17,r6
   2b090:	8963803a 	cmpltu	r17,r17,r5
   2b094:	4251c83a 	sub	r8,r8,r9
   2b098:	4451c83a 	sub	r8,r8,r17
   2b09c:	2823883a 	mov	r17,r5
   2b0a0:	003f9f06 	br	2af20 <_gp+0xfffe93d4>
   2b0a4:	4984b03a 	or	r2,r9,r6
   2b0a8:	103f6026 	beq	r2,zero,2ae2c <_gp+0xfffe92e0>
   2b0ac:	213fffc4 	addi	r4,r4,-1
   2b0b0:	2000931e 	bne	r4,zero,2b300 <__adddf3+0x550>
   2b0b4:	898d883a 	add	r6,r17,r6
   2b0b8:	3463803a 	cmpltu	r17,r6,r17
   2b0bc:	4251883a 	add	r8,r8,r9
   2b0c0:	8a11883a 	add	r8,r17,r8
   2b0c4:	3023883a 	mov	r17,r6
   2b0c8:	003fd806 	br	2b02c <_gp+0xfffe94e0>
   2b0cc:	1800541e 	bne	r3,zero,2b220 <__adddf3+0x470>
   2b0d0:	80800044 	addi	r2,r16,1
   2b0d4:	1081ffcc 	andi	r2,r2,2047
   2b0d8:	00c00044 	movi	r3,1
   2b0dc:	1880a00e 	bge	r3,r2,2b360 <__adddf3+0x5b0>
   2b0e0:	8989c83a 	sub	r4,r17,r6
   2b0e4:	8905803a 	cmpltu	r2,r17,r4
   2b0e8:	4267c83a 	sub	r19,r8,r9
   2b0ec:	98a7c83a 	sub	r19,r19,r2
   2b0f0:	9880202c 	andhi	r2,r19,128
   2b0f4:	10006326 	beq	r2,zero,2b284 <__adddf3+0x4d4>
   2b0f8:	3463c83a 	sub	r17,r6,r17
   2b0fc:	4a07c83a 	sub	r3,r9,r8
   2b100:	344d803a 	cmpltu	r6,r6,r17
   2b104:	19a7c83a 	sub	r19,r3,r6
   2b108:	3825883a 	mov	r18,r7
   2b10c:	983f8a1e 	bne	r19,zero,2af38 <_gp+0xfffe93ec>
   2b110:	8809883a 	mov	r4,r17
   2b114:	002d3b40 	call	2d3b4 <__clzsi2>
   2b118:	10800804 	addi	r2,r2,32
   2b11c:	10fffe04 	addi	r3,r2,-8
   2b120:	010007c4 	movi	r4,31
   2b124:	20ff890e 	bge	r4,r3,2af4c <_gp+0xfffe9400>
   2b128:	10bff604 	addi	r2,r2,-40
   2b12c:	8884983a 	sll	r2,r17,r2
   2b130:	0023883a 	mov	r17,zero
   2b134:	1c3f8c0e 	bge	r3,r16,2af68 <_gp+0xfffe941c>
   2b138:	023fe034 	movhi	r8,65408
   2b13c:	423fffc4 	addi	r8,r8,-1
   2b140:	80e1c83a 	sub	r16,r16,r3
   2b144:	1210703a 	and	r8,r2,r8
   2b148:	003f3806 	br	2ae2c <_gp+0xfffe92e0>
   2b14c:	9007883a 	mov	r3,r18
   2b150:	0011883a 	mov	r8,zero
   2b154:	0005883a 	mov	r2,zero
   2b158:	003f4c06 	br	2ae8c <_gp+0xfffe9340>
   2b15c:	498cb03a 	or	r6,r9,r6
   2b160:	300cc03a 	cmpne	r6,r6,zero
   2b164:	0007883a 	mov	r3,zero
   2b168:	003f6806 	br	2af0c <_gp+0xfffe93c0>
   2b16c:	20009c1e 	bne	r4,zero,2b3e0 <__adddf3+0x630>
   2b170:	80800044 	addi	r2,r16,1
   2b174:	1141ffcc 	andi	r5,r2,2047
   2b178:	01000044 	movi	r4,1
   2b17c:	2140670e 	bge	r4,r5,2b31c <__adddf3+0x56c>
   2b180:	0101ffc4 	movi	r4,2047
   2b184:	11007f26 	beq	r2,r4,2b384 <__adddf3+0x5d4>
   2b188:	898d883a 	add	r6,r17,r6
   2b18c:	4247883a 	add	r3,r8,r9
   2b190:	3451803a 	cmpltu	r8,r6,r17
   2b194:	40d1883a 	add	r8,r8,r3
   2b198:	402297fa 	slli	r17,r8,31
   2b19c:	300cd07a 	srli	r6,r6,1
   2b1a0:	4010d07a 	srli	r8,r8,1
   2b1a4:	1021883a 	mov	r16,r2
   2b1a8:	89a2b03a 	or	r17,r17,r6
   2b1ac:	003f1f06 	br	2ae2c <_gp+0xfffe92e0>
   2b1b0:	0081ffc4 	movi	r2,2047
   2b1b4:	80bf481e 	bne	r16,r2,2aed8 <_gp+0xfffe938c>
   2b1b8:	003f1c06 	br	2ae2c <_gp+0xfffe92e0>
   2b1bc:	843ff844 	addi	r16,r16,-31
   2b1c0:	01000804 	movi	r4,32
   2b1c4:	1406d83a 	srl	r3,r2,r16
   2b1c8:	41005026 	beq	r8,r4,2b30c <__adddf3+0x55c>
   2b1cc:	01001004 	movi	r4,64
   2b1d0:	2211c83a 	sub	r8,r4,r8
   2b1d4:	1204983a 	sll	r2,r2,r8
   2b1d8:	88a2b03a 	or	r17,r17,r2
   2b1dc:	8822c03a 	cmpne	r17,r17,zero
   2b1e0:	1c62b03a 	or	r17,r3,r17
   2b1e4:	0011883a 	mov	r8,zero
   2b1e8:	0021883a 	mov	r16,zero
   2b1ec:	003f7106 	br	2afb4 <_gp+0xfffe9468>
   2b1f0:	193ff804 	addi	r4,r3,-32
   2b1f4:	00800804 	movi	r2,32
   2b1f8:	4908d83a 	srl	r4,r9,r4
   2b1fc:	18804526 	beq	r3,r2,2b314 <__adddf3+0x564>
   2b200:	00801004 	movi	r2,64
   2b204:	10c5c83a 	sub	r2,r2,r3
   2b208:	4886983a 	sll	r3,r9,r2
   2b20c:	198cb03a 	or	r6,r3,r6
   2b210:	300cc03a 	cmpne	r6,r6,zero
   2b214:	218cb03a 	or	r6,r4,r6
   2b218:	0007883a 	mov	r3,zero
   2b21c:	003f3b06 	br	2af0c <_gp+0xfffe93c0>
   2b220:	80002a26 	beq	r16,zero,2b2cc <__adddf3+0x51c>
   2b224:	0101ffc4 	movi	r4,2047
   2b228:	11006826 	beq	r2,r4,2b3cc <__adddf3+0x61c>
   2b22c:	00c7c83a 	sub	r3,zero,r3
   2b230:	42002034 	orhi	r8,r8,128
   2b234:	01000e04 	movi	r4,56
   2b238:	20c07c16 	blt	r4,r3,2b42c <__adddf3+0x67c>
   2b23c:	010007c4 	movi	r4,31
   2b240:	20c0da16 	blt	r4,r3,2b5ac <__adddf3+0x7fc>
   2b244:	01000804 	movi	r4,32
   2b248:	20c9c83a 	sub	r4,r4,r3
   2b24c:	4114983a 	sll	r10,r8,r4
   2b250:	88cad83a 	srl	r5,r17,r3
   2b254:	8908983a 	sll	r4,r17,r4
   2b258:	40c6d83a 	srl	r3,r8,r3
   2b25c:	5162b03a 	or	r17,r10,r5
   2b260:	2008c03a 	cmpne	r4,r4,zero
   2b264:	8922b03a 	or	r17,r17,r4
   2b268:	3463c83a 	sub	r17,r6,r17
   2b26c:	48c7c83a 	sub	r3,r9,r3
   2b270:	344d803a 	cmpltu	r6,r6,r17
   2b274:	1991c83a 	sub	r8,r3,r6
   2b278:	1021883a 	mov	r16,r2
   2b27c:	3825883a 	mov	r18,r7
   2b280:	003f2706 	br	2af20 <_gp+0xfffe93d4>
   2b284:	24d0b03a 	or	r8,r4,r19
   2b288:	40001b1e 	bne	r8,zero,2b2f8 <__adddf3+0x548>
   2b28c:	0005883a 	mov	r2,zero
   2b290:	0007883a 	mov	r3,zero
   2b294:	0021883a 	mov	r16,zero
   2b298:	003f4d06 	br	2afd0 <_gp+0xfffe9484>
   2b29c:	008007c4 	movi	r2,31
   2b2a0:	11003c16 	blt	r2,r4,2b394 <__adddf3+0x5e4>
   2b2a4:	00800804 	movi	r2,32
   2b2a8:	1105c83a 	sub	r2,r2,r4
   2b2ac:	488e983a 	sll	r7,r9,r2
   2b2b0:	310ad83a 	srl	r5,r6,r4
   2b2b4:	3084983a 	sll	r2,r6,r2
   2b2b8:	4912d83a 	srl	r9,r9,r4
   2b2bc:	394ab03a 	or	r5,r7,r5
   2b2c0:	1004c03a 	cmpne	r2,r2,zero
   2b2c4:	288ab03a 	or	r5,r5,r2
   2b2c8:	003f5306 	br	2b018 <_gp+0xfffe94cc>
   2b2cc:	4448b03a 	or	r4,r8,r17
   2b2d0:	20003e26 	beq	r4,zero,2b3cc <__adddf3+0x61c>
   2b2d4:	00c6303a 	nor	r3,zero,r3
   2b2d8:	18003a1e 	bne	r3,zero,2b3c4 <__adddf3+0x614>
   2b2dc:	3463c83a 	sub	r17,r6,r17
   2b2e0:	4a07c83a 	sub	r3,r9,r8
   2b2e4:	344d803a 	cmpltu	r6,r6,r17
   2b2e8:	1991c83a 	sub	r8,r3,r6
   2b2ec:	1021883a 	mov	r16,r2
   2b2f0:	3825883a 	mov	r18,r7
   2b2f4:	003f0a06 	br	2af20 <_gp+0xfffe93d4>
   2b2f8:	2023883a 	mov	r17,r4
   2b2fc:	003f0d06 	br	2af34 <_gp+0xfffe93e8>
   2b300:	0081ffc4 	movi	r2,2047
   2b304:	80bf3f1e 	bne	r16,r2,2b004 <_gp+0xfffe94b8>
   2b308:	003ec806 	br	2ae2c <_gp+0xfffe92e0>
   2b30c:	0005883a 	mov	r2,zero
   2b310:	003fb106 	br	2b1d8 <_gp+0xfffe968c>
   2b314:	0007883a 	mov	r3,zero
   2b318:	003fbc06 	br	2b20c <_gp+0xfffe96c0>
   2b31c:	4444b03a 	or	r2,r8,r17
   2b320:	8000871e 	bne	r16,zero,2b540 <__adddf3+0x790>
   2b324:	1000ba26 	beq	r2,zero,2b610 <__adddf3+0x860>
   2b328:	4984b03a 	or	r2,r9,r6
   2b32c:	103ebf26 	beq	r2,zero,2ae2c <_gp+0xfffe92e0>
   2b330:	8985883a 	add	r2,r17,r6
   2b334:	4247883a 	add	r3,r8,r9
   2b338:	1451803a 	cmpltu	r8,r2,r17
   2b33c:	40d1883a 	add	r8,r8,r3
   2b340:	40c0202c 	andhi	r3,r8,128
   2b344:	1023883a 	mov	r17,r2
   2b348:	183f1a26 	beq	r3,zero,2afb4 <_gp+0xfffe9468>
   2b34c:	00bfe034 	movhi	r2,65408
   2b350:	10bfffc4 	addi	r2,r2,-1
   2b354:	2021883a 	mov	r16,r4
   2b358:	4090703a 	and	r8,r8,r2
   2b35c:	003eb306 	br	2ae2c <_gp+0xfffe92e0>
   2b360:	4444b03a 	or	r2,r8,r17
   2b364:	8000291e 	bne	r16,zero,2b40c <__adddf3+0x65c>
   2b368:	10004b1e 	bne	r2,zero,2b498 <__adddf3+0x6e8>
   2b36c:	4990b03a 	or	r8,r9,r6
   2b370:	40008b26 	beq	r8,zero,2b5a0 <__adddf3+0x7f0>
   2b374:	4811883a 	mov	r8,r9
   2b378:	3023883a 	mov	r17,r6
   2b37c:	3825883a 	mov	r18,r7
   2b380:	003eaa06 	br	2ae2c <_gp+0xfffe92e0>
   2b384:	1021883a 	mov	r16,r2
   2b388:	0011883a 	mov	r8,zero
   2b38c:	0005883a 	mov	r2,zero
   2b390:	003f0f06 	br	2afd0 <_gp+0xfffe9484>
   2b394:	217ff804 	addi	r5,r4,-32
   2b398:	00800804 	movi	r2,32
   2b39c:	494ad83a 	srl	r5,r9,r5
   2b3a0:	20807d26 	beq	r4,r2,2b598 <__adddf3+0x7e8>
   2b3a4:	00801004 	movi	r2,64
   2b3a8:	1109c83a 	sub	r4,r2,r4
   2b3ac:	4912983a 	sll	r9,r9,r4
   2b3b0:	498cb03a 	or	r6,r9,r6
   2b3b4:	300cc03a 	cmpne	r6,r6,zero
   2b3b8:	298ab03a 	or	r5,r5,r6
   2b3bc:	0013883a 	mov	r9,zero
   2b3c0:	003f1506 	br	2b018 <_gp+0xfffe94cc>
   2b3c4:	0101ffc4 	movi	r4,2047
   2b3c8:	113f9a1e 	bne	r2,r4,2b234 <_gp+0xfffe96e8>
   2b3cc:	4811883a 	mov	r8,r9
   2b3d0:	3023883a 	mov	r17,r6
   2b3d4:	1021883a 	mov	r16,r2
   2b3d8:	3825883a 	mov	r18,r7
   2b3dc:	003e9306 	br	2ae2c <_gp+0xfffe92e0>
   2b3e0:	8000161e 	bne	r16,zero,2b43c <__adddf3+0x68c>
   2b3e4:	444ab03a 	or	r5,r8,r17
   2b3e8:	28005126 	beq	r5,zero,2b530 <__adddf3+0x780>
   2b3ec:	0108303a 	nor	r4,zero,r4
   2b3f0:	20004d1e 	bne	r4,zero,2b528 <__adddf3+0x778>
   2b3f4:	89a3883a 	add	r17,r17,r6
   2b3f8:	4253883a 	add	r9,r8,r9
   2b3fc:	898d803a 	cmpltu	r6,r17,r6
   2b400:	3251883a 	add	r8,r6,r9
   2b404:	1021883a 	mov	r16,r2
   2b408:	003f0806 	br	2b02c <_gp+0xfffe94e0>
   2b40c:	1000301e 	bne	r2,zero,2b4d0 <__adddf3+0x720>
   2b410:	4984b03a 	or	r2,r9,r6
   2b414:	10007126 	beq	r2,zero,2b5dc <__adddf3+0x82c>
   2b418:	4811883a 	mov	r8,r9
   2b41c:	3023883a 	mov	r17,r6
   2b420:	3825883a 	mov	r18,r7
   2b424:	0401ffc4 	movi	r16,2047
   2b428:	003e8006 	br	2ae2c <_gp+0xfffe92e0>
   2b42c:	4462b03a 	or	r17,r8,r17
   2b430:	8822c03a 	cmpne	r17,r17,zero
   2b434:	0007883a 	mov	r3,zero
   2b438:	003f8b06 	br	2b268 <_gp+0xfffe971c>
   2b43c:	0141ffc4 	movi	r5,2047
   2b440:	11403b26 	beq	r2,r5,2b530 <__adddf3+0x780>
   2b444:	0109c83a 	sub	r4,zero,r4
   2b448:	42002034 	orhi	r8,r8,128
   2b44c:	01400e04 	movi	r5,56
   2b450:	29006716 	blt	r5,r4,2b5f0 <__adddf3+0x840>
   2b454:	014007c4 	movi	r5,31
   2b458:	29007016 	blt	r5,r4,2b61c <__adddf3+0x86c>
   2b45c:	01400804 	movi	r5,32
   2b460:	290bc83a 	sub	r5,r5,r4
   2b464:	4154983a 	sll	r10,r8,r5
   2b468:	890ed83a 	srl	r7,r17,r4
   2b46c:	894a983a 	sll	r5,r17,r5
   2b470:	4108d83a 	srl	r4,r8,r4
   2b474:	51e2b03a 	or	r17,r10,r7
   2b478:	280ac03a 	cmpne	r5,r5,zero
   2b47c:	8962b03a 	or	r17,r17,r5
   2b480:	89a3883a 	add	r17,r17,r6
   2b484:	2253883a 	add	r9,r4,r9
   2b488:	898d803a 	cmpltu	r6,r17,r6
   2b48c:	3251883a 	add	r8,r6,r9
   2b490:	1021883a 	mov	r16,r2
   2b494:	003ee506 	br	2b02c <_gp+0xfffe94e0>
   2b498:	4984b03a 	or	r2,r9,r6
   2b49c:	103e6326 	beq	r2,zero,2ae2c <_gp+0xfffe92e0>
   2b4a0:	8987c83a 	sub	r3,r17,r6
   2b4a4:	88c9803a 	cmpltu	r4,r17,r3
   2b4a8:	4245c83a 	sub	r2,r8,r9
   2b4ac:	1105c83a 	sub	r2,r2,r4
   2b4b0:	1100202c 	andhi	r4,r2,128
   2b4b4:	203ebb26 	beq	r4,zero,2afa4 <_gp+0xfffe9458>
   2b4b8:	3463c83a 	sub	r17,r6,r17
   2b4bc:	4a07c83a 	sub	r3,r9,r8
   2b4c0:	344d803a 	cmpltu	r6,r6,r17
   2b4c4:	1991c83a 	sub	r8,r3,r6
   2b4c8:	3825883a 	mov	r18,r7
   2b4cc:	003e5706 	br	2ae2c <_gp+0xfffe92e0>
   2b4d0:	4984b03a 	or	r2,r9,r6
   2b4d4:	10002e26 	beq	r2,zero,2b590 <__adddf3+0x7e0>
   2b4d8:	4004d0fa 	srli	r2,r8,3
   2b4dc:	8822d0fa 	srli	r17,r17,3
   2b4e0:	4010977a 	slli	r8,r8,29
   2b4e4:	10c0022c 	andhi	r3,r2,8
   2b4e8:	4462b03a 	or	r17,r8,r17
   2b4ec:	18000826 	beq	r3,zero,2b510 <__adddf3+0x760>
   2b4f0:	4808d0fa 	srli	r4,r9,3
   2b4f4:	20c0022c 	andhi	r3,r4,8
   2b4f8:	1800051e 	bne	r3,zero,2b510 <__adddf3+0x760>
   2b4fc:	300cd0fa 	srli	r6,r6,3
   2b500:	4806977a 	slli	r3,r9,29
   2b504:	2005883a 	mov	r2,r4
   2b508:	3825883a 	mov	r18,r7
   2b50c:	19a2b03a 	or	r17,r3,r6
   2b510:	8810d77a 	srli	r8,r17,29
   2b514:	100490fa 	slli	r2,r2,3
   2b518:	882290fa 	slli	r17,r17,3
   2b51c:	0401ffc4 	movi	r16,2047
   2b520:	4090b03a 	or	r8,r8,r2
   2b524:	003e4106 	br	2ae2c <_gp+0xfffe92e0>
   2b528:	0141ffc4 	movi	r5,2047
   2b52c:	117fc71e 	bne	r2,r5,2b44c <_gp+0xfffe9900>
   2b530:	4811883a 	mov	r8,r9
   2b534:	3023883a 	mov	r17,r6
   2b538:	1021883a 	mov	r16,r2
   2b53c:	003e3b06 	br	2ae2c <_gp+0xfffe92e0>
   2b540:	10002f26 	beq	r2,zero,2b600 <__adddf3+0x850>
   2b544:	4984b03a 	or	r2,r9,r6
   2b548:	10001126 	beq	r2,zero,2b590 <__adddf3+0x7e0>
   2b54c:	4004d0fa 	srli	r2,r8,3
   2b550:	8822d0fa 	srli	r17,r17,3
   2b554:	4010977a 	slli	r8,r8,29
   2b558:	10c0022c 	andhi	r3,r2,8
   2b55c:	4462b03a 	or	r17,r8,r17
   2b560:	183feb26 	beq	r3,zero,2b510 <_gp+0xfffe99c4>
   2b564:	4808d0fa 	srli	r4,r9,3
   2b568:	20c0022c 	andhi	r3,r4,8
   2b56c:	183fe81e 	bne	r3,zero,2b510 <_gp+0xfffe99c4>
   2b570:	300cd0fa 	srli	r6,r6,3
   2b574:	4806977a 	slli	r3,r9,29
   2b578:	2005883a 	mov	r2,r4
   2b57c:	19a2b03a 	or	r17,r3,r6
   2b580:	003fe306 	br	2b510 <_gp+0xfffe99c4>
   2b584:	0011883a 	mov	r8,zero
   2b588:	0005883a 	mov	r2,zero
   2b58c:	003e3f06 	br	2ae8c <_gp+0xfffe9340>
   2b590:	0401ffc4 	movi	r16,2047
   2b594:	003e2506 	br	2ae2c <_gp+0xfffe92e0>
   2b598:	0013883a 	mov	r9,zero
   2b59c:	003f8406 	br	2b3b0 <_gp+0xfffe9864>
   2b5a0:	0005883a 	mov	r2,zero
   2b5a4:	0007883a 	mov	r3,zero
   2b5a8:	003e8906 	br	2afd0 <_gp+0xfffe9484>
   2b5ac:	197ff804 	addi	r5,r3,-32
   2b5b0:	01000804 	movi	r4,32
   2b5b4:	414ad83a 	srl	r5,r8,r5
   2b5b8:	19002426 	beq	r3,r4,2b64c <__adddf3+0x89c>
   2b5bc:	01001004 	movi	r4,64
   2b5c0:	20c7c83a 	sub	r3,r4,r3
   2b5c4:	40c6983a 	sll	r3,r8,r3
   2b5c8:	1c46b03a 	or	r3,r3,r17
   2b5cc:	1806c03a 	cmpne	r3,r3,zero
   2b5d0:	28e2b03a 	or	r17,r5,r3
   2b5d4:	0007883a 	mov	r3,zero
   2b5d8:	003f2306 	br	2b268 <_gp+0xfffe971c>
   2b5dc:	0007883a 	mov	r3,zero
   2b5e0:	5811883a 	mov	r8,r11
   2b5e4:	00bfffc4 	movi	r2,-1
   2b5e8:	0401ffc4 	movi	r16,2047
   2b5ec:	003e7806 	br	2afd0 <_gp+0xfffe9484>
   2b5f0:	4462b03a 	or	r17,r8,r17
   2b5f4:	8822c03a 	cmpne	r17,r17,zero
   2b5f8:	0009883a 	mov	r4,zero
   2b5fc:	003fa006 	br	2b480 <_gp+0xfffe9934>
   2b600:	4811883a 	mov	r8,r9
   2b604:	3023883a 	mov	r17,r6
   2b608:	0401ffc4 	movi	r16,2047
   2b60c:	003e0706 	br	2ae2c <_gp+0xfffe92e0>
   2b610:	4811883a 	mov	r8,r9
   2b614:	3023883a 	mov	r17,r6
   2b618:	003e0406 	br	2ae2c <_gp+0xfffe92e0>
   2b61c:	21fff804 	addi	r7,r4,-32
   2b620:	01400804 	movi	r5,32
   2b624:	41ced83a 	srl	r7,r8,r7
   2b628:	21400a26 	beq	r4,r5,2b654 <__adddf3+0x8a4>
   2b62c:	01401004 	movi	r5,64
   2b630:	2909c83a 	sub	r4,r5,r4
   2b634:	4108983a 	sll	r4,r8,r4
   2b638:	2448b03a 	or	r4,r4,r17
   2b63c:	2008c03a 	cmpne	r4,r4,zero
   2b640:	3922b03a 	or	r17,r7,r4
   2b644:	0009883a 	mov	r4,zero
   2b648:	003f8d06 	br	2b480 <_gp+0xfffe9934>
   2b64c:	0007883a 	mov	r3,zero
   2b650:	003fdd06 	br	2b5c8 <_gp+0xfffe9a7c>
   2b654:	0009883a 	mov	r4,zero
   2b658:	003ff706 	br	2b638 <_gp+0xfffe9aec>

0002b65c <__divdf3>:
   2b65c:	defff204 	addi	sp,sp,-56
   2b660:	dd400915 	stw	r21,36(sp)
   2b664:	282ad53a 	srli	r21,r5,20
   2b668:	dd000815 	stw	r20,32(sp)
   2b66c:	2828d7fa 	srli	r20,r5,31
   2b670:	dc000415 	stw	r16,16(sp)
   2b674:	04000434 	movhi	r16,16
   2b678:	df000c15 	stw	fp,48(sp)
   2b67c:	843fffc4 	addi	r16,r16,-1
   2b680:	dfc00d15 	stw	ra,52(sp)
   2b684:	ddc00b15 	stw	r23,44(sp)
   2b688:	dd800a15 	stw	r22,40(sp)
   2b68c:	dcc00715 	stw	r19,28(sp)
   2b690:	dc800615 	stw	r18,24(sp)
   2b694:	dc400515 	stw	r17,20(sp)
   2b698:	ad41ffcc 	andi	r21,r21,2047
   2b69c:	2c20703a 	and	r16,r5,r16
   2b6a0:	a7003fcc 	andi	fp,r20,255
   2b6a4:	a8006126 	beq	r21,zero,2b82c <__divdf3+0x1d0>
   2b6a8:	0081ffc4 	movi	r2,2047
   2b6ac:	2025883a 	mov	r18,r4
   2b6b0:	a8803726 	beq	r21,r2,2b790 <__divdf3+0x134>
   2b6b4:	80800434 	orhi	r2,r16,16
   2b6b8:	100490fa 	slli	r2,r2,3
   2b6bc:	2020d77a 	srli	r16,r4,29
   2b6c0:	202490fa 	slli	r18,r4,3
   2b6c4:	ad7f0044 	addi	r21,r21,-1023
   2b6c8:	80a0b03a 	or	r16,r16,r2
   2b6cc:	0027883a 	mov	r19,zero
   2b6d0:	0013883a 	mov	r9,zero
   2b6d4:	3804d53a 	srli	r2,r7,20
   2b6d8:	382cd7fa 	srli	r22,r7,31
   2b6dc:	04400434 	movhi	r17,16
   2b6e0:	8c7fffc4 	addi	r17,r17,-1
   2b6e4:	1081ffcc 	andi	r2,r2,2047
   2b6e8:	3011883a 	mov	r8,r6
   2b6ec:	3c62703a 	and	r17,r7,r17
   2b6f0:	b5c03fcc 	andi	r23,r22,255
   2b6f4:	10006c26 	beq	r2,zero,2b8a8 <__divdf3+0x24c>
   2b6f8:	00c1ffc4 	movi	r3,2047
   2b6fc:	10c06426 	beq	r2,r3,2b890 <__divdf3+0x234>
   2b700:	88c00434 	orhi	r3,r17,16
   2b704:	180690fa 	slli	r3,r3,3
   2b708:	3022d77a 	srli	r17,r6,29
   2b70c:	301090fa 	slli	r8,r6,3
   2b710:	10bf0044 	addi	r2,r2,-1023
   2b714:	88e2b03a 	or	r17,r17,r3
   2b718:	000f883a 	mov	r7,zero
   2b71c:	a58cf03a 	xor	r6,r20,r22
   2b720:	3cc8b03a 	or	r4,r7,r19
   2b724:	a8abc83a 	sub	r21,r21,r2
   2b728:	008003c4 	movi	r2,15
   2b72c:	3007883a 	mov	r3,r6
   2b730:	34c03fcc 	andi	r19,r6,255
   2b734:	11009036 	bltu	r2,r4,2b978 <__divdf3+0x31c>
   2b738:	200890ba 	slli	r4,r4,2
   2b73c:	008000f4 	movhi	r2,3
   2b740:	10add404 	addi	r2,r2,-18608
   2b744:	2089883a 	add	r4,r4,r2
   2b748:	20800017 	ldw	r2,0(r4)
   2b74c:	1000683a 	jmp	r2
   2b750:	0002b978 	rdprs	zero,zero,2789
   2b754:	0002b7c8 	cmpgei	zero,zero,2783
   2b758:	0002b968 	cmpgeui	zero,zero,2789
   2b75c:	0002b7bc 	xorhi	zero,zero,2782
   2b760:	0002b968 	cmpgeui	zero,zero,2789
   2b764:	0002b93c 	xorhi	zero,zero,2788
   2b768:	0002b968 	cmpgeui	zero,zero,2789
   2b76c:	0002b7bc 	xorhi	zero,zero,2782
   2b770:	0002b7c8 	cmpgei	zero,zero,2783
   2b774:	0002b7c8 	cmpgei	zero,zero,2783
   2b778:	0002b93c 	xorhi	zero,zero,2788
   2b77c:	0002b7bc 	xorhi	zero,zero,2782
   2b780:	0002b7ac 	andhi	zero,zero,2782
   2b784:	0002b7ac 	andhi	zero,zero,2782
   2b788:	0002b7ac 	andhi	zero,zero,2782
   2b78c:	0002bc5c 	xori	zero,zero,2801
   2b790:	2404b03a 	or	r2,r4,r16
   2b794:	1000661e 	bne	r2,zero,2b930 <__divdf3+0x2d4>
   2b798:	04c00204 	movi	r19,8
   2b79c:	0021883a 	mov	r16,zero
   2b7a0:	0025883a 	mov	r18,zero
   2b7a4:	02400084 	movi	r9,2
   2b7a8:	003fca06 	br	2b6d4 <_gp+0xfffe9b88>
   2b7ac:	8023883a 	mov	r17,r16
   2b7b0:	9011883a 	mov	r8,r18
   2b7b4:	e02f883a 	mov	r23,fp
   2b7b8:	480f883a 	mov	r7,r9
   2b7bc:	00800084 	movi	r2,2
   2b7c0:	3881311e 	bne	r7,r2,2bc88 <__divdf3+0x62c>
   2b7c4:	b827883a 	mov	r19,r23
   2b7c8:	98c0004c 	andi	r3,r19,1
   2b7cc:	0081ffc4 	movi	r2,2047
   2b7d0:	000b883a 	mov	r5,zero
   2b7d4:	0025883a 	mov	r18,zero
   2b7d8:	1004953a 	slli	r2,r2,20
   2b7dc:	18c03fcc 	andi	r3,r3,255
   2b7e0:	04400434 	movhi	r17,16
   2b7e4:	8c7fffc4 	addi	r17,r17,-1
   2b7e8:	180697fa 	slli	r3,r3,31
   2b7ec:	2c4a703a 	and	r5,r5,r17
   2b7f0:	288ab03a 	or	r5,r5,r2
   2b7f4:	28c6b03a 	or	r3,r5,r3
   2b7f8:	9005883a 	mov	r2,r18
   2b7fc:	dfc00d17 	ldw	ra,52(sp)
   2b800:	df000c17 	ldw	fp,48(sp)
   2b804:	ddc00b17 	ldw	r23,44(sp)
   2b808:	dd800a17 	ldw	r22,40(sp)
   2b80c:	dd400917 	ldw	r21,36(sp)
   2b810:	dd000817 	ldw	r20,32(sp)
   2b814:	dcc00717 	ldw	r19,28(sp)
   2b818:	dc800617 	ldw	r18,24(sp)
   2b81c:	dc400517 	ldw	r17,20(sp)
   2b820:	dc000417 	ldw	r16,16(sp)
   2b824:	dec00e04 	addi	sp,sp,56
   2b828:	f800283a 	ret
   2b82c:	2404b03a 	or	r2,r4,r16
   2b830:	2027883a 	mov	r19,r4
   2b834:	10003926 	beq	r2,zero,2b91c <__divdf3+0x2c0>
   2b838:	80012e26 	beq	r16,zero,2bcf4 <__divdf3+0x698>
   2b83c:	8009883a 	mov	r4,r16
   2b840:	d9800315 	stw	r6,12(sp)
   2b844:	d9c00215 	stw	r7,8(sp)
   2b848:	002d3b40 	call	2d3b4 <__clzsi2>
   2b84c:	d9800317 	ldw	r6,12(sp)
   2b850:	d9c00217 	ldw	r7,8(sp)
   2b854:	113ffd44 	addi	r4,r2,-11
   2b858:	00c00704 	movi	r3,28
   2b85c:	19012116 	blt	r3,r4,2bce4 <__divdf3+0x688>
   2b860:	00c00744 	movi	r3,29
   2b864:	147ffe04 	addi	r17,r2,-8
   2b868:	1907c83a 	sub	r3,r3,r4
   2b86c:	8460983a 	sll	r16,r16,r17
   2b870:	98c6d83a 	srl	r3,r19,r3
   2b874:	9c64983a 	sll	r18,r19,r17
   2b878:	1c20b03a 	or	r16,r3,r16
   2b87c:	1080fcc4 	addi	r2,r2,1011
   2b880:	00abc83a 	sub	r21,zero,r2
   2b884:	0027883a 	mov	r19,zero
   2b888:	0013883a 	mov	r9,zero
   2b88c:	003f9106 	br	2b6d4 <_gp+0xfffe9b88>
   2b890:	3446b03a 	or	r3,r6,r17
   2b894:	18001f1e 	bne	r3,zero,2b914 <__divdf3+0x2b8>
   2b898:	0023883a 	mov	r17,zero
   2b89c:	0011883a 	mov	r8,zero
   2b8a0:	01c00084 	movi	r7,2
   2b8a4:	003f9d06 	br	2b71c <_gp+0xfffe9bd0>
   2b8a8:	3446b03a 	or	r3,r6,r17
   2b8ac:	18001526 	beq	r3,zero,2b904 <__divdf3+0x2a8>
   2b8b0:	88011b26 	beq	r17,zero,2bd20 <__divdf3+0x6c4>
   2b8b4:	8809883a 	mov	r4,r17
   2b8b8:	d9800315 	stw	r6,12(sp)
   2b8bc:	da400115 	stw	r9,4(sp)
   2b8c0:	002d3b40 	call	2d3b4 <__clzsi2>
   2b8c4:	d9800317 	ldw	r6,12(sp)
   2b8c8:	da400117 	ldw	r9,4(sp)
   2b8cc:	113ffd44 	addi	r4,r2,-11
   2b8d0:	00c00704 	movi	r3,28
   2b8d4:	19010e16 	blt	r3,r4,2bd10 <__divdf3+0x6b4>
   2b8d8:	00c00744 	movi	r3,29
   2b8dc:	123ffe04 	addi	r8,r2,-8
   2b8e0:	1907c83a 	sub	r3,r3,r4
   2b8e4:	8a22983a 	sll	r17,r17,r8
   2b8e8:	30c6d83a 	srl	r3,r6,r3
   2b8ec:	3210983a 	sll	r8,r6,r8
   2b8f0:	1c62b03a 	or	r17,r3,r17
   2b8f4:	1080fcc4 	addi	r2,r2,1011
   2b8f8:	0085c83a 	sub	r2,zero,r2
   2b8fc:	000f883a 	mov	r7,zero
   2b900:	003f8606 	br	2b71c <_gp+0xfffe9bd0>
   2b904:	0023883a 	mov	r17,zero
   2b908:	0011883a 	mov	r8,zero
   2b90c:	01c00044 	movi	r7,1
   2b910:	003f8206 	br	2b71c <_gp+0xfffe9bd0>
   2b914:	01c000c4 	movi	r7,3
   2b918:	003f8006 	br	2b71c <_gp+0xfffe9bd0>
   2b91c:	04c00104 	movi	r19,4
   2b920:	0021883a 	mov	r16,zero
   2b924:	0025883a 	mov	r18,zero
   2b928:	02400044 	movi	r9,1
   2b92c:	003f6906 	br	2b6d4 <_gp+0xfffe9b88>
   2b930:	04c00304 	movi	r19,12
   2b934:	024000c4 	movi	r9,3
   2b938:	003f6606 	br	2b6d4 <_gp+0xfffe9b88>
   2b93c:	01400434 	movhi	r5,16
   2b940:	0007883a 	mov	r3,zero
   2b944:	297fffc4 	addi	r5,r5,-1
   2b948:	04bfffc4 	movi	r18,-1
   2b94c:	0081ffc4 	movi	r2,2047
   2b950:	003fa106 	br	2b7d8 <_gp+0xfffe9c8c>
   2b954:	00c00044 	movi	r3,1
   2b958:	1887c83a 	sub	r3,r3,r2
   2b95c:	01000e04 	movi	r4,56
   2b960:	20c1210e 	bge	r4,r3,2bde8 <__divdf3+0x78c>
   2b964:	98c0004c 	andi	r3,r19,1
   2b968:	0005883a 	mov	r2,zero
   2b96c:	000b883a 	mov	r5,zero
   2b970:	0025883a 	mov	r18,zero
   2b974:	003f9806 	br	2b7d8 <_gp+0xfffe9c8c>
   2b978:	8c00fd36 	bltu	r17,r16,2bd70 <__divdf3+0x714>
   2b97c:	8440fb26 	beq	r16,r17,2bd6c <__divdf3+0x710>
   2b980:	8007883a 	mov	r3,r16
   2b984:	ad7fffc4 	addi	r21,r21,-1
   2b988:	0021883a 	mov	r16,zero
   2b98c:	4004d63a 	srli	r2,r8,24
   2b990:	8822923a 	slli	r17,r17,8
   2b994:	1809883a 	mov	r4,r3
   2b998:	402c923a 	slli	r22,r8,8
   2b99c:	88b8b03a 	or	fp,r17,r2
   2b9a0:	e028d43a 	srli	r20,fp,16
   2b9a4:	d8c00015 	stw	r3,0(sp)
   2b9a8:	e5ffffcc 	andi	r23,fp,65535
   2b9ac:	a00b883a 	mov	r5,r20
   2b9b0:	002acf40 	call	2acf4 <__udivsi3>
   2b9b4:	d8c00017 	ldw	r3,0(sp)
   2b9b8:	a00b883a 	mov	r5,r20
   2b9bc:	d8800315 	stw	r2,12(sp)
   2b9c0:	1809883a 	mov	r4,r3
   2b9c4:	002ad580 	call	2ad58 <__umodsi3>
   2b9c8:	d9800317 	ldw	r6,12(sp)
   2b9cc:	1006943a 	slli	r3,r2,16
   2b9d0:	9004d43a 	srli	r2,r18,16
   2b9d4:	b9a3383a 	mul	r17,r23,r6
   2b9d8:	10c4b03a 	or	r2,r2,r3
   2b9dc:	1440062e 	bgeu	r2,r17,2b9f8 <__divdf3+0x39c>
   2b9e0:	1705883a 	add	r2,r2,fp
   2b9e4:	30ffffc4 	addi	r3,r6,-1
   2b9e8:	1700ee36 	bltu	r2,fp,2bda4 <__divdf3+0x748>
   2b9ec:	1440ed2e 	bgeu	r2,r17,2bda4 <__divdf3+0x748>
   2b9f0:	31bfff84 	addi	r6,r6,-2
   2b9f4:	1705883a 	add	r2,r2,fp
   2b9f8:	1463c83a 	sub	r17,r2,r17
   2b9fc:	a00b883a 	mov	r5,r20
   2ba00:	8809883a 	mov	r4,r17
   2ba04:	d9800315 	stw	r6,12(sp)
   2ba08:	002acf40 	call	2acf4 <__udivsi3>
   2ba0c:	a00b883a 	mov	r5,r20
   2ba10:	8809883a 	mov	r4,r17
   2ba14:	d8800215 	stw	r2,8(sp)
   2ba18:	002ad580 	call	2ad58 <__umodsi3>
   2ba1c:	d9c00217 	ldw	r7,8(sp)
   2ba20:	1004943a 	slli	r2,r2,16
   2ba24:	94bfffcc 	andi	r18,r18,65535
   2ba28:	b9d1383a 	mul	r8,r23,r7
   2ba2c:	90a4b03a 	or	r18,r18,r2
   2ba30:	d9800317 	ldw	r6,12(sp)
   2ba34:	9200062e 	bgeu	r18,r8,2ba50 <__divdf3+0x3f4>
   2ba38:	9725883a 	add	r18,r18,fp
   2ba3c:	38bfffc4 	addi	r2,r7,-1
   2ba40:	9700d636 	bltu	r18,fp,2bd9c <__divdf3+0x740>
   2ba44:	9200d52e 	bgeu	r18,r8,2bd9c <__divdf3+0x740>
   2ba48:	39ffff84 	addi	r7,r7,-2
   2ba4c:	9725883a 	add	r18,r18,fp
   2ba50:	3004943a 	slli	r2,r6,16
   2ba54:	b012d43a 	srli	r9,r22,16
   2ba58:	b1bfffcc 	andi	r6,r22,65535
   2ba5c:	11e2b03a 	or	r17,r2,r7
   2ba60:	8806d43a 	srli	r3,r17,16
   2ba64:	893fffcc 	andi	r4,r17,65535
   2ba68:	218b383a 	mul	r5,r4,r6
   2ba6c:	30c5383a 	mul	r2,r6,r3
   2ba70:	2249383a 	mul	r4,r4,r9
   2ba74:	280ed43a 	srli	r7,r5,16
   2ba78:	9225c83a 	sub	r18,r18,r8
   2ba7c:	2089883a 	add	r4,r4,r2
   2ba80:	3909883a 	add	r4,r7,r4
   2ba84:	1a47383a 	mul	r3,r3,r9
   2ba88:	2080022e 	bgeu	r4,r2,2ba94 <__divdf3+0x438>
   2ba8c:	00800074 	movhi	r2,1
   2ba90:	1887883a 	add	r3,r3,r2
   2ba94:	2004d43a 	srli	r2,r4,16
   2ba98:	2008943a 	slli	r4,r4,16
   2ba9c:	297fffcc 	andi	r5,r5,65535
   2baa0:	10c7883a 	add	r3,r2,r3
   2baa4:	2149883a 	add	r4,r4,r5
   2baa8:	90c0a536 	bltu	r18,r3,2bd40 <__divdf3+0x6e4>
   2baac:	90c0bf26 	beq	r18,r3,2bdac <__divdf3+0x750>
   2bab0:	90c7c83a 	sub	r3,r18,r3
   2bab4:	810fc83a 	sub	r7,r16,r4
   2bab8:	81e5803a 	cmpltu	r18,r16,r7
   2babc:	1ca5c83a 	sub	r18,r3,r18
   2bac0:	e480c126 	beq	fp,r18,2bdc8 <__divdf3+0x76c>
   2bac4:	a00b883a 	mov	r5,r20
   2bac8:	9009883a 	mov	r4,r18
   2bacc:	d9800315 	stw	r6,12(sp)
   2bad0:	d9c00215 	stw	r7,8(sp)
   2bad4:	da400115 	stw	r9,4(sp)
   2bad8:	002acf40 	call	2acf4 <__udivsi3>
   2badc:	a00b883a 	mov	r5,r20
   2bae0:	9009883a 	mov	r4,r18
   2bae4:	d8800015 	stw	r2,0(sp)
   2bae8:	002ad580 	call	2ad58 <__umodsi3>
   2baec:	d9c00217 	ldw	r7,8(sp)
   2baf0:	da000017 	ldw	r8,0(sp)
   2baf4:	1006943a 	slli	r3,r2,16
   2baf8:	3804d43a 	srli	r2,r7,16
   2bafc:	ba21383a 	mul	r16,r23,r8
   2bb00:	d9800317 	ldw	r6,12(sp)
   2bb04:	10c4b03a 	or	r2,r2,r3
   2bb08:	da400117 	ldw	r9,4(sp)
   2bb0c:	1400062e 	bgeu	r2,r16,2bb28 <__divdf3+0x4cc>
   2bb10:	1705883a 	add	r2,r2,fp
   2bb14:	40ffffc4 	addi	r3,r8,-1
   2bb18:	1700ad36 	bltu	r2,fp,2bdd0 <__divdf3+0x774>
   2bb1c:	1400ac2e 	bgeu	r2,r16,2bdd0 <__divdf3+0x774>
   2bb20:	423fff84 	addi	r8,r8,-2
   2bb24:	1705883a 	add	r2,r2,fp
   2bb28:	1421c83a 	sub	r16,r2,r16
   2bb2c:	a00b883a 	mov	r5,r20
   2bb30:	8009883a 	mov	r4,r16
   2bb34:	d9800315 	stw	r6,12(sp)
   2bb38:	d9c00215 	stw	r7,8(sp)
   2bb3c:	da000015 	stw	r8,0(sp)
   2bb40:	da400115 	stw	r9,4(sp)
   2bb44:	002acf40 	call	2acf4 <__udivsi3>
   2bb48:	8009883a 	mov	r4,r16
   2bb4c:	a00b883a 	mov	r5,r20
   2bb50:	1025883a 	mov	r18,r2
   2bb54:	002ad580 	call	2ad58 <__umodsi3>
   2bb58:	d9c00217 	ldw	r7,8(sp)
   2bb5c:	1004943a 	slli	r2,r2,16
   2bb60:	bcaf383a 	mul	r23,r23,r18
   2bb64:	393fffcc 	andi	r4,r7,65535
   2bb68:	2088b03a 	or	r4,r4,r2
   2bb6c:	d9800317 	ldw	r6,12(sp)
   2bb70:	da000017 	ldw	r8,0(sp)
   2bb74:	da400117 	ldw	r9,4(sp)
   2bb78:	25c0062e 	bgeu	r4,r23,2bb94 <__divdf3+0x538>
   2bb7c:	2709883a 	add	r4,r4,fp
   2bb80:	90bfffc4 	addi	r2,r18,-1
   2bb84:	27009436 	bltu	r4,fp,2bdd8 <__divdf3+0x77c>
   2bb88:	25c0932e 	bgeu	r4,r23,2bdd8 <__divdf3+0x77c>
   2bb8c:	94bfff84 	addi	r18,r18,-2
   2bb90:	2709883a 	add	r4,r4,fp
   2bb94:	4004943a 	slli	r2,r8,16
   2bb98:	25efc83a 	sub	r23,r4,r23
   2bb9c:	1490b03a 	or	r8,r2,r18
   2bba0:	4008d43a 	srli	r4,r8,16
   2bba4:	40ffffcc 	andi	r3,r8,65535
   2bba8:	30c5383a 	mul	r2,r6,r3
   2bbac:	1a47383a 	mul	r3,r3,r9
   2bbb0:	310d383a 	mul	r6,r6,r4
   2bbb4:	100ad43a 	srli	r5,r2,16
   2bbb8:	4913383a 	mul	r9,r9,r4
   2bbbc:	1987883a 	add	r3,r3,r6
   2bbc0:	28c7883a 	add	r3,r5,r3
   2bbc4:	1980022e 	bgeu	r3,r6,2bbd0 <__divdf3+0x574>
   2bbc8:	01000074 	movhi	r4,1
   2bbcc:	4913883a 	add	r9,r9,r4
   2bbd0:	1808d43a 	srli	r4,r3,16
   2bbd4:	1806943a 	slli	r3,r3,16
   2bbd8:	10bfffcc 	andi	r2,r2,65535
   2bbdc:	2253883a 	add	r9,r4,r9
   2bbe0:	1887883a 	add	r3,r3,r2
   2bbe4:	ba403836 	bltu	r23,r9,2bcc8 <__divdf3+0x66c>
   2bbe8:	ba403626 	beq	r23,r9,2bcc4 <__divdf3+0x668>
   2bbec:	42000054 	ori	r8,r8,1
   2bbf0:	a880ffc4 	addi	r2,r21,1023
   2bbf4:	00bf570e 	bge	zero,r2,2b954 <_gp+0xfffe9e08>
   2bbf8:	40c001cc 	andi	r3,r8,7
   2bbfc:	18000726 	beq	r3,zero,2bc1c <__divdf3+0x5c0>
   2bc00:	40c003cc 	andi	r3,r8,15
   2bc04:	01000104 	movi	r4,4
   2bc08:	19000426 	beq	r3,r4,2bc1c <__divdf3+0x5c0>
   2bc0c:	4107883a 	add	r3,r8,r4
   2bc10:	1a11803a 	cmpltu	r8,r3,r8
   2bc14:	8a23883a 	add	r17,r17,r8
   2bc18:	1811883a 	mov	r8,r3
   2bc1c:	88c0402c 	andhi	r3,r17,256
   2bc20:	18000426 	beq	r3,zero,2bc34 <__divdf3+0x5d8>
   2bc24:	00ffc034 	movhi	r3,65280
   2bc28:	18ffffc4 	addi	r3,r3,-1
   2bc2c:	a8810004 	addi	r2,r21,1024
   2bc30:	88e2703a 	and	r17,r17,r3
   2bc34:	00c1ff84 	movi	r3,2046
   2bc38:	18bee316 	blt	r3,r2,2b7c8 <_gp+0xfffe9c7c>
   2bc3c:	8824977a 	slli	r18,r17,29
   2bc40:	4010d0fa 	srli	r8,r8,3
   2bc44:	8822927a 	slli	r17,r17,9
   2bc48:	1081ffcc 	andi	r2,r2,2047
   2bc4c:	9224b03a 	or	r18,r18,r8
   2bc50:	880ad33a 	srli	r5,r17,12
   2bc54:	98c0004c 	andi	r3,r19,1
   2bc58:	003edf06 	br	2b7d8 <_gp+0xfffe9c8c>
   2bc5c:	8080022c 	andhi	r2,r16,8
   2bc60:	10001226 	beq	r2,zero,2bcac <__divdf3+0x650>
   2bc64:	8880022c 	andhi	r2,r17,8
   2bc68:	1000101e 	bne	r2,zero,2bcac <__divdf3+0x650>
   2bc6c:	00800434 	movhi	r2,16
   2bc70:	89400234 	orhi	r5,r17,8
   2bc74:	10bfffc4 	addi	r2,r2,-1
   2bc78:	b007883a 	mov	r3,r22
   2bc7c:	288a703a 	and	r5,r5,r2
   2bc80:	4025883a 	mov	r18,r8
   2bc84:	003f3106 	br	2b94c <_gp+0xfffe9e00>
   2bc88:	008000c4 	movi	r2,3
   2bc8c:	3880a626 	beq	r7,r2,2bf28 <__divdf3+0x8cc>
   2bc90:	00800044 	movi	r2,1
   2bc94:	3880521e 	bne	r7,r2,2bde0 <__divdf3+0x784>
   2bc98:	b807883a 	mov	r3,r23
   2bc9c:	0005883a 	mov	r2,zero
   2bca0:	000b883a 	mov	r5,zero
   2bca4:	0025883a 	mov	r18,zero
   2bca8:	003ecb06 	br	2b7d8 <_gp+0xfffe9c8c>
   2bcac:	00800434 	movhi	r2,16
   2bcb0:	81400234 	orhi	r5,r16,8
   2bcb4:	10bfffc4 	addi	r2,r2,-1
   2bcb8:	a007883a 	mov	r3,r20
   2bcbc:	288a703a 	and	r5,r5,r2
   2bcc0:	003f2206 	br	2b94c <_gp+0xfffe9e00>
   2bcc4:	183fca26 	beq	r3,zero,2bbf0 <_gp+0xfffea0a4>
   2bcc8:	e5ef883a 	add	r23,fp,r23
   2bccc:	40bfffc4 	addi	r2,r8,-1
   2bcd0:	bf00392e 	bgeu	r23,fp,2bdb8 <__divdf3+0x75c>
   2bcd4:	1011883a 	mov	r8,r2
   2bcd8:	ba7fc41e 	bne	r23,r9,2bbec <_gp+0xfffea0a0>
   2bcdc:	b0ffc31e 	bne	r22,r3,2bbec <_gp+0xfffea0a0>
   2bce0:	003fc306 	br	2bbf0 <_gp+0xfffea0a4>
   2bce4:	143ff604 	addi	r16,r2,-40
   2bce8:	9c20983a 	sll	r16,r19,r16
   2bcec:	0025883a 	mov	r18,zero
   2bcf0:	003ee206 	br	2b87c <_gp+0xfffe9d30>
   2bcf4:	d9800315 	stw	r6,12(sp)
   2bcf8:	d9c00215 	stw	r7,8(sp)
   2bcfc:	002d3b40 	call	2d3b4 <__clzsi2>
   2bd00:	10800804 	addi	r2,r2,32
   2bd04:	d9c00217 	ldw	r7,8(sp)
   2bd08:	d9800317 	ldw	r6,12(sp)
   2bd0c:	003ed106 	br	2b854 <_gp+0xfffe9d08>
   2bd10:	147ff604 	addi	r17,r2,-40
   2bd14:	3462983a 	sll	r17,r6,r17
   2bd18:	0011883a 	mov	r8,zero
   2bd1c:	003ef506 	br	2b8f4 <_gp+0xfffe9da8>
   2bd20:	3009883a 	mov	r4,r6
   2bd24:	d9800315 	stw	r6,12(sp)
   2bd28:	da400115 	stw	r9,4(sp)
   2bd2c:	002d3b40 	call	2d3b4 <__clzsi2>
   2bd30:	10800804 	addi	r2,r2,32
   2bd34:	da400117 	ldw	r9,4(sp)
   2bd38:	d9800317 	ldw	r6,12(sp)
   2bd3c:	003ee306 	br	2b8cc <_gp+0xfffe9d80>
   2bd40:	85a1883a 	add	r16,r16,r22
   2bd44:	8585803a 	cmpltu	r2,r16,r22
   2bd48:	1705883a 	add	r2,r2,fp
   2bd4c:	14a5883a 	add	r18,r2,r18
   2bd50:	88bfffc4 	addi	r2,r17,-1
   2bd54:	e4800c2e 	bgeu	fp,r18,2bd88 <__divdf3+0x72c>
   2bd58:	90c03e36 	bltu	r18,r3,2be54 <__divdf3+0x7f8>
   2bd5c:	1c806926 	beq	r3,r18,2bf04 <__divdf3+0x8a8>
   2bd60:	90c7c83a 	sub	r3,r18,r3
   2bd64:	1023883a 	mov	r17,r2
   2bd68:	003f5206 	br	2bab4 <_gp+0xfffe9f68>
   2bd6c:	923f0436 	bltu	r18,r8,2b980 <_gp+0xfffe9e34>
   2bd70:	800897fa 	slli	r4,r16,31
   2bd74:	9004d07a 	srli	r2,r18,1
   2bd78:	8006d07a 	srli	r3,r16,1
   2bd7c:	902097fa 	slli	r16,r18,31
   2bd80:	20a4b03a 	or	r18,r4,r2
   2bd84:	003f0106 	br	2b98c <_gp+0xfffe9e40>
   2bd88:	e4bff51e 	bne	fp,r18,2bd60 <_gp+0xfffea214>
   2bd8c:	85bff22e 	bgeu	r16,r22,2bd58 <_gp+0xfffea20c>
   2bd90:	e0c7c83a 	sub	r3,fp,r3
   2bd94:	1023883a 	mov	r17,r2
   2bd98:	003f4606 	br	2bab4 <_gp+0xfffe9f68>
   2bd9c:	100f883a 	mov	r7,r2
   2bda0:	003f2b06 	br	2ba50 <_gp+0xfffe9f04>
   2bda4:	180d883a 	mov	r6,r3
   2bda8:	003f1306 	br	2b9f8 <_gp+0xfffe9eac>
   2bdac:	813fe436 	bltu	r16,r4,2bd40 <_gp+0xfffea1f4>
   2bdb0:	0007883a 	mov	r3,zero
   2bdb4:	003f3f06 	br	2bab4 <_gp+0xfffe9f68>
   2bdb8:	ba402c36 	bltu	r23,r9,2be6c <__divdf3+0x810>
   2bdbc:	4dc05426 	beq	r9,r23,2bf10 <__divdf3+0x8b4>
   2bdc0:	1011883a 	mov	r8,r2
   2bdc4:	003f8906 	br	2bbec <_gp+0xfffea0a0>
   2bdc8:	023fffc4 	movi	r8,-1
   2bdcc:	003f8806 	br	2bbf0 <_gp+0xfffea0a4>
   2bdd0:	1811883a 	mov	r8,r3
   2bdd4:	003f5406 	br	2bb28 <_gp+0xfffe9fdc>
   2bdd8:	1025883a 	mov	r18,r2
   2bddc:	003f6d06 	br	2bb94 <_gp+0xfffea048>
   2bde0:	b827883a 	mov	r19,r23
   2bde4:	003f8206 	br	2bbf0 <_gp+0xfffea0a4>
   2bde8:	010007c4 	movi	r4,31
   2bdec:	20c02616 	blt	r4,r3,2be88 <__divdf3+0x82c>
   2bdf0:	00800804 	movi	r2,32
   2bdf4:	10c5c83a 	sub	r2,r2,r3
   2bdf8:	888a983a 	sll	r5,r17,r2
   2bdfc:	40c8d83a 	srl	r4,r8,r3
   2be00:	4084983a 	sll	r2,r8,r2
   2be04:	88e2d83a 	srl	r17,r17,r3
   2be08:	2906b03a 	or	r3,r5,r4
   2be0c:	1004c03a 	cmpne	r2,r2,zero
   2be10:	1886b03a 	or	r3,r3,r2
   2be14:	188001cc 	andi	r2,r3,7
   2be18:	10000726 	beq	r2,zero,2be38 <__divdf3+0x7dc>
   2be1c:	188003cc 	andi	r2,r3,15
   2be20:	01000104 	movi	r4,4
   2be24:	11000426 	beq	r2,r4,2be38 <__divdf3+0x7dc>
   2be28:	1805883a 	mov	r2,r3
   2be2c:	10c00104 	addi	r3,r2,4
   2be30:	1885803a 	cmpltu	r2,r3,r2
   2be34:	88a3883a 	add	r17,r17,r2
   2be38:	8880202c 	andhi	r2,r17,128
   2be3c:	10002726 	beq	r2,zero,2bedc <__divdf3+0x880>
   2be40:	98c0004c 	andi	r3,r19,1
   2be44:	00800044 	movi	r2,1
   2be48:	000b883a 	mov	r5,zero
   2be4c:	0025883a 	mov	r18,zero
   2be50:	003e6106 	br	2b7d8 <_gp+0xfffe9c8c>
   2be54:	85a1883a 	add	r16,r16,r22
   2be58:	8585803a 	cmpltu	r2,r16,r22
   2be5c:	1705883a 	add	r2,r2,fp
   2be60:	14a5883a 	add	r18,r2,r18
   2be64:	8c7fff84 	addi	r17,r17,-2
   2be68:	003f1106 	br	2bab0 <_gp+0xfffe9f64>
   2be6c:	b589883a 	add	r4,r22,r22
   2be70:	25ad803a 	cmpltu	r22,r4,r22
   2be74:	b739883a 	add	fp,r22,fp
   2be78:	40bfff84 	addi	r2,r8,-2
   2be7c:	bf2f883a 	add	r23,r23,fp
   2be80:	202d883a 	mov	r22,r4
   2be84:	003f9306 	br	2bcd4 <_gp+0xfffea188>
   2be88:	013ff844 	movi	r4,-31
   2be8c:	2085c83a 	sub	r2,r4,r2
   2be90:	8888d83a 	srl	r4,r17,r2
   2be94:	00800804 	movi	r2,32
   2be98:	18802126 	beq	r3,r2,2bf20 <__divdf3+0x8c4>
   2be9c:	00801004 	movi	r2,64
   2bea0:	10c5c83a 	sub	r2,r2,r3
   2bea4:	8884983a 	sll	r2,r17,r2
   2bea8:	1204b03a 	or	r2,r2,r8
   2beac:	1004c03a 	cmpne	r2,r2,zero
   2beb0:	2084b03a 	or	r2,r4,r2
   2beb4:	144001cc 	andi	r17,r2,7
   2beb8:	88000d1e 	bne	r17,zero,2bef0 <__divdf3+0x894>
   2bebc:	000b883a 	mov	r5,zero
   2bec0:	1024d0fa 	srli	r18,r2,3
   2bec4:	98c0004c 	andi	r3,r19,1
   2bec8:	0005883a 	mov	r2,zero
   2becc:	9464b03a 	or	r18,r18,r17
   2bed0:	003e4106 	br	2b7d8 <_gp+0xfffe9c8c>
   2bed4:	1007883a 	mov	r3,r2
   2bed8:	0023883a 	mov	r17,zero
   2bedc:	880a927a 	slli	r5,r17,9
   2bee0:	1805883a 	mov	r2,r3
   2bee4:	8822977a 	slli	r17,r17,29
   2bee8:	280ad33a 	srli	r5,r5,12
   2beec:	003ff406 	br	2bec0 <_gp+0xfffea374>
   2bef0:	10c003cc 	andi	r3,r2,15
   2bef4:	01000104 	movi	r4,4
   2bef8:	193ff626 	beq	r3,r4,2bed4 <_gp+0xfffea388>
   2befc:	0023883a 	mov	r17,zero
   2bf00:	003fca06 	br	2be2c <_gp+0xfffea2e0>
   2bf04:	813fd336 	bltu	r16,r4,2be54 <_gp+0xfffea308>
   2bf08:	1023883a 	mov	r17,r2
   2bf0c:	003fa806 	br	2bdb0 <_gp+0xfffea264>
   2bf10:	b0ffd636 	bltu	r22,r3,2be6c <_gp+0xfffea320>
   2bf14:	1011883a 	mov	r8,r2
   2bf18:	b0ff341e 	bne	r22,r3,2bbec <_gp+0xfffea0a0>
   2bf1c:	003f3406 	br	2bbf0 <_gp+0xfffea0a4>
   2bf20:	0005883a 	mov	r2,zero
   2bf24:	003fe006 	br	2bea8 <_gp+0xfffea35c>
   2bf28:	00800434 	movhi	r2,16
   2bf2c:	89400234 	orhi	r5,r17,8
   2bf30:	10bfffc4 	addi	r2,r2,-1
   2bf34:	b807883a 	mov	r3,r23
   2bf38:	288a703a 	and	r5,r5,r2
   2bf3c:	4025883a 	mov	r18,r8
   2bf40:	003e8206 	br	2b94c <_gp+0xfffe9e00>

0002bf44 <__eqdf2>:
   2bf44:	2804d53a 	srli	r2,r5,20
   2bf48:	3806d53a 	srli	r3,r7,20
   2bf4c:	02000434 	movhi	r8,16
   2bf50:	423fffc4 	addi	r8,r8,-1
   2bf54:	1081ffcc 	andi	r2,r2,2047
   2bf58:	0281ffc4 	movi	r10,2047
   2bf5c:	2a12703a 	and	r9,r5,r8
   2bf60:	18c1ffcc 	andi	r3,r3,2047
   2bf64:	3a10703a 	and	r8,r7,r8
   2bf68:	280ad7fa 	srli	r5,r5,31
   2bf6c:	380ed7fa 	srli	r7,r7,31
   2bf70:	12801026 	beq	r2,r10,2bfb4 <__eqdf2+0x70>
   2bf74:	0281ffc4 	movi	r10,2047
   2bf78:	1a800a26 	beq	r3,r10,2bfa4 <__eqdf2+0x60>
   2bf7c:	10c00226 	beq	r2,r3,2bf88 <__eqdf2+0x44>
   2bf80:	00800044 	movi	r2,1
   2bf84:	f800283a 	ret
   2bf88:	4a3ffd1e 	bne	r9,r8,2bf80 <_gp+0xfffea434>
   2bf8c:	21bffc1e 	bne	r4,r6,2bf80 <_gp+0xfffea434>
   2bf90:	29c00c26 	beq	r5,r7,2bfc4 <__eqdf2+0x80>
   2bf94:	103ffa1e 	bne	r2,zero,2bf80 <_gp+0xfffea434>
   2bf98:	2244b03a 	or	r2,r4,r9
   2bf9c:	1004c03a 	cmpne	r2,r2,zero
   2bfa0:	f800283a 	ret
   2bfa4:	3214b03a 	or	r10,r6,r8
   2bfa8:	503ff426 	beq	r10,zero,2bf7c <_gp+0xfffea430>
   2bfac:	00800044 	movi	r2,1
   2bfb0:	f800283a 	ret
   2bfb4:	2254b03a 	or	r10,r4,r9
   2bfb8:	503fee26 	beq	r10,zero,2bf74 <_gp+0xfffea428>
   2bfbc:	00800044 	movi	r2,1
   2bfc0:	f800283a 	ret
   2bfc4:	0005883a 	mov	r2,zero
   2bfc8:	f800283a 	ret

0002bfcc <__gedf2>:
   2bfcc:	2804d53a 	srli	r2,r5,20
   2bfd0:	3806d53a 	srli	r3,r7,20
   2bfd4:	02000434 	movhi	r8,16
   2bfd8:	423fffc4 	addi	r8,r8,-1
   2bfdc:	1081ffcc 	andi	r2,r2,2047
   2bfe0:	0241ffc4 	movi	r9,2047
   2bfe4:	2a14703a 	and	r10,r5,r8
   2bfe8:	18c1ffcc 	andi	r3,r3,2047
   2bfec:	3a10703a 	and	r8,r7,r8
   2bff0:	280ad7fa 	srli	r5,r5,31
   2bff4:	380ed7fa 	srli	r7,r7,31
   2bff8:	12401d26 	beq	r2,r9,2c070 <__gedf2+0xa4>
   2bffc:	0241ffc4 	movi	r9,2047
   2c000:	1a401226 	beq	r3,r9,2c04c <__gedf2+0x80>
   2c004:	1000081e 	bne	r2,zero,2c028 <__gedf2+0x5c>
   2c008:	2296b03a 	or	r11,r4,r10
   2c00c:	5813003a 	cmpeq	r9,r11,zero
   2c010:	1800091e 	bne	r3,zero,2c038 <__gedf2+0x6c>
   2c014:	3218b03a 	or	r12,r6,r8
   2c018:	6000071e 	bne	r12,zero,2c038 <__gedf2+0x6c>
   2c01c:	0005883a 	mov	r2,zero
   2c020:	5800101e 	bne	r11,zero,2c064 <__gedf2+0x98>
   2c024:	f800283a 	ret
   2c028:	18000c1e 	bne	r3,zero,2c05c <__gedf2+0x90>
   2c02c:	3212b03a 	or	r9,r6,r8
   2c030:	48000c26 	beq	r9,zero,2c064 <__gedf2+0x98>
   2c034:	0013883a 	mov	r9,zero
   2c038:	39c03fcc 	andi	r7,r7,255
   2c03c:	48000826 	beq	r9,zero,2c060 <__gedf2+0x94>
   2c040:	38000926 	beq	r7,zero,2c068 <__gedf2+0x9c>
   2c044:	00800044 	movi	r2,1
   2c048:	f800283a 	ret
   2c04c:	3212b03a 	or	r9,r6,r8
   2c050:	483fec26 	beq	r9,zero,2c004 <_gp+0xfffea4b8>
   2c054:	00bfff84 	movi	r2,-2
   2c058:	f800283a 	ret
   2c05c:	39c03fcc 	andi	r7,r7,255
   2c060:	29c00626 	beq	r5,r7,2c07c <__gedf2+0xb0>
   2c064:	283ff726 	beq	r5,zero,2c044 <_gp+0xfffea4f8>
   2c068:	00bfffc4 	movi	r2,-1
   2c06c:	f800283a 	ret
   2c070:	2292b03a 	or	r9,r4,r10
   2c074:	483fe126 	beq	r9,zero,2bffc <_gp+0xfffea4b0>
   2c078:	003ff606 	br	2c054 <_gp+0xfffea508>
   2c07c:	18bff916 	blt	r3,r2,2c064 <_gp+0xfffea518>
   2c080:	10c00316 	blt	r2,r3,2c090 <__gedf2+0xc4>
   2c084:	42bff736 	bltu	r8,r10,2c064 <_gp+0xfffea518>
   2c088:	52000326 	beq	r10,r8,2c098 <__gedf2+0xcc>
   2c08c:	5200042e 	bgeu	r10,r8,2c0a0 <__gedf2+0xd4>
   2c090:	283fec1e 	bne	r5,zero,2c044 <_gp+0xfffea4f8>
   2c094:	003ff406 	br	2c068 <_gp+0xfffea51c>
   2c098:	313ff236 	bltu	r6,r4,2c064 <_gp+0xfffea518>
   2c09c:	21bffc36 	bltu	r4,r6,2c090 <_gp+0xfffea544>
   2c0a0:	0005883a 	mov	r2,zero
   2c0a4:	f800283a 	ret

0002c0a8 <__ledf2>:
   2c0a8:	2804d53a 	srli	r2,r5,20
   2c0ac:	3810d53a 	srli	r8,r7,20
   2c0b0:	00c00434 	movhi	r3,16
   2c0b4:	18ffffc4 	addi	r3,r3,-1
   2c0b8:	1081ffcc 	andi	r2,r2,2047
   2c0bc:	0241ffc4 	movi	r9,2047
   2c0c0:	28d4703a 	and	r10,r5,r3
   2c0c4:	4201ffcc 	andi	r8,r8,2047
   2c0c8:	38c6703a 	and	r3,r7,r3
   2c0cc:	280ad7fa 	srli	r5,r5,31
   2c0d0:	380ed7fa 	srli	r7,r7,31
   2c0d4:	12401f26 	beq	r2,r9,2c154 <__ledf2+0xac>
   2c0d8:	0241ffc4 	movi	r9,2047
   2c0dc:	42401426 	beq	r8,r9,2c130 <__ledf2+0x88>
   2c0e0:	1000091e 	bne	r2,zero,2c108 <__ledf2+0x60>
   2c0e4:	2296b03a 	or	r11,r4,r10
   2c0e8:	5813003a 	cmpeq	r9,r11,zero
   2c0ec:	29403fcc 	andi	r5,r5,255
   2c0f0:	40000a1e 	bne	r8,zero,2c11c <__ledf2+0x74>
   2c0f4:	30d8b03a 	or	r12,r6,r3
   2c0f8:	6000081e 	bne	r12,zero,2c11c <__ledf2+0x74>
   2c0fc:	0005883a 	mov	r2,zero
   2c100:	5800111e 	bne	r11,zero,2c148 <__ledf2+0xa0>
   2c104:	f800283a 	ret
   2c108:	29403fcc 	andi	r5,r5,255
   2c10c:	40000c1e 	bne	r8,zero,2c140 <__ledf2+0x98>
   2c110:	30d2b03a 	or	r9,r6,r3
   2c114:	48000c26 	beq	r9,zero,2c148 <__ledf2+0xa0>
   2c118:	0013883a 	mov	r9,zero
   2c11c:	39c03fcc 	andi	r7,r7,255
   2c120:	48000826 	beq	r9,zero,2c144 <__ledf2+0x9c>
   2c124:	38001126 	beq	r7,zero,2c16c <__ledf2+0xc4>
   2c128:	00800044 	movi	r2,1
   2c12c:	f800283a 	ret
   2c130:	30d2b03a 	or	r9,r6,r3
   2c134:	483fea26 	beq	r9,zero,2c0e0 <_gp+0xfffea594>
   2c138:	00800084 	movi	r2,2
   2c13c:	f800283a 	ret
   2c140:	39c03fcc 	andi	r7,r7,255
   2c144:	39400726 	beq	r7,r5,2c164 <__ledf2+0xbc>
   2c148:	2800081e 	bne	r5,zero,2c16c <__ledf2+0xc4>
   2c14c:	00800044 	movi	r2,1
   2c150:	f800283a 	ret
   2c154:	2292b03a 	or	r9,r4,r10
   2c158:	483fdf26 	beq	r9,zero,2c0d8 <_gp+0xfffea58c>
   2c15c:	00800084 	movi	r2,2
   2c160:	f800283a 	ret
   2c164:	4080030e 	bge	r8,r2,2c174 <__ledf2+0xcc>
   2c168:	383fef26 	beq	r7,zero,2c128 <_gp+0xfffea5dc>
   2c16c:	00bfffc4 	movi	r2,-1
   2c170:	f800283a 	ret
   2c174:	123feb16 	blt	r2,r8,2c124 <_gp+0xfffea5d8>
   2c178:	1abff336 	bltu	r3,r10,2c148 <_gp+0xfffea5fc>
   2c17c:	50c00326 	beq	r10,r3,2c18c <__ledf2+0xe4>
   2c180:	50c0042e 	bgeu	r10,r3,2c194 <__ledf2+0xec>
   2c184:	283fe81e 	bne	r5,zero,2c128 <_gp+0xfffea5dc>
   2c188:	003ff806 	br	2c16c <_gp+0xfffea620>
   2c18c:	313fee36 	bltu	r6,r4,2c148 <_gp+0xfffea5fc>
   2c190:	21bffc36 	bltu	r4,r6,2c184 <_gp+0xfffea638>
   2c194:	0005883a 	mov	r2,zero
   2c198:	f800283a 	ret

0002c19c <__muldf3>:
   2c19c:	defff304 	addi	sp,sp,-52
   2c1a0:	2804d53a 	srli	r2,r5,20
   2c1a4:	dd800915 	stw	r22,36(sp)
   2c1a8:	282cd7fa 	srli	r22,r5,31
   2c1ac:	dc000315 	stw	r16,12(sp)
   2c1b0:	04000434 	movhi	r16,16
   2c1b4:	dd400815 	stw	r21,32(sp)
   2c1b8:	dc800515 	stw	r18,20(sp)
   2c1bc:	843fffc4 	addi	r16,r16,-1
   2c1c0:	dfc00c15 	stw	ra,48(sp)
   2c1c4:	df000b15 	stw	fp,44(sp)
   2c1c8:	ddc00a15 	stw	r23,40(sp)
   2c1cc:	dd000715 	stw	r20,28(sp)
   2c1d0:	dcc00615 	stw	r19,24(sp)
   2c1d4:	dc400415 	stw	r17,16(sp)
   2c1d8:	1481ffcc 	andi	r18,r2,2047
   2c1dc:	2c20703a 	and	r16,r5,r16
   2c1e0:	b02b883a 	mov	r21,r22
   2c1e4:	b2403fcc 	andi	r9,r22,255
   2c1e8:	90006026 	beq	r18,zero,2c36c <__muldf3+0x1d0>
   2c1ec:	0081ffc4 	movi	r2,2047
   2c1f0:	2029883a 	mov	r20,r4
   2c1f4:	90803626 	beq	r18,r2,2c2d0 <__muldf3+0x134>
   2c1f8:	80800434 	orhi	r2,r16,16
   2c1fc:	100490fa 	slli	r2,r2,3
   2c200:	2020d77a 	srli	r16,r4,29
   2c204:	202890fa 	slli	r20,r4,3
   2c208:	94bf0044 	addi	r18,r18,-1023
   2c20c:	80a0b03a 	or	r16,r16,r2
   2c210:	0027883a 	mov	r19,zero
   2c214:	0039883a 	mov	fp,zero
   2c218:	3804d53a 	srli	r2,r7,20
   2c21c:	382ed7fa 	srli	r23,r7,31
   2c220:	04400434 	movhi	r17,16
   2c224:	8c7fffc4 	addi	r17,r17,-1
   2c228:	1081ffcc 	andi	r2,r2,2047
   2c22c:	3011883a 	mov	r8,r6
   2c230:	3c62703a 	and	r17,r7,r17
   2c234:	ba803fcc 	andi	r10,r23,255
   2c238:	10006d26 	beq	r2,zero,2c3f0 <__muldf3+0x254>
   2c23c:	00c1ffc4 	movi	r3,2047
   2c240:	10c06526 	beq	r2,r3,2c3d8 <__muldf3+0x23c>
   2c244:	88c00434 	orhi	r3,r17,16
   2c248:	180690fa 	slli	r3,r3,3
   2c24c:	3022d77a 	srli	r17,r6,29
   2c250:	301090fa 	slli	r8,r6,3
   2c254:	10bf0044 	addi	r2,r2,-1023
   2c258:	88e2b03a 	or	r17,r17,r3
   2c25c:	000b883a 	mov	r5,zero
   2c260:	9085883a 	add	r2,r18,r2
   2c264:	2cc8b03a 	or	r4,r5,r19
   2c268:	00c003c4 	movi	r3,15
   2c26c:	bdacf03a 	xor	r22,r23,r22
   2c270:	12c00044 	addi	r11,r2,1
   2c274:	19009936 	bltu	r3,r4,2c4dc <__muldf3+0x340>
   2c278:	200890ba 	slli	r4,r4,2
   2c27c:	00c000f4 	movhi	r3,3
   2c280:	18f0a404 	addi	r3,r3,-15728
   2c284:	20c9883a 	add	r4,r4,r3
   2c288:	20c00017 	ldw	r3,0(r4)
   2c28c:	1800683a 	jmp	r3
   2c290:	0002c4dc 	xori	zero,zero,2835
   2c294:	0002c2f0 	cmpltui	zero,zero,2827
   2c298:	0002c2f0 	cmpltui	zero,zero,2827
   2c29c:	0002c2ec 	andhi	zero,zero,2827
   2c2a0:	0002c4b8 	rdprs	zero,zero,2834
   2c2a4:	0002c4b8 	rdprs	zero,zero,2834
   2c2a8:	0002c4a0 	cmpeqi	zero,zero,2834
   2c2ac:	0002c2ec 	andhi	zero,zero,2827
   2c2b0:	0002c4b8 	rdprs	zero,zero,2834
   2c2b4:	0002c4a0 	cmpeqi	zero,zero,2834
   2c2b8:	0002c4b8 	rdprs	zero,zero,2834
   2c2bc:	0002c2ec 	andhi	zero,zero,2827
   2c2c0:	0002c4c8 	cmpgei	zero,zero,2835
   2c2c4:	0002c4c8 	cmpgei	zero,zero,2835
   2c2c8:	0002c4c8 	cmpgei	zero,zero,2835
   2c2cc:	0002c6e4 	muli	zero,zero,2843
   2c2d0:	2404b03a 	or	r2,r4,r16
   2c2d4:	10006f1e 	bne	r2,zero,2c494 <__muldf3+0x2f8>
   2c2d8:	04c00204 	movi	r19,8
   2c2dc:	0021883a 	mov	r16,zero
   2c2e0:	0029883a 	mov	r20,zero
   2c2e4:	07000084 	movi	fp,2
   2c2e8:	003fcb06 	br	2c218 <_gp+0xfffea6cc>
   2c2ec:	502d883a 	mov	r22,r10
   2c2f0:	00800084 	movi	r2,2
   2c2f4:	28805726 	beq	r5,r2,2c454 <__muldf3+0x2b8>
   2c2f8:	008000c4 	movi	r2,3
   2c2fc:	28816626 	beq	r5,r2,2c898 <__muldf3+0x6fc>
   2c300:	00800044 	movi	r2,1
   2c304:	2881411e 	bne	r5,r2,2c80c <__muldf3+0x670>
   2c308:	b02b883a 	mov	r21,r22
   2c30c:	0005883a 	mov	r2,zero
   2c310:	000b883a 	mov	r5,zero
   2c314:	0029883a 	mov	r20,zero
   2c318:	1004953a 	slli	r2,r2,20
   2c31c:	a8c03fcc 	andi	r3,r21,255
   2c320:	04400434 	movhi	r17,16
   2c324:	8c7fffc4 	addi	r17,r17,-1
   2c328:	180697fa 	slli	r3,r3,31
   2c32c:	2c4a703a 	and	r5,r5,r17
   2c330:	288ab03a 	or	r5,r5,r2
   2c334:	28c6b03a 	or	r3,r5,r3
   2c338:	a005883a 	mov	r2,r20
   2c33c:	dfc00c17 	ldw	ra,48(sp)
   2c340:	df000b17 	ldw	fp,44(sp)
   2c344:	ddc00a17 	ldw	r23,40(sp)
   2c348:	dd800917 	ldw	r22,36(sp)
   2c34c:	dd400817 	ldw	r21,32(sp)
   2c350:	dd000717 	ldw	r20,28(sp)
   2c354:	dcc00617 	ldw	r19,24(sp)
   2c358:	dc800517 	ldw	r18,20(sp)
   2c35c:	dc400417 	ldw	r17,16(sp)
   2c360:	dc000317 	ldw	r16,12(sp)
   2c364:	dec00d04 	addi	sp,sp,52
   2c368:	f800283a 	ret
   2c36c:	2404b03a 	or	r2,r4,r16
   2c370:	2027883a 	mov	r19,r4
   2c374:	10004226 	beq	r2,zero,2c480 <__muldf3+0x2e4>
   2c378:	8000fc26 	beq	r16,zero,2c76c <__muldf3+0x5d0>
   2c37c:	8009883a 	mov	r4,r16
   2c380:	d9800215 	stw	r6,8(sp)
   2c384:	d9c00015 	stw	r7,0(sp)
   2c388:	da400115 	stw	r9,4(sp)
   2c38c:	002d3b40 	call	2d3b4 <__clzsi2>
   2c390:	d9800217 	ldw	r6,8(sp)
   2c394:	d9c00017 	ldw	r7,0(sp)
   2c398:	da400117 	ldw	r9,4(sp)
   2c39c:	113ffd44 	addi	r4,r2,-11
   2c3a0:	00c00704 	movi	r3,28
   2c3a4:	1900ed16 	blt	r3,r4,2c75c <__muldf3+0x5c0>
   2c3a8:	00c00744 	movi	r3,29
   2c3ac:	147ffe04 	addi	r17,r2,-8
   2c3b0:	1907c83a 	sub	r3,r3,r4
   2c3b4:	8460983a 	sll	r16,r16,r17
   2c3b8:	98c6d83a 	srl	r3,r19,r3
   2c3bc:	9c68983a 	sll	r20,r19,r17
   2c3c0:	1c20b03a 	or	r16,r3,r16
   2c3c4:	1080fcc4 	addi	r2,r2,1011
   2c3c8:	00a5c83a 	sub	r18,zero,r2
   2c3cc:	0027883a 	mov	r19,zero
   2c3d0:	0039883a 	mov	fp,zero
   2c3d4:	003f9006 	br	2c218 <_gp+0xfffea6cc>
   2c3d8:	3446b03a 	or	r3,r6,r17
   2c3dc:	1800261e 	bne	r3,zero,2c478 <__muldf3+0x2dc>
   2c3e0:	0023883a 	mov	r17,zero
   2c3e4:	0011883a 	mov	r8,zero
   2c3e8:	01400084 	movi	r5,2
   2c3ec:	003f9c06 	br	2c260 <_gp+0xfffea714>
   2c3f0:	3446b03a 	or	r3,r6,r17
   2c3f4:	18001c26 	beq	r3,zero,2c468 <__muldf3+0x2cc>
   2c3f8:	8800ce26 	beq	r17,zero,2c734 <__muldf3+0x598>
   2c3fc:	8809883a 	mov	r4,r17
   2c400:	d9800215 	stw	r6,8(sp)
   2c404:	da400115 	stw	r9,4(sp)
   2c408:	da800015 	stw	r10,0(sp)
   2c40c:	002d3b40 	call	2d3b4 <__clzsi2>
   2c410:	d9800217 	ldw	r6,8(sp)
   2c414:	da400117 	ldw	r9,4(sp)
   2c418:	da800017 	ldw	r10,0(sp)
   2c41c:	113ffd44 	addi	r4,r2,-11
   2c420:	00c00704 	movi	r3,28
   2c424:	1900bf16 	blt	r3,r4,2c724 <__muldf3+0x588>
   2c428:	00c00744 	movi	r3,29
   2c42c:	123ffe04 	addi	r8,r2,-8
   2c430:	1907c83a 	sub	r3,r3,r4
   2c434:	8a22983a 	sll	r17,r17,r8
   2c438:	30c6d83a 	srl	r3,r6,r3
   2c43c:	3210983a 	sll	r8,r6,r8
   2c440:	1c62b03a 	or	r17,r3,r17
   2c444:	1080fcc4 	addi	r2,r2,1011
   2c448:	0085c83a 	sub	r2,zero,r2
   2c44c:	000b883a 	mov	r5,zero
   2c450:	003f8306 	br	2c260 <_gp+0xfffea714>
   2c454:	b02b883a 	mov	r21,r22
   2c458:	0081ffc4 	movi	r2,2047
   2c45c:	000b883a 	mov	r5,zero
   2c460:	0029883a 	mov	r20,zero
   2c464:	003fac06 	br	2c318 <_gp+0xfffea7cc>
   2c468:	0023883a 	mov	r17,zero
   2c46c:	0011883a 	mov	r8,zero
   2c470:	01400044 	movi	r5,1
   2c474:	003f7a06 	br	2c260 <_gp+0xfffea714>
   2c478:	014000c4 	movi	r5,3
   2c47c:	003f7806 	br	2c260 <_gp+0xfffea714>
   2c480:	04c00104 	movi	r19,4
   2c484:	0021883a 	mov	r16,zero
   2c488:	0029883a 	mov	r20,zero
   2c48c:	07000044 	movi	fp,1
   2c490:	003f6106 	br	2c218 <_gp+0xfffea6cc>
   2c494:	04c00304 	movi	r19,12
   2c498:	070000c4 	movi	fp,3
   2c49c:	003f5e06 	br	2c218 <_gp+0xfffea6cc>
   2c4a0:	01400434 	movhi	r5,16
   2c4a4:	002b883a 	mov	r21,zero
   2c4a8:	297fffc4 	addi	r5,r5,-1
   2c4ac:	053fffc4 	movi	r20,-1
   2c4b0:	0081ffc4 	movi	r2,2047
   2c4b4:	003f9806 	br	2c318 <_gp+0xfffea7cc>
   2c4b8:	8023883a 	mov	r17,r16
   2c4bc:	a011883a 	mov	r8,r20
   2c4c0:	e00b883a 	mov	r5,fp
   2c4c4:	003f8a06 	br	2c2f0 <_gp+0xfffea7a4>
   2c4c8:	8023883a 	mov	r17,r16
   2c4cc:	a011883a 	mov	r8,r20
   2c4d0:	482d883a 	mov	r22,r9
   2c4d4:	e00b883a 	mov	r5,fp
   2c4d8:	003f8506 	br	2c2f0 <_gp+0xfffea7a4>
   2c4dc:	a00ad43a 	srli	r5,r20,16
   2c4e0:	401ad43a 	srli	r13,r8,16
   2c4e4:	a53fffcc 	andi	r20,r20,65535
   2c4e8:	423fffcc 	andi	r8,r8,65535
   2c4ec:	4519383a 	mul	r12,r8,r20
   2c4f0:	4147383a 	mul	r3,r8,r5
   2c4f4:	6d09383a 	mul	r4,r13,r20
   2c4f8:	600cd43a 	srli	r6,r12,16
   2c4fc:	2b5d383a 	mul	r14,r5,r13
   2c500:	20c9883a 	add	r4,r4,r3
   2c504:	310d883a 	add	r6,r6,r4
   2c508:	30c0022e 	bgeu	r6,r3,2c514 <__muldf3+0x378>
   2c50c:	00c00074 	movhi	r3,1
   2c510:	70dd883a 	add	r14,r14,r3
   2c514:	8826d43a 	srli	r19,r17,16
   2c518:	8bffffcc 	andi	r15,r17,65535
   2c51c:	7d23383a 	mul	r17,r15,r20
   2c520:	7949383a 	mul	r4,r15,r5
   2c524:	9d29383a 	mul	r20,r19,r20
   2c528:	8814d43a 	srli	r10,r17,16
   2c52c:	3012943a 	slli	r9,r6,16
   2c530:	a129883a 	add	r20,r20,r4
   2c534:	633fffcc 	andi	r12,r12,65535
   2c538:	5515883a 	add	r10,r10,r20
   2c53c:	3006d43a 	srli	r3,r6,16
   2c540:	4b13883a 	add	r9,r9,r12
   2c544:	2ccb383a 	mul	r5,r5,r19
   2c548:	5100022e 	bgeu	r10,r4,2c554 <__muldf3+0x3b8>
   2c54c:	01000074 	movhi	r4,1
   2c550:	290b883a 	add	r5,r5,r4
   2c554:	802ad43a 	srli	r21,r16,16
   2c558:	843fffcc 	andi	r16,r16,65535
   2c55c:	440d383a 	mul	r6,r8,r16
   2c560:	4565383a 	mul	r18,r8,r21
   2c564:	8349383a 	mul	r4,r16,r13
   2c568:	500e943a 	slli	r7,r10,16
   2c56c:	3010d43a 	srli	r8,r6,16
   2c570:	5028d43a 	srli	r20,r10,16
   2c574:	2489883a 	add	r4,r4,r18
   2c578:	8abfffcc 	andi	r10,r17,65535
   2c57c:	3a95883a 	add	r10,r7,r10
   2c580:	4119883a 	add	r12,r8,r4
   2c584:	a169883a 	add	r20,r20,r5
   2c588:	1a87883a 	add	r3,r3,r10
   2c58c:	6d5b383a 	mul	r13,r13,r21
   2c590:	6480022e 	bgeu	r12,r18,2c59c <__muldf3+0x400>
   2c594:	01000074 	movhi	r4,1
   2c598:	691b883a 	add	r13,r13,r4
   2c59c:	7c25383a 	mul	r18,r15,r16
   2c5a0:	7d4b383a 	mul	r5,r15,r21
   2c5a4:	84cf383a 	mul	r7,r16,r19
   2c5a8:	901ed43a 	srli	r15,r18,16
   2c5ac:	6008d43a 	srli	r4,r12,16
   2c5b0:	6010943a 	slli	r8,r12,16
   2c5b4:	394f883a 	add	r7,r7,r5
   2c5b8:	333fffcc 	andi	r12,r6,65535
   2c5bc:	79df883a 	add	r15,r15,r7
   2c5c0:	235b883a 	add	r13,r4,r13
   2c5c4:	9d63383a 	mul	r17,r19,r21
   2c5c8:	4309883a 	add	r4,r8,r12
   2c5cc:	7940022e 	bgeu	r15,r5,2c5d8 <__muldf3+0x43c>
   2c5d0:	01400074 	movhi	r5,1
   2c5d4:	8963883a 	add	r17,r17,r5
   2c5d8:	780a943a 	slli	r5,r15,16
   2c5dc:	91bfffcc 	andi	r6,r18,65535
   2c5e0:	70c7883a 	add	r3,r14,r3
   2c5e4:	298d883a 	add	r6,r5,r6
   2c5e8:	1a8f803a 	cmpltu	r7,r3,r10
   2c5ec:	350b883a 	add	r5,r6,r20
   2c5f0:	20c7883a 	add	r3,r4,r3
   2c5f4:	3955883a 	add	r10,r7,r5
   2c5f8:	1909803a 	cmpltu	r4,r3,r4
   2c5fc:	6a91883a 	add	r8,r13,r10
   2c600:	780cd43a 	srli	r6,r15,16
   2c604:	2219883a 	add	r12,r4,r8
   2c608:	2d0b803a 	cmpltu	r5,r5,r20
   2c60c:	51cf803a 	cmpltu	r7,r10,r7
   2c610:	29ceb03a 	or	r7,r5,r7
   2c614:	4351803a 	cmpltu	r8,r8,r13
   2c618:	610b803a 	cmpltu	r5,r12,r4
   2c61c:	4148b03a 	or	r4,r8,r5
   2c620:	398f883a 	add	r7,r7,r6
   2c624:	3909883a 	add	r4,r7,r4
   2c628:	1810927a 	slli	r8,r3,9
   2c62c:	2449883a 	add	r4,r4,r17
   2c630:	2008927a 	slli	r4,r4,9
   2c634:	6022d5fa 	srli	r17,r12,23
   2c638:	1806d5fa 	srli	r3,r3,23
   2c63c:	4252b03a 	or	r9,r8,r9
   2c640:	600a927a 	slli	r5,r12,9
   2c644:	4810c03a 	cmpne	r8,r9,zero
   2c648:	2462b03a 	or	r17,r4,r17
   2c64c:	40c6b03a 	or	r3,r8,r3
   2c650:	8900402c 	andhi	r4,r17,256
   2c654:	1950b03a 	or	r8,r3,r5
   2c658:	20000726 	beq	r4,zero,2c678 <__muldf3+0x4dc>
   2c65c:	4006d07a 	srli	r3,r8,1
   2c660:	880497fa 	slli	r2,r17,31
   2c664:	4200004c 	andi	r8,r8,1
   2c668:	8822d07a 	srli	r17,r17,1
   2c66c:	1a10b03a 	or	r8,r3,r8
   2c670:	1210b03a 	or	r8,r2,r8
   2c674:	5805883a 	mov	r2,r11
   2c678:	1140ffc4 	addi	r5,r2,1023
   2c67c:	0140440e 	bge	zero,r5,2c790 <__muldf3+0x5f4>
   2c680:	40c001cc 	andi	r3,r8,7
   2c684:	18000726 	beq	r3,zero,2c6a4 <__muldf3+0x508>
   2c688:	40c003cc 	andi	r3,r8,15
   2c68c:	01000104 	movi	r4,4
   2c690:	19000426 	beq	r3,r4,2c6a4 <__muldf3+0x508>
   2c694:	4107883a 	add	r3,r8,r4
   2c698:	1a11803a 	cmpltu	r8,r3,r8
   2c69c:	8a23883a 	add	r17,r17,r8
   2c6a0:	1811883a 	mov	r8,r3
   2c6a4:	88c0402c 	andhi	r3,r17,256
   2c6a8:	18000426 	beq	r3,zero,2c6bc <__muldf3+0x520>
   2c6ac:	11410004 	addi	r5,r2,1024
   2c6b0:	00bfc034 	movhi	r2,65280
   2c6b4:	10bfffc4 	addi	r2,r2,-1
   2c6b8:	88a2703a 	and	r17,r17,r2
   2c6bc:	0081ff84 	movi	r2,2046
   2c6c0:	117f6416 	blt	r2,r5,2c454 <_gp+0xfffea908>
   2c6c4:	8828977a 	slli	r20,r17,29
   2c6c8:	4010d0fa 	srli	r8,r8,3
   2c6cc:	8822927a 	slli	r17,r17,9
   2c6d0:	2881ffcc 	andi	r2,r5,2047
   2c6d4:	a228b03a 	or	r20,r20,r8
   2c6d8:	880ad33a 	srli	r5,r17,12
   2c6dc:	b02b883a 	mov	r21,r22
   2c6e0:	003f0d06 	br	2c318 <_gp+0xfffea7cc>
   2c6e4:	8080022c 	andhi	r2,r16,8
   2c6e8:	10000926 	beq	r2,zero,2c710 <__muldf3+0x574>
   2c6ec:	8880022c 	andhi	r2,r17,8
   2c6f0:	1000071e 	bne	r2,zero,2c710 <__muldf3+0x574>
   2c6f4:	00800434 	movhi	r2,16
   2c6f8:	89400234 	orhi	r5,r17,8
   2c6fc:	10bfffc4 	addi	r2,r2,-1
   2c700:	b82b883a 	mov	r21,r23
   2c704:	288a703a 	and	r5,r5,r2
   2c708:	4029883a 	mov	r20,r8
   2c70c:	003f6806 	br	2c4b0 <_gp+0xfffea964>
   2c710:	00800434 	movhi	r2,16
   2c714:	81400234 	orhi	r5,r16,8
   2c718:	10bfffc4 	addi	r2,r2,-1
   2c71c:	288a703a 	and	r5,r5,r2
   2c720:	003f6306 	br	2c4b0 <_gp+0xfffea964>
   2c724:	147ff604 	addi	r17,r2,-40
   2c728:	3462983a 	sll	r17,r6,r17
   2c72c:	0011883a 	mov	r8,zero
   2c730:	003f4406 	br	2c444 <_gp+0xfffea8f8>
   2c734:	3009883a 	mov	r4,r6
   2c738:	d9800215 	stw	r6,8(sp)
   2c73c:	da400115 	stw	r9,4(sp)
   2c740:	da800015 	stw	r10,0(sp)
   2c744:	002d3b40 	call	2d3b4 <__clzsi2>
   2c748:	10800804 	addi	r2,r2,32
   2c74c:	da800017 	ldw	r10,0(sp)
   2c750:	da400117 	ldw	r9,4(sp)
   2c754:	d9800217 	ldw	r6,8(sp)
   2c758:	003f3006 	br	2c41c <_gp+0xfffea8d0>
   2c75c:	143ff604 	addi	r16,r2,-40
   2c760:	9c20983a 	sll	r16,r19,r16
   2c764:	0029883a 	mov	r20,zero
   2c768:	003f1606 	br	2c3c4 <_gp+0xfffea878>
   2c76c:	d9800215 	stw	r6,8(sp)
   2c770:	d9c00015 	stw	r7,0(sp)
   2c774:	da400115 	stw	r9,4(sp)
   2c778:	002d3b40 	call	2d3b4 <__clzsi2>
   2c77c:	10800804 	addi	r2,r2,32
   2c780:	da400117 	ldw	r9,4(sp)
   2c784:	d9c00017 	ldw	r7,0(sp)
   2c788:	d9800217 	ldw	r6,8(sp)
   2c78c:	003f0306 	br	2c39c <_gp+0xfffea850>
   2c790:	00c00044 	movi	r3,1
   2c794:	1947c83a 	sub	r3,r3,r5
   2c798:	00800e04 	movi	r2,56
   2c79c:	10feda16 	blt	r2,r3,2c308 <_gp+0xfffea7bc>
   2c7a0:	008007c4 	movi	r2,31
   2c7a4:	10c01b16 	blt	r2,r3,2c814 <__muldf3+0x678>
   2c7a8:	00800804 	movi	r2,32
   2c7ac:	10c5c83a 	sub	r2,r2,r3
   2c7b0:	888a983a 	sll	r5,r17,r2
   2c7b4:	40c8d83a 	srl	r4,r8,r3
   2c7b8:	4084983a 	sll	r2,r8,r2
   2c7bc:	88e2d83a 	srl	r17,r17,r3
   2c7c0:	2906b03a 	or	r3,r5,r4
   2c7c4:	1004c03a 	cmpne	r2,r2,zero
   2c7c8:	1886b03a 	or	r3,r3,r2
   2c7cc:	188001cc 	andi	r2,r3,7
   2c7d0:	10000726 	beq	r2,zero,2c7f0 <__muldf3+0x654>
   2c7d4:	188003cc 	andi	r2,r3,15
   2c7d8:	01000104 	movi	r4,4
   2c7dc:	11000426 	beq	r2,r4,2c7f0 <__muldf3+0x654>
   2c7e0:	1805883a 	mov	r2,r3
   2c7e4:	10c00104 	addi	r3,r2,4
   2c7e8:	1885803a 	cmpltu	r2,r3,r2
   2c7ec:	88a3883a 	add	r17,r17,r2
   2c7f0:	8880202c 	andhi	r2,r17,128
   2c7f4:	10001c26 	beq	r2,zero,2c868 <__muldf3+0x6cc>
   2c7f8:	b02b883a 	mov	r21,r22
   2c7fc:	00800044 	movi	r2,1
   2c800:	000b883a 	mov	r5,zero
   2c804:	0029883a 	mov	r20,zero
   2c808:	003ec306 	br	2c318 <_gp+0xfffea7cc>
   2c80c:	5805883a 	mov	r2,r11
   2c810:	003f9906 	br	2c678 <_gp+0xfffeab2c>
   2c814:	00bff844 	movi	r2,-31
   2c818:	1145c83a 	sub	r2,r2,r5
   2c81c:	8888d83a 	srl	r4,r17,r2
   2c820:	00800804 	movi	r2,32
   2c824:	18801a26 	beq	r3,r2,2c890 <__muldf3+0x6f4>
   2c828:	00801004 	movi	r2,64
   2c82c:	10c5c83a 	sub	r2,r2,r3
   2c830:	8884983a 	sll	r2,r17,r2
   2c834:	1204b03a 	or	r2,r2,r8
   2c838:	1004c03a 	cmpne	r2,r2,zero
   2c83c:	2084b03a 	or	r2,r4,r2
   2c840:	144001cc 	andi	r17,r2,7
   2c844:	88000d1e 	bne	r17,zero,2c87c <__muldf3+0x6e0>
   2c848:	000b883a 	mov	r5,zero
   2c84c:	1028d0fa 	srli	r20,r2,3
   2c850:	b02b883a 	mov	r21,r22
   2c854:	0005883a 	mov	r2,zero
   2c858:	a468b03a 	or	r20,r20,r17
   2c85c:	003eae06 	br	2c318 <_gp+0xfffea7cc>
   2c860:	1007883a 	mov	r3,r2
   2c864:	0023883a 	mov	r17,zero
   2c868:	880a927a 	slli	r5,r17,9
   2c86c:	1805883a 	mov	r2,r3
   2c870:	8822977a 	slli	r17,r17,29
   2c874:	280ad33a 	srli	r5,r5,12
   2c878:	003ff406 	br	2c84c <_gp+0xfffead00>
   2c87c:	10c003cc 	andi	r3,r2,15
   2c880:	01000104 	movi	r4,4
   2c884:	193ff626 	beq	r3,r4,2c860 <_gp+0xfffead14>
   2c888:	0023883a 	mov	r17,zero
   2c88c:	003fd506 	br	2c7e4 <_gp+0xfffeac98>
   2c890:	0005883a 	mov	r2,zero
   2c894:	003fe706 	br	2c834 <_gp+0xfffeace8>
   2c898:	00800434 	movhi	r2,16
   2c89c:	89400234 	orhi	r5,r17,8
   2c8a0:	10bfffc4 	addi	r2,r2,-1
   2c8a4:	b02b883a 	mov	r21,r22
   2c8a8:	288a703a 	and	r5,r5,r2
   2c8ac:	4029883a 	mov	r20,r8
   2c8b0:	003eff06 	br	2c4b0 <_gp+0xfffea964>

0002c8b4 <__subdf3>:
   2c8b4:	02000434 	movhi	r8,16
   2c8b8:	423fffc4 	addi	r8,r8,-1
   2c8bc:	defffb04 	addi	sp,sp,-20
   2c8c0:	2a14703a 	and	r10,r5,r8
   2c8c4:	3812d53a 	srli	r9,r7,20
   2c8c8:	3a10703a 	and	r8,r7,r8
   2c8cc:	2006d77a 	srli	r3,r4,29
   2c8d0:	3004d77a 	srli	r2,r6,29
   2c8d4:	dc000015 	stw	r16,0(sp)
   2c8d8:	501490fa 	slli	r10,r10,3
   2c8dc:	2820d53a 	srli	r16,r5,20
   2c8e0:	401090fa 	slli	r8,r8,3
   2c8e4:	dc800215 	stw	r18,8(sp)
   2c8e8:	dc400115 	stw	r17,4(sp)
   2c8ec:	dfc00415 	stw	ra,16(sp)
   2c8f0:	202290fa 	slli	r17,r4,3
   2c8f4:	dcc00315 	stw	r19,12(sp)
   2c8f8:	4a41ffcc 	andi	r9,r9,2047
   2c8fc:	0101ffc4 	movi	r4,2047
   2c900:	2824d7fa 	srli	r18,r5,31
   2c904:	8401ffcc 	andi	r16,r16,2047
   2c908:	50c6b03a 	or	r3,r10,r3
   2c90c:	380ed7fa 	srli	r7,r7,31
   2c910:	408ab03a 	or	r5,r8,r2
   2c914:	300c90fa 	slli	r6,r6,3
   2c918:	49009626 	beq	r9,r4,2cb74 <__subdf3+0x2c0>
   2c91c:	39c0005c 	xori	r7,r7,1
   2c920:	8245c83a 	sub	r2,r16,r9
   2c924:	3c807426 	beq	r7,r18,2caf8 <__subdf3+0x244>
   2c928:	0080af0e 	bge	zero,r2,2cbe8 <__subdf3+0x334>
   2c92c:	48002a1e 	bne	r9,zero,2c9d8 <__subdf3+0x124>
   2c930:	2988b03a 	or	r4,r5,r6
   2c934:	20009a1e 	bne	r4,zero,2cba0 <__subdf3+0x2ec>
   2c938:	888001cc 	andi	r2,r17,7
   2c93c:	10000726 	beq	r2,zero,2c95c <__subdf3+0xa8>
   2c940:	888003cc 	andi	r2,r17,15
   2c944:	01000104 	movi	r4,4
   2c948:	11000426 	beq	r2,r4,2c95c <__subdf3+0xa8>
   2c94c:	890b883a 	add	r5,r17,r4
   2c950:	2c63803a 	cmpltu	r17,r5,r17
   2c954:	1c47883a 	add	r3,r3,r17
   2c958:	2823883a 	mov	r17,r5
   2c95c:	1880202c 	andhi	r2,r3,128
   2c960:	10005926 	beq	r2,zero,2cac8 <__subdf3+0x214>
   2c964:	84000044 	addi	r16,r16,1
   2c968:	0081ffc4 	movi	r2,2047
   2c96c:	8080be26 	beq	r16,r2,2cc68 <__subdf3+0x3b4>
   2c970:	017fe034 	movhi	r5,65408
   2c974:	297fffc4 	addi	r5,r5,-1
   2c978:	1946703a 	and	r3,r3,r5
   2c97c:	1804977a 	slli	r2,r3,29
   2c980:	1806927a 	slli	r3,r3,9
   2c984:	8822d0fa 	srli	r17,r17,3
   2c988:	8401ffcc 	andi	r16,r16,2047
   2c98c:	180ad33a 	srli	r5,r3,12
   2c990:	9100004c 	andi	r4,r18,1
   2c994:	1444b03a 	or	r2,r2,r17
   2c998:	80c1ffcc 	andi	r3,r16,2047
   2c99c:	1820953a 	slli	r16,r3,20
   2c9a0:	20c03fcc 	andi	r3,r4,255
   2c9a4:	180897fa 	slli	r4,r3,31
   2c9a8:	00c00434 	movhi	r3,16
   2c9ac:	18ffffc4 	addi	r3,r3,-1
   2c9b0:	28c6703a 	and	r3,r5,r3
   2c9b4:	1c06b03a 	or	r3,r3,r16
   2c9b8:	1906b03a 	or	r3,r3,r4
   2c9bc:	dfc00417 	ldw	ra,16(sp)
   2c9c0:	dcc00317 	ldw	r19,12(sp)
   2c9c4:	dc800217 	ldw	r18,8(sp)
   2c9c8:	dc400117 	ldw	r17,4(sp)
   2c9cc:	dc000017 	ldw	r16,0(sp)
   2c9d0:	dec00504 	addi	sp,sp,20
   2c9d4:	f800283a 	ret
   2c9d8:	0101ffc4 	movi	r4,2047
   2c9dc:	813fd626 	beq	r16,r4,2c938 <_gp+0xfffeadec>
   2c9e0:	29402034 	orhi	r5,r5,128
   2c9e4:	01000e04 	movi	r4,56
   2c9e8:	2080a316 	blt	r4,r2,2cc78 <__subdf3+0x3c4>
   2c9ec:	010007c4 	movi	r4,31
   2c9f0:	2080c616 	blt	r4,r2,2cd0c <__subdf3+0x458>
   2c9f4:	01000804 	movi	r4,32
   2c9f8:	2089c83a 	sub	r4,r4,r2
   2c9fc:	2910983a 	sll	r8,r5,r4
   2ca00:	308ed83a 	srl	r7,r6,r2
   2ca04:	3108983a 	sll	r4,r6,r4
   2ca08:	2884d83a 	srl	r2,r5,r2
   2ca0c:	41ccb03a 	or	r6,r8,r7
   2ca10:	2008c03a 	cmpne	r4,r4,zero
   2ca14:	310cb03a 	or	r6,r6,r4
   2ca18:	898dc83a 	sub	r6,r17,r6
   2ca1c:	89a3803a 	cmpltu	r17,r17,r6
   2ca20:	1887c83a 	sub	r3,r3,r2
   2ca24:	1c47c83a 	sub	r3,r3,r17
   2ca28:	3023883a 	mov	r17,r6
   2ca2c:	1880202c 	andhi	r2,r3,128
   2ca30:	10002326 	beq	r2,zero,2cac0 <__subdf3+0x20c>
   2ca34:	04c02034 	movhi	r19,128
   2ca38:	9cffffc4 	addi	r19,r19,-1
   2ca3c:	1ce6703a 	and	r19,r3,r19
   2ca40:	98007a26 	beq	r19,zero,2cc2c <__subdf3+0x378>
   2ca44:	9809883a 	mov	r4,r19
   2ca48:	002d3b40 	call	2d3b4 <__clzsi2>
   2ca4c:	113ffe04 	addi	r4,r2,-8
   2ca50:	00c007c4 	movi	r3,31
   2ca54:	19007b16 	blt	r3,r4,2cc44 <__subdf3+0x390>
   2ca58:	00800804 	movi	r2,32
   2ca5c:	1105c83a 	sub	r2,r2,r4
   2ca60:	8884d83a 	srl	r2,r17,r2
   2ca64:	9906983a 	sll	r3,r19,r4
   2ca68:	8922983a 	sll	r17,r17,r4
   2ca6c:	10c4b03a 	or	r2,r2,r3
   2ca70:	24007816 	blt	r4,r16,2cc54 <__subdf3+0x3a0>
   2ca74:	2421c83a 	sub	r16,r4,r16
   2ca78:	80c00044 	addi	r3,r16,1
   2ca7c:	010007c4 	movi	r4,31
   2ca80:	20c09516 	blt	r4,r3,2ccd8 <__subdf3+0x424>
   2ca84:	01400804 	movi	r5,32
   2ca88:	28cbc83a 	sub	r5,r5,r3
   2ca8c:	88c8d83a 	srl	r4,r17,r3
   2ca90:	8962983a 	sll	r17,r17,r5
   2ca94:	114a983a 	sll	r5,r2,r5
   2ca98:	10c6d83a 	srl	r3,r2,r3
   2ca9c:	8804c03a 	cmpne	r2,r17,zero
   2caa0:	290ab03a 	or	r5,r5,r4
   2caa4:	28a2b03a 	or	r17,r5,r2
   2caa8:	0021883a 	mov	r16,zero
   2caac:	003fa206 	br	2c938 <_gp+0xfffeadec>
   2cab0:	2090b03a 	or	r8,r4,r2
   2cab4:	40018e26 	beq	r8,zero,2d0f0 <__subdf3+0x83c>
   2cab8:	1007883a 	mov	r3,r2
   2cabc:	2023883a 	mov	r17,r4
   2cac0:	888001cc 	andi	r2,r17,7
   2cac4:	103f9e1e 	bne	r2,zero,2c940 <_gp+0xfffeadf4>
   2cac8:	1804977a 	slli	r2,r3,29
   2cacc:	8822d0fa 	srli	r17,r17,3
   2cad0:	1810d0fa 	srli	r8,r3,3
   2cad4:	9100004c 	andi	r4,r18,1
   2cad8:	1444b03a 	or	r2,r2,r17
   2cadc:	00c1ffc4 	movi	r3,2047
   2cae0:	80c02826 	beq	r16,r3,2cb84 <__subdf3+0x2d0>
   2cae4:	01400434 	movhi	r5,16
   2cae8:	297fffc4 	addi	r5,r5,-1
   2caec:	80e0703a 	and	r16,r16,r3
   2caf0:	414a703a 	and	r5,r8,r5
   2caf4:	003fa806 	br	2c998 <_gp+0xfffeae4c>
   2caf8:	0080630e 	bge	zero,r2,2cc88 <__subdf3+0x3d4>
   2cafc:	48003026 	beq	r9,zero,2cbc0 <__subdf3+0x30c>
   2cb00:	0101ffc4 	movi	r4,2047
   2cb04:	813f8c26 	beq	r16,r4,2c938 <_gp+0xfffeadec>
   2cb08:	29402034 	orhi	r5,r5,128
   2cb0c:	01000e04 	movi	r4,56
   2cb10:	2080a90e 	bge	r4,r2,2cdb8 <__subdf3+0x504>
   2cb14:	298cb03a 	or	r6,r5,r6
   2cb18:	3012c03a 	cmpne	r9,r6,zero
   2cb1c:	0005883a 	mov	r2,zero
   2cb20:	4c53883a 	add	r9,r9,r17
   2cb24:	4c63803a 	cmpltu	r17,r9,r17
   2cb28:	10c7883a 	add	r3,r2,r3
   2cb2c:	88c7883a 	add	r3,r17,r3
   2cb30:	4823883a 	mov	r17,r9
   2cb34:	1880202c 	andhi	r2,r3,128
   2cb38:	1000d026 	beq	r2,zero,2ce7c <__subdf3+0x5c8>
   2cb3c:	84000044 	addi	r16,r16,1
   2cb40:	0081ffc4 	movi	r2,2047
   2cb44:	8080fe26 	beq	r16,r2,2cf40 <__subdf3+0x68c>
   2cb48:	00bfe034 	movhi	r2,65408
   2cb4c:	10bfffc4 	addi	r2,r2,-1
   2cb50:	1886703a 	and	r3,r3,r2
   2cb54:	880ad07a 	srli	r5,r17,1
   2cb58:	180497fa 	slli	r2,r3,31
   2cb5c:	8900004c 	andi	r4,r17,1
   2cb60:	2922b03a 	or	r17,r5,r4
   2cb64:	1806d07a 	srli	r3,r3,1
   2cb68:	1462b03a 	or	r17,r2,r17
   2cb6c:	3825883a 	mov	r18,r7
   2cb70:	003f7106 	br	2c938 <_gp+0xfffeadec>
   2cb74:	2984b03a 	or	r2,r5,r6
   2cb78:	103f6826 	beq	r2,zero,2c91c <_gp+0xfffeadd0>
   2cb7c:	39c03fcc 	andi	r7,r7,255
   2cb80:	003f6706 	br	2c920 <_gp+0xfffeadd4>
   2cb84:	4086b03a 	or	r3,r8,r2
   2cb88:	18015226 	beq	r3,zero,2d0d4 <__subdf3+0x820>
   2cb8c:	00c00434 	movhi	r3,16
   2cb90:	41400234 	orhi	r5,r8,8
   2cb94:	18ffffc4 	addi	r3,r3,-1
   2cb98:	28ca703a 	and	r5,r5,r3
   2cb9c:	003f7e06 	br	2c998 <_gp+0xfffeae4c>
   2cba0:	10bfffc4 	addi	r2,r2,-1
   2cba4:	1000491e 	bne	r2,zero,2cccc <__subdf3+0x418>
   2cba8:	898fc83a 	sub	r7,r17,r6
   2cbac:	89e3803a 	cmpltu	r17,r17,r7
   2cbb0:	1947c83a 	sub	r3,r3,r5
   2cbb4:	1c47c83a 	sub	r3,r3,r17
   2cbb8:	3823883a 	mov	r17,r7
   2cbbc:	003f9b06 	br	2ca2c <_gp+0xfffeaee0>
   2cbc0:	2988b03a 	or	r4,r5,r6
   2cbc4:	203f5c26 	beq	r4,zero,2c938 <_gp+0xfffeadec>
   2cbc8:	10bfffc4 	addi	r2,r2,-1
   2cbcc:	1000931e 	bne	r2,zero,2ce1c <__subdf3+0x568>
   2cbd0:	898d883a 	add	r6,r17,r6
   2cbd4:	3463803a 	cmpltu	r17,r6,r17
   2cbd8:	1947883a 	add	r3,r3,r5
   2cbdc:	88c7883a 	add	r3,r17,r3
   2cbe0:	3023883a 	mov	r17,r6
   2cbe4:	003fd306 	br	2cb34 <_gp+0xfffeafe8>
   2cbe8:	1000541e 	bne	r2,zero,2cd3c <__subdf3+0x488>
   2cbec:	80800044 	addi	r2,r16,1
   2cbf0:	1081ffcc 	andi	r2,r2,2047
   2cbf4:	01000044 	movi	r4,1
   2cbf8:	2080a20e 	bge	r4,r2,2ce84 <__subdf3+0x5d0>
   2cbfc:	8989c83a 	sub	r4,r17,r6
   2cc00:	8905803a 	cmpltu	r2,r17,r4
   2cc04:	1967c83a 	sub	r19,r3,r5
   2cc08:	98a7c83a 	sub	r19,r19,r2
   2cc0c:	9880202c 	andhi	r2,r19,128
   2cc10:	10006326 	beq	r2,zero,2cda0 <__subdf3+0x4ec>
   2cc14:	3463c83a 	sub	r17,r6,r17
   2cc18:	28c7c83a 	sub	r3,r5,r3
   2cc1c:	344d803a 	cmpltu	r6,r6,r17
   2cc20:	19a7c83a 	sub	r19,r3,r6
   2cc24:	3825883a 	mov	r18,r7
   2cc28:	983f861e 	bne	r19,zero,2ca44 <_gp+0xfffeaef8>
   2cc2c:	8809883a 	mov	r4,r17
   2cc30:	002d3b40 	call	2d3b4 <__clzsi2>
   2cc34:	10800804 	addi	r2,r2,32
   2cc38:	113ffe04 	addi	r4,r2,-8
   2cc3c:	00c007c4 	movi	r3,31
   2cc40:	193f850e 	bge	r3,r4,2ca58 <_gp+0xfffeaf0c>
   2cc44:	10bff604 	addi	r2,r2,-40
   2cc48:	8884983a 	sll	r2,r17,r2
   2cc4c:	0023883a 	mov	r17,zero
   2cc50:	243f880e 	bge	r4,r16,2ca74 <_gp+0xfffeaf28>
   2cc54:	00ffe034 	movhi	r3,65408
   2cc58:	18ffffc4 	addi	r3,r3,-1
   2cc5c:	8121c83a 	sub	r16,r16,r4
   2cc60:	10c6703a 	and	r3,r2,r3
   2cc64:	003f3406 	br	2c938 <_gp+0xfffeadec>
   2cc68:	9100004c 	andi	r4,r18,1
   2cc6c:	000b883a 	mov	r5,zero
   2cc70:	0005883a 	mov	r2,zero
   2cc74:	003f4806 	br	2c998 <_gp+0xfffeae4c>
   2cc78:	298cb03a 	or	r6,r5,r6
   2cc7c:	300cc03a 	cmpne	r6,r6,zero
   2cc80:	0005883a 	mov	r2,zero
   2cc84:	003f6406 	br	2ca18 <_gp+0xfffeaecc>
   2cc88:	10009a1e 	bne	r2,zero,2cef4 <__subdf3+0x640>
   2cc8c:	82400044 	addi	r9,r16,1
   2cc90:	4881ffcc 	andi	r2,r9,2047
   2cc94:	02800044 	movi	r10,1
   2cc98:	5080670e 	bge	r10,r2,2ce38 <__subdf3+0x584>
   2cc9c:	0081ffc4 	movi	r2,2047
   2cca0:	4880af26 	beq	r9,r2,2cf60 <__subdf3+0x6ac>
   2cca4:	898d883a 	add	r6,r17,r6
   2cca8:	1945883a 	add	r2,r3,r5
   2ccac:	3447803a 	cmpltu	r3,r6,r17
   2ccb0:	1887883a 	add	r3,r3,r2
   2ccb4:	182297fa 	slli	r17,r3,31
   2ccb8:	300cd07a 	srli	r6,r6,1
   2ccbc:	1806d07a 	srli	r3,r3,1
   2ccc0:	4821883a 	mov	r16,r9
   2ccc4:	89a2b03a 	or	r17,r17,r6
   2ccc8:	003f1b06 	br	2c938 <_gp+0xfffeadec>
   2cccc:	0101ffc4 	movi	r4,2047
   2ccd0:	813f441e 	bne	r16,r4,2c9e4 <_gp+0xfffeae98>
   2ccd4:	003f1806 	br	2c938 <_gp+0xfffeadec>
   2ccd8:	843ff844 	addi	r16,r16,-31
   2ccdc:	01400804 	movi	r5,32
   2cce0:	1408d83a 	srl	r4,r2,r16
   2cce4:	19405026 	beq	r3,r5,2ce28 <__subdf3+0x574>
   2cce8:	01401004 	movi	r5,64
   2ccec:	28c7c83a 	sub	r3,r5,r3
   2ccf0:	10c4983a 	sll	r2,r2,r3
   2ccf4:	88a2b03a 	or	r17,r17,r2
   2ccf8:	8822c03a 	cmpne	r17,r17,zero
   2ccfc:	2462b03a 	or	r17,r4,r17
   2cd00:	0007883a 	mov	r3,zero
   2cd04:	0021883a 	mov	r16,zero
   2cd08:	003f6d06 	br	2cac0 <_gp+0xfffeaf74>
   2cd0c:	11fff804 	addi	r7,r2,-32
   2cd10:	01000804 	movi	r4,32
   2cd14:	29ced83a 	srl	r7,r5,r7
   2cd18:	11004526 	beq	r2,r4,2ce30 <__subdf3+0x57c>
   2cd1c:	01001004 	movi	r4,64
   2cd20:	2089c83a 	sub	r4,r4,r2
   2cd24:	2904983a 	sll	r2,r5,r4
   2cd28:	118cb03a 	or	r6,r2,r6
   2cd2c:	300cc03a 	cmpne	r6,r6,zero
   2cd30:	398cb03a 	or	r6,r7,r6
   2cd34:	0005883a 	mov	r2,zero
   2cd38:	003f3706 	br	2ca18 <_gp+0xfffeaecc>
   2cd3c:	80002a26 	beq	r16,zero,2cde8 <__subdf3+0x534>
   2cd40:	0101ffc4 	movi	r4,2047
   2cd44:	49006626 	beq	r9,r4,2cee0 <__subdf3+0x62c>
   2cd48:	0085c83a 	sub	r2,zero,r2
   2cd4c:	18c02034 	orhi	r3,r3,128
   2cd50:	01000e04 	movi	r4,56
   2cd54:	20807e16 	blt	r4,r2,2cf50 <__subdf3+0x69c>
   2cd58:	010007c4 	movi	r4,31
   2cd5c:	2080e716 	blt	r4,r2,2d0fc <__subdf3+0x848>
   2cd60:	01000804 	movi	r4,32
   2cd64:	2089c83a 	sub	r4,r4,r2
   2cd68:	1914983a 	sll	r10,r3,r4
   2cd6c:	8890d83a 	srl	r8,r17,r2
   2cd70:	8908983a 	sll	r4,r17,r4
   2cd74:	1884d83a 	srl	r2,r3,r2
   2cd78:	5222b03a 	or	r17,r10,r8
   2cd7c:	2006c03a 	cmpne	r3,r4,zero
   2cd80:	88e2b03a 	or	r17,r17,r3
   2cd84:	3463c83a 	sub	r17,r6,r17
   2cd88:	2885c83a 	sub	r2,r5,r2
   2cd8c:	344d803a 	cmpltu	r6,r6,r17
   2cd90:	1187c83a 	sub	r3,r2,r6
   2cd94:	4821883a 	mov	r16,r9
   2cd98:	3825883a 	mov	r18,r7
   2cd9c:	003f2306 	br	2ca2c <_gp+0xfffeaee0>
   2cda0:	24d0b03a 	or	r8,r4,r19
   2cda4:	40001b1e 	bne	r8,zero,2ce14 <__subdf3+0x560>
   2cda8:	0005883a 	mov	r2,zero
   2cdac:	0009883a 	mov	r4,zero
   2cdb0:	0021883a 	mov	r16,zero
   2cdb4:	003f4906 	br	2cadc <_gp+0xfffeaf90>
   2cdb8:	010007c4 	movi	r4,31
   2cdbc:	20803a16 	blt	r4,r2,2cea8 <__subdf3+0x5f4>
   2cdc0:	01000804 	movi	r4,32
   2cdc4:	2089c83a 	sub	r4,r4,r2
   2cdc8:	2912983a 	sll	r9,r5,r4
   2cdcc:	3090d83a 	srl	r8,r6,r2
   2cdd0:	3108983a 	sll	r4,r6,r4
   2cdd4:	2884d83a 	srl	r2,r5,r2
   2cdd8:	4a12b03a 	or	r9,r9,r8
   2cddc:	2008c03a 	cmpne	r4,r4,zero
   2cde0:	4912b03a 	or	r9,r9,r4
   2cde4:	003f4e06 	br	2cb20 <_gp+0xfffeafd4>
   2cde8:	1c48b03a 	or	r4,r3,r17
   2cdec:	20003c26 	beq	r4,zero,2cee0 <__subdf3+0x62c>
   2cdf0:	0084303a 	nor	r2,zero,r2
   2cdf4:	1000381e 	bne	r2,zero,2ced8 <__subdf3+0x624>
   2cdf8:	3463c83a 	sub	r17,r6,r17
   2cdfc:	28c5c83a 	sub	r2,r5,r3
   2ce00:	344d803a 	cmpltu	r6,r6,r17
   2ce04:	1187c83a 	sub	r3,r2,r6
   2ce08:	4821883a 	mov	r16,r9
   2ce0c:	3825883a 	mov	r18,r7
   2ce10:	003f0606 	br	2ca2c <_gp+0xfffeaee0>
   2ce14:	2023883a 	mov	r17,r4
   2ce18:	003f0906 	br	2ca40 <_gp+0xfffeaef4>
   2ce1c:	0101ffc4 	movi	r4,2047
   2ce20:	813f3a1e 	bne	r16,r4,2cb0c <_gp+0xfffeafc0>
   2ce24:	003ec406 	br	2c938 <_gp+0xfffeadec>
   2ce28:	0005883a 	mov	r2,zero
   2ce2c:	003fb106 	br	2ccf4 <_gp+0xfffeb1a8>
   2ce30:	0005883a 	mov	r2,zero
   2ce34:	003fbc06 	br	2cd28 <_gp+0xfffeb1dc>
   2ce38:	1c44b03a 	or	r2,r3,r17
   2ce3c:	80008e1e 	bne	r16,zero,2d078 <__subdf3+0x7c4>
   2ce40:	1000c826 	beq	r2,zero,2d164 <__subdf3+0x8b0>
   2ce44:	2984b03a 	or	r2,r5,r6
   2ce48:	103ebb26 	beq	r2,zero,2c938 <_gp+0xfffeadec>
   2ce4c:	8989883a 	add	r4,r17,r6
   2ce50:	1945883a 	add	r2,r3,r5
   2ce54:	2447803a 	cmpltu	r3,r4,r17
   2ce58:	1887883a 	add	r3,r3,r2
   2ce5c:	1880202c 	andhi	r2,r3,128
   2ce60:	2023883a 	mov	r17,r4
   2ce64:	103f1626 	beq	r2,zero,2cac0 <_gp+0xfffeaf74>
   2ce68:	00bfe034 	movhi	r2,65408
   2ce6c:	10bfffc4 	addi	r2,r2,-1
   2ce70:	5021883a 	mov	r16,r10
   2ce74:	1886703a 	and	r3,r3,r2
   2ce78:	003eaf06 	br	2c938 <_gp+0xfffeadec>
   2ce7c:	3825883a 	mov	r18,r7
   2ce80:	003f0f06 	br	2cac0 <_gp+0xfffeaf74>
   2ce84:	1c44b03a 	or	r2,r3,r17
   2ce88:	8000251e 	bne	r16,zero,2cf20 <__subdf3+0x66c>
   2ce8c:	1000661e 	bne	r2,zero,2d028 <__subdf3+0x774>
   2ce90:	2990b03a 	or	r8,r5,r6
   2ce94:	40009626 	beq	r8,zero,2d0f0 <__subdf3+0x83c>
   2ce98:	2807883a 	mov	r3,r5
   2ce9c:	3023883a 	mov	r17,r6
   2cea0:	3825883a 	mov	r18,r7
   2cea4:	003ea406 	br	2c938 <_gp+0xfffeadec>
   2cea8:	127ff804 	addi	r9,r2,-32
   2ceac:	01000804 	movi	r4,32
   2ceb0:	2a52d83a 	srl	r9,r5,r9
   2ceb4:	11008c26 	beq	r2,r4,2d0e8 <__subdf3+0x834>
   2ceb8:	01001004 	movi	r4,64
   2cebc:	2085c83a 	sub	r2,r4,r2
   2cec0:	2884983a 	sll	r2,r5,r2
   2cec4:	118cb03a 	or	r6,r2,r6
   2cec8:	300cc03a 	cmpne	r6,r6,zero
   2cecc:	4992b03a 	or	r9,r9,r6
   2ced0:	0005883a 	mov	r2,zero
   2ced4:	003f1206 	br	2cb20 <_gp+0xfffeafd4>
   2ced8:	0101ffc4 	movi	r4,2047
   2cedc:	493f9c1e 	bne	r9,r4,2cd50 <_gp+0xfffeb204>
   2cee0:	2807883a 	mov	r3,r5
   2cee4:	3023883a 	mov	r17,r6
   2cee8:	4821883a 	mov	r16,r9
   2ceec:	3825883a 	mov	r18,r7
   2cef0:	003e9106 	br	2c938 <_gp+0xfffeadec>
   2cef4:	80001f1e 	bne	r16,zero,2cf74 <__subdf3+0x6c0>
   2cef8:	1c48b03a 	or	r4,r3,r17
   2cefc:	20005a26 	beq	r4,zero,2d068 <__subdf3+0x7b4>
   2cf00:	0084303a 	nor	r2,zero,r2
   2cf04:	1000561e 	bne	r2,zero,2d060 <__subdf3+0x7ac>
   2cf08:	89a3883a 	add	r17,r17,r6
   2cf0c:	1945883a 	add	r2,r3,r5
   2cf10:	898d803a 	cmpltu	r6,r17,r6
   2cf14:	3087883a 	add	r3,r6,r2
   2cf18:	4821883a 	mov	r16,r9
   2cf1c:	003f0506 	br	2cb34 <_gp+0xfffeafe8>
   2cf20:	10002b1e 	bne	r2,zero,2cfd0 <__subdf3+0x71c>
   2cf24:	2984b03a 	or	r2,r5,r6
   2cf28:	10008026 	beq	r2,zero,2d12c <__subdf3+0x878>
   2cf2c:	2807883a 	mov	r3,r5
   2cf30:	3023883a 	mov	r17,r6
   2cf34:	3825883a 	mov	r18,r7
   2cf38:	0401ffc4 	movi	r16,2047
   2cf3c:	003e7e06 	br	2c938 <_gp+0xfffeadec>
   2cf40:	3809883a 	mov	r4,r7
   2cf44:	0011883a 	mov	r8,zero
   2cf48:	0005883a 	mov	r2,zero
   2cf4c:	003ee306 	br	2cadc <_gp+0xfffeaf90>
   2cf50:	1c62b03a 	or	r17,r3,r17
   2cf54:	8822c03a 	cmpne	r17,r17,zero
   2cf58:	0005883a 	mov	r2,zero
   2cf5c:	003f8906 	br	2cd84 <_gp+0xfffeb238>
   2cf60:	3809883a 	mov	r4,r7
   2cf64:	4821883a 	mov	r16,r9
   2cf68:	0011883a 	mov	r8,zero
   2cf6c:	0005883a 	mov	r2,zero
   2cf70:	003eda06 	br	2cadc <_gp+0xfffeaf90>
   2cf74:	0101ffc4 	movi	r4,2047
   2cf78:	49003b26 	beq	r9,r4,2d068 <__subdf3+0x7b4>
   2cf7c:	0085c83a 	sub	r2,zero,r2
   2cf80:	18c02034 	orhi	r3,r3,128
   2cf84:	01000e04 	movi	r4,56
   2cf88:	20806e16 	blt	r4,r2,2d144 <__subdf3+0x890>
   2cf8c:	010007c4 	movi	r4,31
   2cf90:	20807716 	blt	r4,r2,2d170 <__subdf3+0x8bc>
   2cf94:	01000804 	movi	r4,32
   2cf98:	2089c83a 	sub	r4,r4,r2
   2cf9c:	1914983a 	sll	r10,r3,r4
   2cfa0:	8890d83a 	srl	r8,r17,r2
   2cfa4:	8908983a 	sll	r4,r17,r4
   2cfa8:	1884d83a 	srl	r2,r3,r2
   2cfac:	5222b03a 	or	r17,r10,r8
   2cfb0:	2006c03a 	cmpne	r3,r4,zero
   2cfb4:	88e2b03a 	or	r17,r17,r3
   2cfb8:	89a3883a 	add	r17,r17,r6
   2cfbc:	1145883a 	add	r2,r2,r5
   2cfc0:	898d803a 	cmpltu	r6,r17,r6
   2cfc4:	3087883a 	add	r3,r6,r2
   2cfc8:	4821883a 	mov	r16,r9
   2cfcc:	003ed906 	br	2cb34 <_gp+0xfffeafe8>
   2cfd0:	2984b03a 	or	r2,r5,r6
   2cfd4:	10004226 	beq	r2,zero,2d0e0 <__subdf3+0x82c>
   2cfd8:	1808d0fa 	srli	r4,r3,3
   2cfdc:	8822d0fa 	srli	r17,r17,3
   2cfe0:	1806977a 	slli	r3,r3,29
   2cfe4:	2080022c 	andhi	r2,r4,8
   2cfe8:	1c62b03a 	or	r17,r3,r17
   2cfec:	10000826 	beq	r2,zero,2d010 <__subdf3+0x75c>
   2cff0:	2812d0fa 	srli	r9,r5,3
   2cff4:	4880022c 	andhi	r2,r9,8
   2cff8:	1000051e 	bne	r2,zero,2d010 <__subdf3+0x75c>
   2cffc:	300cd0fa 	srli	r6,r6,3
   2d000:	2804977a 	slli	r2,r5,29
   2d004:	4809883a 	mov	r4,r9
   2d008:	3825883a 	mov	r18,r7
   2d00c:	11a2b03a 	or	r17,r2,r6
   2d010:	8806d77a 	srli	r3,r17,29
   2d014:	200890fa 	slli	r4,r4,3
   2d018:	882290fa 	slli	r17,r17,3
   2d01c:	0401ffc4 	movi	r16,2047
   2d020:	1906b03a 	or	r3,r3,r4
   2d024:	003e4406 	br	2c938 <_gp+0xfffeadec>
   2d028:	2984b03a 	or	r2,r5,r6
   2d02c:	103e4226 	beq	r2,zero,2c938 <_gp+0xfffeadec>
   2d030:	8989c83a 	sub	r4,r17,r6
   2d034:	8911803a 	cmpltu	r8,r17,r4
   2d038:	1945c83a 	sub	r2,r3,r5
   2d03c:	1205c83a 	sub	r2,r2,r8
   2d040:	1200202c 	andhi	r8,r2,128
   2d044:	403e9a26 	beq	r8,zero,2cab0 <_gp+0xfffeaf64>
   2d048:	3463c83a 	sub	r17,r6,r17
   2d04c:	28c5c83a 	sub	r2,r5,r3
   2d050:	344d803a 	cmpltu	r6,r6,r17
   2d054:	1187c83a 	sub	r3,r2,r6
   2d058:	3825883a 	mov	r18,r7
   2d05c:	003e3606 	br	2c938 <_gp+0xfffeadec>
   2d060:	0101ffc4 	movi	r4,2047
   2d064:	493fc71e 	bne	r9,r4,2cf84 <_gp+0xfffeb438>
   2d068:	2807883a 	mov	r3,r5
   2d06c:	3023883a 	mov	r17,r6
   2d070:	4821883a 	mov	r16,r9
   2d074:	003e3006 	br	2c938 <_gp+0xfffeadec>
   2d078:	10003626 	beq	r2,zero,2d154 <__subdf3+0x8a0>
   2d07c:	2984b03a 	or	r2,r5,r6
   2d080:	10001726 	beq	r2,zero,2d0e0 <__subdf3+0x82c>
   2d084:	1808d0fa 	srli	r4,r3,3
   2d088:	8822d0fa 	srli	r17,r17,3
   2d08c:	1806977a 	slli	r3,r3,29
   2d090:	2080022c 	andhi	r2,r4,8
   2d094:	1c62b03a 	or	r17,r3,r17
   2d098:	10000726 	beq	r2,zero,2d0b8 <__subdf3+0x804>
   2d09c:	2812d0fa 	srli	r9,r5,3
   2d0a0:	4880022c 	andhi	r2,r9,8
   2d0a4:	1000041e 	bne	r2,zero,2d0b8 <__subdf3+0x804>
   2d0a8:	300cd0fa 	srli	r6,r6,3
   2d0ac:	2804977a 	slli	r2,r5,29
   2d0b0:	4809883a 	mov	r4,r9
   2d0b4:	11a2b03a 	or	r17,r2,r6
   2d0b8:	8806d77a 	srli	r3,r17,29
   2d0bc:	200890fa 	slli	r4,r4,3
   2d0c0:	882290fa 	slli	r17,r17,3
   2d0c4:	3825883a 	mov	r18,r7
   2d0c8:	1906b03a 	or	r3,r3,r4
   2d0cc:	0401ffc4 	movi	r16,2047
   2d0d0:	003e1906 	br	2c938 <_gp+0xfffeadec>
   2d0d4:	000b883a 	mov	r5,zero
   2d0d8:	0005883a 	mov	r2,zero
   2d0dc:	003e2e06 	br	2c998 <_gp+0xfffeae4c>
   2d0e0:	0401ffc4 	movi	r16,2047
   2d0e4:	003e1406 	br	2c938 <_gp+0xfffeadec>
   2d0e8:	0005883a 	mov	r2,zero
   2d0ec:	003f7506 	br	2cec4 <_gp+0xfffeb378>
   2d0f0:	0005883a 	mov	r2,zero
   2d0f4:	0009883a 	mov	r4,zero
   2d0f8:	003e7806 	br	2cadc <_gp+0xfffeaf90>
   2d0fc:	123ff804 	addi	r8,r2,-32
   2d100:	01000804 	movi	r4,32
   2d104:	1a10d83a 	srl	r8,r3,r8
   2d108:	11002526 	beq	r2,r4,2d1a0 <__subdf3+0x8ec>
   2d10c:	01001004 	movi	r4,64
   2d110:	2085c83a 	sub	r2,r4,r2
   2d114:	1884983a 	sll	r2,r3,r2
   2d118:	1444b03a 	or	r2,r2,r17
   2d11c:	1004c03a 	cmpne	r2,r2,zero
   2d120:	40a2b03a 	or	r17,r8,r2
   2d124:	0005883a 	mov	r2,zero
   2d128:	003f1606 	br	2cd84 <_gp+0xfffeb238>
   2d12c:	02000434 	movhi	r8,16
   2d130:	0009883a 	mov	r4,zero
   2d134:	423fffc4 	addi	r8,r8,-1
   2d138:	00bfffc4 	movi	r2,-1
   2d13c:	0401ffc4 	movi	r16,2047
   2d140:	003e6606 	br	2cadc <_gp+0xfffeaf90>
   2d144:	1c62b03a 	or	r17,r3,r17
   2d148:	8822c03a 	cmpne	r17,r17,zero
   2d14c:	0005883a 	mov	r2,zero
   2d150:	003f9906 	br	2cfb8 <_gp+0xfffeb46c>
   2d154:	2807883a 	mov	r3,r5
   2d158:	3023883a 	mov	r17,r6
   2d15c:	0401ffc4 	movi	r16,2047
   2d160:	003df506 	br	2c938 <_gp+0xfffeadec>
   2d164:	2807883a 	mov	r3,r5
   2d168:	3023883a 	mov	r17,r6
   2d16c:	003df206 	br	2c938 <_gp+0xfffeadec>
   2d170:	123ff804 	addi	r8,r2,-32
   2d174:	01000804 	movi	r4,32
   2d178:	1a10d83a 	srl	r8,r3,r8
   2d17c:	11000a26 	beq	r2,r4,2d1a8 <__subdf3+0x8f4>
   2d180:	01001004 	movi	r4,64
   2d184:	2085c83a 	sub	r2,r4,r2
   2d188:	1884983a 	sll	r2,r3,r2
   2d18c:	1444b03a 	or	r2,r2,r17
   2d190:	1004c03a 	cmpne	r2,r2,zero
   2d194:	40a2b03a 	or	r17,r8,r2
   2d198:	0005883a 	mov	r2,zero
   2d19c:	003f8606 	br	2cfb8 <_gp+0xfffeb46c>
   2d1a0:	0005883a 	mov	r2,zero
   2d1a4:	003fdc06 	br	2d118 <_gp+0xfffeb5cc>
   2d1a8:	0005883a 	mov	r2,zero
   2d1ac:	003ff706 	br	2d18c <_gp+0xfffeb640>

0002d1b0 <__fixdfsi>:
   2d1b0:	280cd53a 	srli	r6,r5,20
   2d1b4:	00c00434 	movhi	r3,16
   2d1b8:	18ffffc4 	addi	r3,r3,-1
   2d1bc:	3181ffcc 	andi	r6,r6,2047
   2d1c0:	01c0ff84 	movi	r7,1022
   2d1c4:	28c6703a 	and	r3,r5,r3
   2d1c8:	280ad7fa 	srli	r5,r5,31
   2d1cc:	3980120e 	bge	r7,r6,2d218 <__fixdfsi+0x68>
   2d1d0:	00810744 	movi	r2,1053
   2d1d4:	11800c16 	blt	r2,r6,2d208 <__fixdfsi+0x58>
   2d1d8:	00810cc4 	movi	r2,1075
   2d1dc:	1185c83a 	sub	r2,r2,r6
   2d1e0:	01c007c4 	movi	r7,31
   2d1e4:	18c00434 	orhi	r3,r3,16
   2d1e8:	38800d16 	blt	r7,r2,2d220 <__fixdfsi+0x70>
   2d1ec:	31befb44 	addi	r6,r6,-1043
   2d1f0:	2084d83a 	srl	r2,r4,r2
   2d1f4:	1986983a 	sll	r3,r3,r6
   2d1f8:	1884b03a 	or	r2,r3,r2
   2d1fc:	28000726 	beq	r5,zero,2d21c <__fixdfsi+0x6c>
   2d200:	0085c83a 	sub	r2,zero,r2
   2d204:	f800283a 	ret
   2d208:	00a00034 	movhi	r2,32768
   2d20c:	10bfffc4 	addi	r2,r2,-1
   2d210:	2885883a 	add	r2,r5,r2
   2d214:	f800283a 	ret
   2d218:	0005883a 	mov	r2,zero
   2d21c:	f800283a 	ret
   2d220:	008104c4 	movi	r2,1043
   2d224:	1185c83a 	sub	r2,r2,r6
   2d228:	1884d83a 	srl	r2,r3,r2
   2d22c:	003ff306 	br	2d1fc <_gp+0xfffeb6b0>

0002d230 <__floatsidf>:
   2d230:	defffd04 	addi	sp,sp,-12
   2d234:	dfc00215 	stw	ra,8(sp)
   2d238:	dc400115 	stw	r17,4(sp)
   2d23c:	dc000015 	stw	r16,0(sp)
   2d240:	20002b26 	beq	r4,zero,2d2f0 <__floatsidf+0xc0>
   2d244:	2023883a 	mov	r17,r4
   2d248:	2020d7fa 	srli	r16,r4,31
   2d24c:	20002d16 	blt	r4,zero,2d304 <__floatsidf+0xd4>
   2d250:	8809883a 	mov	r4,r17
   2d254:	002d3b40 	call	2d3b4 <__clzsi2>
   2d258:	01410784 	movi	r5,1054
   2d25c:	288bc83a 	sub	r5,r5,r2
   2d260:	01010cc4 	movi	r4,1075
   2d264:	2149c83a 	sub	r4,r4,r5
   2d268:	00c007c4 	movi	r3,31
   2d26c:	1900160e 	bge	r3,r4,2d2c8 <__floatsidf+0x98>
   2d270:	00c104c4 	movi	r3,1043
   2d274:	1947c83a 	sub	r3,r3,r5
   2d278:	88c6983a 	sll	r3,r17,r3
   2d27c:	00800434 	movhi	r2,16
   2d280:	10bfffc4 	addi	r2,r2,-1
   2d284:	1886703a 	and	r3,r3,r2
   2d288:	2941ffcc 	andi	r5,r5,2047
   2d28c:	800d883a 	mov	r6,r16
   2d290:	0005883a 	mov	r2,zero
   2d294:	280a953a 	slli	r5,r5,20
   2d298:	31803fcc 	andi	r6,r6,255
   2d29c:	01000434 	movhi	r4,16
   2d2a0:	300c97fa 	slli	r6,r6,31
   2d2a4:	213fffc4 	addi	r4,r4,-1
   2d2a8:	1906703a 	and	r3,r3,r4
   2d2ac:	1946b03a 	or	r3,r3,r5
   2d2b0:	1986b03a 	or	r3,r3,r6
   2d2b4:	dfc00217 	ldw	ra,8(sp)
   2d2b8:	dc400117 	ldw	r17,4(sp)
   2d2bc:	dc000017 	ldw	r16,0(sp)
   2d2c0:	dec00304 	addi	sp,sp,12
   2d2c4:	f800283a 	ret
   2d2c8:	00c002c4 	movi	r3,11
   2d2cc:	1887c83a 	sub	r3,r3,r2
   2d2d0:	88c6d83a 	srl	r3,r17,r3
   2d2d4:	8904983a 	sll	r2,r17,r4
   2d2d8:	01000434 	movhi	r4,16
   2d2dc:	213fffc4 	addi	r4,r4,-1
   2d2e0:	2941ffcc 	andi	r5,r5,2047
   2d2e4:	1906703a 	and	r3,r3,r4
   2d2e8:	800d883a 	mov	r6,r16
   2d2ec:	003fe906 	br	2d294 <_gp+0xfffeb748>
   2d2f0:	000d883a 	mov	r6,zero
   2d2f4:	000b883a 	mov	r5,zero
   2d2f8:	0007883a 	mov	r3,zero
   2d2fc:	0005883a 	mov	r2,zero
   2d300:	003fe406 	br	2d294 <_gp+0xfffeb748>
   2d304:	0123c83a 	sub	r17,zero,r4
   2d308:	003fd106 	br	2d250 <_gp+0xfffeb704>

0002d30c <__floatunsidf>:
   2d30c:	defffe04 	addi	sp,sp,-8
   2d310:	dc000015 	stw	r16,0(sp)
   2d314:	dfc00115 	stw	ra,4(sp)
   2d318:	2021883a 	mov	r16,r4
   2d31c:	20002226 	beq	r4,zero,2d3a8 <__floatunsidf+0x9c>
   2d320:	002d3b40 	call	2d3b4 <__clzsi2>
   2d324:	01010784 	movi	r4,1054
   2d328:	2089c83a 	sub	r4,r4,r2
   2d32c:	01810cc4 	movi	r6,1075
   2d330:	310dc83a 	sub	r6,r6,r4
   2d334:	00c007c4 	movi	r3,31
   2d338:	1980120e 	bge	r3,r6,2d384 <__floatunsidf+0x78>
   2d33c:	00c104c4 	movi	r3,1043
   2d340:	1907c83a 	sub	r3,r3,r4
   2d344:	80ca983a 	sll	r5,r16,r3
   2d348:	00800434 	movhi	r2,16
   2d34c:	10bfffc4 	addi	r2,r2,-1
   2d350:	2101ffcc 	andi	r4,r4,2047
   2d354:	0021883a 	mov	r16,zero
   2d358:	288a703a 	and	r5,r5,r2
   2d35c:	2008953a 	slli	r4,r4,20
   2d360:	00c00434 	movhi	r3,16
   2d364:	18ffffc4 	addi	r3,r3,-1
   2d368:	28c6703a 	and	r3,r5,r3
   2d36c:	8005883a 	mov	r2,r16
   2d370:	1906b03a 	or	r3,r3,r4
   2d374:	dfc00117 	ldw	ra,4(sp)
   2d378:	dc000017 	ldw	r16,0(sp)
   2d37c:	dec00204 	addi	sp,sp,8
   2d380:	f800283a 	ret
   2d384:	00c002c4 	movi	r3,11
   2d388:	188bc83a 	sub	r5,r3,r2
   2d38c:	814ad83a 	srl	r5,r16,r5
   2d390:	00c00434 	movhi	r3,16
   2d394:	18ffffc4 	addi	r3,r3,-1
   2d398:	81a0983a 	sll	r16,r16,r6
   2d39c:	2101ffcc 	andi	r4,r4,2047
   2d3a0:	28ca703a 	and	r5,r5,r3
   2d3a4:	003fed06 	br	2d35c <_gp+0xfffeb810>
   2d3a8:	0009883a 	mov	r4,zero
   2d3ac:	000b883a 	mov	r5,zero
   2d3b0:	003fea06 	br	2d35c <_gp+0xfffeb810>

0002d3b4 <__clzsi2>:
   2d3b4:	00bfffd4 	movui	r2,65535
   2d3b8:	11000536 	bltu	r2,r4,2d3d0 <__clzsi2+0x1c>
   2d3bc:	00803fc4 	movi	r2,255
   2d3c0:	11000f36 	bltu	r2,r4,2d400 <__clzsi2+0x4c>
   2d3c4:	00800804 	movi	r2,32
   2d3c8:	0007883a 	mov	r3,zero
   2d3cc:	00000506 	br	2d3e4 <__clzsi2+0x30>
   2d3d0:	00804034 	movhi	r2,256
   2d3d4:	10bfffc4 	addi	r2,r2,-1
   2d3d8:	11000c2e 	bgeu	r2,r4,2d40c <__clzsi2+0x58>
   2d3dc:	00800204 	movi	r2,8
   2d3e0:	00c00604 	movi	r3,24
   2d3e4:	20c8d83a 	srl	r4,r4,r3
   2d3e8:	00c000f4 	movhi	r3,3
   2d3ec:	18df8f04 	addi	r3,r3,32316
   2d3f0:	1909883a 	add	r4,r3,r4
   2d3f4:	20c00003 	ldbu	r3,0(r4)
   2d3f8:	10c5c83a 	sub	r2,r2,r3
   2d3fc:	f800283a 	ret
   2d400:	00800604 	movi	r2,24
   2d404:	00c00204 	movi	r3,8
   2d408:	003ff606 	br	2d3e4 <_gp+0xfffeb898>
   2d40c:	00800404 	movi	r2,16
   2d410:	1007883a 	mov	r3,r2
   2d414:	003ff306 	br	2d3e4 <_gp+0xfffeb898>

0002d418 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d418:	defffe04 	addi	sp,sp,-8
   2d41c:	dfc00115 	stw	ra,4(sp)
   2d420:	df000015 	stw	fp,0(sp)
   2d424:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d428:	d0a00b17 	ldw	r2,-32724(gp)
   2d42c:	10000326 	beq	r2,zero,2d43c <alt_get_errno+0x24>
   2d430:	d0a00b17 	ldw	r2,-32724(gp)
   2d434:	103ee83a 	callr	r2
   2d438:	00000106 	br	2d440 <alt_get_errno+0x28>
   2d43c:	d0a70f04 	addi	r2,gp,-25540
}
   2d440:	e037883a 	mov	sp,fp
   2d444:	dfc00117 	ldw	ra,4(sp)
   2d448:	df000017 	ldw	fp,0(sp)
   2d44c:	dec00204 	addi	sp,sp,8
   2d450:	f800283a 	ret

0002d454 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2d454:	defffb04 	addi	sp,sp,-20
   2d458:	dfc00415 	stw	ra,16(sp)
   2d45c:	df000315 	stw	fp,12(sp)
   2d460:	df000304 	addi	fp,sp,12
   2d464:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2d468:	e0bfff17 	ldw	r2,-4(fp)
   2d46c:	10000616 	blt	r2,zero,2d488 <close+0x34>
   2d470:	e0bfff17 	ldw	r2,-4(fp)
   2d474:	10c00324 	muli	r3,r2,12
   2d478:	00800134 	movhi	r2,4
   2d47c:	10a25804 	addi	r2,r2,-30368
   2d480:	1885883a 	add	r2,r3,r2
   2d484:	00000106 	br	2d48c <close+0x38>
   2d488:	0005883a 	mov	r2,zero
   2d48c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   2d490:	e0bffd17 	ldw	r2,-12(fp)
   2d494:	10001926 	beq	r2,zero,2d4fc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2d498:	e0bffd17 	ldw	r2,-12(fp)
   2d49c:	10800017 	ldw	r2,0(r2)
   2d4a0:	10800417 	ldw	r2,16(r2)
   2d4a4:	10000626 	beq	r2,zero,2d4c0 <close+0x6c>
   2d4a8:	e0bffd17 	ldw	r2,-12(fp)
   2d4ac:	10800017 	ldw	r2,0(r2)
   2d4b0:	10800417 	ldw	r2,16(r2)
   2d4b4:	e13ffd17 	ldw	r4,-12(fp)
   2d4b8:	103ee83a 	callr	r2
   2d4bc:	00000106 	br	2d4c4 <close+0x70>
   2d4c0:	0005883a 	mov	r2,zero
   2d4c4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2d4c8:	e13fff17 	ldw	r4,-4(fp)
   2d4cc:	002db0c0 	call	2db0c <alt_release_fd>
    if (rval < 0)
   2d4d0:	e0bffe17 	ldw	r2,-8(fp)
   2d4d4:	1000070e 	bge	r2,zero,2d4f4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   2d4d8:	002d4180 	call	2d418 <alt_get_errno>
   2d4dc:	1007883a 	mov	r3,r2
   2d4e0:	e0bffe17 	ldw	r2,-8(fp)
   2d4e4:	0085c83a 	sub	r2,zero,r2
   2d4e8:	18800015 	stw	r2,0(r3)
      return -1;
   2d4ec:	00bfffc4 	movi	r2,-1
   2d4f0:	00000706 	br	2d510 <close+0xbc>
    }
    return 0;
   2d4f4:	0005883a 	mov	r2,zero
   2d4f8:	00000506 	br	2d510 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2d4fc:	002d4180 	call	2d418 <alt_get_errno>
   2d500:	1007883a 	mov	r3,r2
   2d504:	00801444 	movi	r2,81
   2d508:	18800015 	stw	r2,0(r3)
    return -1;
   2d50c:	00bfffc4 	movi	r2,-1
  }
}
   2d510:	e037883a 	mov	sp,fp
   2d514:	dfc00117 	ldw	ra,4(sp)
   2d518:	df000017 	ldw	fp,0(sp)
   2d51c:	dec00204 	addi	sp,sp,8
   2d520:	f800283a 	ret

0002d524 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2d524:	defffc04 	addi	sp,sp,-16
   2d528:	df000315 	stw	fp,12(sp)
   2d52c:	df000304 	addi	fp,sp,12
   2d530:	e13ffd15 	stw	r4,-12(fp)
   2d534:	e17ffe15 	stw	r5,-8(fp)
   2d538:	e1bfff15 	stw	r6,-4(fp)
  return len;
   2d53c:	e0bfff17 	ldw	r2,-4(fp)
}
   2d540:	e037883a 	mov	sp,fp
   2d544:	df000017 	ldw	fp,0(sp)
   2d548:	dec00104 	addi	sp,sp,4
   2d54c:	f800283a 	ret

0002d550 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d550:	defffe04 	addi	sp,sp,-8
   2d554:	dfc00115 	stw	ra,4(sp)
   2d558:	df000015 	stw	fp,0(sp)
   2d55c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d560:	d0a00b17 	ldw	r2,-32724(gp)
   2d564:	10000326 	beq	r2,zero,2d574 <alt_get_errno+0x24>
   2d568:	d0a00b17 	ldw	r2,-32724(gp)
   2d56c:	103ee83a 	callr	r2
   2d570:	00000106 	br	2d578 <alt_get_errno+0x28>
   2d574:	d0a70f04 	addi	r2,gp,-25540
}
   2d578:	e037883a 	mov	sp,fp
   2d57c:	dfc00117 	ldw	ra,4(sp)
   2d580:	df000017 	ldw	fp,0(sp)
   2d584:	dec00204 	addi	sp,sp,8
   2d588:	f800283a 	ret

0002d58c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2d58c:	defffb04 	addi	sp,sp,-20
   2d590:	dfc00415 	stw	ra,16(sp)
   2d594:	df000315 	stw	fp,12(sp)
   2d598:	df000304 	addi	fp,sp,12
   2d59c:	e13ffe15 	stw	r4,-8(fp)
   2d5a0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d5a4:	e0bffe17 	ldw	r2,-8(fp)
   2d5a8:	10000616 	blt	r2,zero,2d5c4 <fstat+0x38>
   2d5ac:	e0bffe17 	ldw	r2,-8(fp)
   2d5b0:	10c00324 	muli	r3,r2,12
   2d5b4:	00800134 	movhi	r2,4
   2d5b8:	10a25804 	addi	r2,r2,-30368
   2d5bc:	1885883a 	add	r2,r3,r2
   2d5c0:	00000106 	br	2d5c8 <fstat+0x3c>
   2d5c4:	0005883a 	mov	r2,zero
   2d5c8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   2d5cc:	e0bffd17 	ldw	r2,-12(fp)
   2d5d0:	10001026 	beq	r2,zero,2d614 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   2d5d4:	e0bffd17 	ldw	r2,-12(fp)
   2d5d8:	10800017 	ldw	r2,0(r2)
   2d5dc:	10800817 	ldw	r2,32(r2)
   2d5e0:	10000726 	beq	r2,zero,2d600 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   2d5e4:	e0bffd17 	ldw	r2,-12(fp)
   2d5e8:	10800017 	ldw	r2,0(r2)
   2d5ec:	10800817 	ldw	r2,32(r2)
   2d5f0:	e17fff17 	ldw	r5,-4(fp)
   2d5f4:	e13ffd17 	ldw	r4,-12(fp)
   2d5f8:	103ee83a 	callr	r2
   2d5fc:	00000a06 	br	2d628 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2d600:	e0bfff17 	ldw	r2,-4(fp)
   2d604:	00c80004 	movi	r3,8192
   2d608:	10c00115 	stw	r3,4(r2)
      return 0;
   2d60c:	0005883a 	mov	r2,zero
   2d610:	00000506 	br	2d628 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2d614:	002d5500 	call	2d550 <alt_get_errno>
   2d618:	1007883a 	mov	r3,r2
   2d61c:	00801444 	movi	r2,81
   2d620:	18800015 	stw	r2,0(r3)
    return -1;
   2d624:	00bfffc4 	movi	r2,-1
  }
}
   2d628:	e037883a 	mov	sp,fp
   2d62c:	dfc00117 	ldw	ra,4(sp)
   2d630:	df000017 	ldw	fp,0(sp)
   2d634:	dec00204 	addi	sp,sp,8
   2d638:	f800283a 	ret

0002d63c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d63c:	defffe04 	addi	sp,sp,-8
   2d640:	dfc00115 	stw	ra,4(sp)
   2d644:	df000015 	stw	fp,0(sp)
   2d648:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d64c:	d0a00b17 	ldw	r2,-32724(gp)
   2d650:	10000326 	beq	r2,zero,2d660 <alt_get_errno+0x24>
   2d654:	d0a00b17 	ldw	r2,-32724(gp)
   2d658:	103ee83a 	callr	r2
   2d65c:	00000106 	br	2d664 <alt_get_errno+0x28>
   2d660:	d0a70f04 	addi	r2,gp,-25540
}
   2d664:	e037883a 	mov	sp,fp
   2d668:	dfc00117 	ldw	ra,4(sp)
   2d66c:	df000017 	ldw	fp,0(sp)
   2d670:	dec00204 	addi	sp,sp,8
   2d674:	f800283a 	ret

0002d678 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2d678:	deffed04 	addi	sp,sp,-76
   2d67c:	dfc01215 	stw	ra,72(sp)
   2d680:	df001115 	stw	fp,68(sp)
   2d684:	df001104 	addi	fp,sp,68
   2d688:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d68c:	e0bfff17 	ldw	r2,-4(fp)
   2d690:	10000616 	blt	r2,zero,2d6ac <isatty+0x34>
   2d694:	e0bfff17 	ldw	r2,-4(fp)
   2d698:	10c00324 	muli	r3,r2,12
   2d69c:	00800134 	movhi	r2,4
   2d6a0:	10a25804 	addi	r2,r2,-30368
   2d6a4:	1885883a 	add	r2,r3,r2
   2d6a8:	00000106 	br	2d6b0 <isatty+0x38>
   2d6ac:	0005883a 	mov	r2,zero
   2d6b0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   2d6b4:	e0bfef17 	ldw	r2,-68(fp)
   2d6b8:	10000e26 	beq	r2,zero,2d6f4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2d6bc:	e0bfef17 	ldw	r2,-68(fp)
   2d6c0:	10800017 	ldw	r2,0(r2)
   2d6c4:	10800817 	ldw	r2,32(r2)
   2d6c8:	1000021e 	bne	r2,zero,2d6d4 <isatty+0x5c>
    {
      return 1;
   2d6cc:	00800044 	movi	r2,1
   2d6d0:	00000d06 	br	2d708 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2d6d4:	e0bff004 	addi	r2,fp,-64
   2d6d8:	100b883a 	mov	r5,r2
   2d6dc:	e13fff17 	ldw	r4,-4(fp)
   2d6e0:	002d58c0 	call	2d58c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   2d6e4:	e0bff117 	ldw	r2,-60(fp)
   2d6e8:	10880020 	cmpeqi	r2,r2,8192
   2d6ec:	10803fcc 	andi	r2,r2,255
   2d6f0:	00000506 	br	2d708 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2d6f4:	002d63c0 	call	2d63c <alt_get_errno>
   2d6f8:	1007883a 	mov	r3,r2
   2d6fc:	00801444 	movi	r2,81
   2d700:	18800015 	stw	r2,0(r3)
    return 0;
   2d704:	0005883a 	mov	r2,zero
  }
}
   2d708:	e037883a 	mov	sp,fp
   2d70c:	dfc00117 	ldw	ra,4(sp)
   2d710:	df000017 	ldw	fp,0(sp)
   2d714:	dec00204 	addi	sp,sp,8
   2d718:	f800283a 	ret

0002d71c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2d71c:	defffc04 	addi	sp,sp,-16
   2d720:	df000315 	stw	fp,12(sp)
   2d724:	df000304 	addi	fp,sp,12
   2d728:	e13ffd15 	stw	r4,-12(fp)
   2d72c:	e17ffe15 	stw	r5,-8(fp)
   2d730:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   2d734:	e0fffe17 	ldw	r3,-8(fp)
   2d738:	e0bffd17 	ldw	r2,-12(fp)
   2d73c:	18800c26 	beq	r3,r2,2d770 <alt_load_section+0x54>
  {
    while( to != end )
   2d740:	00000806 	br	2d764 <alt_load_section+0x48>
    {
      *to++ = *from++;
   2d744:	e0bffe17 	ldw	r2,-8(fp)
   2d748:	10c00104 	addi	r3,r2,4
   2d74c:	e0fffe15 	stw	r3,-8(fp)
   2d750:	e0fffd17 	ldw	r3,-12(fp)
   2d754:	19000104 	addi	r4,r3,4
   2d758:	e13ffd15 	stw	r4,-12(fp)
   2d75c:	18c00017 	ldw	r3,0(r3)
   2d760:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2d764:	e0fffe17 	ldw	r3,-8(fp)
   2d768:	e0bfff17 	ldw	r2,-4(fp)
   2d76c:	18bff51e 	bne	r3,r2,2d744 <_gp+0xfffebbf8>
    {
      *to++ = *from++;
    }
  }
}
   2d770:	0001883a 	nop
   2d774:	e037883a 	mov	sp,fp
   2d778:	df000017 	ldw	fp,0(sp)
   2d77c:	dec00104 	addi	sp,sp,4
   2d780:	f800283a 	ret

0002d784 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2d784:	defffe04 	addi	sp,sp,-8
   2d788:	dfc00115 	stw	ra,4(sp)
   2d78c:	df000015 	stw	fp,0(sp)
   2d790:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2d794:	01800134 	movhi	r6,4
   2d798:	31a70204 	addi	r6,r6,-25592
   2d79c:	01400134 	movhi	r5,4
   2d7a0:	29602504 	addi	r5,r5,-32620
   2d7a4:	01000134 	movhi	r4,4
   2d7a8:	21270204 	addi	r4,r4,-25592
   2d7ac:	002d71c0 	call	2d71c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2d7b0:	018000b4 	movhi	r6,2
   2d7b4:	31809104 	addi	r6,r6,580
   2d7b8:	014000b4 	movhi	r5,2
   2d7bc:	29400804 	addi	r5,r5,32
   2d7c0:	010000b4 	movhi	r4,2
   2d7c4:	21000804 	addi	r4,r4,32
   2d7c8:	002d71c0 	call	2d71c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2d7cc:	01800134 	movhi	r6,4
   2d7d0:	31a02504 	addi	r6,r6,-32620
   2d7d4:	014000f4 	movhi	r5,3
   2d7d8:	295ef704 	addi	r5,r5,31708
   2d7dc:	010000f4 	movhi	r4,3
   2d7e0:	211ef704 	addi	r4,r4,31708
   2d7e4:	002d71c0 	call	2d71c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2d7e8:	00367380 	call	36738 <alt_dcache_flush_all>
  alt_icache_flush_all();
   2d7ec:	00369200 	call	36920 <alt_icache_flush_all>
}
   2d7f0:	0001883a 	nop
   2d7f4:	e037883a 	mov	sp,fp
   2d7f8:	dfc00117 	ldw	ra,4(sp)
   2d7fc:	df000017 	ldw	fp,0(sp)
   2d800:	dec00204 	addi	sp,sp,8
   2d804:	f800283a 	ret

0002d808 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d808:	defffe04 	addi	sp,sp,-8
   2d80c:	dfc00115 	stw	ra,4(sp)
   2d810:	df000015 	stw	fp,0(sp)
   2d814:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d818:	d0a00b17 	ldw	r2,-32724(gp)
   2d81c:	10000326 	beq	r2,zero,2d82c <alt_get_errno+0x24>
   2d820:	d0a00b17 	ldw	r2,-32724(gp)
   2d824:	103ee83a 	callr	r2
   2d828:	00000106 	br	2d830 <alt_get_errno+0x28>
   2d82c:	d0a70f04 	addi	r2,gp,-25540
}
   2d830:	e037883a 	mov	sp,fp
   2d834:	dfc00117 	ldw	ra,4(sp)
   2d838:	df000017 	ldw	fp,0(sp)
   2d83c:	dec00204 	addi	sp,sp,8
   2d840:	f800283a 	ret

0002d844 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   2d844:	defff904 	addi	sp,sp,-28
   2d848:	dfc00615 	stw	ra,24(sp)
   2d84c:	df000515 	stw	fp,20(sp)
   2d850:	df000504 	addi	fp,sp,20
   2d854:	e13ffd15 	stw	r4,-12(fp)
   2d858:	e17ffe15 	stw	r5,-8(fp)
   2d85c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2d860:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d864:	e0bffd17 	ldw	r2,-12(fp)
   2d868:	10000616 	blt	r2,zero,2d884 <lseek+0x40>
   2d86c:	e0bffd17 	ldw	r2,-12(fp)
   2d870:	10c00324 	muli	r3,r2,12
   2d874:	00800134 	movhi	r2,4
   2d878:	10a25804 	addi	r2,r2,-30368
   2d87c:	1885883a 	add	r2,r3,r2
   2d880:	00000106 	br	2d888 <lseek+0x44>
   2d884:	0005883a 	mov	r2,zero
   2d888:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   2d88c:	e0bffc17 	ldw	r2,-16(fp)
   2d890:	10001026 	beq	r2,zero,2d8d4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2d894:	e0bffc17 	ldw	r2,-16(fp)
   2d898:	10800017 	ldw	r2,0(r2)
   2d89c:	10800717 	ldw	r2,28(r2)
   2d8a0:	10000926 	beq	r2,zero,2d8c8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2d8a4:	e0bffc17 	ldw	r2,-16(fp)
   2d8a8:	10800017 	ldw	r2,0(r2)
   2d8ac:	10800717 	ldw	r2,28(r2)
   2d8b0:	e1bfff17 	ldw	r6,-4(fp)
   2d8b4:	e17ffe17 	ldw	r5,-8(fp)
   2d8b8:	e13ffc17 	ldw	r4,-16(fp)
   2d8bc:	103ee83a 	callr	r2
   2d8c0:	e0bffb15 	stw	r2,-20(fp)
   2d8c4:	00000506 	br	2d8dc <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2d8c8:	00bfde84 	movi	r2,-134
   2d8cc:	e0bffb15 	stw	r2,-20(fp)
   2d8d0:	00000206 	br	2d8dc <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   2d8d4:	00bfebc4 	movi	r2,-81
   2d8d8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   2d8dc:	e0bffb17 	ldw	r2,-20(fp)
   2d8e0:	1000070e 	bge	r2,zero,2d900 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   2d8e4:	002d8080 	call	2d808 <alt_get_errno>
   2d8e8:	1007883a 	mov	r3,r2
   2d8ec:	e0bffb17 	ldw	r2,-20(fp)
   2d8f0:	0085c83a 	sub	r2,zero,r2
   2d8f4:	18800015 	stw	r2,0(r3)
    rc = -1;
   2d8f8:	00bfffc4 	movi	r2,-1
   2d8fc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   2d900:	e0bffb17 	ldw	r2,-20(fp)
}
   2d904:	e037883a 	mov	sp,fp
   2d908:	dfc00117 	ldw	ra,4(sp)
   2d90c:	df000017 	ldw	fp,0(sp)
   2d910:	dec00204 	addi	sp,sp,8
   2d914:	f800283a 	ret

0002d918 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2d918:	defff904 	addi	sp,sp,-28
   2d91c:	dfc00615 	stw	ra,24(sp)
   2d920:	df000515 	stw	fp,20(sp)
   2d924:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2d928:	0009883a 	mov	r4,zero
   2d92c:	00358600 	call	35860 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2d930:	002e8d40 	call	2e8d4 <OSInit>
   2d934:	01000044 	movi	r4,1
   2d938:	00332240 	call	33224 <OSSemCreate>
   2d93c:	d0a71815 	stw	r2,-25504(gp)
   2d940:	01000044 	movi	r4,1
   2d944:	00332240 	call	33224 <OSSemCreate>
   2d948:	d0a71a15 	stw	r2,-25496(gp)
   2d94c:	d0a71304 	addi	r2,gp,-25524
   2d950:	e0bffc15 	stw	r2,-16(fp)
   2d954:	00800044 	movi	r2,1
   2d958:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   2d95c:	e0bffd0b 	ldhu	r2,-12(fp)
   2d960:	1009883a 	mov	r4,r2
   2d964:	00332240 	call	33224 <OSSemCreate>
   2d968:	1007883a 	mov	r3,r2
   2d96c:	e0bffc17 	ldw	r2,-16(fp)
   2d970:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2d974:	00358980 	call	35898 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2d978:	018000f4 	movhi	r6,3
   2d97c:	319fd204 	addi	r6,r6,32584
   2d980:	014000f4 	movhi	r5,3
   2d984:	295fd204 	addi	r5,r5,32584
   2d988:	010000f4 	movhi	r4,3
   2d98c:	211fd204 	addi	r4,r4,32584
   2d990:	0036cb80 	call	36cb8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2d994:	00368600 	call	36860 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2d998:	010000f4 	movhi	r4,3
   2d99c:	211a3004 	addi	r4,r4,26816
   2d9a0:	00378480 	call	37848 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2d9a4:	d0a71417 	ldw	r2,-25520(gp)
   2d9a8:	d0e71517 	ldw	r3,-25516(gp)
   2d9ac:	d1271617 	ldw	r4,-25512(gp)
   2d9b0:	200d883a 	mov	r6,r4
   2d9b4:	180b883a 	mov	r5,r3
   2d9b8:	1009883a 	mov	r4,r2
   2d9bc:	00202900 	call	20290 <main>
   2d9c0:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   2d9c4:	01000044 	movi	r4,1
   2d9c8:	002d4540 	call	2d454 <close>
  exit (result);
   2d9cc:	e13ffb17 	ldw	r4,-20(fp)
   2d9d0:	003785c0 	call	3785c <exit>

0002d9d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d9d4:	defffe04 	addi	sp,sp,-8
   2d9d8:	dfc00115 	stw	ra,4(sp)
   2d9dc:	df000015 	stw	fp,0(sp)
   2d9e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d9e4:	d0a00b17 	ldw	r2,-32724(gp)
   2d9e8:	10000326 	beq	r2,zero,2d9f8 <alt_get_errno+0x24>
   2d9ec:	d0a00b17 	ldw	r2,-32724(gp)
   2d9f0:	103ee83a 	callr	r2
   2d9f4:	00000106 	br	2d9fc <alt_get_errno+0x28>
   2d9f8:	d0a70f04 	addi	r2,gp,-25540
}
   2d9fc:	e037883a 	mov	sp,fp
   2da00:	dfc00117 	ldw	ra,4(sp)
   2da04:	df000017 	ldw	fp,0(sp)
   2da08:	dec00204 	addi	sp,sp,8
   2da0c:	f800283a 	ret

0002da10 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   2da10:	defff904 	addi	sp,sp,-28
   2da14:	dfc00615 	stw	ra,24(sp)
   2da18:	df000515 	stw	fp,20(sp)
   2da1c:	df000504 	addi	fp,sp,20
   2da20:	e13ffd15 	stw	r4,-12(fp)
   2da24:	e17ffe15 	stw	r5,-8(fp)
   2da28:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2da2c:	e0bffd17 	ldw	r2,-12(fp)
   2da30:	10000616 	blt	r2,zero,2da4c <read+0x3c>
   2da34:	e0bffd17 	ldw	r2,-12(fp)
   2da38:	10c00324 	muli	r3,r2,12
   2da3c:	00800134 	movhi	r2,4
   2da40:	10a25804 	addi	r2,r2,-30368
   2da44:	1885883a 	add	r2,r3,r2
   2da48:	00000106 	br	2da50 <read+0x40>
   2da4c:	0005883a 	mov	r2,zero
   2da50:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2da54:	e0bffb17 	ldw	r2,-20(fp)
   2da58:	10002226 	beq	r2,zero,2dae4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2da5c:	e0bffb17 	ldw	r2,-20(fp)
   2da60:	10800217 	ldw	r2,8(r2)
   2da64:	108000cc 	andi	r2,r2,3
   2da68:	10800060 	cmpeqi	r2,r2,1
   2da6c:	1000181e 	bne	r2,zero,2dad0 <read+0xc0>
        (fd->dev->read))
   2da70:	e0bffb17 	ldw	r2,-20(fp)
   2da74:	10800017 	ldw	r2,0(r2)
   2da78:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2da7c:	10001426 	beq	r2,zero,2dad0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2da80:	e0bffb17 	ldw	r2,-20(fp)
   2da84:	10800017 	ldw	r2,0(r2)
   2da88:	10800517 	ldw	r2,20(r2)
   2da8c:	e0ffff17 	ldw	r3,-4(fp)
   2da90:	180d883a 	mov	r6,r3
   2da94:	e17ffe17 	ldw	r5,-8(fp)
   2da98:	e13ffb17 	ldw	r4,-20(fp)
   2da9c:	103ee83a 	callr	r2
   2daa0:	e0bffc15 	stw	r2,-16(fp)
   2daa4:	e0bffc17 	ldw	r2,-16(fp)
   2daa8:	1000070e 	bge	r2,zero,2dac8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   2daac:	002d9d40 	call	2d9d4 <alt_get_errno>
   2dab0:	1007883a 	mov	r3,r2
   2dab4:	e0bffc17 	ldw	r2,-16(fp)
   2dab8:	0085c83a 	sub	r2,zero,r2
   2dabc:	18800015 	stw	r2,0(r3)
          return -1;
   2dac0:	00bfffc4 	movi	r2,-1
   2dac4:	00000c06 	br	2daf8 <read+0xe8>
        }
        return rval;
   2dac8:	e0bffc17 	ldw	r2,-16(fp)
   2dacc:	00000a06 	br	2daf8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2dad0:	002d9d40 	call	2d9d4 <alt_get_errno>
   2dad4:	1007883a 	mov	r3,r2
   2dad8:	00800344 	movi	r2,13
   2dadc:	18800015 	stw	r2,0(r3)
   2dae0:	00000406 	br	2daf4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   2dae4:	002d9d40 	call	2d9d4 <alt_get_errno>
   2dae8:	1007883a 	mov	r3,r2
   2daec:	00801444 	movi	r2,81
   2daf0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2daf4:	00bfffc4 	movi	r2,-1
}
   2daf8:	e037883a 	mov	sp,fp
   2dafc:	dfc00117 	ldw	ra,4(sp)
   2db00:	df000017 	ldw	fp,0(sp)
   2db04:	dec00204 	addi	sp,sp,8
   2db08:	f800283a 	ret

0002db0c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   2db0c:	defffe04 	addi	sp,sp,-8
   2db10:	df000115 	stw	fp,4(sp)
   2db14:	df000104 	addi	fp,sp,4
   2db18:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   2db1c:	e0bfff17 	ldw	r2,-4(fp)
   2db20:	108000d0 	cmplti	r2,r2,3
   2db24:	10000d1e 	bne	r2,zero,2db5c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   2db28:	00800134 	movhi	r2,4
   2db2c:	10a25804 	addi	r2,r2,-30368
   2db30:	e0ffff17 	ldw	r3,-4(fp)
   2db34:	18c00324 	muli	r3,r3,12
   2db38:	10c5883a 	add	r2,r2,r3
   2db3c:	10800204 	addi	r2,r2,8
   2db40:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   2db44:	00800134 	movhi	r2,4
   2db48:	10a25804 	addi	r2,r2,-30368
   2db4c:	e0ffff17 	ldw	r3,-4(fp)
   2db50:	18c00324 	muli	r3,r3,12
   2db54:	10c5883a 	add	r2,r2,r3
   2db58:	10000015 	stw	zero,0(r2)
  }
}
   2db5c:	0001883a 	nop
   2db60:	e037883a 	mov	sp,fp
   2db64:	df000017 	ldw	fp,0(sp)
   2db68:	dec00104 	addi	sp,sp,4
   2db6c:	f800283a 	ret

0002db70 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   2db70:	defff904 	addi	sp,sp,-28
   2db74:	df000615 	stw	fp,24(sp)
   2db78:	df000604 	addi	fp,sp,24
   2db7c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2db80:	0005303a 	rdctl	r2,status
   2db84:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2db88:	e0fffe17 	ldw	r3,-8(fp)
   2db8c:	00bfff84 	movi	r2,-2
   2db90:	1884703a 	and	r2,r3,r2
   2db94:	1001703a 	wrctl	status,r2
  
  return context;
   2db98:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   2db9c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2dba0:	d0a00c17 	ldw	r2,-32720(gp)
   2dba4:	10c000c4 	addi	r3,r2,3
   2dba8:	00bfff04 	movi	r2,-4
   2dbac:	1884703a 	and	r2,r3,r2
   2dbb0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   2dbb4:	d0e00c17 	ldw	r3,-32720(gp)
   2dbb8:	e0bfff17 	ldw	r2,-4(fp)
   2dbbc:	1887883a 	add	r3,r3,r2
   2dbc0:	00800134 	movhi	r2,4
   2dbc4:	10800004 	addi	r2,r2,0
   2dbc8:	10c0062e 	bgeu	r2,r3,2dbe4 <sbrk+0x74>
   2dbcc:	e0bffb17 	ldw	r2,-20(fp)
   2dbd0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2dbd4:	e0bffa17 	ldw	r2,-24(fp)
   2dbd8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   2dbdc:	00bfffc4 	movi	r2,-1
   2dbe0:	00000b06 	br	2dc10 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   2dbe4:	d0a00c17 	ldw	r2,-32720(gp)
   2dbe8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   2dbec:	d0e00c17 	ldw	r3,-32720(gp)
   2dbf0:	e0bfff17 	ldw	r2,-4(fp)
   2dbf4:	1885883a 	add	r2,r3,r2
   2dbf8:	d0a00c15 	stw	r2,-32720(gp)
   2dbfc:	e0bffb17 	ldw	r2,-20(fp)
   2dc00:	e0bffc15 	stw	r2,-16(fp)
   2dc04:	e0bffc17 	ldw	r2,-16(fp)
   2dc08:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   2dc0c:	e0bffd17 	ldw	r2,-12(fp)
} 
   2dc10:	e037883a 	mov	sp,fp
   2dc14:	df000017 	ldw	fp,0(sp)
   2dc18:	dec00104 	addi	sp,sp,4
   2dc1c:	f800283a 	ret

0002dc20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2dc20:	defffe04 	addi	sp,sp,-8
   2dc24:	dfc00115 	stw	ra,4(sp)
   2dc28:	df000015 	stw	fp,0(sp)
   2dc2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2dc30:	d0a00b17 	ldw	r2,-32724(gp)
   2dc34:	10000326 	beq	r2,zero,2dc44 <alt_get_errno+0x24>
   2dc38:	d0a00b17 	ldw	r2,-32724(gp)
   2dc3c:	103ee83a 	callr	r2
   2dc40:	00000106 	br	2dc48 <alt_get_errno+0x28>
   2dc44:	d0a70f04 	addi	r2,gp,-25540
}
   2dc48:	e037883a 	mov	sp,fp
   2dc4c:	dfc00117 	ldw	ra,4(sp)
   2dc50:	df000017 	ldw	fp,0(sp)
   2dc54:	dec00204 	addi	sp,sp,8
   2dc58:	f800283a 	ret

0002dc5c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2dc5c:	defff904 	addi	sp,sp,-28
   2dc60:	dfc00615 	stw	ra,24(sp)
   2dc64:	df000515 	stw	fp,20(sp)
   2dc68:	df000504 	addi	fp,sp,20
   2dc6c:	e13ffd15 	stw	r4,-12(fp)
   2dc70:	e17ffe15 	stw	r5,-8(fp)
   2dc74:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2dc78:	e0bffd17 	ldw	r2,-12(fp)
   2dc7c:	10000616 	blt	r2,zero,2dc98 <write+0x3c>
   2dc80:	e0bffd17 	ldw	r2,-12(fp)
   2dc84:	10c00324 	muli	r3,r2,12
   2dc88:	00800134 	movhi	r2,4
   2dc8c:	10a25804 	addi	r2,r2,-30368
   2dc90:	1885883a 	add	r2,r3,r2
   2dc94:	00000106 	br	2dc9c <write+0x40>
   2dc98:	0005883a 	mov	r2,zero
   2dc9c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2dca0:	e0bffb17 	ldw	r2,-20(fp)
   2dca4:	10002126 	beq	r2,zero,2dd2c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   2dca8:	e0bffb17 	ldw	r2,-20(fp)
   2dcac:	10800217 	ldw	r2,8(r2)
   2dcb0:	108000cc 	andi	r2,r2,3
   2dcb4:	10001826 	beq	r2,zero,2dd18 <write+0xbc>
   2dcb8:	e0bffb17 	ldw	r2,-20(fp)
   2dcbc:	10800017 	ldw	r2,0(r2)
   2dcc0:	10800617 	ldw	r2,24(r2)
   2dcc4:	10001426 	beq	r2,zero,2dd18 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2dcc8:	e0bffb17 	ldw	r2,-20(fp)
   2dccc:	10800017 	ldw	r2,0(r2)
   2dcd0:	10800617 	ldw	r2,24(r2)
   2dcd4:	e0ffff17 	ldw	r3,-4(fp)
   2dcd8:	180d883a 	mov	r6,r3
   2dcdc:	e17ffe17 	ldw	r5,-8(fp)
   2dce0:	e13ffb17 	ldw	r4,-20(fp)
   2dce4:	103ee83a 	callr	r2
   2dce8:	e0bffc15 	stw	r2,-16(fp)
   2dcec:	e0bffc17 	ldw	r2,-16(fp)
   2dcf0:	1000070e 	bge	r2,zero,2dd10 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   2dcf4:	002dc200 	call	2dc20 <alt_get_errno>
   2dcf8:	1007883a 	mov	r3,r2
   2dcfc:	e0bffc17 	ldw	r2,-16(fp)
   2dd00:	0085c83a 	sub	r2,zero,r2
   2dd04:	18800015 	stw	r2,0(r3)
        return -1;
   2dd08:	00bfffc4 	movi	r2,-1
   2dd0c:	00000c06 	br	2dd40 <write+0xe4>
      }
      return rval;
   2dd10:	e0bffc17 	ldw	r2,-16(fp)
   2dd14:	00000a06 	br	2dd40 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2dd18:	002dc200 	call	2dc20 <alt_get_errno>
   2dd1c:	1007883a 	mov	r3,r2
   2dd20:	00800344 	movi	r2,13
   2dd24:	18800015 	stw	r2,0(r3)
   2dd28:	00000406 	br	2dd3c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2dd2c:	002dc200 	call	2dc20 <alt_get_errno>
   2dd30:	1007883a 	mov	r3,r2
   2dd34:	00801444 	movi	r2,81
   2dd38:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2dd3c:	00bfffc4 	movi	r2,-1
}
   2dd40:	e037883a 	mov	sp,fp
   2dd44:	dfc00117 	ldw	ra,4(sp)
   2dd48:	df000017 	ldw	fp,0(sp)
   2dd4c:	dec00204 	addi	sp,sp,8
   2dd50:	f800283a 	ret

0002dd54 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   2dd54:	deffdf04 	addi	sp,sp,-132
   2dd58:	dfc02015 	stw	ra,128(sp)
   2dd5c:	df001f15 	stw	fp,124(sp)
   2dd60:	df001f04 	addi	fp,sp,124
   2dd64:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   2dd68:	e0bfe204 	addi	r2,fp,-120
   2dd6c:	100b883a 	mov	r5,r2
   2dd70:	01003fc4 	movi	r4,255
   2dd74:	00351ac0 	call	351ac <OSTaskQuery>
   2dd78:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   2dd7c:	e0bffe83 	ldbu	r2,-6(fp)
   2dd80:	10803fcc 	andi	r2,r2,255
   2dd84:	10001e1e 	bne	r2,zero,2de00 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
   2dd88:	e0bfee83 	ldbu	r2,-70(fp)
   2dd8c:	10803fcc 	andi	r2,r2,255
   2dd90:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   2dd94:	d0a71817 	ldw	r2,-25504(gp)
   2dd98:	e0fffd04 	addi	r3,fp,-12
   2dd9c:	180b883a 	mov	r5,r3
   2dda0:	1009883a 	mov	r4,r2
   2dda4:	00339c40 	call	339c4 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   2dda8:	e0bffe43 	ldbu	r2,-7(fp)
   2ddac:	10803fcc 	andi	r2,r2,255
   2ddb0:	10000726 	beq	r2,zero,2ddd0 <__env_lock+0x7c>
   2ddb4:	d0a00d17 	ldw	r2,-32716(gp)
   2ddb8:	e0ffe117 	ldw	r3,-124(fp)
   2ddbc:	1880041e 	bne	r3,r2,2ddd0 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
   2ddc0:	d0a71717 	ldw	r2,-25508(gp)
   2ddc4:	10800044 	addi	r2,r2,1
   2ddc8:	d0a71715 	stw	r2,-25508(gp)
   2ddcc:	00000a06 	br	2ddf8 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   2ddd0:	d0a71817 	ldw	r2,-25504(gp)
   2ddd4:	e0fffe84 	addi	r3,fp,-6
   2ddd8:	180d883a 	mov	r6,r3
   2dddc:	000b883a 	mov	r5,zero
   2dde0:	1009883a 	mov	r4,r2
   2dde4:	003353c0 	call	3353c <OSSemPend>
    locks  = 1;
   2dde8:	00800044 	movi	r2,1
   2ddec:	d0a71715 	stw	r2,-25508(gp)
    lockid = id;
   2ddf0:	e0bfe117 	ldw	r2,-124(fp)
   2ddf4:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   2ddf8:	0001883a 	nop
   2ddfc:	00000106 	br	2de04 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   2de00:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   2de04:	e037883a 	mov	sp,fp
   2de08:	dfc00117 	ldw	ra,4(sp)
   2de0c:	df000017 	ldw	fp,0(sp)
   2de10:	dec00204 	addi	sp,sp,8
   2de14:	f800283a 	ret

0002de18 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   2de18:	defffd04 	addi	sp,sp,-12
   2de1c:	dfc00215 	stw	ra,8(sp)
   2de20:	df000115 	stw	fp,4(sp)
   2de24:	df000104 	addi	fp,sp,4
   2de28:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   2de2c:	d0a71717 	ldw	r2,-25508(gp)
   2de30:	10000b26 	beq	r2,zero,2de60 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   2de34:	d0a71717 	ldw	r2,-25508(gp)
   2de38:	10bfffc4 	addi	r2,r2,-1
   2de3c:	d0a71715 	stw	r2,-25508(gp)
   2de40:	d0a71717 	ldw	r2,-25508(gp)
   2de44:	1000071e 	bne	r2,zero,2de64 <__env_unlock+0x4c>
  {
    lockid = -1;
   2de48:	00bfffc4 	movi	r2,-1
   2de4c:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
   2de50:	d0a71817 	ldw	r2,-25504(gp)
   2de54:	1009883a 	mov	r4,r2
   2de58:	00338b40 	call	338b4 <OSSemPost>
   2de5c:	00000106 	br	2de64 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
   2de60:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   2de64:	e037883a 	mov	sp,fp
   2de68:	dfc00117 	ldw	ra,4(sp)
   2de6c:	df000017 	ldw	fp,0(sp)
   2de70:	dec00204 	addi	sp,sp,8
   2de74:	f800283a 	ret

0002de78 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   2de78:	deffdb04 	addi	sp,sp,-148
   2de7c:	dfc02415 	stw	ra,144(sp)
   2de80:	df002315 	stw	fp,140(sp)
   2de84:	df002304 	addi	fp,sp,140
   2de88:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   2de8c:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   2de90:	d0a71b43 	ldbu	r2,-25491(gp)
   2de94:	10803fcc 	andi	r2,r2,255
   2de98:	10800060 	cmpeqi	r2,r2,1
   2de9c:	10003626 	beq	r2,zero,2df78 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   2dea0:	e0bfe204 	addi	r2,fp,-120
   2dea4:	100b883a 	mov	r5,r2
   2dea8:	01003fc4 	movi	r4,255
   2deac:	00351ac0 	call	351ac <OSTaskQuery>
   2deb0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   2deb4:	e0bffe83 	ldbu	r2,-6(fp)
   2deb8:	10803fcc 	andi	r2,r2,255
   2debc:	1000301e 	bne	r2,zero,2df80 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
   2dec0:	e0bfee83 	ldbu	r2,-70(fp)
   2dec4:	10803fcc 	andi	r2,r2,255
   2dec8:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   2decc:	d0a71a17 	ldw	r2,-25496(gp)
   2ded0:	e0fffd04 	addi	r3,fp,-12
   2ded4:	180b883a 	mov	r5,r3
   2ded8:	1009883a 	mov	r4,r2
   2dedc:	00339c40 	call	339c4 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2dee0:	0005303a 	rdctl	r2,status
   2dee4:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2dee8:	e0ffe117 	ldw	r3,-124(fp)
   2deec:	00bfff84 	movi	r2,-2
   2def0:	1884703a 	and	r2,r3,r2
   2def4:	1001703a 	wrctl	status,r2
  
  return context;
   2def8:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
   2defc:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   2df00:	e0bffd0b 	ldhu	r2,-12(fp)
   2df04:	10bfffcc 	andi	r2,r2,65535
   2df08:	10000b1e 	bne	r2,zero,2df38 <__malloc_lock+0xc0>
   2df0c:	d0a00e17 	ldw	r2,-32712(gp)
   2df10:	e0ffde17 	ldw	r3,-136(fp)
   2df14:	1880081e 	bne	r3,r2,2df38 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
   2df18:	d0a71917 	ldw	r2,-25500(gp)
   2df1c:	10800044 	addi	r2,r2,1
   2df20:	d0a71915 	stw	r2,-25500(gp)
   2df24:	e0bfdd17 	ldw	r2,-140(fp)
   2df28:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2df2c:	e0bfdf17 	ldw	r2,-132(fp)
   2df30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   2df34:	00000e06 	br	2df70 <__malloc_lock+0xf8>
   2df38:	e0bfdd17 	ldw	r2,-140(fp)
   2df3c:	e0bfe015 	stw	r2,-128(fp)
   2df40:	e0bfe017 	ldw	r2,-128(fp)
   2df44:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   2df48:	d0a71a17 	ldw	r2,-25496(gp)
   2df4c:	e0fffe84 	addi	r3,fp,-6
   2df50:	180d883a 	mov	r6,r3
   2df54:	000b883a 	mov	r5,zero
   2df58:	1009883a 	mov	r4,r2
   2df5c:	003353c0 	call	3353c <OSSemPend>
    locks  = 1;
   2df60:	00800044 	movi	r2,1
   2df64:	d0a71915 	stw	r2,-25500(gp)
    lockid = id;
   2df68:	e0bfde17 	ldw	r2,-136(fp)
   2df6c:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   2df70:	0001883a 	nop
   2df74:	00000306 	br	2df84 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
   2df78:	0001883a 	nop
   2df7c:	00000106 	br	2df84 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   2df80:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   2df84:	e037883a 	mov	sp,fp
   2df88:	dfc00117 	ldw	ra,4(sp)
   2df8c:	df000017 	ldw	fp,0(sp)
   2df90:	dec00204 	addi	sp,sp,8
   2df94:	f800283a 	ret

0002df98 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2df98:	defff804 	addi	sp,sp,-32
   2df9c:	dfc00715 	stw	ra,28(sp)
   2dfa0:	df000615 	stw	fp,24(sp)
   2dfa4:	df000604 	addi	fp,sp,24
   2dfa8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   2dfac:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   2dfb0:	d0a71b43 	ldbu	r2,-25491(gp)
   2dfb4:	10803fcc 	andi	r2,r2,255
   2dfb8:	10800060 	cmpeqi	r2,r2,1
   2dfbc:	10002326 	beq	r2,zero,2e04c <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2dfc0:	0005303a 	rdctl	r2,status
   2dfc4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2dfc8:	e0fffe17 	ldw	r3,-8(fp)
   2dfcc:	00bfff84 	movi	r2,-2
   2dfd0:	1884703a 	and	r2,r3,r2
   2dfd4:	1001703a 	wrctl	status,r2
  
  return context;
   2dfd8:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
   2dfdc:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   2dfe0:	d0a71917 	ldw	r2,-25500(gp)
   2dfe4:	1000051e 	bne	r2,zero,2dffc <__malloc_unlock+0x64>
   2dfe8:	e0bffa17 	ldw	r2,-24(fp)
   2dfec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2dff0:	e0bffb17 	ldw	r2,-20(fp)
   2dff4:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   2dff8:	00001506 	br	2e050 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   2dffc:	d0a71917 	ldw	r2,-25500(gp)
   2e000:	10bfffc4 	addi	r2,r2,-1
   2e004:	d0a71915 	stw	r2,-25500(gp)
   2e008:	d0a71917 	ldw	r2,-25500(gp)
   2e00c:	10000a1e 	bne	r2,zero,2e038 <__malloc_unlock+0xa0>
  {
    lockid = -1;
   2e010:	00bfffc4 	movi	r2,-1
   2e014:	d0a00e15 	stw	r2,-32712(gp)
   2e018:	e0bffa17 	ldw	r2,-24(fp)
   2e01c:	e0bffc15 	stw	r2,-16(fp)
   2e020:	e0bffc17 	ldw	r2,-16(fp)
   2e024:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   2e028:	d0a71a17 	ldw	r2,-25496(gp)
   2e02c:	1009883a 	mov	r4,r2
   2e030:	00338b40 	call	338b4 <OSSemPost>
   2e034:	00000606 	br	2e050 <__malloc_unlock+0xb8>
   2e038:	e0bffa17 	ldw	r2,-24(fp)
   2e03c:	e0bffd15 	stw	r2,-12(fp)
   2e040:	e0bffd17 	ldw	r2,-12(fp)
   2e044:	1001703a 	wrctl	status,r2
   2e048:	00000106 	br	2e050 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
   2e04c:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   2e050:	e037883a 	mov	sp,fp
   2e054:	dfc00117 	ldw	ra,4(sp)
   2e058:	df000017 	ldw	fp,0(sp)
   2e05c:	dec00204 	addi	sp,sp,8
   2e060:	f800283a 	ret

0002e064 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   2e064:	defff704 	addi	sp,sp,-36
   2e068:	dfc00815 	stw	ra,32(sp)
   2e06c:	df000715 	stw	fp,28(sp)
   2e070:	df000704 	addi	fp,sp,28
   2e074:	e13ffd15 	stw	r4,-12(fp)
   2e078:	e17ffe15 	stw	r5,-8(fp)
   2e07c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   2e080:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   2e084:	e0bfff17 	ldw	r2,-4(fp)
   2e088:	1000021e 	bne	r2,zero,2e094 <OSEventNameGet+0x30>
        return (0);
   2e08c:	0005883a 	mov	r2,zero
   2e090:	00003706 	br	2e170 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   2e094:	e0bffd17 	ldw	r2,-12(fp)
   2e098:	1000051e 	bne	r2,zero,2e0b0 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   2e09c:	e0bfff17 	ldw	r2,-4(fp)
   2e0a0:	00c00104 	movi	r3,4
   2e0a4:	10c00005 	stb	r3,0(r2)
        return (0);
   2e0a8:	0005883a 	mov	r2,zero
   2e0ac:	00003006 	br	2e170 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   2e0b0:	e0bffe17 	ldw	r2,-8(fp)
   2e0b4:	1000051e 	bne	r2,zero,2e0cc <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   2e0b8:	e0bfff17 	ldw	r2,-4(fp)
   2e0bc:	00c00304 	movi	r3,12
   2e0c0:	10c00005 	stb	r3,0(r2)
        return (0);
   2e0c4:	0005883a 	mov	r2,zero
   2e0c8:	00002906 	br	2e170 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   2e0cc:	d0a72903 	ldbu	r2,-25436(gp)
   2e0d0:	10803fcc 	andi	r2,r2,255
   2e0d4:	10000526 	beq	r2,zero,2e0ec <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   2e0d8:	e0bfff17 	ldw	r2,-4(fp)
   2e0dc:	00c00444 	movi	r3,17
   2e0e0:	10c00005 	stb	r3,0(r2)
        return (0);
   2e0e4:	0005883a 	mov	r2,zero
   2e0e8:	00002106 	br	2e170 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   2e0ec:	e0bffd17 	ldw	r2,-12(fp)
   2e0f0:	10800003 	ldbu	r2,0(r2)
   2e0f4:	10803fcc 	andi	r2,r2,255
   2e0f8:	10bfffc4 	addi	r2,r2,-1
   2e0fc:	10800128 	cmpgeui	r2,r2,4
   2e100:	10000526 	beq	r2,zero,2e118 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   2e104:	e0bfff17 	ldw	r2,-4(fp)
   2e108:	00c00044 	movi	r3,1
   2e10c:	10c00005 	stb	r3,0(r2)
             return (0);
   2e110:	0005883a 	mov	r2,zero
   2e114:	00001606 	br	2e170 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   2e118:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e11c:	0005303a 	rdctl	r2,status
   2e120:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e124:	e0fffb17 	ldw	r3,-20(fp)
   2e128:	00bfff84 	movi	r2,-2
   2e12c:	1884703a 	and	r2,r3,r2
   2e130:	1001703a 	wrctl	status,r2
  
  return context;
   2e134:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   2e138:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   2e13c:	e0bffd17 	ldw	r2,-12(fp)
   2e140:	10800384 	addi	r2,r2,14
   2e144:	100b883a 	mov	r5,r2
   2e148:	e13ffe17 	ldw	r4,-8(fp)
   2e14c:	002fae80 	call	2fae8 <OS_StrCopy>
   2e150:	e0bffa05 	stb	r2,-24(fp)
   2e154:	e0bff917 	ldw	r2,-28(fp)
   2e158:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e15c:	e0bffc17 	ldw	r2,-16(fp)
   2e160:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   2e164:	e0bfff17 	ldw	r2,-4(fp)
   2e168:	10000005 	stb	zero,0(r2)
    return (len);
   2e16c:	e0bffa03 	ldbu	r2,-24(fp)
}
   2e170:	e037883a 	mov	sp,fp
   2e174:	dfc00117 	ldw	ra,4(sp)
   2e178:	df000017 	ldw	fp,0(sp)
   2e17c:	dec00204 	addi	sp,sp,8
   2e180:	f800283a 	ret

0002e184 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   2e184:	defff604 	addi	sp,sp,-40
   2e188:	dfc00915 	stw	ra,36(sp)
   2e18c:	df000815 	stw	fp,32(sp)
   2e190:	df000804 	addi	fp,sp,32
   2e194:	e13ffd15 	stw	r4,-12(fp)
   2e198:	e17ffe15 	stw	r5,-8(fp)
   2e19c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   2e1a0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   2e1a4:	e0bfff17 	ldw	r2,-4(fp)
   2e1a8:	10004026 	beq	r2,zero,2e2ac <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   2e1ac:	e0bffd17 	ldw	r2,-12(fp)
   2e1b0:	1000041e 	bne	r2,zero,2e1c4 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   2e1b4:	e0bfff17 	ldw	r2,-4(fp)
   2e1b8:	00c00104 	movi	r3,4
   2e1bc:	10c00005 	stb	r3,0(r2)
        return;
   2e1c0:	00003b06 	br	2e2b0 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   2e1c4:	e0bffe17 	ldw	r2,-8(fp)
   2e1c8:	1000041e 	bne	r2,zero,2e1dc <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   2e1cc:	e0bfff17 	ldw	r2,-4(fp)
   2e1d0:	00c00304 	movi	r3,12
   2e1d4:	10c00005 	stb	r3,0(r2)
        return;
   2e1d8:	00003506 	br	2e2b0 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   2e1dc:	d0a72903 	ldbu	r2,-25436(gp)
   2e1e0:	10803fcc 	andi	r2,r2,255
   2e1e4:	10000426 	beq	r2,zero,2e1f8 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   2e1e8:	e0bfff17 	ldw	r2,-4(fp)
   2e1ec:	00c00484 	movi	r3,18
   2e1f0:	10c00005 	stb	r3,0(r2)
        return;
   2e1f4:	00002e06 	br	2e2b0 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
   2e1f8:	e0bffd17 	ldw	r2,-12(fp)
   2e1fc:	10800003 	ldbu	r2,0(r2)
   2e200:	10803fcc 	andi	r2,r2,255
   2e204:	10bfffc4 	addi	r2,r2,-1
   2e208:	10800128 	cmpgeui	r2,r2,4
   2e20c:	10000426 	beq	r2,zero,2e220 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   2e210:	e0bfff17 	ldw	r2,-4(fp)
   2e214:	00c00044 	movi	r3,1
   2e218:	10c00005 	stb	r3,0(r2)
             return;
   2e21c:	00002406 	br	2e2b0 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   2e220:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e224:	0005303a 	rdctl	r2,status
   2e228:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e22c:	e0fffc17 	ldw	r3,-16(fp)
   2e230:	00bfff84 	movi	r2,-2
   2e234:	1884703a 	and	r2,r3,r2
   2e238:	1001703a 	wrctl	status,r2
  
  return context;
   2e23c:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   2e240:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   2e244:	e13ffe17 	ldw	r4,-8(fp)
   2e248:	002fb5c0 	call	2fb5c <OS_StrLen>
   2e24c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   2e250:	e0bffa03 	ldbu	r2,-24(fp)
   2e254:	10800830 	cmpltui	r2,r2,32
   2e258:	1000081e 	bne	r2,zero,2e27c <OSEventNameSet+0xf8>
   2e25c:	e0bff817 	ldw	r2,-32(fp)
   2e260:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e264:	e0bff917 	ldw	r2,-28(fp)
   2e268:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   2e26c:	e0bfff17 	ldw	r2,-4(fp)
   2e270:	00c002c4 	movi	r3,11
   2e274:	10c00005 	stb	r3,0(r2)
        return;
   2e278:	00000d06 	br	2e2b0 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   2e27c:	e0bffd17 	ldw	r2,-12(fp)
   2e280:	10800384 	addi	r2,r2,14
   2e284:	e17ffe17 	ldw	r5,-8(fp)
   2e288:	1009883a 	mov	r4,r2
   2e28c:	002fae80 	call	2fae8 <OS_StrCopy>
   2e290:	e0bff817 	ldw	r2,-32(fp)
   2e294:	e0bffb15 	stw	r2,-20(fp)
   2e298:	e0bffb17 	ldw	r2,-20(fp)
   2e29c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   2e2a0:	e0bfff17 	ldw	r2,-4(fp)
   2e2a4:	10000005 	stb	zero,0(r2)
   2e2a8:	00000106 	br	2e2b0 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   2e2ac:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   2e2b0:	e037883a 	mov	sp,fp
   2e2b4:	dfc00117 	ldw	ra,4(sp)
   2e2b8:	df000017 	ldw	fp,0(sp)
   2e2bc:	dec00204 	addi	sp,sp,8
   2e2c0:	f800283a 	ret

0002e2c4 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   2e2c4:	deffed04 	addi	sp,sp,-76
   2e2c8:	dfc01215 	stw	ra,72(sp)
   2e2cc:	df001115 	stw	fp,68(sp)
   2e2d0:	df001104 	addi	fp,sp,68
   2e2d4:	e13ffc15 	stw	r4,-16(fp)
   2e2d8:	e17ffd15 	stw	r5,-12(fp)
   2e2dc:	e1bffe15 	stw	r6,-8(fp)
   2e2e0:	3805883a 	mov	r2,r7
   2e2e4:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   2e2e8:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   2e2ec:	e0800217 	ldw	r2,8(fp)
   2e2f0:	1000021e 	bne	r2,zero,2e2fc <OSEventPendMulti+0x38>
        return (0);
   2e2f4:	0005883a 	mov	r2,zero
   2e2f8:	00017106 	br	2e8c0 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   2e2fc:	e0bffc17 	ldw	r2,-16(fp)
   2e300:	1000051e 	bne	r2,zero,2e318 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   2e304:	e0800217 	ldw	r2,8(fp)
   2e308:	00c00104 	movi	r3,4
   2e30c:	10c00005 	stb	r3,0(r2)
        return (0);
   2e310:	0005883a 	mov	r2,zero
   2e314:	00016a06 	br	2e8c0 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   2e318:	e0bffd17 	ldw	r2,-12(fp)
   2e31c:	1000051e 	bne	r2,zero,2e334 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   2e320:	e0800217 	ldw	r2,8(fp)
   2e324:	00c00104 	movi	r3,4
   2e328:	10c00005 	stb	r3,0(r2)
        return (0);
   2e32c:	0005883a 	mov	r2,zero
   2e330:	00016306 	br	2e8c0 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   2e334:	e0bffe17 	ldw	r2,-8(fp)
   2e338:	1000051e 	bne	r2,zero,2e350 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   2e33c:	e0800217 	ldw	r2,8(fp)
   2e340:	00c00104 	movi	r3,4
   2e344:	10c00005 	stb	r3,0(r2)
        return (0);
   2e348:	0005883a 	mov	r2,zero
   2e34c:	00015c06 	br	2e8c0 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   2e350:	e0bffd17 	ldw	r2,-12(fp)
   2e354:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   2e358:	e0bffc17 	ldw	r2,-16(fp)
   2e35c:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   2e360:	e0bfef17 	ldw	r2,-68(fp)
   2e364:	10800017 	ldw	r2,0(r2)
   2e368:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   2e36c:	00001906 	br	2e3d4 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   2e370:	e0bff017 	ldw	r2,-64(fp)
   2e374:	10800003 	ldbu	r2,0(r2)
   2e378:	10803fcc 	andi	r2,r2,255
   2e37c:	10c000a0 	cmpeqi	r3,r2,2
   2e380:	1800091e 	bne	r3,zero,2e3a8 <OSEventPendMulti+0xe4>
   2e384:	10c000e0 	cmpeqi	r3,r2,3
   2e388:	1800091e 	bne	r3,zero,2e3b0 <OSEventPendMulti+0xec>
   2e38c:	10800060 	cmpeqi	r2,r2,1
   2e390:	1000091e 	bne	r2,zero,2e3b8 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   2e394:	e0800217 	ldw	r2,8(fp)
   2e398:	00c00044 	movi	r3,1
   2e39c:	10c00005 	stb	r3,0(r2)
                 return (0);
   2e3a0:	0005883a 	mov	r2,zero
   2e3a4:	00014606 	br	2e8c0 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   2e3a8:	0001883a 	nop
   2e3ac:	00000306 	br	2e3bc <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   2e3b0:	0001883a 	nop
   2e3b4:	00000106 	br	2e3bc <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   2e3b8:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   2e3bc:	e0bfef17 	ldw	r2,-68(fp)
   2e3c0:	10800104 	addi	r2,r2,4
   2e3c4:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   2e3c8:	e0bfef17 	ldw	r2,-68(fp)
   2e3cc:	10800017 	ldw	r2,0(r2)
   2e3d0:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   2e3d4:	e0bff017 	ldw	r2,-64(fp)
   2e3d8:	103fe51e 	bne	r2,zero,2e370 <_gp+0xfffec824>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   2e3dc:	d0a72903 	ldbu	r2,-25436(gp)
   2e3e0:	10803fcc 	andi	r2,r2,255
   2e3e4:	10000526 	beq	r2,zero,2e3fc <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   2e3e8:	e0800217 	ldw	r2,8(fp)
   2e3ec:	00c00084 	movi	r3,2
   2e3f0:	10c00005 	stb	r3,0(r2)
        return (0);
   2e3f4:	0005883a 	mov	r2,zero
   2e3f8:	00013106 	br	2e8c0 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   2e3fc:	d0a71b03 	ldbu	r2,-25492(gp)
   2e400:	10803fcc 	andi	r2,r2,255
   2e404:	10000526 	beq	r2,zero,2e41c <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   2e408:	e0800217 	ldw	r2,8(fp)
   2e40c:	00c00344 	movi	r3,13
   2e410:	10c00005 	stb	r3,0(r2)
        return (0);
   2e414:	0005883a 	mov	r2,zero
   2e418:	00012906 	br	2e8c0 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e41c:	0005303a 	rdctl	r2,status
   2e420:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e424:	e0fffb17 	ldw	r3,-20(fp)
   2e428:	00bfff84 	movi	r2,-2
   2e42c:	1884703a 	and	r2,r3,r2
   2e430:	1001703a 	wrctl	status,r2
  
  return context;
   2e434:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   2e438:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   2e43c:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   2e440:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   2e444:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   2e448:	e0bffc17 	ldw	r2,-16(fp)
   2e44c:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   2e450:	e0bfef17 	ldw	r2,-68(fp)
   2e454:	10800017 	ldw	r2,0(r2)
   2e458:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   2e45c:	00008106 	br	2e664 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   2e460:	e0bff017 	ldw	r2,-64(fp)
   2e464:	10800003 	ldbu	r2,0(r2)
   2e468:	10803fcc 	andi	r2,r2,255
   2e46c:	10c000a0 	cmpeqi	r3,r2,2
   2e470:	18003c1e 	bne	r3,zero,2e564 <OSEventPendMulti+0x2a0>
   2e474:	10c000e0 	cmpeqi	r3,r2,3
   2e478:	1800031e 	bne	r3,zero,2e488 <OSEventPendMulti+0x1c4>
   2e47c:	10800060 	cmpeqi	r2,r2,1
   2e480:	10001e1e 	bne	r2,zero,2e4fc <OSEventPendMulti+0x238>
   2e484:	00006606 	br	2e620 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   2e488:	e0bff017 	ldw	r2,-64(fp)
   2e48c:	1080020b 	ldhu	r2,8(r2)
   2e490:	10bfffcc 	andi	r2,r2,65535
   2e494:	10001526 	beq	r2,zero,2e4ec <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   2e498:	e0bff017 	ldw	r2,-64(fp)
   2e49c:	1080020b 	ldhu	r2,8(r2)
   2e4a0:	10bfffc4 	addi	r2,r2,-1
   2e4a4:	1007883a 	mov	r3,r2
   2e4a8:	e0bff017 	ldw	r2,-64(fp)
   2e4ac:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   2e4b0:	e0bffd17 	ldw	r2,-12(fp)
   2e4b4:	10c00104 	addi	r3,r2,4
   2e4b8:	e0fffd15 	stw	r3,-12(fp)
   2e4bc:	e0fff017 	ldw	r3,-64(fp)
   2e4c0:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   2e4c4:	00800044 	movi	r2,1
   2e4c8:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   2e4cc:	e0bffe17 	ldw	r2,-8(fp)
   2e4d0:	10c00104 	addi	r3,r2,4
   2e4d4:	e0fffe15 	stw	r3,-8(fp)
   2e4d8:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   2e4dc:	e0bff18b 	ldhu	r2,-58(fp)
   2e4e0:	10800044 	addi	r2,r2,1
   2e4e4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   2e4e8:	00005806 	br	2e64c <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   2e4ec:	e0bff203 	ldbu	r2,-56(fp)
   2e4f0:	10800054 	ori	r2,r2,1
   2e4f4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   2e4f8:	00005406 	br	2e64c <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   2e4fc:	e0bff017 	ldw	r2,-64(fp)
   2e500:	10800117 	ldw	r2,4(r2)
   2e504:	10001326 	beq	r2,zero,2e554 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   2e508:	e0bffe17 	ldw	r2,-8(fp)
   2e50c:	10c00104 	addi	r3,r2,4
   2e510:	e0fffe15 	stw	r3,-8(fp)
   2e514:	e0fff017 	ldw	r3,-64(fp)
   2e518:	18c00117 	ldw	r3,4(r3)
   2e51c:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   2e520:	e0bff017 	ldw	r2,-64(fp)
   2e524:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   2e528:	e0bffd17 	ldw	r2,-12(fp)
   2e52c:	10c00104 	addi	r3,r2,4
   2e530:	e0fffd15 	stw	r3,-12(fp)
   2e534:	e0fff017 	ldw	r3,-64(fp)
   2e538:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   2e53c:	00800044 	movi	r2,1
   2e540:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   2e544:	e0bff18b 	ldhu	r2,-58(fp)
   2e548:	10800044 	addi	r2,r2,1
   2e54c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   2e550:	00003e06 	br	2e64c <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   2e554:	e0bff203 	ldbu	r2,-56(fp)
   2e558:	10800094 	ori	r2,r2,2
   2e55c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   2e560:	00003a06 	br	2e64c <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   2e564:	e0bff017 	ldw	r2,-64(fp)
   2e568:	10800117 	ldw	r2,4(r2)
   2e56c:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   2e570:	e0bff517 	ldw	r2,-44(fp)
   2e574:	1080058b 	ldhu	r2,22(r2)
   2e578:	10bfffcc 	andi	r2,r2,65535
   2e57c:	10002426 	beq	r2,zero,2e610 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   2e580:	e0bffe17 	ldw	r2,-8(fp)
   2e584:	10c00104 	addi	r3,r2,4
   2e588:	e0fffe15 	stw	r3,-8(fp)
   2e58c:	e0fff517 	ldw	r3,-44(fp)
   2e590:	18c00417 	ldw	r3,16(r3)
   2e594:	19400104 	addi	r5,r3,4
   2e598:	e13ff517 	ldw	r4,-44(fp)
   2e59c:	21400415 	stw	r5,16(r4)
   2e5a0:	18c00017 	ldw	r3,0(r3)
   2e5a4:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   2e5a8:	e0bff517 	ldw	r2,-44(fp)
   2e5ac:	10c00417 	ldw	r3,16(r2)
   2e5b0:	e0bff517 	ldw	r2,-44(fp)
   2e5b4:	10800217 	ldw	r2,8(r2)
   2e5b8:	1880041e 	bne	r3,r2,2e5cc <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   2e5bc:	e0bff517 	ldw	r2,-44(fp)
   2e5c0:	10c00117 	ldw	r3,4(r2)
   2e5c4:	e0bff517 	ldw	r2,-44(fp)
   2e5c8:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   2e5cc:	e0bff517 	ldw	r2,-44(fp)
   2e5d0:	1080058b 	ldhu	r2,22(r2)
   2e5d4:	10bfffc4 	addi	r2,r2,-1
   2e5d8:	1007883a 	mov	r3,r2
   2e5dc:	e0bff517 	ldw	r2,-44(fp)
   2e5e0:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   2e5e4:	e0bffd17 	ldw	r2,-12(fp)
   2e5e8:	10c00104 	addi	r3,r2,4
   2e5ec:	e0fffd15 	stw	r3,-12(fp)
   2e5f0:	e0fff017 	ldw	r3,-64(fp)
   2e5f4:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   2e5f8:	00800044 	movi	r2,1
   2e5fc:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   2e600:	e0bff18b 	ldhu	r2,-58(fp)
   2e604:	10800044 	addi	r2,r2,1
   2e608:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   2e60c:	00000f06 	br	2e64c <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   2e610:	e0bff203 	ldbu	r2,-56(fp)
   2e614:	10800114 	ori	r2,r2,4
   2e618:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   2e61c:	00000b06 	br	2e64c <OSEventPendMulti+0x388>
   2e620:	e0bff317 	ldw	r2,-52(fp)
   2e624:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e628:	e0bff417 	ldw	r2,-48(fp)
   2e62c:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   2e630:	e0bffd17 	ldw	r2,-12(fp)
   2e634:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   2e638:	e0800217 	ldw	r2,8(fp)
   2e63c:	00c00044 	movi	r3,1
   2e640:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   2e644:	e0bff18b 	ldhu	r2,-58(fp)
   2e648:	00009d06 	br	2e8c0 <OSEventPendMulti+0x5fc>
        }
        pevents++;
   2e64c:	e0bfef17 	ldw	r2,-68(fp)
   2e650:	10800104 	addi	r2,r2,4
   2e654:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   2e658:	e0bfef17 	ldw	r2,-68(fp)
   2e65c:	10800017 	ldw	r2,0(r2)
   2e660:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   2e664:	e0bff017 	ldw	r2,-64(fp)
   2e668:	103f7d1e 	bne	r2,zero,2e460 <_gp+0xfffec914>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   2e66c:	e0bff103 	ldbu	r2,-60(fp)
   2e670:	10800058 	cmpnei	r2,r2,1
   2e674:	10000a1e 	bne	r2,zero,2e6a0 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   2e678:	e0bffd17 	ldw	r2,-12(fp)
   2e67c:	10000015 	stw	zero,0(r2)
   2e680:	e0bff317 	ldw	r2,-52(fp)
   2e684:	e0bff615 	stw	r2,-40(fp)
   2e688:	e0bff617 	ldw	r2,-40(fp)
   2e68c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   2e690:	e0800217 	ldw	r2,8(fp)
   2e694:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   2e698:	e0bff18b 	ldhu	r2,-58(fp)
   2e69c:	00008806 	br	2e8c0 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   2e6a0:	d0a72a17 	ldw	r2,-25432(gp)
   2e6a4:	d0e72a17 	ldw	r3,-25432(gp)
   2e6a8:	19000c03 	ldbu	r4,48(r3)
   2e6ac:	e0fff203 	ldbu	r3,-56(fp)
   2e6b0:	20c6b03a 	or	r3,r4,r3
   2e6b4:	1809883a 	mov	r4,r3
   2e6b8:	00ffe004 	movi	r3,-128
   2e6bc:	20c6b03a 	or	r3,r4,r3
   2e6c0:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   2e6c4:	d0a72a17 	ldw	r2,-25432(gp)
   2e6c8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   2e6cc:	d0a72a17 	ldw	r2,-25432(gp)
   2e6d0:	e0ffff0b 	ldhu	r3,-4(fp)
   2e6d4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   2e6d8:	e13ffc17 	ldw	r4,-16(fp)
   2e6dc:	002f2000 	call	2f200 <OS_EventTaskWaitMulti>
   2e6e0:	e0bff317 	ldw	r2,-52(fp)
   2e6e4:	e0bff915 	stw	r2,-28(fp)
   2e6e8:	e0bff917 	ldw	r2,-28(fp)
   2e6ec:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   2e6f0:	002f9a40 	call	2f9a4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e6f4:	0005303a 	rdctl	r2,status
   2e6f8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e6fc:	e0fff717 	ldw	r3,-36(fp)
   2e700:	00bfff84 	movi	r2,-2
   2e704:	1884703a 	and	r2,r3,r2
   2e708:	1001703a 	wrctl	status,r2
  
  return context;
   2e70c:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   2e710:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   2e714:	d0a72a17 	ldw	r2,-25432(gp)
   2e718:	10800c43 	ldbu	r2,49(r2)
   2e71c:	10803fcc 	andi	r2,r2,255
   2e720:	10000226 	beq	r2,zero,2e72c <OSEventPendMulti+0x468>
   2e724:	108000a0 	cmpeqi	r2,r2,2
   2e728:	10001826 	beq	r2,zero,2e78c <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   2e72c:	d0a72a17 	ldw	r2,-25432(gp)
   2e730:	10800717 	ldw	r2,28(r2)
   2e734:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   2e738:	e0bff017 	ldw	r2,-64(fp)
   2e73c:	10000b26 	beq	r2,zero,2e76c <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   2e740:	e0bffd17 	ldw	r2,-12(fp)
   2e744:	10c00104 	addi	r3,r2,4
   2e748:	e0fffd15 	stw	r3,-12(fp)
   2e74c:	e0fff017 	ldw	r3,-64(fp)
   2e750:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   2e754:	e0bffd17 	ldw	r2,-12(fp)
   2e758:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   2e75c:	e0bff18b 	ldhu	r2,-58(fp)
   2e760:	10800044 	addi	r2,r2,1
   2e764:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   2e768:	00000d06 	br	2e7a0 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   2e76c:	d0a72a17 	ldw	r2,-25432(gp)
   2e770:	00c00044 	movi	r3,1
   2e774:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   2e778:	d0a72a17 	ldw	r2,-25432(gp)
   2e77c:	e17ffc17 	ldw	r5,-16(fp)
   2e780:	1009883a 	mov	r4,r2
   2e784:	002f4080 	call	2f408 <OS_EventTaskRemoveMulti>
             }
			 break;
   2e788:	00000506 	br	2e7a0 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   2e78c:	d0a72a17 	ldw	r2,-25432(gp)
   2e790:	e17ffc17 	ldw	r5,-16(fp)
   2e794:	1009883a 	mov	r4,r2
   2e798:	002f4080 	call	2f408 <OS_EventTaskRemoveMulti>
             break;
   2e79c:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   2e7a0:	d0a72a17 	ldw	r2,-25432(gp)
   2e7a4:	10800c43 	ldbu	r2,49(r2)
   2e7a8:	10803fcc 	andi	r2,r2,255
   2e7ac:	10000326 	beq	r2,zero,2e7bc <OSEventPendMulti+0x4f8>
   2e7b0:	108000a0 	cmpeqi	r2,r2,2
   2e7b4:	1000231e 	bne	r2,zero,2e844 <OSEventPendMulti+0x580>
   2e7b8:	00002a06 	br	2e864 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   2e7bc:	e0bff017 	ldw	r2,-64(fp)
   2e7c0:	10800003 	ldbu	r2,0(r2)
   2e7c4:	10803fcc 	andi	r2,r2,255
   2e7c8:	0080100e 	bge	zero,r2,2e80c <OSEventPendMulti+0x548>
   2e7cc:	10c000d0 	cmplti	r3,r2,3
   2e7d0:	1800071e 	bne	r3,zero,2e7f0 <OSEventPendMulti+0x52c>
   2e7d4:	108000e0 	cmpeqi	r2,r2,3
   2e7d8:	10000c26 	beq	r2,zero,2e80c <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   2e7dc:	e0bffe17 	ldw	r2,-8(fp)
   2e7e0:	10c00104 	addi	r3,r2,4
   2e7e4:	e0fffe15 	stw	r3,-8(fp)
   2e7e8:	10000015 	stw	zero,0(r2)
                      break;
   2e7ec:	00001206 	br	2e838 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   2e7f0:	e0bffe17 	ldw	r2,-8(fp)
   2e7f4:	10c00104 	addi	r3,r2,4
   2e7f8:	e0fffe15 	stw	r3,-8(fp)
   2e7fc:	d0e72a17 	ldw	r3,-25432(gp)
   2e800:	18c00917 	ldw	r3,36(r3)
   2e804:	10c00015 	stw	r3,0(r2)
                      break;
   2e808:	00000b06 	br	2e838 <OSEventPendMulti+0x574>
   2e80c:	e0bff317 	ldw	r2,-52(fp)
   2e810:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e814:	e0bff817 	ldw	r2,-32(fp)
   2e818:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   2e81c:	e0bffd17 	ldw	r2,-12(fp)
   2e820:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   2e824:	e0800217 	ldw	r2,8(fp)
   2e828:	00c00044 	movi	r3,1
   2e82c:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   2e830:	e0bff18b 	ldhu	r2,-58(fp)
   2e834:	00002206 	br	2e8c0 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   2e838:	e0800217 	ldw	r2,8(fp)
   2e83c:	10000005 	stb	zero,0(r2)
             break;
   2e840:	00001006 	br	2e884 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   2e844:	e0bffe17 	ldw	r2,-8(fp)
   2e848:	10c00104 	addi	r3,r2,4
   2e84c:	e0fffe15 	stw	r3,-8(fp)
   2e850:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   2e854:	e0800217 	ldw	r2,8(fp)
   2e858:	00c00384 	movi	r3,14
   2e85c:	10c00005 	stb	r3,0(r2)
             break;
   2e860:	00000806 	br	2e884 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   2e864:	e0bffe17 	ldw	r2,-8(fp)
   2e868:	10c00104 	addi	r3,r2,4
   2e86c:	e0fffe15 	stw	r3,-8(fp)
   2e870:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   2e874:	e0800217 	ldw	r2,8(fp)
   2e878:	00c00284 	movi	r3,10
   2e87c:	10c00005 	stb	r3,0(r2)
             break;
   2e880:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   2e884:	d0a72a17 	ldw	r2,-25432(gp)
   2e888:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   2e88c:	d0a72a17 	ldw	r2,-25432(gp)
   2e890:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   2e894:	d0a72a17 	ldw	r2,-25432(gp)
   2e898:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   2e89c:	d0a72a17 	ldw	r2,-25432(gp)
   2e8a0:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   2e8a4:	d0a72a17 	ldw	r2,-25432(gp)
   2e8a8:	10000915 	stw	zero,36(r2)
   2e8ac:	e0bff317 	ldw	r2,-52(fp)
   2e8b0:	e0bffa15 	stw	r2,-24(fp)
   2e8b4:	e0bffa17 	ldw	r2,-24(fp)
   2e8b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   2e8bc:	e0bff18b 	ldhu	r2,-58(fp)
}
   2e8c0:	e037883a 	mov	sp,fp
   2e8c4:	dfc00117 	ldw	ra,4(sp)
   2e8c8:	df000017 	ldw	fp,0(sp)
   2e8cc:	dec00204 	addi	sp,sp,8
   2e8d0:	f800283a 	ret

0002e8d4 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   2e8d4:	defffe04 	addi	sp,sp,-8
   2e8d8:	dfc00115 	stw	ra,4(sp)
   2e8dc:	df000015 	stw	fp,0(sp)
   2e8e0:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   2e8e4:	00374240 	call	37424 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   2e8e8:	002f6500 	call	2f650 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   2e8ec:	002f6980 	call	2f698 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   2e8f0:	002f8040 	call	2f804 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   2e8f4:	002f5700 	call	2f570 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   2e8f8:	00316a40 	call	316a4 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   2e8fc:	0031fa40 	call	31fa4 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   2e900:	00330cc0 	call	330cc <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   2e904:	002f7040 	call	2f704 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   2e908:	002f7840 	call	2f784 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   2e90c:	00374440 	call	37444 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   2e910:	00300780 	call	30078 <OSDebugInit>
#endif
}
   2e914:	0001883a 	nop
   2e918:	e037883a 	mov	sp,fp
   2e91c:	dfc00117 	ldw	ra,4(sp)
   2e920:	df000017 	ldw	fp,0(sp)
   2e924:	dec00204 	addi	sp,sp,8
   2e928:	f800283a 	ret

0002e92c <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   2e92c:	deffff04 	addi	sp,sp,-4
   2e930:	df000015 	stw	fp,0(sp)
   2e934:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
   2e938:	d0a71b43 	ldbu	r2,-25491(gp)
   2e93c:	10803fcc 	andi	r2,r2,255
   2e940:	10800058 	cmpnei	r2,r2,1
   2e944:	1000071e 	bne	r2,zero,2e964 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
   2e948:	d0a72903 	ldbu	r2,-25436(gp)
   2e94c:	10803fcc 	andi	r2,r2,255
   2e950:	10803fe0 	cmpeqi	r2,r2,255
   2e954:	1000031e 	bne	r2,zero,2e964 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   2e958:	d0a72903 	ldbu	r2,-25436(gp)
   2e95c:	10800044 	addi	r2,r2,1
   2e960:	d0a72905 	stb	r2,-25436(gp)
        }
    }
}
   2e964:	0001883a 	nop
   2e968:	e037883a 	mov	sp,fp
   2e96c:	df000017 	ldw	fp,0(sp)
   2e970:	dec00104 	addi	sp,sp,4
   2e974:	f800283a 	ret

0002e978 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   2e978:	defffb04 	addi	sp,sp,-20
   2e97c:	dfc00415 	stw	ra,16(sp)
   2e980:	df000315 	stw	fp,12(sp)
   2e984:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   2e988:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   2e98c:	d0a71b43 	ldbu	r2,-25491(gp)
   2e990:	10803fcc 	andi	r2,r2,255
   2e994:	10800058 	cmpnei	r2,r2,1
   2e998:	10002f1e 	bne	r2,zero,2ea58 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e99c:	0005303a 	rdctl	r2,status
   2e9a0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e9a4:	e0ffff17 	ldw	r3,-4(fp)
   2e9a8:	00bfff84 	movi	r2,-2
   2e9ac:	1884703a 	and	r2,r3,r2
   2e9b0:	1001703a 	wrctl	status,r2
  
  return context;
   2e9b4:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   2e9b8:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   2e9bc:	d0a72903 	ldbu	r2,-25436(gp)
   2e9c0:	10803fcc 	andi	r2,r2,255
   2e9c4:	10000326 	beq	r2,zero,2e9d4 <OSIntExit+0x5c>
            OSIntNesting--;
   2e9c8:	d0a72903 	ldbu	r2,-25436(gp)
   2e9cc:	10bfffc4 	addi	r2,r2,-1
   2e9d0:	d0a72905 	stb	r2,-25436(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   2e9d4:	d0a72903 	ldbu	r2,-25436(gp)
   2e9d8:	10803fcc 	andi	r2,r2,255
   2e9dc:	10001a1e 	bne	r2,zero,2ea48 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   2e9e0:	d0a71b03 	ldbu	r2,-25492(gp)
   2e9e4:	10803fcc 	andi	r2,r2,255
   2e9e8:	1000171e 	bne	r2,zero,2ea48 <OSIntExit+0xd0>
                OS_SchedNew();
   2e9ec:	002fa740 	call	2fa74 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   2e9f0:	d0e71d03 	ldbu	r3,-25484(gp)
   2e9f4:	d0a71d43 	ldbu	r2,-25483(gp)
   2e9f8:	18c03fcc 	andi	r3,r3,255
   2e9fc:	10803fcc 	andi	r2,r2,255
   2ea00:	18801126 	beq	r3,r2,2ea48 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   2ea04:	d0a71d03 	ldbu	r2,-25484(gp)
   2ea08:	10c03fcc 	andi	r3,r2,255
   2ea0c:	00800134 	movhi	r2,4
   2ea10:	10ba8404 	addi	r2,r2,-5616
   2ea14:	18c7883a 	add	r3,r3,r3
   2ea18:	18c7883a 	add	r3,r3,r3
   2ea1c:	10c5883a 	add	r2,r2,r3
   2ea20:	10800017 	ldw	r2,0(r2)
   2ea24:	d0a72515 	stw	r2,-25452(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   2ea28:	d0a72517 	ldw	r2,-25452(gp)
   2ea2c:	10c00e17 	ldw	r3,56(r2)
   2ea30:	18c00044 	addi	r3,r3,1
   2ea34:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   2ea38:	d0a72017 	ldw	r2,-25472(gp)
   2ea3c:	10800044 	addi	r2,r2,1
   2ea40:	d0a72015 	stw	r2,-25472(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   2ea44:	00371500 	call	37150 <OSCtxSw>
   2ea48:	e0bffd17 	ldw	r2,-12(fp)
   2ea4c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ea50:	e0bffe17 	ldw	r2,-8(fp)
   2ea54:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   2ea58:	0001883a 	nop
   2ea5c:	e037883a 	mov	sp,fp
   2ea60:	dfc00117 	ldw	ra,4(sp)
   2ea64:	df000017 	ldw	fp,0(sp)
   2ea68:	dec00204 	addi	sp,sp,8
   2ea6c:	f800283a 	ret

0002ea70 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   2ea70:	defffc04 	addi	sp,sp,-16
   2ea74:	df000315 	stw	fp,12(sp)
   2ea78:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   2ea7c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   2ea80:	d0a71b43 	ldbu	r2,-25491(gp)
   2ea84:	10803fcc 	andi	r2,r2,255
   2ea88:	10800058 	cmpnei	r2,r2,1
   2ea8c:	1000161e 	bne	r2,zero,2eae8 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ea90:	0005303a 	rdctl	r2,status
   2ea94:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ea98:	e0ffff17 	ldw	r3,-4(fp)
   2ea9c:	00bfff84 	movi	r2,-2
   2eaa0:	1884703a 	and	r2,r3,r2
   2eaa4:	1001703a 	wrctl	status,r2
  
  return context;
   2eaa8:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   2eaac:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   2eab0:	d0a72903 	ldbu	r2,-25436(gp)
   2eab4:	10803fcc 	andi	r2,r2,255
   2eab8:	1000071e 	bne	r2,zero,2ead8 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   2eabc:	d0a71b03 	ldbu	r2,-25492(gp)
   2eac0:	10803fcc 	andi	r2,r2,255
   2eac4:	10803fe0 	cmpeqi	r2,r2,255
   2eac8:	1000031e 	bne	r2,zero,2ead8 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   2eacc:	d0a71b03 	ldbu	r2,-25492(gp)
   2ead0:	10800044 	addi	r2,r2,1
   2ead4:	d0a71b05 	stb	r2,-25492(gp)
   2ead8:	e0bffd17 	ldw	r2,-12(fp)
   2eadc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2eae0:	e0bffe17 	ldw	r2,-8(fp)
   2eae4:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   2eae8:	0001883a 	nop
   2eaec:	e037883a 	mov	sp,fp
   2eaf0:	df000017 	ldw	fp,0(sp)
   2eaf4:	dec00104 	addi	sp,sp,4
   2eaf8:	f800283a 	ret

0002eafc <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   2eafc:	defff804 	addi	sp,sp,-32
   2eb00:	dfc00715 	stw	ra,28(sp)
   2eb04:	df000615 	stw	fp,24(sp)
   2eb08:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   2eb0c:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   2eb10:	d0a71b43 	ldbu	r2,-25491(gp)
   2eb14:	10803fcc 	andi	r2,r2,255
   2eb18:	10800058 	cmpnei	r2,r2,1
   2eb1c:	1000281e 	bne	r2,zero,2ebc0 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2eb20:	0005303a 	rdctl	r2,status
   2eb24:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2eb28:	e0ffff17 	ldw	r3,-4(fp)
   2eb2c:	00bfff84 	movi	r2,-2
   2eb30:	1884703a 	and	r2,r3,r2
   2eb34:	1001703a 	wrctl	status,r2
  
  return context;
   2eb38:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   2eb3c:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   2eb40:	d0a71b03 	ldbu	r2,-25492(gp)
   2eb44:	10803fcc 	andi	r2,r2,255
   2eb48:	10001926 	beq	r2,zero,2ebb0 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   2eb4c:	d0a71b03 	ldbu	r2,-25492(gp)
   2eb50:	10bfffc4 	addi	r2,r2,-1
   2eb54:	d0a71b05 	stb	r2,-25492(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   2eb58:	d0a71b03 	ldbu	r2,-25492(gp)
   2eb5c:	10803fcc 	andi	r2,r2,255
   2eb60:	10000e1e 	bne	r2,zero,2eb9c <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   2eb64:	d0a72903 	ldbu	r2,-25436(gp)
   2eb68:	10803fcc 	andi	r2,r2,255
   2eb6c:	1000061e 	bne	r2,zero,2eb88 <OSSchedUnlock+0x8c>
   2eb70:	e0bffa17 	ldw	r2,-24(fp)
   2eb74:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2eb78:	e0bffb17 	ldw	r2,-20(fp)
   2eb7c:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   2eb80:	002f9a40 	call	2f9a4 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   2eb84:	00000e06 	br	2ebc0 <OSSchedUnlock+0xc4>
   2eb88:	e0bffa17 	ldw	r2,-24(fp)
   2eb8c:	e0bffc15 	stw	r2,-16(fp)
   2eb90:	e0bffc17 	ldw	r2,-16(fp)
   2eb94:	1001703a 	wrctl	status,r2
   2eb98:	00000906 	br	2ebc0 <OSSchedUnlock+0xc4>
   2eb9c:	e0bffa17 	ldw	r2,-24(fp)
   2eba0:	e0bffd15 	stw	r2,-12(fp)
   2eba4:	e0bffd17 	ldw	r2,-12(fp)
   2eba8:	1001703a 	wrctl	status,r2
   2ebac:	00000406 	br	2ebc0 <OSSchedUnlock+0xc4>
   2ebb0:	e0bffa17 	ldw	r2,-24(fp)
   2ebb4:	e0bffe15 	stw	r2,-8(fp)
   2ebb8:	e0bffe17 	ldw	r2,-8(fp)
   2ebbc:	1001703a 	wrctl	status,r2
   2ebc0:	0001883a 	nop
   2ebc4:	e037883a 	mov	sp,fp
   2ebc8:	dfc00117 	ldw	ra,4(sp)
   2ebcc:	df000017 	ldw	fp,0(sp)
   2ebd0:	dec00204 	addi	sp,sp,8
   2ebd4:	f800283a 	ret

0002ebd8 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   2ebd8:	defffe04 	addi	sp,sp,-8
   2ebdc:	dfc00115 	stw	ra,4(sp)
   2ebe0:	df000015 	stw	fp,0(sp)
   2ebe4:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   2ebe8:	d0a71b43 	ldbu	r2,-25491(gp)
   2ebec:	10803fcc 	andi	r2,r2,255
   2ebf0:	10000f1e 	bne	r2,zero,2ec30 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   2ebf4:	002fa740 	call	2fa74 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   2ebf8:	d0a71d03 	ldbu	r2,-25484(gp)
   2ebfc:	d0a71d45 	stb	r2,-25483(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   2ec00:	d0a71d03 	ldbu	r2,-25484(gp)
   2ec04:	10c03fcc 	andi	r3,r2,255
   2ec08:	00800134 	movhi	r2,4
   2ec0c:	10ba8404 	addi	r2,r2,-5616
   2ec10:	18c7883a 	add	r3,r3,r3
   2ec14:	18c7883a 	add	r3,r3,r3
   2ec18:	10c5883a 	add	r2,r2,r3
   2ec1c:	10800017 	ldw	r2,0(r2)
   2ec20:	d0a72515 	stw	r2,-25452(gp)
        OSTCBCur      = OSTCBHighRdy;
   2ec24:	d0a72517 	ldw	r2,-25452(gp)
   2ec28:	d0a72a15 	stw	r2,-25432(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   2ec2c:	00371dc0 	call	371dc <OSStartHighRdy>
    }
}
   2ec30:	0001883a 	nop
   2ec34:	e037883a 	mov	sp,fp
   2ec38:	dfc00117 	ldw	ra,4(sp)
   2ec3c:	df000017 	ldw	fp,0(sp)
   2ec40:	dec00204 	addi	sp,sp,8
   2ec44:	f800283a 	ret

0002ec48 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   2ec48:	defff904 	addi	sp,sp,-28
   2ec4c:	dfc00615 	stw	ra,24(sp)
   2ec50:	df000515 	stw	fp,20(sp)
   2ec54:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   2ec58:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   2ec5c:	01000084 	movi	r4,2
   2ec60:	00353400 	call	35340 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ec64:	0005303a 	rdctl	r2,status
   2ec68:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ec6c:	e0fffc17 	ldw	r3,-16(fp)
   2ec70:	00bfff84 	movi	r2,-2
   2ec74:	1884703a 	and	r2,r3,r2
   2ec78:	1001703a 	wrctl	status,r2
  
  return context;
   2ec7c:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   2ec80:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   2ec84:	d0271c15 	stw	zero,-25488(gp)
   2ec88:	e0bffb17 	ldw	r2,-20(fp)
   2ec8c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ec90:	e0bffd17 	ldw	r2,-12(fp)
   2ec94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   2ec98:	01000184 	movi	r4,6
   2ec9c:	00353400 	call	35340 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2eca0:	0005303a 	rdctl	r2,status
   2eca4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2eca8:	e0fffe17 	ldw	r3,-8(fp)
   2ecac:	00bfff84 	movi	r2,-2
   2ecb0:	1884703a 	and	r2,r3,r2
   2ecb4:	1001703a 	wrctl	status,r2
  
  return context;
   2ecb8:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   2ecbc:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   2ecc0:	d0a71c17 	ldw	r2,-25488(gp)
   2ecc4:	d0a72115 	stw	r2,-25468(gp)
    OSStatRdy    = OS_TRUE;
   2ecc8:	00800044 	movi	r2,1
   2eccc:	d0a72d05 	stb	r2,-25420(gp)
   2ecd0:	e0bffb17 	ldw	r2,-20(fp)
   2ecd4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ecd8:	e0bfff17 	ldw	r2,-4(fp)
   2ecdc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   2ece0:	0001883a 	nop
   2ece4:	e037883a 	mov	sp,fp
   2ece8:	dfc00117 	ldw	ra,4(sp)
   2ecec:	df000017 	ldw	fp,0(sp)
   2ecf0:	dec00204 	addi	sp,sp,8
   2ecf4:	f800283a 	ret

0002ecf8 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   2ecf8:	defff704 	addi	sp,sp,-36
   2ecfc:	dfc00815 	stw	ra,32(sp)
   2ed00:	df000715 	stw	fp,28(sp)
   2ed04:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   2ed08:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   2ed0c:	00374040 	call	37404 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ed10:	0005303a 	rdctl	r2,status
   2ed14:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ed18:	e0fffd17 	ldw	r3,-12(fp)
   2ed1c:	00bfff84 	movi	r2,-2
   2ed20:	1884703a 	and	r2,r3,r2
   2ed24:	1001703a 	wrctl	status,r2
  
  return context;
   2ed28:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   2ed2c:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   2ed30:	d0a72b17 	ldw	r2,-25428(gp)
   2ed34:	10800044 	addi	r2,r2,1
   2ed38:	d0a72b15 	stw	r2,-25428(gp)
   2ed3c:	e0bffb17 	ldw	r2,-20(fp)
   2ed40:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ed44:	e0bfff17 	ldw	r2,-4(fp)
   2ed48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   2ed4c:	d0a71b43 	ldbu	r2,-25491(gp)
   2ed50:	10803fcc 	andi	r2,r2,255
   2ed54:	10800058 	cmpnei	r2,r2,1
   2ed58:	10006a1e 	bne	r2,zero,2ef04 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   2ed5c:	d0a71f03 	ldbu	r2,-25476(gp)
   2ed60:	10803fcc 	andi	r2,r2,255
   2ed64:	10c00060 	cmpeqi	r3,r2,1
   2ed68:	1800061e 	bne	r3,zero,2ed84 <OSTimeTick+0x8c>
   2ed6c:	10c000a0 	cmpeqi	r3,r2,2
   2ed70:	1800061e 	bne	r3,zero,2ed8c <OSTimeTick+0x94>
   2ed74:	10000a1e 	bne	r2,zero,2eda0 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   2ed78:	00800044 	movi	r2,1
   2ed7c:	e0bffa05 	stb	r2,-24(fp)
                 break;
   2ed80:	00000b06 	br	2edb0 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   2ed84:	e03ffa05 	stb	zero,-24(fp)
                 break;
   2ed88:	00000906 	br	2edb0 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   2ed8c:	00800044 	movi	r2,1
   2ed90:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   2ed94:	00800044 	movi	r2,1
   2ed98:	d0a71f05 	stb	r2,-25476(gp)
                 break;
   2ed9c:	00000406 	br	2edb0 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   2eda0:	00800044 	movi	r2,1
   2eda4:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   2eda8:	d0271f05 	stb	zero,-25476(gp)
                 break;
   2edac:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   2edb0:	e0bffa03 	ldbu	r2,-24(fp)
   2edb4:	10005226 	beq	r2,zero,2ef00 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   2edb8:	d0a71e17 	ldw	r2,-25480(gp)
   2edbc:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   2edc0:	00004906 	br	2eee8 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2edc4:	0005303a 	rdctl	r2,status
   2edc8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2edcc:	e0fffc17 	ldw	r3,-16(fp)
   2edd0:	00bfff84 	movi	r2,-2
   2edd4:	1884703a 	and	r2,r3,r2
   2edd8:	1001703a 	wrctl	status,r2
  
  return context;
   2eddc:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
   2ede0:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   2ede4:	e0bff917 	ldw	r2,-28(fp)
   2ede8:	10800b8b 	ldhu	r2,46(r2)
   2edec:	10bfffcc 	andi	r2,r2,65535
   2edf0:	10003626 	beq	r2,zero,2eecc <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   2edf4:	e0bff917 	ldw	r2,-28(fp)
   2edf8:	10800b8b 	ldhu	r2,46(r2)
   2edfc:	10bfffc4 	addi	r2,r2,-1
   2ee00:	1007883a 	mov	r3,r2
   2ee04:	e0bff917 	ldw	r2,-28(fp)
   2ee08:	10c00b8d 	sth	r3,46(r2)
   2ee0c:	e0bff917 	ldw	r2,-28(fp)
   2ee10:	10800b8b 	ldhu	r2,46(r2)
   2ee14:	10bfffcc 	andi	r2,r2,65535
   2ee18:	10002c1e 	bne	r2,zero,2eecc <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   2ee1c:	e0bff917 	ldw	r2,-28(fp)
   2ee20:	10800c03 	ldbu	r2,48(r2)
   2ee24:	10803fcc 	andi	r2,r2,255
   2ee28:	10800dcc 	andi	r2,r2,55
   2ee2c:	10000b26 	beq	r2,zero,2ee5c <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   2ee30:	e0bff917 	ldw	r2,-28(fp)
   2ee34:	10c00c03 	ldbu	r3,48(r2)
   2ee38:	00bff204 	movi	r2,-56
   2ee3c:	1884703a 	and	r2,r3,r2
   2ee40:	1007883a 	mov	r3,r2
   2ee44:	e0bff917 	ldw	r2,-28(fp)
   2ee48:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   2ee4c:	e0bff917 	ldw	r2,-28(fp)
   2ee50:	00c00044 	movi	r3,1
   2ee54:	10c00c45 	stb	r3,49(r2)
   2ee58:	00000206 	br	2ee64 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   2ee5c:	e0bff917 	ldw	r2,-28(fp)
   2ee60:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   2ee64:	e0bff917 	ldw	r2,-28(fp)
   2ee68:	10800c03 	ldbu	r2,48(r2)
   2ee6c:	10803fcc 	andi	r2,r2,255
   2ee70:	1080020c 	andi	r2,r2,8
   2ee74:	1000151e 	bne	r2,zero,2eecc <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   2ee78:	e0bff917 	ldw	r2,-28(fp)
   2ee7c:	10c00d83 	ldbu	r3,54(r2)
   2ee80:	d0a72703 	ldbu	r2,-25444(gp)
   2ee84:	1884b03a 	or	r2,r3,r2
   2ee88:	d0a72705 	stb	r2,-25444(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   2ee8c:	e0bff917 	ldw	r2,-28(fp)
   2ee90:	10800d03 	ldbu	r2,52(r2)
   2ee94:	10c03fcc 	andi	r3,r2,255
   2ee98:	e0bff917 	ldw	r2,-28(fp)
   2ee9c:	10800d03 	ldbu	r2,52(r2)
   2eea0:	11003fcc 	andi	r4,r2,255
   2eea4:	d0a72744 	addi	r2,gp,-25443
   2eea8:	2085883a 	add	r2,r4,r2
   2eeac:	11000003 	ldbu	r4,0(r2)
   2eeb0:	e0bff917 	ldw	r2,-28(fp)
   2eeb4:	10800d43 	ldbu	r2,53(r2)
   2eeb8:	2084b03a 	or	r2,r4,r2
   2eebc:	1009883a 	mov	r4,r2
   2eec0:	d0a72744 	addi	r2,gp,-25443
   2eec4:	1885883a 	add	r2,r3,r2
   2eec8:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   2eecc:	e0bff917 	ldw	r2,-28(fp)
   2eed0:	10800517 	ldw	r2,20(r2)
   2eed4:	e0bff915 	stw	r2,-28(fp)
   2eed8:	e0bffb17 	ldw	r2,-20(fp)
   2eedc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2eee0:	e0bffe17 	ldw	r2,-8(fp)
   2eee4:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   2eee8:	e0bff917 	ldw	r2,-28(fp)
   2eeec:	10800c83 	ldbu	r2,50(r2)
   2eef0:	10803fcc 	andi	r2,r2,255
   2eef4:	10800518 	cmpnei	r2,r2,20
   2eef8:	103fb21e 	bne	r2,zero,2edc4 <_gp+0xfffed278>
   2eefc:	00000106 	br	2ef04 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
   2ef00:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   2ef04:	e037883a 	mov	sp,fp
   2ef08:	dfc00117 	ldw	ra,4(sp)
   2ef0c:	df000017 	ldw	fp,0(sp)
   2ef10:	dec00204 	addi	sp,sp,8
   2ef14:	f800283a 	ret

0002ef18 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   2ef18:	deffff04 	addi	sp,sp,-4
   2ef1c:	df000015 	stw	fp,0(sp)
   2ef20:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   2ef24:	00804784 	movi	r2,286
}
   2ef28:	e037883a 	mov	sp,fp
   2ef2c:	df000017 	ldw	fp,0(sp)
   2ef30:	dec00104 	addi	sp,sp,4
   2ef34:	f800283a 	ret

0002ef38 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   2ef38:	deffff04 	addi	sp,sp,-4
   2ef3c:	df000015 	stw	fp,0(sp)
   2ef40:	d839883a 	mov	fp,sp
}
   2ef44:	0001883a 	nop
   2ef48:	e037883a 	mov	sp,fp
   2ef4c:	df000017 	ldw	fp,0(sp)
   2ef50:	dec00104 	addi	sp,sp,4
   2ef54:	f800283a 	ret

0002ef58 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   2ef58:	defff804 	addi	sp,sp,-32
   2ef5c:	dfc00715 	stw	ra,28(sp)
   2ef60:	df000615 	stw	fp,24(sp)
   2ef64:	df000604 	addi	fp,sp,24
   2ef68:	e13ffc15 	stw	r4,-16(fp)
   2ef6c:	e17ffd15 	stw	r5,-12(fp)
   2ef70:	3007883a 	mov	r3,r6
   2ef74:	3805883a 	mov	r2,r7
   2ef78:	e0fffe05 	stb	r3,-8(fp)
   2ef7c:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   2ef80:	e0bffc17 	ldw	r2,-16(fp)
   2ef84:	10800283 	ldbu	r2,10(r2)
   2ef88:	10c03fcc 	andi	r3,r2,255
   2ef8c:	008000f4 	movhi	r2,3
   2ef90:	109fd704 	addi	r2,r2,32604
   2ef94:	10c5883a 	add	r2,r2,r3
   2ef98:	10800003 	ldbu	r2,0(r2)
   2ef9c:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   2efa0:	e0bffa03 	ldbu	r2,-24(fp)
   2efa4:	e0fffc17 	ldw	r3,-16(fp)
   2efa8:	1885883a 	add	r2,r3,r2
   2efac:	108002c4 	addi	r2,r2,11
   2efb0:	10800003 	ldbu	r2,0(r2)
   2efb4:	10c03fcc 	andi	r3,r2,255
   2efb8:	008000f4 	movhi	r2,3
   2efbc:	109fd704 	addi	r2,r2,32604
   2efc0:	10c5883a 	add	r2,r2,r3
   2efc4:	10800003 	ldbu	r2,0(r2)
   2efc8:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   2efcc:	e0bffa03 	ldbu	r2,-24(fp)
   2efd0:	100490fa 	slli	r2,r2,3
   2efd4:	1007883a 	mov	r3,r2
   2efd8:	e0bffa43 	ldbu	r2,-23(fp)
   2efdc:	1885883a 	add	r2,r3,r2
   2efe0:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   2efe4:	e0fffa83 	ldbu	r3,-22(fp)
   2efe8:	00800134 	movhi	r2,4
   2efec:	10ba8404 	addi	r2,r2,-5616
   2eff0:	18c7883a 	add	r3,r3,r3
   2eff4:	18c7883a 	add	r3,r3,r3
   2eff8:	10c5883a 	add	r2,r2,r3
   2effc:	10800017 	ldw	r2,0(r2)
   2f000:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   2f004:	e0bffb17 	ldw	r2,-20(fp)
   2f008:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   2f00c:	e0bffb17 	ldw	r2,-20(fp)
   2f010:	e0fffd17 	ldw	r3,-12(fp)
   2f014:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   2f018:	e0bffb17 	ldw	r2,-20(fp)
   2f01c:	10800c03 	ldbu	r2,48(r2)
   2f020:	1007883a 	mov	r3,r2
   2f024:	e0bffe03 	ldbu	r2,-8(fp)
   2f028:	0084303a 	nor	r2,zero,r2
   2f02c:	1884703a 	and	r2,r3,r2
   2f030:	1007883a 	mov	r3,r2
   2f034:	e0bffb17 	ldw	r2,-20(fp)
   2f038:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   2f03c:	e0bffb17 	ldw	r2,-20(fp)
   2f040:	e0ffff03 	ldbu	r3,-4(fp)
   2f044:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   2f048:	e0bffb17 	ldw	r2,-20(fp)
   2f04c:	10800c03 	ldbu	r2,48(r2)
   2f050:	10803fcc 	andi	r2,r2,255
   2f054:	1080020c 	andi	r2,r2,8
   2f058:	1000111e 	bne	r2,zero,2f0a0 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   2f05c:	e0bffb17 	ldw	r2,-20(fp)
   2f060:	10c00d83 	ldbu	r3,54(r2)
   2f064:	d0a72703 	ldbu	r2,-25444(gp)
   2f068:	1884b03a 	or	r2,r3,r2
   2f06c:	d0a72705 	stb	r2,-25444(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   2f070:	e0fffa03 	ldbu	r3,-24(fp)
   2f074:	e13ffa03 	ldbu	r4,-24(fp)
   2f078:	d0a72744 	addi	r2,gp,-25443
   2f07c:	2085883a 	add	r2,r4,r2
   2f080:	11000003 	ldbu	r4,0(r2)
   2f084:	e0bffb17 	ldw	r2,-20(fp)
   2f088:	10800d43 	ldbu	r2,53(r2)
   2f08c:	2084b03a 	or	r2,r4,r2
   2f090:	1009883a 	mov	r4,r2
   2f094:	d0a72744 	addi	r2,gp,-25443
   2f098:	1885883a 	add	r2,r3,r2
   2f09c:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   2f0a0:	e17ffc17 	ldw	r5,-16(fp)
   2f0a4:	e13ffb17 	ldw	r4,-20(fp)
   2f0a8:	002f3500 	call	2f350 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   2f0ac:	e0bffb17 	ldw	r2,-20(fp)
   2f0b0:	10800817 	ldw	r2,32(r2)
   2f0b4:	10000826 	beq	r2,zero,2f0d8 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   2f0b8:	e0bffb17 	ldw	r2,-20(fp)
   2f0bc:	10800817 	ldw	r2,32(r2)
   2f0c0:	100b883a 	mov	r5,r2
   2f0c4:	e13ffb17 	ldw	r4,-20(fp)
   2f0c8:	002f4080 	call	2f408 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   2f0cc:	e0bffb17 	ldw	r2,-20(fp)
   2f0d0:	e0fffc17 	ldw	r3,-16(fp)
   2f0d4:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   2f0d8:	e0bffa83 	ldbu	r2,-22(fp)
}
   2f0dc:	e037883a 	mov	sp,fp
   2f0e0:	dfc00117 	ldw	ra,4(sp)
   2f0e4:	df000017 	ldw	fp,0(sp)
   2f0e8:	dec00204 	addi	sp,sp,8
   2f0ec:	f800283a 	ret

0002f0f0 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   2f0f0:	defffd04 	addi	sp,sp,-12
   2f0f4:	df000215 	stw	fp,8(sp)
   2f0f8:	df000204 	addi	fp,sp,8
   2f0fc:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   2f100:	d0a72a17 	ldw	r2,-25432(gp)
   2f104:	e0ffff17 	ldw	r3,-4(fp)
   2f108:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   2f10c:	d0a72a17 	ldw	r2,-25432(gp)
   2f110:	10800d03 	ldbu	r2,52(r2)
   2f114:	10803fcc 	andi	r2,r2,255
   2f118:	d0e72a17 	ldw	r3,-25432(gp)
   2f11c:	18c00d03 	ldbu	r3,52(r3)
   2f120:	18c03fcc 	andi	r3,r3,255
   2f124:	e13fff17 	ldw	r4,-4(fp)
   2f128:	20c7883a 	add	r3,r4,r3
   2f12c:	18c002c4 	addi	r3,r3,11
   2f130:	19000003 	ldbu	r4,0(r3)
   2f134:	d0e72a17 	ldw	r3,-25432(gp)
   2f138:	18c00d43 	ldbu	r3,53(r3)
   2f13c:	20c6b03a 	or	r3,r4,r3
   2f140:	1809883a 	mov	r4,r3
   2f144:	e0ffff17 	ldw	r3,-4(fp)
   2f148:	1885883a 	add	r2,r3,r2
   2f14c:	108002c4 	addi	r2,r2,11
   2f150:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   2f154:	e0bfff17 	ldw	r2,-4(fp)
   2f158:	10c00283 	ldbu	r3,10(r2)
   2f15c:	d0a72a17 	ldw	r2,-25432(gp)
   2f160:	10800d83 	ldbu	r2,54(r2)
   2f164:	1884b03a 	or	r2,r3,r2
   2f168:	1007883a 	mov	r3,r2
   2f16c:	e0bfff17 	ldw	r2,-4(fp)
   2f170:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   2f174:	d0a72a17 	ldw	r2,-25432(gp)
   2f178:	10800d03 	ldbu	r2,52(r2)
   2f17c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   2f180:	e0fffe03 	ldbu	r3,-8(fp)
   2f184:	e13ffe03 	ldbu	r4,-8(fp)
   2f188:	d0a72744 	addi	r2,gp,-25443
   2f18c:	2085883a 	add	r2,r4,r2
   2f190:	10800003 	ldbu	r2,0(r2)
   2f194:	1009883a 	mov	r4,r2
   2f198:	d0a72a17 	ldw	r2,-25432(gp)
   2f19c:	10800d43 	ldbu	r2,53(r2)
   2f1a0:	0084303a 	nor	r2,zero,r2
   2f1a4:	2084703a 	and	r2,r4,r2
   2f1a8:	1009883a 	mov	r4,r2
   2f1ac:	d0a72744 	addi	r2,gp,-25443
   2f1b0:	1885883a 	add	r2,r3,r2
   2f1b4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   2f1b8:	e0fffe03 	ldbu	r3,-8(fp)
   2f1bc:	d0a72744 	addi	r2,gp,-25443
   2f1c0:	1885883a 	add	r2,r3,r2
   2f1c4:	10800003 	ldbu	r2,0(r2)
   2f1c8:	10803fcc 	andi	r2,r2,255
   2f1cc:	1000071e 	bne	r2,zero,2f1ec <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   2f1d0:	d0a72a17 	ldw	r2,-25432(gp)
   2f1d4:	10800d83 	ldbu	r2,54(r2)
   2f1d8:	0084303a 	nor	r2,zero,r2
   2f1dc:	1007883a 	mov	r3,r2
   2f1e0:	d0a72703 	ldbu	r2,-25444(gp)
   2f1e4:	1884703a 	and	r2,r3,r2
   2f1e8:	d0a72705 	stb	r2,-25444(gp)
    }
}
   2f1ec:	0001883a 	nop
   2f1f0:	e037883a 	mov	sp,fp
   2f1f4:	df000017 	ldw	fp,0(sp)
   2f1f8:	dec00104 	addi	sp,sp,4
   2f1fc:	f800283a 	ret

0002f200 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   2f200:	defffb04 	addi	sp,sp,-20
   2f204:	df000415 	stw	fp,16(sp)
   2f208:	df000404 	addi	fp,sp,16
   2f20c:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   2f210:	d0a72a17 	ldw	r2,-25432(gp)
   2f214:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   2f218:	d0a72a17 	ldw	r2,-25432(gp)
   2f21c:	e0ffff17 	ldw	r3,-4(fp)
   2f220:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   2f224:	e0bfff17 	ldw	r2,-4(fp)
   2f228:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   2f22c:	e0bffc17 	ldw	r2,-16(fp)
   2f230:	10800017 	ldw	r2,0(r2)
   2f234:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   2f238:	00002006 	br	2f2bc <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   2f23c:	d0a72a17 	ldw	r2,-25432(gp)
   2f240:	10800d03 	ldbu	r2,52(r2)
   2f244:	10803fcc 	andi	r2,r2,255
   2f248:	d0e72a17 	ldw	r3,-25432(gp)
   2f24c:	18c00d03 	ldbu	r3,52(r3)
   2f250:	18c03fcc 	andi	r3,r3,255
   2f254:	e13ffd17 	ldw	r4,-12(fp)
   2f258:	20c7883a 	add	r3,r4,r3
   2f25c:	18c002c4 	addi	r3,r3,11
   2f260:	19000003 	ldbu	r4,0(r3)
   2f264:	d0e72a17 	ldw	r3,-25432(gp)
   2f268:	18c00d43 	ldbu	r3,53(r3)
   2f26c:	20c6b03a 	or	r3,r4,r3
   2f270:	1809883a 	mov	r4,r3
   2f274:	e0fffd17 	ldw	r3,-12(fp)
   2f278:	1885883a 	add	r2,r3,r2
   2f27c:	108002c4 	addi	r2,r2,11
   2f280:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   2f284:	e0bffd17 	ldw	r2,-12(fp)
   2f288:	10c00283 	ldbu	r3,10(r2)
   2f28c:	d0a72a17 	ldw	r2,-25432(gp)
   2f290:	10800d83 	ldbu	r2,54(r2)
   2f294:	1884b03a 	or	r2,r3,r2
   2f298:	1007883a 	mov	r3,r2
   2f29c:	e0bffd17 	ldw	r2,-12(fp)
   2f2a0:	10c00285 	stb	r3,10(r2)
        pevents++;
   2f2a4:	e0bffc17 	ldw	r2,-16(fp)
   2f2a8:	10800104 	addi	r2,r2,4
   2f2ac:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   2f2b0:	e0bffc17 	ldw	r2,-16(fp)
   2f2b4:	10800017 	ldw	r2,0(r2)
   2f2b8:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   2f2bc:	e0bffd17 	ldw	r2,-12(fp)
   2f2c0:	103fde1e 	bne	r2,zero,2f23c <_gp+0xfffed6f0>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   2f2c4:	d0a72a17 	ldw	r2,-25432(gp)
   2f2c8:	10800d03 	ldbu	r2,52(r2)
   2f2cc:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   2f2d0:	e0fffe03 	ldbu	r3,-8(fp)
   2f2d4:	e13ffe03 	ldbu	r4,-8(fp)
   2f2d8:	d0a72744 	addi	r2,gp,-25443
   2f2dc:	2085883a 	add	r2,r4,r2
   2f2e0:	10800003 	ldbu	r2,0(r2)
   2f2e4:	1009883a 	mov	r4,r2
   2f2e8:	d0a72a17 	ldw	r2,-25432(gp)
   2f2ec:	10800d43 	ldbu	r2,53(r2)
   2f2f0:	0084303a 	nor	r2,zero,r2
   2f2f4:	2084703a 	and	r2,r4,r2
   2f2f8:	1009883a 	mov	r4,r2
   2f2fc:	d0a72744 	addi	r2,gp,-25443
   2f300:	1885883a 	add	r2,r3,r2
   2f304:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   2f308:	e0fffe03 	ldbu	r3,-8(fp)
   2f30c:	d0a72744 	addi	r2,gp,-25443
   2f310:	1885883a 	add	r2,r3,r2
   2f314:	10800003 	ldbu	r2,0(r2)
   2f318:	10803fcc 	andi	r2,r2,255
   2f31c:	1000071e 	bne	r2,zero,2f33c <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   2f320:	d0a72a17 	ldw	r2,-25432(gp)
   2f324:	10800d83 	ldbu	r2,54(r2)
   2f328:	0084303a 	nor	r2,zero,r2
   2f32c:	1007883a 	mov	r3,r2
   2f330:	d0a72703 	ldbu	r2,-25444(gp)
   2f334:	1884703a 	and	r2,r3,r2
   2f338:	d0a72705 	stb	r2,-25444(gp)
    }
}
   2f33c:	0001883a 	nop
   2f340:	e037883a 	mov	sp,fp
   2f344:	df000017 	ldw	fp,0(sp)
   2f348:	dec00104 	addi	sp,sp,4
   2f34c:	f800283a 	ret

0002f350 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   2f350:	defffc04 	addi	sp,sp,-16
   2f354:	df000315 	stw	fp,12(sp)
   2f358:	df000304 	addi	fp,sp,12
   2f35c:	e13ffe15 	stw	r4,-8(fp)
   2f360:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   2f364:	e0bffe17 	ldw	r2,-8(fp)
   2f368:	10800d03 	ldbu	r2,52(r2)
   2f36c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   2f370:	e0bffd03 	ldbu	r2,-12(fp)
   2f374:	e0fffd03 	ldbu	r3,-12(fp)
   2f378:	e13fff17 	ldw	r4,-4(fp)
   2f37c:	20c7883a 	add	r3,r4,r3
   2f380:	18c002c4 	addi	r3,r3,11
   2f384:	18c00003 	ldbu	r3,0(r3)
   2f388:	1809883a 	mov	r4,r3
   2f38c:	e0fffe17 	ldw	r3,-8(fp)
   2f390:	18c00d43 	ldbu	r3,53(r3)
   2f394:	00c6303a 	nor	r3,zero,r3
   2f398:	20c6703a 	and	r3,r4,r3
   2f39c:	1809883a 	mov	r4,r3
   2f3a0:	e0ffff17 	ldw	r3,-4(fp)
   2f3a4:	1885883a 	add	r2,r3,r2
   2f3a8:	108002c4 	addi	r2,r2,11
   2f3ac:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
   2f3b0:	e0bffd03 	ldbu	r2,-12(fp)
   2f3b4:	e0ffff17 	ldw	r3,-4(fp)
   2f3b8:	1885883a 	add	r2,r3,r2
   2f3bc:	108002c4 	addi	r2,r2,11
   2f3c0:	10800003 	ldbu	r2,0(r2)
   2f3c4:	10803fcc 	andi	r2,r2,255
   2f3c8:	10000a1e 	bne	r2,zero,2f3f4 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   2f3cc:	e0bfff17 	ldw	r2,-4(fp)
   2f3d0:	10800283 	ldbu	r2,10(r2)
   2f3d4:	1007883a 	mov	r3,r2
   2f3d8:	e0bffe17 	ldw	r2,-8(fp)
   2f3dc:	10800d83 	ldbu	r2,54(r2)
   2f3e0:	0084303a 	nor	r2,zero,r2
   2f3e4:	1884703a 	and	r2,r3,r2
   2f3e8:	1007883a 	mov	r3,r2
   2f3ec:	e0bfff17 	ldw	r2,-4(fp)
   2f3f0:	10c00285 	stb	r3,10(r2)
    }
}
   2f3f4:	0001883a 	nop
   2f3f8:	e037883a 	mov	sp,fp
   2f3fc:	df000017 	ldw	fp,0(sp)
   2f400:	dec00104 	addi	sp,sp,4
   2f404:	f800283a 	ret

0002f408 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   2f408:	defffa04 	addi	sp,sp,-24
   2f40c:	df000515 	stw	fp,20(sp)
   2f410:	df000504 	addi	fp,sp,20
   2f414:	e13ffe15 	stw	r4,-8(fp)
   2f418:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   2f41c:	e0bffe17 	ldw	r2,-8(fp)
   2f420:	10800d03 	ldbu	r2,52(r2)
   2f424:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   2f428:	e0bffe17 	ldw	r2,-8(fp)
   2f42c:	10800d83 	ldbu	r2,54(r2)
   2f430:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   2f434:	e0bffe17 	ldw	r2,-8(fp)
   2f438:	10800d43 	ldbu	r2,53(r2)
   2f43c:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   2f440:	e0bfff17 	ldw	r2,-4(fp)
   2f444:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   2f448:	e0bffb17 	ldw	r2,-20(fp)
   2f44c:	10800017 	ldw	r2,0(r2)
   2f450:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   2f454:	00002506 	br	2f4ec <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   2f458:	e0bffd03 	ldbu	r2,-12(fp)
   2f45c:	e0fffd03 	ldbu	r3,-12(fp)
   2f460:	e13ffc17 	ldw	r4,-16(fp)
   2f464:	20c7883a 	add	r3,r4,r3
   2f468:	18c002c4 	addi	r3,r3,11
   2f46c:	18c00003 	ldbu	r3,0(r3)
   2f470:	1809883a 	mov	r4,r3
   2f474:	e0fffd83 	ldbu	r3,-10(fp)
   2f478:	00c6303a 	nor	r3,zero,r3
   2f47c:	20c6703a 	and	r3,r4,r3
   2f480:	1809883a 	mov	r4,r3
   2f484:	e0fffc17 	ldw	r3,-16(fp)
   2f488:	1885883a 	add	r2,r3,r2
   2f48c:	108002c4 	addi	r2,r2,11
   2f490:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
   2f494:	e0bffd03 	ldbu	r2,-12(fp)
   2f498:	e0fffc17 	ldw	r3,-16(fp)
   2f49c:	1885883a 	add	r2,r3,r2
   2f4a0:	108002c4 	addi	r2,r2,11
   2f4a4:	10800003 	ldbu	r2,0(r2)
   2f4a8:	10803fcc 	andi	r2,r2,255
   2f4ac:	1000091e 	bne	r2,zero,2f4d4 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   2f4b0:	e0bffc17 	ldw	r2,-16(fp)
   2f4b4:	10800283 	ldbu	r2,10(r2)
   2f4b8:	1007883a 	mov	r3,r2
   2f4bc:	e0bffd43 	ldbu	r2,-11(fp)
   2f4c0:	0084303a 	nor	r2,zero,r2
   2f4c4:	1884703a 	and	r2,r3,r2
   2f4c8:	1007883a 	mov	r3,r2
   2f4cc:	e0bffc17 	ldw	r2,-16(fp)
   2f4d0:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   2f4d4:	e0bffb17 	ldw	r2,-20(fp)
   2f4d8:	10800104 	addi	r2,r2,4
   2f4dc:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   2f4e0:	e0bffb17 	ldw	r2,-20(fp)
   2f4e4:	10800017 	ldw	r2,0(r2)
   2f4e8:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   2f4ec:	e0bffc17 	ldw	r2,-16(fp)
   2f4f0:	103fd91e 	bne	r2,zero,2f458 <_gp+0xfffed90c>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   2f4f4:	0001883a 	nop
   2f4f8:	e037883a 	mov	sp,fp
   2f4fc:	df000017 	ldw	fp,0(sp)
   2f500:	dec00104 	addi	sp,sp,4
   2f504:	f800283a 	ret

0002f508 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   2f508:	defffc04 	addi	sp,sp,-16
   2f50c:	df000315 	stw	fp,12(sp)
   2f510:	df000304 	addi	fp,sp,12
   2f514:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   2f518:	e0bfff17 	ldw	r2,-4(fp)
   2f51c:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   2f520:	e0bfff17 	ldw	r2,-4(fp)
   2f524:	108002c4 	addi	r2,r2,11
   2f528:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   2f52c:	e03ffe05 	stb	zero,-8(fp)
   2f530:	00000706 	br	2f550 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   2f534:	e0bffd17 	ldw	r2,-12(fp)
   2f538:	10c00044 	addi	r3,r2,1
   2f53c:	e0fffd15 	stw	r3,-12(fp)
   2f540:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   2f544:	e0bffe03 	ldbu	r2,-8(fp)
   2f548:	10800044 	addi	r2,r2,1
   2f54c:	e0bffe05 	stb	r2,-8(fp)
   2f550:	e0bffe03 	ldbu	r2,-8(fp)
   2f554:	108000f0 	cmpltui	r2,r2,3
   2f558:	103ff61e 	bne	r2,zero,2f534 <_gp+0xfffed9e8>
        *ptbl++ = 0;
    }
}
   2f55c:	0001883a 	nop
   2f560:	e037883a 	mov	sp,fp
   2f564:	df000017 	ldw	fp,0(sp)
   2f568:	dec00104 	addi	sp,sp,4
   2f56c:	f800283a 	ret

0002f570 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   2f570:	defffb04 	addi	sp,sp,-20
   2f574:	dfc00415 	stw	ra,16(sp)
   2f578:	df000315 	stw	fp,12(sp)
   2f57c:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   2f580:	0142d004 	movi	r5,2880
   2f584:	01000134 	movhi	r4,4
   2f588:	21367004 	addi	r4,r4,-9792
   2f58c:	002f8e80 	call	2f8e8 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   2f590:	00800134 	movhi	r2,4
   2f594:	10b67004 	addi	r2,r2,-9792
   2f598:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   2f59c:	00800134 	movhi	r2,4
   2f5a0:	10b67c04 	addi	r2,r2,-9744
   2f5a4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   2f5a8:	e03ffd0d 	sth	zero,-12(fp)
   2f5ac:	00001306 	br	2f5fc <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   2f5b0:	e0bffe17 	ldw	r2,-8(fp)
   2f5b4:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   2f5b8:	e0bffe17 	ldw	r2,-8(fp)
   2f5bc:	e0ffff17 	ldw	r3,-4(fp)
   2f5c0:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   2f5c4:	e0bffe17 	ldw	r2,-8(fp)
   2f5c8:	00c00fc4 	movi	r3,63
   2f5cc:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   2f5d0:	e0bffe17 	ldw	r2,-8(fp)
   2f5d4:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   2f5d8:	e0bffe17 	ldw	r2,-8(fp)
   2f5dc:	10800c04 	addi	r2,r2,48
   2f5e0:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   2f5e4:	e0bfff17 	ldw	r2,-4(fp)
   2f5e8:	10800c04 	addi	r2,r2,48
   2f5ec:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   2f5f0:	e0bffd0b 	ldhu	r2,-12(fp)
   2f5f4:	10800044 	addi	r2,r2,1
   2f5f8:	e0bffd0d 	sth	r2,-12(fp)
   2f5fc:	e0bffd0b 	ldhu	r2,-12(fp)
   2f600:	10800ef0 	cmpltui	r2,r2,59
   2f604:	103fea1e 	bne	r2,zero,2f5b0 <_gp+0xfffeda64>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   2f608:	e0bffe17 	ldw	r2,-8(fp)
   2f60c:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   2f610:	e0bffe17 	ldw	r2,-8(fp)
   2f614:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   2f618:	e0bffe17 	ldw	r2,-8(fp)
   2f61c:	00c00fc4 	movi	r3,63
   2f620:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   2f624:	e0bffe17 	ldw	r2,-8(fp)
   2f628:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   2f62c:	00800134 	movhi	r2,4
   2f630:	10b67004 	addi	r2,r2,-9792
   2f634:	d0a72815 	stw	r2,-25440(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   2f638:	0001883a 	nop
   2f63c:	e037883a 	mov	sp,fp
   2f640:	dfc00117 	ldw	ra,4(sp)
   2f644:	df000017 	ldw	fp,0(sp)
   2f648:	dec00204 	addi	sp,sp,8
   2f64c:	f800283a 	ret

0002f650 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   2f650:	deffff04 	addi	sp,sp,-4
   2f654:	df000015 	stw	fp,0(sp)
   2f658:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   2f65c:	d0272b15 	stw	zero,-25428(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   2f660:	d0272905 	stb	zero,-25436(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   2f664:	d0271b05 	stb	zero,-25492(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   2f668:	d0272345 	stb	zero,-25459(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   2f66c:	d0271b45 	stb	zero,-25491(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   2f670:	d0272015 	stw	zero,-25472(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   2f674:	d0271c15 	stw	zero,-25488(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   2f678:	d0272e15 	stw	zero,-25416(gp)
    OSIdleCtrMax  = 0L;
   2f67c:	d0272115 	stw	zero,-25468(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   2f680:	d0272d05 	stb	zero,-25420(gp)
#endif
}
   2f684:	0001883a 	nop
   2f688:	e037883a 	mov	sp,fp
   2f68c:	df000017 	ldw	fp,0(sp)
   2f690:	dec00104 	addi	sp,sp,4
   2f694:	f800283a 	ret

0002f698 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   2f698:	defffd04 	addi	sp,sp,-12
   2f69c:	df000215 	stw	fp,8(sp)
   2f6a0:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   2f6a4:	d0272705 	stb	zero,-25444(gp)
    prdytbl       = &OSRdyTbl[0];
   2f6a8:	d0a72744 	addi	r2,gp,-25443
   2f6ac:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   2f6b0:	e03ffe05 	stb	zero,-8(fp)
   2f6b4:	00000706 	br	2f6d4 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   2f6b8:	e0bfff17 	ldw	r2,-4(fp)
   2f6bc:	10c00044 	addi	r3,r2,1
   2f6c0:	e0ffff15 	stw	r3,-4(fp)
   2f6c4:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   2f6c8:	e0bffe03 	ldbu	r2,-8(fp)
   2f6cc:	10800044 	addi	r2,r2,1
   2f6d0:	e0bffe05 	stb	r2,-8(fp)
   2f6d4:	e0bffe03 	ldbu	r2,-8(fp)
   2f6d8:	108000f0 	cmpltui	r2,r2,3
   2f6dc:	103ff61e 	bne	r2,zero,2f6b8 <_gp+0xfffedb6c>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   2f6e0:	d0271d45 	stb	zero,-25483(gp)
    OSPrioHighRdy = 0;
   2f6e4:	d0271d05 	stb	zero,-25484(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   2f6e8:	d0272515 	stw	zero,-25452(gp)
    OSTCBCur      = (OS_TCB *)0;
   2f6ec:	d0272a15 	stw	zero,-25432(gp)
}
   2f6f0:	0001883a 	nop
   2f6f4:	e037883a 	mov	sp,fp
   2f6f8:	df000017 	ldw	fp,0(sp)
   2f6fc:	dec00104 	addi	sp,sp,4
   2f700:	f800283a 	ret

0002f704 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   2f704:	defff804 	addi	sp,sp,-32
   2f708:	dfc00715 	stw	ra,28(sp)
   2f70c:	df000615 	stw	fp,24(sp)
   2f710:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   2f714:	008000c4 	movi	r2,3
   2f718:	d8800415 	stw	r2,16(sp)
   2f71c:	d8000315 	stw	zero,12(sp)
   2f720:	00808004 	movi	r2,512
   2f724:	d8800215 	stw	r2,8(sp)
   2f728:	00800134 	movhi	r2,4
   2f72c:	10b47004 	addi	r2,r2,-11840
   2f730:	d8800115 	stw	r2,4(sp)
   2f734:	00bfffd4 	movui	r2,65535
   2f738:	d8800015 	stw	r2,0(sp)
   2f73c:	01c00504 	movi	r7,20
   2f740:	01800134 	movhi	r6,4
   2f744:	31b66f04 	addi	r6,r6,-9796
   2f748:	000b883a 	mov	r5,zero
   2f74c:	010000f4 	movhi	r4,3
   2f750:	213eec04 	addi	r4,r4,-1104
   2f754:	00342700 	call	34270 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   2f758:	e1bfff04 	addi	r6,fp,-4
   2f75c:	01400134 	movhi	r5,4
   2f760:	29601704 	addi	r5,r5,-32676
   2f764:	01000504 	movi	r4,20
   2f768:	0034a800 	call	34a80 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   2f76c:	0001883a 	nop
   2f770:	e037883a 	mov	sp,fp
   2f774:	dfc00117 	ldw	ra,4(sp)
   2f778:	df000017 	ldw	fp,0(sp)
   2f77c:	dec00204 	addi	sp,sp,8
   2f780:	f800283a 	ret

0002f784 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   2f784:	defff804 	addi	sp,sp,-32
   2f788:	dfc00715 	stw	ra,28(sp)
   2f78c:	df000615 	stw	fp,24(sp)
   2f790:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   2f794:	008000c4 	movi	r2,3
   2f798:	d8800415 	stw	r2,16(sp)
   2f79c:	d8000315 	stw	zero,12(sp)
   2f7a0:	00808004 	movi	r2,512
   2f7a4:	d8800215 	stw	r2,8(sp)
   2f7a8:	00800134 	movhi	r2,4
   2f7ac:	10b1f804 	addi	r2,r2,-14368
   2f7b0:	d8800115 	stw	r2,4(sp)
   2f7b4:	00bfff94 	movui	r2,65534
   2f7b8:	d8800015 	stw	r2,0(sp)
   2f7bc:	01c004c4 	movi	r7,19
   2f7c0:	01800134 	movhi	r6,4
   2f7c4:	31b3f704 	addi	r6,r6,-12324
   2f7c8:	000b883a 	mov	r5,zero
   2f7cc:	010000f4 	movhi	r4,3
   2f7d0:	213f0304 	addi	r4,r4,-1012
   2f7d4:	00342700 	call	34270 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   2f7d8:	e1bfff04 	addi	r6,fp,-4
   2f7dc:	01400134 	movhi	r5,4
   2f7e0:	29601b04 	addi	r5,r5,-32660
   2f7e4:	010004c4 	movi	r4,19
   2f7e8:	0034a800 	call	34a80 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   2f7ec:	0001883a 	nop
   2f7f0:	e037883a 	mov	sp,fp
   2f7f4:	dfc00117 	ldw	ra,4(sp)
   2f7f8:	df000017 	ldw	fp,0(sp)
   2f7fc:	dec00204 	addi	sp,sp,8
   2f800:	f800283a 	ret

0002f804 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   2f804:	defffb04 	addi	sp,sp,-20
   2f808:	dfc00415 	stw	ra,16(sp)
   2f80c:	df000315 	stw	fp,12(sp)
   2f810:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   2f814:	01414404 	movi	r5,1296
   2f818:	01000134 	movhi	r4,4
   2f81c:	21394004 	addi	r4,r4,-6912
   2f820:	002f8e80 	call	2f8e8 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   2f824:	01401504 	movi	r5,84
   2f828:	01000134 	movhi	r4,4
   2f82c:	213a8404 	addi	r4,r4,-5616
   2f830:	002f8e80 	call	2f8e8 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   2f834:	00800134 	movhi	r2,4
   2f838:	10b94004 	addi	r2,r2,-6912
   2f83c:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   2f840:	00800134 	movhi	r2,4
   2f844:	10b95b04 	addi	r2,r2,-6804
   2f848:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   2f84c:	e03ffd05 	stb	zero,-12(fp)
   2f850:	00001106 	br	2f898 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   2f854:	e0bffe17 	ldw	r2,-8(fp)
   2f858:	e0ffff17 	ldw	r3,-4(fp)
   2f85c:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   2f860:	e0bffe17 	ldw	r2,-8(fp)
   2f864:	00c00fc4 	movi	r3,63
   2f868:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   2f86c:	e0bffe17 	ldw	r2,-8(fp)
   2f870:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   2f874:	e0bffe17 	ldw	r2,-8(fp)
   2f878:	10801b04 	addi	r2,r2,108
   2f87c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   2f880:	e0bfff17 	ldw	r2,-4(fp)
   2f884:	10801b04 	addi	r2,r2,108
   2f888:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   2f88c:	e0bffd03 	ldbu	r2,-12(fp)
   2f890:	10800044 	addi	r2,r2,1
   2f894:	e0bffd05 	stb	r2,-12(fp)
   2f898:	e0bffd03 	ldbu	r2,-12(fp)
   2f89c:	108002f0 	cmpltui	r2,r2,11
   2f8a0:	103fec1e 	bne	r2,zero,2f854 <_gp+0xfffedd08>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   2f8a4:	e0bffe17 	ldw	r2,-8(fp)
   2f8a8:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   2f8ac:	e0bffe17 	ldw	r2,-8(fp)
   2f8b0:	00c00fc4 	movi	r3,63
   2f8b4:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   2f8b8:	e0bffe17 	ldw	r2,-8(fp)
   2f8bc:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   2f8c0:	d0271e15 	stw	zero,-25480(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   2f8c4:	00800134 	movhi	r2,4
   2f8c8:	10b94004 	addi	r2,r2,-6912
   2f8cc:	d0a72215 	stw	r2,-25464(gp)
}
   2f8d0:	0001883a 	nop
   2f8d4:	e037883a 	mov	sp,fp
   2f8d8:	dfc00117 	ldw	ra,4(sp)
   2f8dc:	df000017 	ldw	fp,0(sp)
   2f8e0:	dec00204 	addi	sp,sp,8
   2f8e4:	f800283a 	ret

0002f8e8 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   2f8e8:	defffd04 	addi	sp,sp,-12
   2f8ec:	df000215 	stw	fp,8(sp)
   2f8f0:	df000204 	addi	fp,sp,8
   2f8f4:	e13ffe15 	stw	r4,-8(fp)
   2f8f8:	2805883a 	mov	r2,r5
   2f8fc:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   2f900:	00000706 	br	2f920 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   2f904:	e0bffe17 	ldw	r2,-8(fp)
   2f908:	10c00044 	addi	r3,r2,1
   2f90c:	e0fffe15 	stw	r3,-8(fp)
   2f910:	10000005 	stb	zero,0(r2)
        size--;
   2f914:	e0bfff0b 	ldhu	r2,-4(fp)
   2f918:	10bfffc4 	addi	r2,r2,-1
   2f91c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   2f920:	e0bfff0b 	ldhu	r2,-4(fp)
   2f924:	103ff71e 	bne	r2,zero,2f904 <_gp+0xfffeddb8>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   2f928:	0001883a 	nop
   2f92c:	e037883a 	mov	sp,fp
   2f930:	df000017 	ldw	fp,0(sp)
   2f934:	dec00104 	addi	sp,sp,4
   2f938:	f800283a 	ret

0002f93c <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   2f93c:	defffc04 	addi	sp,sp,-16
   2f940:	df000315 	stw	fp,12(sp)
   2f944:	df000304 	addi	fp,sp,12
   2f948:	e13ffd15 	stw	r4,-12(fp)
   2f94c:	e17ffe15 	stw	r5,-8(fp)
   2f950:	3005883a 	mov	r2,r6
   2f954:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   2f958:	00000b06 	br	2f988 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   2f95c:	e0bffd17 	ldw	r2,-12(fp)
   2f960:	10c00044 	addi	r3,r2,1
   2f964:	e0fffd15 	stw	r3,-12(fp)
   2f968:	e0fffe17 	ldw	r3,-8(fp)
   2f96c:	19000044 	addi	r4,r3,1
   2f970:	e13ffe15 	stw	r4,-8(fp)
   2f974:	18c00003 	ldbu	r3,0(r3)
   2f978:	10c00005 	stb	r3,0(r2)
        size--;
   2f97c:	e0bfff0b 	ldhu	r2,-4(fp)
   2f980:	10bfffc4 	addi	r2,r2,-1
   2f984:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   2f988:	e0bfff0b 	ldhu	r2,-4(fp)
   2f98c:	103ff31e 	bne	r2,zero,2f95c <_gp+0xfffede10>
        *pdest++ = *psrc++;
        size--;
    }
}
   2f990:	0001883a 	nop
   2f994:	e037883a 	mov	sp,fp
   2f998:	df000017 	ldw	fp,0(sp)
   2f99c:	dec00104 	addi	sp,sp,4
   2f9a0:	f800283a 	ret

0002f9a4 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   2f9a4:	defffb04 	addi	sp,sp,-20
   2f9a8:	dfc00415 	stw	ra,16(sp)
   2f9ac:	df000315 	stw	fp,12(sp)
   2f9b0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   2f9b4:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2f9b8:	0005303a 	rdctl	r2,status
   2f9bc:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f9c0:	e0ffff17 	ldw	r3,-4(fp)
   2f9c4:	00bfff84 	movi	r2,-2
   2f9c8:	1884703a 	and	r2,r3,r2
   2f9cc:	1001703a 	wrctl	status,r2
  
  return context;
   2f9d0:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
   2f9d4:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   2f9d8:	d0a72903 	ldbu	r2,-25436(gp)
   2f9dc:	10803fcc 	andi	r2,r2,255
   2f9e0:	10001a1e 	bne	r2,zero,2fa4c <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   2f9e4:	d0a71b03 	ldbu	r2,-25492(gp)
   2f9e8:	10803fcc 	andi	r2,r2,255
   2f9ec:	1000171e 	bne	r2,zero,2fa4c <OS_Sched+0xa8>
            OS_SchedNew();
   2f9f0:	002fa740 	call	2fa74 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   2f9f4:	d0e71d03 	ldbu	r3,-25484(gp)
   2f9f8:	d0a71d43 	ldbu	r2,-25483(gp)
   2f9fc:	18c03fcc 	andi	r3,r3,255
   2fa00:	10803fcc 	andi	r2,r2,255
   2fa04:	18801126 	beq	r3,r2,2fa4c <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   2fa08:	d0a71d03 	ldbu	r2,-25484(gp)
   2fa0c:	10c03fcc 	andi	r3,r2,255
   2fa10:	00800134 	movhi	r2,4
   2fa14:	10ba8404 	addi	r2,r2,-5616
   2fa18:	18c7883a 	add	r3,r3,r3
   2fa1c:	18c7883a 	add	r3,r3,r3
   2fa20:	10c5883a 	add	r2,r2,r3
   2fa24:	10800017 	ldw	r2,0(r2)
   2fa28:	d0a72515 	stw	r2,-25452(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   2fa2c:	d0a72517 	ldw	r2,-25452(gp)
   2fa30:	10c00e17 	ldw	r3,56(r2)
   2fa34:	18c00044 	addi	r3,r3,1
   2fa38:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   2fa3c:	d0a72017 	ldw	r2,-25472(gp)
   2fa40:	10800044 	addi	r2,r2,1
   2fa44:	d0a72015 	stw	r2,-25472(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   2fa48:	00371500 	call	37150 <OSCtxSw>
   2fa4c:	e0bffd17 	ldw	r2,-12(fp)
   2fa50:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2fa54:	e0bffe17 	ldw	r2,-8(fp)
   2fa58:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   2fa5c:	0001883a 	nop
   2fa60:	e037883a 	mov	sp,fp
   2fa64:	dfc00117 	ldw	ra,4(sp)
   2fa68:	df000017 	ldw	fp,0(sp)
   2fa6c:	dec00204 	addi	sp,sp,8
   2fa70:	f800283a 	ret

0002fa74 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   2fa74:	defffe04 	addi	sp,sp,-8
   2fa78:	df000115 	stw	fp,4(sp)
   2fa7c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   2fa80:	d0a72703 	ldbu	r2,-25444(gp)
   2fa84:	10c03fcc 	andi	r3,r2,255
   2fa88:	008000f4 	movhi	r2,3
   2fa8c:	109fd704 	addi	r2,r2,32604
   2fa90:	10c5883a 	add	r2,r2,r3
   2fa94:	10800003 	ldbu	r2,0(r2)
   2fa98:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   2fa9c:	e0bfff03 	ldbu	r2,-4(fp)
   2faa0:	100490fa 	slli	r2,r2,3
   2faa4:	1009883a 	mov	r4,r2
   2faa8:	e0ffff03 	ldbu	r3,-4(fp)
   2faac:	d0a72744 	addi	r2,gp,-25443
   2fab0:	1885883a 	add	r2,r3,r2
   2fab4:	10800003 	ldbu	r2,0(r2)
   2fab8:	10c03fcc 	andi	r3,r2,255
   2fabc:	008000f4 	movhi	r2,3
   2fac0:	109fd704 	addi	r2,r2,32604
   2fac4:	10c5883a 	add	r2,r2,r3
   2fac8:	10800003 	ldbu	r2,0(r2)
   2facc:	2085883a 	add	r2,r4,r2
   2fad0:	d0a71d05 	stb	r2,-25484(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   2fad4:	0001883a 	nop
   2fad8:	e037883a 	mov	sp,fp
   2fadc:	df000017 	ldw	fp,0(sp)
   2fae0:	dec00104 	addi	sp,sp,4
   2fae4:	f800283a 	ret

0002fae8 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   2fae8:	defffc04 	addi	sp,sp,-16
   2faec:	df000315 	stw	fp,12(sp)
   2faf0:	df000304 	addi	fp,sp,12
   2faf4:	e13ffe15 	stw	r4,-8(fp)
   2faf8:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   2fafc:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   2fb00:	00000b06 	br	2fb30 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   2fb04:	e0bffe17 	ldw	r2,-8(fp)
   2fb08:	10c00044 	addi	r3,r2,1
   2fb0c:	e0fffe15 	stw	r3,-8(fp)
   2fb10:	e0ffff17 	ldw	r3,-4(fp)
   2fb14:	19000044 	addi	r4,r3,1
   2fb18:	e13fff15 	stw	r4,-4(fp)
   2fb1c:	18c00003 	ldbu	r3,0(r3)
   2fb20:	10c00005 	stb	r3,0(r2)
        len++;
   2fb24:	e0bffd03 	ldbu	r2,-12(fp)
   2fb28:	10800044 	addi	r2,r2,1
   2fb2c:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   2fb30:	e0bfff17 	ldw	r2,-4(fp)
   2fb34:	10800003 	ldbu	r2,0(r2)
   2fb38:	10803fcc 	andi	r2,r2,255
   2fb3c:	103ff11e 	bne	r2,zero,2fb04 <_gp+0xfffedfb8>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   2fb40:	e0bffe17 	ldw	r2,-8(fp)
   2fb44:	10000005 	stb	zero,0(r2)
    return (len);
   2fb48:	e0bffd03 	ldbu	r2,-12(fp)
}
   2fb4c:	e037883a 	mov	sp,fp
   2fb50:	df000017 	ldw	fp,0(sp)
   2fb54:	dec00104 	addi	sp,sp,4
   2fb58:	f800283a 	ret

0002fb5c <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   2fb5c:	defffd04 	addi	sp,sp,-12
   2fb60:	df000215 	stw	fp,8(sp)
   2fb64:	df000204 	addi	fp,sp,8
   2fb68:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   2fb6c:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   2fb70:	00000606 	br	2fb8c <OS_StrLen+0x30>
        psrc++;
   2fb74:	e0bfff17 	ldw	r2,-4(fp)
   2fb78:	10800044 	addi	r2,r2,1
   2fb7c:	e0bfff15 	stw	r2,-4(fp)
        len++;
   2fb80:	e0bffe03 	ldbu	r2,-8(fp)
   2fb84:	10800044 	addi	r2,r2,1
   2fb88:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   2fb8c:	e0bfff17 	ldw	r2,-4(fp)
   2fb90:	10800003 	ldbu	r2,0(r2)
   2fb94:	10803fcc 	andi	r2,r2,255
   2fb98:	103ff61e 	bne	r2,zero,2fb74 <_gp+0xfffee028>
        psrc++;
        len++;
    }
    return (len);
   2fb9c:	e0bffe03 	ldbu	r2,-8(fp)
}
   2fba0:	e037883a 	mov	sp,fp
   2fba4:	df000017 	ldw	fp,0(sp)
   2fba8:	dec00104 	addi	sp,sp,4
   2fbac:	f800283a 	ret

0002fbb0 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   2fbb0:	defffa04 	addi	sp,sp,-24
   2fbb4:	dfc00515 	stw	ra,20(sp)
   2fbb8:	df000415 	stw	fp,16(sp)
   2fbbc:	df000404 	addi	fp,sp,16
   2fbc0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   2fbc4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2fbc8:	0005303a 	rdctl	r2,status
   2fbcc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2fbd0:	e0fffd17 	ldw	r3,-12(fp)
   2fbd4:	00bfff84 	movi	r2,-2
   2fbd8:	1884703a 	and	r2,r3,r2
   2fbdc:	1001703a 	wrctl	status,r2
  
  return context;
   2fbe0:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   2fbe4:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   2fbe8:	d0a71c17 	ldw	r2,-25488(gp)
   2fbec:	10800044 	addi	r2,r2,1
   2fbf0:	d0a71c15 	stw	r2,-25488(gp)
   2fbf4:	e0bffc17 	ldw	r2,-16(fp)
   2fbf8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2fbfc:	e0bffe17 	ldw	r2,-8(fp)
   2fc00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   2fc04:	00374640 	call	37464 <OSTaskIdleHook>
    }
   2fc08:	003fef06 	br	2fbc8 <_gp+0xfffee07c>

0002fc0c <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   2fc0c:	defffa04 	addi	sp,sp,-24
   2fc10:	dfc00515 	stw	ra,20(sp)
   2fc14:	df000415 	stw	fp,16(sp)
   2fc18:	df000404 	addi	fp,sp,16
   2fc1c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   2fc20:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   2fc24:	00000206 	br	2fc30 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   2fc28:	01000304 	movi	r4,12
   2fc2c:	00353400 	call	35340 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   2fc30:	d0a72d03 	ldbu	r2,-25420(gp)
   2fc34:	10803fcc 	andi	r2,r2,255
   2fc38:	103ffb26 	beq	r2,zero,2fc28 <_gp+0xfffee0dc>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   2fc3c:	d0a72117 	ldw	r2,-25468(gp)
   2fc40:	01401904 	movi	r5,100
   2fc44:	1009883a 	mov	r4,r2
   2fc48:	002acf40 	call	2acf4 <__udivsi3>
   2fc4c:	d0a72115 	stw	r2,-25468(gp)
    if (OSIdleCtrMax == 0L) {
   2fc50:	d0a72117 	ldw	r2,-25468(gp)
   2fc54:	1000031e 	bne	r2,zero,2fc64 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
   2fc58:	d0272305 	stb	zero,-25460(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   2fc5c:	01003fc4 	movi	r4,255
   2fc60:	0034fc80 	call	34fc8 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2fc64:	0005303a 	rdctl	r2,status
   2fc68:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2fc6c:	e0fffd17 	ldw	r3,-12(fp)
   2fc70:	00bfff84 	movi	r2,-2
   2fc74:	1884703a 	and	r2,r3,r2
   2fc78:	1001703a 	wrctl	status,r2
  
  return context;
   2fc7c:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   2fc80:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   2fc84:	d0a71c17 	ldw	r2,-25488(gp)
   2fc88:	d0a72e15 	stw	r2,-25416(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   2fc8c:	d0271c15 	stw	zero,-25488(gp)
   2fc90:	e0bffc17 	ldw	r2,-16(fp)
   2fc94:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2fc98:	e0bffe17 	ldw	r2,-8(fp)
   2fc9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   2fca0:	d0a72e17 	ldw	r2,-25416(gp)
   2fca4:	d0e72117 	ldw	r3,-25468(gp)
   2fca8:	180b883a 	mov	r5,r3
   2fcac:	1009883a 	mov	r4,r2
   2fcb0:	002acf40 	call	2acf4 <__udivsi3>
   2fcb4:	1007883a 	mov	r3,r2
   2fcb8:	00801904 	movi	r2,100
   2fcbc:	10c5c83a 	sub	r2,r2,r3
   2fcc0:	d0a72305 	stb	r2,-25460(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   2fcc4:	00373e40 	call	373e4 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   2fcc8:	002fcd80 	call	2fcd8 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   2fccc:	01000184 	movi	r4,6
   2fcd0:	00353400 	call	35340 <OSTimeDly>
    }
   2fcd4:	003fe306 	br	2fc64 <_gp+0xfffee118>

0002fcd8 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   2fcd8:	defffa04 	addi	sp,sp,-24
   2fcdc:	dfc00515 	stw	ra,20(sp)
   2fce0:	df000415 	stw	fp,16(sp)
   2fce4:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   2fce8:	e03ffc05 	stb	zero,-16(fp)
   2fcec:	00002406 	br	2fd80 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   2fcf0:	e0bffc03 	ldbu	r2,-16(fp)
   2fcf4:	e0fffe04 	addi	r3,fp,-8
   2fcf8:	180b883a 	mov	r5,r3
   2fcfc:	1009883a 	mov	r4,r2
   2fd00:	0034e080 	call	34e08 <OSTaskStkChk>
   2fd04:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   2fd08:	e0bffc43 	ldbu	r2,-15(fp)
   2fd0c:	1000191e 	bne	r2,zero,2fd74 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   2fd10:	e0fffc03 	ldbu	r3,-16(fp)
   2fd14:	00800134 	movhi	r2,4
   2fd18:	10ba8404 	addi	r2,r2,-5616
   2fd1c:	18c7883a 	add	r3,r3,r3
   2fd20:	18c7883a 	add	r3,r3,r3
   2fd24:	10c5883a 	add	r2,r2,r3
   2fd28:	10800017 	ldw	r2,0(r2)
   2fd2c:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   2fd30:	e0bffd17 	ldw	r2,-12(fp)
   2fd34:	10000f26 	beq	r2,zero,2fd74 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   2fd38:	e0bffd17 	ldw	r2,-12(fp)
   2fd3c:	10800060 	cmpeqi	r2,r2,1
   2fd40:	10000c1e 	bne	r2,zero,2fd74 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   2fd44:	e0bffd17 	ldw	r2,-12(fp)
   2fd48:	10c00217 	ldw	r3,8(r2)
   2fd4c:	e0bffd17 	ldw	r2,-12(fp)
   2fd50:	10800317 	ldw	r2,12(r2)
   2fd54:	1085883a 	add	r2,r2,r2
   2fd58:	1085883a 	add	r2,r2,r2
   2fd5c:	1887883a 	add	r3,r3,r2
   2fd60:	e0bffd17 	ldw	r2,-12(fp)
   2fd64:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   2fd68:	e0ffff17 	ldw	r3,-4(fp)
   2fd6c:	e0bffd17 	ldw	r2,-12(fp)
   2fd70:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   2fd74:	e0bffc03 	ldbu	r2,-16(fp)
   2fd78:	10800044 	addi	r2,r2,1
   2fd7c:	e0bffc05 	stb	r2,-16(fp)
   2fd80:	e0bffc03 	ldbu	r2,-16(fp)
   2fd84:	10800570 	cmpltui	r2,r2,21
   2fd88:	103fd91e 	bne	r2,zero,2fcf0 <_gp+0xfffee1a4>
#endif
                }
            }
        }
    }
}
   2fd8c:	0001883a 	nop
   2fd90:	e037883a 	mov	sp,fp
   2fd94:	dfc00117 	ldw	ra,4(sp)
   2fd98:	df000017 	ldw	fp,0(sp)
   2fd9c:	dec00204 	addi	sp,sp,8
   2fda0:	f800283a 	ret

0002fda4 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   2fda4:	defff204 	addi	sp,sp,-56
   2fda8:	dfc00d15 	stw	ra,52(sp)
   2fdac:	df000c15 	stw	fp,48(sp)
   2fdb0:	df000c04 	addi	fp,sp,48
   2fdb4:	e17ffc15 	stw	r5,-16(fp)
   2fdb8:	e1bffd15 	stw	r6,-12(fp)
   2fdbc:	3807883a 	mov	r3,r7
   2fdc0:	e0800417 	ldw	r2,16(fp)
   2fdc4:	e13ffb05 	stb	r4,-20(fp)
   2fdc8:	e0fffe0d 	sth	r3,-8(fp)
   2fdcc:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   2fdd0:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2fdd4:	0005303a 	rdctl	r2,status
   2fdd8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2fddc:	e0fffa17 	ldw	r3,-24(fp)
   2fde0:	00bfff84 	movi	r2,-2
   2fde4:	1884703a 	and	r2,r3,r2
   2fde8:	1001703a 	wrctl	status,r2
  
  return context;
   2fdec:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
   2fdf0:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   2fdf4:	d0a72217 	ldw	r2,-25464(gp)
   2fdf8:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
   2fdfc:	e0bff617 	ldw	r2,-40(fp)
   2fe00:	10009326 	beq	r2,zero,30050 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   2fe04:	e0bff617 	ldw	r2,-40(fp)
   2fe08:	10800517 	ldw	r2,20(r2)
   2fe0c:	d0a72215 	stw	r2,-25464(gp)
   2fe10:	e0bff417 	ldw	r2,-48(fp)
   2fe14:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2fe18:	e0bff817 	ldw	r2,-32(fp)
   2fe1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   2fe20:	e0bff617 	ldw	r2,-40(fp)
   2fe24:	e0fffc17 	ldw	r3,-16(fp)
   2fe28:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   2fe2c:	e0bff617 	ldw	r2,-40(fp)
   2fe30:	e0fffb03 	ldbu	r3,-20(fp)
   2fe34:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   2fe38:	e0bff617 	ldw	r2,-40(fp)
   2fe3c:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   2fe40:	e0bff617 	ldw	r2,-40(fp)
   2fe44:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   2fe48:	e0bff617 	ldw	r2,-40(fp)
   2fe4c:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   2fe50:	e0bff617 	ldw	r2,-40(fp)
   2fe54:	e0c00317 	ldw	r3,12(fp)
   2fe58:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   2fe5c:	e0bff617 	ldw	r2,-40(fp)
   2fe60:	e0c00217 	ldw	r3,8(fp)
   2fe64:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   2fe68:	e0bff617 	ldw	r2,-40(fp)
   2fe6c:	e0fffd17 	ldw	r3,-12(fp)
   2fe70:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   2fe74:	e0bff617 	ldw	r2,-40(fp)
   2fe78:	e0ffff0b 	ldhu	r3,-4(fp)
   2fe7c:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   2fe80:	e0bff617 	ldw	r2,-40(fp)
   2fe84:	e0fffe0b 	ldhu	r3,-8(fp)
   2fe88:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   2fe8c:	e0bff617 	ldw	r2,-40(fp)
   2fe90:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   2fe94:	e0bffb03 	ldbu	r2,-20(fp)
   2fe98:	1004d0fa 	srli	r2,r2,3
   2fe9c:	1007883a 	mov	r3,r2
   2fea0:	e0bff617 	ldw	r2,-40(fp)
   2fea4:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   2fea8:	e0bffb03 	ldbu	r2,-20(fp)
   2feac:	108001cc 	andi	r2,r2,7
   2feb0:	1007883a 	mov	r3,r2
   2feb4:	e0bff617 	ldw	r2,-40(fp)
   2feb8:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   2febc:	e0bff617 	ldw	r2,-40(fp)
   2fec0:	10800d03 	ldbu	r2,52(r2)
   2fec4:	10803fcc 	andi	r2,r2,255
   2fec8:	00c00044 	movi	r3,1
   2fecc:	1884983a 	sll	r2,r3,r2
   2fed0:	1007883a 	mov	r3,r2
   2fed4:	e0bff617 	ldw	r2,-40(fp)
   2fed8:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   2fedc:	e0bff617 	ldw	r2,-40(fp)
   2fee0:	10800cc3 	ldbu	r2,51(r2)
   2fee4:	10803fcc 	andi	r2,r2,255
   2fee8:	00c00044 	movi	r3,1
   2feec:	1884983a 	sll	r2,r3,r2
   2fef0:	1007883a 	mov	r3,r2
   2fef4:	e0bff617 	ldw	r2,-40(fp)
   2fef8:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   2fefc:	e0bff617 	ldw	r2,-40(fp)
   2ff00:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   2ff04:	e0bff617 	ldw	r2,-40(fp)
   2ff08:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   2ff0c:	e0bff617 	ldw	r2,-40(fp)
   2ff10:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   2ff14:	e0bff617 	ldw	r2,-40(fp)
   2ff18:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   2ff1c:	e0bff617 	ldw	r2,-40(fp)
   2ff20:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   2ff24:	e0bff617 	ldw	r2,-40(fp)
   2ff28:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   2ff2c:	e0bff617 	ldw	r2,-40(fp)
   2ff30:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   2ff34:	e0bff617 	ldw	r2,-40(fp)
   2ff38:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   2ff3c:	e0bff617 	ldw	r2,-40(fp)
   2ff40:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   2ff44:	e0bff617 	ldw	r2,-40(fp)
   2ff48:	00c00fc4 	movi	r3,63
   2ff4c:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   2ff50:	e0bff617 	ldw	r2,-40(fp)
   2ff54:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   2ff58:	e13ff617 	ldw	r4,-40(fp)
   2ff5c:	00374840 	call	37484 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   2ff60:	e13ff617 	ldw	r4,-40(fp)
   2ff64:	003737c0 	call	3737c <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ff68:	0005303a 	rdctl	r2,status
   2ff6c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ff70:	e0fff517 	ldw	r3,-44(fp)
   2ff74:	00bfff84 	movi	r2,-2
   2ff78:	1884703a 	and	r2,r3,r2
   2ff7c:	1001703a 	wrctl	status,r2
  
  return context;
   2ff80:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   2ff84:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   2ff88:	e0fffb03 	ldbu	r3,-20(fp)
   2ff8c:	00800134 	movhi	r2,4
   2ff90:	10ba8404 	addi	r2,r2,-5616
   2ff94:	18c7883a 	add	r3,r3,r3
   2ff98:	18c7883a 	add	r3,r3,r3
   2ff9c:	10c5883a 	add	r2,r2,r3
   2ffa0:	e0fff617 	ldw	r3,-40(fp)
   2ffa4:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   2ffa8:	d0e71e17 	ldw	r3,-25480(gp)
   2ffac:	e0bff617 	ldw	r2,-40(fp)
   2ffb0:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   2ffb4:	e0bff617 	ldw	r2,-40(fp)
   2ffb8:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   2ffbc:	d0a71e17 	ldw	r2,-25480(gp)
   2ffc0:	10000326 	beq	r2,zero,2ffd0 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   2ffc4:	d0a71e17 	ldw	r2,-25480(gp)
   2ffc8:	e0fff617 	ldw	r3,-40(fp)
   2ffcc:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   2ffd0:	e0bff617 	ldw	r2,-40(fp)
   2ffd4:	d0a71e15 	stw	r2,-25480(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   2ffd8:	e0bff617 	ldw	r2,-40(fp)
   2ffdc:	10c00d83 	ldbu	r3,54(r2)
   2ffe0:	d0a72703 	ldbu	r2,-25444(gp)
   2ffe4:	1884b03a 	or	r2,r3,r2
   2ffe8:	d0a72705 	stb	r2,-25444(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   2ffec:	e0bff617 	ldw	r2,-40(fp)
   2fff0:	10800d03 	ldbu	r2,52(r2)
   2fff4:	10c03fcc 	andi	r3,r2,255
   2fff8:	e0bff617 	ldw	r2,-40(fp)
   2fffc:	10800d03 	ldbu	r2,52(r2)
   30000:	11003fcc 	andi	r4,r2,255
   30004:	d0a72744 	addi	r2,gp,-25443
   30008:	2085883a 	add	r2,r4,r2
   3000c:	11000003 	ldbu	r4,0(r2)
   30010:	e0bff617 	ldw	r2,-40(fp)
   30014:	10800d43 	ldbu	r2,53(r2)
   30018:	2084b03a 	or	r2,r4,r2
   3001c:	1009883a 	mov	r4,r2
   30020:	d0a72744 	addi	r2,gp,-25443
   30024:	1885883a 	add	r2,r3,r2
   30028:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   3002c:	d0a72343 	ldbu	r2,-25459(gp)
   30030:	10800044 	addi	r2,r2,1
   30034:	d0a72345 	stb	r2,-25459(gp)
   30038:	e0bff417 	ldw	r2,-48(fp)
   3003c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30040:	e0bff717 	ldw	r2,-36(fp)
   30044:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   30048:	0005883a 	mov	r2,zero
   3004c:	00000506 	br	30064 <OS_TCBInit+0x2c0>
   30050:	e0bff417 	ldw	r2,-48(fp)
   30054:	e0bff915 	stw	r2,-28(fp)
   30058:	e0bff917 	ldw	r2,-28(fp)
   3005c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   30060:	00801084 	movi	r2,66
}
   30064:	e037883a 	mov	sp,fp
   30068:	dfc00117 	ldw	ra,4(sp)
   3006c:	df000017 	ldw	fp,0(sp)
   30070:	dec00204 	addi	sp,sp,8
   30074:	f800283a 	ret

00030078 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   30078:	defffe04 	addi	sp,sp,-8
   3007c:	df000115 	stw	fp,4(sp)
   30080:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   30084:	d0a00f04 	addi	r2,gp,-32708
   30088:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   3008c:	d0a01004 	addi	r2,gp,-32704
   30090:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   30094:	d0a01184 	addi	r2,gp,-32698
   30098:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   3009c:	d0a01204 	addi	r2,gp,-32696
   300a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   300a4:	d0a01104 	addi	r2,gp,-32700
   300a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   300ac:	d0a01284 	addi	r2,gp,-32694
   300b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   300b4:	d0a01304 	addi	r2,gp,-32692
   300b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   300bc:	d0a01384 	addi	r2,gp,-32690
   300c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   300c4:	d0a01404 	addi	r2,gp,-32688
   300c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   300cc:	d0a01484 	addi	r2,gp,-32686
   300d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   300d4:	d0a01504 	addi	r2,gp,-32684
   300d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   300dc:	d0a01584 	addi	r2,gp,-32682
   300e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   300e4:	d0a01604 	addi	r2,gp,-32680
   300e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   300ec:	d0a01684 	addi	r2,gp,-32678
   300f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   300f4:	d0a01704 	addi	r2,gp,-32676
   300f8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   300fc:	d0a01784 	addi	r2,gp,-32674
   30100:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   30104:	d0a01804 	addi	r2,gp,-32672
   30108:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   3010c:	d0a01884 	addi	r2,gp,-32670
   30110:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   30114:	d0a01904 	addi	r2,gp,-32668
   30118:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   3011c:	d0a01984 	addi	r2,gp,-32666
   30120:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   30124:	d0a01a04 	addi	r2,gp,-32664
   30128:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   3012c:	d0a01a84 	addi	r2,gp,-32662
   30130:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   30134:	d0a01b04 	addi	r2,gp,-32660
   30138:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   3013c:	d0a01b84 	addi	r2,gp,-32658
   30140:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   30144:	d0a01c04 	addi	r2,gp,-32656
   30148:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   3014c:	d0a01c84 	addi	r2,gp,-32654
   30150:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   30154:	d0a01d04 	addi	r2,gp,-32652
   30158:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   3015c:	d0a01d84 	addi	r2,gp,-32650
   30160:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   30164:	d0a01e04 	addi	r2,gp,-32648
   30168:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   3016c:	d0a01e84 	addi	r2,gp,-32646
   30170:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   30174:	d0a01f04 	addi	r2,gp,-32644
   30178:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   3017c:	d0a01f84 	addi	r2,gp,-32642
   30180:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   30184:	d0a02004 	addi	r2,gp,-32640
   30188:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   3018c:	d0a02084 	addi	r2,gp,-32638
   30190:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   30194:	d0a02104 	addi	r2,gp,-32636
   30198:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   3019c:	d0a02184 	addi	r2,gp,-32634
   301a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   301a4:	d0a02204 	addi	r2,gp,-32632
   301a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   301ac:	d0a02284 	addi	r2,gp,-32630
   301b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   301b4:	d0a02304 	addi	r2,gp,-32628
   301b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   301bc:	d0a02384 	addi	r2,gp,-32626
   301c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   301c4:	d0a02404 	addi	r2,gp,-32624
   301c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   301cc:	d0a02484 	addi	r2,gp,-32622
   301d0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   301d4:	d0a02504 	addi	r2,gp,-32620
   301d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   301dc:	d0a02584 	addi	r2,gp,-32618
   301e0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   301e4:	d0a02604 	addi	r2,gp,-32616
   301e8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   301ec:	d0a02b04 	addi	r2,gp,-32596
   301f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   301f4:	0001883a 	nop
   301f8:	e037883a 	mov	sp,fp
   301fc:	df000017 	ldw	fp,0(sp)
   30200:	dec00104 	addi	sp,sp,4
   30204:	f800283a 	ret

00030208 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   30208:	defff204 	addi	sp,sp,-56
   3020c:	df000d15 	stw	fp,52(sp)
   30210:	df000d04 	addi	fp,sp,52
   30214:	e13ffc15 	stw	r4,-16(fp)
   30218:	2807883a 	mov	r3,r5
   3021c:	3005883a 	mov	r2,r6
   30220:	e1ffff15 	stw	r7,-4(fp)
   30224:	e0fffd0d 	sth	r3,-12(fp)
   30228:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   3022c:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   30230:	e0bfff17 	ldw	r2,-4(fp)
   30234:	1000021e 	bne	r2,zero,30240 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   30238:	0005883a 	mov	r2,zero
   3023c:	0000b006 	br	30500 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   30240:	e0bffc17 	ldw	r2,-16(fp)
   30244:	1000051e 	bne	r2,zero,3025c <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   30248:	e0bfff17 	ldw	r2,-4(fp)
   3024c:	00c01b84 	movi	r3,110
   30250:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   30254:	0005883a 	mov	r2,zero
   30258:	0000a906 	br	30500 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   3025c:	e0bffc17 	ldw	r2,-16(fp)
   30260:	10800003 	ldbu	r2,0(r2)
   30264:	10803fcc 	andi	r2,r2,255
   30268:	10800160 	cmpeqi	r2,r2,5
   3026c:	1000051e 	bne	r2,zero,30284 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   30270:	e0bfff17 	ldw	r2,-4(fp)
   30274:	00c00044 	movi	r3,1
   30278:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   3027c:	0005883a 	mov	r2,zero
   30280:	00009f06 	br	30500 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   30284:	e0fffe03 	ldbu	r3,-8(fp)
   30288:	00bfe004 	movi	r2,-128
   3028c:	1884703a 	and	r2,r3,r2
   30290:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   30294:	e0bff503 	ldbu	r2,-44(fp)
   30298:	10000626 	beq	r2,zero,302b4 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   3029c:	e0bffe03 	ldbu	r2,-8(fp)
   302a0:	10801fcc 	andi	r2,r2,127
   302a4:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   302a8:	00800044 	movi	r2,1
   302ac:	e0bff385 	stb	r2,-50(fp)
   302b0:	00000106 	br	302b8 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   302b4:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   302b8:	e0bfff17 	ldw	r2,-4(fp)
   302bc:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   302c0:	0005303a 	rdctl	r2,status
   302c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   302c8:	e0fffb17 	ldw	r3,-20(fp)
   302cc:	00bfff84 	movi	r2,-2
   302d0:	1884703a 	and	r2,r3,r2
   302d4:	1001703a 	wrctl	status,r2
  
  return context;
   302d8:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   302dc:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   302e0:	e0bffe03 	ldbu	r2,-8(fp)
   302e4:	10c00060 	cmpeqi	r3,r2,1
   302e8:	18005f1e 	bne	r3,zero,30468 <OSFlagAccept+0x260>
   302ec:	10c00088 	cmpgei	r3,r2,2
   302f0:	1800021e 	bne	r3,zero,302fc <OSFlagAccept+0xf4>
   302f4:	10003f26 	beq	r2,zero,303f4 <OSFlagAccept+0x1ec>
   302f8:	00007706 	br	304d8 <OSFlagAccept+0x2d0>
   302fc:	10c000a0 	cmpeqi	r3,r2,2
   30300:	1800031e 	bne	r3,zero,30310 <OSFlagAccept+0x108>
   30304:	108000e0 	cmpeqi	r2,r2,3
   30308:	10001e1e 	bne	r2,zero,30384 <OSFlagAccept+0x17c>
   3030c:	00007206 	br	304d8 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   30310:	e0bffc17 	ldw	r2,-16(fp)
   30314:	10c0020b 	ldhu	r3,8(r2)
   30318:	e0bffd0b 	ldhu	r2,-12(fp)
   3031c:	1884703a 	and	r2,r3,r2
   30320:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   30324:	e0fff30b 	ldhu	r3,-52(fp)
   30328:	e0bffd0b 	ldhu	r2,-12(fp)
   3032c:	18800d1e 	bne	r3,r2,30364 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   30330:	e0bff383 	ldbu	r2,-50(fp)
   30334:	10800058 	cmpnei	r2,r2,1
   30338:	10000d1e 	bne	r2,zero,30370 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   3033c:	e0bffc17 	ldw	r2,-16(fp)
   30340:	1080020b 	ldhu	r2,8(r2)
   30344:	1007883a 	mov	r3,r2
   30348:	e0bff30b 	ldhu	r2,-52(fp)
   3034c:	0084303a 	nor	r2,zero,r2
   30350:	1884703a 	and	r2,r3,r2
   30354:	1007883a 	mov	r3,r2
   30358:	e0bffc17 	ldw	r2,-16(fp)
   3035c:	10c0020d 	sth	r3,8(r2)
   30360:	00000306 	br	30370 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   30364:	e0bfff17 	ldw	r2,-4(fp)
   30368:	00c01c04 	movi	r3,112
   3036c:	10c00005 	stb	r3,0(r2)
   30370:	e0bff417 	ldw	r2,-48(fp)
   30374:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30378:	e0bff617 	ldw	r2,-40(fp)
   3037c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   30380:	00005e06 	br	304fc <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   30384:	e0bffc17 	ldw	r2,-16(fp)
   30388:	10c0020b 	ldhu	r3,8(r2)
   3038c:	e0bffd0b 	ldhu	r2,-12(fp)
   30390:	1884703a 	and	r2,r3,r2
   30394:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   30398:	e0bff30b 	ldhu	r2,-52(fp)
   3039c:	10000d26 	beq	r2,zero,303d4 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   303a0:	e0bff383 	ldbu	r2,-50(fp)
   303a4:	10800058 	cmpnei	r2,r2,1
   303a8:	10000d1e 	bne	r2,zero,303e0 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   303ac:	e0bffc17 	ldw	r2,-16(fp)
   303b0:	1080020b 	ldhu	r2,8(r2)
   303b4:	1007883a 	mov	r3,r2
   303b8:	e0bff30b 	ldhu	r2,-52(fp)
   303bc:	0084303a 	nor	r2,zero,r2
   303c0:	1884703a 	and	r2,r3,r2
   303c4:	1007883a 	mov	r3,r2
   303c8:	e0bffc17 	ldw	r2,-16(fp)
   303cc:	10c0020d 	sth	r3,8(r2)
   303d0:	00000306 	br	303e0 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   303d4:	e0bfff17 	ldw	r2,-4(fp)
   303d8:	00c01c04 	movi	r3,112
   303dc:	10c00005 	stb	r3,0(r2)
   303e0:	e0bff417 	ldw	r2,-48(fp)
   303e4:	e0bff715 	stw	r2,-36(fp)
   303e8:	e0bff717 	ldw	r2,-36(fp)
   303ec:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   303f0:	00004206 	br	304fc <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   303f4:	e0bffc17 	ldw	r2,-16(fp)
   303f8:	1080020b 	ldhu	r2,8(r2)
   303fc:	0084303a 	nor	r2,zero,r2
   30400:	1007883a 	mov	r3,r2
   30404:	e0bffd0b 	ldhu	r2,-12(fp)
   30408:	1884703a 	and	r2,r3,r2
   3040c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   30410:	e0fff30b 	ldhu	r3,-52(fp)
   30414:	e0bffd0b 	ldhu	r2,-12(fp)
   30418:	18800b1e 	bne	r3,r2,30448 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   3041c:	e0bff383 	ldbu	r2,-50(fp)
   30420:	10800058 	cmpnei	r2,r2,1
   30424:	10000b1e 	bne	r2,zero,30454 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   30428:	e0bffc17 	ldw	r2,-16(fp)
   3042c:	10c0020b 	ldhu	r3,8(r2)
   30430:	e0bff30b 	ldhu	r2,-52(fp)
   30434:	1884b03a 	or	r2,r3,r2
   30438:	1007883a 	mov	r3,r2
   3043c:	e0bffc17 	ldw	r2,-16(fp)
   30440:	10c0020d 	sth	r3,8(r2)
   30444:	00000306 	br	30454 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   30448:	e0bfff17 	ldw	r2,-4(fp)
   3044c:	00c01c04 	movi	r3,112
   30450:	10c00005 	stb	r3,0(r2)
   30454:	e0bff417 	ldw	r2,-48(fp)
   30458:	e0bff815 	stw	r2,-32(fp)
   3045c:	e0bff817 	ldw	r2,-32(fp)
   30460:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   30464:	00002506 	br	304fc <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   30468:	e0bffc17 	ldw	r2,-16(fp)
   3046c:	1080020b 	ldhu	r2,8(r2)
   30470:	0084303a 	nor	r2,zero,r2
   30474:	1007883a 	mov	r3,r2
   30478:	e0bffd0b 	ldhu	r2,-12(fp)
   3047c:	1884703a 	and	r2,r3,r2
   30480:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   30484:	e0bff30b 	ldhu	r2,-52(fp)
   30488:	10000b26 	beq	r2,zero,304b8 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   3048c:	e0bff383 	ldbu	r2,-50(fp)
   30490:	10800058 	cmpnei	r2,r2,1
   30494:	10000b1e 	bne	r2,zero,304c4 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   30498:	e0bffc17 	ldw	r2,-16(fp)
   3049c:	10c0020b 	ldhu	r3,8(r2)
   304a0:	e0bff30b 	ldhu	r2,-52(fp)
   304a4:	1884b03a 	or	r2,r3,r2
   304a8:	1007883a 	mov	r3,r2
   304ac:	e0bffc17 	ldw	r2,-16(fp)
   304b0:	10c0020d 	sth	r3,8(r2)
   304b4:	00000306 	br	304c4 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   304b8:	e0bfff17 	ldw	r2,-4(fp)
   304bc:	00c01c04 	movi	r3,112
   304c0:	10c00005 	stb	r3,0(r2)
   304c4:	e0bff417 	ldw	r2,-48(fp)
   304c8:	e0bff915 	stw	r2,-28(fp)
   304cc:	e0bff917 	ldw	r2,-28(fp)
   304d0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   304d4:	00000906 	br	304fc <OSFlagAccept+0x2f4>
   304d8:	e0bff417 	ldw	r2,-48(fp)
   304dc:	e0bffa15 	stw	r2,-24(fp)
   304e0:	e0bffa17 	ldw	r2,-24(fp)
   304e4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   304e8:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   304ec:	e0bfff17 	ldw	r2,-4(fp)
   304f0:	00c01bc4 	movi	r3,111
   304f4:	10c00005 	stb	r3,0(r2)
             break;
   304f8:	0001883a 	nop
    }
    return (flags_rdy);
   304fc:	e0bff30b 	ldhu	r2,-52(fp)
}
   30500:	e037883a 	mov	sp,fp
   30504:	df000017 	ldw	fp,0(sp)
   30508:	dec00104 	addi	sp,sp,4
   3050c:	f800283a 	ret

00030510 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   30510:	defff804 	addi	sp,sp,-32
   30514:	df000715 	stw	fp,28(sp)
   30518:	df000704 	addi	fp,sp,28
   3051c:	2005883a 	mov	r2,r4
   30520:	e17fff15 	stw	r5,-4(fp)
   30524:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   30528:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   3052c:	e0bfff17 	ldw	r2,-4(fp)
   30530:	1000021e 	bne	r2,zero,3053c <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   30534:	0005883a 	mov	r2,zero
   30538:	00003306 	br	30608 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   3053c:	d0a72903 	ldbu	r2,-25436(gp)
   30540:	10803fcc 	andi	r2,r2,255
   30544:	10000526 	beq	r2,zero,3055c <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   30548:	e0bfff17 	ldw	r2,-4(fp)
   3054c:	00c00404 	movi	r3,16
   30550:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   30554:	0005883a 	mov	r2,zero
   30558:	00002b06 	br	30608 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3055c:	0005303a 	rdctl	r2,status
   30560:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30564:	e0fffd17 	ldw	r3,-12(fp)
   30568:	00bfff84 	movi	r2,-2
   3056c:	1884703a 	and	r2,r3,r2
   30570:	1001703a 	wrctl	status,r2
  
  return context;
   30574:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   30578:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   3057c:	d0a72c17 	ldw	r2,-25424(gp)
   30580:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   30584:	e0bffb17 	ldw	r2,-20(fp)
   30588:	10001726 	beq	r2,zero,305e8 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   3058c:	d0a72c17 	ldw	r2,-25424(gp)
   30590:	10800117 	ldw	r2,4(r2)
   30594:	d0a72c15 	stw	r2,-25424(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   30598:	e0bffb17 	ldw	r2,-20(fp)
   3059c:	00c00144 	movi	r3,5
   305a0:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   305a4:	e0bffb17 	ldw	r2,-20(fp)
   305a8:	e0fffe0b 	ldhu	r3,-8(fp)
   305ac:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   305b0:	e0bffb17 	ldw	r2,-20(fp)
   305b4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   305b8:	e0bffb17 	ldw	r2,-20(fp)
   305bc:	00c00fc4 	movi	r3,63
   305c0:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   305c4:	e0bffb17 	ldw	r2,-20(fp)
   305c8:	100002c5 	stb	zero,11(r2)
   305cc:	e0bff917 	ldw	r2,-28(fp)
   305d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   305d4:	e0bffa17 	ldw	r2,-24(fp)
   305d8:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   305dc:	e0bfff17 	ldw	r2,-4(fp)
   305e0:	10000005 	stb	zero,0(r2)
   305e4:	00000706 	br	30604 <OSFlagCreate+0xf4>
   305e8:	e0bff917 	ldw	r2,-28(fp)
   305ec:	e0bffc15 	stw	r2,-16(fp)
   305f0:	e0bffc17 	ldw	r2,-16(fp)
   305f4:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   305f8:	e0bfff17 	ldw	r2,-4(fp)
   305fc:	00c01c84 	movi	r3,114
   30600:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   30604:	e0bffb17 	ldw	r2,-20(fp)
}
   30608:	e037883a 	mov	sp,fp
   3060c:	df000017 	ldw	fp,0(sp)
   30610:	dec00104 	addi	sp,sp,4
   30614:	f800283a 	ret

00030618 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   30618:	defff204 	addi	sp,sp,-56
   3061c:	dfc00d15 	stw	ra,52(sp)
   30620:	df000c15 	stw	fp,48(sp)
   30624:	df000c04 	addi	fp,sp,48
   30628:	e13ffd15 	stw	r4,-12(fp)
   3062c:	2805883a 	mov	r2,r5
   30630:	e1bfff15 	stw	r6,-4(fp)
   30634:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   30638:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   3063c:	e0bfff17 	ldw	r2,-4(fp)
   30640:	1000021e 	bne	r2,zero,3064c <OSFlagDel+0x34>
        return (pgrp);
   30644:	e0bffd17 	ldw	r2,-12(fp)
   30648:	00008006 	br	3084c <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   3064c:	e0bffd17 	ldw	r2,-12(fp)
   30650:	1000051e 	bne	r2,zero,30668 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   30654:	e0bfff17 	ldw	r2,-4(fp)
   30658:	00c01b84 	movi	r3,110
   3065c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   30660:	e0bffd17 	ldw	r2,-12(fp)
   30664:	00007906 	br	3084c <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   30668:	d0a72903 	ldbu	r2,-25436(gp)
   3066c:	10803fcc 	andi	r2,r2,255
   30670:	10000526 	beq	r2,zero,30688 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   30674:	e0bfff17 	ldw	r2,-4(fp)
   30678:	00c003c4 	movi	r3,15
   3067c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   30680:	e0bffd17 	ldw	r2,-12(fp)
   30684:	00007106 	br	3084c <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   30688:	e0bffd17 	ldw	r2,-12(fp)
   3068c:	10800003 	ldbu	r2,0(r2)
   30690:	10803fcc 	andi	r2,r2,255
   30694:	10800160 	cmpeqi	r2,r2,5
   30698:	1000051e 	bne	r2,zero,306b0 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   3069c:	e0bfff17 	ldw	r2,-4(fp)
   306a0:	00c00044 	movi	r3,1
   306a4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   306a8:	e0bffd17 	ldw	r2,-12(fp)
   306ac:	00006706 	br	3084c <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   306b0:	0005303a 	rdctl	r2,status
   306b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   306b8:	e0fffc17 	ldw	r3,-16(fp)
   306bc:	00bfff84 	movi	r2,-2
   306c0:	1884703a 	and	r2,r3,r2
   306c4:	1001703a 	wrctl	status,r2
  
  return context;
   306c8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   306cc:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   306d0:	e0bffd17 	ldw	r2,-12(fp)
   306d4:	10800117 	ldw	r2,4(r2)
   306d8:	10000326 	beq	r2,zero,306e8 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   306dc:	00800044 	movi	r2,1
   306e0:	e0bff405 	stb	r2,-48(fp)
   306e4:	00000106 	br	306ec <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   306e8:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   306ec:	e0bffe03 	ldbu	r2,-8(fp)
   306f0:	10000326 	beq	r2,zero,30700 <OSFlagDel+0xe8>
   306f4:	10800060 	cmpeqi	r2,r2,1
   306f8:	1000231e 	bne	r2,zero,30788 <OSFlagDel+0x170>
   306fc:	00004806 	br	30820 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   30700:	e0bff403 	ldbu	r2,-48(fp)
   30704:	1000161e 	bne	r2,zero,30760 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   30708:	e0bffd17 	ldw	r2,-12(fp)
   3070c:	00c00fc4 	movi	r3,63
   30710:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   30714:	e0bffd17 	ldw	r2,-12(fp)
   30718:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   3071c:	e0bffd17 	ldw	r2,-12(fp)
   30720:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   30724:	d0e72c17 	ldw	r3,-25424(gp)
   30728:	e0bffd17 	ldw	r2,-12(fp)
   3072c:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   30730:	e0bffd17 	ldw	r2,-12(fp)
   30734:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   30738:	e0bffd17 	ldw	r2,-12(fp)
   3073c:	d0a72c15 	stw	r2,-25424(gp)
   30740:	e0bff717 	ldw	r2,-36(fp)
   30744:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30748:	e0bff817 	ldw	r2,-32(fp)
   3074c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   30750:	e0bfff17 	ldw	r2,-4(fp)
   30754:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   30758:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   3075c:	00003a06 	br	30848 <OSFlagDel+0x230>
   30760:	e0bff717 	ldw	r2,-36(fp)
   30764:	e0bff915 	stw	r2,-28(fp)
   30768:	e0bff917 	ldw	r2,-28(fp)
   3076c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   30770:	e0bfff17 	ldw	r2,-4(fp)
   30774:	00c01244 	movi	r3,73
   30778:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   3077c:	e0bffd17 	ldw	r2,-12(fp)
   30780:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   30784:	00003006 	br	30848 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   30788:	e0bffd17 	ldw	r2,-12(fp)
   3078c:	10800117 	ldw	r2,4(r2)
   30790:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   30794:	00000606 	br	307b0 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   30798:	000b883a 	mov	r5,zero
   3079c:	e13ff517 	ldw	r4,-44(fp)
   307a0:	00317840 	call	31784 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   307a4:	e0bff517 	ldw	r2,-44(fp)
   307a8:	10800017 	ldw	r2,0(r2)
   307ac:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   307b0:	e0bff517 	ldw	r2,-44(fp)
   307b4:	103ff81e 	bne	r2,zero,30798 <_gp+0xfffeec4c>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   307b8:	e0bffd17 	ldw	r2,-12(fp)
   307bc:	00c00fc4 	movi	r3,63
   307c0:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   307c4:	e0bffd17 	ldw	r2,-12(fp)
   307c8:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   307cc:	e0bffd17 	ldw	r2,-12(fp)
   307d0:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   307d4:	d0e72c17 	ldw	r3,-25424(gp)
   307d8:	e0bffd17 	ldw	r2,-12(fp)
   307dc:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   307e0:	e0bffd17 	ldw	r2,-12(fp)
   307e4:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   307e8:	e0bffd17 	ldw	r2,-12(fp)
   307ec:	d0a72c15 	stw	r2,-25424(gp)
   307f0:	e0bff717 	ldw	r2,-36(fp)
   307f4:	e0bffa15 	stw	r2,-24(fp)
   307f8:	e0bffa17 	ldw	r2,-24(fp)
   307fc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   30800:	e0bff403 	ldbu	r2,-48(fp)
   30804:	10800058 	cmpnei	r2,r2,1
   30808:	1000011e 	bne	r2,zero,30810 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   3080c:	002f9a40 	call	2f9a4 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   30810:	e0bfff17 	ldw	r2,-4(fp)
   30814:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   30818:	e03ff615 	stw	zero,-40(fp)
             break;
   3081c:	00000a06 	br	30848 <OSFlagDel+0x230>
   30820:	e0bff717 	ldw	r2,-36(fp)
   30824:	e0bffb15 	stw	r2,-20(fp)
   30828:	e0bffb17 	ldw	r2,-20(fp)
   3082c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   30830:	e0bfff17 	ldw	r2,-4(fp)
   30834:	00c001c4 	movi	r3,7
   30838:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   3083c:	e0bffd17 	ldw	r2,-12(fp)
   30840:	e0bff615 	stw	r2,-40(fp)
             break;
   30844:	0001883a 	nop
    }
    return (pgrp_return);
   30848:	e0bff617 	ldw	r2,-40(fp)
}
   3084c:	e037883a 	mov	sp,fp
   30850:	dfc00117 	ldw	ra,4(sp)
   30854:	df000017 	ldw	fp,0(sp)
   30858:	dec00204 	addi	sp,sp,8
   3085c:	f800283a 	ret

00030860 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   30860:	defff604 	addi	sp,sp,-40
   30864:	dfc00915 	stw	ra,36(sp)
   30868:	df000815 	stw	fp,32(sp)
   3086c:	df000804 	addi	fp,sp,32
   30870:	e13ffd15 	stw	r4,-12(fp)
   30874:	e17ffe15 	stw	r5,-8(fp)
   30878:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   3087c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   30880:	e0bfff17 	ldw	r2,-4(fp)
   30884:	1000021e 	bne	r2,zero,30890 <OSFlagNameGet+0x30>
        return (0);
   30888:	0005883a 	mov	r2,zero
   3088c:	00003906 	br	30974 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   30890:	e0bffd17 	ldw	r2,-12(fp)
   30894:	1000051e 	bne	r2,zero,308ac <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   30898:	e0bfff17 	ldw	r2,-4(fp)
   3089c:	00c01b84 	movi	r3,110
   308a0:	10c00005 	stb	r3,0(r2)
        return (0);
   308a4:	0005883a 	mov	r2,zero
   308a8:	00003206 	br	30974 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   308ac:	e0bffe17 	ldw	r2,-8(fp)
   308b0:	1000051e 	bne	r2,zero,308c8 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   308b4:	e0bfff17 	ldw	r2,-4(fp)
   308b8:	00c00304 	movi	r3,12
   308bc:	10c00005 	stb	r3,0(r2)
        return (0);
   308c0:	0005883a 	mov	r2,zero
   308c4:	00002b06 	br	30974 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   308c8:	d0a72903 	ldbu	r2,-25436(gp)
   308cc:	10803fcc 	andi	r2,r2,255
   308d0:	10000526 	beq	r2,zero,308e8 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   308d4:	e0bfff17 	ldw	r2,-4(fp)
   308d8:	00c00444 	movi	r3,17
   308dc:	10c00005 	stb	r3,0(r2)
        return (0);
   308e0:	0005883a 	mov	r2,zero
   308e4:	00002306 	br	30974 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   308e8:	0005303a 	rdctl	r2,status
   308ec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   308f0:	e0fffc17 	ldw	r3,-16(fp)
   308f4:	00bfff84 	movi	r2,-2
   308f8:	1884703a 	and	r2,r3,r2
   308fc:	1001703a 	wrctl	status,r2
  
  return context;
   30900:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   30904:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   30908:	e0bffd17 	ldw	r2,-12(fp)
   3090c:	10800003 	ldbu	r2,0(r2)
   30910:	10803fcc 	andi	r2,r2,255
   30914:	10800160 	cmpeqi	r2,r2,5
   30918:	1000091e 	bne	r2,zero,30940 <OSFlagNameGet+0xe0>
   3091c:	e0bff817 	ldw	r2,-32(fp)
   30920:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30924:	e0bff917 	ldw	r2,-28(fp)
   30928:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   3092c:	e0bfff17 	ldw	r2,-4(fp)
   30930:	00c00044 	movi	r3,1
   30934:	10c00005 	stb	r3,0(r2)
        return (0);
   30938:	0005883a 	mov	r2,zero
   3093c:	00000d06 	br	30974 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   30940:	e0bffd17 	ldw	r2,-12(fp)
   30944:	10800284 	addi	r2,r2,10
   30948:	100b883a 	mov	r5,r2
   3094c:	e13ffe17 	ldw	r4,-8(fp)
   30950:	002fae80 	call	2fae8 <OS_StrCopy>
   30954:	e0bffb05 	stb	r2,-20(fp)
   30958:	e0bff817 	ldw	r2,-32(fp)
   3095c:	e0bffa15 	stw	r2,-24(fp)
   30960:	e0bffa17 	ldw	r2,-24(fp)
   30964:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   30968:	e0bfff17 	ldw	r2,-4(fp)
   3096c:	10000005 	stb	zero,0(r2)
    return (len);
   30970:	e0bffb03 	ldbu	r2,-20(fp)
}
   30974:	e037883a 	mov	sp,fp
   30978:	dfc00117 	ldw	ra,4(sp)
   3097c:	df000017 	ldw	fp,0(sp)
   30980:	dec00204 	addi	sp,sp,8
   30984:	f800283a 	ret

00030988 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   30988:	defff504 	addi	sp,sp,-44
   3098c:	dfc00a15 	stw	ra,40(sp)
   30990:	df000915 	stw	fp,36(sp)
   30994:	df000904 	addi	fp,sp,36
   30998:	e13ffd15 	stw	r4,-12(fp)
   3099c:	e17ffe15 	stw	r5,-8(fp)
   309a0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   309a4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   309a8:	e0bfff17 	ldw	r2,-4(fp)
   309ac:	10004326 	beq	r2,zero,30abc <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   309b0:	e0bffd17 	ldw	r2,-12(fp)
   309b4:	1000041e 	bne	r2,zero,309c8 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   309b8:	e0bfff17 	ldw	r2,-4(fp)
   309bc:	00c01b84 	movi	r3,110
   309c0:	10c00005 	stb	r3,0(r2)
        return;
   309c4:	00003e06 	br	30ac0 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   309c8:	e0bffe17 	ldw	r2,-8(fp)
   309cc:	1000041e 	bne	r2,zero,309e0 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   309d0:	e0bfff17 	ldw	r2,-4(fp)
   309d4:	00c00304 	movi	r3,12
   309d8:	10c00005 	stb	r3,0(r2)
        return;
   309dc:	00003806 	br	30ac0 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   309e0:	d0a72903 	ldbu	r2,-25436(gp)
   309e4:	10803fcc 	andi	r2,r2,255
   309e8:	10000426 	beq	r2,zero,309fc <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   309ec:	e0bfff17 	ldw	r2,-4(fp)
   309f0:	00c00484 	movi	r3,18
   309f4:	10c00005 	stb	r3,0(r2)
        return;
   309f8:	00003106 	br	30ac0 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   309fc:	0005303a 	rdctl	r2,status
   30a00:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30a04:	e0fffc17 	ldw	r3,-16(fp)
   30a08:	00bfff84 	movi	r2,-2
   30a0c:	1884703a 	and	r2,r3,r2
   30a10:	1001703a 	wrctl	status,r2
  
  return context;
   30a14:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   30a18:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   30a1c:	e0bffd17 	ldw	r2,-12(fp)
   30a20:	10800003 	ldbu	r2,0(r2)
   30a24:	10803fcc 	andi	r2,r2,255
   30a28:	10800160 	cmpeqi	r2,r2,5
   30a2c:	1000081e 	bne	r2,zero,30a50 <OSFlagNameSet+0xc8>
   30a30:	e0bff717 	ldw	r2,-36(fp)
   30a34:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30a38:	e0bff817 	ldw	r2,-32(fp)
   30a3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   30a40:	e0bfff17 	ldw	r2,-4(fp)
   30a44:	00c00044 	movi	r3,1
   30a48:	10c00005 	stb	r3,0(r2)
        return;
   30a4c:	00001c06 	br	30ac0 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   30a50:	e13ffe17 	ldw	r4,-8(fp)
   30a54:	002fb5c0 	call	2fb5c <OS_StrLen>
   30a58:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   30a5c:	e0bffa03 	ldbu	r2,-24(fp)
   30a60:	10800830 	cmpltui	r2,r2,32
   30a64:	1000081e 	bne	r2,zero,30a88 <OSFlagNameSet+0x100>
   30a68:	e0bff717 	ldw	r2,-36(fp)
   30a6c:	e0bff915 	stw	r2,-28(fp)
   30a70:	e0bff917 	ldw	r2,-28(fp)
   30a74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   30a78:	e0bfff17 	ldw	r2,-4(fp)
   30a7c:	00c01cc4 	movi	r3,115
   30a80:	10c00005 	stb	r3,0(r2)
        return;
   30a84:	00000e06 	br	30ac0 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   30a88:	e0bffd17 	ldw	r2,-12(fp)
   30a8c:	10800284 	addi	r2,r2,10
   30a90:	e17ffe17 	ldw	r5,-8(fp)
   30a94:	1009883a 	mov	r4,r2
   30a98:	002fae80 	call	2fae8 <OS_StrCopy>
   30a9c:	e0bff717 	ldw	r2,-36(fp)
   30aa0:	e0bffb15 	stw	r2,-20(fp)
   30aa4:	e0bffb17 	ldw	r2,-20(fp)
   30aa8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   30aac:	e0bfff17 	ldw	r2,-4(fp)
   30ab0:	10000005 	stb	zero,0(r2)
    return;
   30ab4:	0001883a 	nop
   30ab8:	00000106 	br	30ac0 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   30abc:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   30ac0:	e037883a 	mov	sp,fp
   30ac4:	dfc00117 	ldw	ra,4(sp)
   30ac8:	df000017 	ldw	fp,0(sp)
   30acc:	dec00204 	addi	sp,sp,8
   30ad0:	f800283a 	ret

00030ad4 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   30ad4:	deffe104 	addi	sp,sp,-124
   30ad8:	dfc01e15 	stw	ra,120(sp)
   30adc:	df001d15 	stw	fp,116(sp)
   30ae0:	df001d04 	addi	fp,sp,116
   30ae4:	e13ffc15 	stw	r4,-16(fp)
   30ae8:	2809883a 	mov	r4,r5
   30aec:	3007883a 	mov	r3,r6
   30af0:	3805883a 	mov	r2,r7
   30af4:	e13ffd0d 	sth	r4,-12(fp)
   30af8:	e0fffe05 	stb	r3,-8(fp)
   30afc:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   30b00:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   30b04:	e0800217 	ldw	r2,8(fp)
   30b08:	1000021e 	bne	r2,zero,30b14 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   30b0c:	0005883a 	mov	r2,zero
   30b10:	00015906 	br	31078 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   30b14:	e0bffc17 	ldw	r2,-16(fp)
   30b18:	1000051e 	bne	r2,zero,30b30 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   30b1c:	e0800217 	ldw	r2,8(fp)
   30b20:	00c01b84 	movi	r3,110
   30b24:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   30b28:	0005883a 	mov	r2,zero
   30b2c:	00015206 	br	31078 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   30b30:	d0a72903 	ldbu	r2,-25436(gp)
   30b34:	10803fcc 	andi	r2,r2,255
   30b38:	10000526 	beq	r2,zero,30b50 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   30b3c:	e0800217 	ldw	r2,8(fp)
   30b40:	00c00084 	movi	r3,2
   30b44:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   30b48:	0005883a 	mov	r2,zero
   30b4c:	00014a06 	br	31078 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   30b50:	d0a71b03 	ldbu	r2,-25492(gp)
   30b54:	10803fcc 	andi	r2,r2,255
   30b58:	10000526 	beq	r2,zero,30b70 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   30b5c:	e0800217 	ldw	r2,8(fp)
   30b60:	00c00344 	movi	r3,13
   30b64:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   30b68:	0005883a 	mov	r2,zero
   30b6c:	00014206 	br	31078 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   30b70:	e0bffc17 	ldw	r2,-16(fp)
   30b74:	10800003 	ldbu	r2,0(r2)
   30b78:	10803fcc 	andi	r2,r2,255
   30b7c:	10800160 	cmpeqi	r2,r2,5
   30b80:	1000051e 	bne	r2,zero,30b98 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
   30b84:	e0800217 	ldw	r2,8(fp)
   30b88:	00c00044 	movi	r3,1
   30b8c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   30b90:	0005883a 	mov	r2,zero
   30b94:	00013806 	br	31078 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   30b98:	e0fffe03 	ldbu	r3,-8(fp)
   30b9c:	00bfe004 	movi	r2,-128
   30ba0:	1884703a 	and	r2,r3,r2
   30ba4:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   30ba8:	e0bfe603 	ldbu	r2,-104(fp)
   30bac:	10000626 	beq	r2,zero,30bc8 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   30bb0:	e0bffe03 	ldbu	r2,-8(fp)
   30bb4:	10801fcc 	andi	r2,r2,127
   30bb8:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   30bbc:	00800044 	movi	r2,1
   30bc0:	e0bfe405 	stb	r2,-112(fp)
   30bc4:	00000106 	br	30bcc <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
   30bc8:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30bcc:	0005303a 	rdctl	r2,status
   30bd0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30bd4:	e0fff617 	ldw	r3,-40(fp)
   30bd8:	00bfff84 	movi	r2,-2
   30bdc:	1884703a 	and	r2,r3,r2
   30be0:	1001703a 	wrctl	status,r2
  
  return context;
   30be4:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   30be8:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   30bec:	e0bffe03 	ldbu	r2,-8(fp)
   30bf0:	10c00060 	cmpeqi	r3,r2,1
   30bf4:	1800921e 	bne	r3,zero,30e40 <OSFlagPend+0x36c>
   30bf8:	10c00088 	cmpgei	r3,r2,2
   30bfc:	1800021e 	bne	r3,zero,30c08 <OSFlagPend+0x134>
   30c00:	10006126 	beq	r2,zero,30d88 <OSFlagPend+0x2b4>
   30c04:	0000bb06 	br	30ef4 <OSFlagPend+0x420>
   30c08:	10c000a0 	cmpeqi	r3,r2,2
   30c0c:	1800031e 	bne	r3,zero,30c1c <OSFlagPend+0x148>
   30c10:	108000e0 	cmpeqi	r2,r2,3
   30c14:	10002f1e 	bne	r2,zero,30cd4 <OSFlagPend+0x200>
   30c18:	0000b606 	br	30ef4 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   30c1c:	e0bffc17 	ldw	r2,-16(fp)
   30c20:	10c0020b 	ldhu	r3,8(r2)
   30c24:	e0bffd0b 	ldhu	r2,-12(fp)
   30c28:	1884703a 	and	r2,r3,r2
   30c2c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   30c30:	e0ffe80b 	ldhu	r3,-96(fp)
   30c34:	e0bffd0b 	ldhu	r2,-12(fp)
   30c38:	1880171e 	bne	r3,r2,30c98 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   30c3c:	e0bfe403 	ldbu	r2,-112(fp)
   30c40:	10800058 	cmpnei	r2,r2,1
   30c44:	1000091e 	bne	r2,zero,30c6c <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   30c48:	e0bffc17 	ldw	r2,-16(fp)
   30c4c:	1080020b 	ldhu	r2,8(r2)
   30c50:	1007883a 	mov	r3,r2
   30c54:	e0bfe80b 	ldhu	r2,-96(fp)
   30c58:	0084303a 	nor	r2,zero,r2
   30c5c:	1884703a 	and	r2,r3,r2
   30c60:	1007883a 	mov	r3,r2
   30c64:	e0bffc17 	ldw	r2,-16(fp)
   30c68:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   30c6c:	d0a72a17 	ldw	r2,-25432(gp)
   30c70:	e0ffe80b 	ldhu	r3,-96(fp)
   30c74:	10c00b0d 	sth	r3,44(r2)
   30c78:	e0bfe517 	ldw	r2,-108(fp)
   30c7c:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30c80:	e0bfe717 	ldw	r2,-100(fp)
   30c84:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   30c88:	e0800217 	ldw	r2,8(fp)
   30c8c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   30c90:	e0bfe80b 	ldhu	r2,-96(fp)
   30c94:	0000f806 	br	31078 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   30c98:	e13ffd0b 	ldhu	r4,-12(fp)
   30c9c:	e17ffe03 	ldbu	r5,-8(fp)
   30ca0:	e0bfff0b 	ldhu	r2,-4(fp)
   30ca4:	e0fff704 	addi	r3,fp,-36
   30ca8:	d8800015 	stw	r2,0(sp)
   30cac:	280f883a 	mov	r7,r5
   30cb0:	200d883a 	mov	r6,r4
   30cb4:	180b883a 	mov	r5,r3
   30cb8:	e13ffc17 	ldw	r4,-16(fp)
   30cbc:	00315440 	call	31544 <OS_FlagBlock>
   30cc0:	e0bfe517 	ldw	r2,-108(fp)
   30cc4:	e0bfe915 	stw	r2,-92(fp)
   30cc8:	e0bfe917 	ldw	r2,-92(fp)
   30ccc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   30cd0:	00009206 	br	30f1c <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   30cd4:	e0bffc17 	ldw	r2,-16(fp)
   30cd8:	10c0020b 	ldhu	r3,8(r2)
   30cdc:	e0bffd0b 	ldhu	r2,-12(fp)
   30ce0:	1884703a 	and	r2,r3,r2
   30ce4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   30ce8:	e0bfe80b 	ldhu	r2,-96(fp)
   30cec:	10001726 	beq	r2,zero,30d4c <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   30cf0:	e0bfe403 	ldbu	r2,-112(fp)
   30cf4:	10800058 	cmpnei	r2,r2,1
   30cf8:	1000091e 	bne	r2,zero,30d20 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   30cfc:	e0bffc17 	ldw	r2,-16(fp)
   30d00:	1080020b 	ldhu	r2,8(r2)
   30d04:	1007883a 	mov	r3,r2
   30d08:	e0bfe80b 	ldhu	r2,-96(fp)
   30d0c:	0084303a 	nor	r2,zero,r2
   30d10:	1884703a 	and	r2,r3,r2
   30d14:	1007883a 	mov	r3,r2
   30d18:	e0bffc17 	ldw	r2,-16(fp)
   30d1c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   30d20:	d0a72a17 	ldw	r2,-25432(gp)
   30d24:	e0ffe80b 	ldhu	r3,-96(fp)
   30d28:	10c00b0d 	sth	r3,44(r2)
   30d2c:	e0bfe517 	ldw	r2,-108(fp)
   30d30:	e0bfea15 	stw	r2,-88(fp)
   30d34:	e0bfea17 	ldw	r2,-88(fp)
   30d38:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   30d3c:	e0800217 	ldw	r2,8(fp)
   30d40:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   30d44:	e0bfe80b 	ldhu	r2,-96(fp)
   30d48:	0000cb06 	br	31078 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   30d4c:	e13ffd0b 	ldhu	r4,-12(fp)
   30d50:	e17ffe03 	ldbu	r5,-8(fp)
   30d54:	e0bfff0b 	ldhu	r2,-4(fp)
   30d58:	e0fff704 	addi	r3,fp,-36
   30d5c:	d8800015 	stw	r2,0(sp)
   30d60:	280f883a 	mov	r7,r5
   30d64:	200d883a 	mov	r6,r4
   30d68:	180b883a 	mov	r5,r3
   30d6c:	e13ffc17 	ldw	r4,-16(fp)
   30d70:	00315440 	call	31544 <OS_FlagBlock>
   30d74:	e0bfe517 	ldw	r2,-108(fp)
   30d78:	e0bfeb15 	stw	r2,-84(fp)
   30d7c:	e0bfeb17 	ldw	r2,-84(fp)
   30d80:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   30d84:	00006506 	br	30f1c <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   30d88:	e0bffc17 	ldw	r2,-16(fp)
   30d8c:	1080020b 	ldhu	r2,8(r2)
   30d90:	0084303a 	nor	r2,zero,r2
   30d94:	1007883a 	mov	r3,r2
   30d98:	e0bffd0b 	ldhu	r2,-12(fp)
   30d9c:	1884703a 	and	r2,r3,r2
   30da0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   30da4:	e0ffe80b 	ldhu	r3,-96(fp)
   30da8:	e0bffd0b 	ldhu	r2,-12(fp)
   30dac:	1880151e 	bne	r3,r2,30e04 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   30db0:	e0bfe403 	ldbu	r2,-112(fp)
   30db4:	10800058 	cmpnei	r2,r2,1
   30db8:	1000071e 	bne	r2,zero,30dd8 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   30dbc:	e0bffc17 	ldw	r2,-16(fp)
   30dc0:	10c0020b 	ldhu	r3,8(r2)
   30dc4:	e0bfe80b 	ldhu	r2,-96(fp)
   30dc8:	1884b03a 	or	r2,r3,r2
   30dcc:	1007883a 	mov	r3,r2
   30dd0:	e0bffc17 	ldw	r2,-16(fp)
   30dd4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   30dd8:	d0a72a17 	ldw	r2,-25432(gp)
   30ddc:	e0ffe80b 	ldhu	r3,-96(fp)
   30de0:	10c00b0d 	sth	r3,44(r2)
   30de4:	e0bfe517 	ldw	r2,-108(fp)
   30de8:	e0bfec15 	stw	r2,-80(fp)
   30dec:	e0bfec17 	ldw	r2,-80(fp)
   30df0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   30df4:	e0800217 	ldw	r2,8(fp)
   30df8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   30dfc:	e0bfe80b 	ldhu	r2,-96(fp)
   30e00:	00009d06 	br	31078 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   30e04:	e13ffd0b 	ldhu	r4,-12(fp)
   30e08:	e17ffe03 	ldbu	r5,-8(fp)
   30e0c:	e0bfff0b 	ldhu	r2,-4(fp)
   30e10:	e0fff704 	addi	r3,fp,-36
   30e14:	d8800015 	stw	r2,0(sp)
   30e18:	280f883a 	mov	r7,r5
   30e1c:	200d883a 	mov	r6,r4
   30e20:	180b883a 	mov	r5,r3
   30e24:	e13ffc17 	ldw	r4,-16(fp)
   30e28:	00315440 	call	31544 <OS_FlagBlock>
   30e2c:	e0bfe517 	ldw	r2,-108(fp)
   30e30:	e0bfed15 	stw	r2,-76(fp)
   30e34:	e0bfed17 	ldw	r2,-76(fp)
   30e38:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   30e3c:	00003706 	br	30f1c <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   30e40:	e0bffc17 	ldw	r2,-16(fp)
   30e44:	1080020b 	ldhu	r2,8(r2)
   30e48:	0084303a 	nor	r2,zero,r2
   30e4c:	1007883a 	mov	r3,r2
   30e50:	e0bffd0b 	ldhu	r2,-12(fp)
   30e54:	1884703a 	and	r2,r3,r2
   30e58:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   30e5c:	e0bfe80b 	ldhu	r2,-96(fp)
   30e60:	10001526 	beq	r2,zero,30eb8 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   30e64:	e0bfe403 	ldbu	r2,-112(fp)
   30e68:	10800058 	cmpnei	r2,r2,1
   30e6c:	1000071e 	bne	r2,zero,30e8c <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   30e70:	e0bffc17 	ldw	r2,-16(fp)
   30e74:	10c0020b 	ldhu	r3,8(r2)
   30e78:	e0bfe80b 	ldhu	r2,-96(fp)
   30e7c:	1884b03a 	or	r2,r3,r2
   30e80:	1007883a 	mov	r3,r2
   30e84:	e0bffc17 	ldw	r2,-16(fp)
   30e88:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   30e8c:	d0a72a17 	ldw	r2,-25432(gp)
   30e90:	e0ffe80b 	ldhu	r3,-96(fp)
   30e94:	10c00b0d 	sth	r3,44(r2)
   30e98:	e0bfe517 	ldw	r2,-108(fp)
   30e9c:	e0bfee15 	stw	r2,-72(fp)
   30ea0:	e0bfee17 	ldw	r2,-72(fp)
   30ea4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   30ea8:	e0800217 	ldw	r2,8(fp)
   30eac:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   30eb0:	e0bfe80b 	ldhu	r2,-96(fp)
   30eb4:	00007006 	br	31078 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   30eb8:	e13ffd0b 	ldhu	r4,-12(fp)
   30ebc:	e17ffe03 	ldbu	r5,-8(fp)
   30ec0:	e0bfff0b 	ldhu	r2,-4(fp)
   30ec4:	e0fff704 	addi	r3,fp,-36
   30ec8:	d8800015 	stw	r2,0(sp)
   30ecc:	280f883a 	mov	r7,r5
   30ed0:	200d883a 	mov	r6,r4
   30ed4:	180b883a 	mov	r5,r3
   30ed8:	e13ffc17 	ldw	r4,-16(fp)
   30edc:	00315440 	call	31544 <OS_FlagBlock>
   30ee0:	e0bfe517 	ldw	r2,-108(fp)
   30ee4:	e0bfef15 	stw	r2,-68(fp)
   30ee8:	e0bfef17 	ldw	r2,-68(fp)
   30eec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   30ef0:	00000a06 	br	30f1c <OSFlagPend+0x448>
   30ef4:	e0bfe517 	ldw	r2,-108(fp)
   30ef8:	e0bff015 	stw	r2,-64(fp)
   30efc:	e0bff017 	ldw	r2,-64(fp)
   30f00:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   30f04:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   30f08:	e0800217 	ldw	r2,8(fp)
   30f0c:	00c01bc4 	movi	r3,111
   30f10:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   30f14:	e0bfe80b 	ldhu	r2,-96(fp)
   30f18:	00005706 	br	31078 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   30f1c:	002f9a40 	call	2f9a4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30f20:	0005303a 	rdctl	r2,status
   30f24:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30f28:	e0fff117 	ldw	r3,-60(fp)
   30f2c:	00bfff84 	movi	r2,-2
   30f30:	1884703a 	and	r2,r3,r2
   30f34:	1001703a 	wrctl	status,r2
  
  return context;
   30f38:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   30f3c:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   30f40:	d0a72a17 	ldw	r2,-25432(gp)
   30f44:	10800c43 	ldbu	r2,49(r2)
   30f48:	10803fcc 	andi	r2,r2,255
   30f4c:	10001c26 	beq	r2,zero,30fc0 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   30f50:	d0a72a17 	ldw	r2,-25432(gp)
   30f54:	10800c43 	ldbu	r2,49(r2)
   30f58:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   30f5c:	d0a72a17 	ldw	r2,-25432(gp)
   30f60:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   30f64:	e0bff704 	addi	r2,fp,-36
   30f68:	1009883a 	mov	r4,r2
   30f6c:	00318780 	call	31878 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   30f70:	d0a72a17 	ldw	r2,-25432(gp)
   30f74:	10000c05 	stb	zero,48(r2)
   30f78:	e0bfe517 	ldw	r2,-108(fp)
   30f7c:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30f80:	e0bff217 	ldw	r2,-56(fp)
   30f84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   30f88:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   30f8c:	e0bff303 	ldbu	r2,-52(fp)
   30f90:	108000a0 	cmpeqi	r2,r2,2
   30f94:	10000426 	beq	r2,zero,30fa8 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   30f98:	e0800217 	ldw	r2,8(fp)
   30f9c:	00c00384 	movi	r3,14
   30fa0:	10c00005 	stb	r3,0(r2)
                 break;
   30fa4:	00000406 	br	30fb8 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   30fa8:	e0800217 	ldw	r2,8(fp)
   30fac:	00c00284 	movi	r3,10
   30fb0:	10c00005 	stb	r3,0(r2)
                 break;
   30fb4:	0001883a 	nop
        }
        return (flags_rdy);
   30fb8:	e0bfe80b 	ldhu	r2,-96(fp)
   30fbc:	00002e06 	br	31078 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   30fc0:	d0a72a17 	ldw	r2,-25432(gp)
   30fc4:	10800b0b 	ldhu	r2,44(r2)
   30fc8:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   30fcc:	e0bfe403 	ldbu	r2,-112(fp)
   30fd0:	10800058 	cmpnei	r2,r2,1
   30fd4:	1000211e 	bne	r2,zero,3105c <OSFlagPend+0x588>
        switch (wait_type) {
   30fd8:	e0bffe03 	ldbu	r2,-8(fp)
   30fdc:	10001616 	blt	r2,zero,31038 <OSFlagPend+0x564>
   30fe0:	10c00090 	cmplti	r3,r2,2
   30fe4:	18000c1e 	bne	r3,zero,31018 <OSFlagPend+0x544>
   30fe8:	10800108 	cmpgei	r2,r2,4
   30fec:	1000121e 	bne	r2,zero,31038 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   30ff0:	e0bffc17 	ldw	r2,-16(fp)
   30ff4:	1080020b 	ldhu	r2,8(r2)
   30ff8:	1007883a 	mov	r3,r2
   30ffc:	e0bfe80b 	ldhu	r2,-96(fp)
   31000:	0084303a 	nor	r2,zero,r2
   31004:	1884703a 	and	r2,r3,r2
   31008:	1007883a 	mov	r3,r2
   3100c:	e0bffc17 	ldw	r2,-16(fp)
   31010:	10c0020d 	sth	r3,8(r2)
                 break;
   31014:	00001106 	br	3105c <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   31018:	e0bffc17 	ldw	r2,-16(fp)
   3101c:	10c0020b 	ldhu	r3,8(r2)
   31020:	e0bfe80b 	ldhu	r2,-96(fp)
   31024:	1884b03a 	or	r2,r3,r2
   31028:	1007883a 	mov	r3,r2
   3102c:	e0bffc17 	ldw	r2,-16(fp)
   31030:	10c0020d 	sth	r3,8(r2)
                 break;
   31034:	00000906 	br	3105c <OSFlagPend+0x588>
   31038:	e0bfe517 	ldw	r2,-108(fp)
   3103c:	e0bff415 	stw	r2,-48(fp)
   31040:	e0bff417 	ldw	r2,-48(fp)
   31044:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   31048:	e0800217 	ldw	r2,8(fp)
   3104c:	00c01bc4 	movi	r3,111
   31050:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   31054:	0005883a 	mov	r2,zero
   31058:	00000706 	br	31078 <OSFlagPend+0x5a4>
   3105c:	e0bfe517 	ldw	r2,-108(fp)
   31060:	e0bff515 	stw	r2,-44(fp)
   31064:	e0bff517 	ldw	r2,-44(fp)
   31068:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   3106c:	e0800217 	ldw	r2,8(fp)
   31070:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   31074:	e0bfe80b 	ldhu	r2,-96(fp)
}
   31078:	e037883a 	mov	sp,fp
   3107c:	dfc00117 	ldw	ra,4(sp)
   31080:	df000017 	ldw	fp,0(sp)
   31084:	dec00204 	addi	sp,sp,8
   31088:	f800283a 	ret

0003108c <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   3108c:	defffb04 	addi	sp,sp,-20
   31090:	df000415 	stw	fp,16(sp)
   31094:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   31098:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3109c:	0005303a 	rdctl	r2,status
   310a0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   310a4:	e0fffe17 	ldw	r3,-8(fp)
   310a8:	00bfff84 	movi	r2,-2
   310ac:	1884703a 	and	r2,r3,r2
   310b0:	1001703a 	wrctl	status,r2
  
  return context;
   310b4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   310b8:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   310bc:	d0a72a17 	ldw	r2,-25432(gp)
   310c0:	10800b0b 	ldhu	r2,44(r2)
   310c4:	e0bffd0d 	sth	r2,-12(fp)
   310c8:	e0bffc17 	ldw	r2,-16(fp)
   310cc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   310d0:	e0bfff17 	ldw	r2,-4(fp)
   310d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   310d8:	e0bffd0b 	ldhu	r2,-12(fp)
}
   310dc:	e037883a 	mov	sp,fp
   310e0:	df000017 	ldw	fp,0(sp)
   310e4:	dec00104 	addi	sp,sp,4
   310e8:	f800283a 	ret

000310ec <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   310ec:	deffef04 	addi	sp,sp,-68
   310f0:	dfc01015 	stw	ra,64(sp)
   310f4:	df000f15 	stw	fp,60(sp)
   310f8:	df000f04 	addi	fp,sp,60
   310fc:	e13ffc15 	stw	r4,-16(fp)
   31100:	2807883a 	mov	r3,r5
   31104:	3005883a 	mov	r2,r6
   31108:	e1ffff15 	stw	r7,-4(fp)
   3110c:	e0fffd0d 	sth	r3,-12(fp)
   31110:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   31114:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   31118:	e0bfff17 	ldw	r2,-4(fp)
   3111c:	1000021e 	bne	r2,zero,31128 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   31120:	0005883a 	mov	r2,zero
   31124:	0000d106 	br	3146c <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   31128:	e0bffc17 	ldw	r2,-16(fp)
   3112c:	1000051e 	bne	r2,zero,31144 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   31130:	e0bfff17 	ldw	r2,-4(fp)
   31134:	00c01b84 	movi	r3,110
   31138:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   3113c:	0005883a 	mov	r2,zero
   31140:	0000ca06 	br	3146c <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   31144:	e0bffc17 	ldw	r2,-16(fp)
   31148:	10800003 	ldbu	r2,0(r2)
   3114c:	10803fcc 	andi	r2,r2,255
   31150:	10800160 	cmpeqi	r2,r2,5
   31154:	1000051e 	bne	r2,zero,3116c <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   31158:	e0bfff17 	ldw	r2,-4(fp)
   3115c:	00c00044 	movi	r3,1
   31160:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   31164:	0005883a 	mov	r2,zero
   31168:	0000c006 	br	3146c <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3116c:	0005303a 	rdctl	r2,status
   31170:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31174:	e0fffb17 	ldw	r3,-20(fp)
   31178:	00bfff84 	movi	r2,-2
   3117c:	1884703a 	and	r2,r3,r2
   31180:	1001703a 	wrctl	status,r2
  
  return context;
   31184:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   31188:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   3118c:	e0bffe03 	ldbu	r2,-8(fp)
   31190:	10000326 	beq	r2,zero,311a0 <OSFlagPost+0xb4>
   31194:	10800060 	cmpeqi	r2,r2,1
   31198:	10000b1e 	bne	r2,zero,311c8 <OSFlagPost+0xdc>
   3119c:	00001206 	br	311e8 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   311a0:	e0bffc17 	ldw	r2,-16(fp)
   311a4:	1080020b 	ldhu	r2,8(r2)
   311a8:	1007883a 	mov	r3,r2
   311ac:	e0bffd0b 	ldhu	r2,-12(fp)
   311b0:	0084303a 	nor	r2,zero,r2
   311b4:	1884703a 	and	r2,r3,r2
   311b8:	1007883a 	mov	r3,r2
   311bc:	e0bffc17 	ldw	r2,-16(fp)
   311c0:	10c0020d 	sth	r3,8(r2)
             break;
   311c4:	00001106 	br	3120c <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   311c8:	e0bffc17 	ldw	r2,-16(fp)
   311cc:	10c0020b 	ldhu	r3,8(r2)
   311d0:	e0bffd0b 	ldhu	r2,-12(fp)
   311d4:	1884b03a 	or	r2,r3,r2
   311d8:	1007883a 	mov	r3,r2
   311dc:	e0bffc17 	ldw	r2,-16(fp)
   311e0:	10c0020d 	sth	r3,8(r2)
             break;
   311e4:	00000906 	br	3120c <OSFlagPost+0x120>
   311e8:	e0bff317 	ldw	r2,-52(fp)
   311ec:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   311f0:	e0bff417 	ldw	r2,-48(fp)
   311f4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   311f8:	e0bfff17 	ldw	r2,-4(fp)
   311fc:	00c01c44 	movi	r3,113
   31200:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   31204:	0005883a 	mov	r2,zero
   31208:	00009806 	br	3146c <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   3120c:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   31210:	e0bffc17 	ldw	r2,-16(fp)
   31214:	10800117 	ldw	r2,4(r2)
   31218:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   3121c:	00007706 	br	313fc <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   31220:	e0bff117 	ldw	r2,-60(fp)
   31224:	10800483 	ldbu	r2,18(r2)
   31228:	10803fcc 	andi	r2,r2,255
   3122c:	10c00060 	cmpeqi	r3,r2,1
   31230:	18004a1e 	bne	r3,zero,3135c <OSFlagPost+0x270>
   31234:	10c00088 	cmpgei	r3,r2,2
   31238:	1800021e 	bne	r3,zero,31244 <OSFlagPost+0x158>
   3123c:	10002f26 	beq	r2,zero,312fc <OSFlagPost+0x210>
   31240:	00005b06 	br	313b0 <OSFlagPost+0x2c4>
   31244:	10c000a0 	cmpeqi	r3,r2,2
   31248:	1800031e 	bne	r3,zero,31258 <OSFlagPost+0x16c>
   3124c:	108000e0 	cmpeqi	r2,r2,3
   31250:	1000171e 	bne	r2,zero,312b0 <OSFlagPost+0x1c4>
   31254:	00005606 	br	313b0 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   31258:	e0bffc17 	ldw	r2,-16(fp)
   3125c:	10c0020b 	ldhu	r3,8(r2)
   31260:	e0bff117 	ldw	r2,-60(fp)
   31264:	1080040b 	ldhu	r2,16(r2)
   31268:	1884703a 	and	r2,r3,r2
   3126c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   31270:	e0bff117 	ldw	r2,-60(fp)
   31274:	1080040b 	ldhu	r2,16(r2)
   31278:	10ffffcc 	andi	r3,r2,65535
   3127c:	e0bff60b 	ldhu	r2,-40(fp)
   31280:	1880541e 	bne	r3,r2,313d4 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   31284:	e0bff60b 	ldhu	r2,-40(fp)
   31288:	100b883a 	mov	r5,r2
   3128c:	e13ff117 	ldw	r4,-60(fp)
   31290:	00317840 	call	31784 <OS_FlagTaskRdy>
   31294:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   31298:	e0bff683 	ldbu	r2,-38(fp)
   3129c:	10800058 	cmpnei	r2,r2,1
   312a0:	10004c1e 	bne	r2,zero,313d4 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   312a4:	00800044 	movi	r2,1
   312a8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   312ac:	00004906 	br	313d4 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   312b0:	e0bffc17 	ldw	r2,-16(fp)
   312b4:	10c0020b 	ldhu	r3,8(r2)
   312b8:	e0bff117 	ldw	r2,-60(fp)
   312bc:	1080040b 	ldhu	r2,16(r2)
   312c0:	1884703a 	and	r2,r3,r2
   312c4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   312c8:	e0bff60b 	ldhu	r2,-40(fp)
   312cc:	10004326 	beq	r2,zero,313dc <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   312d0:	e0bff60b 	ldhu	r2,-40(fp)
   312d4:	100b883a 	mov	r5,r2
   312d8:	e13ff117 	ldw	r4,-60(fp)
   312dc:	00317840 	call	31784 <OS_FlagTaskRdy>
   312e0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   312e4:	e0bff683 	ldbu	r2,-38(fp)
   312e8:	10800058 	cmpnei	r2,r2,1
   312ec:	10003b1e 	bne	r2,zero,313dc <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   312f0:	00800044 	movi	r2,1
   312f4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   312f8:	00003806 	br	313dc <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   312fc:	e0bffc17 	ldw	r2,-16(fp)
   31300:	1080020b 	ldhu	r2,8(r2)
   31304:	0084303a 	nor	r2,zero,r2
   31308:	1007883a 	mov	r3,r2
   3130c:	e0bff117 	ldw	r2,-60(fp)
   31310:	1080040b 	ldhu	r2,16(r2)
   31314:	1884703a 	and	r2,r3,r2
   31318:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   3131c:	e0bff117 	ldw	r2,-60(fp)
   31320:	1080040b 	ldhu	r2,16(r2)
   31324:	10ffffcc 	andi	r3,r2,65535
   31328:	e0bff60b 	ldhu	r2,-40(fp)
   3132c:	18802d1e 	bne	r3,r2,313e4 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   31330:	e0bff60b 	ldhu	r2,-40(fp)
   31334:	100b883a 	mov	r5,r2
   31338:	e13ff117 	ldw	r4,-60(fp)
   3133c:	00317840 	call	31784 <OS_FlagTaskRdy>
   31340:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   31344:	e0bff683 	ldbu	r2,-38(fp)
   31348:	10800058 	cmpnei	r2,r2,1
   3134c:	1000251e 	bne	r2,zero,313e4 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   31350:	00800044 	movi	r2,1
   31354:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   31358:	00002206 	br	313e4 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   3135c:	e0bffc17 	ldw	r2,-16(fp)
   31360:	1080020b 	ldhu	r2,8(r2)
   31364:	0084303a 	nor	r2,zero,r2
   31368:	1007883a 	mov	r3,r2
   3136c:	e0bff117 	ldw	r2,-60(fp)
   31370:	1080040b 	ldhu	r2,16(r2)
   31374:	1884703a 	and	r2,r3,r2
   31378:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   3137c:	e0bff60b 	ldhu	r2,-40(fp)
   31380:	10001a26 	beq	r2,zero,313ec <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   31384:	e0bff60b 	ldhu	r2,-40(fp)
   31388:	100b883a 	mov	r5,r2
   3138c:	e13ff117 	ldw	r4,-60(fp)
   31390:	00317840 	call	31784 <OS_FlagTaskRdy>
   31394:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   31398:	e0bff683 	ldbu	r2,-38(fp)
   3139c:	10800058 	cmpnei	r2,r2,1
   313a0:	1000121e 	bne	r2,zero,313ec <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   313a4:	00800044 	movi	r2,1
   313a8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   313ac:	00000f06 	br	313ec <OSFlagPost+0x300>
   313b0:	e0bff317 	ldw	r2,-52(fp)
   313b4:	e0bff515 	stw	r2,-44(fp)
   313b8:	e0bff517 	ldw	r2,-44(fp)
   313bc:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   313c0:	e0bfff17 	ldw	r2,-4(fp)
   313c4:	00c01bc4 	movi	r3,111
   313c8:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   313cc:	0005883a 	mov	r2,zero
   313d0:	00002606 	br	3146c <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   313d4:	0001883a 	nop
   313d8:	00000506 	br	313f0 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   313dc:	0001883a 	nop
   313e0:	00000306 	br	313f0 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   313e4:	0001883a 	nop
   313e8:	00000106 	br	313f0 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   313ec:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   313f0:	e0bff117 	ldw	r2,-60(fp)
   313f4:	10800017 	ldw	r2,0(r2)
   313f8:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   313fc:	e0bff117 	ldw	r2,-60(fp)
   31400:	103f871e 	bne	r2,zero,31220 <_gp+0xfffef6d4>
   31404:	e0bff317 	ldw	r2,-52(fp)
   31408:	e0bff715 	stw	r2,-36(fp)
   3140c:	e0bff717 	ldw	r2,-36(fp)
   31410:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   31414:	e0bff203 	ldbu	r2,-56(fp)
   31418:	10800058 	cmpnei	r2,r2,1
   3141c:	1000011e 	bne	r2,zero,31424 <OSFlagPost+0x338>
        OS_Sched();
   31420:	002f9a40 	call	2f9a4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31424:	0005303a 	rdctl	r2,status
   31428:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3142c:	e0fffa17 	ldw	r3,-24(fp)
   31430:	00bfff84 	movi	r2,-2
   31434:	1884703a 	and	r2,r3,r2
   31438:	1001703a 	wrctl	status,r2
  
  return context;
   3143c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   31440:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   31444:	e0bffc17 	ldw	r2,-16(fp)
   31448:	1080020b 	ldhu	r2,8(r2)
   3144c:	e0bff90d 	sth	r2,-28(fp)
   31450:	e0bff317 	ldw	r2,-52(fp)
   31454:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31458:	e0bff817 	ldw	r2,-32(fp)
   3145c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   31460:	e0bfff17 	ldw	r2,-4(fp)
   31464:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   31468:	e0bff90b 	ldhu	r2,-28(fp)
}
   3146c:	e037883a 	mov	sp,fp
   31470:	dfc00117 	ldw	ra,4(sp)
   31474:	df000017 	ldw	fp,0(sp)
   31478:	dec00204 	addi	sp,sp,8
   3147c:	f800283a 	ret

00031480 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   31480:	defff904 	addi	sp,sp,-28
   31484:	df000615 	stw	fp,24(sp)
   31488:	df000604 	addi	fp,sp,24
   3148c:	e13ffe15 	stw	r4,-8(fp)
   31490:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   31494:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   31498:	e0bfff17 	ldw	r2,-4(fp)
   3149c:	1000021e 	bne	r2,zero,314a8 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   314a0:	0005883a 	mov	r2,zero
   314a4:	00002306 	br	31534 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   314a8:	e0bffe17 	ldw	r2,-8(fp)
   314ac:	1000051e 	bne	r2,zero,314c4 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   314b0:	e0bfff17 	ldw	r2,-4(fp)
   314b4:	00c01b84 	movi	r3,110
   314b8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   314bc:	0005883a 	mov	r2,zero
   314c0:	00001c06 	br	31534 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   314c4:	e0bffe17 	ldw	r2,-8(fp)
   314c8:	10800003 	ldbu	r2,0(r2)
   314cc:	10803fcc 	andi	r2,r2,255
   314d0:	10800160 	cmpeqi	r2,r2,5
   314d4:	1000051e 	bne	r2,zero,314ec <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   314d8:	e0bfff17 	ldw	r2,-4(fp)
   314dc:	00c00044 	movi	r3,1
   314e0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   314e4:	0005883a 	mov	r2,zero
   314e8:	00001206 	br	31534 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   314ec:	0005303a 	rdctl	r2,status
   314f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   314f4:	e0fffc17 	ldw	r3,-16(fp)
   314f8:	00bfff84 	movi	r2,-2
   314fc:	1884703a 	and	r2,r3,r2
   31500:	1001703a 	wrctl	status,r2
  
  return context;
   31504:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   31508:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   3150c:	e0bffe17 	ldw	r2,-8(fp)
   31510:	1080020b 	ldhu	r2,8(r2)
   31514:	e0bffb0d 	sth	r2,-20(fp)
   31518:	e0bffa17 	ldw	r2,-24(fp)
   3151c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31520:	e0bffd17 	ldw	r2,-12(fp)
   31524:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   31528:	e0bfff17 	ldw	r2,-4(fp)
   3152c:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   31530:	e0bffb0b 	ldhu	r2,-20(fp)
}
   31534:	e037883a 	mov	sp,fp
   31538:	df000017 	ldw	fp,0(sp)
   3153c:	dec00104 	addi	sp,sp,4
   31540:	f800283a 	ret

00031544 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   31544:	defff804 	addi	sp,sp,-32
   31548:	df000715 	stw	fp,28(sp)
   3154c:	df000704 	addi	fp,sp,28
   31550:	e13ffb15 	stw	r4,-20(fp)
   31554:	e17ffc15 	stw	r5,-16(fp)
   31558:	3009883a 	mov	r4,r6
   3155c:	3807883a 	mov	r3,r7
   31560:	e0800117 	ldw	r2,4(fp)
   31564:	e13ffd0d 	sth	r4,-12(fp)
   31568:	e0fffe05 	stb	r3,-8(fp)
   3156c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   31570:	d0a72a17 	ldw	r2,-25432(gp)
   31574:	d0e72a17 	ldw	r3,-25432(gp)
   31578:	18c00c03 	ldbu	r3,48(r3)
   3157c:	18c00814 	ori	r3,r3,32
   31580:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   31584:	d0a72a17 	ldw	r2,-25432(gp)
   31588:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   3158c:	d0a72a17 	ldw	r2,-25432(gp)
   31590:	e0ffff0b 	ldhu	r3,-4(fp)
   31594:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   31598:	d0a72a17 	ldw	r2,-25432(gp)
   3159c:	e0fffc17 	ldw	r3,-16(fp)
   315a0:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   315a4:	e0bffc17 	ldw	r2,-16(fp)
   315a8:	e0fffd0b 	ldhu	r3,-12(fp)
   315ac:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   315b0:	e0bffc17 	ldw	r2,-16(fp)
   315b4:	e0fffe03 	ldbu	r3,-8(fp)
   315b8:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   315bc:	d0e72a17 	ldw	r3,-25432(gp)
   315c0:	e0bffc17 	ldw	r2,-16(fp)
   315c4:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   315c8:	e0bffb17 	ldw	r2,-20(fp)
   315cc:	10c00117 	ldw	r3,4(r2)
   315d0:	e0bffc17 	ldw	r2,-16(fp)
   315d4:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   315d8:	e0bffc17 	ldw	r2,-16(fp)
   315dc:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   315e0:	e0bffc17 	ldw	r2,-16(fp)
   315e4:	e0fffb17 	ldw	r3,-20(fp)
   315e8:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   315ec:	e0bffb17 	ldw	r2,-20(fp)
   315f0:	10800117 	ldw	r2,4(r2)
   315f4:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   315f8:	e0bff917 	ldw	r2,-28(fp)
   315fc:	10000326 	beq	r2,zero,3160c <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   31600:	e0bff917 	ldw	r2,-28(fp)
   31604:	e0fffc17 	ldw	r3,-16(fp)
   31608:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   3160c:	e0bffb17 	ldw	r2,-20(fp)
   31610:	e0fffc17 	ldw	r3,-16(fp)
   31614:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   31618:	d0a72a17 	ldw	r2,-25432(gp)
   3161c:	10800d03 	ldbu	r2,52(r2)
   31620:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   31624:	e0fffa03 	ldbu	r3,-24(fp)
   31628:	e13ffa03 	ldbu	r4,-24(fp)
   3162c:	d0a72744 	addi	r2,gp,-25443
   31630:	2085883a 	add	r2,r4,r2
   31634:	10800003 	ldbu	r2,0(r2)
   31638:	1009883a 	mov	r4,r2
   3163c:	d0a72a17 	ldw	r2,-25432(gp)
   31640:	10800d43 	ldbu	r2,53(r2)
   31644:	0084303a 	nor	r2,zero,r2
   31648:	2084703a 	and	r2,r4,r2
   3164c:	1009883a 	mov	r4,r2
   31650:	d0a72744 	addi	r2,gp,-25443
   31654:	1885883a 	add	r2,r3,r2
   31658:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   3165c:	e0fffa03 	ldbu	r3,-24(fp)
   31660:	d0a72744 	addi	r2,gp,-25443
   31664:	1885883a 	add	r2,r3,r2
   31668:	10800003 	ldbu	r2,0(r2)
   3166c:	10803fcc 	andi	r2,r2,255
   31670:	1000071e 	bne	r2,zero,31690 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   31674:	d0a72a17 	ldw	r2,-25432(gp)
   31678:	10800d83 	ldbu	r2,54(r2)
   3167c:	0084303a 	nor	r2,zero,r2
   31680:	1007883a 	mov	r3,r2
   31684:	d0a72703 	ldbu	r2,-25444(gp)
   31688:	1884703a 	and	r2,r3,r2
   3168c:	d0a72705 	stb	r2,-25444(gp)
    }
}
   31690:	0001883a 	nop
   31694:	e037883a 	mov	sp,fp
   31698:	df000017 	ldw	fp,0(sp)
   3169c:	dec00104 	addi	sp,sp,4
   316a0:	f800283a 	ret

000316a4 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   316a4:	defffb04 	addi	sp,sp,-20
   316a8:	dfc00415 	stw	ra,16(sp)
   316ac:	df000315 	stw	fp,12(sp)
   316b0:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   316b4:	0140dc04 	movi	r5,880
   316b8:	01000134 	movhi	r4,4
   316bc:	212e1004 	addi	r4,r4,-18368
   316c0:	002f8e80 	call	2f8e8 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   316c4:	00800134 	movhi	r2,4
   316c8:	10ae1004 	addi	r2,r2,-18368
   316cc:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   316d0:	00800134 	movhi	r2,4
   316d4:	10ae1b04 	addi	r2,r2,-18324
   316d8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   316dc:	e03ffd0d 	sth	zero,-12(fp)
   316e0:	00001306 	br	31730 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   316e4:	e0bffe17 	ldw	r2,-8(fp)
   316e8:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   316ec:	e0bffe17 	ldw	r2,-8(fp)
   316f0:	e0ffff17 	ldw	r3,-4(fp)
   316f4:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   316f8:	e0bffe17 	ldw	r2,-8(fp)
   316fc:	00c00fc4 	movi	r3,63
   31700:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   31704:	e0bffe17 	ldw	r2,-8(fp)
   31708:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   3170c:	e0bffe17 	ldw	r2,-8(fp)
   31710:	10800b04 	addi	r2,r2,44
   31714:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   31718:	e0bfff17 	ldw	r2,-4(fp)
   3171c:	10800b04 	addi	r2,r2,44
   31720:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   31724:	e0bffd0b 	ldhu	r2,-12(fp)
   31728:	10800044 	addi	r2,r2,1
   3172c:	e0bffd0d 	sth	r2,-12(fp)
   31730:	e0bffd0b 	ldhu	r2,-12(fp)
   31734:	108004f0 	cmpltui	r2,r2,19
   31738:	103fea1e 	bne	r2,zero,316e4 <_gp+0xfffefb98>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   3173c:	e0bffe17 	ldw	r2,-8(fp)
   31740:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   31744:	e0bffe17 	ldw	r2,-8(fp)
   31748:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   3174c:	e0bffe17 	ldw	r2,-8(fp)
   31750:	00c00fc4 	movi	r3,63
   31754:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   31758:	e0bffe17 	ldw	r2,-8(fp)
   3175c:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   31760:	00800134 	movhi	r2,4
   31764:	10ae1004 	addi	r2,r2,-18368
   31768:	d0a72c15 	stw	r2,-25424(gp)
#endif
}
   3176c:	0001883a 	nop
   31770:	e037883a 	mov	sp,fp
   31774:	dfc00117 	ldw	ra,4(sp)
   31778:	df000017 	ldw	fp,0(sp)
   3177c:	dec00204 	addi	sp,sp,8
   31780:	f800283a 	ret

00031784 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   31784:	defffa04 	addi	sp,sp,-24
   31788:	dfc00515 	stw	ra,20(sp)
   3178c:	df000415 	stw	fp,16(sp)
   31790:	df000404 	addi	fp,sp,16
   31794:	e13ffe15 	stw	r4,-8(fp)
   31798:	2805883a 	mov	r2,r5
   3179c:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   317a0:	e0bffe17 	ldw	r2,-8(fp)
   317a4:	10800217 	ldw	r2,8(r2)
   317a8:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   317ac:	e0bffd17 	ldw	r2,-12(fp)
   317b0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   317b4:	e0bffd17 	ldw	r2,-12(fp)
   317b8:	e0ffff0b 	ldhu	r3,-4(fp)
   317bc:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   317c0:	e0bffd17 	ldw	r2,-12(fp)
   317c4:	10c00c03 	ldbu	r3,48(r2)
   317c8:	00bff7c4 	movi	r2,-33
   317cc:	1884703a 	and	r2,r3,r2
   317d0:	1007883a 	mov	r3,r2
   317d4:	e0bffd17 	ldw	r2,-12(fp)
   317d8:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   317dc:	e0bffd17 	ldw	r2,-12(fp)
   317e0:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   317e4:	e0bffd17 	ldw	r2,-12(fp)
   317e8:	10800c03 	ldbu	r2,48(r2)
   317ec:	10803fcc 	andi	r2,r2,255
   317f0:	1000181e 	bne	r2,zero,31854 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   317f4:	e0bffd17 	ldw	r2,-12(fp)
   317f8:	10c00d83 	ldbu	r3,54(r2)
   317fc:	d0a72703 	ldbu	r2,-25444(gp)
   31800:	1884b03a 	or	r2,r3,r2
   31804:	d0a72705 	stb	r2,-25444(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   31808:	e0bffd17 	ldw	r2,-12(fp)
   3180c:	10800d03 	ldbu	r2,52(r2)
   31810:	10c03fcc 	andi	r3,r2,255
   31814:	e0bffd17 	ldw	r2,-12(fp)
   31818:	10800d03 	ldbu	r2,52(r2)
   3181c:	11003fcc 	andi	r4,r2,255
   31820:	d0a72744 	addi	r2,gp,-25443
   31824:	2085883a 	add	r2,r4,r2
   31828:	11000003 	ldbu	r4,0(r2)
   3182c:	e0bffd17 	ldw	r2,-12(fp)
   31830:	10800d43 	ldbu	r2,53(r2)
   31834:	2084b03a 	or	r2,r4,r2
   31838:	1009883a 	mov	r4,r2
   3183c:	d0a72744 	addi	r2,gp,-25443
   31840:	1885883a 	add	r2,r3,r2
   31844:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   31848:	00800044 	movi	r2,1
   3184c:	e0bffc05 	stb	r2,-16(fp)
   31850:	00000106 	br	31858 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   31854:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   31858:	e13ffe17 	ldw	r4,-8(fp)
   3185c:	00318780 	call	31878 <OS_FlagUnlink>
    return (sched);
   31860:	e0bffc03 	ldbu	r2,-16(fp)
}
   31864:	e037883a 	mov	sp,fp
   31868:	dfc00117 	ldw	ra,4(sp)
   3186c:	df000017 	ldw	fp,0(sp)
   31870:	dec00204 	addi	sp,sp,8
   31874:	f800283a 	ret

00031878 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   31878:	defffa04 	addi	sp,sp,-24
   3187c:	df000515 	stw	fp,20(sp)
   31880:	df000504 	addi	fp,sp,20
   31884:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   31888:	e0bfff17 	ldw	r2,-4(fp)
   3188c:	10800117 	ldw	r2,4(r2)
   31890:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   31894:	e0bfff17 	ldw	r2,-4(fp)
   31898:	10800017 	ldw	r2,0(r2)
   3189c:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   318a0:	e0bffb17 	ldw	r2,-20(fp)
   318a4:	10000b1e 	bne	r2,zero,318d4 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   318a8:	e0bfff17 	ldw	r2,-4(fp)
   318ac:	10800317 	ldw	r2,12(r2)
   318b0:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   318b4:	e0bffd17 	ldw	r2,-12(fp)
   318b8:	e0fffc17 	ldw	r3,-16(fp)
   318bc:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   318c0:	e0bffc17 	ldw	r2,-16(fp)
   318c4:	10000b26 	beq	r2,zero,318f4 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   318c8:	e0bffc17 	ldw	r2,-16(fp)
   318cc:	10000115 	stw	zero,4(r2)
   318d0:	00000806 	br	318f4 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   318d4:	e0bffb17 	ldw	r2,-20(fp)
   318d8:	e0fffc17 	ldw	r3,-16(fp)
   318dc:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   318e0:	e0bffc17 	ldw	r2,-16(fp)
   318e4:	10000326 	beq	r2,zero,318f4 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   318e8:	e0bffc17 	ldw	r2,-16(fp)
   318ec:	e0fffb17 	ldw	r3,-20(fp)
   318f0:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   318f4:	e0bfff17 	ldw	r2,-4(fp)
   318f8:	10800217 	ldw	r2,8(r2)
   318fc:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   31900:	e0bffe17 	ldw	r2,-8(fp)
   31904:	10000a15 	stw	zero,40(r2)
#endif
}
   31908:	0001883a 	nop
   3190c:	e037883a 	mov	sp,fp
   31910:	df000017 	ldw	fp,0(sp)
   31914:	dec00104 	addi	sp,sp,4
   31918:	f800283a 	ret

0003191c <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   3191c:	defff404 	addi	sp,sp,-48
   31920:	df000b15 	stw	fp,44(sp)
   31924:	df000b04 	addi	fp,sp,44
   31928:	e13ffc15 	stw	r4,-16(fp)
   3192c:	e17ffd15 	stw	r5,-12(fp)
   31930:	e1bffe15 	stw	r6,-8(fp)
   31934:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   31938:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   3193c:	e0bfff17 	ldw	r2,-4(fp)
   31940:	1000021e 	bne	r2,zero,3194c <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   31944:	0005883a 	mov	r2,zero
   31948:	00006506 	br	31ae0 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   3194c:	e0bffc17 	ldw	r2,-16(fp)
   31950:	1000051e 	bne	r2,zero,31968 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   31954:	e0bfff17 	ldw	r2,-4(fp)
   31958:	00c01884 	movi	r3,98
   3195c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   31960:	0005883a 	mov	r2,zero
   31964:	00005e06 	br	31ae0 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   31968:	e0bffc17 	ldw	r2,-16(fp)
   3196c:	108000cc 	andi	r2,r2,3
   31970:	10000526 	beq	r2,zero,31988 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   31974:	e0bfff17 	ldw	r2,-4(fp)
   31978:	00c01884 	movi	r3,98
   3197c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   31980:	0005883a 	mov	r2,zero
   31984:	00005606 	br	31ae0 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   31988:	e0bffd17 	ldw	r2,-12(fp)
   3198c:	108000a8 	cmpgeui	r2,r2,2
   31990:	1000051e 	bne	r2,zero,319a8 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   31994:	e0bfff17 	ldw	r2,-4(fp)
   31998:	00c016c4 	movi	r3,91
   3199c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   319a0:	0005883a 	mov	r2,zero
   319a4:	00004e06 	br	31ae0 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   319a8:	e0bffe17 	ldw	r2,-8(fp)
   319ac:	10800128 	cmpgeui	r2,r2,4
   319b0:	1000051e 	bne	r2,zero,319c8 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   319b4:	e0bfff17 	ldw	r2,-4(fp)
   319b8:	00c01704 	movi	r3,92
   319bc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   319c0:	0005883a 	mov	r2,zero
   319c4:	00004606 	br	31ae0 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   319c8:	0005303a 	rdctl	r2,status
   319cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   319d0:	e0fffb17 	ldw	r3,-20(fp)
   319d4:	00bfff84 	movi	r2,-2
   319d8:	1884703a 	and	r2,r3,r2
   319dc:	1001703a 	wrctl	status,r2
  
  return context;
   319e0:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   319e4:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   319e8:	d0a72417 	ldw	r2,-25456(gp)
   319ec:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   319f0:	d0a72417 	ldw	r2,-25456(gp)
   319f4:	10000326 	beq	r2,zero,31a04 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   319f8:	d0a72417 	ldw	r2,-25456(gp)
   319fc:	10800117 	ldw	r2,4(r2)
   31a00:	d0a72415 	stw	r2,-25456(gp)
   31a04:	e0bff817 	ldw	r2,-32(fp)
   31a08:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31a0c:	e0bff917 	ldw	r2,-28(fp)
   31a10:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   31a14:	e0bffa17 	ldw	r2,-24(fp)
   31a18:	1000051e 	bne	r2,zero,31a30 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   31a1c:	e0bfff17 	ldw	r2,-4(fp)
   31a20:	00c01684 	movi	r3,90
   31a24:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   31a28:	0005883a 	mov	r2,zero
   31a2c:	00002c06 	br	31ae0 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   31a30:	e0bffc17 	ldw	r2,-16(fp)
   31a34:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   31a38:	e0fffc17 	ldw	r3,-16(fp)
   31a3c:	e0bffe17 	ldw	r2,-8(fp)
   31a40:	1885883a 	add	r2,r3,r2
   31a44:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   31a48:	e03ff715 	stw	zero,-36(fp)
   31a4c:	00000c06 	br	31a80 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   31a50:	e0bff617 	ldw	r2,-40(fp)
   31a54:	e0fff517 	ldw	r3,-44(fp)
   31a58:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   31a5c:	e0bff517 	ldw	r2,-44(fp)
   31a60:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   31a64:	e0fff517 	ldw	r3,-44(fp)
   31a68:	e0bffe17 	ldw	r2,-8(fp)
   31a6c:	1885883a 	add	r2,r3,r2
   31a70:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   31a74:	e0bff717 	ldw	r2,-36(fp)
   31a78:	10800044 	addi	r2,r2,1
   31a7c:	e0bff715 	stw	r2,-36(fp)
   31a80:	e0bffd17 	ldw	r2,-12(fp)
   31a84:	10bfffc4 	addi	r2,r2,-1
   31a88:	e0fff717 	ldw	r3,-36(fp)
   31a8c:	18bff036 	bltu	r3,r2,31a50 <_gp+0xfffeff04>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   31a90:	e0bff617 	ldw	r2,-40(fp)
   31a94:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   31a98:	e0bffa17 	ldw	r2,-24(fp)
   31a9c:	e0fffc17 	ldw	r3,-16(fp)
   31aa0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   31aa4:	e0bffa17 	ldw	r2,-24(fp)
   31aa8:	e0fffc17 	ldw	r3,-16(fp)
   31aac:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   31ab0:	e0bffa17 	ldw	r2,-24(fp)
   31ab4:	e0fffd17 	ldw	r3,-12(fp)
   31ab8:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   31abc:	e0bffa17 	ldw	r2,-24(fp)
   31ac0:	e0fffd17 	ldw	r3,-12(fp)
   31ac4:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   31ac8:	e0bffa17 	ldw	r2,-24(fp)
   31acc:	e0fffe17 	ldw	r3,-8(fp)
   31ad0:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   31ad4:	e0bfff17 	ldw	r2,-4(fp)
   31ad8:	10000005 	stb	zero,0(r2)
    return (pmem);
   31adc:	e0bffa17 	ldw	r2,-24(fp)
}
   31ae0:	e037883a 	mov	sp,fp
   31ae4:	df000017 	ldw	fp,0(sp)
   31ae8:	dec00104 	addi	sp,sp,4
   31aec:	f800283a 	ret

00031af0 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   31af0:	defff804 	addi	sp,sp,-32
   31af4:	df000715 	stw	fp,28(sp)
   31af8:	df000704 	addi	fp,sp,28
   31afc:	e13ffe15 	stw	r4,-8(fp)
   31b00:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   31b04:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   31b08:	e0bfff17 	ldw	r2,-4(fp)
   31b0c:	1000021e 	bne	r2,zero,31b18 <OSMemGet+0x28>
        return ((void *)0);
   31b10:	0005883a 	mov	r2,zero
   31b14:	00002e06 	br	31bd0 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   31b18:	e0bffe17 	ldw	r2,-8(fp)
   31b1c:	1000051e 	bne	r2,zero,31b34 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   31b20:	e0bfff17 	ldw	r2,-4(fp)
   31b24:	00c01804 	movi	r3,96
   31b28:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   31b2c:	0005883a 	mov	r2,zero
   31b30:	00002706 	br	31bd0 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31b34:	0005303a 	rdctl	r2,status
   31b38:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31b3c:	e0fffd17 	ldw	r3,-12(fp)
   31b40:	00bfff84 	movi	r2,-2
   31b44:	1884703a 	and	r2,r3,r2
   31b48:	1001703a 	wrctl	status,r2
  
  return context;
   31b4c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   31b50:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   31b54:	e0bffe17 	ldw	r2,-8(fp)
   31b58:	10800417 	ldw	r2,16(r2)
   31b5c:	10001426 	beq	r2,zero,31bb0 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   31b60:	e0bffe17 	ldw	r2,-8(fp)
   31b64:	10800117 	ldw	r2,4(r2)
   31b68:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   31b6c:	e0bffb17 	ldw	r2,-20(fp)
   31b70:	10c00017 	ldw	r3,0(r2)
   31b74:	e0bffe17 	ldw	r2,-8(fp)
   31b78:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   31b7c:	e0bffe17 	ldw	r2,-8(fp)
   31b80:	10800417 	ldw	r2,16(r2)
   31b84:	10ffffc4 	addi	r3,r2,-1
   31b88:	e0bffe17 	ldw	r2,-8(fp)
   31b8c:	10c00415 	stw	r3,16(r2)
   31b90:	e0bff917 	ldw	r2,-28(fp)
   31b94:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31b98:	e0bffa17 	ldw	r2,-24(fp)
   31b9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   31ba0:	e0bfff17 	ldw	r2,-4(fp)
   31ba4:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   31ba8:	e0bffb17 	ldw	r2,-20(fp)
   31bac:	00000806 	br	31bd0 <OSMemGet+0xe0>
   31bb0:	e0bff917 	ldw	r2,-28(fp)
   31bb4:	e0bffc15 	stw	r2,-16(fp)
   31bb8:	e0bffc17 	ldw	r2,-16(fp)
   31bbc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   31bc0:	e0bfff17 	ldw	r2,-4(fp)
   31bc4:	00c01744 	movi	r3,93
   31bc8:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   31bcc:	0005883a 	mov	r2,zero
}
   31bd0:	e037883a 	mov	sp,fp
   31bd4:	df000017 	ldw	fp,0(sp)
   31bd8:	dec00104 	addi	sp,sp,4
   31bdc:	f800283a 	ret

00031be0 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   31be0:	defff704 	addi	sp,sp,-36
   31be4:	dfc00815 	stw	ra,32(sp)
   31be8:	df000715 	stw	fp,28(sp)
   31bec:	df000704 	addi	fp,sp,28
   31bf0:	e13ffd15 	stw	r4,-12(fp)
   31bf4:	e17ffe15 	stw	r5,-8(fp)
   31bf8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   31bfc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   31c00:	e0bfff17 	ldw	r2,-4(fp)
   31c04:	1000021e 	bne	r2,zero,31c10 <OSMemNameGet+0x30>
        return (0);
   31c08:	0005883a 	mov	r2,zero
   31c0c:	00002b06 	br	31cbc <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   31c10:	e0bffd17 	ldw	r2,-12(fp)
   31c14:	1000051e 	bne	r2,zero,31c2c <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   31c18:	e0bfff17 	ldw	r2,-4(fp)
   31c1c:	00c01804 	movi	r3,96
   31c20:	10c00005 	stb	r3,0(r2)
        return (0);
   31c24:	0005883a 	mov	r2,zero
   31c28:	00002406 	br	31cbc <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   31c2c:	e0bffe17 	ldw	r2,-8(fp)
   31c30:	1000051e 	bne	r2,zero,31c48 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   31c34:	e0bfff17 	ldw	r2,-4(fp)
   31c38:	00c00304 	movi	r3,12
   31c3c:	10c00005 	stb	r3,0(r2)
        return (0);
   31c40:	0005883a 	mov	r2,zero
   31c44:	00001d06 	br	31cbc <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   31c48:	d0a72903 	ldbu	r2,-25436(gp)
   31c4c:	10803fcc 	andi	r2,r2,255
   31c50:	10000526 	beq	r2,zero,31c68 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   31c54:	e0bfff17 	ldw	r2,-4(fp)
   31c58:	00c00444 	movi	r3,17
   31c5c:	10c00005 	stb	r3,0(r2)
        return (0);
   31c60:	0005883a 	mov	r2,zero
   31c64:	00001506 	br	31cbc <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31c68:	0005303a 	rdctl	r2,status
   31c6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31c70:	e0fffb17 	ldw	r3,-20(fp)
   31c74:	00bfff84 	movi	r2,-2
   31c78:	1884703a 	and	r2,r3,r2
   31c7c:	1001703a 	wrctl	status,r2
  
  return context;
   31c80:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   31c84:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   31c88:	e0bffd17 	ldw	r2,-12(fp)
   31c8c:	10800504 	addi	r2,r2,20
   31c90:	100b883a 	mov	r5,r2
   31c94:	e13ffe17 	ldw	r4,-8(fp)
   31c98:	002fae80 	call	2fae8 <OS_StrCopy>
   31c9c:	e0bffa05 	stb	r2,-24(fp)
   31ca0:	e0bff917 	ldw	r2,-28(fp)
   31ca4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31ca8:	e0bffc17 	ldw	r2,-16(fp)
   31cac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   31cb0:	e0bfff17 	ldw	r2,-4(fp)
   31cb4:	10000005 	stb	zero,0(r2)
    return (len);
   31cb8:	e0bffa03 	ldbu	r2,-24(fp)
}
   31cbc:	e037883a 	mov	sp,fp
   31cc0:	dfc00117 	ldw	ra,4(sp)
   31cc4:	df000017 	ldw	fp,0(sp)
   31cc8:	dec00204 	addi	sp,sp,8
   31ccc:	f800283a 	ret

00031cd0 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   31cd0:	defff604 	addi	sp,sp,-40
   31cd4:	dfc00915 	stw	ra,36(sp)
   31cd8:	df000815 	stw	fp,32(sp)
   31cdc:	df000804 	addi	fp,sp,32
   31ce0:	e13ffd15 	stw	r4,-12(fp)
   31ce4:	e17ffe15 	stw	r5,-8(fp)
   31ce8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   31cec:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   31cf0:	e0bfff17 	ldw	r2,-4(fp)
   31cf4:	10003526 	beq	r2,zero,31dcc <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   31cf8:	e0bffd17 	ldw	r2,-12(fp)
   31cfc:	1000041e 	bne	r2,zero,31d10 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   31d00:	e0bfff17 	ldw	r2,-4(fp)
   31d04:	00c01804 	movi	r3,96
   31d08:	10c00005 	stb	r3,0(r2)
        return;
   31d0c:	00003006 	br	31dd0 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   31d10:	e0bffe17 	ldw	r2,-8(fp)
   31d14:	1000041e 	bne	r2,zero,31d28 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   31d18:	e0bfff17 	ldw	r2,-4(fp)
   31d1c:	00c00304 	movi	r3,12
   31d20:	10c00005 	stb	r3,0(r2)
        return;
   31d24:	00002a06 	br	31dd0 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   31d28:	d0a72903 	ldbu	r2,-25436(gp)
   31d2c:	10803fcc 	andi	r2,r2,255
   31d30:	10000426 	beq	r2,zero,31d44 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   31d34:	e0bfff17 	ldw	r2,-4(fp)
   31d38:	00c00484 	movi	r3,18
   31d3c:	10c00005 	stb	r3,0(r2)
        return;
   31d40:	00002306 	br	31dd0 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31d44:	0005303a 	rdctl	r2,status
   31d48:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31d4c:	e0fffc17 	ldw	r3,-16(fp)
   31d50:	00bfff84 	movi	r2,-2
   31d54:	1884703a 	and	r2,r3,r2
   31d58:	1001703a 	wrctl	status,r2
  
  return context;
   31d5c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   31d60:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   31d64:	e13ffe17 	ldw	r4,-8(fp)
   31d68:	002fb5c0 	call	2fb5c <OS_StrLen>
   31d6c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   31d70:	e0bffa03 	ldbu	r2,-24(fp)
   31d74:	10800830 	cmpltui	r2,r2,32
   31d78:	1000081e 	bne	r2,zero,31d9c <OSMemNameSet+0xcc>
   31d7c:	e0bff817 	ldw	r2,-32(fp)
   31d80:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31d84:	e0bff917 	ldw	r2,-28(fp)
   31d88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   31d8c:	e0bfff17 	ldw	r2,-4(fp)
   31d90:	00c018c4 	movi	r3,99
   31d94:	10c00005 	stb	r3,0(r2)
        return;
   31d98:	00000d06 	br	31dd0 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   31d9c:	e0bffd17 	ldw	r2,-12(fp)
   31da0:	10800504 	addi	r2,r2,20
   31da4:	e17ffe17 	ldw	r5,-8(fp)
   31da8:	1009883a 	mov	r4,r2
   31dac:	002fae80 	call	2fae8 <OS_StrCopy>
   31db0:	e0bff817 	ldw	r2,-32(fp)
   31db4:	e0bffb15 	stw	r2,-20(fp)
   31db8:	e0bffb17 	ldw	r2,-20(fp)
   31dbc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   31dc0:	e0bfff17 	ldw	r2,-4(fp)
   31dc4:	10000005 	stb	zero,0(r2)
   31dc8:	00000106 	br	31dd0 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   31dcc:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   31dd0:	e037883a 	mov	sp,fp
   31dd4:	dfc00117 	ldw	ra,4(sp)
   31dd8:	df000017 	ldw	fp,0(sp)
   31ddc:	dec00204 	addi	sp,sp,8
   31de0:	f800283a 	ret

00031de4 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   31de4:	defff904 	addi	sp,sp,-28
   31de8:	df000615 	stw	fp,24(sp)
   31dec:	df000604 	addi	fp,sp,24
   31df0:	e13ffe15 	stw	r4,-8(fp)
   31df4:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   31df8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   31dfc:	e0bffe17 	ldw	r2,-8(fp)
   31e00:	1000021e 	bne	r2,zero,31e0c <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   31e04:	00801804 	movi	r2,96
   31e08:	00002806 	br	31eac <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   31e0c:	e0bfff17 	ldw	r2,-4(fp)
   31e10:	1000021e 	bne	r2,zero,31e1c <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   31e14:	008017c4 	movi	r2,95
   31e18:	00002406 	br	31eac <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31e1c:	0005303a 	rdctl	r2,status
   31e20:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31e24:	e0fffd17 	ldw	r3,-12(fp)
   31e28:	00bfff84 	movi	r2,-2
   31e2c:	1884703a 	and	r2,r3,r2
   31e30:	1001703a 	wrctl	status,r2
  
  return context;
   31e34:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   31e38:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   31e3c:	e0bffe17 	ldw	r2,-8(fp)
   31e40:	10c00417 	ldw	r3,16(r2)
   31e44:	e0bffe17 	ldw	r2,-8(fp)
   31e48:	10800317 	ldw	r2,12(r2)
   31e4c:	18800636 	bltu	r3,r2,31e68 <OSMemPut+0x84>
   31e50:	e0bffa17 	ldw	r2,-24(fp)
   31e54:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31e58:	e0bffb17 	ldw	r2,-20(fp)
   31e5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   31e60:	00801784 	movi	r2,94
   31e64:	00001106 	br	31eac <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   31e68:	e0bffe17 	ldw	r2,-8(fp)
   31e6c:	10c00117 	ldw	r3,4(r2)
   31e70:	e0bfff17 	ldw	r2,-4(fp)
   31e74:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   31e78:	e0bffe17 	ldw	r2,-8(fp)
   31e7c:	e0ffff17 	ldw	r3,-4(fp)
   31e80:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   31e84:	e0bffe17 	ldw	r2,-8(fp)
   31e88:	10800417 	ldw	r2,16(r2)
   31e8c:	10c00044 	addi	r3,r2,1
   31e90:	e0bffe17 	ldw	r2,-8(fp)
   31e94:	10c00415 	stw	r3,16(r2)
   31e98:	e0bffa17 	ldw	r2,-24(fp)
   31e9c:	e0bffc15 	stw	r2,-16(fp)
   31ea0:	e0bffc17 	ldw	r2,-16(fp)
   31ea4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   31ea8:	0005883a 	mov	r2,zero
}
   31eac:	e037883a 	mov	sp,fp
   31eb0:	df000017 	ldw	fp,0(sp)
   31eb4:	dec00104 	addi	sp,sp,4
   31eb8:	f800283a 	ret

00031ebc <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   31ebc:	defffa04 	addi	sp,sp,-24
   31ec0:	df000515 	stw	fp,20(sp)
   31ec4:	df000504 	addi	fp,sp,20
   31ec8:	e13ffe15 	stw	r4,-8(fp)
   31ecc:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   31ed0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   31ed4:	e0bffe17 	ldw	r2,-8(fp)
   31ed8:	1000021e 	bne	r2,zero,31ee4 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   31edc:	00801804 	movi	r2,96
   31ee0:	00002c06 	br	31f94 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   31ee4:	e0bfff17 	ldw	r2,-4(fp)
   31ee8:	1000021e 	bne	r2,zero,31ef4 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   31eec:	00801844 	movi	r2,97
   31ef0:	00002806 	br	31f94 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31ef4:	0005303a 	rdctl	r2,status
   31ef8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31efc:	e0fffc17 	ldw	r3,-16(fp)
   31f00:	00bfff84 	movi	r2,-2
   31f04:	1884703a 	and	r2,r3,r2
   31f08:	1001703a 	wrctl	status,r2
  
  return context;
   31f0c:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   31f10:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   31f14:	e0bffe17 	ldw	r2,-8(fp)
   31f18:	10c00017 	ldw	r3,0(r2)
   31f1c:	e0bfff17 	ldw	r2,-4(fp)
   31f20:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   31f24:	e0bffe17 	ldw	r2,-8(fp)
   31f28:	10c00117 	ldw	r3,4(r2)
   31f2c:	e0bfff17 	ldw	r2,-4(fp)
   31f30:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   31f34:	e0bffe17 	ldw	r2,-8(fp)
   31f38:	10c00217 	ldw	r3,8(r2)
   31f3c:	e0bfff17 	ldw	r2,-4(fp)
   31f40:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   31f44:	e0bffe17 	ldw	r2,-8(fp)
   31f48:	10c00317 	ldw	r3,12(r2)
   31f4c:	e0bfff17 	ldw	r2,-4(fp)
   31f50:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   31f54:	e0bffe17 	ldw	r2,-8(fp)
   31f58:	10c00417 	ldw	r3,16(r2)
   31f5c:	e0bfff17 	ldw	r2,-4(fp)
   31f60:	10c00415 	stw	r3,16(r2)
   31f64:	e0bffb17 	ldw	r2,-20(fp)
   31f68:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31f6c:	e0bffd17 	ldw	r2,-12(fp)
   31f70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   31f74:	e0bfff17 	ldw	r2,-4(fp)
   31f78:	10c00317 	ldw	r3,12(r2)
   31f7c:	e0bfff17 	ldw	r2,-4(fp)
   31f80:	10800417 	ldw	r2,16(r2)
   31f84:	1887c83a 	sub	r3,r3,r2
   31f88:	e0bfff17 	ldw	r2,-4(fp)
   31f8c:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   31f90:	0005883a 	mov	r2,zero
}
   31f94:	e037883a 	mov	sp,fp
   31f98:	df000017 	ldw	fp,0(sp)
   31f9c:	dec00104 	addi	sp,sp,4
   31fa0:	f800283a 	ret

00031fa4 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   31fa4:	defffc04 	addi	sp,sp,-16
   31fa8:	dfc00315 	stw	ra,12(sp)
   31fac:	df000215 	stw	fp,8(sp)
   31fb0:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   31fb4:	01430c04 	movi	r5,3120
   31fb8:	01000134 	movhi	r4,4
   31fbc:	212eec04 	addi	r4,r4,-17488
   31fc0:	002f8e80 	call	2f8e8 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   31fc4:	00800134 	movhi	r2,4
   31fc8:	10aeec04 	addi	r2,r2,-17488
   31fcc:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   31fd0:	e03fff0d 	sth	zero,-4(fp)
   31fd4:	00001306 	br	32024 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   31fd8:	e0bfff0b 	ldhu	r2,-4(fp)
   31fdc:	10800044 	addi	r2,r2,1
   31fe0:	10c00d24 	muli	r3,r2,52
   31fe4:	00800134 	movhi	r2,4
   31fe8:	10aeec04 	addi	r2,r2,-17488
   31fec:	1887883a 	add	r3,r3,r2
   31ff0:	e0bffe17 	ldw	r2,-8(fp)
   31ff4:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   31ff8:	e0bffe17 	ldw	r2,-8(fp)
   31ffc:	00c00fc4 	movi	r3,63
   32000:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   32004:	e0bffe17 	ldw	r2,-8(fp)
   32008:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   3200c:	e0bffe17 	ldw	r2,-8(fp)
   32010:	10800d04 	addi	r2,r2,52
   32014:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   32018:	e0bfff0b 	ldhu	r2,-4(fp)
   3201c:	10800044 	addi	r2,r2,1
   32020:	e0bfff0d 	sth	r2,-4(fp)
   32024:	e0bfff0b 	ldhu	r2,-4(fp)
   32028:	10800ef0 	cmpltui	r2,r2,59
   3202c:	103fea1e 	bne	r2,zero,31fd8 <_gp+0xffff048c>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   32030:	e0bffe17 	ldw	r2,-8(fp)
   32034:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   32038:	e0bffe17 	ldw	r2,-8(fp)
   3203c:	00c00fc4 	movi	r3,63
   32040:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   32044:	e0bffe17 	ldw	r2,-8(fp)
   32048:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   3204c:	00800134 	movhi	r2,4
   32050:	10aeec04 	addi	r2,r2,-17488
   32054:	d0a72415 	stw	r2,-25456(gp)
#endif
}
   32058:	0001883a 	nop
   3205c:	e037883a 	mov	sp,fp
   32060:	dfc00117 	ldw	ra,4(sp)
   32064:	df000017 	ldw	fp,0(sp)
   32068:	dec00204 	addi	sp,sp,8
   3206c:	f800283a 	ret

00032070 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   32070:	defff804 	addi	sp,sp,-32
   32074:	df000715 	stw	fp,28(sp)
   32078:	df000704 	addi	fp,sp,28
   3207c:	e13ffe15 	stw	r4,-8(fp)
   32080:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   32084:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   32088:	e0bfff17 	ldw	r2,-4(fp)
   3208c:	1000021e 	bne	r2,zero,32098 <OSQAccept+0x28>
        return ((void *)0);
   32090:	0005883a 	mov	r2,zero
   32094:	00004206 	br	321a0 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   32098:	e0bffe17 	ldw	r2,-8(fp)
   3209c:	1000051e 	bne	r2,zero,320b4 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   320a0:	e0bfff17 	ldw	r2,-4(fp)
   320a4:	00c00104 	movi	r3,4
   320a8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   320ac:	0005883a 	mov	r2,zero
   320b0:	00003b06 	br	321a0 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   320b4:	e0bffe17 	ldw	r2,-8(fp)
   320b8:	10800003 	ldbu	r2,0(r2)
   320bc:	10803fcc 	andi	r2,r2,255
   320c0:	108000a0 	cmpeqi	r2,r2,2
   320c4:	1000051e 	bne	r2,zero,320dc <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   320c8:	e0bfff17 	ldw	r2,-4(fp)
   320cc:	00c00044 	movi	r3,1
   320d0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   320d4:	0005883a 	mov	r2,zero
   320d8:	00003106 	br	321a0 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   320dc:	0005303a 	rdctl	r2,status
   320e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   320e4:	e0fffd17 	ldw	r3,-12(fp)
   320e8:	00bfff84 	movi	r2,-2
   320ec:	1884703a 	and	r2,r3,r2
   320f0:	1001703a 	wrctl	status,r2
  
  return context;
   320f4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   320f8:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   320fc:	e0bffe17 	ldw	r2,-8(fp)
   32100:	10800117 	ldw	r2,4(r2)
   32104:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   32108:	e0bffc17 	ldw	r2,-16(fp)
   3210c:	1080058b 	ldhu	r2,22(r2)
   32110:	10bfffcc 	andi	r2,r2,65535
   32114:	10001926 	beq	r2,zero,3217c <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   32118:	e0bffc17 	ldw	r2,-16(fp)
   3211c:	10800417 	ldw	r2,16(r2)
   32120:	11000104 	addi	r4,r2,4
   32124:	e0fffc17 	ldw	r3,-16(fp)
   32128:	19000415 	stw	r4,16(r3)
   3212c:	10800017 	ldw	r2,0(r2)
   32130:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   32134:	e0bffc17 	ldw	r2,-16(fp)
   32138:	1080058b 	ldhu	r2,22(r2)
   3213c:	10bfffc4 	addi	r2,r2,-1
   32140:	1007883a 	mov	r3,r2
   32144:	e0bffc17 	ldw	r2,-16(fp)
   32148:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   3214c:	e0bffc17 	ldw	r2,-16(fp)
   32150:	10c00417 	ldw	r3,16(r2)
   32154:	e0bffc17 	ldw	r2,-16(fp)
   32158:	10800217 	ldw	r2,8(r2)
   3215c:	1880041e 	bne	r3,r2,32170 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   32160:	e0bffc17 	ldw	r2,-16(fp)
   32164:	10c00117 	ldw	r3,4(r2)
   32168:	e0bffc17 	ldw	r2,-16(fp)
   3216c:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   32170:	e0bfff17 	ldw	r2,-4(fp)
   32174:	10000005 	stb	zero,0(r2)
   32178:	00000406 	br	3218c <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   3217c:	e0bfff17 	ldw	r2,-4(fp)
   32180:	00c007c4 	movi	r3,31
   32184:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   32188:	e03ff915 	stw	zero,-28(fp)
   3218c:	e0bffa17 	ldw	r2,-24(fp)
   32190:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   32194:	e0bffb17 	ldw	r2,-20(fp)
   32198:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   3219c:	e0bff917 	ldw	r2,-28(fp)
}
   321a0:	e037883a 	mov	sp,fp
   321a4:	df000017 	ldw	fp,0(sp)
   321a8:	dec00104 	addi	sp,sp,4
   321ac:	f800283a 	ret

000321b0 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   321b0:	defff404 	addi	sp,sp,-48
   321b4:	dfc00b15 	stw	ra,44(sp)
   321b8:	df000a15 	stw	fp,40(sp)
   321bc:	df000a04 	addi	fp,sp,40
   321c0:	e13ffe15 	stw	r4,-8(fp)
   321c4:	2805883a 	mov	r2,r5
   321c8:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   321cc:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   321d0:	d0a72903 	ldbu	r2,-25436(gp)
   321d4:	10803fcc 	andi	r2,r2,255
   321d8:	10000226 	beq	r2,zero,321e4 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   321dc:	0005883a 	mov	r2,zero
   321e0:	00005906 	br	32348 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   321e4:	0005303a 	rdctl	r2,status
   321e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   321ec:	e0fffd17 	ldw	r3,-12(fp)
   321f0:	00bfff84 	movi	r2,-2
   321f4:	1884703a 	and	r2,r3,r2
   321f8:	1001703a 	wrctl	status,r2
  
  return context;
   321fc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   32200:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   32204:	d0a72817 	ldw	r2,-25440(gp)
   32208:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   3220c:	d0a72817 	ldw	r2,-25440(gp)
   32210:	10000326 	beq	r2,zero,32220 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   32214:	d0a72817 	ldw	r2,-25440(gp)
   32218:	10800117 	ldw	r2,4(r2)
   3221c:	d0a72815 	stw	r2,-25440(gp)
   32220:	e0bff717 	ldw	r2,-36(fp)
   32224:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   32228:	e0bff817 	ldw	r2,-32(fp)
   3222c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   32230:	e0bff617 	ldw	r2,-40(fp)
   32234:	10004326 	beq	r2,zero,32344 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   32238:	0005303a 	rdctl	r2,status
   3223c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   32240:	e0fff917 	ldw	r3,-28(fp)
   32244:	00bfff84 	movi	r2,-2
   32248:	1884703a 	and	r2,r3,r2
   3224c:	1001703a 	wrctl	status,r2
  
  return context;
   32250:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   32254:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   32258:	d0a72617 	ldw	r2,-25448(gp)
   3225c:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   32260:	e0bffb17 	ldw	r2,-20(fp)
   32264:	10002d26 	beq	r2,zero,3231c <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   32268:	d0a72617 	ldw	r2,-25448(gp)
   3226c:	10800017 	ldw	r2,0(r2)
   32270:	d0a72615 	stw	r2,-25448(gp)
   32274:	e0bff717 	ldw	r2,-36(fp)
   32278:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3227c:	e0bffa17 	ldw	r2,-24(fp)
   32280:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   32284:	e0bffb17 	ldw	r2,-20(fp)
   32288:	e0fffe17 	ldw	r3,-8(fp)
   3228c:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   32290:	e0bfff0b 	ldhu	r2,-4(fp)
   32294:	1085883a 	add	r2,r2,r2
   32298:	1085883a 	add	r2,r2,r2
   3229c:	1007883a 	mov	r3,r2
   322a0:	e0bffe17 	ldw	r2,-8(fp)
   322a4:	10c7883a 	add	r3,r2,r3
   322a8:	e0bffb17 	ldw	r2,-20(fp)
   322ac:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   322b0:	e0bffb17 	ldw	r2,-20(fp)
   322b4:	e0fffe17 	ldw	r3,-8(fp)
   322b8:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   322bc:	e0bffb17 	ldw	r2,-20(fp)
   322c0:	e0fffe17 	ldw	r3,-8(fp)
   322c4:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   322c8:	e0bffb17 	ldw	r2,-20(fp)
   322cc:	e0ffff0b 	ldhu	r3,-4(fp)
   322d0:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   322d4:	e0bffb17 	ldw	r2,-20(fp)
   322d8:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   322dc:	e0bff617 	ldw	r2,-40(fp)
   322e0:	00c00084 	movi	r3,2
   322e4:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   322e8:	e0bff617 	ldw	r2,-40(fp)
   322ec:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   322f0:	e0bff617 	ldw	r2,-40(fp)
   322f4:	e0fffb17 	ldw	r3,-20(fp)
   322f8:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   322fc:	e0bff617 	ldw	r2,-40(fp)
   32300:	00c00fc4 	movi	r3,63
   32304:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   32308:	e0bff617 	ldw	r2,-40(fp)
   3230c:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   32310:	e13ff617 	ldw	r4,-40(fp)
   32314:	002f5080 	call	2f508 <OS_EventWaitListInit>
   32318:	00000a06 	br	32344 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   3231c:	d0e72817 	ldw	r3,-25440(gp)
   32320:	e0bff617 	ldw	r2,-40(fp)
   32324:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   32328:	e0bff617 	ldw	r2,-40(fp)
   3232c:	d0a72815 	stw	r2,-25440(gp)
   32330:	e0bff717 	ldw	r2,-36(fp)
   32334:	e0bffc15 	stw	r2,-16(fp)
   32338:	e0bffc17 	ldw	r2,-16(fp)
   3233c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   32340:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   32344:	e0bff617 	ldw	r2,-40(fp)
}
   32348:	e037883a 	mov	sp,fp
   3234c:	dfc00117 	ldw	ra,4(sp)
   32350:	df000017 	ldw	fp,0(sp)
   32354:	dec00204 	addi	sp,sp,8
   32358:	f800283a 	ret

0003235c <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   3235c:	defff204 	addi	sp,sp,-56
   32360:	dfc00d15 	stw	ra,52(sp)
   32364:	df000c15 	stw	fp,48(sp)
   32368:	df000c04 	addi	fp,sp,48
   3236c:	e13ffd15 	stw	r4,-12(fp)
   32370:	2805883a 	mov	r2,r5
   32374:	e1bfff15 	stw	r6,-4(fp)
   32378:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   3237c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   32380:	e0bfff17 	ldw	r2,-4(fp)
   32384:	1000021e 	bne	r2,zero,32390 <OSQDel+0x34>
        return (pevent);
   32388:	e0bffd17 	ldw	r2,-12(fp)
   3238c:	00008e06 	br	325c8 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   32390:	e0bffd17 	ldw	r2,-12(fp)
   32394:	1000051e 	bne	r2,zero,323ac <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   32398:	e0bfff17 	ldw	r2,-4(fp)
   3239c:	00c00104 	movi	r3,4
   323a0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   323a4:	e0bffd17 	ldw	r2,-12(fp)
   323a8:	00008706 	br	325c8 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   323ac:	e0bffd17 	ldw	r2,-12(fp)
   323b0:	10800003 	ldbu	r2,0(r2)
   323b4:	10803fcc 	andi	r2,r2,255
   323b8:	108000a0 	cmpeqi	r2,r2,2
   323bc:	1000051e 	bne	r2,zero,323d4 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   323c0:	e0bfff17 	ldw	r2,-4(fp)
   323c4:	00c00044 	movi	r3,1
   323c8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   323cc:	e0bffd17 	ldw	r2,-12(fp)
   323d0:	00007d06 	br	325c8 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   323d4:	d0a72903 	ldbu	r2,-25436(gp)
   323d8:	10803fcc 	andi	r2,r2,255
   323dc:	10000526 	beq	r2,zero,323f4 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   323e0:	e0bfff17 	ldw	r2,-4(fp)
   323e4:	00c003c4 	movi	r3,15
   323e8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   323ec:	e0bffd17 	ldw	r2,-12(fp)
   323f0:	00007506 	br	325c8 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   323f4:	0005303a 	rdctl	r2,status
   323f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   323fc:	e0fffc17 	ldw	r3,-16(fp)
   32400:	00bfff84 	movi	r2,-2
   32404:	1884703a 	and	r2,r3,r2
   32408:	1001703a 	wrctl	status,r2
  
  return context;
   3240c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   32410:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   32414:	e0bffd17 	ldw	r2,-12(fp)
   32418:	10800283 	ldbu	r2,10(r2)
   3241c:	10803fcc 	andi	r2,r2,255
   32420:	10000326 	beq	r2,zero,32430 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   32424:	00800044 	movi	r2,1
   32428:	e0bff405 	stb	r2,-48(fp)
   3242c:	00000106 	br	32434 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   32430:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   32434:	e0bffe03 	ldbu	r2,-8(fp)
   32438:	10000326 	beq	r2,zero,32448 <OSQDel+0xec>
   3243c:	10800060 	cmpeqi	r2,r2,1
   32440:	1000301e 	bne	r2,zero,32504 <OSQDel+0x1a8>
   32444:	00005506 	br	3259c <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   32448:	e0bff403 	ldbu	r2,-48(fp)
   3244c:	10001e1e 	bne	r2,zero,324c8 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   32450:	e0bffd17 	ldw	r2,-12(fp)
   32454:	00c00fc4 	movi	r3,63
   32458:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   3245c:	e0bffd17 	ldw	r2,-12(fp)
   32460:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   32464:	e0bffd17 	ldw	r2,-12(fp)
   32468:	10800117 	ldw	r2,4(r2)
   3246c:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   32470:	d0e72617 	ldw	r3,-25448(gp)
   32474:	e0bff817 	ldw	r2,-32(fp)
   32478:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   3247c:	e0bff817 	ldw	r2,-32(fp)
   32480:	d0a72615 	stw	r2,-25448(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   32484:	e0bffd17 	ldw	r2,-12(fp)
   32488:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   3248c:	d0e72817 	ldw	r3,-25440(gp)
   32490:	e0bffd17 	ldw	r2,-12(fp)
   32494:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   32498:	e0bffd17 	ldw	r2,-12(fp)
   3249c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   324a0:	e0bffd17 	ldw	r2,-12(fp)
   324a4:	d0a72815 	stw	r2,-25440(gp)
   324a8:	e0bff617 	ldw	r2,-40(fp)
   324ac:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   324b0:	e0bff717 	ldw	r2,-36(fp)
   324b4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   324b8:	e0bfff17 	ldw	r2,-4(fp)
   324bc:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   324c0:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   324c4:	00003f06 	br	325c4 <OSQDel+0x268>
   324c8:	e0bff617 	ldw	r2,-40(fp)
   324cc:	e0bff915 	stw	r2,-28(fp)
   324d0:	e0bff917 	ldw	r2,-28(fp)
   324d4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   324d8:	e0bfff17 	ldw	r2,-4(fp)
   324dc:	00c01244 	movi	r3,73
   324e0:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   324e4:	e0bffd17 	ldw	r2,-12(fp)
   324e8:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   324ec:	00003506 	br	325c4 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   324f0:	000f883a 	mov	r7,zero
   324f4:	01800104 	movi	r6,4
   324f8:	000b883a 	mov	r5,zero
   324fc:	e13ffd17 	ldw	r4,-12(fp)
   32500:	002ef580 	call	2ef58 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   32504:	e0bffd17 	ldw	r2,-12(fp)
   32508:	10800283 	ldbu	r2,10(r2)
   3250c:	10803fcc 	andi	r2,r2,255
   32510:	103ff71e 	bne	r2,zero,324f0 <_gp+0xffff09a4>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   32514:	e0bffd17 	ldw	r2,-12(fp)
   32518:	00c00fc4 	movi	r3,63
   3251c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   32520:	e0bffd17 	ldw	r2,-12(fp)
   32524:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   32528:	e0bffd17 	ldw	r2,-12(fp)
   3252c:	10800117 	ldw	r2,4(r2)
   32530:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   32534:	d0e72617 	ldw	r3,-25448(gp)
   32538:	e0bff817 	ldw	r2,-32(fp)
   3253c:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   32540:	e0bff817 	ldw	r2,-32(fp)
   32544:	d0a72615 	stw	r2,-25448(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   32548:	e0bffd17 	ldw	r2,-12(fp)
   3254c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   32550:	d0e72817 	ldw	r3,-25440(gp)
   32554:	e0bffd17 	ldw	r2,-12(fp)
   32558:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   3255c:	e0bffd17 	ldw	r2,-12(fp)
   32560:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   32564:	e0bffd17 	ldw	r2,-12(fp)
   32568:	d0a72815 	stw	r2,-25440(gp)
   3256c:	e0bff617 	ldw	r2,-40(fp)
   32570:	e0bffa15 	stw	r2,-24(fp)
   32574:	e0bffa17 	ldw	r2,-24(fp)
   32578:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   3257c:	e0bff403 	ldbu	r2,-48(fp)
   32580:	10800058 	cmpnei	r2,r2,1
   32584:	1000011e 	bne	r2,zero,3258c <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   32588:	002f9a40 	call	2f9a4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   3258c:	e0bfff17 	ldw	r2,-4(fp)
   32590:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   32594:	e03ff515 	stw	zero,-44(fp)
             break;
   32598:	00000a06 	br	325c4 <OSQDel+0x268>
   3259c:	e0bff617 	ldw	r2,-40(fp)
   325a0:	e0bffb15 	stw	r2,-20(fp)
   325a4:	e0bffb17 	ldw	r2,-20(fp)
   325a8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   325ac:	e0bfff17 	ldw	r2,-4(fp)
   325b0:	00c001c4 	movi	r3,7
   325b4:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   325b8:	e0bffd17 	ldw	r2,-12(fp)
   325bc:	e0bff515 	stw	r2,-44(fp)
             break;
   325c0:	0001883a 	nop
    }
    return (pevent_return);
   325c4:	e0bff517 	ldw	r2,-44(fp)
}
   325c8:	e037883a 	mov	sp,fp
   325cc:	dfc00117 	ldw	ra,4(sp)
   325d0:	df000017 	ldw	fp,0(sp)
   325d4:	dec00204 	addi	sp,sp,8
   325d8:	f800283a 	ret

000325dc <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   325dc:	defffa04 	addi	sp,sp,-24
   325e0:	df000515 	stw	fp,20(sp)
   325e4:	df000504 	addi	fp,sp,20
   325e8:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   325ec:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   325f0:	e0bfff17 	ldw	r2,-4(fp)
   325f4:	1000021e 	bne	r2,zero,32600 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   325f8:	00800104 	movi	r2,4
   325fc:	00002106 	br	32684 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   32600:	e0bfff17 	ldw	r2,-4(fp)
   32604:	10800003 	ldbu	r2,0(r2)
   32608:	10803fcc 	andi	r2,r2,255
   3260c:	108000a0 	cmpeqi	r2,r2,2
   32610:	1000021e 	bne	r2,zero,3261c <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   32614:	00800044 	movi	r2,1
   32618:	00001a06 	br	32684 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3261c:	0005303a 	rdctl	r2,status
   32620:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   32624:	e0fffd17 	ldw	r3,-12(fp)
   32628:	00bfff84 	movi	r2,-2
   3262c:	1884703a 	and	r2,r3,r2
   32630:	1001703a 	wrctl	status,r2
  
  return context;
   32634:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   32638:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   3263c:	e0bfff17 	ldw	r2,-4(fp)
   32640:	10800117 	ldw	r2,4(r2)
   32644:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   32648:	e0bffc17 	ldw	r2,-16(fp)
   3264c:	10c00117 	ldw	r3,4(r2)
   32650:	e0bffc17 	ldw	r2,-16(fp)
   32654:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   32658:	e0bffc17 	ldw	r2,-16(fp)
   3265c:	10c00117 	ldw	r3,4(r2)
   32660:	e0bffc17 	ldw	r2,-16(fp)
   32664:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   32668:	e0bffc17 	ldw	r2,-16(fp)
   3266c:	1000058d 	sth	zero,22(r2)
   32670:	e0bffb17 	ldw	r2,-20(fp)
   32674:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   32678:	e0bffe17 	ldw	r2,-8(fp)
   3267c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   32680:	0005883a 	mov	r2,zero
}
   32684:	e037883a 	mov	sp,fp
   32688:	df000017 	ldw	fp,0(sp)
   3268c:	dec00104 	addi	sp,sp,4
   32690:	f800283a 	ret

00032694 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   32694:	defff304 	addi	sp,sp,-52
   32698:	dfc00c15 	stw	ra,48(sp)
   3269c:	df000b15 	stw	fp,44(sp)
   326a0:	df000b04 	addi	fp,sp,44
   326a4:	e13ffd15 	stw	r4,-12(fp)
   326a8:	2805883a 	mov	r2,r5
   326ac:	e1bfff15 	stw	r6,-4(fp)
   326b0:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   326b4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   326b8:	e0bfff17 	ldw	r2,-4(fp)
   326bc:	1000021e 	bne	r2,zero,326c8 <OSQPend+0x34>
        return ((void *)0);
   326c0:	0005883a 	mov	r2,zero
   326c4:	00009106 	br	3290c <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   326c8:	e0bffd17 	ldw	r2,-12(fp)
   326cc:	1000051e 	bne	r2,zero,326e4 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   326d0:	e0bfff17 	ldw	r2,-4(fp)
   326d4:	00c00104 	movi	r3,4
   326d8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   326dc:	0005883a 	mov	r2,zero
   326e0:	00008a06 	br	3290c <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   326e4:	e0bffd17 	ldw	r2,-12(fp)
   326e8:	10800003 	ldbu	r2,0(r2)
   326ec:	10803fcc 	andi	r2,r2,255
   326f0:	108000a0 	cmpeqi	r2,r2,2
   326f4:	1000051e 	bne	r2,zero,3270c <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   326f8:	e0bfff17 	ldw	r2,-4(fp)
   326fc:	00c00044 	movi	r3,1
   32700:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   32704:	0005883a 	mov	r2,zero
   32708:	00008006 	br	3290c <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   3270c:	d0a72903 	ldbu	r2,-25436(gp)
   32710:	10803fcc 	andi	r2,r2,255
   32714:	10000526 	beq	r2,zero,3272c <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   32718:	e0bfff17 	ldw	r2,-4(fp)
   3271c:	00c00084 	movi	r3,2
   32720:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   32724:	0005883a 	mov	r2,zero
   32728:	00007806 	br	3290c <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   3272c:	d0a71b03 	ldbu	r2,-25492(gp)
   32730:	10803fcc 	andi	r2,r2,255
   32734:	10000526 	beq	r2,zero,3274c <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   32738:	e0bfff17 	ldw	r2,-4(fp)
   3273c:	00c00344 	movi	r3,13
   32740:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   32744:	0005883a 	mov	r2,zero
   32748:	00007006 	br	3290c <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3274c:	0005303a 	rdctl	r2,status
   32750:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   32754:	e0fffc17 	ldw	r3,-16(fp)
   32758:	00bfff84 	movi	r2,-2
   3275c:	1884703a 	and	r2,r3,r2
   32760:	1001703a 	wrctl	status,r2
  
  return context;
   32764:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   32768:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   3276c:	e0bffd17 	ldw	r2,-12(fp)
   32770:	10800117 	ldw	r2,4(r2)
   32774:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   32778:	e0bff817 	ldw	r2,-32(fp)
   3277c:	1080058b 	ldhu	r2,22(r2)
   32780:	10bfffcc 	andi	r2,r2,65535
   32784:	10001e26 	beq	r2,zero,32800 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   32788:	e0bff817 	ldw	r2,-32(fp)
   3278c:	10800417 	ldw	r2,16(r2)
   32790:	11000104 	addi	r4,r2,4
   32794:	e0fff817 	ldw	r3,-32(fp)
   32798:	19000415 	stw	r4,16(r3)
   3279c:	10800017 	ldw	r2,0(r2)
   327a0:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   327a4:	e0bff817 	ldw	r2,-32(fp)
   327a8:	1080058b 	ldhu	r2,22(r2)
   327ac:	10bfffc4 	addi	r2,r2,-1
   327b0:	1007883a 	mov	r3,r2
   327b4:	e0bff817 	ldw	r2,-32(fp)
   327b8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   327bc:	e0bff817 	ldw	r2,-32(fp)
   327c0:	10c00417 	ldw	r3,16(r2)
   327c4:	e0bff817 	ldw	r2,-32(fp)
   327c8:	10800217 	ldw	r2,8(r2)
   327cc:	1880041e 	bne	r3,r2,327e0 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   327d0:	e0bff817 	ldw	r2,-32(fp)
   327d4:	10c00117 	ldw	r3,4(r2)
   327d8:	e0bff817 	ldw	r2,-32(fp)
   327dc:	10c00415 	stw	r3,16(r2)
   327e0:	e0bff617 	ldw	r2,-40(fp)
   327e4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   327e8:	e0bff717 	ldw	r2,-36(fp)
   327ec:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   327f0:	e0bfff17 	ldw	r2,-4(fp)
   327f4:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   327f8:	e0bff517 	ldw	r2,-44(fp)
   327fc:	00004306 	br	3290c <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   32800:	d0a72a17 	ldw	r2,-25432(gp)
   32804:	d0e72a17 	ldw	r3,-25432(gp)
   32808:	18c00c03 	ldbu	r3,48(r3)
   3280c:	18c00114 	ori	r3,r3,4
   32810:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   32814:	d0a72a17 	ldw	r2,-25432(gp)
   32818:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   3281c:	d0a72a17 	ldw	r2,-25432(gp)
   32820:	e0fffe0b 	ldhu	r3,-8(fp)
   32824:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   32828:	e13ffd17 	ldw	r4,-12(fp)
   3282c:	002f0f00 	call	2f0f0 <OS_EventTaskWait>
   32830:	e0bff617 	ldw	r2,-40(fp)
   32834:	e0bffb15 	stw	r2,-20(fp)
   32838:	e0bffb17 	ldw	r2,-20(fp)
   3283c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   32840:	002f9a40 	call	2f9a4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   32844:	0005303a 	rdctl	r2,status
   32848:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3284c:	e0fff917 	ldw	r3,-28(fp)
   32850:	00bfff84 	movi	r2,-2
   32854:	1884703a 	and	r2,r3,r2
   32858:	1001703a 	wrctl	status,r2
  
  return context;
   3285c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   32860:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   32864:	d0a72a17 	ldw	r2,-25432(gp)
   32868:	10800c43 	ldbu	r2,49(r2)
   3286c:	10803fcc 	andi	r2,r2,255
   32870:	10000326 	beq	r2,zero,32880 <OSQPend+0x1ec>
   32874:	108000a0 	cmpeqi	r2,r2,2
   32878:	1000071e 	bne	r2,zero,32898 <OSQPend+0x204>
   3287c:	00000b06 	br	328ac <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   32880:	d0a72a17 	ldw	r2,-25432(gp)
   32884:	10800917 	ldw	r2,36(r2)
   32888:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   3288c:	e0bfff17 	ldw	r2,-4(fp)
   32890:	10000005 	stb	zero,0(r2)
             break;
   32894:	00000e06 	br	328d0 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   32898:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   3289c:	e0bfff17 	ldw	r2,-4(fp)
   328a0:	00c00384 	movi	r3,14
   328a4:	10c00005 	stb	r3,0(r2)
             break;
   328a8:	00000906 	br	328d0 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   328ac:	d0a72a17 	ldw	r2,-25432(gp)
   328b0:	e17ffd17 	ldw	r5,-12(fp)
   328b4:	1009883a 	mov	r4,r2
   328b8:	002f3500 	call	2f350 <OS_EventTaskRemove>
             pmsg = (void *)0;
   328bc:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   328c0:	e0bfff17 	ldw	r2,-4(fp)
   328c4:	00c00284 	movi	r3,10
   328c8:	10c00005 	stb	r3,0(r2)
             break;
   328cc:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   328d0:	d0a72a17 	ldw	r2,-25432(gp)
   328d4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   328d8:	d0a72a17 	ldw	r2,-25432(gp)
   328dc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   328e0:	d0a72a17 	ldw	r2,-25432(gp)
   328e4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   328e8:	d0a72a17 	ldw	r2,-25432(gp)
   328ec:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   328f0:	d0a72a17 	ldw	r2,-25432(gp)
   328f4:	10000915 	stw	zero,36(r2)
   328f8:	e0bff617 	ldw	r2,-40(fp)
   328fc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   32900:	e0bffa17 	ldw	r2,-24(fp)
   32904:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   32908:	e0bff517 	ldw	r2,-44(fp)
}
   3290c:	e037883a 	mov	sp,fp
   32910:	dfc00117 	ldw	ra,4(sp)
   32914:	df000017 	ldw	fp,0(sp)
   32918:	dec00204 	addi	sp,sp,8
   3291c:	f800283a 	ret

00032920 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   32920:	defff604 	addi	sp,sp,-40
   32924:	dfc00915 	stw	ra,36(sp)
   32928:	df000815 	stw	fp,32(sp)
   3292c:	df000804 	addi	fp,sp,32
   32930:	e13ffd15 	stw	r4,-12(fp)
   32934:	2805883a 	mov	r2,r5
   32938:	e1bfff15 	stw	r6,-4(fp)
   3293c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   32940:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   32944:	e0bfff17 	ldw	r2,-4(fp)
   32948:	1000021e 	bne	r2,zero,32954 <OSQPendAbort+0x34>
        return (0);
   3294c:	0005883a 	mov	r2,zero
   32950:	00004906 	br	32a78 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   32954:	e0bffd17 	ldw	r2,-12(fp)
   32958:	1000051e 	bne	r2,zero,32970 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   3295c:	e0bfff17 	ldw	r2,-4(fp)
   32960:	00c00104 	movi	r3,4
   32964:	10c00005 	stb	r3,0(r2)
        return (0);
   32968:	0005883a 	mov	r2,zero
   3296c:	00004206 	br	32a78 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   32970:	e0bffd17 	ldw	r2,-12(fp)
   32974:	10800003 	ldbu	r2,0(r2)
   32978:	10803fcc 	andi	r2,r2,255
   3297c:	108000a0 	cmpeqi	r2,r2,2
   32980:	1000051e 	bne	r2,zero,32998 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   32984:	e0bfff17 	ldw	r2,-4(fp)
   32988:	00c00044 	movi	r3,1
   3298c:	10c00005 	stb	r3,0(r2)
        return (0);
   32990:	0005883a 	mov	r2,zero
   32994:	00003806 	br	32a78 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   32998:	0005303a 	rdctl	r2,status
   3299c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   329a0:	e0fffc17 	ldw	r3,-16(fp)
   329a4:	00bfff84 	movi	r2,-2
   329a8:	1884703a 	and	r2,r3,r2
   329ac:	1001703a 	wrctl	status,r2
  
  return context;
   329b0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   329b4:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   329b8:	e0bffd17 	ldw	r2,-12(fp)
   329bc:	10800283 	ldbu	r2,10(r2)
   329c0:	10803fcc 	andi	r2,r2,255
   329c4:	10002526 	beq	r2,zero,32a5c <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   329c8:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   329cc:	e0bffe03 	ldbu	r2,-8(fp)
   329d0:	10800060 	cmpeqi	r2,r2,1
   329d4:	10000e26 	beq	r2,zero,32a10 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   329d8:	00000806 	br	329fc <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   329dc:	01c00084 	movi	r7,2
   329e0:	01800104 	movi	r6,4
   329e4:	000b883a 	mov	r5,zero
   329e8:	e13ffd17 	ldw	r4,-12(fp)
   329ec:	002ef580 	call	2ef58 <OS_EventTaskRdy>
                     nbr_tasks++;
   329f0:	e0bff803 	ldbu	r2,-32(fp)
   329f4:	10800044 	addi	r2,r2,1
   329f8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   329fc:	e0bffd17 	ldw	r2,-12(fp)
   32a00:	10800283 	ldbu	r2,10(r2)
   32a04:	10803fcc 	andi	r2,r2,255
   32a08:	103ff41e 	bne	r2,zero,329dc <_gp+0xffff0e90>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   32a0c:	00000906 	br	32a34 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   32a10:	01c00084 	movi	r7,2
   32a14:	01800104 	movi	r6,4
   32a18:	000b883a 	mov	r5,zero
   32a1c:	e13ffd17 	ldw	r4,-12(fp)
   32a20:	002ef580 	call	2ef58 <OS_EventTaskRdy>
                 nbr_tasks++;
   32a24:	e0bff803 	ldbu	r2,-32(fp)
   32a28:	10800044 	addi	r2,r2,1
   32a2c:	e0bff805 	stb	r2,-32(fp)
                 break;
   32a30:	0001883a 	nop
   32a34:	e0bff917 	ldw	r2,-28(fp)
   32a38:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   32a3c:	e0bffa17 	ldw	r2,-24(fp)
   32a40:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   32a44:	002f9a40 	call	2f9a4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   32a48:	e0bfff17 	ldw	r2,-4(fp)
   32a4c:	00c00384 	movi	r3,14
   32a50:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   32a54:	e0bff803 	ldbu	r2,-32(fp)
   32a58:	00000706 	br	32a78 <OSQPendAbort+0x158>
   32a5c:	e0bff917 	ldw	r2,-28(fp)
   32a60:	e0bffb15 	stw	r2,-20(fp)
   32a64:	e0bffb17 	ldw	r2,-20(fp)
   32a68:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   32a6c:	e0bfff17 	ldw	r2,-4(fp)
   32a70:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   32a74:	0005883a 	mov	r2,zero
}
   32a78:	e037883a 	mov	sp,fp
   32a7c:	dfc00117 	ldw	ra,4(sp)
   32a80:	df000017 	ldw	fp,0(sp)
   32a84:	dec00204 	addi	sp,sp,8
   32a88:	f800283a 	ret

00032a8c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   32a8c:	defff604 	addi	sp,sp,-40
   32a90:	dfc00915 	stw	ra,36(sp)
   32a94:	df000815 	stw	fp,32(sp)
   32a98:	df000804 	addi	fp,sp,32
   32a9c:	e13ffe15 	stw	r4,-8(fp)
   32aa0:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   32aa4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   32aa8:	e0bffe17 	ldw	r2,-8(fp)
   32aac:	1000021e 	bne	r2,zero,32ab8 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   32ab0:	00800104 	movi	r2,4
   32ab4:	00004a06 	br	32be0 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   32ab8:	e0bffe17 	ldw	r2,-8(fp)
   32abc:	10800003 	ldbu	r2,0(r2)
   32ac0:	10803fcc 	andi	r2,r2,255
   32ac4:	108000a0 	cmpeqi	r2,r2,2
   32ac8:	1000021e 	bne	r2,zero,32ad4 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   32acc:	00800044 	movi	r2,1
   32ad0:	00004306 	br	32be0 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   32ad4:	0005303a 	rdctl	r2,status
   32ad8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   32adc:	e0fffd17 	ldw	r3,-12(fp)
   32ae0:	00bfff84 	movi	r2,-2
   32ae4:	1884703a 	and	r2,r3,r2
   32ae8:	1001703a 	wrctl	status,r2
  
  return context;
   32aec:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   32af0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   32af4:	e0bffe17 	ldw	r2,-8(fp)
   32af8:	10800283 	ldbu	r2,10(r2)
   32afc:	10803fcc 	andi	r2,r2,255
   32b00:	10000c26 	beq	r2,zero,32b34 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   32b04:	000f883a 	mov	r7,zero
   32b08:	01800104 	movi	r6,4
   32b0c:	e17fff17 	ldw	r5,-4(fp)
   32b10:	e13ffe17 	ldw	r4,-8(fp)
   32b14:	002ef580 	call	2ef58 <OS_EventTaskRdy>
   32b18:	e0bff817 	ldw	r2,-32(fp)
   32b1c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   32b20:	e0bff917 	ldw	r2,-28(fp)
   32b24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   32b28:	002f9a40 	call	2f9a4 <OS_Sched>
        return (OS_ERR_NONE);
   32b2c:	0005883a 	mov	r2,zero
   32b30:	00002b06 	br	32be0 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   32b34:	e0bffe17 	ldw	r2,-8(fp)
   32b38:	10800117 	ldw	r2,4(r2)
   32b3c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   32b40:	e0bffb17 	ldw	r2,-20(fp)
   32b44:	10c0058b 	ldhu	r3,22(r2)
   32b48:	e0bffb17 	ldw	r2,-20(fp)
   32b4c:	1080050b 	ldhu	r2,20(r2)
   32b50:	18ffffcc 	andi	r3,r3,65535
   32b54:	10bfffcc 	andi	r2,r2,65535
   32b58:	18800636 	bltu	r3,r2,32b74 <OSQPost+0xe8>
   32b5c:	e0bff817 	ldw	r2,-32(fp)
   32b60:	e0bffa15 	stw	r2,-24(fp)
   32b64:	e0bffa17 	ldw	r2,-24(fp)
   32b68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   32b6c:	00800784 	movi	r2,30
   32b70:	00001b06 	br	32be0 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   32b74:	e0bffb17 	ldw	r2,-20(fp)
   32b78:	10800317 	ldw	r2,12(r2)
   32b7c:	11000104 	addi	r4,r2,4
   32b80:	e0fffb17 	ldw	r3,-20(fp)
   32b84:	19000315 	stw	r4,12(r3)
   32b88:	e0ffff17 	ldw	r3,-4(fp)
   32b8c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   32b90:	e0bffb17 	ldw	r2,-20(fp)
   32b94:	1080058b 	ldhu	r2,22(r2)
   32b98:	10800044 	addi	r2,r2,1
   32b9c:	1007883a 	mov	r3,r2
   32ba0:	e0bffb17 	ldw	r2,-20(fp)
   32ba4:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   32ba8:	e0bffb17 	ldw	r2,-20(fp)
   32bac:	10c00317 	ldw	r3,12(r2)
   32bb0:	e0bffb17 	ldw	r2,-20(fp)
   32bb4:	10800217 	ldw	r2,8(r2)
   32bb8:	1880041e 	bne	r3,r2,32bcc <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   32bbc:	e0bffb17 	ldw	r2,-20(fp)
   32bc0:	10c00117 	ldw	r3,4(r2)
   32bc4:	e0bffb17 	ldw	r2,-20(fp)
   32bc8:	10c00315 	stw	r3,12(r2)
   32bcc:	e0bff817 	ldw	r2,-32(fp)
   32bd0:	e0bffc15 	stw	r2,-16(fp)
   32bd4:	e0bffc17 	ldw	r2,-16(fp)
   32bd8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   32bdc:	0005883a 	mov	r2,zero
}
   32be0:	e037883a 	mov	sp,fp
   32be4:	dfc00117 	ldw	ra,4(sp)
   32be8:	df000017 	ldw	fp,0(sp)
   32bec:	dec00204 	addi	sp,sp,8
   32bf0:	f800283a 	ret

00032bf4 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   32bf4:	defff604 	addi	sp,sp,-40
   32bf8:	dfc00915 	stw	ra,36(sp)
   32bfc:	df000815 	stw	fp,32(sp)
   32c00:	df000804 	addi	fp,sp,32
   32c04:	e13ffe15 	stw	r4,-8(fp)
   32c08:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   32c0c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   32c10:	e0bffe17 	ldw	r2,-8(fp)
   32c14:	1000021e 	bne	r2,zero,32c20 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   32c18:	00800104 	movi	r2,4
   32c1c:	00004c06 	br	32d50 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   32c20:	e0bffe17 	ldw	r2,-8(fp)
   32c24:	10800003 	ldbu	r2,0(r2)
   32c28:	10803fcc 	andi	r2,r2,255
   32c2c:	108000a0 	cmpeqi	r2,r2,2
   32c30:	1000021e 	bne	r2,zero,32c3c <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   32c34:	00800044 	movi	r2,1
   32c38:	00004506 	br	32d50 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   32c3c:	0005303a 	rdctl	r2,status
   32c40:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   32c44:	e0fffd17 	ldw	r3,-12(fp)
   32c48:	00bfff84 	movi	r2,-2
   32c4c:	1884703a 	and	r2,r3,r2
   32c50:	1001703a 	wrctl	status,r2
  
  return context;
   32c54:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   32c58:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   32c5c:	e0bffe17 	ldw	r2,-8(fp)
   32c60:	10800283 	ldbu	r2,10(r2)
   32c64:	10803fcc 	andi	r2,r2,255
   32c68:	10000c26 	beq	r2,zero,32c9c <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   32c6c:	000f883a 	mov	r7,zero
   32c70:	01800104 	movi	r6,4
   32c74:	e17fff17 	ldw	r5,-4(fp)
   32c78:	e13ffe17 	ldw	r4,-8(fp)
   32c7c:	002ef580 	call	2ef58 <OS_EventTaskRdy>
   32c80:	e0bff817 	ldw	r2,-32(fp)
   32c84:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   32c88:	e0bff917 	ldw	r2,-28(fp)
   32c8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   32c90:	002f9a40 	call	2f9a4 <OS_Sched>
        return (OS_ERR_NONE);
   32c94:	0005883a 	mov	r2,zero
   32c98:	00002d06 	br	32d50 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   32c9c:	e0bffe17 	ldw	r2,-8(fp)
   32ca0:	10800117 	ldw	r2,4(r2)
   32ca4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   32ca8:	e0bffb17 	ldw	r2,-20(fp)
   32cac:	10c0058b 	ldhu	r3,22(r2)
   32cb0:	e0bffb17 	ldw	r2,-20(fp)
   32cb4:	1080050b 	ldhu	r2,20(r2)
   32cb8:	18ffffcc 	andi	r3,r3,65535
   32cbc:	10bfffcc 	andi	r2,r2,65535
   32cc0:	18800636 	bltu	r3,r2,32cdc <OSQPostFront+0xe8>
   32cc4:	e0bff817 	ldw	r2,-32(fp)
   32cc8:	e0bffa15 	stw	r2,-24(fp)
   32ccc:	e0bffa17 	ldw	r2,-24(fp)
   32cd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   32cd4:	00800784 	movi	r2,30
   32cd8:	00001d06 	br	32d50 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   32cdc:	e0bffb17 	ldw	r2,-20(fp)
   32ce0:	10c00417 	ldw	r3,16(r2)
   32ce4:	e0bffb17 	ldw	r2,-20(fp)
   32ce8:	10800117 	ldw	r2,4(r2)
   32cec:	1880041e 	bne	r3,r2,32d00 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   32cf0:	e0bffb17 	ldw	r2,-20(fp)
   32cf4:	10c00217 	ldw	r3,8(r2)
   32cf8:	e0bffb17 	ldw	r2,-20(fp)
   32cfc:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   32d00:	e0bffb17 	ldw	r2,-20(fp)
   32d04:	10800417 	ldw	r2,16(r2)
   32d08:	10ffff04 	addi	r3,r2,-4
   32d0c:	e0bffb17 	ldw	r2,-20(fp)
   32d10:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   32d14:	e0bffb17 	ldw	r2,-20(fp)
   32d18:	10800417 	ldw	r2,16(r2)
   32d1c:	e0ffff17 	ldw	r3,-4(fp)
   32d20:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   32d24:	e0bffb17 	ldw	r2,-20(fp)
   32d28:	1080058b 	ldhu	r2,22(r2)
   32d2c:	10800044 	addi	r2,r2,1
   32d30:	1007883a 	mov	r3,r2
   32d34:	e0bffb17 	ldw	r2,-20(fp)
   32d38:	10c0058d 	sth	r3,22(r2)
   32d3c:	e0bff817 	ldw	r2,-32(fp)
   32d40:	e0bffc15 	stw	r2,-16(fp)
   32d44:	e0bffc17 	ldw	r2,-16(fp)
   32d48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   32d4c:	0005883a 	mov	r2,zero
}
   32d50:	e037883a 	mov	sp,fp
   32d54:	dfc00117 	ldw	ra,4(sp)
   32d58:	df000017 	ldw	fp,0(sp)
   32d5c:	dec00204 	addi	sp,sp,8
   32d60:	f800283a 	ret

00032d64 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   32d64:	defff504 	addi	sp,sp,-44
   32d68:	dfc00a15 	stw	ra,40(sp)
   32d6c:	df000915 	stw	fp,36(sp)
   32d70:	df000904 	addi	fp,sp,36
   32d74:	e13ffd15 	stw	r4,-12(fp)
   32d78:	e17ffe15 	stw	r5,-8(fp)
   32d7c:	3005883a 	mov	r2,r6
   32d80:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   32d84:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   32d88:	e0bffd17 	ldw	r2,-12(fp)
   32d8c:	1000021e 	bne	r2,zero,32d98 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   32d90:	00800104 	movi	r2,4
   32d94:	00007106 	br	32f5c <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   32d98:	e0bffd17 	ldw	r2,-12(fp)
   32d9c:	10800003 	ldbu	r2,0(r2)
   32da0:	10803fcc 	andi	r2,r2,255
   32da4:	108000a0 	cmpeqi	r2,r2,2
   32da8:	1000021e 	bne	r2,zero,32db4 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   32dac:	00800044 	movi	r2,1
   32db0:	00006a06 	br	32f5c <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   32db4:	0005303a 	rdctl	r2,status
   32db8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   32dbc:	e0fffc17 	ldw	r3,-16(fp)
   32dc0:	00bfff84 	movi	r2,-2
   32dc4:	1884703a 	and	r2,r3,r2
   32dc8:	1001703a 	wrctl	status,r2
  
  return context;
   32dcc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   32dd0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   32dd4:	e0bffd17 	ldw	r2,-12(fp)
   32dd8:	10800283 	ldbu	r2,10(r2)
   32ddc:	10803fcc 	andi	r2,r2,255
   32de0:	10001d26 	beq	r2,zero,32e58 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   32de4:	e0bfff03 	ldbu	r2,-4(fp)
   32de8:	1080004c 	andi	r2,r2,1
   32dec:	10000b26 	beq	r2,zero,32e1c <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   32df0:	00000506 	br	32e08 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   32df4:	000f883a 	mov	r7,zero
   32df8:	01800104 	movi	r6,4
   32dfc:	e17ffe17 	ldw	r5,-8(fp)
   32e00:	e13ffd17 	ldw	r4,-12(fp)
   32e04:	002ef580 	call	2ef58 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   32e08:	e0bffd17 	ldw	r2,-12(fp)
   32e0c:	10800283 	ldbu	r2,10(r2)
   32e10:	10803fcc 	andi	r2,r2,255
   32e14:	103ff71e 	bne	r2,zero,32df4 <_gp+0xffff12a8>
   32e18:	00000506 	br	32e30 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   32e1c:	000f883a 	mov	r7,zero
   32e20:	01800104 	movi	r6,4
   32e24:	e17ffe17 	ldw	r5,-8(fp)
   32e28:	e13ffd17 	ldw	r4,-12(fp)
   32e2c:	002ef580 	call	2ef58 <OS_EventTaskRdy>
   32e30:	e0bff717 	ldw	r2,-36(fp)
   32e34:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   32e38:	e0bff817 	ldw	r2,-32(fp)
   32e3c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   32e40:	e0bfff03 	ldbu	r2,-4(fp)
   32e44:	1080010c 	andi	r2,r2,4
   32e48:	1000011e 	bne	r2,zero,32e50 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   32e4c:	002f9a40 	call	2f9a4 <OS_Sched>
        }
        return (OS_ERR_NONE);
   32e50:	0005883a 	mov	r2,zero
   32e54:	00004106 	br	32f5c <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   32e58:	e0bffd17 	ldw	r2,-12(fp)
   32e5c:	10800117 	ldw	r2,4(r2)
   32e60:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   32e64:	e0bffa17 	ldw	r2,-24(fp)
   32e68:	10c0058b 	ldhu	r3,22(r2)
   32e6c:	e0bffa17 	ldw	r2,-24(fp)
   32e70:	1080050b 	ldhu	r2,20(r2)
   32e74:	18ffffcc 	andi	r3,r3,65535
   32e78:	10bfffcc 	andi	r2,r2,65535
   32e7c:	18800636 	bltu	r3,r2,32e98 <OSQPostOpt+0x134>
   32e80:	e0bff717 	ldw	r2,-36(fp)
   32e84:	e0bff915 	stw	r2,-28(fp)
   32e88:	e0bff917 	ldw	r2,-28(fp)
   32e8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   32e90:	00800784 	movi	r2,30
   32e94:	00003106 	br	32f5c <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   32e98:	e0bfff03 	ldbu	r2,-4(fp)
   32e9c:	1080008c 	andi	r2,r2,2
   32ea0:	10001326 	beq	r2,zero,32ef0 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   32ea4:	e0bffa17 	ldw	r2,-24(fp)
   32ea8:	10c00417 	ldw	r3,16(r2)
   32eac:	e0bffa17 	ldw	r2,-24(fp)
   32eb0:	10800117 	ldw	r2,4(r2)
   32eb4:	1880041e 	bne	r3,r2,32ec8 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   32eb8:	e0bffa17 	ldw	r2,-24(fp)
   32ebc:	10c00217 	ldw	r3,8(r2)
   32ec0:	e0bffa17 	ldw	r2,-24(fp)
   32ec4:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   32ec8:	e0bffa17 	ldw	r2,-24(fp)
   32ecc:	10800417 	ldw	r2,16(r2)
   32ed0:	10ffff04 	addi	r3,r2,-4
   32ed4:	e0bffa17 	ldw	r2,-24(fp)
   32ed8:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   32edc:	e0bffa17 	ldw	r2,-24(fp)
   32ee0:	10800417 	ldw	r2,16(r2)
   32ee4:	e0fffe17 	ldw	r3,-8(fp)
   32ee8:	10c00015 	stw	r3,0(r2)
   32eec:	00001006 	br	32f30 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   32ef0:	e0bffa17 	ldw	r2,-24(fp)
   32ef4:	10800317 	ldw	r2,12(r2)
   32ef8:	11000104 	addi	r4,r2,4
   32efc:	e0fffa17 	ldw	r3,-24(fp)
   32f00:	19000315 	stw	r4,12(r3)
   32f04:	e0fffe17 	ldw	r3,-8(fp)
   32f08:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   32f0c:	e0bffa17 	ldw	r2,-24(fp)
   32f10:	10c00317 	ldw	r3,12(r2)
   32f14:	e0bffa17 	ldw	r2,-24(fp)
   32f18:	10800217 	ldw	r2,8(r2)
   32f1c:	1880041e 	bne	r3,r2,32f30 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   32f20:	e0bffa17 	ldw	r2,-24(fp)
   32f24:	10c00117 	ldw	r3,4(r2)
   32f28:	e0bffa17 	ldw	r2,-24(fp)
   32f2c:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   32f30:	e0bffa17 	ldw	r2,-24(fp)
   32f34:	1080058b 	ldhu	r2,22(r2)
   32f38:	10800044 	addi	r2,r2,1
   32f3c:	1007883a 	mov	r3,r2
   32f40:	e0bffa17 	ldw	r2,-24(fp)
   32f44:	10c0058d 	sth	r3,22(r2)
   32f48:	e0bff717 	ldw	r2,-36(fp)
   32f4c:	e0bffb15 	stw	r2,-20(fp)
   32f50:	e0bffb17 	ldw	r2,-20(fp)
   32f54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   32f58:	0005883a 	mov	r2,zero
}
   32f5c:	e037883a 	mov	sp,fp
   32f60:	dfc00117 	ldw	ra,4(sp)
   32f64:	df000017 	ldw	fp,0(sp)
   32f68:	dec00204 	addi	sp,sp,8
   32f6c:	f800283a 	ret

00032f70 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   32f70:	defff604 	addi	sp,sp,-40
   32f74:	df000915 	stw	fp,36(sp)
   32f78:	df000904 	addi	fp,sp,36
   32f7c:	e13ffe15 	stw	r4,-8(fp)
   32f80:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   32f84:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   32f88:	e0bffe17 	ldw	r2,-8(fp)
   32f8c:	1000021e 	bne	r2,zero,32f98 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   32f90:	00800104 	movi	r2,4
   32f94:	00004906 	br	330bc <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   32f98:	e0bfff17 	ldw	r2,-4(fp)
   32f9c:	1000021e 	bne	r2,zero,32fa8 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   32fa0:	00800244 	movi	r2,9
   32fa4:	00004506 	br	330bc <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   32fa8:	e0bffe17 	ldw	r2,-8(fp)
   32fac:	10800003 	ldbu	r2,0(r2)
   32fb0:	10803fcc 	andi	r2,r2,255
   32fb4:	108000a0 	cmpeqi	r2,r2,2
   32fb8:	1000021e 	bne	r2,zero,32fc4 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   32fbc:	00800044 	movi	r2,1
   32fc0:	00003e06 	br	330bc <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   32fc4:	0005303a 	rdctl	r2,status
   32fc8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   32fcc:	e0fffd17 	ldw	r3,-12(fp)
   32fd0:	00bfff84 	movi	r2,-2
   32fd4:	1884703a 	and	r2,r3,r2
   32fd8:	1001703a 	wrctl	status,r2
  
  return context;
   32fdc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   32fe0:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   32fe4:	e0bffe17 	ldw	r2,-8(fp)
   32fe8:	10c00283 	ldbu	r3,10(r2)
   32fec:	e0bfff17 	ldw	r2,-4(fp)
   32ff0:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   32ff4:	e0bffe17 	ldw	r2,-8(fp)
   32ff8:	108002c4 	addi	r2,r2,11
   32ffc:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   33000:	e0bfff17 	ldw	r2,-4(fp)
   33004:	10800204 	addi	r2,r2,8
   33008:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   3300c:	e03ff705 	stb	zero,-36(fp)
   33010:	00000b06 	br	33040 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   33014:	e0bff917 	ldw	r2,-28(fp)
   33018:	10c00044 	addi	r3,r2,1
   3301c:	e0fff915 	stw	r3,-28(fp)
   33020:	e0fff817 	ldw	r3,-32(fp)
   33024:	19000044 	addi	r4,r3,1
   33028:	e13ff815 	stw	r4,-32(fp)
   3302c:	18c00003 	ldbu	r3,0(r3)
   33030:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   33034:	e0bff703 	ldbu	r2,-36(fp)
   33038:	10800044 	addi	r2,r2,1
   3303c:	e0bff705 	stb	r2,-36(fp)
   33040:	e0bff703 	ldbu	r2,-36(fp)
   33044:	108000f0 	cmpltui	r2,r2,3
   33048:	103ff21e 	bne	r2,zero,33014 <_gp+0xffff14c8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   3304c:	e0bffe17 	ldw	r2,-8(fp)
   33050:	10800117 	ldw	r2,4(r2)
   33054:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   33058:	e0bffc17 	ldw	r2,-16(fp)
   3305c:	1080058b 	ldhu	r2,22(r2)
   33060:	10bfffcc 	andi	r2,r2,65535
   33064:	10000626 	beq	r2,zero,33080 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   33068:	e0bffc17 	ldw	r2,-16(fp)
   3306c:	10800417 	ldw	r2,16(r2)
   33070:	10c00017 	ldw	r3,0(r2)
   33074:	e0bfff17 	ldw	r2,-4(fp)
   33078:	10c00015 	stw	r3,0(r2)
   3307c:	00000206 	br	33088 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   33080:	e0bfff17 	ldw	r2,-4(fp)
   33084:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   33088:	e0bffc17 	ldw	r2,-16(fp)
   3308c:	10c0058b 	ldhu	r3,22(r2)
   33090:	e0bfff17 	ldw	r2,-4(fp)
   33094:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   33098:	e0bffc17 	ldw	r2,-16(fp)
   3309c:	10c0050b 	ldhu	r3,20(r2)
   330a0:	e0bfff17 	ldw	r2,-4(fp)
   330a4:	10c0018d 	sth	r3,6(r2)
   330a8:	e0bffa17 	ldw	r2,-24(fp)
   330ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   330b0:	e0bffb17 	ldw	r2,-20(fp)
   330b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   330b8:	0005883a 	mov	r2,zero
}
   330bc:	e037883a 	mov	sp,fp
   330c0:	df000017 	ldw	fp,0(sp)
   330c4:	dec00104 	addi	sp,sp,4
   330c8:	f800283a 	ret

000330cc <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   330cc:	defffb04 	addi	sp,sp,-20
   330d0:	dfc00415 	stw	ra,16(sp)
   330d4:	df000315 	stw	fp,12(sp)
   330d8:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   330dc:	01407804 	movi	r5,480
   330e0:	01000134 	movhi	r4,4
   330e4:	2133f804 	addi	r4,r4,-12320
   330e8:	002f8e80 	call	2f8e8 <OS_MemClr>
    pq1 = &OSQTbl[0];
   330ec:	00800134 	movhi	r2,4
   330f0:	10b3f804 	addi	r2,r2,-12320
   330f4:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   330f8:	00800134 	movhi	r2,4
   330fc:	10b3fe04 	addi	r2,r2,-12296
   33100:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   33104:	e03ffd0d 	sth	zero,-12(fp)
   33108:	00000c06 	br	3313c <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   3310c:	e0bffe17 	ldw	r2,-8(fp)
   33110:	e0ffff17 	ldw	r3,-4(fp)
   33114:	10c00015 	stw	r3,0(r2)
        pq1++;
   33118:	e0bffe17 	ldw	r2,-8(fp)
   3311c:	10800604 	addi	r2,r2,24
   33120:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   33124:	e0bfff17 	ldw	r2,-4(fp)
   33128:	10800604 	addi	r2,r2,24
   3312c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   33130:	e0bffd0b 	ldhu	r2,-12(fp)
   33134:	10800044 	addi	r2,r2,1
   33138:	e0bffd0d 	sth	r2,-12(fp)
   3313c:	e0bffd0b 	ldhu	r2,-12(fp)
   33140:	108004f0 	cmpltui	r2,r2,19
   33144:	103ff11e 	bne	r2,zero,3310c <_gp+0xffff15c0>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   33148:	e0bffe17 	ldw	r2,-8(fp)
   3314c:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   33150:	00800134 	movhi	r2,4
   33154:	10b3f804 	addi	r2,r2,-12320
   33158:	d0a72615 	stw	r2,-25448(gp)
#endif
}
   3315c:	0001883a 	nop
   33160:	e037883a 	mov	sp,fp
   33164:	dfc00117 	ldw	ra,4(sp)
   33168:	df000017 	ldw	fp,0(sp)
   3316c:	dec00204 	addi	sp,sp,8
   33170:	f800283a 	ret

00033174 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   33174:	defffa04 	addi	sp,sp,-24
   33178:	df000515 	stw	fp,20(sp)
   3317c:	df000504 	addi	fp,sp,20
   33180:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   33184:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   33188:	e0bfff17 	ldw	r2,-4(fp)
   3318c:	1000021e 	bne	r2,zero,33198 <OSSemAccept+0x24>
        return (0);
   33190:	0005883a 	mov	r2,zero
   33194:	00001f06 	br	33214 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   33198:	e0bfff17 	ldw	r2,-4(fp)
   3319c:	10800003 	ldbu	r2,0(r2)
   331a0:	10803fcc 	andi	r2,r2,255
   331a4:	108000e0 	cmpeqi	r2,r2,3
   331a8:	1000021e 	bne	r2,zero,331b4 <OSSemAccept+0x40>
        return (0);
   331ac:	0005883a 	mov	r2,zero
   331b0:	00001806 	br	33214 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   331b4:	0005303a 	rdctl	r2,status
   331b8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   331bc:	e0fffe17 	ldw	r3,-8(fp)
   331c0:	00bfff84 	movi	r2,-2
   331c4:	1884703a 	and	r2,r3,r2
   331c8:	1001703a 	wrctl	status,r2
  
  return context;
   331cc:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   331d0:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   331d4:	e0bfff17 	ldw	r2,-4(fp)
   331d8:	1080020b 	ldhu	r2,8(r2)
   331dc:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   331e0:	e0bffd0b 	ldhu	r2,-12(fp)
   331e4:	10000626 	beq	r2,zero,33200 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   331e8:	e0bfff17 	ldw	r2,-4(fp)
   331ec:	1080020b 	ldhu	r2,8(r2)
   331f0:	10bfffc4 	addi	r2,r2,-1
   331f4:	1007883a 	mov	r3,r2
   331f8:	e0bfff17 	ldw	r2,-4(fp)
   331fc:	10c0020d 	sth	r3,8(r2)
   33200:	e0bffb17 	ldw	r2,-20(fp)
   33204:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   33208:	e0bffc17 	ldw	r2,-16(fp)
   3320c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   33210:	e0bffd0b 	ldhu	r2,-12(fp)
}
   33214:	e037883a 	mov	sp,fp
   33218:	df000017 	ldw	fp,0(sp)
   3321c:	dec00104 	addi	sp,sp,4
   33220:	f800283a 	ret

00033224 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   33224:	defff904 	addi	sp,sp,-28
   33228:	dfc00615 	stw	ra,24(sp)
   3322c:	df000515 	stw	fp,20(sp)
   33230:	df000504 	addi	fp,sp,20
   33234:	2005883a 	mov	r2,r4
   33238:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   3323c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   33240:	d0a72903 	ldbu	r2,-25436(gp)
   33244:	10803fcc 	andi	r2,r2,255
   33248:	10000226 	beq	r2,zero,33254 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   3324c:	0005883a 	mov	r2,zero
   33250:	00002506 	br	332e8 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   33254:	0005303a 	rdctl	r2,status
   33258:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3325c:	e0fffe17 	ldw	r3,-8(fp)
   33260:	00bfff84 	movi	r2,-2
   33264:	1884703a 	and	r2,r3,r2
   33268:	1001703a 	wrctl	status,r2
  
  return context;
   3326c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   33270:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   33274:	d0a72817 	ldw	r2,-25440(gp)
   33278:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   3327c:	d0a72817 	ldw	r2,-25440(gp)
   33280:	10000326 	beq	r2,zero,33290 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   33284:	d0a72817 	ldw	r2,-25440(gp)
   33288:	10800117 	ldw	r2,4(r2)
   3328c:	d0a72815 	stw	r2,-25440(gp)
   33290:	e0bffb17 	ldw	r2,-20(fp)
   33294:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   33298:	e0bffc17 	ldw	r2,-16(fp)
   3329c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   332a0:	e0bffd17 	ldw	r2,-12(fp)
   332a4:	10000f26 	beq	r2,zero,332e4 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   332a8:	e0bffd17 	ldw	r2,-12(fp)
   332ac:	00c000c4 	movi	r3,3
   332b0:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   332b4:	e0bffd17 	ldw	r2,-12(fp)
   332b8:	e0ffff0b 	ldhu	r3,-4(fp)
   332bc:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   332c0:	e0bffd17 	ldw	r2,-12(fp)
   332c4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   332c8:	e0bffd17 	ldw	r2,-12(fp)
   332cc:	00c00fc4 	movi	r3,63
   332d0:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   332d4:	e0bffd17 	ldw	r2,-12(fp)
   332d8:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   332dc:	e13ffd17 	ldw	r4,-12(fp)
   332e0:	002f5080 	call	2f508 <OS_EventWaitListInit>
    }
    return (pevent);
   332e4:	e0bffd17 	ldw	r2,-12(fp)
}
   332e8:	e037883a 	mov	sp,fp
   332ec:	dfc00117 	ldw	ra,4(sp)
   332f0:	df000017 	ldw	fp,0(sp)
   332f4:	dec00204 	addi	sp,sp,8
   332f8:	f800283a 	ret

000332fc <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   332fc:	defff304 	addi	sp,sp,-52
   33300:	dfc00c15 	stw	ra,48(sp)
   33304:	df000b15 	stw	fp,44(sp)
   33308:	df000b04 	addi	fp,sp,44
   3330c:	e13ffd15 	stw	r4,-12(fp)
   33310:	2805883a 	mov	r2,r5
   33314:	e1bfff15 	stw	r6,-4(fp)
   33318:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   3331c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   33320:	e0bfff17 	ldw	r2,-4(fp)
   33324:	1000021e 	bne	r2,zero,33330 <OSSemDel+0x34>
        return (pevent);
   33328:	e0bffd17 	ldw	r2,-12(fp)
   3332c:	00007e06 	br	33528 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   33330:	e0bffd17 	ldw	r2,-12(fp)
   33334:	1000051e 	bne	r2,zero,3334c <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   33338:	e0bfff17 	ldw	r2,-4(fp)
   3333c:	00c00104 	movi	r3,4
   33340:	10c00005 	stb	r3,0(r2)
        return (pevent);
   33344:	e0bffd17 	ldw	r2,-12(fp)
   33348:	00007706 	br	33528 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   3334c:	e0bffd17 	ldw	r2,-12(fp)
   33350:	10800003 	ldbu	r2,0(r2)
   33354:	10803fcc 	andi	r2,r2,255
   33358:	108000e0 	cmpeqi	r2,r2,3
   3335c:	1000051e 	bne	r2,zero,33374 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   33360:	e0bfff17 	ldw	r2,-4(fp)
   33364:	00c00044 	movi	r3,1
   33368:	10c00005 	stb	r3,0(r2)
        return (pevent);
   3336c:	e0bffd17 	ldw	r2,-12(fp)
   33370:	00006d06 	br	33528 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   33374:	d0a72903 	ldbu	r2,-25436(gp)
   33378:	10803fcc 	andi	r2,r2,255
   3337c:	10000526 	beq	r2,zero,33394 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   33380:	e0bfff17 	ldw	r2,-4(fp)
   33384:	00c003c4 	movi	r3,15
   33388:	10c00005 	stb	r3,0(r2)
        return (pevent);
   3338c:	e0bffd17 	ldw	r2,-12(fp)
   33390:	00006506 	br	33528 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   33394:	0005303a 	rdctl	r2,status
   33398:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3339c:	e0fffc17 	ldw	r3,-16(fp)
   333a0:	00bfff84 	movi	r2,-2
   333a4:	1884703a 	and	r2,r3,r2
   333a8:	1001703a 	wrctl	status,r2
  
  return context;
   333ac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   333b0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   333b4:	e0bffd17 	ldw	r2,-12(fp)
   333b8:	10800283 	ldbu	r2,10(r2)
   333bc:	10803fcc 	andi	r2,r2,255
   333c0:	10000326 	beq	r2,zero,333d0 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   333c4:	00800044 	movi	r2,1
   333c8:	e0bff505 	stb	r2,-44(fp)
   333cc:	00000106 	br	333d4 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   333d0:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   333d4:	e0bffe03 	ldbu	r2,-8(fp)
   333d8:	10000326 	beq	r2,zero,333e8 <OSSemDel+0xec>
   333dc:	10800060 	cmpeqi	r2,r2,1
   333e0:	1000281e 	bne	r2,zero,33484 <OSSemDel+0x188>
   333e4:	00004506 	br	334fc <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   333e8:	e0bff503 	ldbu	r2,-44(fp)
   333ec:	1000161e 	bne	r2,zero,33448 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   333f0:	e0bffd17 	ldw	r2,-12(fp)
   333f4:	00c00fc4 	movi	r3,63
   333f8:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   333fc:	e0bffd17 	ldw	r2,-12(fp)
   33400:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   33404:	e0bffd17 	ldw	r2,-12(fp)
   33408:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   3340c:	d0e72817 	ldw	r3,-25440(gp)
   33410:	e0bffd17 	ldw	r2,-12(fp)
   33414:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   33418:	e0bffd17 	ldw	r2,-12(fp)
   3341c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   33420:	e0bffd17 	ldw	r2,-12(fp)
   33424:	d0a72815 	stw	r2,-25440(gp)
   33428:	e0bff717 	ldw	r2,-36(fp)
   3342c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   33430:	e0bff817 	ldw	r2,-32(fp)
   33434:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   33438:	e0bfff17 	ldw	r2,-4(fp)
   3343c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   33440:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   33444:	00003706 	br	33524 <OSSemDel+0x228>
   33448:	e0bff717 	ldw	r2,-36(fp)
   3344c:	e0bff915 	stw	r2,-28(fp)
   33450:	e0bff917 	ldw	r2,-28(fp)
   33454:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   33458:	e0bfff17 	ldw	r2,-4(fp)
   3345c:	00c01244 	movi	r3,73
   33460:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   33464:	e0bffd17 	ldw	r2,-12(fp)
   33468:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   3346c:	00002d06 	br	33524 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   33470:	000f883a 	mov	r7,zero
   33474:	01800044 	movi	r6,1
   33478:	000b883a 	mov	r5,zero
   3347c:	e13ffd17 	ldw	r4,-12(fp)
   33480:	002ef580 	call	2ef58 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   33484:	e0bffd17 	ldw	r2,-12(fp)
   33488:	10800283 	ldbu	r2,10(r2)
   3348c:	10803fcc 	andi	r2,r2,255
   33490:	103ff71e 	bne	r2,zero,33470 <_gp+0xffff1924>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   33494:	e0bffd17 	ldw	r2,-12(fp)
   33498:	00c00fc4 	movi	r3,63
   3349c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   334a0:	e0bffd17 	ldw	r2,-12(fp)
   334a4:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   334a8:	e0bffd17 	ldw	r2,-12(fp)
   334ac:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   334b0:	d0e72817 	ldw	r3,-25440(gp)
   334b4:	e0bffd17 	ldw	r2,-12(fp)
   334b8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   334bc:	e0bffd17 	ldw	r2,-12(fp)
   334c0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   334c4:	e0bffd17 	ldw	r2,-12(fp)
   334c8:	d0a72815 	stw	r2,-25440(gp)
   334cc:	e0bff717 	ldw	r2,-36(fp)
   334d0:	e0bffa15 	stw	r2,-24(fp)
   334d4:	e0bffa17 	ldw	r2,-24(fp)
   334d8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   334dc:	e0bff503 	ldbu	r2,-44(fp)
   334e0:	10800058 	cmpnei	r2,r2,1
   334e4:	1000011e 	bne	r2,zero,334ec <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   334e8:	002f9a40 	call	2f9a4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   334ec:	e0bfff17 	ldw	r2,-4(fp)
   334f0:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   334f4:	e03ff615 	stw	zero,-40(fp)
             break;
   334f8:	00000a06 	br	33524 <OSSemDel+0x228>
   334fc:	e0bff717 	ldw	r2,-36(fp)
   33500:	e0bffb15 	stw	r2,-20(fp)
   33504:	e0bffb17 	ldw	r2,-20(fp)
   33508:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   3350c:	e0bfff17 	ldw	r2,-4(fp)
   33510:	00c001c4 	movi	r3,7
   33514:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   33518:	e0bffd17 	ldw	r2,-12(fp)
   3351c:	e0bff615 	stw	r2,-40(fp)
             break;
   33520:	0001883a 	nop
    }
    return (pevent_return);
   33524:	e0bff617 	ldw	r2,-40(fp)
}
   33528:	e037883a 	mov	sp,fp
   3352c:	dfc00117 	ldw	ra,4(sp)
   33530:	df000017 	ldw	fp,0(sp)
   33534:	dec00204 	addi	sp,sp,8
   33538:	f800283a 	ret

0003353c <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   3353c:	defff504 	addi	sp,sp,-44
   33540:	dfc00a15 	stw	ra,40(sp)
   33544:	df000915 	stw	fp,36(sp)
   33548:	df000904 	addi	fp,sp,36
   3354c:	e13ffd15 	stw	r4,-12(fp)
   33550:	2805883a 	mov	r2,r5
   33554:	e1bfff15 	stw	r6,-4(fp)
   33558:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   3355c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   33560:	e0bfff17 	ldw	r2,-4(fp)
   33564:	10007226 	beq	r2,zero,33730 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   33568:	e0bffd17 	ldw	r2,-12(fp)
   3356c:	1000041e 	bne	r2,zero,33580 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   33570:	e0bfff17 	ldw	r2,-4(fp)
   33574:	00c00104 	movi	r3,4
   33578:	10c00005 	stb	r3,0(r2)
        return;
   3357c:	00006d06 	br	33734 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   33580:	e0bffd17 	ldw	r2,-12(fp)
   33584:	10800003 	ldbu	r2,0(r2)
   33588:	10803fcc 	andi	r2,r2,255
   3358c:	108000e0 	cmpeqi	r2,r2,3
   33590:	1000041e 	bne	r2,zero,335a4 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   33594:	e0bfff17 	ldw	r2,-4(fp)
   33598:	00c00044 	movi	r3,1
   3359c:	10c00005 	stb	r3,0(r2)
        return;
   335a0:	00006406 	br	33734 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   335a4:	d0a72903 	ldbu	r2,-25436(gp)
   335a8:	10803fcc 	andi	r2,r2,255
   335ac:	10000426 	beq	r2,zero,335c0 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   335b0:	e0bfff17 	ldw	r2,-4(fp)
   335b4:	00c00084 	movi	r3,2
   335b8:	10c00005 	stb	r3,0(r2)
        return;
   335bc:	00005d06 	br	33734 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   335c0:	d0a71b03 	ldbu	r2,-25492(gp)
   335c4:	10803fcc 	andi	r2,r2,255
   335c8:	10000426 	beq	r2,zero,335dc <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   335cc:	e0bfff17 	ldw	r2,-4(fp)
   335d0:	00c00344 	movi	r3,13
   335d4:	10c00005 	stb	r3,0(r2)
        return;
   335d8:	00005606 	br	33734 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   335dc:	0005303a 	rdctl	r2,status
   335e0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   335e4:	e0fffc17 	ldw	r3,-16(fp)
   335e8:	00bfff84 	movi	r2,-2
   335ec:	1884703a 	and	r2,r3,r2
   335f0:	1001703a 	wrctl	status,r2
  
  return context;
   335f4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   335f8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   335fc:	e0bffd17 	ldw	r2,-12(fp)
   33600:	1080020b 	ldhu	r2,8(r2)
   33604:	10bfffcc 	andi	r2,r2,65535
   33608:	10000d26 	beq	r2,zero,33640 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   3360c:	e0bffd17 	ldw	r2,-12(fp)
   33610:	1080020b 	ldhu	r2,8(r2)
   33614:	10bfffc4 	addi	r2,r2,-1
   33618:	1007883a 	mov	r3,r2
   3361c:	e0bffd17 	ldw	r2,-12(fp)
   33620:	10c0020d 	sth	r3,8(r2)
   33624:	e0bff717 	ldw	r2,-36(fp)
   33628:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3362c:	e0bff817 	ldw	r2,-32(fp)
   33630:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   33634:	e0bfff17 	ldw	r2,-4(fp)
   33638:	10000005 	stb	zero,0(r2)
        return;
   3363c:	00003d06 	br	33734 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   33640:	d0a72a17 	ldw	r2,-25432(gp)
   33644:	d0e72a17 	ldw	r3,-25432(gp)
   33648:	18c00c03 	ldbu	r3,48(r3)
   3364c:	18c00054 	ori	r3,r3,1
   33650:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   33654:	d0a72a17 	ldw	r2,-25432(gp)
   33658:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   3365c:	d0a72a17 	ldw	r2,-25432(gp)
   33660:	e0fffe0b 	ldhu	r3,-8(fp)
   33664:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   33668:	e13ffd17 	ldw	r4,-12(fp)
   3366c:	002f0f00 	call	2f0f0 <OS_EventTaskWait>
   33670:	e0bff717 	ldw	r2,-36(fp)
   33674:	e0bffb15 	stw	r2,-20(fp)
   33678:	e0bffb17 	ldw	r2,-20(fp)
   3367c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   33680:	002f9a40 	call	2f9a4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   33684:	0005303a 	rdctl	r2,status
   33688:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3368c:	e0fff917 	ldw	r3,-28(fp)
   33690:	00bfff84 	movi	r2,-2
   33694:	1884703a 	and	r2,r3,r2
   33698:	1001703a 	wrctl	status,r2
  
  return context;
   3369c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   336a0:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   336a4:	d0a72a17 	ldw	r2,-25432(gp)
   336a8:	10800c43 	ldbu	r2,49(r2)
   336ac:	10803fcc 	andi	r2,r2,255
   336b0:	10000326 	beq	r2,zero,336c0 <OSSemPend+0x184>
   336b4:	108000a0 	cmpeqi	r2,r2,2
   336b8:	1000041e 	bne	r2,zero,336cc <OSSemPend+0x190>
   336bc:	00000706 	br	336dc <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   336c0:	e0bfff17 	ldw	r2,-4(fp)
   336c4:	10000005 	stb	zero,0(r2)
             break;
   336c8:	00000c06 	br	336fc <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   336cc:	e0bfff17 	ldw	r2,-4(fp)
   336d0:	00c00384 	movi	r3,14
   336d4:	10c00005 	stb	r3,0(r2)
             break;
   336d8:	00000806 	br	336fc <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   336dc:	d0a72a17 	ldw	r2,-25432(gp)
   336e0:	e17ffd17 	ldw	r5,-12(fp)
   336e4:	1009883a 	mov	r4,r2
   336e8:	002f3500 	call	2f350 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   336ec:	e0bfff17 	ldw	r2,-4(fp)
   336f0:	00c00284 	movi	r3,10
   336f4:	10c00005 	stb	r3,0(r2)
             break;
   336f8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   336fc:	d0a72a17 	ldw	r2,-25432(gp)
   33700:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   33704:	d0a72a17 	ldw	r2,-25432(gp)
   33708:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   3370c:	d0a72a17 	ldw	r2,-25432(gp)
   33710:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   33714:	d0a72a17 	ldw	r2,-25432(gp)
   33718:	10000815 	stw	zero,32(r2)
   3371c:	e0bff717 	ldw	r2,-36(fp)
   33720:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   33724:	e0bffa17 	ldw	r2,-24(fp)
   33728:	1001703a 	wrctl	status,r2
   3372c:	00000106 	br	33734 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   33730:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   33734:	e037883a 	mov	sp,fp
   33738:	dfc00117 	ldw	ra,4(sp)
   3373c:	df000017 	ldw	fp,0(sp)
   33740:	dec00204 	addi	sp,sp,8
   33744:	f800283a 	ret

00033748 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   33748:	defff604 	addi	sp,sp,-40
   3374c:	dfc00915 	stw	ra,36(sp)
   33750:	df000815 	stw	fp,32(sp)
   33754:	df000804 	addi	fp,sp,32
   33758:	e13ffd15 	stw	r4,-12(fp)
   3375c:	2805883a 	mov	r2,r5
   33760:	e1bfff15 	stw	r6,-4(fp)
   33764:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   33768:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   3376c:	e0bfff17 	ldw	r2,-4(fp)
   33770:	1000021e 	bne	r2,zero,3377c <OSSemPendAbort+0x34>
        return (0);
   33774:	0005883a 	mov	r2,zero
   33778:	00004906 	br	338a0 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   3377c:	e0bffd17 	ldw	r2,-12(fp)
   33780:	1000051e 	bne	r2,zero,33798 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   33784:	e0bfff17 	ldw	r2,-4(fp)
   33788:	00c00104 	movi	r3,4
   3378c:	10c00005 	stb	r3,0(r2)
        return (0);
   33790:	0005883a 	mov	r2,zero
   33794:	00004206 	br	338a0 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   33798:	e0bffd17 	ldw	r2,-12(fp)
   3379c:	10800003 	ldbu	r2,0(r2)
   337a0:	10803fcc 	andi	r2,r2,255
   337a4:	108000e0 	cmpeqi	r2,r2,3
   337a8:	1000051e 	bne	r2,zero,337c0 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   337ac:	e0bfff17 	ldw	r2,-4(fp)
   337b0:	00c00044 	movi	r3,1
   337b4:	10c00005 	stb	r3,0(r2)
        return (0);
   337b8:	0005883a 	mov	r2,zero
   337bc:	00003806 	br	338a0 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   337c0:	0005303a 	rdctl	r2,status
   337c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   337c8:	e0fffc17 	ldw	r3,-16(fp)
   337cc:	00bfff84 	movi	r2,-2
   337d0:	1884703a 	and	r2,r3,r2
   337d4:	1001703a 	wrctl	status,r2
  
  return context;
   337d8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   337dc:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   337e0:	e0bffd17 	ldw	r2,-12(fp)
   337e4:	10800283 	ldbu	r2,10(r2)
   337e8:	10803fcc 	andi	r2,r2,255
   337ec:	10002526 	beq	r2,zero,33884 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   337f0:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   337f4:	e0bffe03 	ldbu	r2,-8(fp)
   337f8:	10800060 	cmpeqi	r2,r2,1
   337fc:	10000e26 	beq	r2,zero,33838 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   33800:	00000806 	br	33824 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   33804:	01c00084 	movi	r7,2
   33808:	01800044 	movi	r6,1
   3380c:	000b883a 	mov	r5,zero
   33810:	e13ffd17 	ldw	r4,-12(fp)
   33814:	002ef580 	call	2ef58 <OS_EventTaskRdy>
                     nbr_tasks++;
   33818:	e0bff803 	ldbu	r2,-32(fp)
   3381c:	10800044 	addi	r2,r2,1
   33820:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   33824:	e0bffd17 	ldw	r2,-12(fp)
   33828:	10800283 	ldbu	r2,10(r2)
   3382c:	10803fcc 	andi	r2,r2,255
   33830:	103ff41e 	bne	r2,zero,33804 <_gp+0xffff1cb8>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   33834:	00000906 	br	3385c <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   33838:	01c00084 	movi	r7,2
   3383c:	01800044 	movi	r6,1
   33840:	000b883a 	mov	r5,zero
   33844:	e13ffd17 	ldw	r4,-12(fp)
   33848:	002ef580 	call	2ef58 <OS_EventTaskRdy>
                 nbr_tasks++;
   3384c:	e0bff803 	ldbu	r2,-32(fp)
   33850:	10800044 	addi	r2,r2,1
   33854:	e0bff805 	stb	r2,-32(fp)
                 break;
   33858:	0001883a 	nop
   3385c:	e0bff917 	ldw	r2,-28(fp)
   33860:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   33864:	e0bffa17 	ldw	r2,-24(fp)
   33868:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   3386c:	002f9a40 	call	2f9a4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   33870:	e0bfff17 	ldw	r2,-4(fp)
   33874:	00c00384 	movi	r3,14
   33878:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   3387c:	e0bff803 	ldbu	r2,-32(fp)
   33880:	00000706 	br	338a0 <OSSemPendAbort+0x158>
   33884:	e0bff917 	ldw	r2,-28(fp)
   33888:	e0bffb15 	stw	r2,-20(fp)
   3388c:	e0bffb17 	ldw	r2,-20(fp)
   33890:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   33894:	e0bfff17 	ldw	r2,-4(fp)
   33898:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   3389c:	0005883a 	mov	r2,zero
}
   338a0:	e037883a 	mov	sp,fp
   338a4:	dfc00117 	ldw	ra,4(sp)
   338a8:	df000017 	ldw	fp,0(sp)
   338ac:	dec00204 	addi	sp,sp,8
   338b0:	f800283a 	ret

000338b4 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   338b4:	defff804 	addi	sp,sp,-32
   338b8:	dfc00715 	stw	ra,28(sp)
   338bc:	df000615 	stw	fp,24(sp)
   338c0:	df000604 	addi	fp,sp,24
   338c4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   338c8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   338cc:	e0bfff17 	ldw	r2,-4(fp)
   338d0:	1000021e 	bne	r2,zero,338dc <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   338d4:	00800104 	movi	r2,4
   338d8:	00003506 	br	339b0 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   338dc:	e0bfff17 	ldw	r2,-4(fp)
   338e0:	10800003 	ldbu	r2,0(r2)
   338e4:	10803fcc 	andi	r2,r2,255
   338e8:	108000e0 	cmpeqi	r2,r2,3
   338ec:	1000021e 	bne	r2,zero,338f8 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   338f0:	00800044 	movi	r2,1
   338f4:	00002e06 	br	339b0 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   338f8:	0005303a 	rdctl	r2,status
   338fc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   33900:	e0fffe17 	ldw	r3,-8(fp)
   33904:	00bfff84 	movi	r2,-2
   33908:	1884703a 	and	r2,r3,r2
   3390c:	1001703a 	wrctl	status,r2
  
  return context;
   33910:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   33914:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   33918:	e0bfff17 	ldw	r2,-4(fp)
   3391c:	10800283 	ldbu	r2,10(r2)
   33920:	10803fcc 	andi	r2,r2,255
   33924:	10000c26 	beq	r2,zero,33958 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   33928:	000f883a 	mov	r7,zero
   3392c:	01800044 	movi	r6,1
   33930:	000b883a 	mov	r5,zero
   33934:	e13fff17 	ldw	r4,-4(fp)
   33938:	002ef580 	call	2ef58 <OS_EventTaskRdy>
   3393c:	e0bffa17 	ldw	r2,-24(fp)
   33940:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   33944:	e0bffb17 	ldw	r2,-20(fp)
   33948:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   3394c:	002f9a40 	call	2f9a4 <OS_Sched>
        return (OS_ERR_NONE);
   33950:	0005883a 	mov	r2,zero
   33954:	00001606 	br	339b0 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   33958:	e0bfff17 	ldw	r2,-4(fp)
   3395c:	1080020b 	ldhu	r2,8(r2)
   33960:	10ffffcc 	andi	r3,r2,65535
   33964:	00bfffd4 	movui	r2,65535
   33968:	18800c26 	beq	r3,r2,3399c <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   3396c:	e0bfff17 	ldw	r2,-4(fp)
   33970:	1080020b 	ldhu	r2,8(r2)
   33974:	10800044 	addi	r2,r2,1
   33978:	1007883a 	mov	r3,r2
   3397c:	e0bfff17 	ldw	r2,-4(fp)
   33980:	10c0020d 	sth	r3,8(r2)
   33984:	e0bffa17 	ldw	r2,-24(fp)
   33988:	e0bffc15 	stw	r2,-16(fp)
   3398c:	e0bffc17 	ldw	r2,-16(fp)
   33990:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   33994:	0005883a 	mov	r2,zero
   33998:	00000506 	br	339b0 <OSSemPost+0xfc>
   3399c:	e0bffa17 	ldw	r2,-24(fp)
   339a0:	e0bffd15 	stw	r2,-12(fp)
   339a4:	e0bffd17 	ldw	r2,-12(fp)
   339a8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   339ac:	00800c84 	movi	r2,50
}
   339b0:	e037883a 	mov	sp,fp
   339b4:	dfc00117 	ldw	ra,4(sp)
   339b8:	df000017 	ldw	fp,0(sp)
   339bc:	dec00204 	addi	sp,sp,8
   339c0:	f800283a 	ret

000339c4 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   339c4:	defff704 	addi	sp,sp,-36
   339c8:	df000815 	stw	fp,32(sp)
   339cc:	df000804 	addi	fp,sp,32
   339d0:	e13ffe15 	stw	r4,-8(fp)
   339d4:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   339d8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   339dc:	e0bffe17 	ldw	r2,-8(fp)
   339e0:	1000021e 	bne	r2,zero,339ec <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   339e4:	00800104 	movi	r2,4
   339e8:	00003606 	br	33ac4 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   339ec:	e0bfff17 	ldw	r2,-4(fp)
   339f0:	1000021e 	bne	r2,zero,339fc <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   339f4:	00800244 	movi	r2,9
   339f8:	00003206 	br	33ac4 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   339fc:	e0bffe17 	ldw	r2,-8(fp)
   33a00:	10800003 	ldbu	r2,0(r2)
   33a04:	10803fcc 	andi	r2,r2,255
   33a08:	108000e0 	cmpeqi	r2,r2,3
   33a0c:	1000021e 	bne	r2,zero,33a18 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   33a10:	00800044 	movi	r2,1
   33a14:	00002b06 	br	33ac4 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   33a18:	0005303a 	rdctl	r2,status
   33a1c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   33a20:	e0fffd17 	ldw	r3,-12(fp)
   33a24:	00bfff84 	movi	r2,-2
   33a28:	1884703a 	and	r2,r3,r2
   33a2c:	1001703a 	wrctl	status,r2
  
  return context;
   33a30:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   33a34:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   33a38:	e0bffe17 	ldw	r2,-8(fp)
   33a3c:	10c00283 	ldbu	r3,10(r2)
   33a40:	e0bfff17 	ldw	r2,-4(fp)
   33a44:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   33a48:	e0bffe17 	ldw	r2,-8(fp)
   33a4c:	108002c4 	addi	r2,r2,11
   33a50:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   33a54:	e0bfff17 	ldw	r2,-4(fp)
   33a58:	10800084 	addi	r2,r2,2
   33a5c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   33a60:	e03ffa05 	stb	zero,-24(fp)
   33a64:	00000b06 	br	33a94 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   33a68:	e0bff917 	ldw	r2,-28(fp)
   33a6c:	10c00044 	addi	r3,r2,1
   33a70:	e0fff915 	stw	r3,-28(fp)
   33a74:	e0fff817 	ldw	r3,-32(fp)
   33a78:	19000044 	addi	r4,r3,1
   33a7c:	e13ff815 	stw	r4,-32(fp)
   33a80:	18c00003 	ldbu	r3,0(r3)
   33a84:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   33a88:	e0bffa03 	ldbu	r2,-24(fp)
   33a8c:	10800044 	addi	r2,r2,1
   33a90:	e0bffa05 	stb	r2,-24(fp)
   33a94:	e0bffa03 	ldbu	r2,-24(fp)
   33a98:	108000f0 	cmpltui	r2,r2,3
   33a9c:	103ff21e 	bne	r2,zero,33a68 <_gp+0xffff1f1c>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   33aa0:	e0bffe17 	ldw	r2,-8(fp)
   33aa4:	10c0020b 	ldhu	r3,8(r2)
   33aa8:	e0bfff17 	ldw	r2,-4(fp)
   33aac:	10c0000d 	sth	r3,0(r2)
   33ab0:	e0bffb17 	ldw	r2,-20(fp)
   33ab4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   33ab8:	e0bffc17 	ldw	r2,-16(fp)
   33abc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   33ac0:	0005883a 	mov	r2,zero
}
   33ac4:	e037883a 	mov	sp,fp
   33ac8:	df000017 	ldw	fp,0(sp)
   33acc:	dec00104 	addi	sp,sp,4
   33ad0:	f800283a 	ret

00033ad4 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   33ad4:	defff904 	addi	sp,sp,-28
   33ad8:	df000615 	stw	fp,24(sp)
   33adc:	df000604 	addi	fp,sp,24
   33ae0:	e13ffd15 	stw	r4,-12(fp)
   33ae4:	2805883a 	mov	r2,r5
   33ae8:	e1bfff15 	stw	r6,-4(fp)
   33aec:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   33af0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   33af4:	e0bfff17 	ldw	r2,-4(fp)
   33af8:	10003126 	beq	r2,zero,33bc0 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   33afc:	e0bffd17 	ldw	r2,-12(fp)
   33b00:	1000041e 	bne	r2,zero,33b14 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   33b04:	e0bfff17 	ldw	r2,-4(fp)
   33b08:	00c00104 	movi	r3,4
   33b0c:	10c00005 	stb	r3,0(r2)
        return;
   33b10:	00002c06 	br	33bc4 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   33b14:	e0bffd17 	ldw	r2,-12(fp)
   33b18:	10800003 	ldbu	r2,0(r2)
   33b1c:	10803fcc 	andi	r2,r2,255
   33b20:	108000e0 	cmpeqi	r2,r2,3
   33b24:	1000041e 	bne	r2,zero,33b38 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   33b28:	e0bfff17 	ldw	r2,-4(fp)
   33b2c:	00c00044 	movi	r3,1
   33b30:	10c00005 	stb	r3,0(r2)
        return;
   33b34:	00002306 	br	33bc4 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   33b38:	0005303a 	rdctl	r2,status
   33b3c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   33b40:	e0fffc17 	ldw	r3,-16(fp)
   33b44:	00bfff84 	movi	r2,-2
   33b48:	1884703a 	and	r2,r3,r2
   33b4c:	1001703a 	wrctl	status,r2
  
  return context;
   33b50:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   33b54:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   33b58:	e0bfff17 	ldw	r2,-4(fp)
   33b5c:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   33b60:	e0bffd17 	ldw	r2,-12(fp)
   33b64:	1080020b 	ldhu	r2,8(r2)
   33b68:	10bfffcc 	andi	r2,r2,65535
   33b6c:	10000426 	beq	r2,zero,33b80 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   33b70:	e0bffd17 	ldw	r2,-12(fp)
   33b74:	e0fffe0b 	ldhu	r3,-8(fp)
   33b78:	10c0020d 	sth	r3,8(r2)
   33b7c:	00000b06 	br	33bac <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   33b80:	e0bffd17 	ldw	r2,-12(fp)
   33b84:	10800283 	ldbu	r2,10(r2)
   33b88:	10803fcc 	andi	r2,r2,255
   33b8c:	1000041e 	bne	r2,zero,33ba0 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   33b90:	e0bffd17 	ldw	r2,-12(fp)
   33b94:	e0fffe0b 	ldhu	r3,-8(fp)
   33b98:	10c0020d 	sth	r3,8(r2)
   33b9c:	00000306 	br	33bac <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   33ba0:	e0bfff17 	ldw	r2,-4(fp)
   33ba4:	00c01244 	movi	r3,73
   33ba8:	10c00005 	stb	r3,0(r2)
   33bac:	e0bffa17 	ldw	r2,-24(fp)
   33bb0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   33bb4:	e0bffb17 	ldw	r2,-20(fp)
   33bb8:	1001703a 	wrctl	status,r2
   33bbc:	00000106 	br	33bc4 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   33bc0:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   33bc4:	e037883a 	mov	sp,fp
   33bc8:	df000017 	ldw	fp,0(sp)
   33bcc:	dec00104 	addi	sp,sp,4
   33bd0:	f800283a 	ret

00033bd4 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   33bd4:	defff104 	addi	sp,sp,-60
   33bd8:	dfc00e15 	stw	ra,56(sp)
   33bdc:	df000d15 	stw	fp,52(sp)
   33be0:	df000d04 	addi	fp,sp,52
   33be4:	2007883a 	mov	r3,r4
   33be8:	2805883a 	mov	r2,r5
   33bec:	e0fffe05 	stb	r3,-8(fp)
   33bf0:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   33bf4:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   33bf8:	e0bffe03 	ldbu	r2,-8(fp)
   33bfc:	10800530 	cmpltui	r2,r2,20
   33c00:	1000051e 	bne	r2,zero,33c18 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   33c04:	e0bffe03 	ldbu	r2,-8(fp)
   33c08:	10803fe0 	cmpeqi	r2,r2,255
   33c0c:	1000021e 	bne	r2,zero,33c18 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   33c10:	00800a84 	movi	r2,42
   33c14:	00012606 	br	340b0 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   33c18:	e0bfff03 	ldbu	r2,-4(fp)
   33c1c:	10800530 	cmpltui	r2,r2,20
   33c20:	1000021e 	bne	r2,zero,33c2c <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   33c24:	00800a84 	movi	r2,42
   33c28:	00012106 	br	340b0 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   33c2c:	0005303a 	rdctl	r2,status
   33c30:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   33c34:	e0fffd17 	ldw	r3,-12(fp)
   33c38:	00bfff84 	movi	r2,-2
   33c3c:	1884703a 	and	r2,r3,r2
   33c40:	1001703a 	wrctl	status,r2
  
  return context;
   33c44:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   33c48:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   33c4c:	e0ffff03 	ldbu	r3,-4(fp)
   33c50:	00800134 	movhi	r2,4
   33c54:	10ba8404 	addi	r2,r2,-5616
   33c58:	18c7883a 	add	r3,r3,r3
   33c5c:	18c7883a 	add	r3,r3,r3
   33c60:	10c5883a 	add	r2,r2,r3
   33c64:	10800017 	ldw	r2,0(r2)
   33c68:	10000626 	beq	r2,zero,33c84 <OSTaskChangePrio+0xb0>
   33c6c:	e0bff517 	ldw	r2,-44(fp)
   33c70:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   33c74:	e0bff617 	ldw	r2,-40(fp)
   33c78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   33c7c:	00800a04 	movi	r2,40
   33c80:	00010b06 	br	340b0 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   33c84:	e0bffe03 	ldbu	r2,-8(fp)
   33c88:	10803fd8 	cmpnei	r2,r2,255
   33c8c:	1000031e 	bne	r2,zero,33c9c <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   33c90:	d0a72a17 	ldw	r2,-25432(gp)
   33c94:	10800c83 	ldbu	r2,50(r2)
   33c98:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   33c9c:	e0fffe03 	ldbu	r3,-8(fp)
   33ca0:	00800134 	movhi	r2,4
   33ca4:	10ba8404 	addi	r2,r2,-5616
   33ca8:	18c7883a 	add	r3,r3,r3
   33cac:	18c7883a 	add	r3,r3,r3
   33cb0:	10c5883a 	add	r2,r2,r3
   33cb4:	10800017 	ldw	r2,0(r2)
   33cb8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   33cbc:	e0bff817 	ldw	r2,-32(fp)
   33cc0:	1000061e 	bne	r2,zero,33cdc <OSTaskChangePrio+0x108>
   33cc4:	e0bff517 	ldw	r2,-44(fp)
   33cc8:	e0bff715 	stw	r2,-36(fp)
   33ccc:	e0bff717 	ldw	r2,-36(fp)
   33cd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   33cd4:	00800a44 	movi	r2,41
   33cd8:	0000f506 	br	340b0 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   33cdc:	e0bff817 	ldw	r2,-32(fp)
   33ce0:	10800058 	cmpnei	r2,r2,1
   33ce4:	1000061e 	bne	r2,zero,33d00 <OSTaskChangePrio+0x12c>
   33ce8:	e0bff517 	ldw	r2,-44(fp)
   33cec:	e0bff915 	stw	r2,-28(fp)
   33cf0:	e0bff917 	ldw	r2,-28(fp)
   33cf4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   33cf8:	008010c4 	movi	r2,67
   33cfc:	0000ec06 	br	340b0 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   33d00:	e0bfff03 	ldbu	r2,-4(fp)
   33d04:	1004d0fa 	srli	r2,r2,3
   33d08:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   33d0c:	e0bfff03 	ldbu	r2,-4(fp)
   33d10:	108001cc 	andi	r2,r2,7
   33d14:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   33d18:	e0bffb03 	ldbu	r2,-20(fp)
   33d1c:	00c00044 	movi	r3,1
   33d20:	1884983a 	sll	r2,r3,r2
   33d24:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   33d28:	e0bffb43 	ldbu	r2,-19(fp)
   33d2c:	00c00044 	movi	r3,1
   33d30:	1884983a 	sll	r2,r3,r2
   33d34:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   33d38:	e0fffe03 	ldbu	r3,-8(fp)
   33d3c:	00800134 	movhi	r2,4
   33d40:	10ba8404 	addi	r2,r2,-5616
   33d44:	18c7883a 	add	r3,r3,r3
   33d48:	18c7883a 	add	r3,r3,r3
   33d4c:	10c5883a 	add	r2,r2,r3
   33d50:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   33d54:	e0ffff03 	ldbu	r3,-4(fp)
   33d58:	00800134 	movhi	r2,4
   33d5c:	10ba8404 	addi	r2,r2,-5616
   33d60:	18c7883a 	add	r3,r3,r3
   33d64:	18c7883a 	add	r3,r3,r3
   33d68:	10c5883a 	add	r2,r2,r3
   33d6c:	e0fff817 	ldw	r3,-32(fp)
   33d70:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   33d74:	e0bff817 	ldw	r2,-32(fp)
   33d78:	10800d03 	ldbu	r2,52(r2)
   33d7c:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   33d80:	e0bff817 	ldw	r2,-32(fp)
   33d84:	10800d83 	ldbu	r2,54(r2)
   33d88:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   33d8c:	e0bff817 	ldw	r2,-32(fp)
   33d90:	10800d43 	ldbu	r2,53(r2)
   33d94:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   33d98:	e0fffc03 	ldbu	r3,-16(fp)
   33d9c:	d0a72744 	addi	r2,gp,-25443
   33da0:	1885883a 	add	r2,r3,r2
   33da4:	10c00003 	ldbu	r3,0(r2)
   33da8:	e0bffc83 	ldbu	r2,-14(fp)
   33dac:	1884703a 	and	r2,r3,r2
   33db0:	10803fcc 	andi	r2,r2,255
   33db4:	10002826 	beq	r2,zero,33e58 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   33db8:	e0fffc03 	ldbu	r3,-16(fp)
   33dbc:	e13ffc03 	ldbu	r4,-16(fp)
   33dc0:	d0a72744 	addi	r2,gp,-25443
   33dc4:	2085883a 	add	r2,r4,r2
   33dc8:	10800003 	ldbu	r2,0(r2)
   33dcc:	1009883a 	mov	r4,r2
   33dd0:	e0bffc83 	ldbu	r2,-14(fp)
   33dd4:	0084303a 	nor	r2,zero,r2
   33dd8:	2084703a 	and	r2,r4,r2
   33ddc:	1009883a 	mov	r4,r2
   33de0:	d0a72744 	addi	r2,gp,-25443
   33de4:	1885883a 	add	r2,r3,r2
   33de8:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   33dec:	e0fffc03 	ldbu	r3,-16(fp)
   33df0:	d0a72744 	addi	r2,gp,-25443
   33df4:	1885883a 	add	r2,r3,r2
   33df8:	10800003 	ldbu	r2,0(r2)
   33dfc:	10803fcc 	andi	r2,r2,255
   33e00:	1000061e 	bne	r2,zero,33e1c <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   33e04:	e0bffc43 	ldbu	r2,-15(fp)
   33e08:	0084303a 	nor	r2,zero,r2
   33e0c:	1007883a 	mov	r3,r2
   33e10:	d0a72703 	ldbu	r2,-25444(gp)
   33e14:	1884703a 	and	r2,r3,r2
   33e18:	d0a72705 	stb	r2,-25444(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   33e1c:	d0e72703 	ldbu	r3,-25444(gp)
   33e20:	e0bffb83 	ldbu	r2,-18(fp)
   33e24:	1884b03a 	or	r2,r3,r2
   33e28:	d0a72705 	stb	r2,-25444(gp)
         OSRdyTbl[y_new] |= bitx_new;
   33e2c:	e0fffb03 	ldbu	r3,-20(fp)
   33e30:	e13ffb03 	ldbu	r4,-20(fp)
   33e34:	d0a72744 	addi	r2,gp,-25443
   33e38:	2085883a 	add	r2,r4,r2
   33e3c:	11000003 	ldbu	r4,0(r2)
   33e40:	e0bffbc3 	ldbu	r2,-17(fp)
   33e44:	2084b03a 	or	r2,r4,r2
   33e48:	1009883a 	mov	r4,r2
   33e4c:	d0a72744 	addi	r2,gp,-25443
   33e50:	1885883a 	add	r2,r3,r2
   33e54:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   33e58:	e0bff817 	ldw	r2,-32(fp)
   33e5c:	10800717 	ldw	r2,28(r2)
   33e60:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   33e64:	e0bff317 	ldw	r2,-52(fp)
   33e68:	10003326 	beq	r2,zero,33f38 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   33e6c:	e0bffc03 	ldbu	r2,-16(fp)
   33e70:	e0fffc03 	ldbu	r3,-16(fp)
   33e74:	e13ff317 	ldw	r4,-52(fp)
   33e78:	20c7883a 	add	r3,r4,r3
   33e7c:	18c002c4 	addi	r3,r3,11
   33e80:	18c00003 	ldbu	r3,0(r3)
   33e84:	1809883a 	mov	r4,r3
   33e88:	e0fffc83 	ldbu	r3,-14(fp)
   33e8c:	00c6303a 	nor	r3,zero,r3
   33e90:	20c6703a 	and	r3,r4,r3
   33e94:	1809883a 	mov	r4,r3
   33e98:	e0fff317 	ldw	r3,-52(fp)
   33e9c:	1885883a 	add	r2,r3,r2
   33ea0:	108002c4 	addi	r2,r2,11
   33ea4:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   33ea8:	e0bffc03 	ldbu	r2,-16(fp)
   33eac:	e0fff317 	ldw	r3,-52(fp)
   33eb0:	1885883a 	add	r2,r3,r2
   33eb4:	108002c4 	addi	r2,r2,11
   33eb8:	10800003 	ldbu	r2,0(r2)
   33ebc:	10803fcc 	andi	r2,r2,255
   33ec0:	1000091e 	bne	r2,zero,33ee8 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   33ec4:	e0bff317 	ldw	r2,-52(fp)
   33ec8:	10800283 	ldbu	r2,10(r2)
   33ecc:	1007883a 	mov	r3,r2
   33ed0:	e0bffc43 	ldbu	r2,-15(fp)
   33ed4:	0084303a 	nor	r2,zero,r2
   33ed8:	1884703a 	and	r2,r3,r2
   33edc:	1007883a 	mov	r3,r2
   33ee0:	e0bff317 	ldw	r2,-52(fp)
   33ee4:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   33ee8:	e0bff317 	ldw	r2,-52(fp)
   33eec:	10c00283 	ldbu	r3,10(r2)
   33ef0:	e0bffb83 	ldbu	r2,-18(fp)
   33ef4:	1884b03a 	or	r2,r3,r2
   33ef8:	1007883a 	mov	r3,r2
   33efc:	e0bff317 	ldw	r2,-52(fp)
   33f00:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   33f04:	e0bffb03 	ldbu	r2,-20(fp)
   33f08:	e0fffb03 	ldbu	r3,-20(fp)
   33f0c:	e13ff317 	ldw	r4,-52(fp)
   33f10:	20c7883a 	add	r3,r4,r3
   33f14:	18c002c4 	addi	r3,r3,11
   33f18:	19000003 	ldbu	r4,0(r3)
   33f1c:	e0fffbc3 	ldbu	r3,-17(fp)
   33f20:	20c6b03a 	or	r3,r4,r3
   33f24:	1809883a 	mov	r4,r3
   33f28:	e0fff317 	ldw	r3,-52(fp)
   33f2c:	1885883a 	add	r2,r3,r2
   33f30:	108002c4 	addi	r2,r2,11
   33f34:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   33f38:	e0bff817 	ldw	r2,-32(fp)
   33f3c:	10800817 	ldw	r2,32(r2)
   33f40:	10004226 	beq	r2,zero,3404c <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   33f44:	e0bff817 	ldw	r2,-32(fp)
   33f48:	10800817 	ldw	r2,32(r2)
   33f4c:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   33f50:	e0bff417 	ldw	r2,-48(fp)
   33f54:	10800017 	ldw	r2,0(r2)
   33f58:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   33f5c:	00003906 	br	34044 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   33f60:	e0bffc03 	ldbu	r2,-16(fp)
   33f64:	e0fffc03 	ldbu	r3,-16(fp)
   33f68:	e13ff317 	ldw	r4,-52(fp)
   33f6c:	20c7883a 	add	r3,r4,r3
   33f70:	18c002c4 	addi	r3,r3,11
   33f74:	18c00003 	ldbu	r3,0(r3)
   33f78:	1809883a 	mov	r4,r3
   33f7c:	e0fffc83 	ldbu	r3,-14(fp)
   33f80:	00c6303a 	nor	r3,zero,r3
   33f84:	20c6703a 	and	r3,r4,r3
   33f88:	1809883a 	mov	r4,r3
   33f8c:	e0fff317 	ldw	r3,-52(fp)
   33f90:	1885883a 	add	r2,r3,r2
   33f94:	108002c4 	addi	r2,r2,11
   33f98:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   33f9c:	e0bffc03 	ldbu	r2,-16(fp)
   33fa0:	e0fff317 	ldw	r3,-52(fp)
   33fa4:	1885883a 	add	r2,r3,r2
   33fa8:	108002c4 	addi	r2,r2,11
   33fac:	10800003 	ldbu	r2,0(r2)
   33fb0:	10803fcc 	andi	r2,r2,255
   33fb4:	1000091e 	bne	r2,zero,33fdc <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   33fb8:	e0bff317 	ldw	r2,-52(fp)
   33fbc:	10800283 	ldbu	r2,10(r2)
   33fc0:	1007883a 	mov	r3,r2
   33fc4:	e0bffc43 	ldbu	r2,-15(fp)
   33fc8:	0084303a 	nor	r2,zero,r2
   33fcc:	1884703a 	and	r2,r3,r2
   33fd0:	1007883a 	mov	r3,r2
   33fd4:	e0bff317 	ldw	r2,-52(fp)
   33fd8:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   33fdc:	e0bff317 	ldw	r2,-52(fp)
   33fe0:	10c00283 	ldbu	r3,10(r2)
   33fe4:	e0bffb83 	ldbu	r2,-18(fp)
   33fe8:	1884b03a 	or	r2,r3,r2
   33fec:	1007883a 	mov	r3,r2
   33ff0:	e0bff317 	ldw	r2,-52(fp)
   33ff4:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   33ff8:	e0bffb03 	ldbu	r2,-20(fp)
   33ffc:	e0fffb03 	ldbu	r3,-20(fp)
   34000:	e13ff317 	ldw	r4,-52(fp)
   34004:	20c7883a 	add	r3,r4,r3
   34008:	18c002c4 	addi	r3,r3,11
   3400c:	19000003 	ldbu	r4,0(r3)
   34010:	e0fffbc3 	ldbu	r3,-17(fp)
   34014:	20c6b03a 	or	r3,r4,r3
   34018:	1809883a 	mov	r4,r3
   3401c:	e0fff317 	ldw	r3,-52(fp)
   34020:	1885883a 	add	r2,r3,r2
   34024:	108002c4 	addi	r2,r2,11
   34028:	11000005 	stb	r4,0(r2)
            pevents++;
   3402c:	e0bff417 	ldw	r2,-48(fp)
   34030:	10800104 	addi	r2,r2,4
   34034:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   34038:	e0bff417 	ldw	r2,-48(fp)
   3403c:	10800017 	ldw	r2,0(r2)
   34040:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   34044:	e0bff317 	ldw	r2,-52(fp)
   34048:	103fc51e 	bne	r2,zero,33f60 <_gp+0xffff2414>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   3404c:	e0bff817 	ldw	r2,-32(fp)
   34050:	e0ffff03 	ldbu	r3,-4(fp)
   34054:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   34058:	e0bff817 	ldw	r2,-32(fp)
   3405c:	e0fffb03 	ldbu	r3,-20(fp)
   34060:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   34064:	e0bff817 	ldw	r2,-32(fp)
   34068:	e0fffb43 	ldbu	r3,-19(fp)
   3406c:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   34070:	e0bff817 	ldw	r2,-32(fp)
   34074:	e0fffb83 	ldbu	r3,-18(fp)
   34078:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   3407c:	e0bff817 	ldw	r2,-32(fp)
   34080:	e0fffbc3 	ldbu	r3,-17(fp)
   34084:	10c00d45 	stb	r3,53(r2)
   34088:	e0bff517 	ldw	r2,-44(fp)
   3408c:	e0bffa15 	stw	r2,-24(fp)
   34090:	e0bffa17 	ldw	r2,-24(fp)
   34094:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   34098:	d0a71b43 	ldbu	r2,-25491(gp)
   3409c:	10803fcc 	andi	r2,r2,255
   340a0:	10800058 	cmpnei	r2,r2,1
   340a4:	1000011e 	bne	r2,zero,340ac <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   340a8:	002f9a40 	call	2f9a4 <OS_Sched>
    }
    return (OS_ERR_NONE);
   340ac:	0005883a 	mov	r2,zero
}
   340b0:	e037883a 	mov	sp,fp
   340b4:	dfc00117 	ldw	ra,4(sp)
   340b8:	df000017 	ldw	fp,0(sp)
   340bc:	dec00204 	addi	sp,sp,8
   340c0:	f800283a 	ret

000340c4 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   340c4:	deffee04 	addi	sp,sp,-72
   340c8:	dfc01115 	stw	ra,68(sp)
   340cc:	df001015 	stw	fp,64(sp)
   340d0:	df001004 	addi	fp,sp,64
   340d4:	e13ffc15 	stw	r4,-16(fp)
   340d8:	e17ffd15 	stw	r5,-12(fp)
   340dc:	e1bffe15 	stw	r6,-8(fp)
   340e0:	3805883a 	mov	r2,r7
   340e4:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   340e8:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   340ec:	e0bfff03 	ldbu	r2,-4(fp)
   340f0:	10800570 	cmpltui	r2,r2,21
   340f4:	1000021e 	bne	r2,zero,34100 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   340f8:	00800a84 	movi	r2,42
   340fc:	00005706 	br	3425c <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   34100:	0005303a 	rdctl	r2,status
   34104:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   34108:	e0fffb17 	ldw	r3,-20(fp)
   3410c:	00bfff84 	movi	r2,-2
   34110:	1884703a 	and	r2,r3,r2
   34114:	1001703a 	wrctl	status,r2
  
  return context;
   34118:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   3411c:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   34120:	d0a72903 	ldbu	r2,-25436(gp)
   34124:	10803fcc 	andi	r2,r2,255
   34128:	10000626 	beq	r2,zero,34144 <OSTaskCreate+0x80>
   3412c:	e0bff317 	ldw	r2,-52(fp)
   34130:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   34134:	e0bff417 	ldw	r2,-48(fp)
   34138:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   3413c:	00800f04 	movi	r2,60
   34140:	00004606 	br	3425c <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   34144:	e0ffff03 	ldbu	r3,-4(fp)
   34148:	00800134 	movhi	r2,4
   3414c:	10ba8404 	addi	r2,r2,-5616
   34150:	18c7883a 	add	r3,r3,r3
   34154:	18c7883a 	add	r3,r3,r3
   34158:	10c5883a 	add	r2,r2,r3
   3415c:	10800017 	ldw	r2,0(r2)
   34160:	1000391e 	bne	r2,zero,34248 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   34164:	e0ffff03 	ldbu	r3,-4(fp)
   34168:	00800134 	movhi	r2,4
   3416c:	10ba8404 	addi	r2,r2,-5616
   34170:	18c7883a 	add	r3,r3,r3
   34174:	18c7883a 	add	r3,r3,r3
   34178:	10c5883a 	add	r2,r2,r3
   3417c:	00c00044 	movi	r3,1
   34180:	10c00015 	stw	r3,0(r2)
   34184:	e0bff317 	ldw	r2,-52(fp)
   34188:	e0bff515 	stw	r2,-44(fp)
   3418c:	e0bff517 	ldw	r2,-44(fp)
   34190:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   34194:	000f883a 	mov	r7,zero
   34198:	e1bffe17 	ldw	r6,-8(fp)
   3419c:	e17ffd17 	ldw	r5,-12(fp)
   341a0:	e13ffc17 	ldw	r4,-16(fp)
   341a4:	00372200 	call	37220 <OSTaskStkInit>
   341a8:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   341ac:	e0bfff03 	ldbu	r2,-4(fp)
   341b0:	d8000215 	stw	zero,8(sp)
   341b4:	d8000115 	stw	zero,4(sp)
   341b8:	d8000015 	stw	zero,0(sp)
   341bc:	000f883a 	mov	r7,zero
   341c0:	000d883a 	mov	r6,zero
   341c4:	e17ff717 	ldw	r5,-36(fp)
   341c8:	1009883a 	mov	r4,r2
   341cc:	002fda40 	call	2fda4 <OS_TCBInit>
   341d0:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   341d4:	e0bff803 	ldbu	r2,-32(fp)
   341d8:	1000061e 	bne	r2,zero,341f4 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   341dc:	d0a71b43 	ldbu	r2,-25491(gp)
   341e0:	10803fcc 	andi	r2,r2,255
   341e4:	10800058 	cmpnei	r2,r2,1
   341e8:	1000151e 	bne	r2,zero,34240 <OSTaskCreate+0x17c>
                OS_Sched();
   341ec:	002f9a40 	call	2f9a4 <OS_Sched>
   341f0:	00001306 	br	34240 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   341f4:	0005303a 	rdctl	r2,status
   341f8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   341fc:	e0fffa17 	ldw	r3,-24(fp)
   34200:	00bfff84 	movi	r2,-2
   34204:	1884703a 	and	r2,r3,r2
   34208:	1001703a 	wrctl	status,r2
  
  return context;
   3420c:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   34210:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   34214:	e0ffff03 	ldbu	r3,-4(fp)
   34218:	00800134 	movhi	r2,4
   3421c:	10ba8404 	addi	r2,r2,-5616
   34220:	18c7883a 	add	r3,r3,r3
   34224:	18c7883a 	add	r3,r3,r3
   34228:	10c5883a 	add	r2,r2,r3
   3422c:	10000015 	stw	zero,0(r2)
   34230:	e0bff317 	ldw	r2,-52(fp)
   34234:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   34238:	e0bff617 	ldw	r2,-40(fp)
   3423c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   34240:	e0bff803 	ldbu	r2,-32(fp)
   34244:	00000506 	br	3425c <OSTaskCreate+0x198>
   34248:	e0bff317 	ldw	r2,-52(fp)
   3424c:	e0bff915 	stw	r2,-28(fp)
   34250:	e0bff917 	ldw	r2,-28(fp)
   34254:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   34258:	00800a04 	movi	r2,40
}
   3425c:	e037883a 	mov	sp,fp
   34260:	dfc00117 	ldw	ra,4(sp)
   34264:	df000017 	ldw	fp,0(sp)
   34268:	dec00204 	addi	sp,sp,8
   3426c:	f800283a 	ret

00034270 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   34270:	deffec04 	addi	sp,sp,-80
   34274:	dfc01315 	stw	ra,76(sp)
   34278:	df001215 	stw	fp,72(sp)
   3427c:	df001204 	addi	fp,sp,72
   34280:	e13ffa15 	stw	r4,-24(fp)
   34284:	e17ffb15 	stw	r5,-20(fp)
   34288:	e1bffc15 	stw	r6,-16(fp)
   3428c:	3809883a 	mov	r4,r7
   34290:	e0c00217 	ldw	r3,8(fp)
   34294:	e0800617 	ldw	r2,24(fp)
   34298:	e13ffd05 	stb	r4,-12(fp)
   3429c:	e0fffe0d 	sth	r3,-8(fp)
   342a0:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   342a4:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   342a8:	e0bffd03 	ldbu	r2,-12(fp)
   342ac:	10800570 	cmpltui	r2,r2,21
   342b0:	1000021e 	bne	r2,zero,342bc <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   342b4:	00800a84 	movi	r2,42
   342b8:	00006106 	br	34440 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   342bc:	0005303a 	rdctl	r2,status
   342c0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   342c4:	e0fff917 	ldw	r3,-28(fp)
   342c8:	00bfff84 	movi	r2,-2
   342cc:	1884703a 	and	r2,r3,r2
   342d0:	1001703a 	wrctl	status,r2
  
  return context;
   342d4:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   342d8:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   342dc:	d0a72903 	ldbu	r2,-25436(gp)
   342e0:	10803fcc 	andi	r2,r2,255
   342e4:	10000626 	beq	r2,zero,34300 <OSTaskCreateExt+0x90>
   342e8:	e0bff117 	ldw	r2,-60(fp)
   342ec:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   342f0:	e0bff217 	ldw	r2,-56(fp)
   342f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   342f8:	00800f04 	movi	r2,60
   342fc:	00005006 	br	34440 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   34300:	e0fffd03 	ldbu	r3,-12(fp)
   34304:	00800134 	movhi	r2,4
   34308:	10ba8404 	addi	r2,r2,-5616
   3430c:	18c7883a 	add	r3,r3,r3
   34310:	18c7883a 	add	r3,r3,r3
   34314:	10c5883a 	add	r2,r2,r3
   34318:	10800017 	ldw	r2,0(r2)
   3431c:	1000431e 	bne	r2,zero,3442c <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   34320:	e0fffd03 	ldbu	r3,-12(fp)
   34324:	00800134 	movhi	r2,4
   34328:	10ba8404 	addi	r2,r2,-5616
   3432c:	18c7883a 	add	r3,r3,r3
   34330:	18c7883a 	add	r3,r3,r3
   34334:	10c5883a 	add	r2,r2,r3
   34338:	00c00044 	movi	r3,1
   3433c:	10c00015 	stw	r3,0(r2)
   34340:	e0bff117 	ldw	r2,-60(fp)
   34344:	e0bff315 	stw	r2,-52(fp)
   34348:	e0bff317 	ldw	r2,-52(fp)
   3434c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   34350:	e0bfff0b 	ldhu	r2,-4(fp)
   34354:	100d883a 	mov	r6,r2
   34358:	e1400417 	ldw	r5,16(fp)
   3435c:	e1000317 	ldw	r4,12(fp)
   34360:	00352d00 	call	352d0 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   34364:	e0bfff0b 	ldhu	r2,-4(fp)
   34368:	100f883a 	mov	r7,r2
   3436c:	e1bffc17 	ldw	r6,-16(fp)
   34370:	e17ffb17 	ldw	r5,-20(fp)
   34374:	e13ffa17 	ldw	r4,-24(fp)
   34378:	00372200 	call	37220 <OSTaskStkInit>
   3437c:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   34380:	e0fffd03 	ldbu	r3,-12(fp)
   34384:	e13ffe0b 	ldhu	r4,-8(fp)
   34388:	e0bfff0b 	ldhu	r2,-4(fp)
   3438c:	d8800215 	stw	r2,8(sp)
   34390:	e0800517 	ldw	r2,20(fp)
   34394:	d8800115 	stw	r2,4(sp)
   34398:	e0800417 	ldw	r2,16(fp)
   3439c:	d8800015 	stw	r2,0(sp)
   343a0:	200f883a 	mov	r7,r4
   343a4:	e1800317 	ldw	r6,12(fp)
   343a8:	e17ff517 	ldw	r5,-44(fp)
   343ac:	1809883a 	mov	r4,r3
   343b0:	002fda40 	call	2fda4 <OS_TCBInit>
   343b4:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   343b8:	e0bff603 	ldbu	r2,-40(fp)
   343bc:	1000061e 	bne	r2,zero,343d8 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   343c0:	d0a71b43 	ldbu	r2,-25491(gp)
   343c4:	10803fcc 	andi	r2,r2,255
   343c8:	10800058 	cmpnei	r2,r2,1
   343cc:	1000151e 	bne	r2,zero,34424 <OSTaskCreateExt+0x1b4>
                OS_Sched();
   343d0:	002f9a40 	call	2f9a4 <OS_Sched>
   343d4:	00001306 	br	34424 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   343d8:	0005303a 	rdctl	r2,status
   343dc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   343e0:	e0fff817 	ldw	r3,-32(fp)
   343e4:	00bfff84 	movi	r2,-2
   343e8:	1884703a 	and	r2,r3,r2
   343ec:	1001703a 	wrctl	status,r2
  
  return context;
   343f0:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   343f4:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   343f8:	e0fffd03 	ldbu	r3,-12(fp)
   343fc:	00800134 	movhi	r2,4
   34400:	10ba8404 	addi	r2,r2,-5616
   34404:	18c7883a 	add	r3,r3,r3
   34408:	18c7883a 	add	r3,r3,r3
   3440c:	10c5883a 	add	r2,r2,r3
   34410:	10000015 	stw	zero,0(r2)
   34414:	e0bff117 	ldw	r2,-60(fp)
   34418:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3441c:	e0bff417 	ldw	r2,-48(fp)
   34420:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   34424:	e0bff603 	ldbu	r2,-40(fp)
   34428:	00000506 	br	34440 <OSTaskCreateExt+0x1d0>
   3442c:	e0bff117 	ldw	r2,-60(fp)
   34430:	e0bff715 	stw	r2,-36(fp)
   34434:	e0bff717 	ldw	r2,-36(fp)
   34438:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   3443c:	00800a04 	movi	r2,40
}
   34440:	e037883a 	mov	sp,fp
   34444:	dfc00117 	ldw	ra,4(sp)
   34448:	df000017 	ldw	fp,0(sp)
   3444c:	dec00204 	addi	sp,sp,8
   34450:	f800283a 	ret

00034454 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   34454:	defff404 	addi	sp,sp,-48
   34458:	dfc00b15 	stw	ra,44(sp)
   3445c:	df000a15 	stw	fp,40(sp)
   34460:	df000a04 	addi	fp,sp,40
   34464:	2005883a 	mov	r2,r4
   34468:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   3446c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   34470:	d0a72903 	ldbu	r2,-25436(gp)
   34474:	10803fcc 	andi	r2,r2,255
   34478:	10000226 	beq	r2,zero,34484 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   3447c:	00801004 	movi	r2,64
   34480:	0000c006 	br	34784 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   34484:	e0bfff03 	ldbu	r2,-4(fp)
   34488:	10800518 	cmpnei	r2,r2,20
   3448c:	1000021e 	bne	r2,zero,34498 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   34490:	00800f84 	movi	r2,62
   34494:	0000bb06 	br	34784 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   34498:	e0bfff03 	ldbu	r2,-4(fp)
   3449c:	10800530 	cmpltui	r2,r2,20
   344a0:	1000051e 	bne	r2,zero,344b8 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   344a4:	e0bfff03 	ldbu	r2,-4(fp)
   344a8:	10803fe0 	cmpeqi	r2,r2,255
   344ac:	1000021e 	bne	r2,zero,344b8 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   344b0:	00800a84 	movi	r2,42
   344b4:	0000b306 	br	34784 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   344b8:	0005303a 	rdctl	r2,status
   344bc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   344c0:	e0fffe17 	ldw	r3,-8(fp)
   344c4:	00bfff84 	movi	r2,-2
   344c8:	1884703a 	and	r2,r3,r2
   344cc:	1001703a 	wrctl	status,r2
  
  return context;
   344d0:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   344d4:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   344d8:	e0bfff03 	ldbu	r2,-4(fp)
   344dc:	10803fd8 	cmpnei	r2,r2,255
   344e0:	1000031e 	bne	r2,zero,344f0 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   344e4:	d0a72a17 	ldw	r2,-25432(gp)
   344e8:	10800c83 	ldbu	r2,50(r2)
   344ec:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   344f0:	e0ffff03 	ldbu	r3,-4(fp)
   344f4:	00800134 	movhi	r2,4
   344f8:	10ba8404 	addi	r2,r2,-5616
   344fc:	18c7883a 	add	r3,r3,r3
   34500:	18c7883a 	add	r3,r3,r3
   34504:	10c5883a 	add	r2,r2,r3
   34508:	10800017 	ldw	r2,0(r2)
   3450c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   34510:	e0bff817 	ldw	r2,-32(fp)
   34514:	1000061e 	bne	r2,zero,34530 <OSTaskDel+0xdc>
   34518:	e0bff617 	ldw	r2,-40(fp)
   3451c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   34520:	e0bff717 	ldw	r2,-36(fp)
   34524:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   34528:	008010c4 	movi	r2,67
   3452c:	00009506 	br	34784 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   34530:	e0bff817 	ldw	r2,-32(fp)
   34534:	10800058 	cmpnei	r2,r2,1
   34538:	1000061e 	bne	r2,zero,34554 <OSTaskDel+0x100>
   3453c:	e0bff617 	ldw	r2,-40(fp)
   34540:	e0bff915 	stw	r2,-28(fp)
   34544:	e0bff917 	ldw	r2,-28(fp)
   34548:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   3454c:	00800f44 	movi	r2,61
   34550:	00008c06 	br	34784 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   34554:	e0bff817 	ldw	r2,-32(fp)
   34558:	10800d03 	ldbu	r2,52(r2)
   3455c:	10c03fcc 	andi	r3,r2,255
   34560:	e0bff817 	ldw	r2,-32(fp)
   34564:	10800d03 	ldbu	r2,52(r2)
   34568:	11003fcc 	andi	r4,r2,255
   3456c:	d0a72744 	addi	r2,gp,-25443
   34570:	2085883a 	add	r2,r4,r2
   34574:	10800003 	ldbu	r2,0(r2)
   34578:	1009883a 	mov	r4,r2
   3457c:	e0bff817 	ldw	r2,-32(fp)
   34580:	10800d43 	ldbu	r2,53(r2)
   34584:	0084303a 	nor	r2,zero,r2
   34588:	2084703a 	and	r2,r4,r2
   3458c:	1009883a 	mov	r4,r2
   34590:	d0a72744 	addi	r2,gp,-25443
   34594:	1885883a 	add	r2,r3,r2
   34598:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   3459c:	e0bff817 	ldw	r2,-32(fp)
   345a0:	10800d03 	ldbu	r2,52(r2)
   345a4:	10c03fcc 	andi	r3,r2,255
   345a8:	d0a72744 	addi	r2,gp,-25443
   345ac:	1885883a 	add	r2,r3,r2
   345b0:	10800003 	ldbu	r2,0(r2)
   345b4:	10803fcc 	andi	r2,r2,255
   345b8:	1000071e 	bne	r2,zero,345d8 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   345bc:	e0bff817 	ldw	r2,-32(fp)
   345c0:	10800d83 	ldbu	r2,54(r2)
   345c4:	0084303a 	nor	r2,zero,r2
   345c8:	1007883a 	mov	r3,r2
   345cc:	d0a72703 	ldbu	r2,-25444(gp)
   345d0:	1884703a 	and	r2,r3,r2
   345d4:	d0a72705 	stb	r2,-25444(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   345d8:	e0bff817 	ldw	r2,-32(fp)
   345dc:	10800717 	ldw	r2,28(r2)
   345e0:	10000526 	beq	r2,zero,345f8 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   345e4:	e0bff817 	ldw	r2,-32(fp)
   345e8:	10800717 	ldw	r2,28(r2)
   345ec:	100b883a 	mov	r5,r2
   345f0:	e13ff817 	ldw	r4,-32(fp)
   345f4:	002f3500 	call	2f350 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   345f8:	e0bff817 	ldw	r2,-32(fp)
   345fc:	10800817 	ldw	r2,32(r2)
   34600:	10000526 	beq	r2,zero,34618 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   34604:	e0bff817 	ldw	r2,-32(fp)
   34608:	10800817 	ldw	r2,32(r2)
   3460c:	100b883a 	mov	r5,r2
   34610:	e13ff817 	ldw	r4,-32(fp)
   34614:	002f4080 	call	2f408 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   34618:	e0bff817 	ldw	r2,-32(fp)
   3461c:	10800a17 	ldw	r2,40(r2)
   34620:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   34624:	e0bffb17 	ldw	r2,-20(fp)
   34628:	10000226 	beq	r2,zero,34634 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   3462c:	e13ffb17 	ldw	r4,-20(fp)
   34630:	00318780 	call	31878 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   34634:	e0bff817 	ldw	r2,-32(fp)
   34638:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   3463c:	e0bff817 	ldw	r2,-32(fp)
   34640:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   34644:	e0bff817 	ldw	r2,-32(fp)
   34648:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   3464c:	d0a71b03 	ldbu	r2,-25492(gp)
   34650:	10803fcc 	andi	r2,r2,255
   34654:	10803fe0 	cmpeqi	r2,r2,255
   34658:	1000031e 	bne	r2,zero,34668 <OSTaskDel+0x214>
        OSLockNesting++;
   3465c:	d0a71b03 	ldbu	r2,-25492(gp)
   34660:	10800044 	addi	r2,r2,1
   34664:	d0a71b05 	stb	r2,-25492(gp)
   34668:	e0bff617 	ldw	r2,-40(fp)
   3466c:	e0bffd15 	stw	r2,-12(fp)
   34670:	e0bffd17 	ldw	r2,-12(fp)
   34674:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   34678:	002ef380 	call	2ef38 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3467c:	0005303a 	rdctl	r2,status
   34680:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   34684:	e0fffa17 	ldw	r3,-24(fp)
   34688:	00bfff84 	movi	r2,-2
   3468c:	1884703a 	and	r2,r3,r2
   34690:	1001703a 	wrctl	status,r2
  
  return context;
   34694:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   34698:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   3469c:	d0a71b03 	ldbu	r2,-25492(gp)
   346a0:	10803fcc 	andi	r2,r2,255
   346a4:	10000326 	beq	r2,zero,346b4 <OSTaskDel+0x260>
        OSLockNesting--;
   346a8:	d0a71b03 	ldbu	r2,-25492(gp)
   346ac:	10bfffc4 	addi	r2,r2,-1
   346b0:	d0a71b05 	stb	r2,-25492(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   346b4:	e13ff817 	ldw	r4,-32(fp)
   346b8:	00373a00 	call	373a0 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   346bc:	d0a72343 	ldbu	r2,-25459(gp)
   346c0:	10bfffc4 	addi	r2,r2,-1
   346c4:	d0a72345 	stb	r2,-25459(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   346c8:	e0ffff03 	ldbu	r3,-4(fp)
   346cc:	00800134 	movhi	r2,4
   346d0:	10ba8404 	addi	r2,r2,-5616
   346d4:	18c7883a 	add	r3,r3,r3
   346d8:	18c7883a 	add	r3,r3,r3
   346dc:	10c5883a 	add	r2,r2,r3
   346e0:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   346e4:	e0bff817 	ldw	r2,-32(fp)
   346e8:	10800617 	ldw	r2,24(r2)
   346ec:	1000071e 	bne	r2,zero,3470c <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   346f0:	e0bff817 	ldw	r2,-32(fp)
   346f4:	10800517 	ldw	r2,20(r2)
   346f8:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   346fc:	e0bff817 	ldw	r2,-32(fp)
   34700:	10800517 	ldw	r2,20(r2)
   34704:	d0a71e15 	stw	r2,-25480(gp)
   34708:	00000a06 	br	34734 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   3470c:	e0bff817 	ldw	r2,-32(fp)
   34710:	10800617 	ldw	r2,24(r2)
   34714:	e0fff817 	ldw	r3,-32(fp)
   34718:	18c00517 	ldw	r3,20(r3)
   3471c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   34720:	e0bff817 	ldw	r2,-32(fp)
   34724:	10800517 	ldw	r2,20(r2)
   34728:	e0fff817 	ldw	r3,-32(fp)
   3472c:	18c00617 	ldw	r3,24(r3)
   34730:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   34734:	d0e72217 	ldw	r3,-25464(gp)
   34738:	e0bff817 	ldw	r2,-32(fp)
   3473c:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   34740:	e0bff817 	ldw	r2,-32(fp)
   34744:	d0a72215 	stw	r2,-25464(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   34748:	e0bff817 	ldw	r2,-32(fp)
   3474c:	00c00fc4 	movi	r3,63
   34750:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   34754:	e0bff817 	ldw	r2,-32(fp)
   34758:	10001345 	stb	zero,77(r2)
   3475c:	e0bff617 	ldw	r2,-40(fp)
   34760:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   34764:	e0bffc17 	ldw	r2,-16(fp)
   34768:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   3476c:	d0a71b43 	ldbu	r2,-25491(gp)
   34770:	10803fcc 	andi	r2,r2,255
   34774:	10800058 	cmpnei	r2,r2,1
   34778:	1000011e 	bne	r2,zero,34780 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   3477c:	002f9a40 	call	2f9a4 <OS_Sched>
    }
    return (OS_ERR_NONE);
   34780:	0005883a 	mov	r2,zero
}
   34784:	e037883a 	mov	sp,fp
   34788:	dfc00117 	ldw	ra,4(sp)
   3478c:	df000017 	ldw	fp,0(sp)
   34790:	dec00204 	addi	sp,sp,8
   34794:	f800283a 	ret

00034798 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   34798:	defff504 	addi	sp,sp,-44
   3479c:	df000a15 	stw	fp,40(sp)
   347a0:	df000a04 	addi	fp,sp,40
   347a4:	2005883a 	mov	r2,r4
   347a8:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   347ac:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   347b0:	e0bfff03 	ldbu	r2,-4(fp)
   347b4:	10800518 	cmpnei	r2,r2,20
   347b8:	1000021e 	bne	r2,zero,347c4 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   347bc:	00800f84 	movi	r2,62
   347c0:	00004506 	br	348d8 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   347c4:	e0bfff03 	ldbu	r2,-4(fp)
   347c8:	10800530 	cmpltui	r2,r2,20
   347cc:	1000051e 	bne	r2,zero,347e4 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   347d0:	e0bfff03 	ldbu	r2,-4(fp)
   347d4:	10803fe0 	cmpeqi	r2,r2,255
   347d8:	1000021e 	bne	r2,zero,347e4 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   347dc:	00800a84 	movi	r2,42
   347e0:	00003d06 	br	348d8 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   347e4:	e0bfff03 	ldbu	r2,-4(fp)
   347e8:	10803fd8 	cmpnei	r2,r2,255
   347ec:	1000111e 	bne	r2,zero,34834 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   347f0:	0005303a 	rdctl	r2,status
   347f4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   347f8:	e0fff917 	ldw	r3,-28(fp)
   347fc:	00bfff84 	movi	r2,-2
   34800:	1884703a 	and	r2,r3,r2
   34804:	1001703a 	wrctl	status,r2
  
  return context;
   34808:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   3480c:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   34810:	d0a72a17 	ldw	r2,-25432(gp)
   34814:	10800dc3 	ldbu	r2,55(r2)
   34818:	e0bff805 	stb	r2,-32(fp)
   3481c:	e0bff617 	ldw	r2,-40(fp)
   34820:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   34824:	e0bffe17 	ldw	r2,-8(fp)
   34828:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   3482c:	e0bff803 	ldbu	r2,-32(fp)
   34830:	00002906 	br	348d8 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   34834:	0005303a 	rdctl	r2,status
   34838:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3483c:	e0fff717 	ldw	r3,-36(fp)
   34840:	00bfff84 	movi	r2,-2
   34844:	1884703a 	and	r2,r3,r2
   34848:	1001703a 	wrctl	status,r2
  
  return context;
   3484c:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   34850:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   34854:	e0ffff03 	ldbu	r3,-4(fp)
   34858:	00800134 	movhi	r2,4
   3485c:	10ba8404 	addi	r2,r2,-5616
   34860:	18c7883a 	add	r3,r3,r3
   34864:	18c7883a 	add	r3,r3,r3
   34868:	10c5883a 	add	r2,r2,r3
   3486c:	10800017 	ldw	r2,0(r2)
   34870:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   34874:	e0bffb17 	ldw	r2,-20(fp)
   34878:	1000061e 	bne	r2,zero,34894 <OSTaskDelReq+0xfc>
   3487c:	e0bff617 	ldw	r2,-40(fp)
   34880:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   34884:	e0bffa17 	ldw	r2,-24(fp)
   34888:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   3488c:	008010c4 	movi	r2,67
   34890:	00001106 	br	348d8 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   34894:	e0bffb17 	ldw	r2,-20(fp)
   34898:	10800058 	cmpnei	r2,r2,1
   3489c:	1000061e 	bne	r2,zero,348b8 <OSTaskDelReq+0x120>
   348a0:	e0bff617 	ldw	r2,-40(fp)
   348a4:	e0bffc15 	stw	r2,-16(fp)
   348a8:	e0bffc17 	ldw	r2,-16(fp)
   348ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   348b0:	00800f44 	movi	r2,61
   348b4:	00000806 	br	348d8 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   348b8:	e0bffb17 	ldw	r2,-20(fp)
   348bc:	00c00fc4 	movi	r3,63
   348c0:	10c00dc5 	stb	r3,55(r2)
   348c4:	e0bff617 	ldw	r2,-40(fp)
   348c8:	e0bffd15 	stw	r2,-12(fp)
   348cc:	e0bffd17 	ldw	r2,-12(fp)
   348d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   348d4:	0005883a 	mov	r2,zero
}
   348d8:	e037883a 	mov	sp,fp
   348dc:	df000017 	ldw	fp,0(sp)
   348e0:	dec00104 	addi	sp,sp,4
   348e4:	f800283a 	ret

000348e8 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   348e8:	defff404 	addi	sp,sp,-48
   348ec:	dfc00b15 	stw	ra,44(sp)
   348f0:	df000a15 	stw	fp,40(sp)
   348f4:	df000a04 	addi	fp,sp,40
   348f8:	2005883a 	mov	r2,r4
   348fc:	e17ffe15 	stw	r5,-8(fp)
   34900:	e1bfff15 	stw	r6,-4(fp)
   34904:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   34908:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   3490c:	e0bfff17 	ldw	r2,-4(fp)
   34910:	1000021e 	bne	r2,zero,3491c <OSTaskNameGet+0x34>
        return (0);
   34914:	0005883a 	mov	r2,zero
   34918:	00005406 	br	34a6c <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   3491c:	e0bffd03 	ldbu	r2,-12(fp)
   34920:	10800570 	cmpltui	r2,r2,21
   34924:	1000081e 	bne	r2,zero,34948 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   34928:	e0bffd03 	ldbu	r2,-12(fp)
   3492c:	10803fe0 	cmpeqi	r2,r2,255
   34930:	1000051e 	bne	r2,zero,34948 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   34934:	e0bfff17 	ldw	r2,-4(fp)
   34938:	00c00a84 	movi	r3,42
   3493c:	10c00005 	stb	r3,0(r2)
            return (0);
   34940:	0005883a 	mov	r2,zero
   34944:	00004906 	br	34a6c <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   34948:	e0bffe17 	ldw	r2,-8(fp)
   3494c:	1000051e 	bne	r2,zero,34964 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   34950:	e0bfff17 	ldw	r2,-4(fp)
   34954:	00c00304 	movi	r3,12
   34958:	10c00005 	stb	r3,0(r2)
        return (0);
   3495c:	0005883a 	mov	r2,zero
   34960:	00004206 	br	34a6c <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   34964:	d0a72903 	ldbu	r2,-25436(gp)
   34968:	10803fcc 	andi	r2,r2,255
   3496c:	10000526 	beq	r2,zero,34984 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   34970:	e0bfff17 	ldw	r2,-4(fp)
   34974:	00c00444 	movi	r3,17
   34978:	10c00005 	stb	r3,0(r2)
        return (0);
   3497c:	0005883a 	mov	r2,zero
   34980:	00003a06 	br	34a6c <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   34984:	0005303a 	rdctl	r2,status
   34988:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3498c:	e0fffc17 	ldw	r3,-16(fp)
   34990:	00bfff84 	movi	r2,-2
   34994:	1884703a 	and	r2,r3,r2
   34998:	1001703a 	wrctl	status,r2
  
  return context;
   3499c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   349a0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   349a4:	e0bffd03 	ldbu	r2,-12(fp)
   349a8:	10803fd8 	cmpnei	r2,r2,255
   349ac:	1000031e 	bne	r2,zero,349bc <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   349b0:	d0a72a17 	ldw	r2,-25432(gp)
   349b4:	10800c83 	ldbu	r2,50(r2)
   349b8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   349bc:	e0fffd03 	ldbu	r3,-12(fp)
   349c0:	00800134 	movhi	r2,4
   349c4:	10ba8404 	addi	r2,r2,-5616
   349c8:	18c7883a 	add	r3,r3,r3
   349cc:	18c7883a 	add	r3,r3,r3
   349d0:	10c5883a 	add	r2,r2,r3
   349d4:	10800017 	ldw	r2,0(r2)
   349d8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   349dc:	e0bff817 	ldw	r2,-32(fp)
   349e0:	1000091e 	bne	r2,zero,34a08 <OSTaskNameGet+0x120>
   349e4:	e0bff617 	ldw	r2,-40(fp)
   349e8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   349ec:	e0bff717 	ldw	r2,-36(fp)
   349f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   349f4:	e0bfff17 	ldw	r2,-4(fp)
   349f8:	00c010c4 	movi	r3,67
   349fc:	10c00005 	stb	r3,0(r2)
        return (0);
   34a00:	0005883a 	mov	r2,zero
   34a04:	00001906 	br	34a6c <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   34a08:	e0bff817 	ldw	r2,-32(fp)
   34a0c:	10800058 	cmpnei	r2,r2,1
   34a10:	1000091e 	bne	r2,zero,34a38 <OSTaskNameGet+0x150>
   34a14:	e0bff617 	ldw	r2,-40(fp)
   34a18:	e0bff915 	stw	r2,-28(fp)
   34a1c:	e0bff917 	ldw	r2,-28(fp)
   34a20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   34a24:	e0bfff17 	ldw	r2,-4(fp)
   34a28:	00c010c4 	movi	r3,67
   34a2c:	10c00005 	stb	r3,0(r2)
        return (0);
   34a30:	0005883a 	mov	r2,zero
   34a34:	00000d06 	br	34a6c <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   34a38:	e0bff817 	ldw	r2,-32(fp)
   34a3c:	10801304 	addi	r2,r2,76
   34a40:	100b883a 	mov	r5,r2
   34a44:	e13ffe17 	ldw	r4,-8(fp)
   34a48:	002fae80 	call	2fae8 <OS_StrCopy>
   34a4c:	e0bffb05 	stb	r2,-20(fp)
   34a50:	e0bff617 	ldw	r2,-40(fp)
   34a54:	e0bffa15 	stw	r2,-24(fp)
   34a58:	e0bffa17 	ldw	r2,-24(fp)
   34a5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   34a60:	e0bfff17 	ldw	r2,-4(fp)
   34a64:	10000005 	stb	zero,0(r2)
    return (len);
   34a68:	e0bffb03 	ldbu	r2,-20(fp)
}
   34a6c:	e037883a 	mov	sp,fp
   34a70:	dfc00117 	ldw	ra,4(sp)
   34a74:	df000017 	ldw	fp,0(sp)
   34a78:	dec00204 	addi	sp,sp,8
   34a7c:	f800283a 	ret

00034a80 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   34a80:	defff304 	addi	sp,sp,-52
   34a84:	dfc00c15 	stw	ra,48(sp)
   34a88:	df000b15 	stw	fp,44(sp)
   34a8c:	df000b04 	addi	fp,sp,44
   34a90:	2005883a 	mov	r2,r4
   34a94:	e17ffe15 	stw	r5,-8(fp)
   34a98:	e1bfff15 	stw	r6,-4(fp)
   34a9c:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   34aa0:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   34aa4:	e0bfff17 	ldw	r2,-4(fp)
   34aa8:	10005c26 	beq	r2,zero,34c1c <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   34aac:	e0bffd03 	ldbu	r2,-12(fp)
   34ab0:	10800570 	cmpltui	r2,r2,21
   34ab4:	1000071e 	bne	r2,zero,34ad4 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   34ab8:	e0bffd03 	ldbu	r2,-12(fp)
   34abc:	10803fe0 	cmpeqi	r2,r2,255
   34ac0:	1000041e 	bne	r2,zero,34ad4 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   34ac4:	e0bfff17 	ldw	r2,-4(fp)
   34ac8:	00c00a84 	movi	r3,42
   34acc:	10c00005 	stb	r3,0(r2)
            return;
   34ad0:	00005306 	br	34c20 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   34ad4:	e0bffe17 	ldw	r2,-8(fp)
   34ad8:	1000041e 	bne	r2,zero,34aec <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   34adc:	e0bfff17 	ldw	r2,-4(fp)
   34ae0:	00c00304 	movi	r3,12
   34ae4:	10c00005 	stb	r3,0(r2)
        return;
   34ae8:	00004d06 	br	34c20 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   34aec:	d0a72903 	ldbu	r2,-25436(gp)
   34af0:	10803fcc 	andi	r2,r2,255
   34af4:	10000426 	beq	r2,zero,34b08 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   34af8:	e0bfff17 	ldw	r2,-4(fp)
   34afc:	00c00484 	movi	r3,18
   34b00:	10c00005 	stb	r3,0(r2)
        return;
   34b04:	00004606 	br	34c20 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   34b08:	0005303a 	rdctl	r2,status
   34b0c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   34b10:	e0fffc17 	ldw	r3,-16(fp)
   34b14:	00bfff84 	movi	r2,-2
   34b18:	1884703a 	and	r2,r3,r2
   34b1c:	1001703a 	wrctl	status,r2
  
  return context;
   34b20:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   34b24:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   34b28:	e0bffd03 	ldbu	r2,-12(fp)
   34b2c:	10803fd8 	cmpnei	r2,r2,255
   34b30:	1000031e 	bne	r2,zero,34b40 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   34b34:	d0a72a17 	ldw	r2,-25432(gp)
   34b38:	10800c83 	ldbu	r2,50(r2)
   34b3c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   34b40:	e0fffd03 	ldbu	r3,-12(fp)
   34b44:	00800134 	movhi	r2,4
   34b48:	10ba8404 	addi	r2,r2,-5616
   34b4c:	18c7883a 	add	r3,r3,r3
   34b50:	18c7883a 	add	r3,r3,r3
   34b54:	10c5883a 	add	r2,r2,r3
   34b58:	10800017 	ldw	r2,0(r2)
   34b5c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   34b60:	e0bff717 	ldw	r2,-36(fp)
   34b64:	1000081e 	bne	r2,zero,34b88 <OSTaskNameSet+0x108>
   34b68:	e0bff517 	ldw	r2,-44(fp)
   34b6c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   34b70:	e0bff617 	ldw	r2,-40(fp)
   34b74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   34b78:	e0bfff17 	ldw	r2,-4(fp)
   34b7c:	00c010c4 	movi	r3,67
   34b80:	10c00005 	stb	r3,0(r2)
        return;
   34b84:	00002606 	br	34c20 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   34b88:	e0bff717 	ldw	r2,-36(fp)
   34b8c:	10800058 	cmpnei	r2,r2,1
   34b90:	1000081e 	bne	r2,zero,34bb4 <OSTaskNameSet+0x134>
   34b94:	e0bff517 	ldw	r2,-44(fp)
   34b98:	e0bff815 	stw	r2,-32(fp)
   34b9c:	e0bff817 	ldw	r2,-32(fp)
   34ba0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   34ba4:	e0bfff17 	ldw	r2,-4(fp)
   34ba8:	00c010c4 	movi	r3,67
   34bac:	10c00005 	stb	r3,0(r2)
        return;
   34bb0:	00001b06 	br	34c20 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   34bb4:	e13ffe17 	ldw	r4,-8(fp)
   34bb8:	002fb5c0 	call	2fb5c <OS_StrLen>
   34bbc:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   34bc0:	e0bffa03 	ldbu	r2,-24(fp)
   34bc4:	10800830 	cmpltui	r2,r2,32
   34bc8:	1000081e 	bne	r2,zero,34bec <OSTaskNameSet+0x16c>
   34bcc:	e0bff517 	ldw	r2,-44(fp)
   34bd0:	e0bff915 	stw	r2,-28(fp)
   34bd4:	e0bff917 	ldw	r2,-28(fp)
   34bd8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   34bdc:	e0bfff17 	ldw	r2,-4(fp)
   34be0:	00c01044 	movi	r3,65
   34be4:	10c00005 	stb	r3,0(r2)
        return;
   34be8:	00000d06 	br	34c20 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   34bec:	e0bff717 	ldw	r2,-36(fp)
   34bf0:	10801304 	addi	r2,r2,76
   34bf4:	e17ffe17 	ldw	r5,-8(fp)
   34bf8:	1009883a 	mov	r4,r2
   34bfc:	002fae80 	call	2fae8 <OS_StrCopy>
   34c00:	e0bff517 	ldw	r2,-44(fp)
   34c04:	e0bffb15 	stw	r2,-20(fp)
   34c08:	e0bffb17 	ldw	r2,-20(fp)
   34c0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   34c10:	e0bfff17 	ldw	r2,-4(fp)
   34c14:	10000005 	stb	zero,0(r2)
   34c18:	00000106 	br	34c20 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   34c1c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   34c20:	e037883a 	mov	sp,fp
   34c24:	dfc00117 	ldw	ra,4(sp)
   34c28:	df000017 	ldw	fp,0(sp)
   34c2c:	dec00204 	addi	sp,sp,8
   34c30:	f800283a 	ret

00034c34 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   34c34:	defff404 	addi	sp,sp,-48
   34c38:	dfc00b15 	stw	ra,44(sp)
   34c3c:	df000a15 	stw	fp,40(sp)
   34c40:	df000a04 	addi	fp,sp,40
   34c44:	2005883a 	mov	r2,r4
   34c48:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   34c4c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   34c50:	e0bfff03 	ldbu	r2,-4(fp)
   34c54:	10800530 	cmpltui	r2,r2,20
   34c58:	1000021e 	bne	r2,zero,34c64 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   34c5c:	00800a84 	movi	r2,42
   34c60:	00006406 	br	34df4 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   34c64:	0005303a 	rdctl	r2,status
   34c68:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   34c6c:	e0fffe17 	ldw	r3,-8(fp)
   34c70:	00bfff84 	movi	r2,-2
   34c74:	1884703a 	and	r2,r3,r2
   34c78:	1001703a 	wrctl	status,r2
  
  return context;
   34c7c:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   34c80:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   34c84:	e0ffff03 	ldbu	r3,-4(fp)
   34c88:	00800134 	movhi	r2,4
   34c8c:	10ba8404 	addi	r2,r2,-5616
   34c90:	18c7883a 	add	r3,r3,r3
   34c94:	18c7883a 	add	r3,r3,r3
   34c98:	10c5883a 	add	r2,r2,r3
   34c9c:	10800017 	ldw	r2,0(r2)
   34ca0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   34ca4:	e0bff817 	ldw	r2,-32(fp)
   34ca8:	1000061e 	bne	r2,zero,34cc4 <OSTaskResume+0x90>
   34cac:	e0bff617 	ldw	r2,-40(fp)
   34cb0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   34cb4:	e0bff717 	ldw	r2,-36(fp)
   34cb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   34cbc:	00801184 	movi	r2,70
   34cc0:	00004c06 	br	34df4 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   34cc4:	e0bff817 	ldw	r2,-32(fp)
   34cc8:	10800058 	cmpnei	r2,r2,1
   34ccc:	1000061e 	bne	r2,zero,34ce8 <OSTaskResume+0xb4>
   34cd0:	e0bff617 	ldw	r2,-40(fp)
   34cd4:	e0bff915 	stw	r2,-28(fp)
   34cd8:	e0bff917 	ldw	r2,-28(fp)
   34cdc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   34ce0:	008010c4 	movi	r2,67
   34ce4:	00004306 	br	34df4 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   34ce8:	e0bff817 	ldw	r2,-32(fp)
   34cec:	10800c03 	ldbu	r2,48(r2)
   34cf0:	10803fcc 	andi	r2,r2,255
   34cf4:	1080020c 	andi	r2,r2,8
   34cf8:	10003926 	beq	r2,zero,34de0 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   34cfc:	e0bff817 	ldw	r2,-32(fp)
   34d00:	10c00c03 	ldbu	r3,48(r2)
   34d04:	00bffdc4 	movi	r2,-9
   34d08:	1884703a 	and	r2,r3,r2
   34d0c:	1007883a 	mov	r3,r2
   34d10:	e0bff817 	ldw	r2,-32(fp)
   34d14:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   34d18:	e0bff817 	ldw	r2,-32(fp)
   34d1c:	10800c03 	ldbu	r2,48(r2)
   34d20:	10803fcc 	andi	r2,r2,255
   34d24:	1000281e 	bne	r2,zero,34dc8 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   34d28:	e0bff817 	ldw	r2,-32(fp)
   34d2c:	10800b8b 	ldhu	r2,46(r2)
   34d30:	10bfffcc 	andi	r2,r2,65535
   34d34:	10001f1e 	bne	r2,zero,34db4 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   34d38:	e0bff817 	ldw	r2,-32(fp)
   34d3c:	10c00d83 	ldbu	r3,54(r2)
   34d40:	d0a72703 	ldbu	r2,-25444(gp)
   34d44:	1884b03a 	or	r2,r3,r2
   34d48:	d0a72705 	stb	r2,-25444(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   34d4c:	e0bff817 	ldw	r2,-32(fp)
   34d50:	10800d03 	ldbu	r2,52(r2)
   34d54:	10c03fcc 	andi	r3,r2,255
   34d58:	e0bff817 	ldw	r2,-32(fp)
   34d5c:	10800d03 	ldbu	r2,52(r2)
   34d60:	11003fcc 	andi	r4,r2,255
   34d64:	d0a72744 	addi	r2,gp,-25443
   34d68:	2085883a 	add	r2,r4,r2
   34d6c:	11000003 	ldbu	r4,0(r2)
   34d70:	e0bff817 	ldw	r2,-32(fp)
   34d74:	10800d43 	ldbu	r2,53(r2)
   34d78:	2084b03a 	or	r2,r4,r2
   34d7c:	1009883a 	mov	r4,r2
   34d80:	d0a72744 	addi	r2,gp,-25443
   34d84:	1885883a 	add	r2,r3,r2
   34d88:	11000005 	stb	r4,0(r2)
   34d8c:	e0bff617 	ldw	r2,-40(fp)
   34d90:	e0bffa15 	stw	r2,-24(fp)
   34d94:	e0bffa17 	ldw	r2,-24(fp)
   34d98:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   34d9c:	d0a71b43 	ldbu	r2,-25491(gp)
   34da0:	10803fcc 	andi	r2,r2,255
   34da4:	10800058 	cmpnei	r2,r2,1
   34da8:	10000b1e 	bne	r2,zero,34dd8 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   34dac:	002f9a40 	call	2f9a4 <OS_Sched>
   34db0:	00000906 	br	34dd8 <OSTaskResume+0x1a4>
   34db4:	e0bff617 	ldw	r2,-40(fp)
   34db8:	e0bffb15 	stw	r2,-20(fp)
   34dbc:	e0bffb17 	ldw	r2,-20(fp)
   34dc0:	1001703a 	wrctl	status,r2
   34dc4:	00000406 	br	34dd8 <OSTaskResume+0x1a4>
   34dc8:	e0bff617 	ldw	r2,-40(fp)
   34dcc:	e0bffc15 	stw	r2,-16(fp)
   34dd0:	e0bffc17 	ldw	r2,-16(fp)
   34dd4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   34dd8:	0005883a 	mov	r2,zero
   34ddc:	00000506 	br	34df4 <OSTaskResume+0x1c0>
   34de0:	e0bff617 	ldw	r2,-40(fp)
   34de4:	e0bffd15 	stw	r2,-12(fp)
   34de8:	e0bffd17 	ldw	r2,-12(fp)
   34dec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   34df0:	00801104 	movi	r2,68
}
   34df4:	e037883a 	mov	sp,fp
   34df8:	dfc00117 	ldw	ra,4(sp)
   34dfc:	df000017 	ldw	fp,0(sp)
   34e00:	dec00204 	addi	sp,sp,8
   34e04:	f800283a 	ret

00034e08 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   34e08:	defff304 	addi	sp,sp,-52
   34e0c:	df000c15 	stw	fp,48(sp)
   34e10:	df000c04 	addi	fp,sp,48
   34e14:	2005883a 	mov	r2,r4
   34e18:	e17fff15 	stw	r5,-4(fp)
   34e1c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   34e20:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   34e24:	e0bffe03 	ldbu	r2,-8(fp)
   34e28:	10800570 	cmpltui	r2,r2,21
   34e2c:	1000051e 	bne	r2,zero,34e44 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   34e30:	e0bffe03 	ldbu	r2,-8(fp)
   34e34:	10803fe0 	cmpeqi	r2,r2,255
   34e38:	1000021e 	bne	r2,zero,34e44 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   34e3c:	00800a84 	movi	r2,42
   34e40:	00005d06 	br	34fb8 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   34e44:	e0bfff17 	ldw	r2,-4(fp)
   34e48:	1000021e 	bne	r2,zero,34e54 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   34e4c:	00800244 	movi	r2,9
   34e50:	00005906 	br	34fb8 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   34e54:	e0bfff17 	ldw	r2,-4(fp)
   34e58:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   34e5c:	e0bfff17 	ldw	r2,-4(fp)
   34e60:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   34e64:	0005303a 	rdctl	r2,status
   34e68:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   34e6c:	e0fffd17 	ldw	r3,-12(fp)
   34e70:	00bfff84 	movi	r2,-2
   34e74:	1884703a 	and	r2,r3,r2
   34e78:	1001703a 	wrctl	status,r2
  
  return context;
   34e7c:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   34e80:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   34e84:	e0bffe03 	ldbu	r2,-8(fp)
   34e88:	10803fd8 	cmpnei	r2,r2,255
   34e8c:	1000031e 	bne	r2,zero,34e9c <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   34e90:	d0a72a17 	ldw	r2,-25432(gp)
   34e94:	10800c83 	ldbu	r2,50(r2)
   34e98:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   34e9c:	e0fffe03 	ldbu	r3,-8(fp)
   34ea0:	00800134 	movhi	r2,4
   34ea4:	10ba8404 	addi	r2,r2,-5616
   34ea8:	18c7883a 	add	r3,r3,r3
   34eac:	18c7883a 	add	r3,r3,r3
   34eb0:	10c5883a 	add	r2,r2,r3
   34eb4:	10800017 	ldw	r2,0(r2)
   34eb8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   34ebc:	e0bff817 	ldw	r2,-32(fp)
   34ec0:	1000061e 	bne	r2,zero,34edc <OSTaskStkChk+0xd4>
   34ec4:	e0bff617 	ldw	r2,-40(fp)
   34ec8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   34ecc:	e0bff717 	ldw	r2,-36(fp)
   34ed0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   34ed4:	008010c4 	movi	r2,67
   34ed8:	00003706 	br	34fb8 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   34edc:	e0bff817 	ldw	r2,-32(fp)
   34ee0:	10800058 	cmpnei	r2,r2,1
   34ee4:	1000061e 	bne	r2,zero,34f00 <OSTaskStkChk+0xf8>
   34ee8:	e0bff617 	ldw	r2,-40(fp)
   34eec:	e0bff915 	stw	r2,-28(fp)
   34ef0:	e0bff917 	ldw	r2,-28(fp)
   34ef4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   34ef8:	008010c4 	movi	r2,67
   34efc:	00002e06 	br	34fb8 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   34f00:	e0bff817 	ldw	r2,-32(fp)
   34f04:	1080040b 	ldhu	r2,16(r2)
   34f08:	10bfffcc 	andi	r2,r2,65535
   34f0c:	1080004c 	andi	r2,r2,1
   34f10:	1000061e 	bne	r2,zero,34f2c <OSTaskStkChk+0x124>
   34f14:	e0bff617 	ldw	r2,-40(fp)
   34f18:	e0bffa15 	stw	r2,-24(fp)
   34f1c:	e0bffa17 	ldw	r2,-24(fp)
   34f20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   34f24:	00801144 	movi	r2,69
   34f28:	00002306 	br	34fb8 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   34f2c:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   34f30:	e0bff817 	ldw	r2,-32(fp)
   34f34:	10800317 	ldw	r2,12(r2)
   34f38:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   34f3c:	e0bff817 	ldw	r2,-32(fp)
   34f40:	10800217 	ldw	r2,8(r2)
   34f44:	e0bff415 	stw	r2,-48(fp)
   34f48:	e0bff617 	ldw	r2,-40(fp)
   34f4c:	e0bffb15 	stw	r2,-20(fp)
   34f50:	e0bffb17 	ldw	r2,-20(fp)
   34f54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   34f58:	00000306 	br	34f68 <OSTaskStkChk+0x160>
        nfree++;
   34f5c:	e0bff517 	ldw	r2,-44(fp)
   34f60:	10800044 	addi	r2,r2,1
   34f64:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   34f68:	e0bff417 	ldw	r2,-48(fp)
   34f6c:	10c00104 	addi	r3,r2,4
   34f70:	e0fff415 	stw	r3,-48(fp)
   34f74:	10800017 	ldw	r2,0(r2)
   34f78:	103ff826 	beq	r2,zero,34f5c <_gp+0xffff3410>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   34f7c:	e0bff517 	ldw	r2,-44(fp)
   34f80:	1085883a 	add	r2,r2,r2
   34f84:	1085883a 	add	r2,r2,r2
   34f88:	1007883a 	mov	r3,r2
   34f8c:	e0bfff17 	ldw	r2,-4(fp)
   34f90:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   34f94:	e0fffc17 	ldw	r3,-16(fp)
   34f98:	e0bff517 	ldw	r2,-44(fp)
   34f9c:	1885c83a 	sub	r2,r3,r2
   34fa0:	1085883a 	add	r2,r2,r2
   34fa4:	1085883a 	add	r2,r2,r2
   34fa8:	1007883a 	mov	r3,r2
   34fac:	e0bfff17 	ldw	r2,-4(fp)
   34fb0:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   34fb4:	0005883a 	mov	r2,zero
}
   34fb8:	e037883a 	mov	sp,fp
   34fbc:	df000017 	ldw	fp,0(sp)
   34fc0:	dec00104 	addi	sp,sp,4
   34fc4:	f800283a 	ret

00034fc8 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   34fc8:	defff504 	addi	sp,sp,-44
   34fcc:	dfc00a15 	stw	ra,40(sp)
   34fd0:	df000915 	stw	fp,36(sp)
   34fd4:	df000904 	addi	fp,sp,36
   34fd8:	2005883a 	mov	r2,r4
   34fdc:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   34fe0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   34fe4:	e0bfff03 	ldbu	r2,-4(fp)
   34fe8:	10800518 	cmpnei	r2,r2,20
   34fec:	1000021e 	bne	r2,zero,34ff8 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   34ff0:	008011c4 	movi	r2,71
   34ff4:	00006806 	br	35198 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   34ff8:	e0bfff03 	ldbu	r2,-4(fp)
   34ffc:	10800530 	cmpltui	r2,r2,20
   35000:	1000051e 	bne	r2,zero,35018 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   35004:	e0bfff03 	ldbu	r2,-4(fp)
   35008:	10803fe0 	cmpeqi	r2,r2,255
   3500c:	1000021e 	bne	r2,zero,35018 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   35010:	00800a84 	movi	r2,42
   35014:	00006006 	br	35198 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   35018:	0005303a 	rdctl	r2,status
   3501c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   35020:	e0fffe17 	ldw	r3,-8(fp)
   35024:	00bfff84 	movi	r2,-2
   35028:	1884703a 	and	r2,r3,r2
   3502c:	1001703a 	wrctl	status,r2
  
  return context;
   35030:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   35034:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   35038:	e0bfff03 	ldbu	r2,-4(fp)
   3503c:	10803fd8 	cmpnei	r2,r2,255
   35040:	1000061e 	bne	r2,zero,3505c <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   35044:	d0a72a17 	ldw	r2,-25432(gp)
   35048:	10800c83 	ldbu	r2,50(r2)
   3504c:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   35050:	00800044 	movi	r2,1
   35054:	e0bff705 	stb	r2,-36(fp)
   35058:	00000906 	br	35080 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   3505c:	d0a72a17 	ldw	r2,-25432(gp)
   35060:	10800c83 	ldbu	r2,50(r2)
   35064:	10c03fcc 	andi	r3,r2,255
   35068:	e0bfff03 	ldbu	r2,-4(fp)
   3506c:	1880031e 	bne	r3,r2,3507c <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   35070:	00800044 	movi	r2,1
   35074:	e0bff705 	stb	r2,-36(fp)
   35078:	00000106 	br	35080 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   3507c:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   35080:	e0ffff03 	ldbu	r3,-4(fp)
   35084:	00800134 	movhi	r2,4
   35088:	10ba8404 	addi	r2,r2,-5616
   3508c:	18c7883a 	add	r3,r3,r3
   35090:	18c7883a 	add	r3,r3,r3
   35094:	10c5883a 	add	r2,r2,r3
   35098:	10800017 	ldw	r2,0(r2)
   3509c:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   350a0:	e0bffa17 	ldw	r2,-24(fp)
   350a4:	1000061e 	bne	r2,zero,350c0 <OSTaskSuspend+0xf8>
   350a8:	e0bff817 	ldw	r2,-32(fp)
   350ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   350b0:	e0bff917 	ldw	r2,-28(fp)
   350b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   350b8:	00801204 	movi	r2,72
   350bc:	00003606 	br	35198 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   350c0:	e0bffa17 	ldw	r2,-24(fp)
   350c4:	10800058 	cmpnei	r2,r2,1
   350c8:	1000061e 	bne	r2,zero,350e4 <OSTaskSuspend+0x11c>
   350cc:	e0bff817 	ldw	r2,-32(fp)
   350d0:	e0bffb15 	stw	r2,-20(fp)
   350d4:	e0bffb17 	ldw	r2,-20(fp)
   350d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   350dc:	008010c4 	movi	r2,67
   350e0:	00002d06 	br	35198 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   350e4:	e0bffa17 	ldw	r2,-24(fp)
   350e8:	10800d03 	ldbu	r2,52(r2)
   350ec:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   350f0:	e0fffd03 	ldbu	r3,-12(fp)
   350f4:	e13ffd03 	ldbu	r4,-12(fp)
   350f8:	d0a72744 	addi	r2,gp,-25443
   350fc:	2085883a 	add	r2,r4,r2
   35100:	10800003 	ldbu	r2,0(r2)
   35104:	1009883a 	mov	r4,r2
   35108:	e0bffa17 	ldw	r2,-24(fp)
   3510c:	10800d43 	ldbu	r2,53(r2)
   35110:	0084303a 	nor	r2,zero,r2
   35114:	2084703a 	and	r2,r4,r2
   35118:	1009883a 	mov	r4,r2
   3511c:	d0a72744 	addi	r2,gp,-25443
   35120:	1885883a 	add	r2,r3,r2
   35124:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   35128:	e0fffd03 	ldbu	r3,-12(fp)
   3512c:	d0a72744 	addi	r2,gp,-25443
   35130:	1885883a 	add	r2,r3,r2
   35134:	10800003 	ldbu	r2,0(r2)
   35138:	10803fcc 	andi	r2,r2,255
   3513c:	1000071e 	bne	r2,zero,3515c <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   35140:	e0bffa17 	ldw	r2,-24(fp)
   35144:	10800d83 	ldbu	r2,54(r2)
   35148:	0084303a 	nor	r2,zero,r2
   3514c:	1007883a 	mov	r3,r2
   35150:	d0a72703 	ldbu	r2,-25444(gp)
   35154:	1884703a 	and	r2,r3,r2
   35158:	d0a72705 	stb	r2,-25444(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   3515c:	e0bffa17 	ldw	r2,-24(fp)
   35160:	10800c03 	ldbu	r2,48(r2)
   35164:	10800214 	ori	r2,r2,8
   35168:	1007883a 	mov	r3,r2
   3516c:	e0bffa17 	ldw	r2,-24(fp)
   35170:	10c00c05 	stb	r3,48(r2)
   35174:	e0bff817 	ldw	r2,-32(fp)
   35178:	e0bffc15 	stw	r2,-16(fp)
   3517c:	e0bffc17 	ldw	r2,-16(fp)
   35180:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   35184:	e0bff703 	ldbu	r2,-36(fp)
   35188:	10800058 	cmpnei	r2,r2,1
   3518c:	1000011e 	bne	r2,zero,35194 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   35190:	002f9a40 	call	2f9a4 <OS_Sched>
    }
    return (OS_ERR_NONE);
   35194:	0005883a 	mov	r2,zero
}
   35198:	e037883a 	mov	sp,fp
   3519c:	dfc00117 	ldw	ra,4(sp)
   351a0:	df000017 	ldw	fp,0(sp)
   351a4:	dec00204 	addi	sp,sp,8
   351a8:	f800283a 	ret

000351ac <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   351ac:	defff604 	addi	sp,sp,-40
   351b0:	dfc00915 	stw	ra,36(sp)
   351b4:	df000815 	stw	fp,32(sp)
   351b8:	df000804 	addi	fp,sp,32
   351bc:	2005883a 	mov	r2,r4
   351c0:	e17fff15 	stw	r5,-4(fp)
   351c4:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   351c8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   351cc:	e0bffe03 	ldbu	r2,-8(fp)
   351d0:	10800570 	cmpltui	r2,r2,21
   351d4:	1000051e 	bne	r2,zero,351ec <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   351d8:	e0bffe03 	ldbu	r2,-8(fp)
   351dc:	10803fe0 	cmpeqi	r2,r2,255
   351e0:	1000021e 	bne	r2,zero,351ec <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   351e4:	00800a84 	movi	r2,42
   351e8:	00003406 	br	352bc <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   351ec:	e0bfff17 	ldw	r2,-4(fp)
   351f0:	1000021e 	bne	r2,zero,351fc <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   351f4:	00800244 	movi	r2,9
   351f8:	00003006 	br	352bc <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   351fc:	0005303a 	rdctl	r2,status
   35200:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   35204:	e0fffd17 	ldw	r3,-12(fp)
   35208:	00bfff84 	movi	r2,-2
   3520c:	1884703a 	and	r2,r3,r2
   35210:	1001703a 	wrctl	status,r2
  
  return context;
   35214:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   35218:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   3521c:	e0bffe03 	ldbu	r2,-8(fp)
   35220:	10803fd8 	cmpnei	r2,r2,255
   35224:	1000031e 	bne	r2,zero,35234 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   35228:	d0a72a17 	ldw	r2,-25432(gp)
   3522c:	10800c83 	ldbu	r2,50(r2)
   35230:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   35234:	e0fffe03 	ldbu	r3,-8(fp)
   35238:	00800134 	movhi	r2,4
   3523c:	10ba8404 	addi	r2,r2,-5616
   35240:	18c7883a 	add	r3,r3,r3
   35244:	18c7883a 	add	r3,r3,r3
   35248:	10c5883a 	add	r2,r2,r3
   3524c:	10800017 	ldw	r2,0(r2)
   35250:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   35254:	e0bffa17 	ldw	r2,-24(fp)
   35258:	1000061e 	bne	r2,zero,35274 <OSTaskQuery+0xc8>
   3525c:	e0bff817 	ldw	r2,-32(fp)
   35260:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   35264:	e0bff917 	ldw	r2,-28(fp)
   35268:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   3526c:	00800a44 	movi	r2,41
   35270:	00001206 	br	352bc <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   35274:	e0bffa17 	ldw	r2,-24(fp)
   35278:	10800058 	cmpnei	r2,r2,1
   3527c:	1000061e 	bne	r2,zero,35298 <OSTaskQuery+0xec>
   35280:	e0bff817 	ldw	r2,-32(fp)
   35284:	e0bffb15 	stw	r2,-20(fp)
   35288:	e0bffb17 	ldw	r2,-20(fp)
   3528c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   35290:	008010c4 	movi	r2,67
   35294:	00000906 	br	352bc <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   35298:	01801b04 	movi	r6,108
   3529c:	e17ffa17 	ldw	r5,-24(fp)
   352a0:	e13fff17 	ldw	r4,-4(fp)
   352a4:	002f93c0 	call	2f93c <OS_MemCopy>
   352a8:	e0bff817 	ldw	r2,-32(fp)
   352ac:	e0bffc15 	stw	r2,-16(fp)
   352b0:	e0bffc17 	ldw	r2,-16(fp)
   352b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   352b8:	0005883a 	mov	r2,zero
}
   352bc:	e037883a 	mov	sp,fp
   352c0:	dfc00117 	ldw	ra,4(sp)
   352c4:	df000017 	ldw	fp,0(sp)
   352c8:	dec00204 	addi	sp,sp,8
   352cc:	f800283a 	ret

000352d0 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   352d0:	defffc04 	addi	sp,sp,-16
   352d4:	df000315 	stw	fp,12(sp)
   352d8:	df000304 	addi	fp,sp,12
   352dc:	e13ffd15 	stw	r4,-12(fp)
   352e0:	e17ffe15 	stw	r5,-8(fp)
   352e4:	3005883a 	mov	r2,r6
   352e8:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   352ec:	e0bfff0b 	ldhu	r2,-4(fp)
   352f0:	1080004c 	andi	r2,r2,1
   352f4:	10000d26 	beq	r2,zero,3532c <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   352f8:	e0bfff0b 	ldhu	r2,-4(fp)
   352fc:	1080008c 	andi	r2,r2,2
   35300:	10000a26 	beq	r2,zero,3532c <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   35304:	00000706 	br	35324 <OS_TaskStkClr+0x54>
                size--;
   35308:	e0bffe17 	ldw	r2,-8(fp)
   3530c:	10bfffc4 	addi	r2,r2,-1
   35310:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   35314:	e0bffd17 	ldw	r2,-12(fp)
   35318:	10c00104 	addi	r3,r2,4
   3531c:	e0fffd15 	stw	r3,-12(fp)
   35320:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   35324:	e0bffe17 	ldw	r2,-8(fp)
   35328:	103ff71e 	bne	r2,zero,35308 <_gp+0xffff37bc>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   3532c:	0001883a 	nop
   35330:	e037883a 	mov	sp,fp
   35334:	df000017 	ldw	fp,0(sp)
   35338:	dec00104 	addi	sp,sp,4
   3533c:	f800283a 	ret

00035340 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   35340:	defff904 	addi	sp,sp,-28
   35344:	dfc00615 	stw	ra,24(sp)
   35348:	df000515 	stw	fp,20(sp)
   3534c:	df000504 	addi	fp,sp,20
   35350:	2005883a 	mov	r2,r4
   35354:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   35358:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   3535c:	d0a72903 	ldbu	r2,-25436(gp)
   35360:	10803fcc 	andi	r2,r2,255
   35364:	1000311e 	bne	r2,zero,3542c <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   35368:	e0bfff0b 	ldhu	r2,-4(fp)
   3536c:	10003026 	beq	r2,zero,35430 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   35370:	0005303a 	rdctl	r2,status
   35374:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   35378:	e0fffe17 	ldw	r3,-8(fp)
   3537c:	00bfff84 	movi	r2,-2
   35380:	1884703a 	and	r2,r3,r2
   35384:	1001703a 	wrctl	status,r2
  
  return context;
   35388:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   3538c:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   35390:	d0a72a17 	ldw	r2,-25432(gp)
   35394:	10800d03 	ldbu	r2,52(r2)
   35398:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   3539c:	e0fffd03 	ldbu	r3,-12(fp)
   353a0:	e13ffd03 	ldbu	r4,-12(fp)
   353a4:	d0a72744 	addi	r2,gp,-25443
   353a8:	2085883a 	add	r2,r4,r2
   353ac:	10800003 	ldbu	r2,0(r2)
   353b0:	1009883a 	mov	r4,r2
   353b4:	d0a72a17 	ldw	r2,-25432(gp)
   353b8:	10800d43 	ldbu	r2,53(r2)
   353bc:	0084303a 	nor	r2,zero,r2
   353c0:	2084703a 	and	r2,r4,r2
   353c4:	1009883a 	mov	r4,r2
   353c8:	d0a72744 	addi	r2,gp,-25443
   353cc:	1885883a 	add	r2,r3,r2
   353d0:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   353d4:	e0fffd03 	ldbu	r3,-12(fp)
   353d8:	d0a72744 	addi	r2,gp,-25443
   353dc:	1885883a 	add	r2,r3,r2
   353e0:	10800003 	ldbu	r2,0(r2)
   353e4:	10803fcc 	andi	r2,r2,255
   353e8:	1000071e 	bne	r2,zero,35408 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   353ec:	d0a72a17 	ldw	r2,-25432(gp)
   353f0:	10800d83 	ldbu	r2,54(r2)
   353f4:	0084303a 	nor	r2,zero,r2
   353f8:	1007883a 	mov	r3,r2
   353fc:	d0a72703 	ldbu	r2,-25444(gp)
   35400:	1884703a 	and	r2,r3,r2
   35404:	d0a72705 	stb	r2,-25444(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   35408:	d0a72a17 	ldw	r2,-25432(gp)
   3540c:	e0ffff0b 	ldhu	r3,-4(fp)
   35410:	10c00b8d 	sth	r3,46(r2)
   35414:	e0bffb17 	ldw	r2,-20(fp)
   35418:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3541c:	e0bffc17 	ldw	r2,-16(fp)
   35420:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   35424:	002f9a40 	call	2f9a4 <OS_Sched>
   35428:	00000106 	br	35430 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   3542c:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   35430:	e037883a 	mov	sp,fp
   35434:	dfc00117 	ldw	ra,4(sp)
   35438:	df000017 	ldw	fp,0(sp)
   3543c:	dec00204 	addi	sp,sp,8
   35440:	f800283a 	ret

00035444 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   35444:	defff704 	addi	sp,sp,-36
   35448:	dfc00815 	stw	ra,32(sp)
   3544c:	df000715 	stw	fp,28(sp)
   35450:	dc000615 	stw	r16,24(sp)
   35454:	df000704 	addi	fp,sp,28
   35458:	2011883a 	mov	r8,r4
   3545c:	2809883a 	mov	r4,r5
   35460:	3007883a 	mov	r3,r6
   35464:	3805883a 	mov	r2,r7
   35468:	e23ffb05 	stb	r8,-20(fp)
   3546c:	e13ffc05 	stb	r4,-16(fp)
   35470:	e0fffd05 	stb	r3,-12(fp)
   35474:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   35478:	d0a72903 	ldbu	r2,-25436(gp)
   3547c:	10803fcc 	andi	r2,r2,255
   35480:	10000226 	beq	r2,zero,3548c <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
   35484:	00801544 	movi	r2,85
   35488:	00003e06 	br	35584 <OSTimeDlyHMSM+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   3548c:	e0bffb03 	ldbu	r2,-20(fp)
   35490:	1000081e 	bne	r2,zero,354b4 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
   35494:	e0bffc03 	ldbu	r2,-16(fp)
   35498:	1000061e 	bne	r2,zero,354b4 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
   3549c:	e0bffd03 	ldbu	r2,-12(fp)
   354a0:	1000041e 	bne	r2,zero,354b4 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
   354a4:	e0bffe0b 	ldhu	r2,-8(fp)
   354a8:	1000021e 	bne	r2,zero,354b4 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
   354ac:	00801504 	movi	r2,84
   354b0:	00003406 	br	35584 <OSTimeDlyHMSM+0x140>
                }
            }
        }
    }
    if (minutes > 59) {
   354b4:	e0bffc03 	ldbu	r2,-16(fp)
   354b8:	10800f30 	cmpltui	r2,r2,60
   354bc:	1000021e 	bne	r2,zero,354c8 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   354c0:	00801444 	movi	r2,81
   354c4:	00002f06 	br	35584 <OSTimeDlyHMSM+0x140>
    }
    if (seconds > 59) {
   354c8:	e0bffd03 	ldbu	r2,-12(fp)
   354cc:	10800f30 	cmpltui	r2,r2,60
   354d0:	1000021e 	bne	r2,zero,354dc <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
   354d4:	00801484 	movi	r2,82
   354d8:	00002a06 	br	35584 <OSTimeDlyHMSM+0x140>
    }
    if (ms > 999) {
   354dc:	e0bffe0b 	ldhu	r2,-8(fp)
   354e0:	1080fa30 	cmpltui	r2,r2,1000
   354e4:	1000021e 	bne	r2,zero,354f0 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
   354e8:	008014c4 	movi	r2,83
   354ec:	00002506 	br	35584 <OSTimeDlyHMSM+0x140>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   354f0:	e0bffb03 	ldbu	r2,-20(fp)
   354f4:	10c38424 	muli	r3,r2,3600
   354f8:	e0bffc03 	ldbu	r2,-16(fp)
   354fc:	10800f24 	muli	r2,r2,60
   35500:	1887883a 	add	r3,r3,r2
   35504:	e0bffd03 	ldbu	r2,-12(fp)
   35508:	1885883a 	add	r2,r3,r2
   3550c:	102091ba 	slli	r16,r2,6
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   35510:	e0bffe0b 	ldhu	r2,-8(fp)
   35514:	108001c4 	addi	r2,r2,7
   35518:	100491ba 	slli	r2,r2,6
   3551c:	0140fa04 	movi	r5,1000
   35520:	1009883a 	mov	r4,r2
   35524:	002acf40 	call	2acf4 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   35528:	8085883a 	add	r2,r16,r2
   3552c:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   35530:	e0bffa17 	ldw	r2,-24(fp)
   35534:	1004d43a 	srli	r2,r2,16
   35538:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   3553c:	e0bffa17 	ldw	r2,-24(fp)
   35540:	10bfffcc 	andi	r2,r2,65535
   35544:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
   35548:	e0bffa17 	ldw	r2,-24(fp)
   3554c:	10bfffcc 	andi	r2,r2,65535
   35550:	1009883a 	mov	r4,r2
   35554:	00353400 	call	35340 <OSTimeDly>
    while (loops > 0) {
   35558:	00000706 	br	35578 <OSTimeDlyHMSM+0x134>
        OSTimeDly((INT16U)32768u);
   3555c:	01200014 	movui	r4,32768
   35560:	00353400 	call	35340 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   35564:	01200014 	movui	r4,32768
   35568:	00353400 	call	35340 <OSTimeDly>
        loops--;
   3556c:	e0bff90b 	ldhu	r2,-28(fp)
   35570:	10bfffc4 	addi	r2,r2,-1
   35574:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   35578:	e0bff90b 	ldhu	r2,-28(fp)
   3557c:	103ff71e 	bne	r2,zero,3555c <_gp+0xffff3a10>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   35580:	0005883a 	mov	r2,zero
}
   35584:	e6ffff04 	addi	sp,fp,-4
   35588:	dfc00217 	ldw	ra,8(sp)
   3558c:	df000117 	ldw	fp,4(sp)
   35590:	dc000017 	ldw	r16,0(sp)
   35594:	dec00304 	addi	sp,sp,12
   35598:	f800283a 	ret

0003559c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   3559c:	defff504 	addi	sp,sp,-44
   355a0:	dfc00a15 	stw	ra,40(sp)
   355a4:	df000915 	stw	fp,36(sp)
   355a8:	df000904 	addi	fp,sp,36
   355ac:	2005883a 	mov	r2,r4
   355b0:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   355b4:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   355b8:	e0bfff03 	ldbu	r2,-4(fp)
   355bc:	10800530 	cmpltui	r2,r2,20
   355c0:	1000021e 	bne	r2,zero,355cc <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   355c4:	00800a84 	movi	r2,42
   355c8:	00006406 	br	3575c <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   355cc:	0005303a 	rdctl	r2,status
   355d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   355d4:	e0fffe17 	ldw	r3,-8(fp)
   355d8:	00bfff84 	movi	r2,-2
   355dc:	1884703a 	and	r2,r3,r2
   355e0:	1001703a 	wrctl	status,r2
  
  return context;
   355e4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   355e8:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   355ec:	e0ffff03 	ldbu	r3,-4(fp)
   355f0:	00800134 	movhi	r2,4
   355f4:	10ba8404 	addi	r2,r2,-5616
   355f8:	18c7883a 	add	r3,r3,r3
   355fc:	18c7883a 	add	r3,r3,r3
   35600:	10c5883a 	add	r2,r2,r3
   35604:	10800017 	ldw	r2,0(r2)
   35608:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   3560c:	e0bff917 	ldw	r2,-28(fp)
   35610:	1000061e 	bne	r2,zero,3562c <OSTimeDlyResume+0x90>
   35614:	e0bff717 	ldw	r2,-36(fp)
   35618:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3561c:	e0bff817 	ldw	r2,-32(fp)
   35620:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   35624:	008010c4 	movi	r2,67
   35628:	00004c06 	br	3575c <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   3562c:	e0bff917 	ldw	r2,-28(fp)
   35630:	10800058 	cmpnei	r2,r2,1
   35634:	1000061e 	bne	r2,zero,35650 <OSTimeDlyResume+0xb4>
   35638:	e0bff717 	ldw	r2,-36(fp)
   3563c:	e0bffa15 	stw	r2,-24(fp)
   35640:	e0bffa17 	ldw	r2,-24(fp)
   35644:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   35648:	008010c4 	movi	r2,67
   3564c:	00004306 	br	3575c <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   35650:	e0bff917 	ldw	r2,-28(fp)
   35654:	10800b8b 	ldhu	r2,46(r2)
   35658:	10bfffcc 	andi	r2,r2,65535
   3565c:	1000061e 	bne	r2,zero,35678 <OSTimeDlyResume+0xdc>
   35660:	e0bff717 	ldw	r2,-36(fp)
   35664:	e0bffb15 	stw	r2,-20(fp)
   35668:	e0bffb17 	ldw	r2,-20(fp)
   3566c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   35670:	00801404 	movi	r2,80
   35674:	00003906 	br	3575c <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   35678:	e0bff917 	ldw	r2,-28(fp)
   3567c:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   35680:	e0bff917 	ldw	r2,-28(fp)
   35684:	10800c03 	ldbu	r2,48(r2)
   35688:	10803fcc 	andi	r2,r2,255
   3568c:	10800dcc 	andi	r2,r2,55
   35690:	10000b26 	beq	r2,zero,356c0 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   35694:	e0bff917 	ldw	r2,-28(fp)
   35698:	10c00c03 	ldbu	r3,48(r2)
   3569c:	00bff204 	movi	r2,-56
   356a0:	1884703a 	and	r2,r3,r2
   356a4:	1007883a 	mov	r3,r2
   356a8:	e0bff917 	ldw	r2,-28(fp)
   356ac:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   356b0:	e0bff917 	ldw	r2,-28(fp)
   356b4:	00c00044 	movi	r3,1
   356b8:	10c00c45 	stb	r3,49(r2)
   356bc:	00000206 	br	356c8 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   356c0:	e0bff917 	ldw	r2,-28(fp)
   356c4:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   356c8:	e0bff917 	ldw	r2,-28(fp)
   356cc:	10800c03 	ldbu	r2,48(r2)
   356d0:	10803fcc 	andi	r2,r2,255
   356d4:	1080020c 	andi	r2,r2,8
   356d8:	10001b1e 	bne	r2,zero,35748 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   356dc:	e0bff917 	ldw	r2,-28(fp)
   356e0:	10c00d83 	ldbu	r3,54(r2)
   356e4:	d0a72703 	ldbu	r2,-25444(gp)
   356e8:	1884b03a 	or	r2,r3,r2
   356ec:	d0a72705 	stb	r2,-25444(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   356f0:	e0bff917 	ldw	r2,-28(fp)
   356f4:	10800d03 	ldbu	r2,52(r2)
   356f8:	10c03fcc 	andi	r3,r2,255
   356fc:	e0bff917 	ldw	r2,-28(fp)
   35700:	10800d03 	ldbu	r2,52(r2)
   35704:	11003fcc 	andi	r4,r2,255
   35708:	d0a72744 	addi	r2,gp,-25443
   3570c:	2085883a 	add	r2,r4,r2
   35710:	11000003 	ldbu	r4,0(r2)
   35714:	e0bff917 	ldw	r2,-28(fp)
   35718:	10800d43 	ldbu	r2,53(r2)
   3571c:	2084b03a 	or	r2,r4,r2
   35720:	1009883a 	mov	r4,r2
   35724:	d0a72744 	addi	r2,gp,-25443
   35728:	1885883a 	add	r2,r3,r2
   3572c:	11000005 	stb	r4,0(r2)
   35730:	e0bff717 	ldw	r2,-36(fp)
   35734:	e0bffc15 	stw	r2,-16(fp)
   35738:	e0bffc17 	ldw	r2,-16(fp)
   3573c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   35740:	002f9a40 	call	2f9a4 <OS_Sched>
   35744:	00000406 	br	35758 <OSTimeDlyResume+0x1bc>
   35748:	e0bff717 	ldw	r2,-36(fp)
   3574c:	e0bffd15 	stw	r2,-12(fp)
   35750:	e0bffd17 	ldw	r2,-12(fp)
   35754:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   35758:	0005883a 	mov	r2,zero
}
   3575c:	e037883a 	mov	sp,fp
   35760:	dfc00117 	ldw	ra,4(sp)
   35764:	df000017 	ldw	fp,0(sp)
   35768:	dec00204 	addi	sp,sp,8
   3576c:	f800283a 	ret

00035770 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   35770:	defffb04 	addi	sp,sp,-20
   35774:	df000415 	stw	fp,16(sp)
   35778:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   3577c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   35780:	0005303a 	rdctl	r2,status
   35784:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   35788:	e0fffe17 	ldw	r3,-8(fp)
   3578c:	00bfff84 	movi	r2,-2
   35790:	1884703a 	and	r2,r3,r2
   35794:	1001703a 	wrctl	status,r2
  
  return context;
   35798:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   3579c:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   357a0:	d0a72b17 	ldw	r2,-25428(gp)
   357a4:	e0bffd15 	stw	r2,-12(fp)
   357a8:	e0bffc17 	ldw	r2,-16(fp)
   357ac:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   357b0:	e0bfff17 	ldw	r2,-4(fp)
   357b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   357b8:	e0bffd17 	ldw	r2,-12(fp)
}
   357bc:	e037883a 	mov	sp,fp
   357c0:	df000017 	ldw	fp,0(sp)
   357c4:	dec00104 	addi	sp,sp,4
   357c8:	f800283a 	ret

000357cc <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   357cc:	defffb04 	addi	sp,sp,-20
   357d0:	df000415 	stw	fp,16(sp)
   357d4:	df000404 	addi	fp,sp,16
   357d8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   357dc:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   357e0:	0005303a 	rdctl	r2,status
   357e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   357e8:	e0fffd17 	ldw	r3,-12(fp)
   357ec:	00bfff84 	movi	r2,-2
   357f0:	1884703a 	and	r2,r3,r2
   357f4:	1001703a 	wrctl	status,r2
  
  return context;
   357f8:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   357fc:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   35800:	e0bfff17 	ldw	r2,-4(fp)
   35804:	d0a72b15 	stw	r2,-25428(gp)
   35808:	e0bffc17 	ldw	r2,-16(fp)
   3580c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   35810:	e0bffe17 	ldw	r2,-8(fp)
   35814:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   35818:	0001883a 	nop
   3581c:	e037883a 	mov	sp,fp
   35820:	df000017 	ldw	fp,0(sp)
   35824:	dec00104 	addi	sp,sp,4
   35828:	f800283a 	ret

0003582c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   3582c:	defffd04 	addi	sp,sp,-12
   35830:	dfc00215 	stw	ra,8(sp)
   35834:	df000115 	stw	fp,4(sp)
   35838:	df000104 	addi	fp,sp,4
   3583c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   35840:	d1600804 	addi	r5,gp,-32736
   35844:	e13fff17 	ldw	r4,-4(fp)
   35848:	00367bc0 	call	367bc <alt_dev_llist_insert>
}
   3584c:	e037883a 	mov	sp,fp
   35850:	dfc00117 	ldw	ra,4(sp)
   35854:	df000017 	ldw	fp,0(sp)
   35858:	dec00204 	addi	sp,sp,8
   3585c:	f800283a 	ret

00035860 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   35860:	defffd04 	addi	sp,sp,-12
   35864:	dfc00215 	stw	ra,8(sp)
   35868:	df000115 	stw	fp,4(sp)
   3586c:	df000104 	addi	fp,sp,4
   35870:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   35874:	003712c0 	call	3712c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   35878:	00800044 	movi	r2,1
   3587c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   35880:	0001883a 	nop
   35884:	e037883a 	mov	sp,fp
   35888:	dfc00117 	ldw	ra,4(sp)
   3588c:	df000017 	ldw	fp,0(sp)
   35890:	dec00204 	addi	sp,sp,8
   35894:	f800283a 	ret

00035898 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   35898:	defffe04 	addi	sp,sp,-8
   3589c:	dfc00115 	stw	ra,4(sp)
   358a0:	df000015 	stw	fp,0(sp)
   358a4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   358a8:	000d883a 	mov	r6,zero
   358ac:	000b883a 	mov	r5,zero
   358b0:	01000134 	movhi	r4,4
   358b4:	2122c204 	addi	r4,r4,-29944
   358b8:	0035a440 	call	35a44 <altera_avalon_jtag_uart_init>
   358bc:	01000134 	movhi	r4,4
   358c0:	2122b804 	addi	r4,r4,-29984
   358c4:	003582c0 	call	3582c <alt_dev_reg>
}
   358c8:	0001883a 	nop
   358cc:	e037883a 	mov	sp,fp
   358d0:	dfc00117 	ldw	ra,4(sp)
   358d4:	df000017 	ldw	fp,0(sp)
   358d8:	dec00204 	addi	sp,sp,8
   358dc:	f800283a 	ret

000358e0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   358e0:	defffa04 	addi	sp,sp,-24
   358e4:	dfc00515 	stw	ra,20(sp)
   358e8:	df000415 	stw	fp,16(sp)
   358ec:	df000404 	addi	fp,sp,16
   358f0:	e13ffd15 	stw	r4,-12(fp)
   358f4:	e17ffe15 	stw	r5,-8(fp)
   358f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   358fc:	e0bffd17 	ldw	r2,-12(fp)
   35900:	10800017 	ldw	r2,0(r2)
   35904:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   35908:	e0bffc17 	ldw	r2,-16(fp)
   3590c:	10c00a04 	addi	r3,r2,40
   35910:	e0bffd17 	ldw	r2,-12(fp)
   35914:	10800217 	ldw	r2,8(r2)
   35918:	100f883a 	mov	r7,r2
   3591c:	e1bfff17 	ldw	r6,-4(fp)
   35920:	e17ffe17 	ldw	r5,-8(fp)
   35924:	1809883a 	mov	r4,r3
   35928:	003608c0 	call	3608c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   3592c:	e037883a 	mov	sp,fp
   35930:	dfc00117 	ldw	ra,4(sp)
   35934:	df000017 	ldw	fp,0(sp)
   35938:	dec00204 	addi	sp,sp,8
   3593c:	f800283a 	ret

00035940 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   35940:	defffa04 	addi	sp,sp,-24
   35944:	dfc00515 	stw	ra,20(sp)
   35948:	df000415 	stw	fp,16(sp)
   3594c:	df000404 	addi	fp,sp,16
   35950:	e13ffd15 	stw	r4,-12(fp)
   35954:	e17ffe15 	stw	r5,-8(fp)
   35958:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   3595c:	e0bffd17 	ldw	r2,-12(fp)
   35960:	10800017 	ldw	r2,0(r2)
   35964:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   35968:	e0bffc17 	ldw	r2,-16(fp)
   3596c:	10c00a04 	addi	r3,r2,40
   35970:	e0bffd17 	ldw	r2,-12(fp)
   35974:	10800217 	ldw	r2,8(r2)
   35978:	100f883a 	mov	r7,r2
   3597c:	e1bfff17 	ldw	r6,-4(fp)
   35980:	e17ffe17 	ldw	r5,-8(fp)
   35984:	1809883a 	mov	r4,r3
   35988:	00363480 	call	36348 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   3598c:	e037883a 	mov	sp,fp
   35990:	dfc00117 	ldw	ra,4(sp)
   35994:	df000017 	ldw	fp,0(sp)
   35998:	dec00204 	addi	sp,sp,8
   3599c:	f800283a 	ret

000359a0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   359a0:	defffc04 	addi	sp,sp,-16
   359a4:	dfc00315 	stw	ra,12(sp)
   359a8:	df000215 	stw	fp,8(sp)
   359ac:	df000204 	addi	fp,sp,8
   359b0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   359b4:	e0bfff17 	ldw	r2,-4(fp)
   359b8:	10800017 	ldw	r2,0(r2)
   359bc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   359c0:	e0bffe17 	ldw	r2,-8(fp)
   359c4:	10c00a04 	addi	r3,r2,40
   359c8:	e0bfff17 	ldw	r2,-4(fp)
   359cc:	10800217 	ldw	r2,8(r2)
   359d0:	100b883a 	mov	r5,r2
   359d4:	1809883a 	mov	r4,r3
   359d8:	0035f340 	call	35f34 <altera_avalon_jtag_uart_close>
}
   359dc:	e037883a 	mov	sp,fp
   359e0:	dfc00117 	ldw	ra,4(sp)
   359e4:	df000017 	ldw	fp,0(sp)
   359e8:	dec00204 	addi	sp,sp,8
   359ec:	f800283a 	ret

000359f0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   359f0:	defffa04 	addi	sp,sp,-24
   359f4:	dfc00515 	stw	ra,20(sp)
   359f8:	df000415 	stw	fp,16(sp)
   359fc:	df000404 	addi	fp,sp,16
   35a00:	e13ffd15 	stw	r4,-12(fp)
   35a04:	e17ffe15 	stw	r5,-8(fp)
   35a08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   35a0c:	e0bffd17 	ldw	r2,-12(fp)
   35a10:	10800017 	ldw	r2,0(r2)
   35a14:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   35a18:	e0bffc17 	ldw	r2,-16(fp)
   35a1c:	10800a04 	addi	r2,r2,40
   35a20:	e1bfff17 	ldw	r6,-4(fp)
   35a24:	e17ffe17 	ldw	r5,-8(fp)
   35a28:	1009883a 	mov	r4,r2
   35a2c:	0035f9c0 	call	35f9c <altera_avalon_jtag_uart_ioctl>
}
   35a30:	e037883a 	mov	sp,fp
   35a34:	dfc00117 	ldw	ra,4(sp)
   35a38:	df000017 	ldw	fp,0(sp)
   35a3c:	dec00204 	addi	sp,sp,8
   35a40:	f800283a 	ret

00035a44 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   35a44:	defff104 	addi	sp,sp,-60
   35a48:	dfc00e15 	stw	ra,56(sp)
   35a4c:	df000d15 	stw	fp,52(sp)
   35a50:	df000d04 	addi	fp,sp,52
   35a54:	e13ff915 	stw	r4,-28(fp)
   35a58:	e17ffa15 	stw	r5,-24(fp)
   35a5c:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   35a60:	e0bff917 	ldw	r2,-28(fp)
   35a64:	10800c04 	addi	r2,r2,48
   35a68:	e0bff415 	stw	r2,-48(fp)
   35a6c:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   35a70:	e0bff80b 	ldhu	r2,-32(fp)
   35a74:	e0fff884 	addi	r3,fp,-30
   35a78:	180b883a 	mov	r5,r3
   35a7c:	1009883a 	mov	r4,r2
   35a80:	00305100 	call	30510 <OSFlagCreate>
   35a84:	1007883a 	mov	r3,r2
   35a88:	e0bff417 	ldw	r2,-48(fp)
   35a8c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   35a90:	e0bff917 	ldw	r2,-28(fp)
   35a94:	10800a04 	addi	r2,r2,40
   35a98:	e0bff515 	stw	r2,-44(fp)
   35a9c:	00800044 	movi	r2,1
   35aa0:	e0bff78d 	sth	r2,-34(fp)
   35aa4:	e0bff78b 	ldhu	r2,-34(fp)
   35aa8:	1009883a 	mov	r4,r2
   35aac:	00332240 	call	33224 <OSSemCreate>
   35ab0:	1007883a 	mov	r3,r2
   35ab4:	e0bff517 	ldw	r2,-44(fp)
   35ab8:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   35abc:	e0bff917 	ldw	r2,-28(fp)
   35ac0:	10800b04 	addi	r2,r2,44
   35ac4:	e0bff615 	stw	r2,-40(fp)
   35ac8:	00800044 	movi	r2,1
   35acc:	e0bff70d 	sth	r2,-36(fp)
   35ad0:	e0bff70b 	ldhu	r2,-36(fp)
   35ad4:	1009883a 	mov	r4,r2
   35ad8:	00332240 	call	33224 <OSSemCreate>
   35adc:	1007883a 	mov	r3,r2
   35ae0:	e0bff617 	ldw	r2,-40(fp)
   35ae4:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   35ae8:	e0bff917 	ldw	r2,-28(fp)
   35aec:	00c00044 	movi	r3,1
   35af0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   35af4:	e0bff917 	ldw	r2,-28(fp)
   35af8:	10800017 	ldw	r2,0(r2)
   35afc:	10800104 	addi	r2,r2,4
   35b00:	1007883a 	mov	r3,r2
   35b04:	e0bff917 	ldw	r2,-28(fp)
   35b08:	10800817 	ldw	r2,32(r2)
   35b0c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   35b10:	e0bffa17 	ldw	r2,-24(fp)
   35b14:	e0fffb17 	ldw	r3,-20(fp)
   35b18:	d8000015 	stw	zero,0(sp)
   35b1c:	e1fff917 	ldw	r7,-28(fp)
   35b20:	018000f4 	movhi	r6,3
   35b24:	3196e304 	addi	r6,r6,23436
   35b28:	180b883a 	mov	r5,r3
   35b2c:	1009883a 	mov	r4,r2
   35b30:	00369540 	call	36954 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   35b34:	e0bff917 	ldw	r2,-28(fp)
   35b38:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   35b3c:	e0bff917 	ldw	r2,-28(fp)
   35b40:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   35b44:	d0e73017 	ldw	r3,-25408(gp)
   35b48:	e1fff917 	ldw	r7,-28(fp)
   35b4c:	018000f4 	movhi	r6,3
   35b50:	31978c04 	addi	r6,r6,24112
   35b54:	180b883a 	mov	r5,r3
   35b58:	1009883a 	mov	r4,r2
   35b5c:	003660c0 	call	3660c <alt_alarm_start>
   35b60:	1000040e 	bge	r2,zero,35b74 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   35b64:	e0fff917 	ldw	r3,-28(fp)
   35b68:	00a00034 	movhi	r2,32768
   35b6c:	10bfffc4 	addi	r2,r2,-1
   35b70:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   35b74:	0001883a 	nop
   35b78:	e037883a 	mov	sp,fp
   35b7c:	dfc00117 	ldw	ra,4(sp)
   35b80:	df000017 	ldw	fp,0(sp)
   35b84:	dec00204 	addi	sp,sp,8
   35b88:	f800283a 	ret

00035b8c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   35b8c:	defff204 	addi	sp,sp,-56
   35b90:	dfc00d15 	stw	ra,52(sp)
   35b94:	df000c15 	stw	fp,48(sp)
   35b98:	df000c04 	addi	fp,sp,48
   35b9c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   35ba0:	e0bfff17 	ldw	r2,-4(fp)
   35ba4:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
   35ba8:	e0bff617 	ldw	r2,-40(fp)
   35bac:	10800017 	ldw	r2,0(r2)
   35bb0:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   35bb4:	e0bff717 	ldw	r2,-36(fp)
   35bb8:	10800104 	addi	r2,r2,4
   35bbc:	10800037 	ldwio	r2,0(r2)
   35bc0:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   35bc4:	e0bff817 	ldw	r2,-32(fp)
   35bc8:	1080c00c 	andi	r2,r2,768
   35bcc:	10009126 	beq	r2,zero,35e14 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   35bd0:	e0bff817 	ldw	r2,-32(fp)
   35bd4:	1080400c 	andi	r2,r2,256
   35bd8:	10004726 	beq	r2,zero,35cf8 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   35bdc:	00800074 	movhi	r2,1
   35be0:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   35be4:	e0bff617 	ldw	r2,-40(fp)
   35be8:	10800d17 	ldw	r2,52(r2)
   35bec:	10800044 	addi	r2,r2,1
   35bf0:	1081ffcc 	andi	r2,r2,2047
   35bf4:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   35bf8:	e0bff617 	ldw	r2,-40(fp)
   35bfc:	10c00e17 	ldw	r3,56(r2)
   35c00:	e0bff917 	ldw	r2,-28(fp)
   35c04:	18802726 	beq	r3,r2,35ca4 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   35c08:	e0bff717 	ldw	r2,-36(fp)
   35c0c:	10800037 	ldwio	r2,0(r2)
   35c10:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   35c14:	e0bff417 	ldw	r2,-48(fp)
   35c18:	10a0000c 	andi	r2,r2,32768
   35c1c:	10002326 	beq	r2,zero,35cac <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   35c20:	e0bff617 	ldw	r2,-40(fp)
   35c24:	10800d17 	ldw	r2,52(r2)
   35c28:	e0fff417 	ldw	r3,-48(fp)
   35c2c:	1809883a 	mov	r4,r3
   35c30:	e0fff617 	ldw	r3,-40(fp)
   35c34:	1885883a 	add	r2,r3,r2
   35c38:	10801104 	addi	r2,r2,68
   35c3c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   35c40:	e0bff617 	ldw	r2,-40(fp)
   35c44:	10800d17 	ldw	r2,52(r2)
   35c48:	10800044 	addi	r2,r2,1
   35c4c:	10c1ffcc 	andi	r3,r2,2047
   35c50:	e0bff617 	ldw	r2,-40(fp)
   35c54:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   35c58:	e0bff617 	ldw	r2,-40(fp)
   35c5c:	10800c17 	ldw	r2,48(r2)
   35c60:	e0bffb15 	stw	r2,-20(fp)
   35c64:	00800044 	movi	r2,1
   35c68:	e0bffc0d 	sth	r2,-16(fp)
   35c6c:	00800044 	movi	r2,1
   35c70:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   35c74:	d0a71b43 	ldbu	r2,-25491(gp)
   35c78:	10803fcc 	andi	r2,r2,255
   35c7c:	103fd926 	beq	r2,zero,35be4 <_gp+0xffff4098>
  {
    OSFlagPost (group, flags, opt, &err);
   35c80:	e0bffc0b 	ldhu	r2,-16(fp)
   35c84:	e0fffc83 	ldbu	r3,-14(fp)
   35c88:	e13ffdc4 	addi	r4,fp,-9
   35c8c:	200f883a 	mov	r7,r4
   35c90:	180d883a 	mov	r6,r3
   35c94:	100b883a 	mov	r5,r2
   35c98:	e13ffb17 	ldw	r4,-20(fp)
   35c9c:	00310ec0 	call	310ec <OSFlagPost>
      }
   35ca0:	003fd006 	br	35be4 <_gp+0xffff4098>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   35ca4:	0001883a 	nop
   35ca8:	00000106 	br	35cb0 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   35cac:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   35cb0:	e0bff417 	ldw	r2,-48(fp)
   35cb4:	10bfffec 	andhi	r2,r2,65535
   35cb8:	10000f26 	beq	r2,zero,35cf8 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   35cbc:	e0bff617 	ldw	r2,-40(fp)
   35cc0:	10c00817 	ldw	r3,32(r2)
   35cc4:	00bfff84 	movi	r2,-2
   35cc8:	1886703a 	and	r3,r3,r2
   35ccc:	e0bff617 	ldw	r2,-40(fp)
   35cd0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   35cd4:	e0bff717 	ldw	r2,-36(fp)
   35cd8:	10800104 	addi	r2,r2,4
   35cdc:	1007883a 	mov	r3,r2
   35ce0:	e0bff617 	ldw	r2,-40(fp)
   35ce4:	10800817 	ldw	r2,32(r2)
   35ce8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   35cec:	e0bff717 	ldw	r2,-36(fp)
   35cf0:	10800104 	addi	r2,r2,4
   35cf4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   35cf8:	e0bff817 	ldw	r2,-32(fp)
   35cfc:	1080800c 	andi	r2,r2,512
   35d00:	103fac26 	beq	r2,zero,35bb4 <_gp+0xffff4068>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   35d04:	e0bff817 	ldw	r2,-32(fp)
   35d08:	1004d43a 	srli	r2,r2,16
   35d0c:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   35d10:	00002606 	br	35dac <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   35d14:	e0bff717 	ldw	r2,-36(fp)
   35d18:	e0fff617 	ldw	r3,-40(fp)
   35d1c:	18c01017 	ldw	r3,64(r3)
   35d20:	e13ff617 	ldw	r4,-40(fp)
   35d24:	20c7883a 	add	r3,r4,r3
   35d28:	18c21104 	addi	r3,r3,2116
   35d2c:	18c00003 	ldbu	r3,0(r3)
   35d30:	18c03fcc 	andi	r3,r3,255
   35d34:	18c0201c 	xori	r3,r3,128
   35d38:	18ffe004 	addi	r3,r3,-128
   35d3c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   35d40:	e0bff617 	ldw	r2,-40(fp)
   35d44:	10801017 	ldw	r2,64(r2)
   35d48:	10800044 	addi	r2,r2,1
   35d4c:	10c1ffcc 	andi	r3,r2,2047
   35d50:	e0bff617 	ldw	r2,-40(fp)
   35d54:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   35d58:	e0bff617 	ldw	r2,-40(fp)
   35d5c:	10800c17 	ldw	r2,48(r2)
   35d60:	e0bffa15 	stw	r2,-24(fp)
   35d64:	00800084 	movi	r2,2
   35d68:	e0bffd0d 	sth	r2,-12(fp)
   35d6c:	00800044 	movi	r2,1
   35d70:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   35d74:	d0a71b43 	ldbu	r2,-25491(gp)
   35d78:	10803fcc 	andi	r2,r2,255
   35d7c:	10000826 	beq	r2,zero,35da0 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
   35d80:	e0bffd0b 	ldhu	r2,-12(fp)
   35d84:	e0fffd83 	ldbu	r3,-10(fp)
   35d88:	e13ffe04 	addi	r4,fp,-8
   35d8c:	200f883a 	mov	r7,r4
   35d90:	180d883a 	mov	r6,r3
   35d94:	100b883a 	mov	r5,r2
   35d98:	e13ffa17 	ldw	r4,-24(fp)
   35d9c:	00310ec0 	call	310ec <OSFlagPost>

        space--;
   35da0:	e0bff517 	ldw	r2,-44(fp)
   35da4:	10bfffc4 	addi	r2,r2,-1
   35da8:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   35dac:	e0bff517 	ldw	r2,-44(fp)
   35db0:	10000526 	beq	r2,zero,35dc8 <altera_avalon_jtag_uart_irq+0x23c>
   35db4:	e0bff617 	ldw	r2,-40(fp)
   35db8:	10c01017 	ldw	r3,64(r2)
   35dbc:	e0bff617 	ldw	r2,-40(fp)
   35dc0:	10800f17 	ldw	r2,60(r2)
   35dc4:	18bfd31e 	bne	r3,r2,35d14 <_gp+0xffff41c8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   35dc8:	e0bff517 	ldw	r2,-44(fp)
   35dcc:	103f7926 	beq	r2,zero,35bb4 <_gp+0xffff4068>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   35dd0:	e0bff617 	ldw	r2,-40(fp)
   35dd4:	10c00817 	ldw	r3,32(r2)
   35dd8:	00bfff44 	movi	r2,-3
   35ddc:	1886703a 	and	r3,r3,r2
   35de0:	e0bff617 	ldw	r2,-40(fp)
   35de4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   35de8:	e0bff617 	ldw	r2,-40(fp)
   35dec:	10800017 	ldw	r2,0(r2)
   35df0:	10800104 	addi	r2,r2,4
   35df4:	1007883a 	mov	r3,r2
   35df8:	e0bff617 	ldw	r2,-40(fp)
   35dfc:	10800817 	ldw	r2,32(r2)
   35e00:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   35e04:	e0bff717 	ldw	r2,-36(fp)
   35e08:	10800104 	addi	r2,r2,4
   35e0c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   35e10:	003f6806 	br	35bb4 <_gp+0xffff4068>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   35e14:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   35e18:	0001883a 	nop
   35e1c:	e037883a 	mov	sp,fp
   35e20:	dfc00117 	ldw	ra,4(sp)
   35e24:	df000017 	ldw	fp,0(sp)
   35e28:	dec00204 	addi	sp,sp,8
   35e2c:	f800283a 	ret

00035e30 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   35e30:	defff904 	addi	sp,sp,-28
   35e34:	dfc00615 	stw	ra,24(sp)
   35e38:	df000515 	stw	fp,20(sp)
   35e3c:	df000504 	addi	fp,sp,20
   35e40:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   35e44:	e0bfff17 	ldw	r2,-4(fp)
   35e48:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   35e4c:	e0bffb17 	ldw	r2,-20(fp)
   35e50:	10800017 	ldw	r2,0(r2)
   35e54:	10800104 	addi	r2,r2,4
   35e58:	10800037 	ldwio	r2,0(r2)
   35e5c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   35e60:	e0bffc17 	ldw	r2,-16(fp)
   35e64:	1081000c 	andi	r2,r2,1024
   35e68:	10000b26 	beq	r2,zero,35e98 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   35e6c:	e0bffb17 	ldw	r2,-20(fp)
   35e70:	10800017 	ldw	r2,0(r2)
   35e74:	10800104 	addi	r2,r2,4
   35e78:	1007883a 	mov	r3,r2
   35e7c:	e0bffb17 	ldw	r2,-20(fp)
   35e80:	10800817 	ldw	r2,32(r2)
   35e84:	10810014 	ori	r2,r2,1024
   35e88:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   35e8c:	e0bffb17 	ldw	r2,-20(fp)
   35e90:	10000915 	stw	zero,36(r2)
   35e94:	00002106 	br	35f1c <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   35e98:	e0bffb17 	ldw	r2,-20(fp)
   35e9c:	10c00917 	ldw	r3,36(r2)
   35ea0:	00a00034 	movhi	r2,32768
   35ea4:	10bfff04 	addi	r2,r2,-4
   35ea8:	10c01c36 	bltu	r2,r3,35f1c <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   35eac:	e0bffb17 	ldw	r2,-20(fp)
   35eb0:	10800917 	ldw	r2,36(r2)
   35eb4:	10c00044 	addi	r3,r2,1
   35eb8:	e0bffb17 	ldw	r2,-20(fp)
   35ebc:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   35ec0:	e0bffb17 	ldw	r2,-20(fp)
   35ec4:	10c00917 	ldw	r3,36(r2)
   35ec8:	e0bffb17 	ldw	r2,-20(fp)
   35ecc:	10800117 	ldw	r2,4(r2)
   35ed0:	18801236 	bltu	r3,r2,35f1c <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   35ed4:	e0bffb17 	ldw	r2,-20(fp)
   35ed8:	10800c17 	ldw	r2,48(r2)
   35edc:	e0bffd15 	stw	r2,-12(fp)
   35ee0:	00800104 	movi	r2,4
   35ee4:	e0bffe0d 	sth	r2,-8(fp)
   35ee8:	00800044 	movi	r2,1
   35eec:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   35ef0:	d0a71b43 	ldbu	r2,-25491(gp)
   35ef4:	10803fcc 	andi	r2,r2,255
   35ef8:	10000826 	beq	r2,zero,35f1c <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   35efc:	e0bffe0b 	ldhu	r2,-8(fp)
   35f00:	e0fffe83 	ldbu	r3,-6(fp)
   35f04:	e13ffec4 	addi	r4,fp,-5
   35f08:	200f883a 	mov	r7,r4
   35f0c:	180d883a 	mov	r6,r3
   35f10:	100b883a 	mov	r5,r2
   35f14:	e13ffd17 	ldw	r4,-12(fp)
   35f18:	00310ec0 	call	310ec <OSFlagPost>
   35f1c:	d0a73017 	ldw	r2,-25408(gp)
    }
  }

  return alt_ticks_per_second();
}
   35f20:	e037883a 	mov	sp,fp
   35f24:	dfc00117 	ldw	ra,4(sp)
   35f28:	df000017 	ldw	fp,0(sp)
   35f2c:	dec00204 	addi	sp,sp,8
   35f30:	f800283a 	ret

00035f34 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   35f34:	defffd04 	addi	sp,sp,-12
   35f38:	df000215 	stw	fp,8(sp)
   35f3c:	df000204 	addi	fp,sp,8
   35f40:	e13ffe15 	stw	r4,-8(fp)
   35f44:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   35f48:	00000506 	br	35f60 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   35f4c:	e0bfff17 	ldw	r2,-4(fp)
   35f50:	1090000c 	andi	r2,r2,16384
   35f54:	10000226 	beq	r2,zero,35f60 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   35f58:	00bffd44 	movi	r2,-11
   35f5c:	00000b06 	br	35f8c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   35f60:	e0bffe17 	ldw	r2,-8(fp)
   35f64:	10c01017 	ldw	r3,64(r2)
   35f68:	e0bffe17 	ldw	r2,-8(fp)
   35f6c:	10800f17 	ldw	r2,60(r2)
   35f70:	18800526 	beq	r3,r2,35f88 <altera_avalon_jtag_uart_close+0x54>
   35f74:	e0bffe17 	ldw	r2,-8(fp)
   35f78:	10c00917 	ldw	r3,36(r2)
   35f7c:	e0bffe17 	ldw	r2,-8(fp)
   35f80:	10800117 	ldw	r2,4(r2)
   35f84:	18bff136 	bltu	r3,r2,35f4c <_gp+0xffff4400>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   35f88:	0005883a 	mov	r2,zero
}
   35f8c:	e037883a 	mov	sp,fp
   35f90:	df000017 	ldw	fp,0(sp)
   35f94:	dec00104 	addi	sp,sp,4
   35f98:	f800283a 	ret

00035f9c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   35f9c:	defffa04 	addi	sp,sp,-24
   35fa0:	df000515 	stw	fp,20(sp)
   35fa4:	df000504 	addi	fp,sp,20
   35fa8:	e13ffd15 	stw	r4,-12(fp)
   35fac:	e17ffe15 	stw	r5,-8(fp)
   35fb0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   35fb4:	00bff9c4 	movi	r2,-25
   35fb8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   35fbc:	e0bffe17 	ldw	r2,-8(fp)
   35fc0:	10da8060 	cmpeqi	r3,r2,27137
   35fc4:	1800031e 	bne	r3,zero,35fd4 <altera_avalon_jtag_uart_ioctl+0x38>
   35fc8:	109a80a0 	cmpeqi	r2,r2,27138
   35fcc:	1000181e 	bne	r2,zero,36030 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   35fd0:	00002906 	br	36078 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   35fd4:	e0bffd17 	ldw	r2,-12(fp)
   35fd8:	10c00117 	ldw	r3,4(r2)
   35fdc:	00a00034 	movhi	r2,32768
   35fe0:	10bfffc4 	addi	r2,r2,-1
   35fe4:	18802126 	beq	r3,r2,3606c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   35fe8:	e0bfff17 	ldw	r2,-4(fp)
   35fec:	10800017 	ldw	r2,0(r2)
   35ff0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   35ff4:	e0bffc17 	ldw	r2,-16(fp)
   35ff8:	10800090 	cmplti	r2,r2,2
   35ffc:	1000061e 	bne	r2,zero,36018 <altera_avalon_jtag_uart_ioctl+0x7c>
   36000:	e0fffc17 	ldw	r3,-16(fp)
   36004:	00a00034 	movhi	r2,32768
   36008:	10bfffc4 	addi	r2,r2,-1
   3600c:	18800226 	beq	r3,r2,36018 <altera_avalon_jtag_uart_ioctl+0x7c>
   36010:	e0bffc17 	ldw	r2,-16(fp)
   36014:	00000206 	br	36020 <altera_avalon_jtag_uart_ioctl+0x84>
   36018:	00a00034 	movhi	r2,32768
   3601c:	10bfff84 	addi	r2,r2,-2
   36020:	e0fffd17 	ldw	r3,-12(fp)
   36024:	18800115 	stw	r2,4(r3)
      rc = 0;
   36028:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   3602c:	00000f06 	br	3606c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   36030:	e0bffd17 	ldw	r2,-12(fp)
   36034:	10c00117 	ldw	r3,4(r2)
   36038:	00a00034 	movhi	r2,32768
   3603c:	10bfffc4 	addi	r2,r2,-1
   36040:	18800c26 	beq	r3,r2,36074 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   36044:	e0bffd17 	ldw	r2,-12(fp)
   36048:	10c00917 	ldw	r3,36(r2)
   3604c:	e0bffd17 	ldw	r2,-12(fp)
   36050:	10800117 	ldw	r2,4(r2)
   36054:	1885803a 	cmpltu	r2,r3,r2
   36058:	10c03fcc 	andi	r3,r2,255
   3605c:	e0bfff17 	ldw	r2,-4(fp)
   36060:	10c00015 	stw	r3,0(r2)
      rc = 0;
   36064:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   36068:	00000206 	br	36074 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   3606c:	0001883a 	nop
   36070:	00000106 	br	36078 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   36074:	0001883a 	nop

  default:
    break;
  }

  return rc;
   36078:	e0bffb17 	ldw	r2,-20(fp)
}
   3607c:	e037883a 	mov	sp,fp
   36080:	df000017 	ldw	fp,0(sp)
   36084:	dec00104 	addi	sp,sp,4
   36088:	f800283a 	ret

0003608c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   3608c:	deffed04 	addi	sp,sp,-76
   36090:	dfc01215 	stw	ra,72(sp)
   36094:	df001115 	stw	fp,68(sp)
   36098:	df001104 	addi	fp,sp,68
   3609c:	e13ffc15 	stw	r4,-16(fp)
   360a0:	e17ffd15 	stw	r5,-12(fp)
   360a4:	e1bffe15 	stw	r6,-8(fp)
   360a8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   360ac:	e0bffd17 	ldw	r2,-12(fp)
   360b0:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   360b4:	e0bffc17 	ldw	r2,-16(fp)
   360b8:	10800a17 	ldw	r2,40(r2)
   360bc:	e0bff815 	stw	r2,-32(fp)
   360c0:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   360c4:	e0bff90b 	ldhu	r2,-28(fp)
   360c8:	e0fffb04 	addi	r3,fp,-20
   360cc:	180d883a 	mov	r6,r3
   360d0:	100b883a 	mov	r5,r2
   360d4:	e13ff817 	ldw	r4,-32(fp)
   360d8:	003353c0 	call	3353c <OSSemPend>

  while (space > 0)
   360dc:	00006106 	br	36264 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   360e0:	e0bffc17 	ldw	r2,-16(fp)
   360e4:	10800d17 	ldw	r2,52(r2)
   360e8:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   360ec:	e0bffc17 	ldw	r2,-16(fp)
   360f0:	10800e17 	ldw	r2,56(r2)
   360f4:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   360f8:	e0fff317 	ldw	r3,-52(fp)
   360fc:	e0bff417 	ldw	r2,-48(fp)
   36100:	18800536 	bltu	r3,r2,36118 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   36104:	e0fff317 	ldw	r3,-52(fp)
   36108:	e0bff417 	ldw	r2,-48(fp)
   3610c:	1885c83a 	sub	r2,r3,r2
   36110:	e0bff115 	stw	r2,-60(fp)
   36114:	00000406 	br	36128 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   36118:	00c20004 	movi	r3,2048
   3611c:	e0bff417 	ldw	r2,-48(fp)
   36120:	1885c83a 	sub	r2,r3,r2
   36124:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   36128:	e0bff117 	ldw	r2,-60(fp)
   3612c:	10001e26 	beq	r2,zero,361a8 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   36130:	e0fffe17 	ldw	r3,-8(fp)
   36134:	e0bff117 	ldw	r2,-60(fp)
   36138:	1880022e 	bgeu	r3,r2,36144 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   3613c:	e0bffe17 	ldw	r2,-8(fp)
   36140:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   36144:	e0bffc17 	ldw	r2,-16(fp)
   36148:	10c01104 	addi	r3,r2,68
   3614c:	e0bff417 	ldw	r2,-48(fp)
   36150:	1885883a 	add	r2,r3,r2
   36154:	e1bff117 	ldw	r6,-60(fp)
   36158:	100b883a 	mov	r5,r2
   3615c:	e13ff017 	ldw	r4,-64(fp)
   36160:	0026b3c0 	call	26b3c <memcpy>
      ptr   += n;
   36164:	e0fff017 	ldw	r3,-64(fp)
   36168:	e0bff117 	ldw	r2,-60(fp)
   3616c:	1885883a 	add	r2,r3,r2
   36170:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   36174:	e0fffe17 	ldw	r3,-8(fp)
   36178:	e0bff117 	ldw	r2,-60(fp)
   3617c:	1885c83a 	sub	r2,r3,r2
   36180:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   36184:	e0fff417 	ldw	r3,-48(fp)
   36188:	e0bff117 	ldw	r2,-60(fp)
   3618c:	1885883a 	add	r2,r3,r2
   36190:	10c1ffcc 	andi	r3,r2,2047
   36194:	e0bffc17 	ldw	r2,-16(fp)
   36198:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   3619c:	e0bffe17 	ldw	r2,-8(fp)
   361a0:	00bfcf16 	blt	zero,r2,360e0 <_gp+0xffff4594>
   361a4:	00000106 	br	361ac <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   361a8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   361ac:	e0fff017 	ldw	r3,-64(fp)
   361b0:	e0bffd17 	ldw	r2,-12(fp)
   361b4:	18802e1e 	bne	r3,r2,36270 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   361b8:	e0bfff17 	ldw	r2,-4(fp)
   361bc:	1090000c 	andi	r2,r2,16384
   361c0:	10002d1e 	bne	r2,zero,36278 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   361c4:	d0a71b43 	ldbu	r2,-25491(gp)
   361c8:	10803fcc 	andi	r2,r2,255
   361cc:	10800058 	cmpnei	r2,r2,1
   361d0:	1000161e 	bne	r2,zero,3622c <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   361d4:	e0bffc17 	ldw	r2,-16(fp)
   361d8:	10800c17 	ldw	r2,48(r2)
   361dc:	e0bff215 	stw	r2,-56(fp)
   361e0:	00800144 	movi	r2,5
   361e4:	e0bff98d 	sth	r2,-26(fp)
   361e8:	00bfe0c4 	movi	r2,-125
   361ec:	e0bffa05 	stb	r2,-24(fp)
   361f0:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   361f4:	d0a71b43 	ldbu	r2,-25491(gp)
   361f8:	10803fcc 	andi	r2,r2,255
   361fc:	10001526 	beq	r2,zero,36254 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   36200:	e0fff98b 	ldhu	r3,-26(fp)
   36204:	e13ffa03 	ldbu	r4,-24(fp)
   36208:	e17ffa8b 	ldhu	r5,-22(fp)
   3620c:	e0bffb44 	addi	r2,fp,-19
   36210:	d8800015 	stw	r2,0(sp)
   36214:	280f883a 	mov	r7,r5
   36218:	200d883a 	mov	r6,r4
   3621c:	180b883a 	mov	r5,r3
   36220:	e13ff217 	ldw	r4,-56(fp)
   36224:	0030ad40 	call	30ad4 <OSFlagPend>
   36228:	00000a06 	br	36254 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   3622c:	0001883a 	nop
   36230:	e0bffc17 	ldw	r2,-16(fp)
   36234:	10c00d17 	ldw	r3,52(r2)
   36238:	e0bff317 	ldw	r2,-52(fp)
   3623c:	1880051e 	bne	r3,r2,36254 <altera_avalon_jtag_uart_read+0x1c8>
   36240:	e0bffc17 	ldw	r2,-16(fp)
   36244:	10c00917 	ldw	r3,36(r2)
   36248:	e0bffc17 	ldw	r2,-16(fp)
   3624c:	10800117 	ldw	r2,4(r2)
   36250:	18bff736 	bltu	r3,r2,36230 <_gp+0xffff46e4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   36254:	e0bffc17 	ldw	r2,-16(fp)
   36258:	10c00d17 	ldw	r3,52(r2)
   3625c:	e0bff317 	ldw	r2,-52(fp)
   36260:	18800726 	beq	r3,r2,36280 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   36264:	e0bffe17 	ldw	r2,-8(fp)
   36268:	00bf9d16 	blt	zero,r2,360e0 <_gp+0xffff4594>
   3626c:	00000506 	br	36284 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   36270:	0001883a 	nop
   36274:	00000306 	br	36284 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   36278:	0001883a 	nop
   3627c:	00000106 	br	36284 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   36280:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   36284:	e0bffc17 	ldw	r2,-16(fp)
   36288:	10800a17 	ldw	r2,40(r2)
   3628c:	1009883a 	mov	r4,r2
   36290:	00338b40 	call	338b4 <OSSemPost>

  if (ptr != buffer)
   36294:	e0fff017 	ldw	r3,-64(fp)
   36298:	e0bffd17 	ldw	r2,-12(fp)
   3629c:	18801826 	beq	r3,r2,36300 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   362a0:	0005303a 	rdctl	r2,status
   362a4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   362a8:	e0fff717 	ldw	r3,-36(fp)
   362ac:	00bfff84 	movi	r2,-2
   362b0:	1884703a 	and	r2,r3,r2
   362b4:	1001703a 	wrctl	status,r2
  
  return context;
   362b8:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   362bc:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   362c0:	e0bffc17 	ldw	r2,-16(fp)
   362c4:	10800817 	ldw	r2,32(r2)
   362c8:	10c00054 	ori	r3,r2,1
   362cc:	e0bffc17 	ldw	r2,-16(fp)
   362d0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   362d4:	e0bffc17 	ldw	r2,-16(fp)
   362d8:	10800017 	ldw	r2,0(r2)
   362dc:	10800104 	addi	r2,r2,4
   362e0:	1007883a 	mov	r3,r2
   362e4:	e0bffc17 	ldw	r2,-16(fp)
   362e8:	10800817 	ldw	r2,32(r2)
   362ec:	18800035 	stwio	r2,0(r3)
   362f0:	e0bff617 	ldw	r2,-40(fp)
   362f4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   362f8:	e0bff517 	ldw	r2,-44(fp)
   362fc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   36300:	e0fff017 	ldw	r3,-64(fp)
   36304:	e0bffd17 	ldw	r2,-12(fp)
   36308:	18800426 	beq	r3,r2,3631c <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   3630c:	e0fff017 	ldw	r3,-64(fp)
   36310:	e0bffd17 	ldw	r2,-12(fp)
   36314:	1885c83a 	sub	r2,r3,r2
   36318:	00000606 	br	36334 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   3631c:	e0bfff17 	ldw	r2,-4(fp)
   36320:	1090000c 	andi	r2,r2,16384
   36324:	10000226 	beq	r2,zero,36330 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   36328:	00bffd44 	movi	r2,-11
   3632c:	00000106 	br	36334 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   36330:	00bffec4 	movi	r2,-5
}
   36334:	e037883a 	mov	sp,fp
   36338:	dfc00117 	ldw	ra,4(sp)
   3633c:	df000017 	ldw	fp,0(sp)
   36340:	dec00204 	addi	sp,sp,8
   36344:	f800283a 	ret

00036348 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   36348:	deffed04 	addi	sp,sp,-76
   3634c:	dfc01215 	stw	ra,72(sp)
   36350:	df001115 	stw	fp,68(sp)
   36354:	df001104 	addi	fp,sp,68
   36358:	e13ffc15 	stw	r4,-16(fp)
   3635c:	e17ffd15 	stw	r5,-12(fp)
   36360:	e1bffe15 	stw	r6,-8(fp)
   36364:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   36368:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   3636c:	e0bffd17 	ldw	r2,-12(fp)
   36370:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   36374:	e0bffc17 	ldw	r2,-16(fp)
   36378:	10800b17 	ldw	r2,44(r2)
   3637c:	e0bff815 	stw	r2,-32(fp)
   36380:	e03ff90d 	sth	zero,-28(fp)
   36384:	e0bff90b 	ldhu	r2,-28(fp)
   36388:	e0fffb44 	addi	r3,fp,-19
   3638c:	180d883a 	mov	r6,r3
   36390:	100b883a 	mov	r5,r2
   36394:	e13ff817 	ldw	r4,-32(fp)
   36398:	003353c0 	call	3353c <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   3639c:	00003706 	br	3647c <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   363a0:	e0bffc17 	ldw	r2,-16(fp)
   363a4:	10800f17 	ldw	r2,60(r2)
   363a8:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   363ac:	e0bffc17 	ldw	r2,-16(fp)
   363b0:	10801017 	ldw	r2,64(r2)
   363b4:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   363b8:	e0fff417 	ldw	r3,-48(fp)
   363bc:	e0bff017 	ldw	r2,-64(fp)
   363c0:	1880062e 	bgeu	r3,r2,363dc <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   363c4:	e0fff017 	ldw	r3,-64(fp)
   363c8:	e0bff417 	ldw	r2,-48(fp)
   363cc:	1885c83a 	sub	r2,r3,r2
   363d0:	10bfffc4 	addi	r2,r2,-1
   363d4:	e0bff115 	stw	r2,-60(fp)
   363d8:	00000b06 	br	36408 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   363dc:	e0bff017 	ldw	r2,-64(fp)
   363e0:	10000526 	beq	r2,zero,363f8 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   363e4:	00c20004 	movi	r3,2048
   363e8:	e0bff417 	ldw	r2,-48(fp)
   363ec:	1885c83a 	sub	r2,r3,r2
   363f0:	e0bff115 	stw	r2,-60(fp)
   363f4:	00000406 	br	36408 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   363f8:	00c1ffc4 	movi	r3,2047
   363fc:	e0bff417 	ldw	r2,-48(fp)
   36400:	1885c83a 	sub	r2,r3,r2
   36404:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   36408:	e0bff117 	ldw	r2,-60(fp)
   3640c:	10001e26 	beq	r2,zero,36488 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   36410:	e0fffe17 	ldw	r3,-8(fp)
   36414:	e0bff117 	ldw	r2,-60(fp)
   36418:	1880022e 	bgeu	r3,r2,36424 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   3641c:	e0bffe17 	ldw	r2,-8(fp)
   36420:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   36424:	e0bffc17 	ldw	r2,-16(fp)
   36428:	10c21104 	addi	r3,r2,2116
   3642c:	e0bff417 	ldw	r2,-48(fp)
   36430:	1885883a 	add	r2,r3,r2
   36434:	e1bff117 	ldw	r6,-60(fp)
   36438:	e17ffd17 	ldw	r5,-12(fp)
   3643c:	1009883a 	mov	r4,r2
   36440:	0026b3c0 	call	26b3c <memcpy>
      ptr   += n;
   36444:	e0fffd17 	ldw	r3,-12(fp)
   36448:	e0bff117 	ldw	r2,-60(fp)
   3644c:	1885883a 	add	r2,r3,r2
   36450:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   36454:	e0fffe17 	ldw	r3,-8(fp)
   36458:	e0bff117 	ldw	r2,-60(fp)
   3645c:	1885c83a 	sub	r2,r3,r2
   36460:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   36464:	e0fff417 	ldw	r3,-48(fp)
   36468:	e0bff117 	ldw	r2,-60(fp)
   3646c:	1885883a 	add	r2,r3,r2
   36470:	10c1ffcc 	andi	r3,r2,2047
   36474:	e0bffc17 	ldw	r2,-16(fp)
   36478:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   3647c:	e0bffe17 	ldw	r2,-8(fp)
   36480:	00bfc716 	blt	zero,r2,363a0 <_gp+0xffff4854>
   36484:	00000106 	br	3648c <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   36488:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3648c:	0005303a 	rdctl	r2,status
   36490:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   36494:	e0fff717 	ldw	r3,-36(fp)
   36498:	00bfff84 	movi	r2,-2
   3649c:	1884703a 	and	r2,r3,r2
   364a0:	1001703a 	wrctl	status,r2
  
  return context;
   364a4:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   364a8:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   364ac:	e0bffc17 	ldw	r2,-16(fp)
   364b0:	10800817 	ldw	r2,32(r2)
   364b4:	10c00094 	ori	r3,r2,2
   364b8:	e0bffc17 	ldw	r2,-16(fp)
   364bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   364c0:	e0bffc17 	ldw	r2,-16(fp)
   364c4:	10800017 	ldw	r2,0(r2)
   364c8:	10800104 	addi	r2,r2,4
   364cc:	1007883a 	mov	r3,r2
   364d0:	e0bffc17 	ldw	r2,-16(fp)
   364d4:	10800817 	ldw	r2,32(r2)
   364d8:	18800035 	stwio	r2,0(r3)
   364dc:	e0bff617 	ldw	r2,-40(fp)
   364e0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   364e4:	e0bff317 	ldw	r2,-52(fp)
   364e8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   364ec:	e0bffe17 	ldw	r2,-8(fp)
   364f0:	00802a0e 	bge	zero,r2,3659c <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   364f4:	e0bfff17 	ldw	r2,-4(fp)
   364f8:	1090000c 	andi	r2,r2,16384
   364fc:	10002a1e 	bne	r2,zero,365a8 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   36500:	d0a71b43 	ldbu	r2,-25491(gp)
   36504:	10803fcc 	andi	r2,r2,255
   36508:	10800058 	cmpnei	r2,r2,1
   3650c:	1000161e 	bne	r2,zero,36568 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   36510:	e0bffc17 	ldw	r2,-16(fp)
   36514:	10800c17 	ldw	r2,48(r2)
   36518:	e0bff515 	stw	r2,-44(fp)
   3651c:	00800184 	movi	r2,6
   36520:	e0bff98d 	sth	r2,-26(fp)
   36524:	00bfe0c4 	movi	r2,-125
   36528:	e0bffa05 	stb	r2,-24(fp)
   3652c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   36530:	d0a71b43 	ldbu	r2,-25491(gp)
   36534:	10803fcc 	andi	r2,r2,255
   36538:	10001526 	beq	r2,zero,36590 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   3653c:	e0fff98b 	ldhu	r3,-26(fp)
   36540:	e13ffa03 	ldbu	r4,-24(fp)
   36544:	e17ffa8b 	ldhu	r5,-22(fp)
   36548:	e0bffb04 	addi	r2,fp,-20
   3654c:	d8800015 	stw	r2,0(sp)
   36550:	280f883a 	mov	r7,r5
   36554:	200d883a 	mov	r6,r4
   36558:	180b883a 	mov	r5,r3
   3655c:	e13ff517 	ldw	r4,-44(fp)
   36560:	0030ad40 	call	30ad4 <OSFlagPend>
   36564:	00000a06 	br	36590 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   36568:	0001883a 	nop
   3656c:	e0bffc17 	ldw	r2,-16(fp)
   36570:	10c01017 	ldw	r3,64(r2)
   36574:	e0bff017 	ldw	r2,-64(fp)
   36578:	1880051e 	bne	r3,r2,36590 <altera_avalon_jtag_uart_write+0x248>
   3657c:	e0bffc17 	ldw	r2,-16(fp)
   36580:	10c00917 	ldw	r3,36(r2)
   36584:	e0bffc17 	ldw	r2,-16(fp)
   36588:	10800117 	ldw	r2,4(r2)
   3658c:	18bff736 	bltu	r3,r2,3656c <_gp+0xffff4a20>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   36590:	e0bffc17 	ldw	r2,-16(fp)
   36594:	10800917 	ldw	r2,36(r2)
   36598:	1000051e 	bne	r2,zero,365b0 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   3659c:	e0bffe17 	ldw	r2,-8(fp)
   365a0:	00bfb616 	blt	zero,r2,3647c <_gp+0xffff4930>
   365a4:	00000306 	br	365b4 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   365a8:	0001883a 	nop
   365ac:	00000106 	br	365b4 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   365b0:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   365b4:	e0bffc17 	ldw	r2,-16(fp)
   365b8:	10800b17 	ldw	r2,44(r2)
   365bc:	1009883a 	mov	r4,r2
   365c0:	00338b40 	call	338b4 <OSSemPost>

  if (ptr != start)
   365c4:	e0fffd17 	ldw	r3,-12(fp)
   365c8:	e0bff217 	ldw	r2,-56(fp)
   365cc:	18800426 	beq	r3,r2,365e0 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   365d0:	e0fffd17 	ldw	r3,-12(fp)
   365d4:	e0bff217 	ldw	r2,-56(fp)
   365d8:	1885c83a 	sub	r2,r3,r2
   365dc:	00000606 	br	365f8 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   365e0:	e0bfff17 	ldw	r2,-4(fp)
   365e4:	1090000c 	andi	r2,r2,16384
   365e8:	10000226 	beq	r2,zero,365f4 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   365ec:	00bffd44 	movi	r2,-11
   365f0:	00000106 	br	365f8 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   365f4:	00bffec4 	movi	r2,-5
}
   365f8:	e037883a 	mov	sp,fp
   365fc:	dfc00117 	ldw	ra,4(sp)
   36600:	df000017 	ldw	fp,0(sp)
   36604:	dec00204 	addi	sp,sp,8
   36608:	f800283a 	ret

0003660c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   3660c:	defff504 	addi	sp,sp,-44
   36610:	df000a15 	stw	fp,40(sp)
   36614:	df000a04 	addi	fp,sp,40
   36618:	e13ffc15 	stw	r4,-16(fp)
   3661c:	e17ffd15 	stw	r5,-12(fp)
   36620:	e1bffe15 	stw	r6,-8(fp)
   36624:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   36628:	e03ff615 	stw	zero,-40(fp)
   3662c:	d0a73017 	ldw	r2,-25408(gp)
  
  if (alt_ticks_per_second ())
   36630:	10003c26 	beq	r2,zero,36724 <alt_alarm_start+0x118>
  {
    if (alarm)
   36634:	e0bffc17 	ldw	r2,-16(fp)
   36638:	10003826 	beq	r2,zero,3671c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   3663c:	e0bffc17 	ldw	r2,-16(fp)
   36640:	e0fffe17 	ldw	r3,-8(fp)
   36644:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   36648:	e0bffc17 	ldw	r2,-16(fp)
   3664c:	e0ffff17 	ldw	r3,-4(fp)
   36650:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   36654:	0005303a 	rdctl	r2,status
   36658:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3665c:	e0fff917 	ldw	r3,-28(fp)
   36660:	00bfff84 	movi	r2,-2
   36664:	1884703a 	and	r2,r3,r2
   36668:	1001703a 	wrctl	status,r2
  
  return context;
   3666c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   36670:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   36674:	d0a73117 	ldw	r2,-25404(gp)
      
      current_nticks = alt_nticks();
   36678:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   3667c:	e0fffd17 	ldw	r3,-12(fp)
   36680:	e0bff617 	ldw	r2,-40(fp)
   36684:	1885883a 	add	r2,r3,r2
   36688:	10c00044 	addi	r3,r2,1
   3668c:	e0bffc17 	ldw	r2,-16(fp)
   36690:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   36694:	e0bffc17 	ldw	r2,-16(fp)
   36698:	10c00217 	ldw	r3,8(r2)
   3669c:	e0bff617 	ldw	r2,-40(fp)
   366a0:	1880042e 	bgeu	r3,r2,366b4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   366a4:	e0bffc17 	ldw	r2,-16(fp)
   366a8:	00c00044 	movi	r3,1
   366ac:	10c00405 	stb	r3,16(r2)
   366b0:	00000206 	br	366bc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   366b4:	e0bffc17 	ldw	r2,-16(fp)
   366b8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   366bc:	e0bffc17 	ldw	r2,-16(fp)
   366c0:	d0e02d04 	addi	r3,gp,-32588
   366c4:	e0fffa15 	stw	r3,-24(fp)
   366c8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   366cc:	e0bffb17 	ldw	r2,-20(fp)
   366d0:	e0fffa17 	ldw	r3,-24(fp)
   366d4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   366d8:	e0bffa17 	ldw	r2,-24(fp)
   366dc:	10c00017 	ldw	r3,0(r2)
   366e0:	e0bffb17 	ldw	r2,-20(fp)
   366e4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   366e8:	e0bffa17 	ldw	r2,-24(fp)
   366ec:	10800017 	ldw	r2,0(r2)
   366f0:	e0fffb17 	ldw	r3,-20(fp)
   366f4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   366f8:	e0bffa17 	ldw	r2,-24(fp)
   366fc:	e0fffb17 	ldw	r3,-20(fp)
   36700:	10c00015 	stw	r3,0(r2)
   36704:	e0bff817 	ldw	r2,-32(fp)
   36708:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3670c:	e0bff717 	ldw	r2,-36(fp)
   36710:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   36714:	0005883a 	mov	r2,zero
   36718:	00000306 	br	36728 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   3671c:	00bffa84 	movi	r2,-22
   36720:	00000106 	br	36728 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   36724:	00bfde84 	movi	r2,-134
  }
}
   36728:	e037883a 	mov	sp,fp
   3672c:	df000017 	ldw	fp,0(sp)
   36730:	dec00104 	addi	sp,sp,4
   36734:	f800283a 	ret

00036738 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   36738:	defffe04 	addi	sp,sp,-8
   3673c:	df000115 	stw	fp,4(sp)
   36740:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   36744:	e03fff15 	stw	zero,-4(fp)
   36748:	00000506 	br	36760 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   3674c:	e0bfff17 	ldw	r2,-4(fp)
   36750:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   36754:	e0bfff17 	ldw	r2,-4(fp)
   36758:	10800804 	addi	r2,r2,32
   3675c:	e0bfff15 	stw	r2,-4(fp)
   36760:	e0bfff17 	ldw	r2,-4(fp)
   36764:	10820030 	cmpltui	r2,r2,2048
   36768:	103ff81e 	bne	r2,zero,3674c <_gp+0xffff4c00>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   3676c:	0001883a 	nop
   36770:	e037883a 	mov	sp,fp
   36774:	df000017 	ldw	fp,0(sp)
   36778:	dec00104 	addi	sp,sp,4
   3677c:	f800283a 	ret

00036780 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   36780:	defffe04 	addi	sp,sp,-8
   36784:	dfc00115 	stw	ra,4(sp)
   36788:	df000015 	stw	fp,0(sp)
   3678c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   36790:	d0a00b17 	ldw	r2,-32724(gp)
   36794:	10000326 	beq	r2,zero,367a4 <alt_get_errno+0x24>
   36798:	d0a00b17 	ldw	r2,-32724(gp)
   3679c:	103ee83a 	callr	r2
   367a0:	00000106 	br	367a8 <alt_get_errno+0x28>
   367a4:	d0a70f04 	addi	r2,gp,-25540
}
   367a8:	e037883a 	mov	sp,fp
   367ac:	dfc00117 	ldw	ra,4(sp)
   367b0:	df000017 	ldw	fp,0(sp)
   367b4:	dec00204 	addi	sp,sp,8
   367b8:	f800283a 	ret

000367bc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   367bc:	defffa04 	addi	sp,sp,-24
   367c0:	dfc00515 	stw	ra,20(sp)
   367c4:	df000415 	stw	fp,16(sp)
   367c8:	df000404 	addi	fp,sp,16
   367cc:	e13ffe15 	stw	r4,-8(fp)
   367d0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   367d4:	e0bffe17 	ldw	r2,-8(fp)
   367d8:	10000326 	beq	r2,zero,367e8 <alt_dev_llist_insert+0x2c>
   367dc:	e0bffe17 	ldw	r2,-8(fp)
   367e0:	10800217 	ldw	r2,8(r2)
   367e4:	1000061e 	bne	r2,zero,36800 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   367e8:	00367800 	call	36780 <alt_get_errno>
   367ec:	1007883a 	mov	r3,r2
   367f0:	00800584 	movi	r2,22
   367f4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   367f8:	00bffa84 	movi	r2,-22
   367fc:	00001306 	br	3684c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   36800:	e0bffe17 	ldw	r2,-8(fp)
   36804:	e0ffff17 	ldw	r3,-4(fp)
   36808:	e0fffc15 	stw	r3,-16(fp)
   3680c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   36810:	e0bffd17 	ldw	r2,-12(fp)
   36814:	e0fffc17 	ldw	r3,-16(fp)
   36818:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   3681c:	e0bffc17 	ldw	r2,-16(fp)
   36820:	10c00017 	ldw	r3,0(r2)
   36824:	e0bffd17 	ldw	r2,-12(fp)
   36828:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   3682c:	e0bffc17 	ldw	r2,-16(fp)
   36830:	10800017 	ldw	r2,0(r2)
   36834:	e0fffd17 	ldw	r3,-12(fp)
   36838:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   3683c:	e0bffc17 	ldw	r2,-16(fp)
   36840:	e0fffd17 	ldw	r3,-12(fp)
   36844:	10c00015 	stw	r3,0(r2)

  return 0;  
   36848:	0005883a 	mov	r2,zero
}
   3684c:	e037883a 	mov	sp,fp
   36850:	dfc00117 	ldw	ra,4(sp)
   36854:	df000017 	ldw	fp,0(sp)
   36858:	dec00204 	addi	sp,sp,8
   3685c:	f800283a 	ret

00036860 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   36860:	defffd04 	addi	sp,sp,-12
   36864:	dfc00215 	stw	ra,8(sp)
   36868:	df000115 	stw	fp,4(sp)
   3686c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   36870:	008000f4 	movhi	r2,3
   36874:	109ef604 	addi	r2,r2,31704
   36878:	e0bfff15 	stw	r2,-4(fp)
   3687c:	00000606 	br	36898 <_do_ctors+0x38>
        (*ctor) (); 
   36880:	e0bfff17 	ldw	r2,-4(fp)
   36884:	10800017 	ldw	r2,0(r2)
   36888:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   3688c:	e0bfff17 	ldw	r2,-4(fp)
   36890:	10bfff04 	addi	r2,r2,-4
   36894:	e0bfff15 	stw	r2,-4(fp)
   36898:	e0ffff17 	ldw	r3,-4(fp)
   3689c:	008000f4 	movhi	r2,3
   368a0:	109ef704 	addi	r2,r2,31708
   368a4:	18bff62e 	bgeu	r3,r2,36880 <_gp+0xffff4d34>
        (*ctor) (); 
}
   368a8:	0001883a 	nop
   368ac:	e037883a 	mov	sp,fp
   368b0:	dfc00117 	ldw	ra,4(sp)
   368b4:	df000017 	ldw	fp,0(sp)
   368b8:	dec00204 	addi	sp,sp,8
   368bc:	f800283a 	ret

000368c0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   368c0:	defffd04 	addi	sp,sp,-12
   368c4:	dfc00215 	stw	ra,8(sp)
   368c8:	df000115 	stw	fp,4(sp)
   368cc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   368d0:	008000f4 	movhi	r2,3
   368d4:	109ef604 	addi	r2,r2,31704
   368d8:	e0bfff15 	stw	r2,-4(fp)
   368dc:	00000606 	br	368f8 <_do_dtors+0x38>
        (*dtor) (); 
   368e0:	e0bfff17 	ldw	r2,-4(fp)
   368e4:	10800017 	ldw	r2,0(r2)
   368e8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   368ec:	e0bfff17 	ldw	r2,-4(fp)
   368f0:	10bfff04 	addi	r2,r2,-4
   368f4:	e0bfff15 	stw	r2,-4(fp)
   368f8:	e0ffff17 	ldw	r3,-4(fp)
   368fc:	008000f4 	movhi	r2,3
   36900:	109ef704 	addi	r2,r2,31708
   36904:	18bff62e 	bgeu	r3,r2,368e0 <_gp+0xffff4d94>
        (*dtor) (); 
}
   36908:	0001883a 	nop
   3690c:	e037883a 	mov	sp,fp
   36910:	dfc00117 	ldw	ra,4(sp)
   36914:	df000017 	ldw	fp,0(sp)
   36918:	dec00204 	addi	sp,sp,8
   3691c:	f800283a 	ret

00036920 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   36920:	defffe04 	addi	sp,sp,-8
   36924:	dfc00115 	stw	ra,4(sp)
   36928:	df000015 	stw	fp,0(sp)
   3692c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   36930:	01440004 	movi	r5,4096
   36934:	0009883a 	mov	r4,zero
   36938:	003771c0 	call	3771c <alt_icache_flush>
#endif
}
   3693c:	0001883a 	nop
   36940:	e037883a 	mov	sp,fp
   36944:	dfc00117 	ldw	ra,4(sp)
   36948:	df000017 	ldw	fp,0(sp)
   3694c:	dec00204 	addi	sp,sp,8
   36950:	f800283a 	ret

00036954 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   36954:	defff904 	addi	sp,sp,-28
   36958:	dfc00615 	stw	ra,24(sp)
   3695c:	df000515 	stw	fp,20(sp)
   36960:	df000504 	addi	fp,sp,20
   36964:	e13ffc15 	stw	r4,-16(fp)
   36968:	e17ffd15 	stw	r5,-12(fp)
   3696c:	e1bffe15 	stw	r6,-8(fp)
   36970:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   36974:	e0800217 	ldw	r2,8(fp)
   36978:	d8800015 	stw	r2,0(sp)
   3697c:	e1ffff17 	ldw	r7,-4(fp)
   36980:	e1bffe17 	ldw	r6,-8(fp)
   36984:	e17ffd17 	ldw	r5,-12(fp)
   36988:	e13ffc17 	ldw	r4,-16(fp)
   3698c:	0036b040 	call	36b04 <alt_iic_isr_register>
}  
   36990:	e037883a 	mov	sp,fp
   36994:	dfc00117 	ldw	ra,4(sp)
   36998:	df000017 	ldw	fp,0(sp)
   3699c:	dec00204 	addi	sp,sp,8
   369a0:	f800283a 	ret

000369a4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   369a4:	defff904 	addi	sp,sp,-28
   369a8:	df000615 	stw	fp,24(sp)
   369ac:	df000604 	addi	fp,sp,24
   369b0:	e13ffe15 	stw	r4,-8(fp)
   369b4:	e17fff15 	stw	r5,-4(fp)
   369b8:	e0bfff17 	ldw	r2,-4(fp)
   369bc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   369c0:	0005303a 	rdctl	r2,status
   369c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   369c8:	e0fffb17 	ldw	r3,-20(fp)
   369cc:	00bfff84 	movi	r2,-2
   369d0:	1884703a 	and	r2,r3,r2
   369d4:	1001703a 	wrctl	status,r2
  
  return context;
   369d8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   369dc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   369e0:	00c00044 	movi	r3,1
   369e4:	e0bffa17 	ldw	r2,-24(fp)
   369e8:	1884983a 	sll	r2,r3,r2
   369ec:	1007883a 	mov	r3,r2
   369f0:	d0a72f17 	ldw	r2,-25412(gp)
   369f4:	1884b03a 	or	r2,r3,r2
   369f8:	d0a72f15 	stw	r2,-25412(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   369fc:	d0a72f17 	ldw	r2,-25412(gp)
   36a00:	100170fa 	wrctl	ienable,r2
   36a04:	e0bffc17 	ldw	r2,-16(fp)
   36a08:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   36a0c:	e0bffd17 	ldw	r2,-12(fp)
   36a10:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   36a14:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   36a18:	0001883a 	nop
}
   36a1c:	e037883a 	mov	sp,fp
   36a20:	df000017 	ldw	fp,0(sp)
   36a24:	dec00104 	addi	sp,sp,4
   36a28:	f800283a 	ret

00036a2c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   36a2c:	defff904 	addi	sp,sp,-28
   36a30:	df000615 	stw	fp,24(sp)
   36a34:	df000604 	addi	fp,sp,24
   36a38:	e13ffe15 	stw	r4,-8(fp)
   36a3c:	e17fff15 	stw	r5,-4(fp)
   36a40:	e0bfff17 	ldw	r2,-4(fp)
   36a44:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   36a48:	0005303a 	rdctl	r2,status
   36a4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   36a50:	e0fffb17 	ldw	r3,-20(fp)
   36a54:	00bfff84 	movi	r2,-2
   36a58:	1884703a 	and	r2,r3,r2
   36a5c:	1001703a 	wrctl	status,r2
  
  return context;
   36a60:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   36a64:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   36a68:	00c00044 	movi	r3,1
   36a6c:	e0bffa17 	ldw	r2,-24(fp)
   36a70:	1884983a 	sll	r2,r3,r2
   36a74:	0084303a 	nor	r2,zero,r2
   36a78:	1007883a 	mov	r3,r2
   36a7c:	d0a72f17 	ldw	r2,-25412(gp)
   36a80:	1884703a 	and	r2,r3,r2
   36a84:	d0a72f15 	stw	r2,-25412(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   36a88:	d0a72f17 	ldw	r2,-25412(gp)
   36a8c:	100170fa 	wrctl	ienable,r2
   36a90:	e0bffc17 	ldw	r2,-16(fp)
   36a94:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   36a98:	e0bffd17 	ldw	r2,-12(fp)
   36a9c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   36aa0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   36aa4:	0001883a 	nop
}
   36aa8:	e037883a 	mov	sp,fp
   36aac:	df000017 	ldw	fp,0(sp)
   36ab0:	dec00104 	addi	sp,sp,4
   36ab4:	f800283a 	ret

00036ab8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   36ab8:	defffc04 	addi	sp,sp,-16
   36abc:	df000315 	stw	fp,12(sp)
   36ac0:	df000304 	addi	fp,sp,12
   36ac4:	e13ffe15 	stw	r4,-8(fp)
   36ac8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   36acc:	000530fa 	rdctl	r2,ienable
   36ad0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   36ad4:	00c00044 	movi	r3,1
   36ad8:	e0bfff17 	ldw	r2,-4(fp)
   36adc:	1884983a 	sll	r2,r3,r2
   36ae0:	1007883a 	mov	r3,r2
   36ae4:	e0bffd17 	ldw	r2,-12(fp)
   36ae8:	1884703a 	and	r2,r3,r2
   36aec:	1004c03a 	cmpne	r2,r2,zero
   36af0:	10803fcc 	andi	r2,r2,255
}
   36af4:	e037883a 	mov	sp,fp
   36af8:	df000017 	ldw	fp,0(sp)
   36afc:	dec00104 	addi	sp,sp,4
   36b00:	f800283a 	ret

00036b04 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   36b04:	defff504 	addi	sp,sp,-44
   36b08:	dfc00a15 	stw	ra,40(sp)
   36b0c:	df000915 	stw	fp,36(sp)
   36b10:	df000904 	addi	fp,sp,36
   36b14:	e13ffc15 	stw	r4,-16(fp)
   36b18:	e17ffd15 	stw	r5,-12(fp)
   36b1c:	e1bffe15 	stw	r6,-8(fp)
   36b20:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   36b24:	00bffa84 	movi	r2,-22
   36b28:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   36b2c:	e0bffd17 	ldw	r2,-12(fp)
   36b30:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   36b34:	e0bff817 	ldw	r2,-32(fp)
   36b38:	10800808 	cmpgei	r2,r2,32
   36b3c:	1000271e 	bne	r2,zero,36bdc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   36b40:	0005303a 	rdctl	r2,status
   36b44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   36b48:	e0fffb17 	ldw	r3,-20(fp)
   36b4c:	00bfff84 	movi	r2,-2
   36b50:	1884703a 	and	r2,r3,r2
   36b54:	1001703a 	wrctl	status,r2
  
  return context;
   36b58:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   36b5c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   36b60:	00800134 	movhi	r2,4
   36b64:	10ba9904 	addi	r2,r2,-5532
   36b68:	e0fff817 	ldw	r3,-32(fp)
   36b6c:	180690fa 	slli	r3,r3,3
   36b70:	10c5883a 	add	r2,r2,r3
   36b74:	e0fffe17 	ldw	r3,-8(fp)
   36b78:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   36b7c:	00800134 	movhi	r2,4
   36b80:	10ba9904 	addi	r2,r2,-5532
   36b84:	e0fff817 	ldw	r3,-32(fp)
   36b88:	180690fa 	slli	r3,r3,3
   36b8c:	10c5883a 	add	r2,r2,r3
   36b90:	10800104 	addi	r2,r2,4
   36b94:	e0ffff17 	ldw	r3,-4(fp)
   36b98:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   36b9c:	e0bffe17 	ldw	r2,-8(fp)
   36ba0:	10000526 	beq	r2,zero,36bb8 <alt_iic_isr_register+0xb4>
   36ba4:	e0bff817 	ldw	r2,-32(fp)
   36ba8:	100b883a 	mov	r5,r2
   36bac:	e13ffc17 	ldw	r4,-16(fp)
   36bb0:	00369a40 	call	369a4 <alt_ic_irq_enable>
   36bb4:	00000406 	br	36bc8 <alt_iic_isr_register+0xc4>
   36bb8:	e0bff817 	ldw	r2,-32(fp)
   36bbc:	100b883a 	mov	r5,r2
   36bc0:	e13ffc17 	ldw	r4,-16(fp)
   36bc4:	0036a2c0 	call	36a2c <alt_ic_irq_disable>
   36bc8:	e0bff715 	stw	r2,-36(fp)
   36bcc:	e0bffa17 	ldw	r2,-24(fp)
   36bd0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   36bd4:	e0bff917 	ldw	r2,-28(fp)
   36bd8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   36bdc:	e0bff717 	ldw	r2,-36(fp)
}
   36be0:	e037883a 	mov	sp,fp
   36be4:	dfc00117 	ldw	ra,4(sp)
   36be8:	df000017 	ldw	fp,0(sp)
   36bec:	dec00204 	addi	sp,sp,8
   36bf0:	f800283a 	ret

00036bf4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   36bf4:	defff904 	addi	sp,sp,-28
   36bf8:	dfc00615 	stw	ra,24(sp)
   36bfc:	df000515 	stw	fp,20(sp)
   36c00:	df000504 	addi	fp,sp,20
   36c04:	e13ffc15 	stw	r4,-16(fp)
   36c08:	e17ffd15 	stw	r5,-12(fp)
   36c0c:	e1bffe15 	stw	r6,-8(fp)
   36c10:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   36c14:	e1bfff17 	ldw	r6,-4(fp)
   36c18:	e17ffe17 	ldw	r5,-8(fp)
   36c1c:	e13ffd17 	ldw	r4,-12(fp)
   36c20:	0036e340 	call	36e34 <open>
   36c24:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   36c28:	e0bffb17 	ldw	r2,-20(fp)
   36c2c:	10001c16 	blt	r2,zero,36ca0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   36c30:	00800134 	movhi	r2,4
   36c34:	10a25804 	addi	r2,r2,-30368
   36c38:	e0fffb17 	ldw	r3,-20(fp)
   36c3c:	18c00324 	muli	r3,r3,12
   36c40:	10c5883a 	add	r2,r2,r3
   36c44:	10c00017 	ldw	r3,0(r2)
   36c48:	e0bffc17 	ldw	r2,-16(fp)
   36c4c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   36c50:	00800134 	movhi	r2,4
   36c54:	10a25804 	addi	r2,r2,-30368
   36c58:	e0fffb17 	ldw	r3,-20(fp)
   36c5c:	18c00324 	muli	r3,r3,12
   36c60:	10c5883a 	add	r2,r2,r3
   36c64:	10800104 	addi	r2,r2,4
   36c68:	10c00017 	ldw	r3,0(r2)
   36c6c:	e0bffc17 	ldw	r2,-16(fp)
   36c70:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   36c74:	00800134 	movhi	r2,4
   36c78:	10a25804 	addi	r2,r2,-30368
   36c7c:	e0fffb17 	ldw	r3,-20(fp)
   36c80:	18c00324 	muli	r3,r3,12
   36c84:	10c5883a 	add	r2,r2,r3
   36c88:	10800204 	addi	r2,r2,8
   36c8c:	10c00017 	ldw	r3,0(r2)
   36c90:	e0bffc17 	ldw	r2,-16(fp)
   36c94:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   36c98:	e13ffb17 	ldw	r4,-20(fp)
   36c9c:	002db0c0 	call	2db0c <alt_release_fd>
  }
} 
   36ca0:	0001883a 	nop
   36ca4:	e037883a 	mov	sp,fp
   36ca8:	dfc00117 	ldw	ra,4(sp)
   36cac:	df000017 	ldw	fp,0(sp)
   36cb0:	dec00204 	addi	sp,sp,8
   36cb4:	f800283a 	ret

00036cb8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   36cb8:	defffb04 	addi	sp,sp,-20
   36cbc:	dfc00415 	stw	ra,16(sp)
   36cc0:	df000315 	stw	fp,12(sp)
   36cc4:	df000304 	addi	fp,sp,12
   36cc8:	e13ffd15 	stw	r4,-12(fp)
   36ccc:	e17ffe15 	stw	r5,-8(fp)
   36cd0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   36cd4:	01c07fc4 	movi	r7,511
   36cd8:	01800044 	movi	r6,1
   36cdc:	e17ffd17 	ldw	r5,-12(fp)
   36ce0:	01000134 	movhi	r4,4
   36ce4:	21225b04 	addi	r4,r4,-30356
   36ce8:	0036bf40 	call	36bf4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   36cec:	01c07fc4 	movi	r7,511
   36cf0:	000d883a 	mov	r6,zero
   36cf4:	e17ffe17 	ldw	r5,-8(fp)
   36cf8:	01000134 	movhi	r4,4
   36cfc:	21225804 	addi	r4,r4,-30368
   36d00:	0036bf40 	call	36bf4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   36d04:	01c07fc4 	movi	r7,511
   36d08:	01800044 	movi	r6,1
   36d0c:	e17fff17 	ldw	r5,-4(fp)
   36d10:	01000134 	movhi	r4,4
   36d14:	21225e04 	addi	r4,r4,-30344
   36d18:	0036bf40 	call	36bf4 <alt_open_fd>
}  
   36d1c:	0001883a 	nop
   36d20:	e037883a 	mov	sp,fp
   36d24:	dfc00117 	ldw	ra,4(sp)
   36d28:	df000017 	ldw	fp,0(sp)
   36d2c:	dec00204 	addi	sp,sp,8
   36d30:	f800283a 	ret

00036d34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   36d34:	defffe04 	addi	sp,sp,-8
   36d38:	dfc00115 	stw	ra,4(sp)
   36d3c:	df000015 	stw	fp,0(sp)
   36d40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   36d44:	d0a00b17 	ldw	r2,-32724(gp)
   36d48:	10000326 	beq	r2,zero,36d58 <alt_get_errno+0x24>
   36d4c:	d0a00b17 	ldw	r2,-32724(gp)
   36d50:	103ee83a 	callr	r2
   36d54:	00000106 	br	36d5c <alt_get_errno+0x28>
   36d58:	d0a70f04 	addi	r2,gp,-25540
}
   36d5c:	e037883a 	mov	sp,fp
   36d60:	dfc00117 	ldw	ra,4(sp)
   36d64:	df000017 	ldw	fp,0(sp)
   36d68:	dec00204 	addi	sp,sp,8
   36d6c:	f800283a 	ret

00036d70 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   36d70:	defffd04 	addi	sp,sp,-12
   36d74:	df000215 	stw	fp,8(sp)
   36d78:	df000204 	addi	fp,sp,8
   36d7c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   36d80:	e0bfff17 	ldw	r2,-4(fp)
   36d84:	10800217 	ldw	r2,8(r2)
   36d88:	10d00034 	orhi	r3,r2,16384
   36d8c:	e0bfff17 	ldw	r2,-4(fp)
   36d90:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   36d94:	e03ffe15 	stw	zero,-8(fp)
   36d98:	00001d06 	br	36e10 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   36d9c:	00800134 	movhi	r2,4
   36da0:	10a25804 	addi	r2,r2,-30368
   36da4:	e0fffe17 	ldw	r3,-8(fp)
   36da8:	18c00324 	muli	r3,r3,12
   36dac:	10c5883a 	add	r2,r2,r3
   36db0:	10c00017 	ldw	r3,0(r2)
   36db4:	e0bfff17 	ldw	r2,-4(fp)
   36db8:	10800017 	ldw	r2,0(r2)
   36dbc:	1880111e 	bne	r3,r2,36e04 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   36dc0:	00800134 	movhi	r2,4
   36dc4:	10a25804 	addi	r2,r2,-30368
   36dc8:	e0fffe17 	ldw	r3,-8(fp)
   36dcc:	18c00324 	muli	r3,r3,12
   36dd0:	10c5883a 	add	r2,r2,r3
   36dd4:	10800204 	addi	r2,r2,8
   36dd8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   36ddc:	1000090e 	bge	r2,zero,36e04 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   36de0:	e0bffe17 	ldw	r2,-8(fp)
   36de4:	10c00324 	muli	r3,r2,12
   36de8:	00800134 	movhi	r2,4
   36dec:	10a25804 	addi	r2,r2,-30368
   36df0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   36df4:	e0bfff17 	ldw	r2,-4(fp)
   36df8:	18800226 	beq	r3,r2,36e04 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   36dfc:	00bffcc4 	movi	r2,-13
   36e00:	00000806 	br	36e24 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   36e04:	e0bffe17 	ldw	r2,-8(fp)
   36e08:	10800044 	addi	r2,r2,1
   36e0c:	e0bffe15 	stw	r2,-8(fp)
   36e10:	d0a00a17 	ldw	r2,-32728(gp)
   36e14:	1007883a 	mov	r3,r2
   36e18:	e0bffe17 	ldw	r2,-8(fp)
   36e1c:	18bfdf2e 	bgeu	r3,r2,36d9c <_gp+0xffff5250>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   36e20:	0005883a 	mov	r2,zero
}
   36e24:	e037883a 	mov	sp,fp
   36e28:	df000017 	ldw	fp,0(sp)
   36e2c:	dec00104 	addi	sp,sp,4
   36e30:	f800283a 	ret

00036e34 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   36e34:	defff604 	addi	sp,sp,-40
   36e38:	dfc00915 	stw	ra,36(sp)
   36e3c:	df000815 	stw	fp,32(sp)
   36e40:	df000804 	addi	fp,sp,32
   36e44:	e13ffd15 	stw	r4,-12(fp)
   36e48:	e17ffe15 	stw	r5,-8(fp)
   36e4c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   36e50:	00bfffc4 	movi	r2,-1
   36e54:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   36e58:	00bffb44 	movi	r2,-19
   36e5c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   36e60:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   36e64:	d1600804 	addi	r5,gp,-32736
   36e68:	e13ffd17 	ldw	r4,-12(fp)
   36e6c:	00374a80 	call	374a8 <alt_find_dev>
   36e70:	e0bff815 	stw	r2,-32(fp)
   36e74:	e0bff817 	ldw	r2,-32(fp)
   36e78:	1000051e 	bne	r2,zero,36e90 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   36e7c:	e13ffd17 	ldw	r4,-12(fp)
   36e80:	00375380 	call	37538 <alt_find_file>
   36e84:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   36e88:	00800044 	movi	r2,1
   36e8c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   36e90:	e0bff817 	ldw	r2,-32(fp)
   36e94:	10002926 	beq	r2,zero,36f3c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   36e98:	e13ff817 	ldw	r4,-32(fp)
   36e9c:	00376400 	call	37640 <alt_get_fd>
   36ea0:	e0bff915 	stw	r2,-28(fp)
   36ea4:	e0bff917 	ldw	r2,-28(fp)
   36ea8:	1000030e 	bge	r2,zero,36eb8 <open+0x84>
    {
      status = index;
   36eac:	e0bff917 	ldw	r2,-28(fp)
   36eb0:	e0bffa15 	stw	r2,-24(fp)
   36eb4:	00002306 	br	36f44 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   36eb8:	e0bff917 	ldw	r2,-28(fp)
   36ebc:	10c00324 	muli	r3,r2,12
   36ec0:	00800134 	movhi	r2,4
   36ec4:	10a25804 	addi	r2,r2,-30368
   36ec8:	1885883a 	add	r2,r3,r2
   36ecc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   36ed0:	e0fffe17 	ldw	r3,-8(fp)
   36ed4:	00900034 	movhi	r2,16384
   36ed8:	10bfffc4 	addi	r2,r2,-1
   36edc:	1886703a 	and	r3,r3,r2
   36ee0:	e0bffc17 	ldw	r2,-16(fp)
   36ee4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   36ee8:	e0bffb17 	ldw	r2,-20(fp)
   36eec:	1000051e 	bne	r2,zero,36f04 <open+0xd0>
   36ef0:	e13ffc17 	ldw	r4,-16(fp)
   36ef4:	0036d700 	call	36d70 <alt_file_locked>
   36ef8:	e0bffa15 	stw	r2,-24(fp)
   36efc:	e0bffa17 	ldw	r2,-24(fp)
   36f00:	10001016 	blt	r2,zero,36f44 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   36f04:	e0bff817 	ldw	r2,-32(fp)
   36f08:	10800317 	ldw	r2,12(r2)
   36f0c:	10000826 	beq	r2,zero,36f30 <open+0xfc>
   36f10:	e0bff817 	ldw	r2,-32(fp)
   36f14:	10800317 	ldw	r2,12(r2)
   36f18:	e1ffff17 	ldw	r7,-4(fp)
   36f1c:	e1bffe17 	ldw	r6,-8(fp)
   36f20:	e17ffd17 	ldw	r5,-12(fp)
   36f24:	e13ffc17 	ldw	r4,-16(fp)
   36f28:	103ee83a 	callr	r2
   36f2c:	00000106 	br	36f34 <open+0x100>
   36f30:	0005883a 	mov	r2,zero
   36f34:	e0bffa15 	stw	r2,-24(fp)
   36f38:	00000206 	br	36f44 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   36f3c:	00bffb44 	movi	r2,-19
   36f40:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   36f44:	e0bffa17 	ldw	r2,-24(fp)
   36f48:	1000090e 	bge	r2,zero,36f70 <open+0x13c>
  {
    alt_release_fd (index);  
   36f4c:	e13ff917 	ldw	r4,-28(fp)
   36f50:	002db0c0 	call	2db0c <alt_release_fd>
    ALT_ERRNO = -status;
   36f54:	0036d340 	call	36d34 <alt_get_errno>
   36f58:	1007883a 	mov	r3,r2
   36f5c:	e0bffa17 	ldw	r2,-24(fp)
   36f60:	0085c83a 	sub	r2,zero,r2
   36f64:	18800015 	stw	r2,0(r3)
    return -1;
   36f68:	00bfffc4 	movi	r2,-1
   36f6c:	00000106 	br	36f74 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   36f70:	e0bff917 	ldw	r2,-28(fp)
}
   36f74:	e037883a 	mov	sp,fp
   36f78:	dfc00117 	ldw	ra,4(sp)
   36f7c:	df000017 	ldw	fp,0(sp)
   36f80:	dec00204 	addi	sp,sp,8
   36f84:	f800283a 	ret

00036f88 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   36f88:	defffa04 	addi	sp,sp,-24
   36f8c:	df000515 	stw	fp,20(sp)
   36f90:	df000504 	addi	fp,sp,20
   36f94:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   36f98:	0005303a 	rdctl	r2,status
   36f9c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   36fa0:	e0fffc17 	ldw	r3,-16(fp)
   36fa4:	00bfff84 	movi	r2,-2
   36fa8:	1884703a 	and	r2,r3,r2
   36fac:	1001703a 	wrctl	status,r2
  
  return context;
   36fb0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   36fb4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   36fb8:	e0bfff17 	ldw	r2,-4(fp)
   36fbc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   36fc0:	e0bffd17 	ldw	r2,-12(fp)
   36fc4:	10800017 	ldw	r2,0(r2)
   36fc8:	e0fffd17 	ldw	r3,-12(fp)
   36fcc:	18c00117 	ldw	r3,4(r3)
   36fd0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   36fd4:	e0bffd17 	ldw	r2,-12(fp)
   36fd8:	10800117 	ldw	r2,4(r2)
   36fdc:	e0fffd17 	ldw	r3,-12(fp)
   36fe0:	18c00017 	ldw	r3,0(r3)
   36fe4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   36fe8:	e0bffd17 	ldw	r2,-12(fp)
   36fec:	e0fffd17 	ldw	r3,-12(fp)
   36ff0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   36ff4:	e0bffd17 	ldw	r2,-12(fp)
   36ff8:	e0fffd17 	ldw	r3,-12(fp)
   36ffc:	10c00015 	stw	r3,0(r2)
   37000:	e0bffb17 	ldw	r2,-20(fp)
   37004:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   37008:	e0bffe17 	ldw	r2,-8(fp)
   3700c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   37010:	0001883a 	nop
   37014:	e037883a 	mov	sp,fp
   37018:	df000017 	ldw	fp,0(sp)
   3701c:	dec00104 	addi	sp,sp,4
   37020:	f800283a 	ret

00037024 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   37024:	defffb04 	addi	sp,sp,-20
   37028:	dfc00415 	stw	ra,16(sp)
   3702c:	df000315 	stw	fp,12(sp)
   37030:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   37034:	d0a02d17 	ldw	r2,-32588(gp)
   37038:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   3703c:	d0a73117 	ldw	r2,-25404(gp)
   37040:	10800044 	addi	r2,r2,1
   37044:	d0a73115 	stw	r2,-25404(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   37048:	00002e06 	br	37104 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   3704c:	e0bffd17 	ldw	r2,-12(fp)
   37050:	10800017 	ldw	r2,0(r2)
   37054:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   37058:	e0bffd17 	ldw	r2,-12(fp)
   3705c:	10800403 	ldbu	r2,16(r2)
   37060:	10803fcc 	andi	r2,r2,255
   37064:	10000426 	beq	r2,zero,37078 <alt_tick+0x54>
   37068:	d0a73117 	ldw	r2,-25404(gp)
   3706c:	1000021e 	bne	r2,zero,37078 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   37070:	e0bffd17 	ldw	r2,-12(fp)
   37074:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   37078:	e0bffd17 	ldw	r2,-12(fp)
   3707c:	10800217 	ldw	r2,8(r2)
   37080:	d0e73117 	ldw	r3,-25404(gp)
   37084:	18801d36 	bltu	r3,r2,370fc <alt_tick+0xd8>
   37088:	e0bffd17 	ldw	r2,-12(fp)
   3708c:	10800403 	ldbu	r2,16(r2)
   37090:	10803fcc 	andi	r2,r2,255
   37094:	1000191e 	bne	r2,zero,370fc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   37098:	e0bffd17 	ldw	r2,-12(fp)
   3709c:	10800317 	ldw	r2,12(r2)
   370a0:	e0fffd17 	ldw	r3,-12(fp)
   370a4:	18c00517 	ldw	r3,20(r3)
   370a8:	1809883a 	mov	r4,r3
   370ac:	103ee83a 	callr	r2
   370b0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   370b4:	e0bfff17 	ldw	r2,-4(fp)
   370b8:	1000031e 	bne	r2,zero,370c8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   370bc:	e13ffd17 	ldw	r4,-12(fp)
   370c0:	0036f880 	call	36f88 <alt_alarm_stop>
   370c4:	00000d06 	br	370fc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   370c8:	e0bffd17 	ldw	r2,-12(fp)
   370cc:	10c00217 	ldw	r3,8(r2)
   370d0:	e0bfff17 	ldw	r2,-4(fp)
   370d4:	1887883a 	add	r3,r3,r2
   370d8:	e0bffd17 	ldw	r2,-12(fp)
   370dc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   370e0:	e0bffd17 	ldw	r2,-12(fp)
   370e4:	10c00217 	ldw	r3,8(r2)
   370e8:	d0a73117 	ldw	r2,-25404(gp)
   370ec:	1880032e 	bgeu	r3,r2,370fc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   370f0:	e0bffd17 	ldw	r2,-12(fp)
   370f4:	00c00044 	movi	r3,1
   370f8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   370fc:	e0bffe17 	ldw	r2,-8(fp)
   37100:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   37104:	e0fffd17 	ldw	r3,-12(fp)
   37108:	d0a02d04 	addi	r2,gp,-32588
   3710c:	18bfcf1e 	bne	r3,r2,3704c <_gp+0xffff5500>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   37110:	002ecf80 	call	2ecf8 <OSTimeTick>
}
   37114:	0001883a 	nop
   37118:	e037883a 	mov	sp,fp
   3711c:	dfc00117 	ldw	ra,4(sp)
   37120:	df000017 	ldw	fp,0(sp)
   37124:	dec00204 	addi	sp,sp,8
   37128:	f800283a 	ret

0003712c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   3712c:	deffff04 	addi	sp,sp,-4
   37130:	df000015 	stw	fp,0(sp)
   37134:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   37138:	000170fa 	wrctl	ienable,zero
}
   3713c:	0001883a 	nop
   37140:	e037883a 	mov	sp,fp
   37144:	df000017 	ldw	fp,0(sp)
   37148:	dec00104 	addi	sp,sp,4
   3714c:	f800283a 	ret

00037150 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   37150:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   37154:	d0e00317 	ldw	r3,-32756(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   37158:	d1272a17 	ldw	r4,-25432(gp)

      stw ra,  0(sp)
   3715c:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   37160:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   37164:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   37168:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   3716c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   37170:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   37174:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   37178:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   3717c:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   37180:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   37184:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   37188:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   3718c:	00373c40 	call	373c4 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   37190:	d1272517 	ldw	r4,-25452(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   37194:	d1671d07 	ldb	r5,-25484(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   37198:	d1272a15 	stw	r4,-25432(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   3719c:	d1671d45 	stb	r5,-25483(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   371a0:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   371a4:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   371a8:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   371ac:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   371b0:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   371b4:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   371b8:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   371bc:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   371c0:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   371c4:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   371c8:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   371cc:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   371d0:	d0e00315 	stw	r3,-32756(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   371d4:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   371d8:	f800283a 	ret

000371dc <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   371dc:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   371e0:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   371e4:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   371e8:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   371ec:	00373c40 	call	373c4 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   371f0:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   371f4:	d4a71b45 	stb	r18,-25491(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   371f8:	003fe506 	br	37190 <_gp+0xffff5644>

000371fc <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   371fc:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   37200:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   37204:	10800054 	ori	r2,r2,1
      wrctl status, r2
   37208:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   3720c:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   37210:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   37214:	dec00204 	addi	sp,sp,8

      callr r2
   37218:	103ee83a 	callr	r2

      nop
   3721c:	0001883a 	nop

00037220 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   37220:	defff704 	addi	sp,sp,-36
   37224:	dfc00815 	stw	ra,32(sp)
   37228:	df000715 	stw	fp,28(sp)
   3722c:	df000704 	addi	fp,sp,28
   37230:	e13ffc15 	stw	r4,-16(fp)
   37234:	e17ffd15 	stw	r5,-12(fp)
   37238:	e1bffe15 	stw	r6,-8(fp)
   3723c:	3805883a 	mov	r2,r7
   37240:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   37244:	e0fffe17 	ldw	r3,-8(fp)
   37248:	00bfff04 	movi	r2,-4
   3724c:	1884703a 	and	r2,r3,r2
   37250:	10bef704 	addi	r2,r2,-1060
   37254:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   37258:	01810904 	movi	r6,1060
   3725c:	000b883a 	mov	r5,zero
   37260:	e13ff917 	ldw	r4,-28(fp)
   37264:	00211640 	call	21164 <memset>
   37268:	e0bff917 	ldw	r2,-28(fp)
   3726c:	10c0bb04 	addi	r3,r2,748
   37270:	e0bff917 	ldw	r2,-28(fp)
   37274:	10c00115 	stw	r3,4(r2)
   37278:	e0bff917 	ldw	r2,-28(fp)
   3727c:	10c0d504 	addi	r3,r2,852
   37280:	e0bff917 	ldw	r2,-28(fp)
   37284:	10c00215 	stw	r3,8(r2)
   37288:	e0bff917 	ldw	r2,-28(fp)
   3728c:	10c0ef04 	addi	r3,r2,956
   37290:	e0bff917 	ldw	r2,-28(fp)
   37294:	10c00315 	stw	r3,12(r2)
   37298:	e0fff917 	ldw	r3,-28(fp)
   3729c:	00800134 	movhi	r2,4
   372a0:	10a02404 	addi	r2,r2,-32624
   372a4:	18800d15 	stw	r2,52(r3)
   372a8:	e0bff917 	ldw	r2,-28(fp)
   372ac:	00c00044 	movi	r3,1
   372b0:	10c02915 	stw	r3,164(r2)
   372b4:	10002a15 	stw	zero,168(r2)
   372b8:	e0bff917 	ldw	r2,-28(fp)
   372bc:	00ccc384 	movi	r3,13070
   372c0:	10c02b0d 	sth	r3,172(r2)
   372c4:	e0bff917 	ldw	r2,-28(fp)
   372c8:	00eaf344 	movi	r3,-21555
   372cc:	10c02b8d 	sth	r3,174(r2)
   372d0:	e0bff917 	ldw	r2,-28(fp)
   372d4:	00c48d04 	movi	r3,4660
   372d8:	10c02c0d 	sth	r3,176(r2)
   372dc:	e0bff917 	ldw	r2,-28(fp)
   372e0:	00f99b44 	movi	r3,-6547
   372e4:	10c02c8d 	sth	r3,178(r2)
   372e8:	e0bff917 	ldw	r2,-28(fp)
   372ec:	00f7bb04 	movi	r3,-8468
   372f0:	10c02d0d 	sth	r3,180(r2)
   372f4:	e0bff917 	ldw	r2,-28(fp)
   372f8:	00c00144 	movi	r3,5
   372fc:	10c02d8d 	sth	r3,182(r2)
   37300:	e0bff917 	ldw	r2,-28(fp)
   37304:	00c002c4 	movi	r3,11
   37308:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   3730c:	e0bff917 	ldw	r2,-28(fp)
   37310:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   37314:	e0bffa17 	ldw	r2,-24(fp)
   37318:	10bff304 	addi	r2,r2,-52
   3731c:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   37320:	e0bffb17 	ldw	r2,-20(fp)
   37324:	10800c04 	addi	r2,r2,48
   37328:	e0fffc17 	ldw	r3,-16(fp)
   3732c:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   37330:	e0bffb17 	ldw	r2,-20(fp)
   37334:	10800b04 	addi	r2,r2,44
   37338:	e0fffd17 	ldw	r3,-12(fp)
   3733c:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   37340:	e0bffb17 	ldw	r2,-20(fp)
   37344:	10800a04 	addi	r2,r2,40
   37348:	e0fff917 	ldw	r3,-28(fp)
   3734c:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   37350:	008000f4 	movhi	r2,3
   37354:	109c7f04 	addi	r2,r2,29180
   37358:	10c00104 	addi	r3,r2,4
   3735c:	e0bffb17 	ldw	r2,-20(fp)
   37360:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   37364:	e0bffb17 	ldw	r2,-20(fp)
}
   37368:	e037883a 	mov	sp,fp
   3736c:	dfc00117 	ldw	ra,4(sp)
   37370:	df000017 	ldw	fp,0(sp)
   37374:	dec00204 	addi	sp,sp,8
   37378:	f800283a 	ret

0003737c <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   3737c:	defffe04 	addi	sp,sp,-8
   37380:	df000115 	stw	fp,4(sp)
   37384:	df000104 	addi	fp,sp,4
   37388:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   3738c:	0001883a 	nop
   37390:	e037883a 	mov	sp,fp
   37394:	df000017 	ldw	fp,0(sp)
   37398:	dec00104 	addi	sp,sp,4
   3739c:	f800283a 	ret

000373a0 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   373a0:	defffe04 	addi	sp,sp,-8
   373a4:	df000115 	stw	fp,4(sp)
   373a8:	df000104 	addi	fp,sp,4
   373ac:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   373b0:	0001883a 	nop
   373b4:	e037883a 	mov	sp,fp
   373b8:	df000017 	ldw	fp,0(sp)
   373bc:	dec00104 	addi	sp,sp,4
   373c0:	f800283a 	ret

000373c4 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   373c4:	deffff04 	addi	sp,sp,-4
   373c8:	df000015 	stw	fp,0(sp)
   373cc:	d839883a 	mov	fp,sp
}
   373d0:	0001883a 	nop
   373d4:	e037883a 	mov	sp,fp
   373d8:	df000017 	ldw	fp,0(sp)
   373dc:	dec00104 	addi	sp,sp,4
   373e0:	f800283a 	ret

000373e4 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   373e4:	deffff04 	addi	sp,sp,-4
   373e8:	df000015 	stw	fp,0(sp)
   373ec:	d839883a 	mov	fp,sp
}
   373f0:	0001883a 	nop
   373f4:	e037883a 	mov	sp,fp
   373f8:	df000017 	ldw	fp,0(sp)
   373fc:	dec00104 	addi	sp,sp,4
   37400:	f800283a 	ret

00037404 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   37404:	deffff04 	addi	sp,sp,-4
   37408:	df000015 	stw	fp,0(sp)
   3740c:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   37410:	0001883a 	nop
   37414:	e037883a 	mov	sp,fp
   37418:	df000017 	ldw	fp,0(sp)
   3741c:	dec00104 	addi	sp,sp,4
   37420:	f800283a 	ret

00037424 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   37424:	deffff04 	addi	sp,sp,-4
   37428:	df000015 	stw	fp,0(sp)
   3742c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   37430:	0001883a 	nop
   37434:	e037883a 	mov	sp,fp
   37438:	df000017 	ldw	fp,0(sp)
   3743c:	dec00104 	addi	sp,sp,4
   37440:	f800283a 	ret

00037444 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   37444:	deffff04 	addi	sp,sp,-4
   37448:	df000015 	stw	fp,0(sp)
   3744c:	d839883a 	mov	fp,sp
}
   37450:	0001883a 	nop
   37454:	e037883a 	mov	sp,fp
   37458:	df000017 	ldw	fp,0(sp)
   3745c:	dec00104 	addi	sp,sp,4
   37460:	f800283a 	ret

00037464 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   37464:	deffff04 	addi	sp,sp,-4
   37468:	df000015 	stw	fp,0(sp)
   3746c:	d839883a 	mov	fp,sp
}
   37470:	0001883a 	nop
   37474:	e037883a 	mov	sp,fp
   37478:	df000017 	ldw	fp,0(sp)
   3747c:	dec00104 	addi	sp,sp,4
   37480:	f800283a 	ret

00037484 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   37484:	defffe04 	addi	sp,sp,-8
   37488:	df000115 	stw	fp,4(sp)
   3748c:	df000104 	addi	fp,sp,4
   37490:	e13fff15 	stw	r4,-4(fp)
}
   37494:	0001883a 	nop
   37498:	e037883a 	mov	sp,fp
   3749c:	df000017 	ldw	fp,0(sp)
   374a0:	dec00104 	addi	sp,sp,4
   374a4:	f800283a 	ret

000374a8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   374a8:	defffa04 	addi	sp,sp,-24
   374ac:	dfc00515 	stw	ra,20(sp)
   374b0:	df000415 	stw	fp,16(sp)
   374b4:	df000404 	addi	fp,sp,16
   374b8:	e13ffe15 	stw	r4,-8(fp)
   374bc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   374c0:	e0bfff17 	ldw	r2,-4(fp)
   374c4:	10800017 	ldw	r2,0(r2)
   374c8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   374cc:	e13ffe17 	ldw	r4,-8(fp)
   374d0:	00219bc0 	call	219bc <strlen>
   374d4:	10800044 	addi	r2,r2,1
   374d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   374dc:	00000d06 	br	37514 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   374e0:	e0bffc17 	ldw	r2,-16(fp)
   374e4:	10800217 	ldw	r2,8(r2)
   374e8:	e0fffd17 	ldw	r3,-12(fp)
   374ec:	180d883a 	mov	r6,r3
   374f0:	e17ffe17 	ldw	r5,-8(fp)
   374f4:	1009883a 	mov	r4,r2
   374f8:	00378940 	call	37894 <memcmp>
   374fc:	1000021e 	bne	r2,zero,37508 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   37500:	e0bffc17 	ldw	r2,-16(fp)
   37504:	00000706 	br	37524 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   37508:	e0bffc17 	ldw	r2,-16(fp)
   3750c:	10800017 	ldw	r2,0(r2)
   37510:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   37514:	e0fffc17 	ldw	r3,-16(fp)
   37518:	e0bfff17 	ldw	r2,-4(fp)
   3751c:	18bff01e 	bne	r3,r2,374e0 <_gp+0xffff5994>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   37520:	0005883a 	mov	r2,zero
}
   37524:	e037883a 	mov	sp,fp
   37528:	dfc00117 	ldw	ra,4(sp)
   3752c:	df000017 	ldw	fp,0(sp)
   37530:	dec00204 	addi	sp,sp,8
   37534:	f800283a 	ret

00037538 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   37538:	defffb04 	addi	sp,sp,-20
   3753c:	dfc00415 	stw	ra,16(sp)
   37540:	df000315 	stw	fp,12(sp)
   37544:	df000304 	addi	fp,sp,12
   37548:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   3754c:	d0a00617 	ldw	r2,-32744(gp)
   37550:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   37554:	00003106 	br	3761c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   37558:	e0bffd17 	ldw	r2,-12(fp)
   3755c:	10800217 	ldw	r2,8(r2)
   37560:	1009883a 	mov	r4,r2
   37564:	00219bc0 	call	219bc <strlen>
   37568:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   3756c:	e0bffd17 	ldw	r2,-12(fp)
   37570:	10c00217 	ldw	r3,8(r2)
   37574:	e0bffe17 	ldw	r2,-8(fp)
   37578:	10bfffc4 	addi	r2,r2,-1
   3757c:	1885883a 	add	r2,r3,r2
   37580:	10800003 	ldbu	r2,0(r2)
   37584:	10803fcc 	andi	r2,r2,255
   37588:	1080201c 	xori	r2,r2,128
   3758c:	10bfe004 	addi	r2,r2,-128
   37590:	10800bd8 	cmpnei	r2,r2,47
   37594:	1000031e 	bne	r2,zero,375a4 <alt_find_file+0x6c>
    {
      len -= 1;
   37598:	e0bffe17 	ldw	r2,-8(fp)
   3759c:	10bfffc4 	addi	r2,r2,-1
   375a0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   375a4:	e0bffe17 	ldw	r2,-8(fp)
   375a8:	e0ffff17 	ldw	r3,-4(fp)
   375ac:	1885883a 	add	r2,r3,r2
   375b0:	10800003 	ldbu	r2,0(r2)
   375b4:	10803fcc 	andi	r2,r2,255
   375b8:	1080201c 	xori	r2,r2,128
   375bc:	10bfe004 	addi	r2,r2,-128
   375c0:	10800be0 	cmpeqi	r2,r2,47
   375c4:	1000081e 	bne	r2,zero,375e8 <alt_find_file+0xb0>
   375c8:	e0bffe17 	ldw	r2,-8(fp)
   375cc:	e0ffff17 	ldw	r3,-4(fp)
   375d0:	1885883a 	add	r2,r3,r2
   375d4:	10800003 	ldbu	r2,0(r2)
   375d8:	10803fcc 	andi	r2,r2,255
   375dc:	1080201c 	xori	r2,r2,128
   375e0:	10bfe004 	addi	r2,r2,-128
   375e4:	10000a1e 	bne	r2,zero,37610 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   375e8:	e0bffd17 	ldw	r2,-12(fp)
   375ec:	10800217 	ldw	r2,8(r2)
   375f0:	e0fffe17 	ldw	r3,-8(fp)
   375f4:	180d883a 	mov	r6,r3
   375f8:	e17fff17 	ldw	r5,-4(fp)
   375fc:	1009883a 	mov	r4,r2
   37600:	00378940 	call	37894 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   37604:	1000021e 	bne	r2,zero,37610 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   37608:	e0bffd17 	ldw	r2,-12(fp)
   3760c:	00000706 	br	3762c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   37610:	e0bffd17 	ldw	r2,-12(fp)
   37614:	10800017 	ldw	r2,0(r2)
   37618:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   3761c:	e0fffd17 	ldw	r3,-12(fp)
   37620:	d0a00604 	addi	r2,gp,-32744
   37624:	18bfcc1e 	bne	r3,r2,37558 <_gp+0xffff5a0c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   37628:	0005883a 	mov	r2,zero
}
   3762c:	e037883a 	mov	sp,fp
   37630:	dfc00117 	ldw	ra,4(sp)
   37634:	df000017 	ldw	fp,0(sp)
   37638:	dec00204 	addi	sp,sp,8
   3763c:	f800283a 	ret

00037640 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   37640:	defff904 	addi	sp,sp,-28
   37644:	dfc00615 	stw	ra,24(sp)
   37648:	df000515 	stw	fp,20(sp)
   3764c:	df000504 	addi	fp,sp,20
   37650:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   37654:	00bffa04 	movi	r2,-24
   37658:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   3765c:	d0a71317 	ldw	r2,-25524(gp)
   37660:	e0bffd15 	stw	r2,-12(fp)
   37664:	e03ffe0d 	sth	zero,-8(fp)
   37668:	e0bffe0b 	ldhu	r2,-8(fp)
   3766c:	e0fffe84 	addi	r3,fp,-6
   37670:	180d883a 	mov	r6,r3
   37674:	100b883a 	mov	r5,r2
   37678:	e13ffd17 	ldw	r4,-12(fp)
   3767c:	003353c0 	call	3353c <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   37680:	e03ffb15 	stw	zero,-20(fp)
   37684:	00001906 	br	376ec <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   37688:	00800134 	movhi	r2,4
   3768c:	10a25804 	addi	r2,r2,-30368
   37690:	e0fffb17 	ldw	r3,-20(fp)
   37694:	18c00324 	muli	r3,r3,12
   37698:	10c5883a 	add	r2,r2,r3
   3769c:	10800017 	ldw	r2,0(r2)
   376a0:	10000f1e 	bne	r2,zero,376e0 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   376a4:	00800134 	movhi	r2,4
   376a8:	10a25804 	addi	r2,r2,-30368
   376ac:	e0fffb17 	ldw	r3,-20(fp)
   376b0:	18c00324 	muli	r3,r3,12
   376b4:	10c5883a 	add	r2,r2,r3
   376b8:	e0ffff17 	ldw	r3,-4(fp)
   376bc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   376c0:	d0e00a17 	ldw	r3,-32728(gp)
   376c4:	e0bffb17 	ldw	r2,-20(fp)
   376c8:	1880020e 	bge	r3,r2,376d4 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   376cc:	e0bffb17 	ldw	r2,-20(fp)
   376d0:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   376d4:	e0bffb17 	ldw	r2,-20(fp)
   376d8:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   376dc:	00000606 	br	376f8 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   376e0:	e0bffb17 	ldw	r2,-20(fp)
   376e4:	10800044 	addi	r2,r2,1
   376e8:	e0bffb15 	stw	r2,-20(fp)
   376ec:	e0bffb17 	ldw	r2,-20(fp)
   376f0:	10800810 	cmplti	r2,r2,32
   376f4:	103fe41e 	bne	r2,zero,37688 <_gp+0xffff5b3c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   376f8:	d0a71317 	ldw	r2,-25524(gp)
   376fc:	1009883a 	mov	r4,r2
   37700:	00338b40 	call	338b4 <OSSemPost>

  return rc;
   37704:	e0bffc17 	ldw	r2,-16(fp)
}
   37708:	e037883a 	mov	sp,fp
   3770c:	dfc00117 	ldw	ra,4(sp)
   37710:	df000017 	ldw	fp,0(sp)
   37714:	dec00204 	addi	sp,sp,8
   37718:	f800283a 	ret

0003771c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   3771c:	defffb04 	addi	sp,sp,-20
   37720:	df000415 	stw	fp,16(sp)
   37724:	df000404 	addi	fp,sp,16
   37728:	e13ffe15 	stw	r4,-8(fp)
   3772c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   37730:	e0bfff17 	ldw	r2,-4(fp)
   37734:	10840070 	cmpltui	r2,r2,4097
   37738:	1000021e 	bne	r2,zero,37744 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   3773c:	00840004 	movi	r2,4096
   37740:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   37744:	e0fffe17 	ldw	r3,-8(fp)
   37748:	e0bfff17 	ldw	r2,-4(fp)
   3774c:	1885883a 	add	r2,r3,r2
   37750:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   37754:	e0bffe17 	ldw	r2,-8(fp)
   37758:	e0bffc15 	stw	r2,-16(fp)
   3775c:	00000506 	br	37774 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   37760:	e0bffc17 	ldw	r2,-16(fp)
   37764:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   37768:	e0bffc17 	ldw	r2,-16(fp)
   3776c:	10800804 	addi	r2,r2,32
   37770:	e0bffc15 	stw	r2,-16(fp)
   37774:	e0fffc17 	ldw	r3,-16(fp)
   37778:	e0bffd17 	ldw	r2,-12(fp)
   3777c:	18bff836 	bltu	r3,r2,37760 <_gp+0xffff5c14>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   37780:	e0bffe17 	ldw	r2,-8(fp)
   37784:	108007cc 	andi	r2,r2,31
   37788:	10000226 	beq	r2,zero,37794 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   3778c:	e0bffc17 	ldw	r2,-16(fp)
   37790:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   37794:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   37798:	0001883a 	nop
   3779c:	e037883a 	mov	sp,fp
   377a0:	df000017 	ldw	fp,0(sp)
   377a4:	dec00104 	addi	sp,sp,4
   377a8:	f800283a 	ret

000377ac <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   377ac:	defffe04 	addi	sp,sp,-8
   377b0:	df000115 	stw	fp,4(sp)
   377b4:	df000104 	addi	fp,sp,4
   377b8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   377bc:	e0bfff17 	ldw	r2,-4(fp)
   377c0:	10bffe84 	addi	r2,r2,-6
   377c4:	10c00428 	cmpgeui	r3,r2,16
   377c8:	18001a1e 	bne	r3,zero,37834 <alt_exception_cause_generated_bad_addr+0x88>
   377cc:	100690ba 	slli	r3,r2,2
   377d0:	008000f4 	movhi	r2,3
   377d4:	109df904 	addi	r2,r2,30692
   377d8:	1885883a 	add	r2,r3,r2
   377dc:	10800017 	ldw	r2,0(r2)
   377e0:	1000683a 	jmp	r2
   377e4:	00037824 	muli	zero,zero,3552
   377e8:	00037824 	muli	zero,zero,3552
   377ec:	00037834 	movhi	zero,3552
   377f0:	00037834 	movhi	zero,3552
   377f4:	00037834 	movhi	zero,3552
   377f8:	00037824 	muli	zero,zero,3552
   377fc:	0003782c 	andhi	zero,zero,3552
   37800:	00037834 	movhi	zero,3552
   37804:	00037824 	muli	zero,zero,3552
   37808:	00037824 	muli	zero,zero,3552
   3780c:	00037834 	movhi	zero,3552
   37810:	00037824 	muli	zero,zero,3552
   37814:	0003782c 	andhi	zero,zero,3552
   37818:	00037834 	movhi	zero,3552
   3781c:	00037834 	movhi	zero,3552
   37820:	00037824 	muli	zero,zero,3552
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   37824:	00800044 	movi	r2,1
   37828:	00000306 	br	37838 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   3782c:	0005883a 	mov	r2,zero
   37830:	00000106 	br	37838 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   37834:	0005883a 	mov	r2,zero
  }
}
   37838:	e037883a 	mov	sp,fp
   3783c:	df000017 	ldw	fp,0(sp)
   37840:	dec00104 	addi	sp,sp,4
   37844:	f800283a 	ret

00037848 <atexit>:
   37848:	200b883a 	mov	r5,r4
   3784c:	000f883a 	mov	r7,zero
   37850:	000d883a 	mov	r6,zero
   37854:	0009883a 	mov	r4,zero
   37858:	00379101 	jmpi	37910 <__register_exitproc>

0003785c <exit>:
   3785c:	defffe04 	addi	sp,sp,-8
   37860:	000b883a 	mov	r5,zero
   37864:	dc000015 	stw	r16,0(sp)
   37868:	dfc00115 	stw	ra,4(sp)
   3786c:	2021883a 	mov	r16,r4
   37870:	0037a280 	call	37a28 <__call_exitprocs>
   37874:	00800134 	movhi	r2,4
   37878:	10a6d504 	addi	r2,r2,-25772
   3787c:	11000017 	ldw	r4,0(r2)
   37880:	20800f17 	ldw	r2,60(r4)
   37884:	10000126 	beq	r2,zero,3788c <exit+0x30>
   37888:	103ee83a 	callr	r2
   3788c:	8009883a 	mov	r4,r16
   37890:	0037ba80 	call	37ba8 <_exit>

00037894 <memcmp>:
   37894:	01c000c4 	movi	r7,3
   37898:	3980192e 	bgeu	r7,r6,37900 <memcmp+0x6c>
   3789c:	2144b03a 	or	r2,r4,r5
   378a0:	11c4703a 	and	r2,r2,r7
   378a4:	10000f26 	beq	r2,zero,378e4 <memcmp+0x50>
   378a8:	20800003 	ldbu	r2,0(r4)
   378ac:	28c00003 	ldbu	r3,0(r5)
   378b0:	10c0151e 	bne	r2,r3,37908 <memcmp+0x74>
   378b4:	31bfff84 	addi	r6,r6,-2
   378b8:	01ffffc4 	movi	r7,-1
   378bc:	00000406 	br	378d0 <memcmp+0x3c>
   378c0:	20800003 	ldbu	r2,0(r4)
   378c4:	28c00003 	ldbu	r3,0(r5)
   378c8:	31bfffc4 	addi	r6,r6,-1
   378cc:	10c00e1e 	bne	r2,r3,37908 <memcmp+0x74>
   378d0:	21000044 	addi	r4,r4,1
   378d4:	29400044 	addi	r5,r5,1
   378d8:	31fff91e 	bne	r6,r7,378c0 <_gp+0xffff5d74>
   378dc:	0005883a 	mov	r2,zero
   378e0:	f800283a 	ret
   378e4:	20c00017 	ldw	r3,0(r4)
   378e8:	28800017 	ldw	r2,0(r5)
   378ec:	18bfee1e 	bne	r3,r2,378a8 <_gp+0xffff5d5c>
   378f0:	31bfff04 	addi	r6,r6,-4
   378f4:	21000104 	addi	r4,r4,4
   378f8:	29400104 	addi	r5,r5,4
   378fc:	39bff936 	bltu	r7,r6,378e4 <_gp+0xffff5d98>
   37900:	303fe91e 	bne	r6,zero,378a8 <_gp+0xffff5d5c>
   37904:	003ff506 	br	378dc <_gp+0xffff5d90>
   37908:	10c5c83a 	sub	r2,r2,r3
   3790c:	f800283a 	ret

00037910 <__register_exitproc>:
   37910:	defffa04 	addi	sp,sp,-24
   37914:	dc000315 	stw	r16,12(sp)
   37918:	04000134 	movhi	r16,4
   3791c:	8426d504 	addi	r16,r16,-25772
   37920:	80c00017 	ldw	r3,0(r16)
   37924:	dc400415 	stw	r17,16(sp)
   37928:	dfc00515 	stw	ra,20(sp)
   3792c:	18805217 	ldw	r2,328(r3)
   37930:	2023883a 	mov	r17,r4
   37934:	10003726 	beq	r2,zero,37a14 <__register_exitproc+0x104>
   37938:	10c00117 	ldw	r3,4(r2)
   3793c:	010007c4 	movi	r4,31
   37940:	20c00e16 	blt	r4,r3,3797c <__register_exitproc+0x6c>
   37944:	1a000044 	addi	r8,r3,1
   37948:	8800221e 	bne	r17,zero,379d4 <__register_exitproc+0xc4>
   3794c:	18c00084 	addi	r3,r3,2
   37950:	18c7883a 	add	r3,r3,r3
   37954:	18c7883a 	add	r3,r3,r3
   37958:	12000115 	stw	r8,4(r2)
   3795c:	10c7883a 	add	r3,r2,r3
   37960:	19400015 	stw	r5,0(r3)
   37964:	0005883a 	mov	r2,zero
   37968:	dfc00517 	ldw	ra,20(sp)
   3796c:	dc400417 	ldw	r17,16(sp)
   37970:	dc000317 	ldw	r16,12(sp)
   37974:	dec00604 	addi	sp,sp,24
   37978:	f800283a 	ret
   3797c:	008000b4 	movhi	r2,2
   37980:	10824c04 	addi	r2,r2,2352
   37984:	10002626 	beq	r2,zero,37a20 <__register_exitproc+0x110>
   37988:	01006404 	movi	r4,400
   3798c:	d9400015 	stw	r5,0(sp)
   37990:	d9800115 	stw	r6,4(sp)
   37994:	d9c00215 	stw	r7,8(sp)
   37998:	00209300 	call	20930 <malloc>
   3799c:	d9400017 	ldw	r5,0(sp)
   379a0:	d9800117 	ldw	r6,4(sp)
   379a4:	d9c00217 	ldw	r7,8(sp)
   379a8:	10001d26 	beq	r2,zero,37a20 <__register_exitproc+0x110>
   379ac:	81000017 	ldw	r4,0(r16)
   379b0:	10000115 	stw	zero,4(r2)
   379b4:	02000044 	movi	r8,1
   379b8:	22405217 	ldw	r9,328(r4)
   379bc:	0007883a 	mov	r3,zero
   379c0:	12400015 	stw	r9,0(r2)
   379c4:	20805215 	stw	r2,328(r4)
   379c8:	10006215 	stw	zero,392(r2)
   379cc:	10006315 	stw	zero,396(r2)
   379d0:	883fde26 	beq	r17,zero,3794c <_gp+0xffff5e00>
   379d4:	18c9883a 	add	r4,r3,r3
   379d8:	2109883a 	add	r4,r4,r4
   379dc:	1109883a 	add	r4,r2,r4
   379e0:	21802215 	stw	r6,136(r4)
   379e4:	01800044 	movi	r6,1
   379e8:	12406217 	ldw	r9,392(r2)
   379ec:	30cc983a 	sll	r6,r6,r3
   379f0:	4992b03a 	or	r9,r9,r6
   379f4:	12406215 	stw	r9,392(r2)
   379f8:	21c04215 	stw	r7,264(r4)
   379fc:	01000084 	movi	r4,2
   37a00:	893fd21e 	bne	r17,r4,3794c <_gp+0xffff5e00>
   37a04:	11006317 	ldw	r4,396(r2)
   37a08:	218cb03a 	or	r6,r4,r6
   37a0c:	11806315 	stw	r6,396(r2)
   37a10:	003fce06 	br	3794c <_gp+0xffff5e00>
   37a14:	18805304 	addi	r2,r3,332
   37a18:	18805215 	stw	r2,328(r3)
   37a1c:	003fc606 	br	37938 <_gp+0xffff5dec>
   37a20:	00bfffc4 	movi	r2,-1
   37a24:	003fd006 	br	37968 <_gp+0xffff5e1c>

00037a28 <__call_exitprocs>:
   37a28:	defff504 	addi	sp,sp,-44
   37a2c:	df000915 	stw	fp,36(sp)
   37a30:	dd400615 	stw	r21,24(sp)
   37a34:	dc800315 	stw	r18,12(sp)
   37a38:	dfc00a15 	stw	ra,40(sp)
   37a3c:	ddc00815 	stw	r23,32(sp)
   37a40:	dd800715 	stw	r22,28(sp)
   37a44:	dd000515 	stw	r20,20(sp)
   37a48:	dcc00415 	stw	r19,16(sp)
   37a4c:	dc400215 	stw	r17,8(sp)
   37a50:	dc000115 	stw	r16,4(sp)
   37a54:	d9000015 	stw	r4,0(sp)
   37a58:	2839883a 	mov	fp,r5
   37a5c:	04800044 	movi	r18,1
   37a60:	057fffc4 	movi	r21,-1
   37a64:	00800134 	movhi	r2,4
   37a68:	10a6d504 	addi	r2,r2,-25772
   37a6c:	12000017 	ldw	r8,0(r2)
   37a70:	45005217 	ldw	r20,328(r8)
   37a74:	44c05204 	addi	r19,r8,328
   37a78:	a0001c26 	beq	r20,zero,37aec <__call_exitprocs+0xc4>
   37a7c:	a0800117 	ldw	r2,4(r20)
   37a80:	15ffffc4 	addi	r23,r2,-1
   37a84:	b8000d16 	blt	r23,zero,37abc <__call_exitprocs+0x94>
   37a88:	14000044 	addi	r16,r2,1
   37a8c:	8421883a 	add	r16,r16,r16
   37a90:	8421883a 	add	r16,r16,r16
   37a94:	84402004 	addi	r17,r16,128
   37a98:	a463883a 	add	r17,r20,r17
   37a9c:	a421883a 	add	r16,r20,r16
   37aa0:	e0001e26 	beq	fp,zero,37b1c <__call_exitprocs+0xf4>
   37aa4:	80804017 	ldw	r2,256(r16)
   37aa8:	e0801c26 	beq	fp,r2,37b1c <__call_exitprocs+0xf4>
   37aac:	bdffffc4 	addi	r23,r23,-1
   37ab0:	843fff04 	addi	r16,r16,-4
   37ab4:	8c7fff04 	addi	r17,r17,-4
   37ab8:	bd7ff91e 	bne	r23,r21,37aa0 <_gp+0xffff5f54>
   37abc:	008000b4 	movhi	r2,2
   37ac0:	10825104 	addi	r2,r2,2372
   37ac4:	10000926 	beq	r2,zero,37aec <__call_exitprocs+0xc4>
   37ac8:	a0800117 	ldw	r2,4(r20)
   37acc:	1000301e 	bne	r2,zero,37b90 <__call_exitprocs+0x168>
   37ad0:	a0800017 	ldw	r2,0(r20)
   37ad4:	10003226 	beq	r2,zero,37ba0 <__call_exitprocs+0x178>
   37ad8:	a009883a 	mov	r4,r20
   37adc:	98800015 	stw	r2,0(r19)
   37ae0:	00209440 	call	20944 <free>
   37ae4:	9d000017 	ldw	r20,0(r19)
   37ae8:	a03fe41e 	bne	r20,zero,37a7c <_gp+0xffff5f30>
   37aec:	dfc00a17 	ldw	ra,40(sp)
   37af0:	df000917 	ldw	fp,36(sp)
   37af4:	ddc00817 	ldw	r23,32(sp)
   37af8:	dd800717 	ldw	r22,28(sp)
   37afc:	dd400617 	ldw	r21,24(sp)
   37b00:	dd000517 	ldw	r20,20(sp)
   37b04:	dcc00417 	ldw	r19,16(sp)
   37b08:	dc800317 	ldw	r18,12(sp)
   37b0c:	dc400217 	ldw	r17,8(sp)
   37b10:	dc000117 	ldw	r16,4(sp)
   37b14:	dec00b04 	addi	sp,sp,44
   37b18:	f800283a 	ret
   37b1c:	a0800117 	ldw	r2,4(r20)
   37b20:	80c00017 	ldw	r3,0(r16)
   37b24:	10bfffc4 	addi	r2,r2,-1
   37b28:	15c01426 	beq	r2,r23,37b7c <__call_exitprocs+0x154>
   37b2c:	80000015 	stw	zero,0(r16)
   37b30:	183fde26 	beq	r3,zero,37aac <_gp+0xffff5f60>
   37b34:	95c8983a 	sll	r4,r18,r23
   37b38:	a0806217 	ldw	r2,392(r20)
   37b3c:	a5800117 	ldw	r22,4(r20)
   37b40:	2084703a 	and	r2,r4,r2
   37b44:	10000b26 	beq	r2,zero,37b74 <__call_exitprocs+0x14c>
   37b48:	a0806317 	ldw	r2,396(r20)
   37b4c:	2088703a 	and	r4,r4,r2
   37b50:	20000c1e 	bne	r4,zero,37b84 <__call_exitprocs+0x15c>
   37b54:	89400017 	ldw	r5,0(r17)
   37b58:	d9000017 	ldw	r4,0(sp)
   37b5c:	183ee83a 	callr	r3
   37b60:	a0800117 	ldw	r2,4(r20)
   37b64:	15bfbf1e 	bne	r2,r22,37a64 <_gp+0xffff5f18>
   37b68:	98800017 	ldw	r2,0(r19)
   37b6c:	153fcf26 	beq	r2,r20,37aac <_gp+0xffff5f60>
   37b70:	003fbc06 	br	37a64 <_gp+0xffff5f18>
   37b74:	183ee83a 	callr	r3
   37b78:	003ff906 	br	37b60 <_gp+0xffff6014>
   37b7c:	a5c00115 	stw	r23,4(r20)
   37b80:	003feb06 	br	37b30 <_gp+0xffff5fe4>
   37b84:	89000017 	ldw	r4,0(r17)
   37b88:	183ee83a 	callr	r3
   37b8c:	003ff406 	br	37b60 <_gp+0xffff6014>
   37b90:	a0800017 	ldw	r2,0(r20)
   37b94:	a027883a 	mov	r19,r20
   37b98:	1029883a 	mov	r20,r2
   37b9c:	003fb606 	br	37a78 <_gp+0xffff5f2c>
   37ba0:	0005883a 	mov	r2,zero
   37ba4:	003ffb06 	br	37b94 <_gp+0xffff6048>

00037ba8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   37ba8:	defffd04 	addi	sp,sp,-12
   37bac:	df000215 	stw	fp,8(sp)
   37bb0:	df000204 	addi	fp,sp,8
   37bb4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   37bb8:	d0271b45 	stb	zero,-25491(gp)
   37bbc:	e0bfff17 	ldw	r2,-4(fp)
   37bc0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   37bc4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   37bc8:	10000226 	beq	r2,zero,37bd4 <_exit+0x2c>
    ALT_SIM_FAIL();
   37bcc:	002af070 	cmpltui	zero,zero,43969
   37bd0:	00000106 	br	37bd8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   37bd4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   37bd8:	003fff06 	br	37bd8 <_gp+0xffff608c>
